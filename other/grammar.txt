{
  function composeBinaryOp(first, rest, assoc, exprType){
    assoc = assoc || "left";
    exprType = exprType || "binary_expression";
    if(!rest || rest.length === 0){
      return first;
    }
    if (assoc === "left"){
      var right = rest.pop();
      return {
        construct_type: exprType,
        operator: right[0],
        left: composeBinaryOp(first, rest, assoc, exprType),
        right: right[1],
        associativity: assoc
      }
    }
    else{
      var left = rest.shift();
      return {
        construct_type: exprType,
        operator: left[0],
        left: first,
        right: composeBinaryOp(left[1], rest, assoc, exprType),
        associativity: assoc
      }
    }
  }

  function absorb(eater, eaten){
    if (!eaten){ return eater; }
    for (var attr in eaten){
      if(attr != "start" && attr != "end"){
        eater[attr] = eaten[attr];
      }
    }
    return eater;
  }

  function track(obj, location, text){
    obj.code = {
      location : location,
      start : location.start.offset,
      text : text,
      line : location.start.line,
      column : location.start.column,
      end : obj.start + text.length
    };
    return obj;
  }

  function makeArray(obj){
    if (Array.isArray(obj)){
      return obj;
    }
    else{
      return [obj];
    }
  }

  function addImplicitJump(control){
    control.body.push({jump:"implicit"});
    return control;
  }

  function insideOut(obj, sub, result_in){
    sub = sub || "sub";
    var result = result_in || {};
    if (obj[sub]){
      var temp = insideOut(obj[sub], sub, result);
      delete obj[sub];
      temp[sub] = obj;
      return (result_in ? temp.sub : result.sub);
    }
    else{
      // No sub property means last piece
      result.sub = obj
      return obj;
    }
  }

  function postfixExp(ops, sub){
    if(ops.length == 0){
      return sub;
    }
    else{
      var op = ops.pop();
      op.operand = postfixExp(ops, sub);
      return op;
    }
  }

  var vars = {abstract: false};

  function arrayContains(arr, elem){
    return arr.indexOf(elem) != -1;
  }

  var _userTypeNames = {list_t:true, tree_t:true};

  function getUserTypeNames(){
    if (typeof Types !== "undefined"){
      return Types.userTypeNames;
    }
    else{
      return _userTypeNames;
    }
  }

  function isUserTypeName(name){
    return getUserTypeNames()[name];
  }

}



start
  = ws decls:(d:decl_or_comment ws {return d})* {return decls.filter(function(elem){return elem!=="comment";});}

decl_or_comment
  = comment {return "comment";}
  / declaration

comment
  = "//" [^\n]* "\n"
  / "/*" (!"*/".)* "*/"


statement
  = t:statement_tracked {return track(t, location(), text());}

statement_tracked
  = stmt:labeled_statement
    {return absorb({construct_type:"labeled_statement"}, stmt); }

  / stmt:compound_statement

  / stmt:selection_statement

  / stmt:iteration_statement

  / stmt:jump_statement

  / declaration_statement

  / expression_statement

  /*/ asm_statement
  / try_except_statement
  / try_finally_statement*/

labeled_statement
  = label:identifier ws ":" ws stmt:statement {return {label:label, statement: stmt}; }
  / "case" WS c:exp_const ws ":" ws stmt:statement { return {case:c, statement:stmt}; }
  / "default" ws ":" ws stmt:statement { return {default:true, stmt:stmt}; }

expression_statement
  = expr:expression? ws ";" { expr = expr || {construct_type: "null_statement"}; return {construct_type: "expression_statement", expression:expr}; }

compound_statement
  = "{" ws stmts:(stmt:statement ws {return stmt})* "}" { return {construct_type: "compound_statement", statements: stmts}; }

selection_statement
  = "if" ws "(" ws cond:expression ws ")" ws then:statement ws "else" ws e:statement {return {construct_type:"selection_statement", condition:cond, then:then, otherwise:e}; }
  / "if" ws "(" ws cond:expression ws ")" ws then:statement {return {construct_type:"selection_statement", condition:cond, then:then}; }
  /*/ "switch" ws "(" ws cond:expression ws ")" ws stmt:statement { return {construct_type:"switch_statement", condition:cond, stmt:stmt}; }*/

iteration_statement
  = "while" ws "(" ws cond:expression ws ")" ws body:statement
    { return {construct_type:"while_statement", condition:cond, body:body}; }

  / "do" !identifierChar ws body:statement ws "while" ws "(" ws cond:expression ws ")" ws ";" { return {construct_type:"dowhile_statement", condition:cond, body:body}; }

  / "for" ws "(" ws init:for_init_statement ws cond:expression ws ";" ws post:expression ws ")" ws body:statement
    { return {construct_type:"for_statement", condition:cond, initial:init, post:post, body:body}; }

for_init_statement
  = expression_statement
  / d:declaration_statement { return track(d, location(), text()); }

jump_statement
  = "break" !identifierChar ws ";" { return {construct_type:"break_statement"}; }
  / "continue" !identifierChar ws ";" {return {construct_type:"continue_statement"}; }
  / "return" !identifierChar ws ret:expression? ws ";" { return {construct_type:"return_statement", expression:ret}; }

declaration_statement
  = d:declaration {return absorb({construct_type:"declaration_statement"}, d); }




//Declarations


declaration
  = simple_declaration
  / class_declaration
  / function_definition

  /* TODO: template declaration */

simple_declaration
  = specs:decl_specifiers ! identifier ws declarators:declarator_list ws ";"
    { return track({construct_type: "simple_declaration", specs:specs, declarators:declarators}, location(), text()); }

declarator_list
  = first:declarator_init rest:(ws "," ws d:declarator_init {return d;})*
    {rest.unshift(first); return rest; }

class_declaration
  = spec:class_specifier ws ";" {
    return track(absorb({construct_type: "class_declaration"}, spec), location(), text());
  }

function_definition
  = specs:decl_specifiers ! identifier ws declarator:declarator ws body:function_body
    {return track({construct_type: "function_definition", specs:specs, declarator:declarator, body:body}, location(), text()); }


constructor_definition
  = name:class_name ws "(" ws args:argument_declaration_list ws ")" ws init:ctor_initializer? ws body:(function_body / ";" {return null;})
    {return track({construct_type: "constructor_definition", name:name, body:body, initializer:init, args: args}, location(), text()); }

destructor_definition
  = "~" name:class_name ws "(" ws ")" ws body:(function_body / ";" {return null;})
    {return track({construct_type: "destructor_definition", name:"~"+name, body:body}, location(), text()); }
  / "virtual" WS "~" name:class_name ws "(" ws ")" ws body:(function_body / ";" {return null;})
    {return track({construct_type: "destructor_definition", name:"~"+name, body:body, virtual:true}, location(), text()); }

ctor_initializer
  = ":" ws first:mem_initializer rest:(ws "," ws m:mem_initializer {return m;})* {rest.unshift(first); return rest;}

mem_initializer
  = i:identifier ws "(" ws args:exp_list? ws ")" {return track({construct_type: "member_initializer", member: i, args:args || []}, location(), text()); }

function_body
  = compound_statement

decl_specifiers
  = before:(s:decl_specifier WS {return s})* t:simple_type_name after:(WS s:decl_specifier {return s})*
    {
      before.push({typeSpec:t});
      var rest = before.concat(after);

      var declSpecs = {
        typeSpecs: [],
        storageSpecs: []
      };

      for(var i = 0; i < rest.length; ++i){
        var spec = rest[i];
        if (spec.typeSpec){
          declSpecs.typeSpecs.push(spec.typeSpec);
        }
        else if (spec.storageSpec){
          declSpecs.storageSpecs.push(spec.storageSpec);
        }
        else if (spec === "friend"){
          declSpecs.friend = true;
        }
        else if (spec === "typedef"){
          declSpecs.typedef = true;
        }
        else if (spec === "inline"){
          declSpecs.inline = true;
        }
        else if (spec === "explicit"){
          declSpecs.explicit = true;
        }
        else if (spec === "virtual"){
          declSpecs.virtual = true;
        }
      }

      return track(declSpecs, location(), text()); }

decl_specifier
  = t:type_specifier { return {typeSpec:t}; }
  / s:storage_class_specifier { return {storageSpec:s}; }
  / function_specifier
  / "typedef"
  / "friend"

type_specifiers
  = before:(s:type_specifier WS {return s})* t:simple_type_name after:(WS s:type_specifier {return s})*
    { before.push(t);
      before = before.concat(after);
      return track(before, location(), text()); }

type_specifier
  //= simple_type_name
  // / class_specifier
  = enum_specifier
  / "const"
  / "volatile"

storage_class_specifier
  = "register"
  / "static"
  / "thread_local"
  / "extern"
  / "mutable"

function_specifier
  = "inline"
  / "explicit"
  / "virtual"

simple_type_name "simple type name"
  = t:_simple_type_name !identifierChar {return t;}

_simple_type_name
  /*= qualified_type_name*/
  = "char"
  / "short"
  / "int"
  / "bool"
  / "string"
  / "long"
  / "signed"
  / "unsigned"
  / "float"
  / "double"
  / "void"
  / id:identifier &{return isUserTypeName(id.identifier);} {return id.identifier;}

enum_specifier
  = "enum" WS name:identifier? ws "{" first:enumerator rest:(ws "," ws e:enumerator {return e;})* ws "}" { return {enum:name, values:composeBinaryOp(first, rest)}; }

enumerator
  = name:identifier value:(ws "=" ws e:exp_const {return e;}) {return {name:name, value:value}; }




//Declarators

declarator_init
  = d:declarator ws i:initializer? {return track(absorb(d, {initializer: i}), location(), text());}

initializer
  = brace_or_equal_initializer
  / "(" ws args:exp_list? ws ")" {
    return {construct_type:"direct_initializer", args:args};
  }

brace_or_equal_initializer
  = "=" ws init:exp_assn {return {construct_type:"copy_initializer", args:[init]};}
  // / "=" ws "{" ws "}" {return [];}
  / "=" ws "{" ws init:initializer_list ws "}" {return init;}


initializer_list
  = first:exp_assn rest:(ws op:"," ws e:exp_assn {return e;})*
    {
      rest.unshift(first);
      return track({construct_type:"initializer_list", args: rest}, location(), text());
    }
  /// exp:expression {return exp;}

declarator
  = d:_declarator
    {
    //d = insideOut(d);
    var d2 = track(absorb({construct_type:"declarator"}, d), location(), text());
   return d2;
  }

abstract_declarator
  = d:_abs_declarator {
    //d = insideOut(d);
    var d2 = track(absorb({construct_type:"declarator", abstract: true}, d), location(), text());
    return d2;
  }

_declarator
  = "*" ws cv:cv_qualifier? ws decl:_declarator
    { return absorb({pointer:decl}, cv); }

  / "&" ws cv:cv_qualifier? ws decl:_declarator
    { return absorb({reference:decl}, cv); }

  / decl:declarator_simple postfixes:declarator_postfixes { return absorb(decl, {postfixes: postfixes}); }

  / declarator_simple

_abs_declarator
  = "*" ws cv:cv_qualifier? ws decl:_abs_declarator
    { return absorb({pointer:decl}, cv); }

  / "&" ws cv:cv_qualifier? ws decl:_abs_declarator
    { return absorb({reference:decl}, cv); }

  / decl:abs_declarator_simple postfixes:declarator_postfixes { return absorb(decl, {postfixes: postfixes}); }

  / abs_declarator_simple



declarator_postfixes
  = (ws p:declarator_postfix {return p})+

declarator_postfix
  = "(" ws args:argument_declaration_list ws ")" ws cv:cv_qualifier?
    { return absorb({type:"function", args:args}, cv); }
  / "[" ws size:exp_const? ws "]"
    { return {type:"array", size:size}; }




declarator_simple
  = d:dname {return {name:d}; }

  /* TODO ptr to member/ "::*" ws cv_qualifier? WS _declarator */

  / "(" ws d:_declarator? ws ")" {return {sub:d};}


abs_declarator_simple
  /* TODO ptr to member/ "::*" ws cv_qualifier? WS _declarator */
  = "(" ws d:_abs_declarator? ws ")" {return {sub:d};}
  / "" {return {};}


dname = name
  /* / class_name
  / "~" ws class_name
  / typedef_name
  / qualified_type_name
  */


type_id
  = specs:type_specifiers ws decl:abstract_declarator
    { return track({specs:specs, declarator:decl}, location(), text()); }





cv_qualifier
  = "const" WS "volatile" { return {const: true, volatile: true}; }
  / "volatile" WS "const" { return {const: true, volatile: true}; }
  / "const" { return {const: true}; }
  / "volatile" { return {volatile: true}; }

argument_declaration_list
  /* TODO: ... args*/
  = first:argument_declaration rest:(ws "," ws arg:argument_declaration {return arg;})*
    { rest.unshift(first); return rest; }
  / "" {return [];}


argument_declaration

  = specs:decl_specifiers ws decl:declarator ws "=" ws init:exp_assn
    {return {construct_type:"parameter_declaration", declarator:decl, specs:specs, initializer:init}; }
  / specs:decl_specifiers ws decl:declarator
    {return track({construct_type:"parameter_declaration", specs:specs, declarator:decl}, location(), text()); }

  / specs:decl_specifiers ws decl:abstract_declarator ws "=" ws init:exp_assn
    {return {construct_type:"parameter_declaration", declarator:decl, specs:specs, initializer:init}; }
  / specs:decl_specifiers ws decl:abstract_declarator
    {return track({construct_type:"parameter_declaration", specs:specs, declarator:decl}, location(), text()); }

  /* TODO abstract arg declarations */

//Expressions

expression
  = first:exp_assn rest:(ws op:"," ws e:exp_assn {return [op,e];} )*
      { return track(composeBinaryOp(first, rest, "left", "comma_expression"), location(), text()); }
  / exp_assn

exp_assn
  = lhs:exp_unary ws op:"=" ws rhs:exp_assn { return track({construct_type: "assignment_expression", lhs:lhs, operator:op, rhs:rhs}, location(), text()); }
  / lhs:exp_unary ws op:op_comp_assn ws rhs:exp_assn { return track({construct_type: "compound_assignment", lhs:lhs, operator:op, rhs:rhs}, location(), text()); }
  / exp_cond

op_comp_assn
  = "*="
  / "/="
  / "%="
  / "+="
  / "-="
  / ">>="
  / "<<="
  / "&=" / "and_eq" !identifierChar {return "&=";}
  / "^=" / "xor_eq" !identifierChar {return "^=";}
  / "|=" / "or_eq" !identifierChar  {return "|=";}

exp_const
  = sub:exp_cond { sub.constant = true; return sub; }

exp_cond
  = condition:exp_or ws "?" ws then:expression ws ":" ws otherwise:exp_assn { return track({construct_type: "ternary_expression", condition:condition, then:then, otherwise:otherwise}, location(), text()); }
  / exp_or

exp_or
  = first:exp_and rest:(ws op:("||" / "or" !identifierChar) ws e:exp_and {return ["||",e];} )*
      { return track(composeBinaryOp(first, rest, "left"), location(), text()); }

exp_and
  = first:exp_or_bit rest:(ws op:("&&" / "and" !identifierChar) ws e:exp_or_bit {return ["&&",e];} )*
      { return track(composeBinaryOp(first, rest), location(), text()); }

exp_or_bit
  = first:exp_xor_bit rest:(ws op:("|" / "bitor" !identifierChar) ws e:exp_xor_bit {return ["|",e];} )*
      { return track(composeBinaryOp(first, rest), location(), text()); }

exp_xor_bit
  = first:exp_and_bit rest:(ws op:("^" / "xor") ws e:exp_and_bit {return ["^",e];} )*
      { return track(composeBinaryOp(first, rest), location(), text()); }

exp_and_bit
  = first:exp_eq rest:(ws op:("&" !"&" / "bitand" !identifierChar) ws e:exp_eq {return ["&",e];} )*
      { return track(composeBinaryOp(first, rest), location(), text()); }

exp_eq
  = first:exp_rel rest:(ws op:("==" / ("!=" / "not_eq" !identifierChar {return "!=";})) ws e:exp_rel {return [op,e];} )*
      { return track(composeBinaryOp(first, rest), location(), text()); }

exp_rel
  = first:exp_shift rest:(ws op:op_rel ws e:exp_shift {return [op,e];} )*
      { return track(composeBinaryOp(first, rest, "left"), location(), text()); }

op_rel
  = "<="
  / ">="
  / "<"
  / ">"

exp_shift
  = first:exp_add rest:(ws op:op_shift ws e:exp_add {return [op,e];} )*
      { return track(composeBinaryOp(first, rest, "left"), location(), text()); }

op_shift
  = "<<"
  / ">>"

exp_add
  = first:exp_mult rest:(ws op:op_add ws e:exp_mult {return [op,e];} )*
      { return track(composeBinaryOp(first, rest, "left"), location(), text()); }

op_add
  = "+"
  / "-"

exp_mult
  = first:exp_pm rest:(ws op:op_mult ws e:exp_pm {return [op,e];} )*
      { return track(composeBinaryOp(first, rest), location(), text()); }

op_mult
  = "*"
  / "/"
  / "%"

exp_pm
  = first:exp_cast rest:(ws op:op_pm ws e:exp_cast {return [op,e];} )*
      { return track(composeBinaryOp(first, rest), location(), text()); }

op_pm
  = ".*"
  / "->*"

exp_cast
  = "(" ws t:type_id ws ")" ws sub:exp_cast {
      return track({construct_type: "cast_expression", type:t, operand:sub}, location(), text());
}
  / exp_unary

exp_unary
  = op:"++" ws sub:exp_unary {
      return track({construct_type: "prefix_increment_expression", operator:op, operand:sub}, location(), text());
}
  / op:"--" ws sub:exp_unary {
      return track({construct_type: "prefix_decrement_expression", operator:op, operand:sub}, location(), text());
}
  / op:op_unary ws sub:exp_cast {
      return track(absorb({operand:sub}, op), location(), text());
}
  / op:"sizeof" ws sub:exp_unary {
      return track({construct_type: "sizeof_expression", operator:"sizeof", operand:sub}, location(), text());
}
  / op:"sizeof" ws "(" ws sub:type_name ws ")" {
      return track({construct_type: "sizeof_type_expression", operator:"sizeof", operand:sub}, location(), text());
}
  / exp_new
  / exp_delete

op_unary
  = "*" {return {construct_type: "dereference_expression", operator: "*"};}
  / "&" {return {construct_type: "address_of_expression",   operator: "&"};}
  / "+" {return {construct_type: "unary_plus_expression", operator: "+"};}
  / "-" {return {construct_type: "unary_minus_expression", operator: "-"};}
  / "!" {return {construct_type: "logical_not_expression", operator: "!"};}
  / "not" !identifierChar {return {construct_type: "logical_not_expression", operator: "!"};}
  / "~" {return {construct_type: "bitwise_not_expression", operator: "~"};}
  / "compl" {return {construct_type: "bitwise_not_expression", operator: "~"};}

exp_new
  = "new" WS id:new_type_id ws init:new_initializer? {
    return track(absorb({construct_type: "new_expression", initializer: init}, id), location(), text());
  }
  / "new" ws "(" ws id:type_id ws ")" ws init:new_initializer? {
    return track(absorb({construct_type: "new_expression", initializer: init}, id), location(), text());
}

  /*  / exp_dealloc
  */


new_type_id
  = specs:type_specifiers decl:(ws id:new_declarator {return id;})? {
    return track({specs:specs, declarator:decl}, location(), text());
  }


new_declarator = d:_new_declarator {
  //d = insideOut(d);
  var d2 = track(absorb({construct_type:"declarator"}, d), location(), text());
  return d2;

}

_new_declarator
  = "*" ws cv:cv_qualifier? ws decl:_new_declarator?
    { return absorb({pointer:decl}, cv); }

  / "&" ws cv:cv_qualifier? ws decl:_new_declarator?
    { return absorb({reference:decl}, cv); }

  / postfixes:new_declarator_postfixes { return {postfixes: postfixes}; }


new_declarator_postfixes
  = (ws p:new_declarator_postfix {return p;})+

new_declarator_postfix
  = "[" ws size:exp_assn? ws "]"
    { return {type:"array", size:size}; }


new_initializer
  = "(" ws args:exp_list? ws ")" {return {args:args || []};}


exp_delete
  = "delete" WS t:exp_cast {
    return track({construct_type: "delete_expression", operand: t}, location(), text());
  }
  / "delete" ws "[" ws "]" WS t:exp_cast {
    return track({construct_type: "delete_array_expression", operand: t}, location(), text()); }
  / exp_postfix



exp_postfix
  = "static_cast" ws "<" ws t:type_name ws ">" ws "(" ws sub:exp_cast ws ")"
    { return track({construct_type: "static_cast_expression", type: t, operand:sub}, location(), text());}
  / "dynamic_cast" ws "<" ws t:type_name ws ">" ws "(" ws sub:exp_cast ws ")"
    { return track({construct_type: "dynamic_cast_expression", type: t, operand:sub}, location(), text());}
  / "reinterpret_cast" ws "<" ws t:type_name ws ">" ws "(" ws sub:exp_cast ws ")"
    { return track({construct_type: "reinterpret_cast_expression", type: t, operand:sub}, location(), text());}
  / "const_cast" ws "<" ws t:type_name ws ">" ws "(" ws sub:exp_cast ws ")"
    { return track({construct_type: "const_cast_expression", type: t, operand:sub}, location(), text());}
  / sub:(exp_construct / exp_primary) ops:(ws op:op_postfix {return op;} )*
      { return ops.length > 0 ? track(postfixExp(ops, sub), location(), text()) : sub;}

op_postfix
  = "[" ws sub:expression ws "]" { return track({construct_type:"subscript_expression", arg:sub}, location(), text()); }
  / "(" ws args:exp_list? ws ")" { return track({construct_type: "function_call_expression", args: args || []}, location(), text()); }
  / "." ws name:name { return track({construct_type: "dot_expression", member: name}, location(), text()); }
  / "->" ws name:name  { return track({construct_type: "arrow_expression", member: name}, location(), text()); }
  / "++" { return track({construct_type: "postfix_increment_expression"}, location(), text()); }
  / "--" { return track({construct_type: "postfix_decrement_expression"}, location(), text()); }

exp_construct
  = type:simple_type_name ws "(" ws args:exp_list? ws ")" {
    return track({construct_type: "construct_expression", type:type, args:args || []}, location(), text());
}

type_name
  = simple_type_name

exp_list
  = first:exp_assn rest:(ws "," ws e:exp_assn {return e;} )*
      { rest.unshift(first); return rest; }

exp_primary
  = "(" ws sub:expression ws ")" {return track({construct_type: "parentheses_expression", subexpression:sub}, location(), text());}
  / literal
  / "this" !identifierChar {return track({construct_type: "this_expression"}, location(), text()); }
  / exp_id

exp_id
  = id:(qualified_id / unqualified_id) { return track(absorb({construct_type: "identifier_expression"}, id), location(), text()); }


unqualified_id
  = name

qualified_id
  = n:nested_name_specifier ws u:unqualified_id {
    n.push(u);
    return {identifier: n};
  }

nested_name_specifier
  = (id:(type_name_id / namespace_name) ws "::" ws {return id;})+
  / "::" ws { return [];}

type_name_id
  = id:type_name
    {return track({identifier: id}, location(), text());}

namespace_name
  = identifier
name
  = operator_function_id
  / identifier

operator_function_id
  = "operator" ws op:overloadable_op
{return track({identifier: "operator"+op, operator: op}, location(), text());}

overloadable_op
  = "new[]"
  / "delete[]"
  / "new"
  / "delete"
  / "->*" / ">>=" / "<<="
  / "+=" / "-=" / "*=" / "/=" / "%=" / "^="
  / "&=" / "|=" / "<<" / ">>" /  "==" / "!="
  / "<=" / ">=" / "&&" / "||" / "++" / "--"
  / "->" / "()" / "[]"
  / "+" / "-" / "*" / "/" / "%" / "^" / "&"
  / "|" / "~" / "!" / "=" / "<" / ">" / ","

unoverloadable_op
  = "." / ".*" / "::" / "?:"

literal
  = lit:literal_float
    {return track({construct_type: "literal", type:"float", value:lit}, location(), text());}
  / lit:literal_int
    {return track({construct_type: "literal", type:"int", value:lit}, location(), text());}
  / lit:literal_char
    {return track({construct_type: "literal", type:"char", value:lit}, location(), text());}
  / lit:literal_string
    {return track({construct_type: "literal", type:"string", value:lit}, location(), text());}
  / lit:literal_boolean
    {return track({construct_type: "literal", type:"bool", value:lit}, location(), text());}

literal_int
  = neg:"-"? digits:[0-9]+ { return parseInt((neg ? neg : "") + digits.join("")); }

literal_float
 = neg:"-"? digits:[0-9.]+ & {return digits.indexOf(".") == digits.lastIndexOf(".") && digits.indexOf(".") != -1;} { return parseFloat((neg ? neg : "") + digits.join("")); }

literal_char
  = "'" char:([^\'\\\n] / escape) "'" { return char; }

literal_string
  = '"' chars:([^\"\\\n] / escape)* '"' { return chars.join(""); }

literal_boolean
  = "true" !identifierChar {return true;}
  / "false" !identifierChar {return false;}

escape
  = simple_escape
  / octal_escape
  /*/ hexadecimal_escape*/

simple_escape
  = "\\\"" //{ return "\""; }
  / "\\'"  //{ return "'"; }
  / "\\?"  //{ return "\?"; }
  / "\\\\" //{ return "\\"; }
  / "\\a"  //{ return "\a"; }
  / "\\b"  //{ return "\b"; }
  / "\\f"  //{ return "\f"; }
  / "\\n"  //{ return "\n"; }
  / "\\r"  //{ return "\r"; }
  / "\\t"  //{ return "\t"; }
  / "\\v"  //{ return "\v"; }
  / "\\0"  //{ return "\0"; }

octal_escape
  = [0-8]
  / [0-8][0-8]
  / [0-8][0-8][0-8]


identifier "identifier"
  = first:identifierFirstChar rest:identifierChar*
    {return track({identifier: first + rest.join("")}, location(), text());}

identifierChar = [a-zA-Z0-9_]

identifierFirstChar = [a-zA-Z_]


ws "optional whitespace"
  = [ \t\n\r]* comment ws
  / [ \t\n\r]*

WS "whitespace"
  = comment WS
  / [ \t\n\r]+ comment ws
  / [ \t\n\r]+



class_name
  = identifier
  // / simple_template_id

class_specifier
  = head:class_head !{getUserTypeNames()[head.name.identifier]=true;} ws "{" ws mems:member_specification* ws "}"
    { return track({head: head, member_specs: mems}, location(), text()); }

class_head
  = key:class_key WS name:class_head_name bases:(WS b:base_clause {return b;})?
    { return track({key:key, name:name, bases:bases}, location(), text()); }
  // = key:class_key WS base:base_clause?
  //   { return track({key:key, base:base}, location(), text()); }

class_head_name
  = /* nested_name_specifier? ws */ class_name

class_key
  = "class"
  / "struct"
  / "union"

member_specification
  = members:(m:member_declaration ws {return m})+
    { return {members: members}; }
  / access:access_specifier ws ":" ws members:(m:member_declaration ws {return m})*
    { return {members: members, access: access}; }

access_specifier
  = "private"
  / "protected"
  / "public"

member_declaration
  = specs:decl_specifiers !identifier ws declarators:member_declarator_list ws ";"
    { return track({construct_type: "member_declaration", specs:specs, declarators:declarators}, location(), text()); }
  / c:constructor_definition ws ";"? { return c; }
  / d:destructor_definition ws ";"? { return d; }
  / f:function_definition ws ";"? { return f; }



member_declarator_list
  = first:member_declarator rest:(ws "," ws d:member_declarator {return d;})*
    {rest.unshift(first); return rest; }

member_declarator
  = d:declarator ws "=" ws "0" {d.pureVirtual = true; return d;}
  / d:declarator ws i:brace_or_equal_initializer {d.init = i; return d;}
  / d:declarator

base_clause
  = ":" ws b:base_specifier_list {return b};

base_specifier_list
  = first:base_specifier rest:(ws "," ws b:base_specifier {return b;})*
    {rest.unshift(first); return rest; }

base_specifier
  = "virtual" WS a:(a:access_specifier WS {return a;}) c:qualified_class_name{
    return {name: c, virtual: true, access: a};}

  / a:(a:access_specifier WS {return a;}) "virtual" WS c:qualified_class_name{
    return {name: c, virtual: true, access: a};}

  / a:access_specifier WS c:qualified_class_name{
    return {name: c, access: a};}

  / c:qualified_class_name{
    return {name: c};}

  
qualified_class_name
  = n:nested_name_specifier ws c:class_name{
    n.push(c);
    return n;}
  / class_name






