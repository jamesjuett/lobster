{
  "num_total": 426,
  "num_groups": 253,
  "num_to_grade": 182,
  "num_parsed": 212,
  "num_failed": 41,
  "num_single": 224,
  "num_test_cases_passed": 71,
  "num_runtime_event": 54,
  "group_lengths": [
    41,
    32,
    20,
    18,
    15,
    10,
    7,
    7,
    4,
    4,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  ],
  "groups": [
    {
      "group": 0,
      "parsed": true,
      "num": 41,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root) {\n    return 0;\n}\n\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(!root)\n  return 0;\nif(root->datum == compare)\n  return countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\nelse\n  return countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "\nif(!root) { return 0; }\n\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "    if (!root) {\n        return 0;\n    }\n    if (root->datum == compare) {\n        return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    }\n    else {\n        return 0 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    }",
        "if (!root) return 0;\nif (root->datum == compare) {\n    return 1 + countEqual(root->left) + countEqual(root->right);\n} else {\n    return countEqual(root->left) + countEqual(root->right);\n}",
        "if(!root)\n    return 0;\nif(root->datum == compare)\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nelse\n    return countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root)\n    return 0;\nif(root->datum == compare)\n    return 1 + countEqual(root->right) + countEqual(root->left);\nelse\n    return 0 + countEqual(root->right) + countEqual(root->left);",
        "if (!root) return 0;\nif (root->datum == compare) return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nelse return countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(!root){\n    return 0;\n}\nif (root->datum==compare){\n    return 1+countEqual(root->left, compare)+countEqual(root->right, compare);\n}\nelse{\n    return countEqual(root->left, compare)+countEqual(root->right, compare);\n}",
        "if (!root) {\nreturn 0;\n}\n\nif (root->datum == compare) {\nreturn 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n",
        "if(!root) return 0;\nif(root->datum == compare) return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nelse return countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left) + countEqual(root->right);\n}\nelse {\n    return countEqual(root->left) + countEqual(root->right);\n}",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(!root) {\n    return 0;\n}\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->right, compare), countEqual(root->left, compare);\n}\nelse {\n    return countEqual(root->right, compare), countEqual(root->left, compare);\n}\n",
        "    if (!root) {\n      return 0;\n    }\n    if (root->datum == compare) {\n      return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    }\n    else {\n      return countEqual(root->left, compare) + countEqual(root->right, compare);\n    }",
        "if (!root) {return 0;}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (!root) {\n    return 0; // no values match compare because there is none\n}\n// if the root matches, add one and find others in left and right subtrees\nif (root->datum == compare) { \n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n// if the root doesn't match, still look in left and right subtrees\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n",
        "if (!root) return 0;\nif (root->datum == compare) \n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nelse\n    return countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) return 0;\n\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    }\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n",
        "if (!root) return 0;\n\nif (root->datum == compare) {\n    return countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\n} else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (!root) {\n    return 0;\n}\n\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(!root){\n    return 0;\n}\nif(root -> datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse \n    return countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) +\n           countEqual(root->right, compare);\n} else {\n    return 0 + countEqual(root->left, compare) +\n           countEqual(root->right, compare);\n}",
        "if(!root) {return 0;}\n\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right,compare);\n}else {\n    return 0 + countEqual(root->left, compare) + countEqual(root->right,compare);\n}",
        "if(!root) {\nreturn 0;\n}\nif(root->datum == compare) {\n  return 1 + countEqual(root->left,compare)+countEqual(root->right,compare);\n}\nelse {\n  return countEqual(root->left,compare) + countEqual(root->right,compare);\n}",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (!root) {\nreturn 0;\n}\nif (root->datum == compare) {\nreturn 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(!root){\n        return 0; \n}\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare)\n             + countEqual(root->right, compare); \n}else{\n        return countEqual(root->left, compare) + \n                countEqual(root->right, compare); \n}",
        "if(!root) return 0;\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(!root){return 0;}\nif(root->datum == compare){\n    return 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}\nelse {\n     return countEqual(root->right, compare) + countEqual(root->left, compare);\n}",
        "if(!root)\n{\n    return 0;\n}\nif(root->datum == compare)\n{\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse\n{\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(!root) return 0;\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse{\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (!root) { return 0; }\n\nif (root->datum == compare) {\n    return 1 + countEqual(node->left, compare) + countEqual(node->right, compare);\n}\nelse {\n    return countEqual(node->left, compare) + countEqual(node->right, compare);",
        "if(!root){\n    return 0;\n    }\nif(root->datum == compare){\n    return 1 + countEqual(root->right) + countEqual(root->left);\n}\nelse{\n    return countEqual(root->right) + countEqual(root->left);\n}",
        "if(!root){return 0;}\nif(root->datum == compare){\n    return 1 + countEqual(root->next,compare);\n}\nelse{\n    return countEqual(root->next,compare);\n}",
        "if (!root) return 0;\n\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 1,
      "parsed": true,
      "num": 32,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root){\n    return 0;\n}\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root){\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left. compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left. compare) + countEqual(root->right, compare);",
        "if (!root) {return 0;}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root){\n    return 0;\n}\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root){\n    return 0;\n}\nif (root->datum == compare){\nreturn countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n  return 0;\n}\nif (root->datum == compare) {\n  return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root) return 0;\nif(root->datum == compare){\nreturn 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n return 0;\n}\nif (root->datum == compare) {\n return 1;\n}\n return countEqual(root->right, compare) + countEqual(root->left, compare);",
        "if (!root){\n    return 0;\n}\nif (root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root){\n    return 0;\n}\nif(root->datum == compare){\n    return 1 + countEqual(root->right) + countEqual(root->left);\n}\nreturn countEqual(root->right) + countEqual(root->left);",
        "if(!root){return 0;}\nif(root->datum == compare){\n    return 1 + countEqual(root->left,compare) + countEqual(root->right,compare);\n}\nreturn countEqual(root->left,compare) + countEqual(root->right,compare);",
        "if (!root) return 0; \nif (root->datum == compare) \n    return 1 + countEqual(root->right, compare) + countEqual(root->left,compare); \nreturn countEqual(root->right, compare) + countEqual(root->left,compare); ",
        "if(!root){\n    return 1;\n}\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root){\n    return 0;\n}\nif(root->datum == compare){\n    return countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root){\nreturn 0;\n}\nif(root->datum == compare){\nreturn 1 + countEqual(root->left,compare) + countEqual(root->right,compare);\n}\nreturn countEqual(root->left,compare) + countEqual(root->right,compare);",
        "if (!root){ return 0;}\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0; \n}\nif (root-> datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare); \n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare); ",
        "if(!root) {\n    return 0;\n}\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root) { \n    return 0;\n} \nif(root->datum == compare) { \n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare); \n} \nreturn countEqual(root->left, compare) + countEqual(root->right, compare); \n ",
        "if(!root) {\n    return 0;\n}\nif(root->datum == compare) {\n    return (1 + countEqual(root->right, compare) + countEqual(root->left,compare));\n}\nreturn (0 + countEqual(root->right, compare) + countEqual(root->left,compare));",
        "if(!root){\n    return 0;\n}\nif(root->datum == compare)\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "// base case\nif (!root) return 0;\n\nif (root->datum == compare)\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);\n",
        "if (!root){\n    return 0;\n}\nif (root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\n\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root)\n    return 0;\nif(root->datum == compare)\n    return 1 + countEqual(root->right,compare) + countEqual(root->left,compare);\nreturn countEqual(root->right,compare) + countEqual(root->left,compare);"
      ]
    },
    {
      "group": 2,
      "parsed": true,
      "num": 20,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root) {\n    return 0;\n}\nelse if (root -> datum == compare) {\n    return 1 + countEqual(root -> left, compare) + countEqual(root -> right, compare);\n}\nelse {\n    return countEqual(root -> left, compare) + countEqual(root -> right, compare);\n}",
        "if(!root)\n{\n    return 0;\n}\nelse if(root->datum == compare)\n{\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse\n{\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (!root) return 0;\nelse if (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) +\n        countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) +\n        countEqual(root->right, compare);\n}",
        "if(!root) { return 0; }\nelse if(root->datum == compare) { \n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare); \n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(!root){\n    return 0;\n}\nelse if(root->datum == compare){\n    return countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\n}\nelse{\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (!root) {\n    return 0;\n}\nelse if (root->datum == compare) {\n    return 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}\nelse {\n    return countEqual(root->right, compare) + countEqual(root->left, compare);\n}",
        "if (!root) return 0;\nelse {\n    if (root->datum == compare) {\n        return 1 + countEqual(root->left,compare) + countEqual(root->right,compare);\n    }\n    else {\n        return countEqual(root->left,compare) + countEqual(root->right,compare);\n    }\n}",
        "if(!root)\n    return 0;\nelse if(root->datum == compare)\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nelse\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n",
        "if (!root) {\n return 0;\n} else if (root->datum == compare) {\n return 1 + coutEqual(root->left, compare) + coutEqual(root->right, compare);\n} else {\n return coutEqual(root->left, compare) + coutEqual(root->right, compare);\n}",
        "if(!root){\nreturn 0;\n}\nelse if (root->datum == compare){\n    return 1 + countEqual(root->right, compare) +countEqual(root->left,compare);\n}\nelse{\n    return countEqual(root->right, compare) + countEqual(root->left,compare);\n}",
        "if (!root) {\n    return 0;\n} else if (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (!root){\n    return 0; \n}\nelse{\n    if (root->datum == compare){\n        return 1 + countEqual(root->left) + countEqual(root->right);\n    }\n    else{\n         return countEqual(root->left) + countEqual(root->right);\n     }\n}\n\n",
        "if(!root){\n    return 0;\n}\nelse if(root->datum == compare){\n    return 1 + countEqual(root->right,compare) + countEqual(root->left,compare);\n}\nelse{\n    return countEqual(root->right,compare) + countEqual(root->left,compare);\n}",
        "if(!root){\n    return 0;\n}\nelse if(root->datum == compare){\n    return 1 + countEqual(root->right, compare) + countEqual(root->right, compare);\n}\nelse{\n    return countEqual(root->right, compare) + countEqual(root->right, compare);\n}",
        "if (!root) {\n    return 0;\n} \nelse if (root->datum == compare) {\n    return 1 + countEqual(root->right, compare)+ countEqual(root->left, compare);\n} else {\n    return countEqual(root->right, compare)+ countEqual(root->left, compare);\n}",
        "// nothing left\nif (!root) {\n    return 0;\n}\n\n// same\nelse if (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    \n}\n\n// not same\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n",
        "if (!root) { return 0; }\nelse {\n    if (root->datum == compare) {\n        return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    }\n    else {\n        return countEqual(root->left, compare) + countEqual(root->right, compare);\n    }\n}",
        "if (!root) { return 0; }\nelse if (root->datum == compare) {\n    return countEqual(root->left) + countEqual(root->right) + 1;\n}\nelse {\n    return countEqual(root->left) + countEqual(root->right);\n} ",
        "if (!root) {\n    return 0;\n    }\nelse if (root->datum == compare) {\nreturn countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\n}\nelse {\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(!root) {return 0;}\nelse if(root->datum == compare) {\n    return 1 + countEqual(root-left, compare) + countEqual(root->left, compare);\n} else {\n    return countEqual(root-left, compare) + countEqual(root->left, compare);\n}\n\n\n"
      ]
    },
    {
      "group": 3,
      "parsed": true,
      "num": 18,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(root==0){\n    return 0;\n}\nif(root->datum==compare){\n    return 1+ countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (root == 0) {\n    return 0;\n}\nif ( root->datum == compare ) {\n    return 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}\nreturn 0 + countEqual(root->right, compare) + countEqual(root->left, compare);",
        "if (root == 0) return 0;\nif (root -> datum == compare) return 1 + countEqual(root->left,compare) + countEqual(root->right, compare);\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (root == 0) {\n    return 0;\n}\n\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);\n\n",
        "if (root == 0) return 0;\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if( root == 0 )\n    return 0;\nif( root->datum == compare){\n    return 1 + countEqual( root->left, compare ) + countEqual( root->right, compare);\n}\nreturn countEqual( root->left, compare ) + countEqual( root->right, compare);",
        "if(root == 0) //base case. null is not equal and has no further directions.\n    return 0;\nif(root->datum == compare) //node is equal. one plus related branches\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n//node not equal. add related branches.\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (root == 0)\n\treturn 0;\nif (root->datum == compare)\n{\n\treturn(1 + countEqual(root->right, compare) + countEqual(root->left, compare));\n}\nreturn(countEqual(root->right, compare) + countEqual(root->left, compare));",
        "if(root == 0) { return 0;}\nif(root->datum == compare){\n    return 1+ countEqual(root->left, compare)+countEqual(root->right,compare);\n}\nreturn countEqual(root->left, compare)+countEqual(root->right,compare);",
        "if(root==0){\n    return 0;\n}\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (root == 0) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(root == 0) {\n      return 0;\n   }\n   if(root->datum == compare) {\n      return(1 + countEqual(root->left, compare) + countEqual(root->right, compare));\n   }\n   return (countEqual(root->left, compare) + countEqual(root->right, compare));",
        "if(root == 0)\n    return 0;\nif(root->datum == compare)\n    return 1+countEqual(root->left,compare)+countEqual(root->right,compare);\nreturn 0+countEqual(root->left,compare)+countEqual(root->right,compare);\n\n",
        "if(root == 0) {\n    return 0;\n}\n\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(root == 0) {\n    return 0;\n}\nif(root->datum == compare) {\n    return 1 + countEqual(root->left,compare) + countEqual(root->right,compare);\n}\nreturn countEqual(root->left,compare) + countEqual(root->right,compare);\n    ",
        "if(root == 0)\n{\n    return 0;\n}\n\nif(root->datum == compare)\n{\n    return 1 + countEqual(root->right,compare) + countEqual(root->left,compare);\n}\n\nreturn countEqual(root->right,compare) + countEqual(root->left,compare);",
        "if (root == 0) {\n     return 0;\n}\n\nif (root->datum == compare) {\n    return countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\n}\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(root == 0) return 0;\n\nif(root->datum == compare)\n    return countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 4,
      "parsed": true,
      "num": 15,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (root == 0) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n    ",
        "if (root == 0){\n    return 0;\n}\n\nif (root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse{\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (root == 0) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1 + countEqual(root->left) + countEqual(root->right);\n}\nelse {\n    return countEqual(root->left) + countEqual(root->right);\n}",
        "if(root == 0) {\n    return 0;\n}\nif(root->datum == compare) {\n    return 1 + countEqual(root->left,compare) + countEqual(root->right,compare);\n} else {\n    return countEqual(root->left,compare) + countEqual(root->right,compare);\n}",
        "if(root == 0){\n    return 0;\n}\nif(root->datum == compare){\n    return 1 + countEqual(root->left,compare) + countEqual(root->right,compare);\n}else{\n    return countEqual(root->left.compare) + countEqual(root->right,compare);\n}",
        "if (root == 0){\n    return 0;\n}\n\nif (root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}else{\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n",
        "if(root == 0){\n    return 0;\n}\nif(root->datum == compare){\n    return 1+countEqual(root->right, compare) + (root->left,compare);\n}\nelse{\n    return countEqual(root->right, compare) + (root->left,compare);\n}",
        "// Base case\nif(root == 0){\n    return 0;\n}\n// Recursive case\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(root == 0)\n    return 0;\nif (root->datum == compare)\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nelse\n    return countEqual(root->left,compare) + countEqual(root->right, compare);",
        "if(root == 0) return 0;\nif(root->datum == compare) return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nelse{\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "// base case:\nif (root == 0) return 0; \n// recursive step\nif (root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual (root->right, compare); \n    }else{ \n    return countEqual(root->left, compare) + countEqual (root->right, compare); \n    }",
        "if (root == 0){\n    return 0;\n}\nif (root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}else{\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n",
        "if(root == 0) return 0;\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} else {\n    return 0 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if (root == 0){\n    return 0;\n}\nif(root->datum == compare){\nreturn 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} else {\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n\n",
        "if(root == 0){\nreturn 0;\n}\nif(root -> datum == compare){\nreturn 1+countEqual(root->left,compare) + countEqual(root->right,compare);\n}else{\nreturn countEqual(root->left,compare) + countEqual(root->right,compare);\n}"
      ]
    },
    {
      "group": 5,
      "parsed": true,
      "num": 10,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root)\n    return 0;\n\nint c = 0;\nif(root->datum == compare) {\n    c = 1;\n}\n\nreturn c + countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root){return 0;}\nint current = 0;\nif(root->datum == compare){current = 1;}\nreturn current + countEqual(root->right, compare) + countEqual(root->left, compare);\n",
        "if(!root) return 0;\nint x = 0;\nif(root->datum == compare) x = 1;\nreturn x + countEqual(root->right, compare) + countEqual(root->left, compare); ",
        "if (!root) {\n    return 0;\n}\nint count = 0;\nif (root->datum == compare) {\n    count = 1;\n}\nreturn count + countEqual(root->left, compare) + countEqual(root->right, compare); ",
        "    if(!root){\n        return 0;\n    }\n\n    int add = 0;\n    if(root->datum == compare){\n        add = 1;\n    }\n\n    return countEqual(root->left, compare) + countEqual(root->right, compare) + add;",
        "if(!root){\n    return 0;\n}\nint count = 0;\nif(root->datum == compare){\n    count = 1;\n}\nreturn count + countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root)\n{\n    return 0;\n}\n\nint thisOne = 0;\n\nif(root->datum == compare)\n{\n    thisOne = 1;\n}\n\nreturn thisOne + countEqual(root->left,compare) + countEqual(root->right,compare);",
        "if (!root) {\n  return 0;\n}\nint count = 0;\nif (root->datum == compare) {\n    count = 1;\n} \nreturn countEqual(root->left, compare) + count + countEqual(root->right, compare);",
        "if (!root) return 0;\nint result = 0;\nif (root->datum == compare) result = 1;\nreturn result + countEqual(root->left, compare) + countEqual(root->right, compare);\n",
        "if(!root) return 0;\nint add = 0;\nif(root->datum == compare) add = 1;\n\nreturn add + countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 6,
      "parsed": true,
      "num": 7,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (root == 0) {\n    return 0;\n}\nelse if (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n} ",
        "\nif (root == 0) {\n    return 0;\n}\nelse if (root->datum == compare) {\n   return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare)  ;\n}",
        "if(root==0)\n{\nreturn 0;\n}\nelse if(root->datum == compare)\n{\nreturn 1+countEqual(root->left,compare)+countEqual(root->right,compare);\n}\nelse\nreturn countEqual(root->left,compare)+countEqual(root->right,compare);",
        "if (root == 0) {\n    return 0;\n}\n\nelse if (root->datum == compare) {\n    return 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}\n\nelse {\n    return 0 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}",
        "if(root == 0){\nreturn 0;}\nelse if(root->datum == compare){\nreturn 1 + countEqual(root->right, compare) + countEqual(root->left, compare);}\nelse{\nreturn countEqual(root->right, compare) + countEqual(root->left, compare);}",
        "if (root == 0) {\n    return 0;\n} else {\n    if (root->datum == compare) {\n        return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    } else {\n        return countEqual(root->left, compare) + countEqual(root->right, compare);\n    }\n}",
        "if (root == 0)\n    return 0;\nelse {\n    if (root->datum == compare)\n        return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    else\n        return countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 7,
      "parsed": true,
      "num": 7,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root) return 0;\nreturn countEqual(root->left, compare) + countEqual(root->right, compare) + (root->datum == compare ? 1 : 0);",
        "if(!root) return 0;\nreturn (int)(root->datum == compare) + countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) return 0;\nreturn (root->datum == compare) +\n\tcountEqual(root->left, compare) +\n\tcountEqual(root->right, compare);",
        "   if(!root) return 0;\n   return countEqual(root->left, compare) + countEqual(root->right, compare) + (root->datum == compare ? 1 : 0);",
        "if (!root) {return 0;}\nreturn (root->datum == compare) + countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare) + (root->datum == compare);",
        "if(!root) {return 0;}\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 8,
      "parsed": true,
      "num": 4,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root) return 0;\nint sum = 0;\nif(root->datum == compare) sum++;\nreturn sum + countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nint count = 0;\nif (root->datum == compare) {\n    count++;\n}\nreturn count + countEqual(root->right, compare) + countEqual(root->left, compare);",
        "if (!root) return 0;\nint sum = 0;\nif (root->datum == compare) sum++;\nreturn sum + (countEqual(root->left, compare) || countEqual(root->right, compare));",
        "if(!root) return 0;\nint count = 0;\nif(root -> datum == compare) {\n    count ++;\n}\nreturn count + countEqual(root ->left, compare) + countEqual(root -> right, compare);"
      ]
    },
    {
      "group": 9,
      "parsed": true,
      "num": 4,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root) {\n    return 0;\n}\nint count = 0;\nif (root->datum == compare) {\n    count += 1;\n}\nreturn count + countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nint count = 0;\nif (root->datum == compare) {\n    count += 1;\n}\nreturn count + countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (!root) {\n    return 0;\n}\nint counter = 0;\nif (root->datum == compare) {\n    counter += 1;\n}\nreturn counter + countEqual(root->left, compare) + countEqual(root->right_compare);",
        "if(!root) return 0; //if no node, count is 0\nint sum_below = countEqual(root->left, compare) + countEqual(root->right, compare);\n//down left sum + down right sum\nif(root->datum == compare){\n    sum_below += 1;    //add in 1 if the current node matches\n}\nreturn sum_below; //send it up the chains"
      ]
    },
    {
      "group": 10,
      "parsed": true,
      "num": 3,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root){\n    return 0;\n}\nelse if(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if(!root){\n    return 0;\n}\nelse if (root->datum == compare){\n    return 1 + countEqual(root->left, compare) + count(root->right, compare);\n}\nreturn countEqual(root->left, compare) + count(root->right, compare);\n",
        "if(!root){return 0;}\nelse if(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 11,
      "parsed": true,
      "num": 3,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int count = 0;\nif (root->datum == compare){\ncount++;\n}\nif (root->left != 0){\ncount += countEqual(root->left, compare);\n}\nif (root->right != 0){\ncount += countEqual(root->right, compare);\n}\nreturn count;",
        "int found = 0;\nif (root->datum == compare) found++;\nif (root->left) found += countEqual(root->left, compare);\nif (root->right) found += countEqual(root->right, compare);\nreturn found;",
        "int count = 0;\nif(root->datum==compare)\n    count++;\nif(root->left!=0)\n    count+= countEqual(root->left, compare);\nif(root->right!=0)\n    count+= countEqual(root->right, compare);\nreturn count;"
      ]
    },
    {
      "group": 12,
      "parsed": true,
      "num": 3,
      "submissions": [
        "if(!node){return 0;}\nif(root->datum==compare){\nreturn 1+ countEqual(root->left,compare) +countEqual(root->right,compare);\n}\nelse{\nreturn countEqual(root->left,compare) +countEqual(root->right,compare);\n}",
        "if (!node) {\n    return 0;\n}\n\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return 0 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n",
        "if(!node){\nreturn 0;\n}\n\nif(root->datum == compare){\nreturn 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}\nelse{\nreturn countEqual(root->right, compare) + countEqual(root->left, compare);\n}"
      ]
    },
    {
      "group": 13,
      "parsed": true,
      "num": 3,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (root == 0)\n    return 0;\n\nint c = 0;\nif (root->datum == compare)\n    c = 1;\n    \nreturn c + countEqual(root->right, compare) + countEqual(root->left, compare);",
        "if(root==0){return 0;}\nint ans=0;\nif(root->datum==compare){\nans=1;\n}\nreturn ans+countEqual(root->left)+countEqual(root->right);",
        "if (root == 0) return 0;\nint now = 0;\nif (root->datum == compare) now = 1;\nreturn now + countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 14,
      "parsed": true,
      "num": 3,
      "submissions": [
        "if (!node) {\n    return 0;\n}\nif(node->datum == compare) {\n    return 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}\nreturn countEqual(root->right, compare) + countEqual(root->left, compare);\n",
        "if (!node) return false;\nif (node->datum == compare) return 1+countEqual(node->left, compare)+countEqual(node->right, compare);\nreturn countEqual(node->left, compare)+countEqual(node->right, compare);",
        "if (!node) return 0;\nif (node->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 15,
      "parsed": true,
      "num": 3,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root){\n    return 0;\n}\nint n = 0;\nif(root->datum == compare){\n    ++n;\n}\nreturn n + countEqual(root->left, compare) + countEqual(root->right, compare);\n\n",
        "if(!root) {return 0;}\nint count = 0;\nif(root->datum == compare) {++count;}\nreturn count + countEqual(node->left,compare) + countEqual(node->right,compare);",
        "if (!root) {\n    return 0;\n}\nint count = 0; \nif (root-> datum == compare) {\n    ++count;\n}\nreturn count + countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 16,
      "parsed": true,
      "num": 2,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (root == 0){\n    return 0;\n}\nreturn ((root->datum) == compare? 1: 0) + countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (root == 0) {\n\treturn 0;\n}\nreturn (root->datum == compare ? 1 : 0)\n\t+ countEqual(root->left, compare)\n\t+ countEqual(root->right, compare);"
      ]
    },
    {
      "group": 17,
      "parsed": true,
      "num": 2,
      "submissions": [
        "if (root == 0) { return 0; }\nint nodeSum = 0;\nif (root->datum == compare) { ++nodeSum; }\nnodeSum += countEqual(node->left, compare);\nnodeSum += countEqual(node->right, compare);\nreturn nodeSum;",
        "if(root == 0) return 0; //base case\nint x = 0; //create value to return\nif(root->datum == compare) ++x; //increase x if current node is compare\nx += countEqual(root->left, compare); //add countEqual of left subtree to x\nx += countEqual(root->right, compare); //add countEqual of right subtree to x\nreturn x;"
      ]
    },
    {
      "group": 18,
      "parsed": true,
      "num": 2,
      "submissions": [
        "if (!root) { return 0; }\nint addToCount = root->datum == compare ? 1 : 0;\nreturn addToCount + countEqual(root->left) + countEqual(root->right);",
        "if (!root) return 0;\nint add = (root->datum == compare);\nreturn add + countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 19,
      "parsed": true,
      "num": 2,
      "submissions": [
        "if (root == 0) return 0;\nbool is_equal = root->datum == compare;\nreturn (int) is_equal + countEqual(root->left, compare) + countEqual(root->right, compare);",
        "if (root == 0) {return 0;}\nbool isEqual = (root->datum == compare);\nreturn ((int)isEqual) + countEqual(root->left,compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 20,
      "parsed": true,
      "num": 2,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int c = 0;\nif(!root) return c;\nif(root->datum == compare) c++;\nif(root->left) c += countEqual(root->left, compare);\nif(root->right) c += countEqual(root->right, compare);\nreturn c;",
        "int count = 0;\nif (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    count++;\n}\nif (root->left) {\n    count += countEqual(root->left, compare);\n}\nif (root->right) {\n    count += countEqual(root->right, compare);\n}\nreturn count;\n"
      ]
    },
    {
      "group": 21,
      "parsed": true,
      "num": 2,
      "submissions": [
        "int count = 0;\nif(root == nulltr){\n  return zero;\n}\nif(root->datum == compare){\n   ++count;\n}\nreturn count + countEqual(root->left, compare) + countEqual(root->right, compare);",
        "int sum = 0;\nif(root == nullpr){\n    return sum;\n}\nif (root->datum == compare){\n    ++sum;\n}\n\nreturn sum + countEqual(root->left,compare) + countEqual(root->right,compare);"
      ]
    },
    {
      "group": 22,
      "parsed": true,
      "num": 2,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(root->datum == compare){\nreturn 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse{\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);\n}",
        "if(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 23,
      "parsed": true,
      "num": 2,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(root == 0) return 0;\nint count = root->datum == compare ? 1 : 0;\nreturn count + countEqual(root->left, compare) + countEqual(root->right, compare);\n",
        "if(root == 0) return 0;\n\nint c = (root->datum == compare) ? 1 : 0;\nreturn c + countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 24,
      "parsed": true,
      "num": 2,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "//no loops or auxiliary functions\n//must be recursive\n//have a count\n//iterate through the entire tree\n//add a number to the count for each node in the tree that is equal to int compare\n//return the count",
        ""
      ]
    },
    {
      "group": 25,
      "parsed": true,
      "num": 2,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int sum = 0;\nif (root == 0) {\n    return 0;\n}\n\nif (root->datum == compare) {\n    sum += 1;\n}\n\nsum += countEqual(root->left, compare);\nsum += countEqual(root->right, compare);\nreturn sum;",
        "int total = 0;\nif (root == 0) {\nreturn 0;\n}\nif (root->datum == compare) {\ntotal += 1;\n}\ntotal += countEqual(root->left, compare);\ntotal += countEqual(root->right, compare);\nreturn total;\n"
      ]
    },
    {
      "group": 26,
      "parsed": true,
      "num": 2,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root) {\n    return 0;}\nint countLeft = countEqual (root -> left, compare);\nint countRight = countEqual (root -> right, compare);\nreturn (root->datum == compare ? 1 : 0)+countLeft+countRight;",
        "if(!root)\n    return 0;\n\nint left_equal = countEqual(root->left, compare);\nint right_equal = countEqual(root->right, compare);\n\n    \nreturn (root->datum == compare) + left_equal + right_equal;"
      ]
    },
    {
      "group": 27,
      "parsed": true,
      "num": 2,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int num = 0;\n\nif (root == 0) {\n    return 0;\n} \n\nif (root->datum == compare) num++;\n\nif (root->left != 0) {\n    num += countEqual(root->left, compare);\n}\n\nif (root ->right != 0) {\n    num += countEqual(root->right, compare);\n}\n\nreturn num;",
        "int num_nodes = 0;\nif (root == 0) {\n    return num_nodes;\n}\nif (root->datum == compare) {\n    num_nodes++;\n}\nif (root->left != 0) {\n    num_nodes += countEqual(root->left, compare);\n}\nif (root->right != 0) {\n    num_nodes += countEqual(root->right, compare);\n}\nreturn num_nodes;"
      ]
    },
    {
      "group": 28,
      "parsed": true,
      "num": 2,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if (!root) { \n    return 0;\n}\n\nif (root->datum == compare) {\n    return 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}",
        "if (!root) { return 0; }\n\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 29,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int count = 0;\nif(!node)\n    return count;\nif(node->datum == compare)\n    ++count;\nreturn count + countEqual(node->right, compare) + countEqual(node->left, compare);\n    "
      ]
    },
    {
      "group": 30,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "\nif (root && root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n"
      ]
    },
    {
      "group": 31,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(root->left == 0 && root->right == 0) {\n    if(root->datum == compare){\n        return 1;\n        }\n    else {\n        return 0;\n        }\n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n"
      ]
    },
    {
      "group": 32,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(!root) return 0;\n\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    \nreturn countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 33,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(root == 0){\n    return 0;\nif(root->datum == compare){\n    return 1 + countEqual(node->left) + countEqual(node->right):\n}\nelse{\n    return countEqual(node->left) + countEqual(node->right);"
      ]
    },
    {
      "group": 34,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root) return 0;\nint i = countEqual(root->right, compare) + countEqual(root->left, compare);\nif (compare == root->datum) return 1+i;\nelse return i;"
      ]
    },
    {
      "group": 35,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!root) {return 0;}\n\nif (*root = compare) {\nreturn 1 + countEqual(root->left) + countEqual(root->right);\n} else {\nreturn countEqual(root->left) + countEqual(root->right);\n}\n"
      ]
    },
    {
      "group": 36,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!node){\n    return 0;\n}\n\nelse{\n    if(root->datum == compare){\n        return 1;\n    }\n}\n\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 37,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "\tif (!root) {\n\t\treturn 0;\n\t}\n\tif (compare == root->datum) {\n\t\treturn 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n\t}\n\telse {\n\t\treturn countEqual(root->left, compare) + countEqual(root->right, compare);\n\t}"
      ]
    },
    {
      "group": 38,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (root == 0) {\n    return 0;\n}\nelse if (root->datum == compare) {\n    return 1;\n}\nint count = 0;\ncount += countEqual(root->left; compare);\ncount += countEqual(root->right; compare);"
      ]
    },
    {
      "group": 39,
      "parsed": false,
      "num": 1,
      "submissions": [
        "    if(root == 0){\n        return = 0;\n    }\n   // int leftCount = countEqual(root->left, compare)\n   // int rightCount    \n    else if(root->datum == compare){\n        return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    }"
      ]
    },
    {
      "group": 40,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int count = 0;\nif(!root){\n    return 0;\n} else if(root->datum == compare){\n    count++;\n}\nreturn count + countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 41,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!root) return 0;\nint didItContain;\nif (root->datum == compare) didItContain = 1;\nelse didItContain = 0;\nint leftSide = countEqual(node->left, compare);\nint rightSide = countEqual(node->right, compare);\nreturn (leftSide+rightSide+didItContain);"
      ]
    },
    {
      "group": 42,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int num_equal = 0;\nif(node == 0){\nreturn 0;\n}\nif(root->datum == compare){\nnum_equal++;\n}\nreturn num_equal + countEqual(root->left, compare) + countEqual(root->right, compare);\n"
      ]
    },
    {
      "group": 43,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(!root){\n    return 0;\n}\nif((root->right)->datum == compare && (root->left)->datum == compare){\n    return 2 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}\nif((root->right)->datum == compare || (root->left)->datum == compare){\n    return 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}\nif((root->right)->datum != compare && (root->right)->datum != compare){\n    return countEqual(root->right, compare) + countEqual(root->left, compare);\n}"
      ]
    },
    {
      "group": 44,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int total = 0;\nif(root = 0){\n    return total;}\nelse{\n    if(root->datum == compare){\n        ++total;}\n    return total + countEqual(root->right,compare) + countEqual(node->left,compare);}\nreturn total;"
      ]
    },
    {
      "group": 45,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int count = 0;  \nif (root->datum == compare) {\n    count++;\n} \nfor (int i = 0; i < datum; i++) {  \n    Node* child = root->datum[i];  \n    count += countEqual(child, x);  \n}  \nreturn count;  "
      ]
    },
    {
      "group": 46,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(root == 0) {\n    return 0;\n}\nint count = 0;\nif(root->datum == compare) {\n    count++;\n}\nreturn count + countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 47,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nif (root->datum == compare) {\n    ++count;\n}\nreturn count + countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 48,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!node){\n    return 0;\n}\nif (node->datum == compare){\n    return 1 + countEqual(node->left, compare);\n    return 1 + countEqual(node->right, compare);\n}\nelse{\n    return countEqual(node->left,compare);\n    return countEqual(node->right,compare);\n    "
      ]
    },
    {
      "group": 49,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root){\n    return(0);\n}else{\n    int num = 0;\n    if(root->datum == compare){\n        num = 1;\n    }\n    return(num + countEqual(root->left, compare) + countEqual(root->right, compare));\n}"
      ]
    },
    {
      "group": 50,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int equal = 0;\nif(root == 0) return 0;\nif(root->datum == compare) equal = 1;\nreturn equal + countEqual(root->left, compare) + countEqual(root->right, compare);\n"
      ]
    },
    {
      "group": 51,
      "parsed": true,
      "num": 1,
      "submissions": [
        "static int total = 0;\nif (!root) {\nreturn total;}\nif (root->left->datum == compare) {\ntotal = total + 1;\nroot = root->left;\ncountEqual(root,compare);\n}\nif (root->right->datum == compare) {\ntotal = total + 1;\nroot = root->right;\ncountEqual(root,compare);\n}\nreturn total;\n\n\n"
      ]
    },
    {
      "group": 52,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!(root->left) && !(root->right)){\n    if((root->datum) != compare){\n        return 0;}\n        return 1;}\n    bool truther = ((root->datum) == compare);\n    if(!(root->left)){\n        if(truther == true){\n            return 1 + countEqual(root->right, compare);}\n            return 0+countEqual(root->right,compare);}\n    if(!(root->right)){\n        if(truther == true){\n            return 1 + countEqual(root->left, compare);\n        }\n            return 0+countEqual(root->left,compare);\n    }\n    if(truther == true){\n        return 1 + countEqual(root->left,compare) + countEqual(root->right,compare);\n    }\n    return 0+countEqual(root->left,compare) + countEqual(root->right,compare);\n}"
      ]
    },
    {
      "group": 53,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "\tif (root == 0)\n\t{\n\t\treturn 0;\n\t}\n\tint count = 0;\n\tif (root->datum == compare)\n\t{\n\t\t++count;\n\t}\n\tint countLeft = countEqual(root->left, compare);\n\tint countRight = countEqual(root->right, compare);\n\treturn count + countLeft + countRight;"
      ]
    },
    {
      "group": 54,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!(root){\n    return 0;\n}\nif(root->datum == compare) {\n    return 1 + countEqual(root->left) + countEqual(root->right);\n}\nreturn countEqual(root->left) + countEqual(root->right);"
      ]
    },
    {
      "group": 55,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int total = 0;\nif (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    return 1;\n}\ntotal = total + countEqual(root->left, compare) + countEqual(root->right, compare);\nreturn total;"
      ]
    },
    {
      "group": 56,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(!root){\n    return 0;\n}\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nif(root->left){\n    return countEqual(root->left, compare);\n}\nreturn countEqual(root->right, compare);\n\n"
      ]
    },
    {
      "group": 57,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if (!root) {\n    return 0;\n}\nelse if (root->datum == compare) {\n    return 1 + (countEqual(root->left, compare) && countEqual(root->right, compare));\n}\nelse if (root->datum != compare) {\n    return (countEqual(root->left, compare) && countEqual(root->right, compare));\n}\n"
      ]
    },
    {
      "group": 58,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int numleft = 0;\nif((root->left)) numleft = countEqual(root->left, compare);\nint numright = 0;\nif((root->right)) numright = countEqual(root->right, compare);\n\nreturn numleft + numright + (root->datum == compare);"
      ]
    },
    {
      "group": 59,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "\nif (root == NULL){\n    return 0; \n}\n\nif (root -> left -> datum == compare){\n    return 1+ countEqual(root -> left, compare);\n}\n\nif (root -> right -> datum == compare){\n    return 1 +countEqual(root -> right, compare);\n}\n"
      ]
    },
    {
      "group": 60,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(node == 0) {\n    return 0;\n}\nif(compare == node->datum) {\n    return 1 + countEqual(node->left, compare) + countEqual(node->right, compare);\n}\nreturn countEqual(node->left, compare) + countEqual(node->right, compare);"
      ]
    },
    {
      "group": 61,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (root == 0)\n    return 0;\n\nint temp = countEqual(root->left, compare) + countEqual(root->right, compare);\n    \nif (root->datum == compare)\n    return 1 + temp;\n    \nreturn temp;"
      ]
    },
    {
      "group": 62,
      "parsed": false,
      "num": 1,
      "submissions": [
        "assert(root);\nint left = 0, right = 0;\nif(root->left)\n    left = countEqual(root->left, compare)\nif(root->right)\n    right = countEqual(root->right, compare)\nreturn ((root->datum == compare) ? 1 : 0) + left + right; \n    "
      ]
    },
    {
      "group": 63,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int total = 0;\nif (root == 0) {\n    return total;\nif (root->datum == compare) {\n    total++;\n}\ntotal += countEqual(root->left, compare);\ntotal += countEqual(root->right, compare);\nreturn total;"
      ]
    },
    {
      "group": 64,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int count = 0;\nif(root == 0)\n{\n    return 0;\n}\nif(root->datum == compare)\n{\n    count++;\n}\nreturn ( count + countEqual(root->left, compare) + countEqual(root->right, compare) );\n    "
      ]
    },
    {
      "group": 65,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!root) {\n    return 0;\n}\nelse if(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 66,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root) return 0;\nint lhs = countEqual(root->left);\nint rhs = countEqual(root->right);\nif(root->datum == compare) return 1 + lhs + rhs;\nreturn lhs + rhs;\n"
      ]
    },
    {
      "group": 67,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if (!root)\n    return 0;\nint ret = 0;\nif (root->datum == compare)\n{\n    ret += 1 + countEqual(root->left, compare);\n    ret += 1 + countEqual(root->right, compare);\n}\nreturn ret;"
      ]
    },
    {
      "group": 68,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "    if (root == 0) { return 0; }\n    else if (root->left == 0 && root->right == 0) {\n        if (root->datum == compare) { return 1;}\n        else { return 0; }\n    }\n    else if (root->left == 0) {//search on right\n        if (root->datum == compare) {return 1 + countEqual(root->right, compare);}\n        else {return countEqual(root->right, compare);}\n    }\n    else if(root->right == 0) {//search on left\n        if (root->datum == compare) {\n            return 1 + countEqual(root->left, compare);}\n        else {return countEqual(root->left, compare);} \n    }\n    else { // search on both sides\n        if (root->datum == compare) { return 1 + countEqual(root->left, compare) + countEqual(root->right, compare); }\n        else { return countEqual(root->left, compare) + countEqual(root->right, compare);  }\n    }"
      ]
    },
    {
      "group": 69,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if ( root == 0 )\n    throw compare;\nelse if (compare == root->datum) {\nreturn 1 + countEqual(root->left, compare);\n}\nelse {\n    return countEqual(root->left, compare);\n}\nif (root->left == 0) {\n    return countEqual(root->right, compare);\n    if(compare == root->datum) {\n        return 1 + countEqual(root->right, compare);\n    }\n}\n\n"
      ]
    },
    {
      "group": 70,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int data = 0;\nif(root == 0){return 0;}\nelse{\n    if(root->datum == compare){data += 1 + countEqual(root->left) + countEqual(root->right);}\n    else{data += 0 + countEqual(root->left) + countEqual(root->right);}\nreturn data;"
      ]
    },
    {
      "group": 71,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (root == 0) {\nreturn 0;\n}\n\ntotal = 0;\nif (root->datum == compare) {\n++total;\n}\n\ntotal += countEqual(root->left, compare);\ntotal += countEqual(root->right, compare);\nreturn total;"
      ]
    },
    {
      "group": 72,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int compare = 0;\n\nif(!root){\n    return compare;\n}\n\nif(root->datum == compare){\n    ++compare; \n}\n\ncompare += countEqual(root->left, compare); \ncompare += countEqual(root->right, compare); \nreturn compare; "
      ]
    },
    {
      "group": 73,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(Node==0)\n    return 0;\nif(Node->datum==compare)\n{\n    return 1;\n}\nif((!node->left) && (node->left->datum == compare))\n    count++;\nif((!node->right)&& (node->right->datum == compare))\n    count++;\nreturn count + countEqual(node->left,compare)+ countEqual(node->right,compare);"
      ]
    },
    {
      "group": 74,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "\tif (root->left) {\n\t\tif(root->datum == compare) {\n            return 1 + countEqual(root->left, compare);\n\t\t} else {\n            return 0 + countEqual(root->left, compare);\n\t\t}\n\t} else if(root->right) {\n        if (root->datum == compare) {\n            return 1 + countEqual(root->right, compare);\n        }\n        else {\n            return 0 + countEqual(root->right, compare);\n        }\n\t} else {\n        if (root->datum == compare) {\n            return 1;\n        } else {\n            return 0;\n        }\n\t}"
      ]
    },
    {
      "group": 75,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root) {return 0;}\nint left_num = 0;\nint right_num = 0;\nif (root->datum == compare) {\n    left_num = countEqual(root->left,compare) + 1;\n    right_num = countEqual(root->right,compare);\n}\nelse {\n    left_num = countEqual(root->left,compare);\n    right_num = countEqual(root->right,compare);\n}\nint count = right_num + left_num;\nreturn count;\n"
      ]
    },
    {
      "group": 76,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (root == 0) return 0;\nsumRoot = 0;\nif (root->datum == compare) sumRoot++;\nsumRoot += countEqual(root->left, compare);\nsumRoot += countEqual(root->right, compare);\nreturn sumRoot;"
      ]
    },
    {
      "group": 77,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root){\n    return 0;\n}\nelse{\nint sum = 0;\n    if(root->datum == compare){\n        ++sum;\n    }\n }   \n  return sum + countEqual(root->left, compare) + countEqual(root->right, compare);\n        "
      ]
    },
    {
      "group": 78,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int count=0;\n//base case \nif (!root) {\n  return 0;\n}\nif (root->datum==compare) {\n    count++;\n}\nif (root->left) {\n    int leftt=countEqual(root->left);}\nelse {leftt=0; }\nif (root->right) {\n    int rightt=countEqual(root->right); }\nelse {rightt=0;}\n\nreturn count+leftt+rightt;\n\n\n"
      ]
    },
    {
      "group": 79,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "  if (!root) {\n    return 0;\n  }\n  if (!root->left && !root->right) {\n    if (root->datum == compare) {\n      return 1;\n    }\n    return 0;\n  }\n  \n  if (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n  }\n  else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n  }"
      ]
    },
    {
      "group": 80,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(root == 0){\n    return 0;\n}\nelse{\n    if(*root == compare){\n        return 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n    }\n    else{\n        return countEqual(root->right, compare) + countEqual(root->left, compare);\n    }\n}"
      ]
    },
    {
      "group": 81,
      "parsed": false,
      "num": 1,
      "submissions": [
        "int count = 0;\nif(!root){\nreturn count;\n}\nif(root->left){\n    if(compare = root->left->datum){\n        count++;\n    }\n return countEqual(root->left, compare)\n}\n\nif(root->right){\n    if(compare = root->right->datum){\n        count++;\n    }\n return countEqual(root->right, compare)\n}\n\nreturn count;"
      ]
    },
    {
      "group": 82,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (root == 0) {\n  return 0;\n}\n\nint this_node_equal = static_cast<int>(root->datum == compare);\n\n// Not a binary tree, therefore must check every node\nreturn this_node_equal + countEqual(root->left, compare) +\n       countEqual(root->right, compare);"
      ]
    },
    {
      "group": 83,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(root == 0){\n    return 0;\n}\n\nint count = 0;\n\nif(root->datum == compare){\n    count++;\n}\n\ncount = countEqual(root->left,compare);\ncount = countEqual(root->right,compare);\n\nreturn count;"
      ]
    },
    {
      "group": 84,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(root == 0){ return 0;}\nelse if((*root).datum == compare){\n    return (1 + countEqual((*root).left, compare) + countEqual((*root).right, compare);\n}\nelse{\n    return (countEqual((*root).left, compare) + countEqual((*root).right, compare);\n}"
      ]
    },
    {
      "group": 85,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!(root)){\n    return 0;\n}\nif(root->datum == compare){\n    return 1 + countEqual(root->left,compare) + countEqual(root->right,compare);\n}\nelse {\n    return countEqual(root->left,compare) + countEqual(root->right,compare);\n}"
      ]
    },
    {
      "group": 86,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (root == 0) {\n    return 0;\n}\nint add = 0;\nif (compare == root){\n    add = 1;\n}\nif (root->right) {\n    return add + countEqual(root->right, compare);\n}\nif (root->left) {\n    return add + countEqual(root->left, compare);\n}\nreturn add;\n    "
      ]
    },
    {
      "group": 87,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!root){\n    return 0;\n}\nelse if (root->datum == compare ){\n    return countNotEqual(root->left, compare) + countNotEqual(root->right,compare);\n}\nelse if (root->datum > compare ){\n    return countNotEqual(root->left, compare) + countNotEqual(root->right,compare);\n}\nelse if (root->datum < compare ){\n    return countNotEqual(root->left, compare) + countNotEqual(root->right,compare);\n}\nelse{\n    return countNotEqual(root->left, compare) + countNotEqual(root->right,compare) + 1;\n}"
      ]
    },
    {
      "group": 88,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root){\n    return 0;\n}\nif(root->left != compare){\n    return countEqual(root->right,compare) + 1;\n    return countEqual(root->left,compare);\n}\nif(root->datum != compare){\n    return countEqual(root->right,compare);\n    return countEqual(root->left,compare);\n}\n    "
      ]
    },
    {
      "group": 89,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\n"
      ]
    },
    {
      "group": 90,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(root == 0) return 0;\n\nint count = root->datum == compare? 1 : 0;\ncount += countEqual(root->left, compare);\nreturn count += countEqual(root->right, compare);\n"
      ]
    },
    {
      "group": 91,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if (!root){\n    return 0;\n}\n//left sum \nint left_number = 0;\nint right_number = 0;\n\nif (root->datum == compare){\n    left_number = 1 + countEqual(root->left,compare);\n    right_number = 1 + countEqual(root->right,compare);\n}\nleft_number = countEqual(root->left,compare);\nright_number = countEqual(root->right,compare);\n\nif (left_number > right_number){\n    return left_number;\n}\nreturn right_number;"
      ]
    },
    {
      "group": 92,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int total = o;\nif (!root) return 0;\nif(root->datum == compare) {\ntotal = 1;\n}\nreturn total + countEqual(root->right,compare) + countEqual(root->left,compare);"
      ]
    },
    {
      "group": 93,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root){\n    return 0;\n}\nint count = 0;\nif(root->datum == compare){\n    count = 1;\n}\ncount = count + countEqual(root->left, compare);\ncount = count + countEqual(root->right, compare);\nreturn count;"
      ]
    },
    {
      "group": 94,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(root->left == 0 && root->right == 0){\n    if(root.datum == compare) return 1;\n    else return 0;\n}\n\nelse if( root.datum == compare)\nreturn 1 + countEqual(root->left) + countEqual(root->right);\n\nelse return countEqual(root->left) + countEqual(root->right);\n"
      ]
    },
    {
      "group": 95,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(!root) return 0;\nint count;\n\nif(root->datum == compare) {\n  count++;\n}\nif((!root->left) && (!root->right)) {\n  return count;\n}\nint l_count = countEqual(root->left, compare);\nint r_count = countEqual(root->right, compare);\nreturn count + l_count + r_count;"
      ]
    },
    {
      "group": 96,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(root == NULL){\n    return 0;\n}\nint num = 0;\nif(node->datum == compare){\n    return 1;\n}\nreturn(countEqual(node->left, compare) + countEqual(node->right, compare));"
      ]
    },
    {
      "group": 97,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!root) {return 0;}\nelse if (root == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} \nelse {\n   return countEqual(root->left, compare) + countEqual(root->right, compare);\n} "
      ]
    },
    {
      "group": 98,
      "parsed": false,
      "num": 1,
      "submissions": [
        "int count = 0;\nif (root == 0) {\nreturn 0;\n}\nif (root->datum == compare) {\nreturn 1 + (countEqual(root->left, compare)) + (countEqual(root->right, compare))\n}\nelse {\nreturn (countEqual(root->left, compare)) + (countEqual(root->right, compare))\n}\n\n"
      ]
    },
    {
      "group": 99,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int main(){\n"
      ]
    },
    {
      "group": 100,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!root) {\n    return 0;\n}\nelse if(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\nelse(){\n    return countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 101,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int count = 0;\nif(!root){ \n    return 0; \n}\nif(root->datum == compare){\n    count++;\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare) + count;"
      ]
    },
    {
      "group": 102,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "\nint count = 0;\nif (!root || root->datum != compare) {return count;}\n\nif (root->datum == compare) {\n    count++;\n}\n\nif (root->left && !root->right) {\n    return countEqual(root->left, compare);\n}\nelse if (root->right && !root->left) {\n    return countEqual(root->right, compare);\n}\n    return countEqual(root->left, compare) && countEqual(root->right, compare);\n"
      ]
    },
    {
      "group": 103,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int count = 0;\nif(root->left == 0 && root->right == 0){\n    if(*root == compare){\n\treturn 1;\n    }\n    return 0;\n}\nelse if(root->left == 0){\n    return count + countEqual(root->right, compare);\n}\nelse if(root->right == 0){\n    return count + countEqual(root->left, compare);\n}\nelse{\n    count += countEqual(root->left, compare);\n    count += countEqual(root->right, compare);\n    return count;\n}"
      ]
    },
    {
      "group": 104,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int counter = 0;\nif(root == 0) {\n    return counter;\n}\nelse {\n    if(root->datum == compare) {\n        counter++;\n    }\n    return counter + countEqual(root->right, compare) + countEqual(root->left, compare);\n}\n"
      ]
    },
    {
      "group": 105,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!node) {\n    return 0;\n}\n\nreturn (root->datum == compare ? 1 : 0) + countEqual(root->right, compare) + countEqual(root->left, compare);"
      ]
    },
    {
      "group": 106,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nif (!root) {\n    return count;\n}\nif (root->datum == compare) {\n    ++count;\n}\nreturn countEqual(root->right,compare) + countEqual(root->left,compare);"
      ]
    },
    {
      "group": 107,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if (root == 0)\n{\n    return 0;\n}\nif(root->datum == compare)\n{\n    return countEqual(root->right, compare) +1;\n    return countEqual(root->left, compare) +1;\n}\nelse\n{\n    return countEqual(root->right, compare);\n    return countEqual(root->left, compare);\n}"
      ]
    },
    {
      "group": 108,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (root == 0)    return 0;\nint res = 0;\nif (root->datum != compare){\nres = 1;\n}\nreturn res + countEqual(root->left, compare) + countEqual (root->right, compare);"
      ]
    },
    {
      "group": 109,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root)\n{\nreturn 0;\n}\nif(root->datum == comapre)\n{\nreturn 1+countEqual(root->right,compare)+countEqual(root->left,compare);\n}\nreturn countEqual(root->right,compare)+countEqual(root->left,compare);\n"
      ]
    },
    {
      "group": 110,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nif (!root) {\n    return 0;\n}\n\nelse if (root->datum == compare) {\n    return 1;\n}\n\nelse if (root->right != 0) {\n    count += countEqual(root->right, compare);\n}\n\nelse if (root->left != 0) {\n    count += countEqual(root->left, compare);\n}\n\nreturn count;\n    "
      ]
    },
    {
      "group": 111,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(root->datum == compare) {\n    if(root->left) {\n        return 1 + countEqual(root->left, compare);\n    }\n    if(root->right) {\n        return countEqual(root->right, compare);\n    }\n}\nif(root->datum != compare) {\n    if(root->left) {\n        return 0 + countEqual(root->left, compare);\n    }\n    if(root->right) {\n        return 0 + countEqual(root->right, compare);\n    }\n}\n\nif(root->left == 0 && root->right == 0) {\n    return 0;\n}"
      ]
    },
    {
      "group": 112,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (root == 0) {\n    return 0;\n}\nint count = countEqual(root->left, compare) + countEqual(root->right, compare);\nif (root->datum == compare) {\n    count += 1;\n}\nreturn count;"
      ]
    },
    {
      "group": 113,
      "parsed": true,
      "num": 1,
      "submissions": [
        "// leaf node\nif (!root->left && !root->right) {\n    return *root == compare;\n}\n// has children\nelse {\n    // left and right\n    if (root->left && root->right) {\n        return (*root == compare) + countEqual(root->right, compare) + countEqual(root->left, compare);\n    }\n    // left\n    else if (root->left) {\n        return (*root == compare) + countEqual(root->left, compare);\n    }\n    // right\n    else {\n        return (*root == compare) + countEqual(root->right, compare);\n    }\n}"
      ]
    },
    {
      "group": 114,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(root == 0){\n    return 0;\n    }\nif(root == compare){\n    return countEqual(Node, compare);\n    }\nif( node > compare){\n    return countEqual(Node->right, compare);\n    }\nif(node < compare){\n    return countEqual(Node->left, compare);\n    }"
      ]
    },
    {
      "group": 115,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (empty_impl(node)) {\n    return 0;\n} else if (root->datum == compare) {\n    return 1 + countEqual(root->left) + countEqual(root->right);\n} else {\n    return 0;\n}"
      ]
    },
    {
      "group": 116,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int i;\nif (!root){\n    return 0;\n}\nif(root->datum != compare){\n    i = 0;\n}\nif(root->datum == compare){\n    i = 1;\n}\nreturn i + countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 117,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int equal = 0;\nint left_equal = 0;\nint right_equal = 0;\nif(root->datum == compare){\n    equal = 1;\n}\nif(root->left){\n    left_equal = countEqual(root->left, compare);     \n}\nif(root->right){\n    right_equal = countEqual(root->right, compare);     \n}\n\nreturn equal + left_equal + right_equal;"
      ]
    },
    {
      "group": 118,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (left==0 && right==0){\n    if (root->datum==compare)\n        return 1; \n    else \n        return 0; }\nelse if (left==0 && right != 0){\n    if (root->datum==compare)\n        return 1 + countEqual(root->right,compare);\n    else \n        return 0 + countEqual(root->right,compare); }\nelse if (right==0 && left!= 0){\n    if (root->datum==compare)\n        return 1 + countEqual(root->left,compare);\n    else \n        return 0 + countEqual(root->left,compare); }\nelse {\n    if (root->datum==compare)\n        return 1 + countEqual(root->right,compare) + countEqual(root->left,compare);\n    else\n        return 0 + countEqual(root->right,compare) + countEqual(root->left,compare); }"
      ]
    },
    {
      "group": 119,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int total = 0;\n\nif(root = 0) {return 0;}\n\ntotal += countEqual(root->left, compare);\ntotal += countEqual(root->right, compare);\n\nif(root->datum == compare) {\n    return ++total;\n}\nelse{\n    return total;\n}\n\n\n"
      ]
    },
    {
      "group": 120,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (root == 0) {\n    return 0;\n} else {\n    int count = 0;\n    if (root->datum == compare) {\n        count++;\n    }\n    if (root->left) {\n        count = count + countEqual(root->left, compare);\n    }\n    if (root->right) {\n        count = count + countEqual(root->right, compare);\n    }\n    return count;\n}"
      ]
    },
    {
      "group": 121,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nif(!root){\n    return 0;\n}\nif(root->datum == compare){\n    ++count;\n}\nint left_count = count + countEqual(root->left, compare);\nint right_count = count + countEqual(root->right, compare);\nreturn left_count+right_count;"
      ]
    },
    {
      "group": 122,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(&left == 0 && &right ==0){\n    return \n\n}\nif(left->datum == compare || right->datum == compare)"
      ]
    },
    {
      "group": 123,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (!root) {return 0}\n\nif (compare == root->datum) {\n    return 1 + countEqual(node->left, compare) + countEqual(node->right, compare);\n}\n\nreturn countEqual(node->left, compare) + countEqual(node->right, compare);"
      ]
    },
    {
      "group": 124,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (root == 0){\n    return 0;\nif (root->datum == compare){\n    int left = 1+countEqual(root->left, compare);\n}\nelse{\n    int left = countEqual(root->left,compare);\n}\n\nif (root->datum == compare){\n    int right = 1+countEqual(root->right, compare);\n}\nelse{\n    int right = countEqual(root->right,compare);\n}\n\nreturn left+right;"
      ]
    },
    {
      "group": 125,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (root == 0) { // initial base case\n    return 0;\n}\n\nint equal_left = countEqual(root->left, compare);\nint equal_right = countEqual(root->right, compare);\n\nif (root->datum == compare) {\n    int equal_root = 1;\n} else {\n    int equal_root = 0;\n}\n\nreturn equal_root + equal_left + equal_right;"
      ]
    },
    {
      "group": 126,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "// Base case\nif (!root) {\n    return 0;\n}\n\n// Iterate through every node of the tree and return an incremented value\n// every time there's a match\nelse {\n    if (root->datum == compare) {\n        return 1 + countEqual(root->left, compare);\n        return 1 + countEqual(root->right, compare);\n    }\n    \n    else {\n        return countEqual(root->left, compare);\n        return countEqual(root->right, compare);\n    }\n}"
      ]
    },
    {
      "group": 127,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root){\n  return 0;\n}\nint add = 0;\nif (root->datum == compare){\n  add = 1;\n}\nint left = countEqual(root->left, compare);\nint right = countEqual(root->right, compare);\nreturn add + left + right;"
      ]
    },
    {
      "group": 128,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int count = 0;\nif(root->left == NULL && root->right == NULL) {return;}\nelse {\n    if(root->datum == compare) { ++count; }\n    return countEqual(root->right, compare) + countEqual(root->left, compare);\n\n}"
      ]
    },
    {
      "group": 129,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (!root){\n    return 0;\nif root->datum == *root;\n    return root->datum+countEqual(root->left) + countEqual(root->right);\n}"
      ]
    },
    {
      "group": 130,
      "parsed": true,
      "num": 1,
      "submissions": [
        "static int count = 0;\nif(root->datum == compare) {\n    count++;\n}\nif(root->left == 0 && root->right == 0) {\n    return count;\n}\nelse if(root->left == 0) {\n    return count + countEqual(root->right, compare);\n}\nelse if(root->right == 0) {\n    return count + countEqual(root->left, compare);\n}\nelse{\n    return count + countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 131,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (!root)\n    return 0;\n\nif (root->datum == compare)\n    return 1 + countEqual(root->left, compare;\nint check_left = countEqual(root->left, compare);\n\nif (root->datum == compare)\n    return 1 + countEqual(root->right, compare);\n\nint check_right = countEqual(root->right, compare);\n\nreturn check_left + check_right;\n\n "
      ]
    },
    {
      "group": 132,
      "parsed": false,
      "num": 1,
      "submissions": [
        "auto temp = 0;\nif(!root){\nreturn 0;\n}\nif(root->datum == compare) {\ntemp += 1;\n}\nif(root->right) {\ntemp += countEqual(root->right, compare);\n}\nif(root->left) {\ntemp += countEqual(root->left, compare);\n}\nreturn temp;"
      ]
    },
    {
      "group": 133,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!root) return\nif(compare == root->datum){\n    return 1 + countEqual(root->left, compare)+countEqual(root->right, compare);\nelse \n    return countEqual(root->left,compare) + countEqual(root->right, compare);\n    "
      ]
    },
    {
      "group": 134,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nif(root == 0) {\n    return 0;\n}\nelse {\n    if(root->datum == compare) {\n        ++count;\n    }\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n    "
      ]
    },
    {
      "group": 135,
      "parsed": true,
      "num": 1,
      "submissions": [
        "//BASE CASE 0 END\nif (!root) {\n    return 0;\n}\n//IF IT IS VALUE\nif (node->datum == compare) {\n    //Search further first\n    countEqual(node->right,compare);\n    countEqual(node->left,compare);\n    return 1;\n}\n//Search left right subtrees\ncountEqual(node->right,compare);\ncountEqual(node->left,compare);"
      ]
    },
    {
      "group": 136,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int left_tree = 0;\nint right_tree = 0;\n\nif(root->left) {\n    left_tree = countEqual(root->left, compare);\n}\n\nif(root->right) {\n    right_tree = countEqual(root->right, compare);\n}\n\nreturn (root->datum == compare) + left_tree + right_tree;"
      ]
    },
    {
      "group": 137,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int count;\nif(!root){\n    return 0;\n}\nelse if (root->datum == compare){\n    count = 1;\n}\nelse{\n    count = 0;\n}\nreturn (count + countEqual(root->right, compare) + countEqual(root->left, compare));"
      ]
    },
    {
      "group": 138,
      "parsed": true,
      "num": 1,
      "submissions": [
        "Node *n = root;\nint total = 0;\nif (!n){} //don't add anything\nif (n->datum == compare){\n    total++; //add to count\n}\nreturn countEqual(n->left) + countEqual(n->right);"
      ]
    },
    {
      "group": 139,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root){\n  return 0;\n}\n\nif(root->datum == compare){\n  return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse{\n  return countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n\nreturn 0;"
      ]
    },
    {
      "group": 140,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (root-> left) {\n   if(root-> left->datum == compare) {\n   return  1 + countEqual(root->left);\n   }\n    else {\n    countEqual(root->left);\n    }\nif (root-> right) {    \n if(root->right ->datum == compare) {\n   return  1 + countEqual(root->left);\n   }\n    else {\n    countEqual(root->right);\n    }\n}\n    \nreturn 0;\n\n"
      ]
    },
    {
      "group": 141,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(root == NULL) {\n    return 0;\n}\nint count = 0;\nif(root->datum == compare) {\n    count++;\n}\nif(root->left != 0) {\n    countEqual(root->left, compare);\n}\nif(root->right != 0) {\n    countEqual(root->right, compare);\n}\n\nreturn count;\n\n    "
      ]
    },
    {
      "group": 142,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!root){return 0;}\nint count = 0;\nif(root->datum == compare){\n    count++;\n}\nreturn count + countEqual(root->left,compare) + countEqual(root->right,compare)"
      ]
    },
    {
      "group": 143,
      "parsed": false,
      "num": 1,
      "submissions": [
        "int count =0;\nif(!root){\n    return count;\n}\nif(root->datum == compare){\n    count++;\n}\nelse if((!root->right)) && !root->left){\n    return count;\n}\nif(node->left){\n    count += countEqual(root->left, compare);\n}\nif(node->right){\n    count += countEqual(root->right,compare);\n}\nreturn count;\n"
      ]
    },
    {
      "group": 144,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (root = 0)\n{\n    return 0;\n}\nelse if (root->datum == compare)\n{\n    return 1 + countEqual(root->left) + countEqual(root->right);\n}\nelse\n{\n    return countEqual(root->left) + countEqual(root->right);\n}\n"
      ]
    },
    {
      "group": 145,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int count = 0;\nif (!node) {\n    return 0;\n}\nif (node -> datum == compare) {\n    count += 1 + countEqual(node -> left) + countEqual(node -> right);\n}\nelse {\n    count += 0 + countEqual(node -> left) + countEqual(node -> right);\n}\nreturn count;"
      ]
    },
    {
      "group": 146,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int count = 0\nif (root == compare){\n    count ++;\n}\nelse if(root->left && root->left == compare ){\n   return countEqual(root->left, compare);\n}\nelse if(root->right && root->right == compare){\n   return countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 147,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root){\n    return 0;\n}\nint total = 0;\nif(node->datum == compare){\n    total++;\n}\n\n\nif(node->right){\n    total += countEqual(node->right, compare);\n}\n\nif(node->left){\n    total += countEqual(node->left, compare);\n}\n\nreturn total;"
      ]
    },
    {
      "group": 148,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "// find matches\nif(!root) { return 0;} // tree is empty is root is null\n\nif(!root->left && !root->right) { return 0;} // both are null --> base case \n\nelse{\n    return countEqual(root->right, compare) + countEqual(root->left, compare);\n    // add up the number of repeats recursively in both sides\n}"
      ]
    },
    {
      "group": 149,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(!root){return 0;}\nint sum = 0;\nif(root->datum == compare){sum += 1;} \nif(!root->left){\n    sum += countEqual(root->right, compare);\n}\nif(!root->right){\n    sum += countEqual(root->left, compare);\n}\nreturn sum; \n"
      ]
    },
    {
      "group": 150,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(root == 0){\n    return compare;\n}\nelse if(root->datum == compare){\n    return 1 + countEqual(root->left);\n    return 1 + countEqual(root->right);\n}\n\n    "
      ]
    },
    {
      "group": 151,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!root){\n    return 0;\n}\n\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare); \n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare)\n"
      ]
    },
    {
      "group": 152,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (!root) {return 0;}\nif(root-> datum != compare) {\n    return 1 + ( countEqual(root->left, compare) + countEqual(root->right, compare));\nelse {\n    return (countEqual(root->left, compare) + countEqual(root->right, compare));"
      ]
    },
    {
      "group": 153,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(root == 0){\n    return 0;\n}\nint count = 0;\nif(root->datum == compare){\n    int count += 1;\n}\nreturn count + countEqual(node->left, compare) + countEqul(node->right, compare);"
      ]
    },
    {
      "group": 154,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(!root) return 0; //if root does not exist, nothing\nif(!root->left && !root->right) return 1; //only one value exisiting\n\nif(root->left->datum == compare){ //if left datum is the same as the compare value + 1\n    return 1 + countEqual(root->left, compare);\n}\nif(root->right->datum == compare){ //if right datum is the same as compare value + 1\n    return 1 + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 155,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(root==null){\n    return 0;\n}\nelse if (root->datum == compare){\n    return countEqual(root->right, countEqual(root->left, compare)+1);\n}\nelse{\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n"
      ]
    },
    {
      "group": 156,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (root == 0) {return 0};\nNode current = root;\nif (current.datum == compare) { return 1 + countEqual(current -> left, compare) + countEqual(current-> right, compare); }\nreturn countEqual(current -> left, compare) + countEqual(current-> right, compare);"
      ]
    },
    {
      "group": 157,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!root) {\n    return 0;\n} else if (root->datum == compare) {\n    return 1 + coutEqual(root->left, compare) + coutEqual(root->right, compare);\n} else {\n    return coutEqual(root->left, compare) + coutEqual(root->right, compare);\n}\nreturn 0;"
      ]
    },
    {
      "group": 158,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int total = 0;\nif (root == 0) {\n    return total;\n}\nif (root->datum == compare) {\n    ++total;\n    countEqual(root->left, compare);\n    countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 159,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int current=0;\nif(root->datum==compare){\n    current++;\n}\nif (root->left){\n    current=current+countEqual(root->left,compare);\n}\nif (root->right){\n    current=current+countEqual(root->left,compare);\n}\nreturn current;"
      ]
    },
    {
      "group": 160,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if( !root ){\n    return 0;\n}\nif( root->datum == compare){\n    return 1 + countEqual(root->left,compare) + countEqual(root->right,compare);\n}\nreturn countEqual(root->left, compare);\nreturn countEqual(root->right, compare);"
      ]
    },
    {
      "group": 161,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (rood == 0) {\nreturn 0;\n}\nelse if (rood.datum == compare) {\nreturn 1 + countEqual(root.left, compare) + countEqual(root.right, compare);\n}\nelse {\nreturn countEqual(root.left, compare) + countEqual(root.right,compare);\n}\n\n"
      ]
    },
    {
      "group": 162,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!node) {\n    return 0;\n}\nelse if (node->datum == compare) {\n    return 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}\nelse {\n    return countEqual(root->right, compare) + countEqual(root->left, compare);\n}\n\n\n"
      ]
    },
    {
      "group": 163,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int counter;\nif (root->datum == compare){\n    counter++;\n}\nif (root->right != 0){\n    countEqual(root->right, compare);\n}\nif (root->left != 0){\n    countEqual(root->left, compare);\n}\nreturn counter;"
      ]
    },
    {
      "group": 164,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nif (root->datum == compare) {\n    count = 1;\n}\n\nreturn count + countEqual(root->right, compare) + countEqual(root->left, compare);"
      ]
    },
    {
      "group": 165,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int num = 0;\nif (root->left->datum == compare) {\n    num++;\n}\nif (root->right->datum == compare) {\n    num++;\n}\nint leftNum = countEqual(*root->left, compare);\nint rightNum = countEqual(*root->right, compare);\n\nnum += leftNum;\nnum+= rightNum;\n\nreturn num;"
      ]
    },
    {
      "group": 166,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!root) {return 0;}\nif(root->datum == compare){\n    if(!root->left && !root->right){return 1;}\n    else if(!root->left && root->right{\n        return 1 + count(root->right, compare);\n    }\n    else if(root->left && !root->right){\n         return 1 + countEqual(root->left, compare);\n    }\n    return 1 + countEqual(root->left, compare) + count(root->right, compare);\n}\nif(!root->left && !root->right){return 0;}\nelse if(!root->left && root->right{\n    return count(root->right, compare);\n}\nelse if(root->left && !root->right){\n    return countEqual(root->left, compare);\n}\nreturn countEqual(root->left, compare) + count(root->right, compare);"
      ]
    },
    {
      "group": 167,
      "parsed": true,
      "num": 1,
      "submissions": [
        "// base case\nint count = 0;\nif (!root) {\n    return 0;\n}\nelse {\n    if (root->datum == compare) {\n        count++;\n    }\n    return count + countEqual(root->left) + countEqual(root->right);\n}"
      ]
    },
    {
      "group": 168,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root){\nreturn 0;\n}\nif(node->left->datum == compare){\nreturn countEqual(root->left, compare);\n}\nif(node->right->datum == compare){\nreturn countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare); \n"
      ]
    },
    {
      "group": 169,
      "parsed": true,
      "num": 1,
      "submissions": [
        "\nif (!root) { \n    return 0; \n} \nif(*root == compare) { \n     return  1 + countEqual(root->right) + countEqual(root->left);\n}\nelse { \n    return countEqual(root->right) + countEqual(root->left); \n}"
      ]
    },
    {
      "group": 170,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(root->left == 0 && root->right == 0)\n    return;\n\nif(root->datum == compare)\n    return 1;\n    \nreturn countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 171,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nif (!root) {\n    return 0;\n}\nelse if (root->datum == compare) {\n    ++count;\n    if(root->left == NULL && root->right == NULL) {\n        return 1;\n    }\n    else {\n        root = root->left;\n        return countEqual(root, compare);\n        root = root->right;\n        return countEqual(root, compare);\n    }\n}\n\n"
      ]
    },
    {
      "group": 172,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (root == 0) \n       return 0; \n   \nint ans = 0; \nif  (root->datum == compare)  \n    ans++;\nans+=(countEqual(root->left,compare) + countEqual(root->right, compare)); \nreturn ans; \n    "
      ]
    },
    {
      "group": 173,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root) { return 0; }\nelse if (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);; \n}\nelse {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 174,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (node == 0) return 0;\nif (node->datum == compare) {\n    int leftCount = countEqual(node->left);\n    int rightCount = countEqual(node->right);\n    return 1 + leftCount + rightCount;\n}\nelse {\n    int leftCount = countEqual(node->left);\n    int rightCount = countEqual(node->right);\n    return leftCount + rightCount;\n}\n\n "
      ]
    },
    {
      "group": 175,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!root) { return 0;}\nelse if(root->right == compare){\nreturn 1 + countEqual(*root->right);\n}\nelse if(root->left == compare){\nreturn 1 + countEqual(*root->left);\n}\nelse {\n   return countEqual(root->left) + countEqual(root->right);\n}\n"
      ]
    },
    {
      "group": 176,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (root == NULL) {\n    return 0;\n}\nif(root->datum == compare){\n    return countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 177,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int num = 0;\nif(root->datum == compare){\n    num++;\n}\nreturn num + countEqual(root->next,compare);"
      ]
    },
    {
      "group": 178,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root){\n    return 0;\n}\nelse{\n    int num_equal= 0;\n    if(root->datum == compare){\n        num_equal++;\n    }\n    \n    return num_equal + countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 179,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if (!root) {\n    return 0;\n}\nif(root->left && root->right) {\n    return countEqual(root->left,compare) + countEqual(root->right,compare);\n}\nif(root->left && !root->right){\n    return countEqual(root->left,compare);\n}\nif(!root->left && root->right){\n    return countEqual(root->right,compare);\n}\nif (root->datum == compare){\n    return 1;\n}\n"
      ]
    },
    {
      "group": 180,
      "parsed": false,
      "num": 1,
      "submissions": [
        "int count;\n//Checking to see if root is null and whether or not we actually have a BST\nif (root == 0) {\n    return 0;\n    }\n//Getting count and implementing recursion\nif (root == compare && root != 0) {\n    count += 1;\n    countEqual(root->left, compare);\n    countEqual(root->right, compare; \n    } \nreturn count; \n    "
      ]
    },
    {
      "group": 181,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nint left;\nint right;\nif (root == 0){\n    return 0;\n}\nif(root->datum == compare){\n    count++;\n}\nif (root->left != 0){\n    left = countEqual(root->left, compare);\n}\nif (root->right != 0){\n    right = countEqual(root->right, compare);\n}\n\nreturn count+left+right;"
      ]
    },
    {
      "group": 182,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root) {\n    return 0;\n} else {\n    int sum = 0;\n    if (root->datum == compare) {\n        ++sum;\n    }\n    sum += countEqual(root->left, compare);\n    sum += countEqual(root->right, compare);\n    return sum;\n}"
      ]
    },
    {
      "group": 183,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (!root) {\n    return 0;\n}\n\nif (root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare)\n} else {\n    return 0 + countEqual(root->left, compare) + countEqual(root->right, compare)\n}"
      ]
    },
    {
      "group": 184,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int numEqual = 0;\nif(!root){\n    return 0;\n}\nif(root->datum == compare){\n    numEqual += 1;\n    countEqual(root->left, compare);\n    countEqual(root->right, compare);\n}\nreturn numEqual;\n"
      ]
    },
    {
      "group": 185,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!node) {\n    return  0;\n}\nif (node->datum = compare){\n    return 1 + countEqual(node->left, compare) + countEqual(node->right, compare); \n}\nreturn countEqual(node->left, compare) + countEqual(node->right, compare);"
      ]
    },
    {
      "group": 186,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int count = 0;\nif (!root) {return 0;}\nif (root->datum == compare) {count++;}\ncount = count + countEqual(root->left, compare) + countEqual(root->right, compare);\nreturn count;"
      ]
    },
    {
      "group": 187,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root){\n    return 0;\n}\nelse if(root->datum == compare){\n    return 1 + countEqual(root->left) + countEqual(root->right);\nreturn 0;"
      ]
    },
    {
      "group": 188,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if (root = 0) {\n    return 0;\n}\nint add = 0;\nif (root -> datum == compare) {\n    add = 1;\n}\nreturn add + countEqual(root -> left, compare) + countEqual(root -> right, compare);"
      ]
    },
    {
      "group": 189,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nif(root->datum == compare)\n{\n    count = count + 1;\n}\ncountEqual(root->left, compare);\ncountEqual(root->right, compare);\nreturn count;"
      ]
    },
    {
      "group": 190,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root){\n    return 0;\n}\nint sum = 0;\nif(root->datum == compare){\n    sum += 1;\n}\nsum += countEqual(root->left, compare);\nsum += countEqual(root->right, compare);\nreturn sum;"
      ]
    },
    {
      "group": 191,
      "parsed": true,
      "num": 1,
      "submissions": [
        "static int count = 0;\nif(!root) countEqual(root->left, compare);\nif(!root) countEqual(root->right, compare);\nif(root->datum == compare) count++;\n\nreturn count;"
      ]
    },
    {
      "group": 192,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!root) { return 0 };\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n} else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 193,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root){\n    return 0;\n}\nif(!root->next){\n    return 0;\n}\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 194,
      "parsed": true,
      "num": 1,
      "submissions": [
        "\nif(root->next == 0)\n{\nreturn compare;\n}\ncompare++;\ncountEqual(root->next, compare);"
      ]
    },
    {
      "group": 195,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root) return 0;\n\nint left = countEqual(root->left, compare);\nint right = countEqual(root->right, compare);\n\nif(*root == compare)\n    return 1 + left + right;\nreturn left + right;"
      ]
    },
    {
      "group": 196,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int ans = 0;\nif(root == 0){\nreturn 0;\n}\n\nif(root->val == compare){\nans = 1;\n}\n\nint left_ans = countEqual(root->left,compare);\nint right_ans = countEqual(root->right,compare);\n\nreturn ans+left_ans+right_ans;"
      ]
    },
    {
      "group": 197,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "       int result = 0;\n       if(root->datum == compare){\n           result = result + 1;\n       }\n       if(root->left!=NULL){\n           result = result+countEqual(root->left, compare);\n       }\n       if(root->right!=NULL){\n           result = result+countEqual(root->right,compare);\n       }\n       return result;"
      ]
    },
    {
      "group": 198,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!node){ return 0; }\nif(node->datum == compare){\n    return 1 + countEqual(node->left, compare) + countEqual(node->right, compare);\n}\nelse{\n    return countEqual(node->left, compare) + countEqual(node->right, compare);\n}"
      ]
    },
    {
      "group": 199,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int total = 0;\nif(!root){\n    return 0;\n}\n\nif(root->datum == compare) {total += 1;}\n\nif(root->right){\n    total += countEqual(root->right, compare);\n}\nif(root->left){\n    total += countEqual(root->left, compare);\n}\nreturn total;"
      ]
    },
    {
      "group": 200,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int count = 0;\nif (datum == compare) {\n    ++count;\n}\nif (root->left) {\n    count += countEqual(root->left, compare);\n}\nif (root->right) {\n    count += countEqual(root->right, compare);\n}\nreturn count;"
      ]
    },
    {
      "group": 201,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int count = 0;\nif(root == 0){return 0;}\nif(root->datum == compare) {++count;}\ncount += countEqual(root->left, compare);\ncount += countEqual(root->right, compare);\nreturn count;"
      ]
    },
    {
      "group": 202,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (!root){\n    return 0;\n}\nint val = 0;\nelse if (root->datum == compare){\n    val++;\n}\ncountEqual(root->left, compare);\ncountEqual(root->right, compare);\nreturn val;"
      ]
    },
    {
      "group": 203,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root){\nreturn 0;\n} \nint num = countEqual(root -> right, compare) + countEqual(root -> left, compare);\nif(root == compare){\nnum++;\n}\nreturn num;\n\n"
      ]
    },
    {
      "group": 204,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int count = 0;\nif(left == 0 && right == 0) return count;\nelse{\n    if(root->datum == compare){\n        count++;\n    }\n    countEqual(left, compare);\n    countEqual(right, compare);    "
      ]
    },
    {
      "group": 205,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\n\nif (root == 0) {\n  return 0;\n}\n\nif (root -> datum == compare) {\n  count++;\n}\n\ncountEqual(root -> left, compare);\ncountEqual(root -> right, compare);\n\nreturn count;"
      ]
    },
    {
      "group": 206,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (root != 0) {\n    if (root->datum == compare) return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    else return 0 + countEqual(root->left, compare) + countEqual(root->right, compare)\n}"
      ]
    },
    {
      "group": 207,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(!root){ \nreturn 0;\n}\nif (root->datum == compare){\nreturn 1;\n}\nint total = countEqual(root->left, compare) +countEqual(root->right, compare);\nreturn total;"
      ]
    },
    {
      "group": 208,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (root == 0) {\n    return 0;\n}\nelse {\n    int match = 0;\n    if (root->datum == compare) {\n        ++match;\n    }\n    return match + countEqual(root->left,compare) + count_Equal(root->right,compare);\n}"
      ]
    },
    {
      "group": 209,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (root == 0){\n    return 0;\n} \nif (root->datrum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare));\n} else {\n    return countEqual(root->left, compare) + countEqual(root->right, compare));\n}"
      ]
    },
    {
      "group": 210,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (root == 0){return 0}\nint count = 0;\ncount = countEqual(root->left, compare) + countEqual(root->right, compare);\nif (root->datum == compare){count++;}\nreturn count;"
      ]
    },
    {
      "group": 211,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "// base case: root is a 0\nif (!root) { return 0; }\n// recursive case: check root for the compare value in datum, then recursively call\n// on left and right. return the sum of all these calls\nelse {\n    int count = 0;\n    if (root->datum == compare) {\n        ++count;\n    }\n    return count + countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 212,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int sum = 0;    //start with nothing on each level of iteration\nif (root == compare) \n    sum++;    //each compare value found increases count\n    \nif (root == 0) {     //base case occuring when the curr location is past the end \n    return sum;    // sum would be empty in this case\n}\n\nsum += countEqual(root->left, compare);    //goes down left branch until end, add to sum\nsum += countEqual(root->right, compare);    // same ^, both will return with full sums.\n\nreturn sum;"
      ]
    },
    {
      "group": 213,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!node){return 0;}\nif(root->datum == compare){return 1;}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare)"
      ]
    },
    {
      "group": 214,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nif(root == 0){\n    return 0;\n}\nif(!root && root->datum == compare){\n    count++;\n}\n\ncount += countEqual(root->left, compare);\ncount += countEqual(root->right, compare);\nreturn count;"
      ]
    },
    {
      "group": 215,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(root == 0){\n    return 0;\n}\nint amtLeft = countEqual(root->left, compare);\nint amtRight = countEqual(root->right, compare);\nreturn (root->datum == compare ? 1 : 0) + amtLeft + amtRight;"
      ]
    },
    {
      "group": 216,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!root->left && !root->right) {\n    if (root->datum == compare) { return 1; }\n    return 0;\n}\nif (!root->left) {\n    if (root->datum == compare) { \n    return 1 + count_Equal(root->right, compare);\n    }\n    return count_Equal(root->right, compare);\n}\nif (!root->right) {\n    if (root->datum == compare) { \n    return 1 + count_Equal(root->left, compare);\n    }\n    return count_Equal(root->left, compare);\n}\nif (root->datum == compare) {\n    return 1 + count_Equal(root->left, compare) + count_Equal(root->right, compare);\n}\nreturn count_Equal(root->left, compare) + count_Equal(root->right, compare);"
      ]
    },
    {
      "group": 217,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(compare){\n    return 1;\n} else if(root->left) {\n    return countEqual(root->left, compare);\n} else if(root->right) {\n    return countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 218,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int num = 0;\nif ( !root ){ \nreturn 0; \n}\nif(root->next == 0){\n    return 0;\n}\nif (root->datum == campare){\n    num++;\n}\n\nreturn num + countEqual(root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 219,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(root == 0){\nreturn 0;\n}\nint count = 0;\n if(root->datum == compare){\n     count = 1;\n}\ncount += countEqual(root->left, compare);\ncount += countEqual(root->right, compare);\n\nreturn count;"
      ]
    },
    {
      "group": 220,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\nif (!root) {\n    return 0;\n}\nif (root->datum == compare) {\n    count++;\n}\ncount = countEqual(root->left, compare) + countEqual(root->right, compare);\nreturn count;"
      ]
    },
    {
      "group": 221,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int sum = 0;\n//Base\nif ( !root )\n    return 0;\nif  ( root->datum == compare)\n    sum+=1;\n\n//Go left/right\n    return sum +  countEqual( root->left, compare) + countEqual(root->right, compare);"
      ]
    },
    {
      "group": 222,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int count = 0;\nif(root == 0) {\n    return count;\n}\nelse if (*root == compare) {\n    cout++;\n    return count;\n}\nelse {\n    return count += countEqual(root->next, compare);\n    return count += countEqual(root->left, compare);\n}\n\nreturn count;"
      ]
    },
    {
      "group": 223,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(!root->left && !root->right)\nreturn 0;\n\nif(root->datum == compare){\nif(root->left){\nreturn countEqual(root->left, compare) + 1;\n}else{\nreturn countEqual(root->right, compare) + 1;\n}\n}\n\nif(root->left){\nreturn countEqual(root->left, compare);\n}else{\nreturn countEqual(root->right, compare);\n}\n\n"
      ]
    },
    {
      "group": 224,
      "parsed": true,
      "num": 1,
      "submissions": [
        "count = 0;\nif (!node) {\n    return count;\n}\nelse if (root->datum == compare) {\n    count++;\n}\n\ncount += countEqual(root->left);\ncount += countEqual(root->right);\n\nreturn count;"
      ]
    },
    {
      "group": 225,
      "parsed": false,
      "num": 1,
      "submissions": [
        "    if (root) {\n        if(root->datum == compare) {\n            return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n        } else {\n            return countEqual(root->left, compare) + countEqual(root->right, compare);\n    } else {\n        return 0;    \n    }"
      ]
    },
    {
      "group": 226,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if (!root)\n    return 0;\nelse {\n    return (root->datum == compare) + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\n    "
      ]
    },
    {
      "group": 227,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root) return 0;\nif(root->datum == compare){\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    }\nif(root->datum != compare){\n    return 0 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    }"
      ]
    },
    {
      "group": 228,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!root) return 0;\nint count = 0;\nelse if(root->datum == compare) ++count;\nreturn countEqual(root->left,compare) + countEqual(root->right,compare) + count;"
      ]
    },
    {
      "group": 229,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root) return 0;\nint count = 0;\nif(root->datum == compare) {\n    count++;\n}\ncount += countEqual(root->left, compare);\ncount += countEqual(root->right, compare);\nreturn count;"
      ]
    },
    {
      "group": 230,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(root == 0) return 0;\nint l = countEqual(root->left, compare);\nint r = countEqual(root->right, compare);\nint current = (root->datum == compare);\nreturn l + r + current;"
      ]
    },
    {
      "group": 231,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int count = 0;\nif (root->left) count += countEqual(root->left, compare);\nif (root->right) count += countEqual(root->right, compare);\nif (root->datum == compare) count++;\nreturn count;"
      ]
    },
    {
      "group": 232,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if(root->datum == compare){\n    return countEqual(root->right,compare) + countEqual(root->left,compare) + 1\n}\nreturn countEqual(root->right,compare) + countEqual(root->left,compare);"
      ]
    },
    {
      "group": 233,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if (root == 0){\n    return 0;\n}\n\nif (root->datum == compare){\n    return 1 + countEqual(root->left, compare);\n    return 1 + countEqual(root->right, compare);\n\n}\n\nreturn countEqual(root->left, compare);\nreturn countEqual(root->right, compare);\n"
      ]
    },
    {
      "group": 234,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(root == 0){\n    return 0;\n}\nif(root == compare){\n    return countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\n}\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 235,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int ret = 0;\nif(root != 0) {\n    if(root->datum == compare) {\n        ret++;\n    }\n    ret+=countEqual(root->left, compare);\n    ret+=countEqual(root->right, compare);\n    return(ret);\n}\nreturn(0);"
      ]
    },
    {
      "group": 236,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "if (!root) return 0;\nelse if (!root->left && !root->left) {\n    if (root->datum == compare) return 1;\n    else return 0;\n}\nelse if (!root->left && root->right) {\n    if (root->datum == compare) return 1 + countEqual(root->right, compare);\n    else return countEqual(root->right, compare);\n}\nelse if (!root->right && root->left) {\n    if (root->datum == compare) return 1 + countEqual(root->left, compare);\n    else return countEqual(root->left, compare);\n}\nelse if (root->right && root->left) {\n    if (root->datum == compare) return 1 +\n        countEqual(root->left, compare) + countEqual(root->right, compare);\n    else\n        return countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse return 0;"
      ]
    },
    {
      "group": 237,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (root == 0){\n    return 0;\n}\nelse{\n    if (root->datum == compare){\n        countEqual(root->left, compare) + countEqual(root->right, compare) + 1;\n    }\n    else{\n        countEqual(root->left, compare) + countEqual(root->right);\n    }\n}"
      ]
    },
    {
      "group": 238,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root) {\n    return 0;\n}\nif(root->datum == compare) {\n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse {\n    return 0 + countEqual(root->left, compare) + countEqual(root->right, compare);;\n}\n"
      ]
    },
    {
      "group": 239,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!node && node->next && node->datum == compare)\n{\n    return 1 + countEqual(node->next);\n}\nelse\n{\n     return node;\n}"
      ]
    },
    {
      "group": 240,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root)\n    return 0;\nif(root->datum != compare) \n    return countEqual(root->left, compare) + countEqual(root->right, compare);\nelse \n    return 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n    "
      ]
    },
    {
      "group": 241,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if (root == 0){ \n    return 0;\n}\n\nif (root->datum == int compare)\n    return 1 + countEqual(node->left, compare) + countEqual(node->right, compare); \n\nreturn countEqual(node->left, compare) + countEqual(node->right, compare);"
      ]
    },
    {
      "group": 242,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(root == 0) return 0;\nif(root->left == 0 && root->right == 0){\n    if(root->datum == compare) return 1;\n    else return 0;\n    }\nif(root->left == 0) {\n    if(root->datum == compare) return 1 + countEqual(root->right, compare);\n    else return 0+ countEqual(root->right, compare);\n    }\nif(root->right == 0) {\n    if(root->datum == compare) return 1+ countEqual(root->left, compare)\n    else return 0+countEqual(root->left, compare)\n    };\nif(root->datum == compare) return 1+ countEqual(root->left, compare) + countEqual(root->right, compare);\nreturn 0 + countEqual(root->left, compare) + countEqual(root->right, compare);\n"
      ]
    },
    {
      "group": 243,
      "parsed": true,
      "num": 1,
      "submissions": [
        "int sum = 0;\nif(root == 0)\n{\n    return sum;\n}\nif(root->datum == compare)\n{\n    sum += 1;\n}\nreturn sum + countEqual(root->left) + countEqual(root->right);"
      ]
    },
    {
      "group": 244,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int count = 0;\n    if (!root->left && !root->right) {\n        return count;\n    }\n\n    if (root->datum == compare) {\n        ++count;\n    }\n\n    int left_sum = countEqual(root->left, compare);\n    int right_sum = countEqual(root->right, compare);\n\n    return left_sum + right_sum + count;"
      ]
    },
    {
      "group": 245,
      "parsed": true,
      "num": 1,
      "testCasesPassed": false,
      "runtimeEvent": true,
      "submissions": [
        "int numEqual = 0;\n\nint countOnLeftSide = 0;\nif (root->left != 0) {\n    countOnLeftSide += countEqual(root->left, compare);\n}\nint countOnRightSide = 0;\nif (root->right != 0){\n    countOnRightSide += countEqual(root->right, compare);\n}\nnumEqual += countOnLeftSide;\nnumEqual += countOnRightSide;\n\nif ((root == 0) && root->datum == compare) {\n    numEqual += 1;\n}\nreturn numEqual;"
      ]
    },
    {
      "group": 246,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if(!root){\nreturn 0; \n}\nif(root == compare){\nreturn 1 + countEqual(root->left, compare) + countEqual(root->right, compare);\n}\nelse{\nreturn countEqual(root->left, compare) + countEqual(root->right, compare);\n}"
      ]
    },
    {
      "group": 247,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(!root) {\n    return 0;\n}\nif(root->datum == compare) {\n    return countEqual(root->right, compare) + countEqual(root->left, compare) + 1);\n}\nelse {\n    return countEqual(root->right, compare) + countEqual(root->left, compare);\n}\n"
      ]
    },
    {
      "group": 248,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "if(!root) {\n    return 0;\n}\n\nif(compare != root->datum) {\n    return countEqual(root->right, compare) + countEqual(root->left, compare);\n}\n\nelse {\n    return 1 + countEqual(root->right, compare) + countEqual(root->left, compare);\n}"
      ]
    },
    {
      "group": 249,
      "parsed": false,
      "num": 1,
      "submissions": [
        "if(root = 0){\n    return 0;\n}\nint left_count = countEqual(root->left, compare) \nint right_count = countEqual(root->right, compare);\nint count = right_count + left_count;\n\nif (root-> datum = compare){\n    count = count + 1;\n    return count;\n}\nelse{\n    return count;\n}\n\n"
      ]
    },
    {
      "group": 250,
      "parsed": true,
      "num": 1,
      "testCasesPassed": true,
      "runtimeEvent": false,
      "submissions": [
        "int count = 0;\nif (root->datum  == compare) {\n    count = 1;\n}\nif (root->right != 0) {\n    count = count + countEqual(root->right, compare);\n}\nif (root->left != 0) {\n    count = count + countEqual(root->left, compare);\n}\nreturn count;"
      ]
    },
    {
      "group": 251,
      "parsed": true,
      "num": 1,
      "submissions": [
        "    if (!root) {\n        return 0;\n    }\n    if (root->datum == compare && !root->left && !root->right) {\n        return 1;\n    }\n    return countEqual(root->left, compare) + countEqual(root->right, compare) + countEqual(root->datum, compare);"
      ]
    },
    {
      "group": 252,
      "parsed": true,
      "num": 1,
      "submissions": [
        "if (!root) {return 0;}\n\nif (!(node->datum < compare) && !(compare < node->datum))\n{\n    return (1 + countEqual(root -> left, compare) + countEqual(root -> right, compare));\n}\nreturn countEqual(root -> left, compare) + countEqual(root -> right, compare);\n"
      ]
    }
  ]
}