Lobster.cPlusPlusParser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
    (function() {
        "use strict";

        function peg$subclass(child, parent) {
            function ctor() { this.constructor = child; }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
        }

        function peg$SyntaxError(message, expected, found, location) {
            this.message  = message;
            this.expected = expected;
            this.found    = found;
            this.location = location;
            this.name     = "SyntaxError";

            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(this, peg$SyntaxError);
            }
        }

        peg$subclass(peg$SyntaxError, Error);

        peg$SyntaxError.buildMessage = function(expected, found) {
            var DESCRIBE_EXPECTATION_FNS = {
                literal: function(expectation) {
                    return "\"" + literalEscape(expectation.text) + "\"";
                },

                "class": function(expectation) {
                    var escapedParts = "",
                        i;

                    for (i = 0; i < expectation.parts.length; i++) {
                        escapedParts += expectation.parts[i] instanceof Array
                            ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                            : classEscape(expectation.parts[i]);
                    }

                    return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                },

                any: function(expectation) {
                    return "any character";
                },

                end: function(expectation) {
                    return "end of input";
                },

                other: function(expectation) {
                    return expectation.description;
                }
            };

            function hex(ch) {
                return ch.charCodeAt(0).toString(16).toUpperCase();
            }

            function literalEscape(s) {
                return s
                    .replace(/\\/g, '\\\\')
                    .replace(/"/g,  '\\"')
                    .replace(/\0/g, '\\0')
                    .replace(/\t/g, '\\t')
                    .replace(/\n/g, '\\n')
                    .replace(/\r/g, '\\r')
                    .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
            }

            function classEscape(s) {
                return s
                    .replace(/\\/g, '\\\\')
                    .replace(/\]/g, '\\]')
                    .replace(/\^/g, '\\^')
                    .replace(/-/g,  '\\-')
                    .replace(/\0/g, '\\0')
                    .replace(/\t/g, '\\t')
                    .replace(/\n/g, '\\n')
                    .replace(/\r/g, '\\r')
                    .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
            }

            function describeExpectation(expectation) {
                return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
            }

            function describeExpected(expected) {
                var descriptions = new Array(expected.length),
                    i, j;

                for (i = 0; i < expected.length; i++) {
                    descriptions[i] = describeExpectation(expected[i]);
                }

                descriptions.sort();

                if (descriptions.length > 0) {
                    for (i = 1, j = 1; i < descriptions.length; i++) {
                        if (descriptions[i - 1] !== descriptions[i]) {
                            descriptions[j] = descriptions[i];
                            j++;
                        }
                    }
                    descriptions.length = j;
                }

                switch (descriptions.length) {
                    case 1:
                        return descriptions[0];

                    case 2:
                        return descriptions[0] + " or " + descriptions[1];

                    default:
                        return descriptions.slice(0, -1).join(", ")
                            + ", or "
                            + descriptions[descriptions.length - 1];
                }
            }

            function describeFound(found) {
                return found ? "\"" + literalEscape(found) + "\"" : "end of input";
            }

            return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };

        function peg$parse(input, options) {
            options = options !== void 0 ? options : {};

            var peg$FAILED = {},

                peg$startRuleFunctions = { start: peg$parsestart, function_body: peg$parsefunction_body, declaration: peg$parsedeclaration, declarator: peg$parsedeclarator, member_declaration: peg$parsemember_declaration, argument_declaration_list: peg$parseargument_declaration_list },
                peg$startRuleFunction  = peg$parsestart,

                peg$c0 = function(d) {return d},
                peg$c1 = function(decls) {return decls.filter(function(elem){return elem!=="comment";});},
                peg$c2 = function() {return "comment";},
                peg$c3 = "//",
                peg$c4 = peg$literalExpectation("//", false),
                peg$c5 = /^[^\n]/,
                peg$c6 = peg$classExpectation(["\n"], true, false),
                peg$c7 = "\n",
                peg$c8 = peg$literalExpectation("\n", false),
                peg$c9 = "/*",
                peg$c10 = peg$literalExpectation("/*", false),
                peg$c11 = "*/",
                peg$c12 = peg$literalExpectation("*/", false),
                peg$c13 = peg$anyExpectation(),
                peg$c14 = function(t) {return track(t, location(), text());},
                peg$c15 = function(stmt) {return absorb({construct_type:"labeled_statement"}, stmt); },
                peg$c16 = ":",
                peg$c17 = peg$literalExpectation(":", false),
                peg$c18 = function(label, stmt) {return {label:label, statement: stmt}; },
                peg$c19 = "case",
                peg$c20 = peg$literalExpectation("case", false),
                peg$c21 = function(c, stmt) { return {case:c, statement:stmt}; },
                peg$c22 = "default",
                peg$c23 = peg$literalExpectation("default", false),
                peg$c24 = function(stmt) { return {default:true, stmt:stmt}; },
                peg$c25 = ";",
                peg$c26 = peg$literalExpectation(";", false),
                peg$c27 = function(expr) { expr = expr || {construct_type: "null_statement"}; return {construct_type: "expression_statement", expression:expr}; },
                peg$c28 = "{",
                peg$c29 = peg$literalExpectation("{", false),
                peg$c30 = function(stmt) {return stmt},
                peg$c31 = "}",
                peg$c32 = peg$literalExpectation("}", false),
                peg$c33 = function(stmts) { return {construct_type: "compound_statement", statements: stmts}; },
                peg$c34 = "if",
                peg$c35 = peg$literalExpectation("if", false),
                peg$c36 = "(",
                peg$c37 = peg$literalExpectation("(", false),
                peg$c38 = ")",
                peg$c39 = peg$literalExpectation(")", false),
                peg$c40 = "else",
                peg$c41 = peg$literalExpectation("else", false),
                peg$c42 = function(cond, then, e) {return {construct_type:"selection_statement", condition:cond, then:then, otherwise:e}; },
                peg$c43 = function(cond, then) {return {construct_type:"selection_statement", condition:cond, then:then}; },
                peg$c44 = "while",
                peg$c45 = peg$literalExpectation("while", false),
                peg$c46 = function(cond, body) { return {construct_type:"while_statement", condition:cond, body:body}; },
                peg$c47 = "do",
                peg$c48 = peg$literalExpectation("do", false),
                peg$c49 = function(body, cond) { return {construct_type:"dowhile_statement", condition:cond, body:body}; },
                peg$c50 = "for",
                peg$c51 = peg$literalExpectation("for", false),
                peg$c52 = function(init, cond, post, body) { return {construct_type:"for_statement", condition:cond, initial:init, post:post, body:body}; },
                peg$c53 = function(d) { return track(d, location(), text()); },
                peg$c54 = "break",
                peg$c55 = peg$literalExpectation("break", false),
                peg$c56 = function() { return {construct_type:"break_statement"}; },
                peg$c57 = "continue",
                peg$c58 = peg$literalExpectation("continue", false),
                peg$c59 = function() {return {construct_type:"continue_statement"}; },
                peg$c60 = "return",
                peg$c61 = peg$literalExpectation("return", false),
                peg$c62 = function(ret) { return {construct_type:"return_statement", expression:ret}; },
                peg$c63 = function(d) {return {construct_type:"declaration_statement", declaration: d}; },
                peg$c64 = function(specs, declarators) { return track({construct_type: "simple_declaration", specs:specs, declarators:declarators}, location(), text()); },
                peg$c65 = ",",
                peg$c66 = peg$literalExpectation(",", false),
                peg$c67 = function(first, d) {return d;},
                peg$c68 = function(first, rest) {rest.unshift(first); return rest; },
                peg$c69 = function(spec) {
                    return track(absorb({construct_type: "class_declaration"}, spec), location(), text());
                },
                peg$c70 = function(specs, declarator, body) {return track({construct_type: "function_definition", specs:specs, declarator:declarator, body:body}, location(), text()); },
                peg$c71 = function(name, args, init) {return null;},
                peg$c72 = function(name, args, init, body) {return track({construct_type: "constructor_definition", name:name, body:body, initializer:init, args: args}, location(), text()); },
                peg$c73 = "~",
                peg$c74 = peg$literalExpectation("~", false),
                peg$c75 = function(name) {return null;},
                peg$c76 = function(name, body) {return track({construct_type: "destructor_definition", name:{identifier: "~"+name.identifier}, body:body}, location(), text()); },
                peg$c77 = "virtual",
                peg$c78 = peg$literalExpectation("virtual", false),
                peg$c79 = function(name, body) {return track({construct_type: "destructor_definition", name:{identifier: "~"+name.identifier}, body:body, virtual:true}, location(), text()); },
                peg$c80 = function(first, m) {return m;},
                peg$c81 = function(first, rest) {rest.unshift(first); return rest;},
                peg$c82 = function(i, args) {return track({construct_type: "member_initializer", member: i, args:args || []}, location(), text()); },
                peg$c83 = function(s) {return s},
                peg$c84 = function(before, t, s) {return s},
                peg$c85 = function(before, t, after) {
                    before.push({typeSpec:t});
                    var rest = before.concat(after);

                    var declSpecs = {
                        typeSpecs: [],
                        storageSpecs: []
                    };

                    for(var i = 0; i < rest.length; ++i){
                        var spec = rest[i];
                        if (spec.typeSpec){
                            declSpecs.typeSpecs.push(spec.typeSpec);
                        }
                        else if (spec.storageSpec){
                            declSpecs.storageSpecs.push(spec.storageSpec);
                        }
                        else if (spec === "friend"){
                            declSpecs.friend = true;
                        }
                        else if (spec === "typedef"){
                            declSpecs.typedef = true;
                        }
                        else if (spec === "inline"){
                            declSpecs.inline = true;
                        }
                        else if (spec === "explicit"){
                            declSpecs.explicit = true;
                        }
                        else if (spec === "virtual"){
                            declSpecs.virtual = true;
                        }
                    }

                    return track(declSpecs, location(), text()); },
                peg$c86 = function(t) { return {typeSpec:t}; },
                peg$c87 = function(s) { return {storageSpec:s}; },
                peg$c88 = "typedef",
                peg$c89 = peg$literalExpectation("typedef", false),
                peg$c90 = "friend",
                peg$c91 = peg$literalExpectation("friend", false),
                peg$c92 = function(before, t, after) { before.push(t);
                    before = before.concat(after);
                    return track(before, location(), text()); },
                peg$c93 = "const",
                peg$c94 = peg$literalExpectation("const", false),
                peg$c95 = "volatile",
                peg$c96 = peg$literalExpectation("volatile", false),
                peg$c97 = "register",
                peg$c98 = peg$literalExpectation("register", false),
                peg$c99 = "static",
                peg$c100 = peg$literalExpectation("static", false),
                peg$c101 = "thread_local",
                peg$c102 = peg$literalExpectation("thread_local", false),
                peg$c103 = "extern",
                peg$c104 = peg$literalExpectation("extern", false),
                peg$c105 = "mutable",
                peg$c106 = peg$literalExpectation("mutable", false),
                peg$c107 = "inline",
                peg$c108 = peg$literalExpectation("inline", false),
                peg$c109 = "explicit",
                peg$c110 = peg$literalExpectation("explicit", false),
                peg$c111 = peg$otherExpectation("simple type name"),
                peg$c112 = function(t) {return t;},
                peg$c113 = "char",
                peg$c114 = peg$literalExpectation("char", false),
                peg$c115 = "short",
                peg$c116 = peg$literalExpectation("short", false),
                peg$c117 = "int",
                peg$c118 = peg$literalExpectation("int", false),
                peg$c119 = "bool",
                peg$c120 = peg$literalExpectation("bool", false),
                peg$c121 = "long",
                peg$c122 = peg$literalExpectation("long", false),
                peg$c123 = "signed",
                peg$c124 = peg$literalExpectation("signed", false),
                peg$c125 = "unsigned",
                peg$c126 = peg$literalExpectation("unsigned", false),
                peg$c127 = "float",
                peg$c128 = peg$literalExpectation("float", false),
                peg$c129 = "double",
                peg$c130 = peg$literalExpectation("double", false),
                peg$c131 = "void",
                peg$c132 = peg$literalExpectation("void", false),
                peg$c133 = function(id) {return isUserTypeName(id.identifier);},
                peg$c134 = function(id) {return id.identifier;},
                peg$c135 = "enum",
                peg$c136 = peg$literalExpectation("enum", false),
                peg$c137 = function(name, first, e) {return e;},
                peg$c138 = function(name, first, rest) { return {enum:name, values:composeBinaryOp(first, rest)}; },
                peg$c139 = "=",
                peg$c140 = peg$literalExpectation("=", false),
                peg$c141 = function(name, e) {return e;},
                peg$c142 = function(name, value) {return {name:name, value:value}; },
                peg$c143 = "@library_unsupported@",
                peg$c144 = peg$literalExpectation("@library_unsupported@", false),
                peg$c145 = function(d) {return track(absorb(d, {library_unsupported: true}), location(), text());},
                peg$c146 = function(d, i) {return track(absorb(d, {initializer: i}), location(), text());},
                peg$c147 = function(args) {
                    return {construct_type:"direct_initializer", args:args};
                },
                peg$c148 = function(init) {return {construct_type:"copy_initializer", args:[init]};},
                peg$c149 = function(init) {return init;},
                peg$c150 = function(first, op, e) {return e;},
                peg$c151 = function(first, rest) {
                    rest.unshift(first);
                    return track({construct_type:"initializer_list", args: rest}, location(), text());
                },
                peg$c152 = function(d) {
                    //d = insideOut(d);
                    var d2 = track(absorb({construct_type:"declarator"}, d), location(), text());
                    return d2;
                },
                peg$c153 = function(d) {
                    //d = insideOut(d);
                    var d2 = track(absorb({construct_type:"declarator", abstract: true}, d), location(), text());
                    return d2;
                },
                peg$c154 = "*",
                peg$c155 = peg$literalExpectation("*", false),
                peg$c156 = function(cv, decl) { return absorb({pointer:decl}, cv); },
                peg$c157 = "&",
                peg$c158 = peg$literalExpectation("&", false),
                peg$c159 = function(cv, decl) { return absorb({reference:decl}, cv); },
                peg$c160 = function(decl, postfixes) { return absorb(decl, {postfixes: postfixes}); },
                peg$c161 = function(p) {return p},
                peg$c162 = function(args, cv) { return absorb({type:"function", args:args}, cv); },
                peg$c163 = "[",
                peg$c164 = peg$literalExpectation("[", false),
                peg$c165 = "]",
                peg$c166 = peg$literalExpectation("]", false),
                peg$c167 = function(size) { return {type:"array", size:size}; },
                peg$c168 = function(d) {return {name:d}; },
                peg$c169 = function(d) {return {sub:d};},
                peg$c170 = "",
                peg$c171 = function() {return {};},
                peg$c172 = function(specs, decl) { return track({specs:specs, declarator:decl}, location(), text()); },
                peg$c173 = function() { return {const: true, volatile: true}; },
                peg$c174 = function() { return {const: true}; },
                peg$c175 = function() { return {volatile: true}; },
                peg$c176 = function(first, arg) {return arg;},
                peg$c177 = function(first, rest) { rest.unshift(first); return rest; },
                peg$c178 = function() {return [];},
                peg$c179 = function(specs, decl, init) {return {construct_type:"parameter_declaration", declarator:decl, specs:specs, initializer:init}; },
                peg$c180 = function(specs, decl) {return track({construct_type:"parameter_declaration", specs:specs, declarator:decl}, location(), text()); },
                peg$c181 = function(first, op, e) {return [op,e];},
                peg$c182 = function(first, rest) { return track(composeBinaryOp(first, rest, "left", "comma_expression"), location(), text()); },
                peg$c183 = function(lhs, op, rhs) { return track({construct_type: "assignment_expression", lhs:lhs, operator:op, rhs:rhs}, location(), text()); },
                peg$c184 = function(lhs, op, rhs) { return track({construct_type: "compound_assignment", lhs:lhs, operator:op, rhs:rhs}, location(), text()); },
                peg$c185 = "*=",
                peg$c186 = peg$literalExpectation("*=", false),
                peg$c187 = "/=",
                peg$c188 = peg$literalExpectation("/=", false),
                peg$c189 = "%=",
                peg$c190 = peg$literalExpectation("%=", false),
                peg$c191 = "+=",
                peg$c192 = peg$literalExpectation("+=", false),
                peg$c193 = "-=",
                peg$c194 = peg$literalExpectation("-=", false),
                peg$c195 = ">>=",
                peg$c196 = peg$literalExpectation(">>=", false),
                peg$c197 = "<<=",
                peg$c198 = peg$literalExpectation("<<=", false),
                peg$c199 = "&=",
                peg$c200 = peg$literalExpectation("&=", false),
                peg$c201 = "and_eq",
                peg$c202 = peg$literalExpectation("and_eq", false),
                peg$c203 = function() {return "&=";},
                peg$c204 = "^=",
                peg$c205 = peg$literalExpectation("^=", false),
                peg$c206 = "xor_eq",
                peg$c207 = peg$literalExpectation("xor_eq", false),
                peg$c208 = function() {return "^=";},
                peg$c209 = "|=",
                peg$c210 = peg$literalExpectation("|=", false),
                peg$c211 = "or_eq",
                peg$c212 = peg$literalExpectation("or_eq", false),
                peg$c213 = function() {return "|=";},
                peg$c214 = function(sub) { sub.constant = true; return sub; },
                peg$c215 = "?",
                peg$c216 = peg$literalExpectation("?", false),
                peg$c217 = function(condition, then, otherwise) { return track({construct_type: "ternary_expression", condition:condition, then:then, otherwise:otherwise}, location(), text()); },
                peg$c218 = "||",
                peg$c219 = peg$literalExpectation("||", false),
                peg$c220 = "or",
                peg$c221 = peg$literalExpectation("or", false),
                peg$c222 = function(first, op, e) {return ["||",e];},
                peg$c223 = function(first, rest) { return track(composeBinaryOp(first, rest, "left"), location(), text()); },
                peg$c224 = "&&",
                peg$c225 = peg$literalExpectation("&&", false),
                peg$c226 = "and",
                peg$c227 = peg$literalExpectation("and", false),
                peg$c228 = function(first, op, e) {return ["&&",e];},
                peg$c229 = function(first, rest) { return track(composeBinaryOp(first, rest), location(), text()); },
                peg$c230 = "|",
                peg$c231 = peg$literalExpectation("|", false),
                peg$c232 = "bitor",
                peg$c233 = peg$literalExpectation("bitor", false),
                peg$c234 = function(first, op, e) {return ["|",e];},
                peg$c235 = "^",
                peg$c236 = peg$literalExpectation("^", false),
                peg$c237 = "xor",
                peg$c238 = peg$literalExpectation("xor", false),
                peg$c239 = function(first, op, e) {return ["^",e];},
                peg$c240 = "bitand",
                peg$c241 = peg$literalExpectation("bitand", false),
                peg$c242 = function(first, op, e) {return ["&",e];},
                peg$c243 = "==",
                peg$c244 = peg$literalExpectation("==", false),
                peg$c245 = "!=",
                peg$c246 = peg$literalExpectation("!=", false),
                peg$c247 = "not_eq",
                peg$c248 = peg$literalExpectation("not_eq", false),
                peg$c249 = function(first) {return "!=";},
                peg$c250 = "<=",
                peg$c251 = peg$literalExpectation("<=", false),
                peg$c252 = ">=",
                peg$c253 = peg$literalExpectation(">=", false),
                peg$c254 = "<",
                peg$c255 = peg$literalExpectation("<", false),
                peg$c256 = ">",
                peg$c257 = peg$literalExpectation(">", false),
                peg$c258 = "<<",
                peg$c259 = peg$literalExpectation("<<", false),
                peg$c260 = ">>",
                peg$c261 = peg$literalExpectation(">>", false),
                peg$c262 = "+",
                peg$c263 = peg$literalExpectation("+", false),
                peg$c264 = "-",
                peg$c265 = peg$literalExpectation("-", false),
                peg$c266 = "/",
                peg$c267 = peg$literalExpectation("/", false),
                peg$c268 = "%",
                peg$c269 = peg$literalExpectation("%", false),
                peg$c270 = ".*",
                peg$c271 = peg$literalExpectation(".*", false),
                peg$c272 = "->*",
                peg$c273 = peg$literalExpectation("->*", false),
                peg$c274 = function(t, sub) {
                    return track({construct_type: "cast_expression", type:t, operand:sub}, location(), text());
                },
                peg$c275 = "++",
                peg$c276 = peg$literalExpectation("++", false),
                peg$c277 = function(op, sub) {
                    return track({construct_type: "prefix_increment_expression", operator:op, operand:sub}, location(), text());
                },
                peg$c278 = "--",
                peg$c279 = peg$literalExpectation("--", false),
                peg$c280 = function(op, sub) {
                    return track({construct_type: "prefix_decrement_expression", operator:op, operand:sub}, location(), text());
                },
                peg$c281 = function(op, sub) {
                    return track(absorb({operand:sub}, op), location(), text());
                },
                peg$c282 = "sizeof",
                peg$c283 = peg$literalExpectation("sizeof", false),
                peg$c284 = function(op, sub) {
                    return track({construct_type: "sizeof_expression", operator:"sizeof", operand:sub}, location(), text());
                },
                peg$c285 = function(op, sub) {
                    return track({construct_type: "sizeof_type_expression", operator:"sizeof", operand:sub}, location(), text());
                },
                peg$c286 = function() {return {construct_type: "dereference_expression", operator: "*"};},
                peg$c287 = function() {return {construct_type: "address_of_expression",   operator: "&"};},
                peg$c288 = function() {return {construct_type: "unary_plus_expression", operator: "+"};},
                peg$c289 = function() {return {construct_type: "unary_minus_expression", operator: "-"};},
                peg$c290 = "!",
                peg$c291 = peg$literalExpectation("!", false),
                peg$c292 = function() {return {construct_type: "logical_not_expression", operator: "!"};},
                peg$c293 = "not",
                peg$c294 = peg$literalExpectation("not", false),
                peg$c295 = function() {return {construct_type: "bitwise_not_expression", operator: "~"};},
                peg$c296 = "compl",
                peg$c297 = peg$literalExpectation("compl", false),
                peg$c298 = "new",
                peg$c299 = peg$literalExpectation("new", false),
                peg$c300 = function(id, init) {
                    return track(absorb({construct_type: "new_expression", initializer: init}, id), location(), text());
                },
                peg$c301 = function(id, init) {
                    return track(absorb({construct_type: "new_expression", initializer: init}, id), location(), text());
                },
                peg$c302 = function(specs, id) {return id;},
                peg$c303 = function(specs, decl) {
                    return track({specs:specs, declarator:decl}, location(), text());
                },
                peg$c304 = function(d) {
                    //d = insideOut(d);
                    var d2 = track(absorb({construct_type:"declarator"}, d), location(), text());
                    return d2;

                },
                peg$c305 = function(postfixes) { return {postfixes: postfixes}; },
                peg$c306 = function(p) {return p;},
                peg$c307 = function(args) {return {args:args || []};},
                peg$c308 = "delete",
                peg$c309 = peg$literalExpectation("delete", false),
                peg$c310 = function(t) {
                    return track({construct_type: "delete_expression", operand: t}, location(), text());
                },
                peg$c311 = function(t) {
                    return track({construct_type: "delete_array_expression", operand: t}, location(), text()); },
                peg$c312 = "static_cast",
                peg$c313 = peg$literalExpectation("static_cast", false),
                peg$c314 = function(t, sub) { return track({construct_type: "static_cast_expression", type: t, operand:sub}, location(), text());},
                peg$c315 = "dynamic_cast",
                peg$c316 = peg$literalExpectation("dynamic_cast", false),
                peg$c317 = function(t, sub) { return track({construct_type: "dynamic_cast_expression", type: t, operand:sub}, location(), text());},
                peg$c318 = "reinterpret_cast",
                peg$c319 = peg$literalExpectation("reinterpret_cast", false),
                peg$c320 = function(t, sub) { return track({construct_type: "reinterpret_cast_expression", type: t, operand:sub}, location(), text());},
                peg$c321 = "const_cast",
                peg$c322 = peg$literalExpectation("const_cast", false),
                peg$c323 = function(t, sub) { return track({construct_type: "const_cast_expression", type: t, operand:sub}, location(), text());},
                peg$c324 = function(sub, op) {return op;},
                peg$c325 = function(sub, ops) { return ops.length > 0 ? track(postfixExp(ops, sub), location(), text()) : sub;},
                peg$c326 = function(sub) { return track({construct_type:"subscript_expression", arg:sub}, location(), text()); },
                peg$c327 = function(args) { return track({construct_type: "function_call_expression", args: args || []}, location(), text()); },
                peg$c328 = ".",
                peg$c329 = peg$literalExpectation(".", false),
                peg$c330 = function(name) { return track({construct_type: "dot_expression", member: name}, location(), text()); },
                peg$c331 = "->",
                peg$c332 = peg$literalExpectation("->", false),
                peg$c333 = function(name) { return track({construct_type: "arrow_expression", member: name}, location(), text()); },
                peg$c334 = function() { return track({construct_type: "postfix_increment_expression"}, location(), text()); },
                peg$c335 = function() { return track({construct_type: "postfix_decrement_expression"}, location(), text()); },
                peg$c336 = function(type, args) {
                    return track({construct_type: "construct_expression", type:type, args:args || []}, location(), text());
                },
                peg$c337 = function(first, e) {return e;},
                peg$c338 = function(sub) {return track({construct_type: "parentheses_expression", subexpression:sub}, location(), text());},
                peg$c339 = "this",
                peg$c340 = peg$literalExpectation("this", false),
                peg$c341 = function() {return track({construct_type: "this_expression"}, location(), text()); },
                peg$c342 = function(id) { return track(absorb({construct_type: "identifier_expression"}, id), location(), text()); },
                peg$c343 = function(n, u) {
                    n.push(u);
                    return {identifier: n};
                },
                peg$c344 = "::",
                peg$c345 = peg$literalExpectation("::", false),
                peg$c346 = function(id) {return id;},
                peg$c347 = function() { return [];},
                peg$c348 = function(id) {return track({identifier: id}, location(), text());},
                peg$c349 = "operator",
                peg$c350 = peg$literalExpectation("operator", false),
                peg$c351 = function(op) {return track({identifier: "operator"+op, operator: op}, location(), text());},
                peg$c352 = "new[]",
                peg$c353 = peg$literalExpectation("new[]", false),
                peg$c354 = "delete[]",
                peg$c355 = peg$literalExpectation("delete[]", false),
                peg$c356 = "()",
                peg$c357 = peg$literalExpectation("()", false),
                peg$c358 = "[]",
                peg$c359 = peg$literalExpectation("[]", false),
                peg$c360 = "?:",
                peg$c361 = peg$literalExpectation("?:", false),
                peg$c362 = function(lit) {return track({construct_type: "literal", type:"float", value:lit}, location(), text());},
                peg$c363 = function(lit) {return track({construct_type: "literal", type:"int", value:lit}, location(), text());},
                peg$c364 = function(lit) {return track({construct_type: "literal", type:"char", value:lit}, location(), text());},
                peg$c365 = function(lit) {return track({construct_type: "string_literal", type:"string", value:lit}, location(), text());},
                peg$c366 = function(lit) {return track({construct_type: "literal", type:"bool", value:lit}, location(), text());},
                peg$c367 = /^[0-9]/,
                peg$c368 = peg$classExpectation([["0", "9"]], false, false),
                peg$c369 = function(neg, digits) { return parseInt((neg ? neg : "") + digits.join("")); },
                peg$c370 = /^[0-9.]/,
                peg$c371 = peg$classExpectation([["0", "9"], "."], false, false),
                peg$c372 = function(neg, digits) {return digits.indexOf(".") == digits.lastIndexOf(".") && digits.indexOf(".") != -1;},
                peg$c373 = function(neg, digits) { return parseFloat((neg ? neg : "") + digits.join("")); },
                peg$c374 = "'",
                peg$c375 = peg$literalExpectation("'", false),
                peg$c376 = /^[^'\\\n]/,
                peg$c377 = peg$classExpectation(["'", "\\", "\n"], true, false),
                peg$c378 = function(char) { return char; },
                peg$c379 = "\"",
                peg$c380 = peg$literalExpectation("\"", false),
                peg$c381 = /^[^"\\\n]/,
                peg$c382 = peg$classExpectation(["\"", "\\", "\n"], true, false),
                peg$c383 = function(chars) { return chars.join(""); },
                peg$c384 = "true",
                peg$c385 = peg$literalExpectation("true", false),
                peg$c386 = function() {return true;},
                peg$c387 = "false",
                peg$c388 = peg$literalExpectation("false", false),
                peg$c389 = function() {return false;},
                peg$c390 = "\\\"",
                peg$c391 = peg$literalExpectation("\\\"", false),
                peg$c392 = "\\'",
                peg$c393 = peg$literalExpectation("\\'", false),
                peg$c394 = "\\?",
                peg$c395 = peg$literalExpectation("\\?", false),
                peg$c396 = "\\\\",
                peg$c397 = peg$literalExpectation("\\\\", false),
                peg$c398 = "\\a",
                peg$c399 = peg$literalExpectation("\\a", false),
                peg$c400 = "\\b",
                peg$c401 = peg$literalExpectation("\\b", false),
                peg$c402 = "\\f",
                peg$c403 = peg$literalExpectation("\\f", false),
                peg$c404 = "\\n",
                peg$c405 = peg$literalExpectation("\\n", false),
                peg$c406 = "\\r",
                peg$c407 = peg$literalExpectation("\\r", false),
                peg$c408 = "\\t",
                peg$c409 = peg$literalExpectation("\\t", false),
                peg$c410 = "\\v",
                peg$c411 = peg$literalExpectation("\\v", false),
                peg$c412 = "\\0",
                peg$c413 = peg$literalExpectation("\\0", false),
                peg$c414 = /^[0-8]/,
                peg$c415 = peg$classExpectation([["0", "8"]], false, false),
                peg$c416 = peg$otherExpectation("identifier"),
                peg$c417 = function(first, rest) {return track({identifier: first + rest.join("")}, location(), text());},
                peg$c418 = /^[a-zA-Z0-9_]/,
                peg$c419 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false),
                peg$c420 = /^[a-zA-Z_]/,
                peg$c421 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
                peg$c422 = peg$otherExpectation("optional whitespace"),
                peg$c423 = /^[ \t\n\r]/,
                peg$c424 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
                peg$c425 = peg$otherExpectation("whitespace"),
                peg$c426 = function(head) {getUserTypeNames()[head.name.identifier]=true;},
                peg$c427 = function(head, mems) { return track({head: head, member_specs: mems}, location(), text()); },
                peg$c428 = function(key, name, b) {return b;},
                peg$c429 = function(key, name, bases) { return track({key:key, name:name, bases:bases}, location(), text()); },
                peg$c430 = "class",
                peg$c431 = peg$literalExpectation("class", false),
                peg$c432 = "struct",
                peg$c433 = peg$literalExpectation("struct", false),
                peg$c434 = "union",
                peg$c435 = peg$literalExpectation("union", false),
                peg$c436 = function(m) {return m},
                peg$c437 = function(members) { return {members: members}; },
                peg$c438 = function(access, m) {return m},
                peg$c439 = function(access, members) { return {members: members, access: access}; },
                peg$c440 = "private",
                peg$c441 = peg$literalExpectation("private", false),
                peg$c442 = "protected",
                peg$c443 = peg$literalExpectation("protected", false),
                peg$c444 = "public",
                peg$c445 = peg$literalExpectation("public", false),
                peg$c446 = function(specs, declarators) { return track({construct_type: "member_declaration", specs:specs, declarators:declarators}, location(), text()); },
                peg$c447 = function(c) { return c; },
                peg$c448 = function(d) { return d; },
                peg$c449 = function(f) { return f; },
                peg$c450 = "0",
                peg$c451 = peg$literalExpectation("0", false),
                peg$c452 = function(d) {d.pureVirtual = true; return d;},
                peg$c453 = function(d) {d.library_unsupported = true; return d;},
                peg$c454 = function(d, i) {d.init = i; return d;},
                peg$c455 = function(b) {return b},
                peg$c456 = function(first, b) {return b;},
                peg$c457 = function(a) {return a;},
                peg$c458 = function(a, c) {
                    return {name: c, virtual: true, access: a};},
                peg$c459 = function(a, c) {
                    return {name: c, access: a};},
                peg$c460 = function(c) {
                    return {name: c};},
                peg$c461 = function(n, c) {
                    n.push(c);
                    return n;},

                peg$currPos          = 0,
                peg$savedPos         = 0,
                peg$posDetailsCache  = [{ line: 1, column: 1 }],
                peg$maxFailPos       = 0,
                peg$maxFailExpected  = [],
                peg$silentFails      = 0,

                peg$resultsCache = {},

                peg$result;

            if ("startRule" in options) {
                if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                }

                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
            }

            function text() {
                return input.substring(peg$savedPos, peg$currPos);
            }

            function location() {
                return peg$computeLocation(peg$savedPos, peg$currPos);
            }

            function expected(description, location) {
                location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

                throw peg$buildStructuredError(
                    [peg$otherExpectation(description)],
                    input.substring(peg$savedPos, peg$currPos),
                    location
                );
            }

            function error(message, location) {
                location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

                throw peg$buildSimpleError(message, location);
            }

            function peg$literalExpectation(text, ignoreCase) {
                return { type: "literal", text: text, ignoreCase: ignoreCase };
            }

            function peg$classExpectation(parts, inverted, ignoreCase) {
                return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
            }

            function peg$anyExpectation() {
                return { type: "any" };
            }

            function peg$endExpectation() {
                return { type: "end" };
            }

            function peg$otherExpectation(description) {
                return { type: "other", description: description };
            }

            function peg$computePosDetails(pos) {
                var details = peg$posDetailsCache[pos], p;

                if (details) {
                    return details;
                } else {
                    p = pos - 1;
                    while (!peg$posDetailsCache[p]) {
                        p--;
                    }

                    details = peg$posDetailsCache[p];
                    details = {
                        line:   details.line,
                        column: details.column
                    };

                    while (p < pos) {
                        if (input.charCodeAt(p) === 10) {
                            details.line++;
                            details.column = 1;
                        } else {
                            details.column++;
                        }

                        p++;
                    }

                    peg$posDetailsCache[pos] = details;
                    return details;
                }
            }

            function peg$computeLocation(startPos, endPos) {
                var startPosDetails = peg$computePosDetails(startPos),
                    endPosDetails   = peg$computePosDetails(endPos);

                return {
                    start: {
                        offset: startPos,
                        line:   startPosDetails.line,
                        column: startPosDetails.column
                    },
                    end: {
                        offset: endPos,
                        line:   endPosDetails.line,
                        column: endPosDetails.column
                    }
                };
            }

            function peg$fail(expected) {
                if (peg$currPos < peg$maxFailPos) { return; }

                if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                }

                peg$maxFailExpected.push(expected);
            }

            function peg$buildSimpleError(message, location) {
                return new peg$SyntaxError(message, null, null, location);
            }

            function peg$buildStructuredError(expected, found, location) {
                return new peg$SyntaxError(
                    peg$SyntaxError.buildMessage(expected, found),
                    expected,
                    found,
                    location
                );
            }

            function peg$parsestart() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 0,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsews();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsedecl_or_comment();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsews();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s4 = peg$c0(s4);
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsedecl_or_comment();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsews();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s3;
                                s4 = peg$c0(s4);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c1(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedecl_or_comment() {
                var s0, s1;

                var key    = peg$currPos * 120 + 1,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsecomment();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c2();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$parsedeclaration();
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsecomment() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 2,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c3) {
                    s1 = peg$c3;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c4); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c5.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c6); }
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c5.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c6); }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 10) {
                            s3 = peg$c7;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c8); }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c9) {
                        s1 = peg$c9;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c10); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = peg$currPos;
                        s4 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 2) === peg$c11) {
                            s5 = peg$c11;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c12); }
                        }
                        peg$silentFails--;
                        if (s5 === peg$FAILED) {
                            s4 = void 0;
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c13); }
                            }
                            if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            s3 = peg$currPos;
                            s4 = peg$currPos;
                            peg$silentFails++;
                            if (input.substr(peg$currPos, 2) === peg$c11) {
                                s5 = peg$c11;
                                peg$currPos += 2;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c12); }
                            }
                            peg$silentFails--;
                            if (s5 === peg$FAILED) {
                                s4 = void 0;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                            if (s4 !== peg$FAILED) {
                                if (input.length > peg$currPos) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c13); }
                                }
                                if (s5 !== peg$FAILED) {
                                    s4 = [s4, s5];
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        if (s2 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c11) {
                                s3 = peg$c11;
                                peg$currPos += 2;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c12); }
                            }
                            if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsestatement() {
                var s0, s1;

                var key    = peg$currPos * 120 + 3,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsestatement_tracked();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c14(s1);
                }
                s0 = s1;

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsestatement_tracked() {
                var s0, s1;

                var key    = peg$currPos * 120 + 4,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parselabeled_statement();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c15(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$parsecompound_statement();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseselection_statement();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseiteration_statement();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parsejump_statement();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parsedeclaration_statement();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parseexpression_statement();
                                    }
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parselabeled_statement() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 5,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseidentifier();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                            s3 = peg$c16;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c17); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsestatement();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c18(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 4) === peg$c19) {
                        s1 = peg$c19;
                        peg$currPos += 4;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c20); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseWS();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseexp_const();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 58) {
                                        s5 = peg$c16;
                                        peg$currPos++;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c17); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parsews();
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parsestatement();
                                            if (s7 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c21(s3, s7);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 7) === peg$c22) {
                            s1 = peg$c22;
                            peg$currPos += 7;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c23); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                    s3 = peg$c16;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parsews();
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parsestatement();
                                        if (s5 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c24(s5);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexpression_statement() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 6,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexpression();
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                            s3 = peg$c25;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c26); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c27(s1);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsecompound_statement() {
                var s0, s1, s2, s3, s4, s5, s6;

                var key    = peg$currPos * 120 + 7,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c28;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c29); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$currPos;
                        s5 = peg$parsestatement();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s4;
                                s5 = peg$c30(s5);
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$currPos;
                            s5 = peg$parsestatement();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    peg$savedPos = s4;
                                    s5 = peg$c30(s5);
                                    s4 = s5;
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s4 = peg$c31;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c32); }
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c33(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseselection_statement() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

                var key    = peg$currPos * 120 + 8,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c34) {
                    s1 = peg$c34;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c35); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c36;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseexpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c38;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsews();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsestatement();
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parsews();
                                                    if (s10 !== peg$FAILED) {
                                                        if (input.substr(peg$currPos, 4) === peg$c40) {
                                                            s11 = peg$c40;
                                                            peg$currPos += 4;
                                                        } else {
                                                            s11 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c41); }
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parsews();
                                                            if (s12 !== peg$FAILED) {
                                                                s13 = peg$parsestatement();
                                                                if (s13 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c42(s5, s9, s13);
                                                                    s0 = s1;
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c34) {
                        s1 = peg$c34;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c35); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                                s3 = peg$c36;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c37); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parseexpression();
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parsews();
                                        if (s6 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                                s7 = peg$c38;
                                                peg$currPos++;
                                            } else {
                                                s7 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                            }
                                            if (s7 !== peg$FAILED) {
                                                s8 = peg$parsews();
                                                if (s8 !== peg$FAILED) {
                                                    s9 = peg$parsestatement();
                                                    if (s9 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c43(s5, s9);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseiteration_statement() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

                var key    = peg$currPos * 120 + 9,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c44) {
                    s1 = peg$c44;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c36;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseexpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c38;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsews();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsestatement();
                                                if (s9 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c46(s5, s9);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c47) {
                        s1 = peg$c47;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c48); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        peg$silentFails++;
                        s3 = peg$parseidentifierChar();
                        peg$silentFails--;
                        if (s3 === peg$FAILED) {
                            s2 = void 0;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsews();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsestatement();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsews();
                                    if (s5 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 5) === peg$c44) {
                                            s6 = peg$c44;
                                            peg$currPos += 5;
                                        } else {
                                            s6 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                        }
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parsews();
                                            if (s7 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 40) {
                                                    s8 = peg$c36;
                                                    peg$currPos++;
                                                } else {
                                                    s8 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                                }
                                                if (s8 !== peg$FAILED) {
                                                    s9 = peg$parsews();
                                                    if (s9 !== peg$FAILED) {
                                                        s10 = peg$parseexpression();
                                                        if (s10 !== peg$FAILED) {
                                                            s11 = peg$parsews();
                                                            if (s11 !== peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                                    s12 = peg$c38;
                                                                    peg$currPos++;
                                                                } else {
                                                                    s12 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                                                }
                                                                if (s12 !== peg$FAILED) {
                                                                    s13 = peg$parsews();
                                                                    if (s13 !== peg$FAILED) {
                                                                        if (input.charCodeAt(peg$currPos) === 59) {
                                                                            s14 = peg$c25;
                                                                            peg$currPos++;
                                                                        } else {
                                                                            s14 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                                                        }
                                                                        if (s14 !== peg$FAILED) {
                                                                            peg$savedPos = s0;
                                                                            s1 = peg$c49(s4, s10);
                                                                            s0 = s1;
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c50) {
                            s1 = peg$c50;
                            peg$currPos += 3;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c51); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 40) {
                                    s3 = peg$c36;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parsews();
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parsefor_init_statement();
                                        if (s5 !== peg$FAILED) {
                                            s6 = peg$parsews();
                                            if (s6 !== peg$FAILED) {
                                                s7 = peg$parseexpression();
                                                if (s7 !== peg$FAILED) {
                                                    s8 = peg$parsews();
                                                    if (s8 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 59) {
                                                            s9 = peg$c25;
                                                            peg$currPos++;
                                                        } else {
                                                            s9 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                                        }
                                                        if (s9 !== peg$FAILED) {
                                                            s10 = peg$parsews();
                                                            if (s10 !== peg$FAILED) {
                                                                s11 = peg$parseexpression();
                                                                if (s11 !== peg$FAILED) {
                                                                    s12 = peg$parsews();
                                                                    if (s12 !== peg$FAILED) {
                                                                        if (input.charCodeAt(peg$currPos) === 41) {
                                                                            s13 = peg$c38;
                                                                            peg$currPos++;
                                                                        } else {
                                                                            s13 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                                                        }
                                                                        if (s13 !== peg$FAILED) {
                                                                            s14 = peg$parsews();
                                                                            if (s14 !== peg$FAILED) {
                                                                                s15 = peg$parsestatement();
                                                                                if (s15 !== peg$FAILED) {
                                                                                    peg$savedPos = s0;
                                                                                    s1 = peg$c52(s5, s7, s11, s15);
                                                                                    s0 = s1;
                                                                                } else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                }
                                                                            } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                            }
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsefor_init_statement() {
                var s0, s1;

                var key    = peg$currPos * 120 + 10,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$parseexpression_statement();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsedeclaration_statement();
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c53(s1);
                    }
                    s0 = s1;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsejump_statement() {
                var s0, s1, s2, s3, s4, s5, s6;

                var key    = peg$currPos * 120 + 11,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c54) {
                    s1 = peg$c54;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c55); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parseidentifierChar();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                        s2 = void 0;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                                s4 = peg$c25;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c26); }
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c56();
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 8) === peg$c57) {
                        s1 = peg$c57;
                        peg$currPos += 8;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c58); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        peg$silentFails++;
                        s3 = peg$parseidentifierChar();
                        peg$silentFails--;
                        if (s3 === peg$FAILED) {
                            s2 = void 0;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsews();
                            if (s3 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 59) {
                                    s4 = peg$c25;
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                }
                                if (s4 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c59();
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 6) === peg$c60) {
                            s1 = peg$c60;
                            peg$currPos += 6;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c61); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$currPos;
                            peg$silentFails++;
                            s3 = peg$parseidentifierChar();
                            peg$silentFails--;
                            if (s3 === peg$FAILED) {
                                s2 = void 0;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parsews();
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parseexpression();
                                    if (s4 === peg$FAILED) {
                                        s4 = null;
                                    }
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parsews();
                                        if (s5 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 59) {
                                                s6 = peg$c25;
                                                peg$currPos++;
                                            } else {
                                                s6 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                            }
                                            if (s6 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c62(s4);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedeclaration_statement() {
                var s0, s1;

                var key    = peg$currPos * 120 + 12,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsedeclaration();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c63(s1);
                }
                s0 = s1;

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedeclaration() {
                var s0;

                var key    = peg$currPos * 120 + 13,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$parsesimple_declaration();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseclass_declaration();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsefunction_definition();
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsesimple_declaration() {
                var s0, s1, s2, s3, s4, s5, s6;

                var key    = peg$currPos * 120 + 14,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsedecl_specifiers();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parseidentifier();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                        s2 = void 0;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsedeclarator_list();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsews();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 59) {
                                        s6 = peg$c25;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c64(s1, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedeclarator_list() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 15,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsedeclarator_init();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c65;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c66); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parsedeclarator_init();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c67(s1, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c65;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c66); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsedeclarator_init();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c67(s1, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c68(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseclass_declaration() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 16,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseclass_specifier();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                            s3 = peg$c25;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c26); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c69(s1);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsefunction_definition() {
                var s0, s1, s2, s3, s4, s5, s6;

                var key    = peg$currPos * 120 + 17,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsedecl_specifiers();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parseidentifier();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                        s2 = void 0;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsedeclarator();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsews();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsecompound_statement();
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c70(s1, s4, s6);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseconstructor_definition() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

                var key    = peg$currPos * 120 + 18,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseidentifier();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c36;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseargument_declaration_list();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c38;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsews();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsector_initializer();
                                                if (s9 === peg$FAILED) {
                                                    s9 = null;
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parsews();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parsecompound_statement();
                                                        if (s11 === peg$FAILED) {
                                                            s11 = peg$currPos;
                                                            if (input.charCodeAt(peg$currPos) === 59) {
                                                                s12 = peg$c25;
                                                                peg$currPos++;
                                                            } else {
                                                                s12 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                                            }
                                                            if (s12 !== peg$FAILED) {
                                                                peg$savedPos = s11;
                                                                s12 = peg$c71(s1, s5, s9);
                                                            }
                                                            s11 = s12;
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c72(s1, s5, s9, s11);
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedestructor_definition() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

                var key    = peg$currPos * 120 + 19,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 126) {
                    s1 = peg$c73;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c74); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseidentifier();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                                s4 = peg$c36;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c37); }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsews();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c38;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsews();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsecompound_statement();
                                            if (s8 === peg$FAILED) {
                                                s8 = peg$currPos;
                                                if (input.charCodeAt(peg$currPos) === 59) {
                                                    s9 = peg$c25;
                                                    peg$currPos++;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    peg$savedPos = s8;
                                                    s9 = peg$c75(s2);
                                                }
                                                s8 = s9;
                                            }
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c76(s2, s8);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c77) {
                        s1 = peg$c77;
                        peg$currPos += 7;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c78); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseWS();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 126) {
                                s3 = peg$c73;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c74); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parseidentifier();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsews();
                                    if (s5 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 40) {
                                            s6 = peg$c36;
                                            peg$currPos++;
                                        } else {
                                            s6 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                        }
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parsews();
                                            if (s7 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                    s8 = peg$c38;
                                                    peg$currPos++;
                                                } else {
                                                    s8 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                                }
                                                if (s8 !== peg$FAILED) {
                                                    s9 = peg$parsews();
                                                    if (s9 !== peg$FAILED) {
                                                        s10 = peg$parsecompound_statement();
                                                        if (s10 === peg$FAILED) {
                                                            s10 = peg$currPos;
                                                            if (input.charCodeAt(peg$currPos) === 59) {
                                                                s11 = peg$c25;
                                                                peg$currPos++;
                                                            } else {
                                                                s11 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                                            }
                                                            if (s11 !== peg$FAILED) {
                                                                peg$savedPos = s10;
                                                                s11 = peg$c75(s4);
                                                            }
                                                            s10 = s11;
                                                        }
                                                        if (s10 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c79(s4, s10);
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsector_initializer() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                var key    = peg$currPos * 120 + 20,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 58) {
                    s1 = peg$c16;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsemem_initializer();
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$currPos;
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 44) {
                                    s7 = peg$c65;
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parsews();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parsemem_initializer();
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s5;
                                            s6 = peg$c80(s3, s9);
                                            s5 = s6;
                                        } else {
                                            peg$currPos = s5;
                                            s5 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$currPos;
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                        s7 = peg$c65;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsews();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parsemem_initializer();
                                            if (s9 !== peg$FAILED) {
                                                peg$savedPos = s5;
                                                s6 = peg$c80(s3, s9);
                                                s5 = s6;
                                            } else {
                                                peg$currPos = s5;
                                                s5 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s5;
                                            s5 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c81(s3, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsemem_initializer() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 21,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseidentifier();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c36;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseexp_list();
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c38;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c82(s1, s5);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsefunction_body() {
                var s0;

                var key    = peg$currPos * 120 + 22,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$parsecompound_statement();

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedecl_specifiers() {
                var s0, s1, s2, s3, s4, s5, s6;

                var key    = peg$currPos * 120 + 23,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$currPos;
                s3 = peg$parsedecl_specifier();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseWS();
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c83(s3);
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$currPos;
                    s3 = peg$parsedecl_specifier();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseWS();
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c83(s3);
                            s2 = s3;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsesimple_type_name();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$currPos;
                        s5 = peg$parseWS();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsedecl_specifier();
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s4;
                                s5 = peg$c84(s1, s2, s6);
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$currPos;
                            s5 = peg$parseWS();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsedecl_specifier();
                                if (s6 !== peg$FAILED) {
                                    peg$savedPos = s4;
                                    s5 = peg$c84(s1, s2, s6);
                                    s4 = s5;
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c85(s1, s2, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedecl_specifier() {
                var s0, s1;

                var key    = peg$currPos * 120 + 24,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsetype_specifier();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c86(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsestorage_class_specifier();
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c87(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsefunction_specifier();
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c88) {
                                s0 = peg$c88;
                                peg$currPos += 7;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c89); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c90) {
                                    s0 = peg$c90;
                                    peg$currPos += 6;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsetype_specifiers() {
                var s0, s1, s2, s3, s4, s5, s6;

                var key    = peg$currPos * 120 + 25,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$currPos;
                s3 = peg$parsetype_specifier();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseWS();
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c83(s3);
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$currPos;
                    s3 = peg$parsetype_specifier();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseWS();
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c83(s3);
                            s2 = s3;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsesimple_type_name();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$currPos;
                        s5 = peg$parseWS();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsetype_specifier();
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s4;
                                s5 = peg$c84(s1, s2, s6);
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$currPos;
                            s5 = peg$parseWS();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsetype_specifier();
                                if (s6 !== peg$FAILED) {
                                    peg$savedPos = s4;
                                    s5 = peg$c84(s1, s2, s6);
                                    s4 = s5;
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c92(s1, s2, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsetype_specifier() {
                var s0;

                var key    = peg$currPos * 120 + 26,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$parseenum_specifier();
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c93) {
                        s0 = peg$c93;
                        peg$currPos += 5;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c94); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 8) === peg$c95) {
                            s0 = peg$c95;
                            peg$currPos += 8;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c96); }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsestorage_class_specifier() {
                var s0;

                var key    = peg$currPos * 120 + 27,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 8) === peg$c97) {
                    s0 = peg$c97;
                    peg$currPos += 8;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c98); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c99) {
                        s0 = peg$c99;
                        peg$currPos += 6;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c100); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 12) === peg$c101) {
                            s0 = peg$c101;
                            peg$currPos += 12;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c102); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c103) {
                                s0 = peg$c103;
                                peg$currPos += 6;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c104); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 7) === peg$c105) {
                                    s0 = peg$c105;
                                    peg$currPos += 7;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c106); }
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsefunction_specifier() {
                var s0;

                var key    = peg$currPos * 120 + 28,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 6) === peg$c107) {
                    s0 = peg$c107;
                    peg$currPos += 6;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c108); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c109) {
                        s0 = peg$c109;
                        peg$currPos += 8;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c110); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c77) {
                            s0 = peg$c77;
                            peg$currPos += 7;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c78); }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsesimple_type_name() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 29,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                peg$silentFails++;
                s0 = peg$currPos;
                s1 = peg$parse_simple_type_name();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parseidentifierChar();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                        s2 = void 0;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c112(s1);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c111); }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parse_simple_type_name() {
                var s0, s1, s2;

                var key    = peg$currPos * 120 + 30,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 4) === peg$c113) {
                    s0 = peg$c113;
                    peg$currPos += 4;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c114); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c115) {
                        s0 = peg$c115;
                        peg$currPos += 5;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c116); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c117) {
                            s0 = peg$c117;
                            peg$currPos += 3;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c118); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c119) {
                                s0 = peg$c119;
                                peg$currPos += 4;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c120); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c121) {
                                    s0 = peg$c121;
                                    peg$currPos += 4;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c122); }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c123) {
                                        s0 = peg$c123;
                                        peg$currPos += 6;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c124); }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 8) === peg$c125) {
                                            s0 = peg$c125;
                                            peg$currPos += 8;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c126); }
                                        }
                                        if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 5) === peg$c127) {
                                                s0 = peg$c127;
                                                peg$currPos += 5;
                                            } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c128); }
                                            }
                                            if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 6) === peg$c129) {
                                                    s0 = peg$c129;
                                                    peg$currPos += 6;
                                                } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c130); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c131) {
                                                        s0 = peg$c131;
                                                        peg$currPos += 4;
                                                    } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c132); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseidentifier();
                                                        if (s1 !== peg$FAILED) {
                                                            peg$savedPos = peg$currPos;
                                                            s2 = peg$c133(s1);
                                                            if (s2) {
                                                                s2 = void 0;
                                                            } else {
                                                                s2 = peg$FAILED;
                                                            }
                                                            if (s2 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s1 = peg$c134(s1);
                                                                s0 = s1;
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseenum_specifier() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

                var key    = peg$currPos * 120 + 31,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c135) {
                    s1 = peg$c135;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c136); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseWS();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseidentifier();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 123) {
                                    s5 = peg$c28;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c29); }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseenumerator();
                                    if (s6 !== peg$FAILED) {
                                        s7 = [];
                                        s8 = peg$currPos;
                                        s9 = peg$parsews();
                                        if (s9 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 44) {
                                                s10 = peg$c65;
                                                peg$currPos++;
                                            } else {
                                                s10 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parsews();
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parseenumerator();
                                                    if (s12 !== peg$FAILED) {
                                                        peg$savedPos = s8;
                                                        s9 = peg$c137(s3, s6, s12);
                                                        s8 = s9;
                                                    } else {
                                                        peg$currPos = s8;
                                                        s8 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s8;
                                                    s8 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s8;
                                                s8 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s8;
                                            s8 = peg$FAILED;
                                        }
                                        while (s8 !== peg$FAILED) {
                                            s7.push(s8);
                                            s8 = peg$currPos;
                                            s9 = peg$parsews();
                                            if (s9 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 44) {
                                                    s10 = peg$c65;
                                                    peg$currPos++;
                                                } else {
                                                    s10 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parsews();
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parseenumerator();
                                                        if (s12 !== peg$FAILED) {
                                                            peg$savedPos = s8;
                                                            s9 = peg$c137(s3, s6, s12);
                                                            s8 = s9;
                                                        } else {
                                                            peg$currPos = s8;
                                                            s8 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s8;
                                                        s8 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s8;
                                                    s8 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s8;
                                                s8 = peg$FAILED;
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsews();
                                            if (s8 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 125) {
                                                    s9 = peg$c31;
                                                    peg$currPos++;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c138(s3, s6, s7);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseenumerator() {
                var s0, s1, s2, s3, s4, s5, s6;

                var key    = peg$currPos * 120 + 32,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseidentifier();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s4 = peg$c139;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c140); }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsews();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseexp_const();
                                if (s6 !== peg$FAILED) {
                                    peg$savedPos = s2;
                                    s3 = peg$c141(s1, s6);
                                    s2 = s3;
                                } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c142(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedeclarator_init() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 33,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsedeclarator();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s3 = peg$c139;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c140); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 21) === peg$c143) {
                                    s5 = peg$c143;
                                    peg$currPos += 21;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c144); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c145(s1);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsedeclarator();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseinitializer();
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c146(s1, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseinitializer() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 34,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$parsebrace_or_equal_initializer();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s1 = peg$c36;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseexp_list();
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s5 = peg$c38;
                                        peg$currPos++;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c147(s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsebrace_or_equal_initializer() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 35,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 61) {
                    s1 = peg$c139;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c140); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp_assn();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c148(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s1 = peg$c139;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c140); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 123) {
                                s3 = peg$c28;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c29); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parseinitializer_list();
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parsews();
                                        if (s6 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 125) {
                                                s7 = peg$c31;
                                                peg$currPos++;
                                            } else {
                                                s7 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                            }
                                            if (s7 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c149(s5);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseinitializer_list() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 36,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_assn();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c65;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c66); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_assn();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c150(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c65;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c66); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_assn();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c150(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c151(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedeclarator() {
                var s0, s1;

                var key    = peg$currPos * 120 + 37,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parse_declarator();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c152(s1);
                }
                s0 = s1;

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseabstract_declarator() {
                var s0, s1;

                var key    = peg$currPos * 120 + 38,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parse_abs_declarator();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c153(s1);
                }
                s0 = s1;

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parse_declarator() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 39,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 42) {
                    s1 = peg$c154;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c155); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsecv_qualifier();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_declarator();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c156(s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 38) {
                        s1 = peg$c157;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c158); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsecv_qualifier();
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parse_declarator();
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c159(s3, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsedeclarator_simple();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsedeclarator_postfixes();
                            if (s2 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c160(s1, s2);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsedeclarator_simple();
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parse_abs_declarator() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 40,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 42) {
                    s1 = peg$c154;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c155); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsecv_qualifier();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_abs_declarator();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c156(s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 38) {
                        s1 = peg$c157;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c158); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsecv_qualifier();
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parse_abs_declarator();
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c159(s3, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseabs_declarator_simple();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsedeclarator_postfixes();
                            if (s2 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c160(s1, s2);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseabs_declarator_simple();
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedeclarator_postfixes() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 41,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = [];
                s1 = peg$currPos;
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsedeclarator_postfix();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s1;
                        s2 = peg$c161(s3);
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    while (s1 !== peg$FAILED) {
                        s0.push(s1);
                        s1 = peg$currPos;
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsedeclarator_postfix();
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s1;
                                s2 = peg$c161(s3);
                                s1 = s2;
                            } else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    }
                } else {
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedeclarator_postfix() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 42,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c36;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseargument_declaration_list();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c38;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsecv_qualifier();
                                        if (s7 === peg$FAILED) {
                                            s7 = null;
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c162(s3, s7);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 91) {
                        s1 = peg$c163;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c164); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseexp_const();
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s5 = peg$c165;
                                        peg$currPos++;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c166); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c167(s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsedeclarator_simple() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 43,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsename();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c168(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s1 = peg$c36;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parse_declarator();
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s5 = peg$c38;
                                        peg$currPos++;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c169(s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseabs_declarator_simple() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 44,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c36;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_abs_declarator();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c38;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c169(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$c170;
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c171();
                    }
                    s0 = s1;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsetype_id() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 45,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsetype_specifiers();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseabstract_declarator();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c172(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsecv_qualifier() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 46,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c93) {
                    s1 = peg$c93;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c94); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseWS();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 8) === peg$c95) {
                            s3 = peg$c95;
                            peg$currPos += 8;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c96); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c173();
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 8) === peg$c95) {
                        s1 = peg$c95;
                        peg$currPos += 8;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c96); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseWS();
                        if (s2 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c93) {
                                s3 = peg$c93;
                                peg$currPos += 5;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c94); }
                            }
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c173();
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 5) === peg$c93) {
                            s1 = peg$c93;
                            peg$currPos += 5;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c94); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c174();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 8) === peg$c95) {
                                s1 = peg$c95;
                                peg$currPos += 8;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c96); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c175();
                            }
                            s0 = s1;
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseargument_declaration_list() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 47,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseargument_declaration();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c65;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c66); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseargument_declaration();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c176(s1, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c65;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c66); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseargument_declaration();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c176(s1, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c177(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$c170;
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c178();
                    }
                    s0 = s1;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseargument_declaration() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 48,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsedecl_specifiers();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsedeclarator();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 61) {
                                    s5 = peg$c139;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseexp_assn();
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c179(s1, s3, s7);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsedecl_specifiers();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsedeclarator();
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c180(s1, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsedecl_specifiers();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parseabstract_declarator();
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parsews();
                                    if (s4 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 61) {
                                            s5 = peg$c139;
                                            peg$currPos++;
                                        } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                        }
                                        if (s5 !== peg$FAILED) {
                                            s6 = peg$parsews();
                                            if (s6 !== peg$FAILED) {
                                                s7 = peg$parseexp_assn();
                                                if (s7 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c179(s1, s3, s7);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsedecl_specifiers();
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parsews();
                                if (s2 !== peg$FAILED) {
                                    s3 = peg$parseabstract_declarator();
                                    if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c180(s1, s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexpression() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 49,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_assn();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c65;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c66); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_assn();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c181(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c65;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c66); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_assn();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c181(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c182(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseexp_assn();
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_assn() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 50,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_unary();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s3 = peg$c139;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c140); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseexp_assn();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c183(s1, s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseexp_unary();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseop_comp_assn();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parseexp_assn();
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c184(s1, s3, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseexp_cond();
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseop_comp_assn() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 51,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 2) === peg$c185) {
                    s0 = peg$c185;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c186); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c187) {
                        s0 = peg$c187;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c188); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c189) {
                            s0 = peg$c189;
                            peg$currPos += 2;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c190); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c191) {
                                s0 = peg$c191;
                                peg$currPos += 2;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c192); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c193) {
                                    s0 = peg$c193;
                                    peg$currPos += 2;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c194); }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c195) {
                                        s0 = peg$c195;
                                        peg$currPos += 3;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c196); }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c197) {
                                            s0 = peg$c197;
                                            peg$currPos += 3;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c198); }
                                        }
                                        if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c199) {
                                                s0 = peg$c199;
                                                peg$currPos += 2;
                                            } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c200); }
                                            }
                                            if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                if (input.substr(peg$currPos, 6) === peg$c201) {
                                                    s1 = peg$c201;
                                                    peg$currPos += 6;
                                                } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c202); }
                                                }
                                                if (s1 !== peg$FAILED) {
                                                    s2 = peg$currPos;
                                                    peg$silentFails++;
                                                    s3 = peg$parseidentifierChar();
                                                    peg$silentFails--;
                                                    if (s3 === peg$FAILED) {
                                                        s2 = void 0;
                                                    } else {
                                                        peg$currPos = s2;
                                                        s2 = peg$FAILED;
                                                    }
                                                    if (s2 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c203();
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 2) === peg$c204) {
                                                        s0 = peg$c204;
                                                        peg$currPos += 2;
                                                    } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c205); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        if (input.substr(peg$currPos, 6) === peg$c206) {
                                                            s1 = peg$c206;
                                                            peg$currPos += 6;
                                                        } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c207); }
                                                        }
                                                        if (s1 !== peg$FAILED) {
                                                            s2 = peg$currPos;
                                                            peg$silentFails++;
                                                            s3 = peg$parseidentifierChar();
                                                            peg$silentFails--;
                                                            if (s3 === peg$FAILED) {
                                                                s2 = void 0;
                                                            } else {
                                                                peg$currPos = s2;
                                                                s2 = peg$FAILED;
                                                            }
                                                            if (s2 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s1 = peg$c208();
                                                                s0 = s1;
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 2) === peg$c209) {
                                                                s0 = peg$c209;
                                                                peg$currPos += 2;
                                                            } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c210); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                if (input.substr(peg$currPos, 5) === peg$c211) {
                                                                    s1 = peg$c211;
                                                                    peg$currPos += 5;
                                                                } else {
                                                                    s1 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c212); }
                                                                }
                                                                if (s1 !== peg$FAILED) {
                                                                    s2 = peg$currPos;
                                                                    peg$silentFails++;
                                                                    s3 = peg$parseidentifierChar();
                                                                    peg$silentFails--;
                                                                    if (s3 === peg$FAILED) {
                                                                        s2 = void 0;
                                                                    } else {
                                                                        peg$currPos = s2;
                                                                        s2 = peg$FAILED;
                                                                    }
                                                                    if (s2 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$c213();
                                                                        s0 = s1;
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_const() {
                var s0, s1;

                var key    = peg$currPos * 120 + 52,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_cond();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c214(s1);
                }
                s0 = s1;

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_cond() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                var key    = peg$currPos * 120 + 53,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_or();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 63) {
                            s3 = peg$c215;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c216); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseexpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 58) {
                                            s7 = peg$c16;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c17); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsews();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parseexp_assn();
                                                if (s9 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c217(s1, s5, s9);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseexp_or();
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_or() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                var key    = peg$currPos * 120 + 54,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_and();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c218) {
                            s5 = peg$c218;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c219); }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c220) {
                                s6 = peg$c220;
                                peg$currPos += 2;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c221); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos;
                                peg$silentFails++;
                                s8 = peg$parseidentifierChar();
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                    s7 = void 0;
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_and();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c222(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c218) {
                                s5 = peg$c218;
                                peg$currPos += 2;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c219); }
                            }
                            if (s5 === peg$FAILED) {
                                s5 = peg$currPos;
                                if (input.substr(peg$currPos, 2) === peg$c220) {
                                    s6 = peg$c220;
                                    peg$currPos += 2;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c221); }
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$currPos;
                                    peg$silentFails++;
                                    s8 = peg$parseidentifierChar();
                                    peg$silentFails--;
                                    if (s8 === peg$FAILED) {
                                        s7 = void 0;
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s6 = [s6, s7];
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_and();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c222(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c223(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_and() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                var key    = peg$currPos * 120 + 55,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_or_bit();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c224) {
                            s5 = peg$c224;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c225); }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.substr(peg$currPos, 3) === peg$c226) {
                                s6 = peg$c226;
                                peg$currPos += 3;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c227); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos;
                                peg$silentFails++;
                                s8 = peg$parseidentifierChar();
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                    s7 = void 0;
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_or_bit();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c228(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c224) {
                                s5 = peg$c224;
                                peg$currPos += 2;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c225); }
                            }
                            if (s5 === peg$FAILED) {
                                s5 = peg$currPos;
                                if (input.substr(peg$currPos, 3) === peg$c226) {
                                    s6 = peg$c226;
                                    peg$currPos += 3;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c227); }
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$currPos;
                                    peg$silentFails++;
                                    s8 = peg$parseidentifierChar();
                                    peg$silentFails--;
                                    if (s8 === peg$FAILED) {
                                        s7 = void 0;
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s6 = [s6, s7];
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_or_bit();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c228(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c229(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_or_bit() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                var key    = peg$currPos * 120 + 56,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_xor_bit();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 124) {
                            s5 = peg$c230;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c231); }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.substr(peg$currPos, 5) === peg$c232) {
                                s6 = peg$c232;
                                peg$currPos += 5;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c233); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos;
                                peg$silentFails++;
                                s8 = peg$parseidentifierChar();
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                    s7 = void 0;
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_xor_bit();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c234(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 124) {
                                s5 = peg$c230;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c231); }
                            }
                            if (s5 === peg$FAILED) {
                                s5 = peg$currPos;
                                if (input.substr(peg$currPos, 5) === peg$c232) {
                                    s6 = peg$c232;
                                    peg$currPos += 5;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c233); }
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$currPos;
                                    peg$silentFails++;
                                    s8 = peg$parseidentifierChar();
                                    peg$silentFails--;
                                    if (s8 === peg$FAILED) {
                                        s7 = void 0;
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s6 = [s6, s7];
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_xor_bit();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c234(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c229(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_xor_bit() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 57,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_and_bit();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 94) {
                            s5 = peg$c235;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c236); }
                        }
                        if (s5 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c237) {
                                s5 = peg$c237;
                                peg$currPos += 3;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c238); }
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_and_bit();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c239(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 94) {
                                s5 = peg$c235;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c236); }
                            }
                            if (s5 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c237) {
                                    s5 = peg$c237;
                                    peg$currPos += 3;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c238); }
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_and_bit();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c239(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c229(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_and_bit() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                var key    = peg$currPos * 120 + 58,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_eq();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 38) {
                            s6 = peg$c157;
                            peg$currPos++;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c158); }
                        }
                        if (s6 !== peg$FAILED) {
                            s7 = peg$currPos;
                            peg$silentFails++;
                            if (input.charCodeAt(peg$currPos) === 38) {
                                s8 = peg$c157;
                                peg$currPos++;
                            } else {
                                s8 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c158); }
                            }
                            peg$silentFails--;
                            if (s8 === peg$FAILED) {
                                s7 = void 0;
                            } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.substr(peg$currPos, 6) === peg$c240) {
                                s6 = peg$c240;
                                peg$currPos += 6;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c241); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos;
                                peg$silentFails++;
                                s8 = peg$parseidentifierChar();
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                    s7 = void 0;
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_eq();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c242(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 38) {
                                s6 = peg$c157;
                                peg$currPos++;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c158); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos;
                                peg$silentFails++;
                                if (input.charCodeAt(peg$currPos) === 38) {
                                    s8 = peg$c157;
                                    peg$currPos++;
                                } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c158); }
                                }
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                    s7 = void 0;
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                            if (s5 === peg$FAILED) {
                                s5 = peg$currPos;
                                if (input.substr(peg$currPos, 6) === peg$c240) {
                                    s6 = peg$c240;
                                    peg$currPos += 6;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c241); }
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$currPos;
                                    peg$silentFails++;
                                    s8 = peg$parseidentifierChar();
                                    peg$silentFails--;
                                    if (s8 === peg$FAILED) {
                                        s7 = void 0;
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s6 = [s6, s7];
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_eq();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c242(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c229(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_eq() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                var key    = peg$currPos * 120 + 59,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_rel();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c243) {
                            s5 = peg$c243;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c244); }
                        }
                        if (s5 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c245) {
                                s5 = peg$c245;
                                peg$currPos += 2;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c246); }
                            }
                            if (s5 === peg$FAILED) {
                                s5 = peg$currPos;
                                if (input.substr(peg$currPos, 6) === peg$c247) {
                                    s6 = peg$c247;
                                    peg$currPos += 6;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c248); }
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$currPos;
                                    peg$silentFails++;
                                    s8 = peg$parseidentifierChar();
                                    peg$silentFails--;
                                    if (s8 === peg$FAILED) {
                                        s7 = void 0;
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s5;
                                        s6 = peg$c249(s1);
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_rel();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c181(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c243) {
                                s5 = peg$c243;
                                peg$currPos += 2;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c244); }
                            }
                            if (s5 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c245) {
                                    s5 = peg$c245;
                                    peg$currPos += 2;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c246); }
                                }
                                if (s5 === peg$FAILED) {
                                    s5 = peg$currPos;
                                    if (input.substr(peg$currPos, 6) === peg$c247) {
                                        s6 = peg$c247;
                                        peg$currPos += 6;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c248); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$currPos;
                                        peg$silentFails++;
                                        s8 = peg$parseidentifierChar();
                                        peg$silentFails--;
                                        if (s8 === peg$FAILED) {
                                            s7 = void 0;
                                        } else {
                                            peg$currPos = s7;
                                            s7 = peg$FAILED;
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s5;
                                            s6 = peg$c249(s1);
                                            s5 = s6;
                                        } else {
                                            peg$currPos = s5;
                                            s5 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_rel();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c181(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c229(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_rel() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 60,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_shift();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseop_rel();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_shift();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c181(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseop_rel();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_shift();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c181(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c223(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseop_rel() {
                var s0;

                var key    = peg$currPos * 120 + 61,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 2) === peg$c250) {
                    s0 = peg$c250;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c251); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c252) {
                        s0 = peg$c252;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c253); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 60) {
                            s0 = peg$c254;
                            peg$currPos++;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c255); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 62) {
                                s0 = peg$c256;
                                peg$currPos++;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c257); }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_shift() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 62,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_add();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseop_shift();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_add();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c181(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseop_shift();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_add();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c181(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c223(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseop_shift() {
                var s0;

                var key    = peg$currPos * 120 + 63,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 2) === peg$c258) {
                    s0 = peg$c258;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c259); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c260) {
                        s0 = peg$c260;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c261); }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_add() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 64,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_mult();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseop_add();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_mult();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c181(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseop_add();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_mult();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c181(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c223(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseop_add() {
                var s0;

                var key    = peg$currPos * 120 + 65,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.charCodeAt(peg$currPos) === 43) {
                    s0 = peg$c262;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c263); }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                        s0 = peg$c264;
                        peg$currPos++;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c265); }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_mult() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 66,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_pm();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseop_mult();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_pm();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c181(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseop_mult();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_pm();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c181(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c229(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseop_mult() {
                var s0;

                var key    = peg$currPos * 120 + 67,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.charCodeAt(peg$currPos) === 42) {
                    s0 = peg$c154;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c155); }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                        s0 = peg$c266;
                        peg$currPos++;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c267); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 37) {
                            s0 = peg$c268;
                            peg$currPos++;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c269); }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_pm() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 68,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_cast();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseop_pm();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_cast();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c181(s1, s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseop_pm();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_cast();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c181(s1, s5, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c229(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseop_pm() {
                var s0;

                var key    = peg$currPos * 120 + 69,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 2) === peg$c270) {
                    s0 = peg$c270;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c271); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c272) {
                        s0 = peg$c272;
                        peg$currPos += 3;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c273); }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_cast() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 70,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c36;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsetype_id();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c38;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseexp_cast();
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c274(s3, s7);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseexp_unary();
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_unary() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 71,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c275) {
                    s1 = peg$c275;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c276); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp_unary();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c277(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c278) {
                        s1 = peg$c278;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c279); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseexp_unary();
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c280(s1, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseop_unary();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parseexp_cast();
                                if (s3 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c281(s1, s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 6) === peg$c282) {
                                s1 = peg$c282;
                                peg$currPos += 6;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c283); }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parsews();
                                if (s2 !== peg$FAILED) {
                                    s3 = peg$parseexp_unary();
                                    if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c284(s1, s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 6) === peg$c282) {
                                    s1 = peg$c282;
                                    peg$currPos += 6;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c283); }
                                }
                                if (s1 !== peg$FAILED) {
                                    s2 = peg$parsews();
                                    if (s2 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 40) {
                                            s3 = peg$c36;
                                            peg$currPos++;
                                        } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                        }
                                        if (s3 !== peg$FAILED) {
                                            s4 = peg$parsews();
                                            if (s4 !== peg$FAILED) {
                                                s5 = peg$parsesimple_type_name();
                                                if (s5 !== peg$FAILED) {
                                                    s6 = peg$parsews();
                                                    if (s6 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 41) {
                                                            s7 = peg$c38;
                                                            peg$currPos++;
                                                        } else {
                                                            s7 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                                        }
                                                        if (s7 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c285(s1, s5);
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseexp_new();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parseexp_delete();
                                    }
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseop_unary() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 72,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 42) {
                    s1 = peg$c154;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c155); }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c286();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 38) {
                        s1 = peg$c157;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c158); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c287();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 43) {
                            s1 = peg$c262;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c263); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c288();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 45) {
                                s1 = peg$c264;
                                peg$currPos++;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c265); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c289();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.charCodeAt(peg$currPos) === 33) {
                                    s1 = peg$c290;
                                    peg$currPos++;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c291); }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c292();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 3) === peg$c293) {
                                        s1 = peg$c293;
                                        peg$currPos += 3;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c294); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                        s2 = peg$currPos;
                                        peg$silentFails++;
                                        s3 = peg$parseidentifierChar();
                                        peg$silentFails--;
                                        if (s3 === peg$FAILED) {
                                            s2 = void 0;
                                        } else {
                                            peg$currPos = s2;
                                            s2 = peg$FAILED;
                                        }
                                        if (s2 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c292();
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 126) {
                                            s1 = peg$c73;
                                            peg$currPos++;
                                        } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c295();
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.substr(peg$currPos, 5) === peg$c296) {
                                                s1 = peg$c296;
                                                peg$currPos += 5;
                                            } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c297); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c295();
                                            }
                                            s0 = s1;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_new() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                var key    = peg$currPos * 120 + 73,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c298) {
                    s1 = peg$c298;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c299); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseWS();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsenew_type_id();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsenew_initializer();
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c300(s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c298) {
                        s1 = peg$c298;
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c299); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                                s3 = peg$c36;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c37); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsetype_id();
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parsews();
                                        if (s6 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                                s7 = peg$c38;
                                                peg$currPos++;
                                            } else {
                                                s7 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                            }
                                            if (s7 !== peg$FAILED) {
                                                s8 = peg$parsews();
                                                if (s8 !== peg$FAILED) {
                                                    s9 = peg$parsenew_initializer();
                                                    if (s9 === peg$FAILED) {
                                                        s9 = null;
                                                    }
                                                    if (s9 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c301(s5, s9);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsenew_type_id() {
                var s0, s1, s2, s3, s4;

                var key    = peg$currPos * 120 + 74,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsetype_specifiers();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsenew_declarator();
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c302(s1, s4);
                            s2 = s3;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c303(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsenew_declarator() {
                var s0, s1;

                var key    = peg$currPos * 120 + 75,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parse_new_declarator();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c304(s1);
                }
                s0 = s1;

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parse_new_declarator() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 76,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 42) {
                    s1 = peg$c154;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c155); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsecv_qualifier();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_new_declarator();
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c156(s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 38) {
                        s1 = peg$c157;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c158); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsecv_qualifier();
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parse_new_declarator();
                                    if (s5 === peg$FAILED) {
                                        s5 = null;
                                    }
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c159(s3, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsenew_declarator_postfixes();
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c305(s1);
                        }
                        s0 = s1;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsenew_declarator_postfixes() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 77,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = [];
                s1 = peg$currPos;
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsenew_declarator_postfix();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s1;
                        s2 = peg$c306(s3);
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    while (s1 !== peg$FAILED) {
                        s0.push(s1);
                        s1 = peg$currPos;
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsenew_declarator_postfix();
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s1;
                                s2 = peg$c306(s3);
                                s1 = s2;
                            } else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    }
                } else {
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsenew_declarator_postfix() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 78,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c163;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c164); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp_assn();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 93) {
                                    s5 = peg$c165;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c166); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c167(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsenew_initializer() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 79,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c36;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp_list();
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c38;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c307(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_delete() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 80,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c308) {
                    s1 = peg$c308;
                    peg$currPos += 6;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c309); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseWS();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp_cast();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c310(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 6) === peg$c308) {
                        s1 = peg$c308;
                        peg$currPos += 6;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c309); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 91) {
                                s3 = peg$c163;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c164); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s5 = peg$c165;
                                        peg$currPos++;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c166); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parseWS();
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parseexp_cast();
                                            if (s7 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c311(s7);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseexp_postfix();
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_postfix() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

                var key    = peg$currPos * 120 + 81,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 11) === peg$c312) {
                    s1 = peg$c312;
                    peg$currPos += 11;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c313); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 60) {
                            s3 = peg$c254;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c255); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsesimple_type_name();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 62) {
                                            s7 = peg$c256;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c257); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsews();
                                            if (s8 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 40) {
                                                    s9 = peg$c36;
                                                    peg$currPos++;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parsews();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parseexp_cast();
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parsews();
                                                            if (s12 !== peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                                    s13 = peg$c38;
                                                                    peg$currPos++;
                                                                } else {
                                                                    s13 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                                                }
                                                                if (s13 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c314(s5, s11);
                                                                    s0 = s1;
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 12) === peg$c315) {
                        s1 = peg$c315;
                        peg$currPos += 12;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c316); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 60) {
                                s3 = peg$c254;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c255); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsesimple_type_name();
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parsews();
                                        if (s6 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 62) {
                                                s7 = peg$c256;
                                                peg$currPos++;
                                            } else {
                                                s7 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c257); }
                                            }
                                            if (s7 !== peg$FAILED) {
                                                s8 = peg$parsews();
                                                if (s8 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 40) {
                                                        s9 = peg$c36;
                                                        peg$currPos++;
                                                    } else {
                                                        s9 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                                    }
                                                    if (s9 !== peg$FAILED) {
                                                        s10 = peg$parsews();
                                                        if (s10 !== peg$FAILED) {
                                                            s11 = peg$parseexp_cast();
                                                            if (s11 !== peg$FAILED) {
                                                                s12 = peg$parsews();
                                                                if (s12 !== peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                                        s13 = peg$c38;
                                                                        peg$currPos++;
                                                                    } else {
                                                                        s13 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                                                    }
                                                                    if (s13 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$c317(s5, s11);
                                                                        s0 = s1;
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 16) === peg$c318) {
                            s1 = peg$c318;
                            peg$currPos += 16;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c319); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 60) {
                                    s3 = peg$c254;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c255); }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parsews();
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parsesimple_type_name();
                                        if (s5 !== peg$FAILED) {
                                            s6 = peg$parsews();
                                            if (s6 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 62) {
                                                    s7 = peg$c256;
                                                    peg$currPos++;
                                                } else {
                                                    s7 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c257); }
                                                }
                                                if (s7 !== peg$FAILED) {
                                                    s8 = peg$parsews();
                                                    if (s8 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 40) {
                                                            s9 = peg$c36;
                                                            peg$currPos++;
                                                        } else {
                                                            s9 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                                        }
                                                        if (s9 !== peg$FAILED) {
                                                            s10 = peg$parsews();
                                                            if (s10 !== peg$FAILED) {
                                                                s11 = peg$parseexp_cast();
                                                                if (s11 !== peg$FAILED) {
                                                                    s12 = peg$parsews();
                                                                    if (s12 !== peg$FAILED) {
                                                                        if (input.charCodeAt(peg$currPos) === 41) {
                                                                            s13 = peg$c38;
                                                                            peg$currPos++;
                                                                        } else {
                                                                            s13 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                                                        }
                                                                        if (s13 !== peg$FAILED) {
                                                                            peg$savedPos = s0;
                                                                            s1 = peg$c320(s5, s11);
                                                                            s0 = s1;
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 10) === peg$c321) {
                                s1 = peg$c321;
                                peg$currPos += 10;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c322); }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parsews();
                                if (s2 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 60) {
                                        s3 = peg$c254;
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c255); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                        s4 = peg$parsews();
                                        if (s4 !== peg$FAILED) {
                                            s5 = peg$parsesimple_type_name();
                                            if (s5 !== peg$FAILED) {
                                                s6 = peg$parsews();
                                                if (s6 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 62) {
                                                        s7 = peg$c256;
                                                        peg$currPos++;
                                                    } else {
                                                        s7 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c257); }
                                                    }
                                                    if (s7 !== peg$FAILED) {
                                                        s8 = peg$parsews();
                                                        if (s8 !== peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 40) {
                                                                s9 = peg$c36;
                                                                peg$currPos++;
                                                            } else {
                                                                s9 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c37); }
                                                            }
                                                            if (s9 !== peg$FAILED) {
                                                                s10 = peg$parsews();
                                                                if (s10 !== peg$FAILED) {
                                                                    s11 = peg$parseexp_cast();
                                                                    if (s11 !== peg$FAILED) {
                                                                        s12 = peg$parsews();
                                                                        if (s12 !== peg$FAILED) {
                                                                            if (input.charCodeAt(peg$currPos) === 41) {
                                                                                s13 = peg$c38;
                                                                                peg$currPos++;
                                                                            } else {
                                                                                s13 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                                                            }
                                                                            if (s13 !== peg$FAILED) {
                                                                                peg$savedPos = s0;
                                                                                s1 = peg$c323(s5, s11);
                                                                                s0 = s1;
                                                                            } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                            }
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseexp_construct();
                                if (s1 === peg$FAILED) {
                                    s1 = peg$parseexp_primary();
                                }
                                if (s1 !== peg$FAILED) {
                                    s2 = [];
                                    s3 = peg$currPos;
                                    s4 = peg$parsews();
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parseop_postfix();
                                        if (s5 !== peg$FAILED) {
                                            peg$savedPos = s3;
                                            s4 = peg$c324(s1, s5);
                                            s3 = s4;
                                        } else {
                                            peg$currPos = s3;
                                            s3 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                    while (s3 !== peg$FAILED) {
                                        s2.push(s3);
                                        s3 = peg$currPos;
                                        s4 = peg$parsews();
                                        if (s4 !== peg$FAILED) {
                                            s5 = peg$parseop_postfix();
                                            if (s5 !== peg$FAILED) {
                                                peg$savedPos = s3;
                                                s4 = peg$c324(s1, s5);
                                                s3 = s4;
                                            } else {
                                                peg$currPos = s3;
                                                s3 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s3;
                                            s3 = peg$FAILED;
                                        }
                                    }
                                    if (s2 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c325(s1, s2);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseop_postfix() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 82,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c163;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c164); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexpression();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 93) {
                                    s5 = peg$c165;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c166); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c326(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s1 = peg$c36;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseexp_list();
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s5 = peg$c38;
                                        peg$currPos++;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c327(s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 46) {
                            s1 = peg$c328;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c329); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parsename();
                                if (s3 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c330(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c331) {
                                s1 = peg$c331;
                                peg$currPos += 2;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c332); }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parsews();
                                if (s2 !== peg$FAILED) {
                                    s3 = peg$parsename();
                                    if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c333(s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 2) === peg$c275) {
                                    s1 = peg$c275;
                                    peg$currPos += 2;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c276); }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c334();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 2) === peg$c278) {
                                        s1 = peg$c278;
                                        peg$currPos += 2;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c279); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c335();
                                    }
                                    s0 = s1;
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_construct() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 83,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsesimple_type_name();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c36;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c37); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseexp_list();
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c38;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c336(s1, s5);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_list() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 84,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseexp_assn();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c65;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c66); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_assn();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c337(s1, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c65;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c66); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_assn();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c337(s1, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c177(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_primary() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 85,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c36;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c37); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexpression();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c38;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c39); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c338(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseliteral();
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 4) === peg$c339) {
                            s1 = peg$c339;
                            peg$currPos += 4;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c340); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$currPos;
                            peg$silentFails++;
                            s3 = peg$parseidentifierChar();
                            peg$silentFails--;
                            if (s3 === peg$FAILED) {
                                s2 = void 0;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                            if (s2 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c341();
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseexp_id();
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseexp_id() {
                var s0, s1;

                var key    = peg$currPos * 120 + 86,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsequalified_id();
                if (s1 === peg$FAILED) {
                    s1 = peg$parsename();
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c342(s1);
                }
                s0 = s1;

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsequalified_id() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 87,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsenested_name_specifier();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsename();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c343(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsenested_name_specifier() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 88,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = [];
                s1 = peg$currPos;
                s2 = peg$parsetype_name_id();
                if (s2 === peg$FAILED) {
                    s2 = peg$parseidentifier();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c344) {
                            s4 = peg$c344;
                            peg$currPos += 2;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c345); }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsews();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s1;
                                s2 = peg$c346(s2);
                                s1 = s2;
                            } else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    while (s1 !== peg$FAILED) {
                        s0.push(s1);
                        s1 = peg$currPos;
                        s2 = peg$parsetype_name_id();
                        if (s2 === peg$FAILED) {
                            s2 = peg$parseidentifier();
                        }
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsews();
                            if (s3 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c344) {
                                    s4 = peg$c344;
                                    peg$currPos += 2;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c345); }
                                }
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsews();
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s1;
                                        s2 = peg$c346(s2);
                                        s1 = s2;
                                    } else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s1;
                                    s1 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    }
                } else {
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c344) {
                        s1 = peg$c344;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c345); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c347();
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsetype_name_id() {
                var s0, s1;

                var key    = peg$currPos * 120 + 89,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsesimple_type_name();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c348(s1);
                }
                s0 = s1;

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsename() {
                var s0;

                var key    = peg$currPos * 120 + 90,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$parseoperator_function_id();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseidentifier();
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseoperator_function_id() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 91,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c349) {
                    s1 = peg$c349;
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c350); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseoverloadable_op();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c351(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseoverloadable_op() {
                var s0;

                var key    = peg$currPos * 120 + 92,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 5) === peg$c352) {
                    s0 = peg$c352;
                    peg$currPos += 5;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c353); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c354) {
                        s0 = peg$c354;
                        peg$currPos += 8;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c355); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c298) {
                            s0 = peg$c298;
                            peg$currPos += 3;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c299); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c308) {
                                s0 = peg$c308;
                                peg$currPos += 6;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c309); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c272) {
                                    s0 = peg$c272;
                                    peg$currPos += 3;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c273); }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c195) {
                                        s0 = peg$c195;
                                        peg$currPos += 3;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c196); }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c197) {
                                            s0 = peg$c197;
                                            peg$currPos += 3;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c198); }
                                        }
                                        if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c191) {
                                                s0 = peg$c191;
                                                peg$currPos += 2;
                                            } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c192); }
                                            }
                                            if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c193) {
                                                    s0 = peg$c193;
                                                    peg$currPos += 2;
                                                } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c194); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 2) === peg$c185) {
                                                        s0 = peg$c185;
                                                        peg$currPos += 2;
                                                    } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c186); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c187) {
                                                            s0 = peg$c187;
                                                            peg$currPos += 2;
                                                        } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c188); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 2) === peg$c189) {
                                                                s0 = peg$c189;
                                                                peg$currPos += 2;
                                                            } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c190); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 2) === peg$c204) {
                                                                    s0 = peg$c204;
                                                                    peg$currPos += 2;
                                                                } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c205); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 2) === peg$c199) {
                                                                        s0 = peg$c199;
                                                                        peg$currPos += 2;
                                                                    } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c200); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 2) === peg$c209) {
                                                                            s0 = peg$c209;
                                                                            peg$currPos += 2;
                                                                        } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c210); }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 2) === peg$c258) {
                                                                                s0 = peg$c258;
                                                                                peg$currPos += 2;
                                                                            } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c259); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 2) === peg$c260) {
                                                                                    s0 = peg$c260;
                                                                                    peg$currPos += 2;
                                                                                } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c261); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 2) === peg$c243) {
                                                                                        s0 = peg$c243;
                                                                                        peg$currPos += 2;
                                                                                    } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c244); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 2) === peg$c245) {
                                                                                            s0 = peg$c245;
                                                                                            peg$currPos += 2;
                                                                                        } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c246); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 2) === peg$c250) {
                                                                                                s0 = peg$c250;
                                                                                                peg$currPos += 2;
                                                                                            } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c251); }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 2) === peg$c252) {
                                                                                                    s0 = peg$c252;
                                                                                                    peg$currPos += 2;
                                                                                                } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c253); }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 2) === peg$c224) {
                                                                                                        s0 = peg$c224;
                                                                                                        peg$currPos += 2;
                                                                                                    } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c225); }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 2) === peg$c218) {
                                                                                                            s0 = peg$c218;
                                                                                                            peg$currPos += 2;
                                                                                                        } else {
                                                                                                            s0 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c219); }
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 2) === peg$c275) {
                                                                                                                s0 = peg$c275;
                                                                                                                peg$currPos += 2;
                                                                                                            } else {
                                                                                                                s0 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c276); }
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 2) === peg$c278) {
                                                                                                                    s0 = peg$c278;
                                                                                                                    peg$currPos += 2;
                                                                                                                } else {
                                                                                                                    s0 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c279); }
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 2) === peg$c331) {
                                                                                                                        s0 = peg$c331;
                                                                                                                        peg$currPos += 2;
                                                                                                                    } else {
                                                                                                                        s0 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c332); }
                                                                                                                    }
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                        if (input.substr(peg$currPos, 2) === peg$c356) {
                                                                                                                            s0 = peg$c356;
                                                                                                                            peg$currPos += 2;
                                                                                                                        } else {
                                                                                                                            s0 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c357); }
                                                                                                                        }
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                            if (input.substr(peg$currPos, 2) === peg$c358) {
                                                                                                                                s0 = peg$c358;
                                                                                                                                peg$currPos += 2;
                                                                                                                            } else {
                                                                                                                                s0 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c359); }
                                                                                                                            }
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                if (input.charCodeAt(peg$currPos) === 43) {
                                                                                                                                    s0 = peg$c262;
                                                                                                                                    peg$currPos++;
                                                                                                                                } else {
                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c263); }
                                                                                                                                }
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                    if (input.charCodeAt(peg$currPos) === 45) {
                                                                                                                                        s0 = peg$c264;
                                                                                                                                        peg$currPos++;
                                                                                                                                    } else {
                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c265); }
                                                                                                                                    }
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                        if (input.charCodeAt(peg$currPos) === 42) {
                                                                                                                                            s0 = peg$c154;
                                                                                                                                            peg$currPos++;
                                                                                                                                        } else {
                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c155); }
                                                                                                                                        }
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                            if (input.charCodeAt(peg$currPos) === 47) {
                                                                                                                                                s0 = peg$c266;
                                                                                                                                                peg$currPos++;
                                                                                                                                            } else {
                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c267); }
                                                                                                                                            }
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                if (input.charCodeAt(peg$currPos) === 37) {
                                                                                                                                                    s0 = peg$c268;
                                                                                                                                                    peg$currPos++;
                                                                                                                                                } else {
                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c269); }
                                                                                                                                                }
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 94) {
                                                                                                                                                        s0 = peg$c235;
                                                                                                                                                        peg$currPos++;
                                                                                                                                                    } else {
                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c236); }
                                                                                                                                                    }
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 38) {
                                                                                                                                                            s0 = peg$c157;
                                                                                                                                                            peg$currPos++;
                                                                                                                                                        } else {
                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c158); }
                                                                                                                                                        }
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 124) {
                                                                                                                                                                s0 = peg$c230;
                                                                                                                                                                peg$currPos++;
                                                                                                                                                            } else {
                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c231); }
                                                                                                                                                            }
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 126) {
                                                                                                                                                                    s0 = peg$c73;
                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                } else {
                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                                                                                                                                                }
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 33) {
                                                                                                                                                                        s0 = peg$c290;
                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                    } else {
                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c291); }
                                                                                                                                                                    }
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 61) {
                                                                                                                                                                            s0 = peg$c139;
                                                                                                                                                                            peg$currPos++;
                                                                                                                                                                        } else {
                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c140); }
                                                                                                                                                                        }
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 60) {
                                                                                                                                                                                s0 = peg$c254;
                                                                                                                                                                                peg$currPos++;
                                                                                                                                                                            } else {
                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c255); }
                                                                                                                                                                            }
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 62) {
                                                                                                                                                                                    s0 = peg$c256;
                                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                                } else {
                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c257); }
                                                                                                                                                                                }
                                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 44) {
                                                                                                                                                                                        s0 = peg$c65;
                                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                                    } else {
                                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseunoverloadable_op() {
                var s0;

                var key    = peg$currPos * 120 + 93,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.charCodeAt(peg$currPos) === 46) {
                    s0 = peg$c328;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c329); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c270) {
                        s0 = peg$c270;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c271); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c344) {
                            s0 = peg$c344;
                            peg$currPos += 2;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c345); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c360) {
                                s0 = peg$c360;
                                peg$currPos += 2;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c361); }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseliteral() {
                var s0, s1;

                var key    = peg$currPos * 120 + 94,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseliteral_float();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c362(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseliteral_int();
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c363(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseliteral_char();
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c364(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseliteral_string();
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c365(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseliteral_boolean();
                                if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c366(s1);
                                }
                                s0 = s1;
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseliteral_int() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 95,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                    s1 = peg$c264;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c265); }
                }
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c367.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c368); }
                    }
                    if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            if (peg$c367.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c368); }
                            }
                        }
                    } else {
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c369(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseliteral_float() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 96,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                    s1 = peg$c264;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c265); }
                }
                if (s1 === peg$FAILED) {
                    s1 = null;
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c370.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c371); }
                    }
                    if (s3 !== peg$FAILED) {
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            if (peg$c370.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c371); }
                            }
                        }
                    } else {
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s3 = peg$c372(s1, s2);
                        if (s3) {
                            s3 = void 0;
                        } else {
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c373(s1, s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseliteral_char() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 97,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                    s1 = peg$c374;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c375); }
                }
                if (s1 !== peg$FAILED) {
                    if (peg$c376.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c377); }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = peg$parseescape();
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                            s3 = peg$c374;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c375); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c378(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseliteral_string() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 98,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                    s1 = peg$c379;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c380); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c381.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c382); }
                    }
                    if (s3 === peg$FAILED) {
                        s3 = peg$parseescape();
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c381.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c382); }
                        }
                        if (s3 === peg$FAILED) {
                            s3 = peg$parseescape();
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                            s3 = peg$c379;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c380); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c383(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseliteral_boolean() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 99,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c384) {
                    s1 = peg$c384;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c385); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parseidentifierChar();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                        s2 = void 0;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c386();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 5) === peg$c387) {
                        s1 = peg$c387;
                        peg$currPos += 5;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c388); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        peg$silentFails++;
                        s3 = peg$parseidentifierChar();
                        peg$silentFails--;
                        if (s3 === peg$FAILED) {
                            s2 = void 0;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c389();
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseescape() {
                var s0;

                var key    = peg$currPos * 120 + 100,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$parsesimple_escape();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseoctal_escape();
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsesimple_escape() {
                var s0;

                var key    = peg$currPos * 120 + 101,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 2) === peg$c390) {
                    s0 = peg$c390;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c391); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c392) {
                        s0 = peg$c392;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c393); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c394) {
                            s0 = peg$c394;
                            peg$currPos += 2;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c395); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c396) {
                                s0 = peg$c396;
                                peg$currPos += 2;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c397); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c398) {
                                    s0 = peg$c398;
                                    peg$currPos += 2;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c399); }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c400) {
                                        s0 = peg$c400;
                                        peg$currPos += 2;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c401); }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c402) {
                                            s0 = peg$c402;
                                            peg$currPos += 2;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c403); }
                                        }
                                        if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c404) {
                                                s0 = peg$c404;
                                                peg$currPos += 2;
                                            } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c405); }
                                            }
                                            if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c406) {
                                                    s0 = peg$c406;
                                                    peg$currPos += 2;
                                                } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c407); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 2) === peg$c408) {
                                                        s0 = peg$c408;
                                                        peg$currPos += 2;
                                                    } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c409); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c410) {
                                                            s0 = peg$c410;
                                                            peg$currPos += 2;
                                                        } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c411); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 2) === peg$c412) {
                                                                s0 = peg$c412;
                                                                peg$currPos += 2;
                                                            } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c413); }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseoctal_escape() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 102,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (peg$c414.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c415); }
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (peg$c414.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c415); }
                    }
                    if (s1 !== peg$FAILED) {
                        if (peg$c414.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c415); }
                        }
                        if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (peg$c414.test(input.charAt(peg$currPos))) {
                            s1 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c415); }
                        }
                        if (s1 !== peg$FAILED) {
                            if (peg$c414.test(input.charAt(peg$currPos))) {
                                s2 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c415); }
                            }
                            if (s2 !== peg$FAILED) {
                                if (peg$c414.test(input.charAt(peg$currPos))) {
                                    s3 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c415); }
                                }
                                if (s3 !== peg$FAILED) {
                                    s1 = [s1, s2, s3];
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseidentifier() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 103,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                peg$silentFails++;
                s0 = peg$currPos;
                s1 = peg$parseidentifierFirstChar();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseidentifierChar();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseidentifierChar();
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c417(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c416); }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseidentifierChar() {
                var s0;

                var key    = peg$currPos * 120 + 104,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (peg$c418.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c419); }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseidentifierFirstChar() {
                var s0;

                var key    = peg$currPos * 120 + 105,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (peg$c420.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c421); }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsews() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 106,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                peg$silentFails++;
                s0 = peg$currPos;
                s1 = [];
                if (peg$c423.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c424); }
                }
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c423.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c424); }
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsecomment();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = [];
                    if (peg$c423.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c424); }
                    }
                    while (s1 !== peg$FAILED) {
                        s0.push(s1);
                        if (peg$c423.test(input.charAt(peg$currPos))) {
                            s1 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c424); }
                        }
                    }
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c422); }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseWS() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 107,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                peg$silentFails++;
                s0 = peg$currPos;
                s1 = peg$parsecomment();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseWS();
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = [];
                    if (peg$c423.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c424); }
                    }
                    if (s2 !== peg$FAILED) {
                        while (s2 !== peg$FAILED) {
                            s1.push(s2);
                            if (peg$c423.test(input.charAt(peg$currPos))) {
                                s2 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c424); }
                            }
                        }
                    } else {
                        s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsecomment();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsews();
                            if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = [];
                        if (peg$c423.test(input.charAt(peg$currPos))) {
                            s1 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c424); }
                        }
                        if (s1 !== peg$FAILED) {
                            while (s1 !== peg$FAILED) {
                                s0.push(s1);
                                if (peg$c423.test(input.charAt(peg$currPos))) {
                                    s1 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c424); }
                                }
                            }
                        } else {
                            s0 = peg$FAILED;
                        }
                    }
                }
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c425); }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseclass_specifier() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                var key    = peg$currPos * 120 + 108,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseclass_head();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s2 = peg$c426(s1);
                    if (s2) {
                        s2 = peg$FAILED;
                    } else {
                        s2 = void 0;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 123) {
                                s4 = peg$c28;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c29); }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsews();
                                if (s5 !== peg$FAILED) {
                                    s6 = [];
                                    s7 = peg$parsemember_specification();
                                    while (s7 !== peg$FAILED) {
                                        s6.push(s7);
                                        s7 = peg$parsemember_specification();
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsews();
                                        if (s7 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 125) {
                                                s8 = peg$c31;
                                                peg$currPos++;
                                            } else {
                                                s8 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                            }
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c427(s1, s6);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseclass_head() {
                var s0, s1, s2, s3, s4, s5, s6;

                var key    = peg$currPos * 120 + 109,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parseclass_key();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseWS();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseidentifier();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = peg$parseWS();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsebase_clause();
                                if (s6 !== peg$FAILED) {
                                    peg$savedPos = s4;
                                    s5 = peg$c428(s1, s3, s6);
                                    s4 = s5;
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                            if (s4 === peg$FAILED) {
                                s4 = null;
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c429(s1, s3, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseclass_key() {
                var s0;

                var key    = peg$currPos * 120 + 110,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 5) === peg$c430) {
                    s0 = peg$c430;
                    peg$currPos += 5;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c431); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c432) {
                        s0 = peg$c432;
                        peg$currPos += 6;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c433); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c434) {
                            s0 = peg$c434;
                            peg$currPos += 5;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c435); }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsemember_specification() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                var key    = peg$currPos * 120 + 111,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$currPos;
                s3 = peg$parsemember_declaration();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c436(s3);
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$currPos;
                        s3 = peg$parsemember_declaration();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s2;
                                s3 = peg$c436(s3);
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c437(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseaccess_specifier();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 58) {
                                s3 = peg$c16;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c17); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = [];
                                    s6 = peg$currPos;
                                    s7 = peg$parsemember_declaration();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsews();
                                        if (s8 !== peg$FAILED) {
                                            peg$savedPos = s6;
                                            s7 = peg$c438(s1, s7);
                                            s6 = s7;
                                        } else {
                                            peg$currPos = s6;
                                            s6 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s6;
                                        s6 = peg$FAILED;
                                    }
                                    while (s6 !== peg$FAILED) {
                                        s5.push(s6);
                                        s6 = peg$currPos;
                                        s7 = peg$parsemember_declaration();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsews();
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s6;
                                                s7 = peg$c438(s1, s7);
                                                s6 = s7;
                                            } else {
                                                peg$currPos = s6;
                                                s6 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s6;
                                            s6 = peg$FAILED;
                                        }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c439(s1, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parseaccess_specifier() {
                var s0;

                var key    = peg$currPos * 120 + 112,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                if (input.substr(peg$currPos, 7) === peg$c440) {
                    s0 = peg$c440;
                    peg$currPos += 7;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c441); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c442) {
                        s0 = peg$c442;
                        peg$currPos += 9;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c443); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c444) {
                            s0 = peg$c444;
                            peg$currPos += 6;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c445); }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsemember_declaration() {
                var s0, s1, s2, s3, s4, s5, s6;

                var key    = peg$currPos * 120 + 113,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsedecl_specifiers();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parseidentifier();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                        s2 = void 0;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsemember_declarator_list();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsews();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 59) {
                                        s6 = peg$c25;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c446(s1, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseconstructor_definition();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                                s3 = peg$c25;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c26); }
                            }
                            if (s3 === peg$FAILED) {
                                s3 = null;
                            }
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c447(s1);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsedestructor_definition();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 59) {
                                    s3 = peg$c25;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                }
                                if (s3 === peg$FAILED) {
                                    s3 = null;
                                }
                                if (s3 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c448(s1);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsefunction_definition();
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parsews();
                                if (s2 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 59) {
                                        s3 = peg$c25;
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                    }
                                    if (s3 === peg$FAILED) {
                                        s3 = null;
                                    }
                                    if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c449(s1);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsemember_declarator_list() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 114,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsemember_declarator();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c65;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c66); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parsemember_declarator();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c67(s1, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c65;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c66); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsemember_declarator();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c67(s1, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c68(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsemember_declarator() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 115,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsedeclarator();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s3 = peg$c139;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c140); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 48) {
                                    s5 = peg$c450;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c451); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c452(s1);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsedeclarator();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 61) {
                                s3 = peg$c139;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c140); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 21) === peg$c143) {
                                        s5 = peg$c143;
                                        peg$currPos += 21;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c144); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c453(s1);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsedeclarator();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parsebrace_or_equal_initializer();
                                if (s3 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c454(s1, s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsedeclarator();
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsebase_clause() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 116,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 58) {
                    s1 = peg$c16;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsebase_specifier_list();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c455(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsebase_specifier_list() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                var key    = peg$currPos * 120 + 117,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsebase_specifier();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c65;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c66); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parsebase_specifier();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s3;
                                    s4 = peg$c456(s1, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c65;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c66); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsebase_specifier();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s3;
                                        s4 = peg$c456(s1, s7);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c68(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsebase_specifier() {
                var s0, s1, s2, s3, s4, s5;

                var key    = peg$currPos * 120 + 118,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7) === peg$c77) {
                    s1 = peg$c77;
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseWS();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        s4 = peg$parseaccess_specifier();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseWS();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s3;
                                s4 = peg$c457(s4);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsequalified_class_name();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c458(s3, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$currPos;
                    s2 = peg$parseaccess_specifier();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseWS();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s1;
                            s2 = peg$c457(s2);
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c77) {
                            s2 = peg$c77;
                            peg$currPos += 7;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c78); }
                        }
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseWS();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsequalified_class_name();
                                if (s4 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c458(s1, s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseaccess_specifier();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parseWS();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parsequalified_class_name();
                                if (s3 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c459(s1, s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsequalified_class_name();
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c460(s1);
                            }
                            s0 = s1;
                        }
                    }
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }

            function peg$parsequalified_class_name() {
                var s0, s1, s2, s3;

                var key    = peg$currPos * 120 + 119,
                    cached = peg$resultsCache[key];

                if (cached) {
                    peg$currPos = cached.nextPos;

                    return cached.result;
                }

                s0 = peg$currPos;
                s1 = peg$parsenested_name_specifier();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseidentifier();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c461(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseidentifier();
                }

                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

                return s0;
            }


            function composeBinaryOp(first, rest, assoc, exprType){
                assoc = assoc || "left";
                exprType = exprType || "binary_expression";
                if(!rest || rest.length === 0){
                    return first;
                }
                if (assoc === "left"){
                    var right = rest.pop();
                    return {
                        construct_type: exprType,
                        operator: right[0],
                        left: composeBinaryOp(first, rest, assoc, exprType),
                        right: right[1],
                        associativity: assoc
                    }
                }
                else{
                    var left = rest.shift();
                    return {
                        construct_type: exprType,
                        operator: left[0],
                        left: first,
                        right: composeBinaryOp(left[1], rest, assoc, exprType),
                        associativity: assoc
                    }
                }
            }

            function absorb(eater, eaten){
                if (!eaten){ return eater; }
                for (var attr in eaten){
                    if(attr != "start" && attr != "end"){
                        eater[attr] = eaten[attr];
                    }
                }
                return eater;
            }

            function track(obj, location, text){
                obj.code = {
                    location : location,
                    start : location.start.offset,
                    text : text,
                    line : location.start.line,
                    column : location.start.column,
                    end : location.start.offset + text.length
                };
                return obj;
            }

            function makeArray(obj){
                if (Array.isArray(obj)){
                    return obj;
                }
                else{
                    return [obj];
                }
            }

            function addImplicitJump(control){
                control.body.push({jump:"implicit"});
                return control;
            }

            function insideOut(obj, sub, result_in){
                sub = sub || "sub";
                var result = result_in || {};
                if (obj[sub]){
                    var temp = insideOut(obj[sub], sub, result);
                    delete obj[sub];
                    temp[sub] = obj;
                    return (result_in ? temp.sub : result.sub);
                }
                else{
                    // No sub property means last piece
                    result.sub = obj
                    return obj;
                }
            }

            function postfixExp(ops, sub){
                if(ops.length == 0){
                    return sub;
                }
                else{
                    var op = ops.pop();
                    op.operand = postfixExp(ops, sub);
                    return op;
                }
            }

            var vars = {abstract: false};

            function arrayContains(arr, elem){
                return arr.indexOf(elem) != -1;
            }

            var _userTypeNames = {list_t:true, tree_t:true};

            function getUserTypeNames(){
                if (typeof Types !== "undefined"){
                    return Types.userTypeNames;
                }
                else{
                    return _userTypeNames;
                }
            }

            function isUserTypeName(name){
                return getUserTypeNames()[name];
            }



            peg$result = peg$startRuleFunction();

            if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                return peg$result;
            } else {
                if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail(peg$endExpectation());
                }

                throw peg$buildStructuredError(
                    peg$maxFailExpected,
                    peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                    peg$maxFailPos < input.length
                        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
                );
            }
        }

        return {
            SyntaxError: peg$SyntaxError,
            parse:       peg$parse
        };
    })()