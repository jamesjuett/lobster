[
    "numApps = rhs.numApps;\ndelete[] apps;\nfor(int i=0; i<numApps, i++){\n    apps[i] = new Application;\n    *apps[i] = *rhs.apps[i];\n}\n}",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps;\n\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "numApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++){\n   apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n     return *this;\n}\nnew apps[MAX_APPS];\nnumApps = rhs.numapps;\nfor (int i =0; i < 200; i++){\n    apps[i] = rhs.apps[i]\n}\nreturn *this;}",
    "if (this == &rhs){\nreturn *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++){\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {return *this;}\ndelete[] apps;\napps = new Application[rhs.MAX_APPS];\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "    delete[] apps;\n    numApps = rhs.numApps;\n    Application *new_apps = new Application[MAX_APPS];\n    for(int i=0;i<numApps;i++){\n        new_apps[i] = rhs.apps[i];\n    }\n    apps = new_apps;}",
    "if(this == &rhs)\n{\n    return *this;\n}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int x = 0; x < numApps; x++)\n{\n    apps[x] = rhs.apps[x];\n}\n\n\nreturn *this;}",
    "if (this == &other) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}",
    "for(int i = 0; i < rhs.numApps; ++i){\n    Application *app = new Application;\n    app = rhs.apps[i];\n    apps[i] = app;\n}\nnumApps = rhs.numApps;\nreturn *this;}",
    "if (this == &rhs) return *this\ndelete [] apps; \nnumApps = rhs.numApps; \napps = new int[MAX_APPS]; \nfor (int i = 0; i < numApps; ++i)\n    apps[i] = rhs.apps[i]; \n}",
    "Smartphone copy;\ncopy.numApps = rhs.numApps;\nfor (size_t i = 0; i < rhs.numApps; ++i)\n    copy.apps[i] = rhs.apps[i];\nreturn copy;}",
    "if (this == &rhs) \n    return *this;\nfor (int i = 0; i < MAX_APPS; ++i)\n    delete app[i];\nnumApps = rhs.numApps;\nfor (int a = 0; a < numApps; ++a) {\n    Application temp;\n    temp->memoryUsed = rhs.apps[a]->memoryUsed;\n    temp->name = rhs.apps[a]->name;\n    apps[a] = temp;\n}\nreturn *this;}",
    "if (this == rhs) {\nreturn *this;\n}\ndelete [] apps;\nnumApps = rhs.numApps;\nMAX_APPS = rhs.MAX_APPS;\napps = new apps[MAX_APPS];\n\nfor (int i = 0; i < rhs.numApps; i++) {\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this->apps == rhs.apps && this->numApps == rhs.numApps) { return *this;}\nfor (int i = 0; i <numApps; ++i) {delete apps[i];}\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; ++i) {apps[i] = rhs.apps[i];}\n\nreturn *this;\n}",
    "if(this == &rhs){\n    return *this;\n}\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\nfor (int i = 0; i < numApps; i++) {\n    delete apps[i];\n    if (i < rhs.numApps) {\n        apps[i] = new Application{rhs.apps[i]->memoryUsed, rhs.apps[i]->name};\n    }\n}\nnumApps = rhs.numApps;\nreturn *this;}",
    "if (this == *rhs) {\n    return *this;\n}\n\ndelete[] apps;\n\nnumApps = rhs.numApps;\napps = new Application *apps[MAX_APPS];\n\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\nfor (int i = 0; i < numApps; ++i) {\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this==&rhs){return *this;}\nnumApps=rhs.numApps;\ndelete[]  apps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < count; i++)\n{\n    apps[i]=other.apps[i];\n}\n\nreturn *this;}",
    "if (this == &rhs) {                       \n        return *this;\n        }\n      delete [] apps;\n      *apps = new Application[rhs.MAX_APPS];\n       for (int i = 0; i < rhs.numApps; i++) {  // copy over the elements\n            apps[i] = new Application();\n            apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n            apps[i]->name = rhs.apps[i]->name;\n        }\n        return *this;}",
    "if (this == &rhs) {                       // self-assignment check\n    return *this;\n  }\n\n  delete[] apps;                        // delete old array\n\n  apps = new Application[rhs.capacity];           // make new array of the required size\n  capacity = rhs.capacity;                  // shallow copy non-resources\n  numApps = rhs.numApps;\n\n  for (int i = 0; i < numApps; ++i) {  // copy over the elements\n    apps[i] = rhs.apps[i];\n  }\n\n  return *this;                             // return LHS object}",
    "if(this == &rhs)\n{\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; i++)\n{\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "for (int i = 0; i < rhs.numApps; ++i)\n{\n    if (i < numApps)\n        delete apps[i];\n    apps[i] = new Application(rhs.apps[i]);\n}\n\nnumApps = rhs.numApps;\n\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\ndelete [] apps; \nnumApps = rhs.numApps;\napps = new Application[rhs.MAX_APPS];\n\nfor(int i =0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this; }",
    "if (this == &rhs) { return *this; }\n        numApps=rhs.numApps;\n        delete []apps;\n   apps = new apps[MAX_APPS];\n  for (int i = 0; i < rhs.numApps; i++)\n  apps[i] = rhs->apps[i];\n  return *this;\n}",
    "if(this==&rhs){return *this;}\ndelete[] apps;\nnumApps = rhs.numApps;\nfor(inti = 0; i<numApps;++i){\napps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this != &rhs) {\n    numApps = rhs.numApps;\n    for (int i = 0; i < rhs.numApps; i++){\n        apps[i] = new Applcation(rhs.apps[i]);\n    }\n}\n}",
    "if(this == &other) {\n    return *this;\n}\nfor(auto &i : apps) {\n    delete i;\n}\n\ndelete[] apps;\nnumApps = other.numApps;\napps = new *apps[MAX_APPS];\n\nfor(int i = 0; i < numApps; i++) {\n    apps[i] = new Application {other.apps[i].memoryUsed, other.app[i].name};\n}\n\n}",
    "if (this == &rhs) {\n    return *this;\n}\nnumApps = rhs.numApps;\ndelete[] apps;\nApplication* apps = new Application[numApps];\nfor (int i = 0; i < rhs.numApps; i++) {\n    apps[i] = *rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n    }\nelse{\n    this->numApps = rhs.numApps;\n    for(int i = 0; i < numApps; i++){\n        delete this->apps[i];\n        for(int i = 0; i < numApps; i++){\n            apps[i] = new Application;\n            this->apps[i] = rhs.apps\n        }\n    }\nreturn *this;}",
    "if(this == &rhs) {\n    return *this;\n}\ndelete [] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete[] apps;\napps= new Application[MAX_APPS];\nnumApps= rhs.numApps;\n\nfor (int i = 0; i < numApps; ++i) { \n    apps[i] = rhs.apps[i];\n  }\n\n  return *this;}",
    "  if(this == &rhs) return *this;\n\n  for(int i = 0; i < numApps; i++) {\n     delete apps[i];\n  }\n\n  numApps = rhs.numApps;\n  \n  for(int i = 0; i < numApps; i++) {\n     apps[i] = new Application();\n     apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n     apps[i]->name = rhs.apps[i]->name;\n  }\n\n  return *this;}",
    "if (this == &rhs) { \nreturn *this; \n}\nfor (int i = 0; i < numApps; ++i) {\n   delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = new Application;\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name = rhs.apps[i]->name;\n}\nreturn *this;\n\n}",
    "if (*this == rhs){\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps\napps = new apps[MAX_APPS];\nfor (int i = 0; i < rhs.numApps; i++){\n    apps[i] = rhs.apps[i];\n}",
    "if (this == &rhs) {\n    return *this;\n}\n\ndelete[] apps;\n\nnumApps = rhs.numApps;\napps = new int[NAX_APPS];\n\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = others.apps[i];\n}\n\nreturn *this;\n}",
    "if (this == &rhs) {return *this;}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "numApps = rhs.numApps;\n    for(auto &i : rhs.apps){\n        Application *app = new Application();\n        app = i;\n    }",
    "if(this == &rhs){\n  return *this\n }\n delete [] apps\n numApps = rhs.numApps;\n apps = new Application[MAX-APPS];\n for(int i = 0; i < numApps;++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return this*;\n}\n\ndelete[] apps;\n\nnumApps = rhs.numApps;\nif (rhs.apps) {\n    apps = new Application(*rhs.apps);\n    for (int i = 0; i<MAX_APPS; i++}\n        apps[i] = rhs.apps[i];\n    }\n}\nelse {\napps = nullptr;\n}\n\nreturn *this;\n\n}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\nMAX_APPS = rhs.MAX_APPS;\napps[] = new Application[rhs.Max_APPS];\nfor (int i = 0; i < num_apps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "delete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i]\n}\nreturn *this;}",
    "if (this == &rhs) {return *this;}\n\ndelete[] apps;\nnumApps = rhs.numApps;\n\nfor(int i : numApps){\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if(this == rhs){\n  return *this;\n}\n\nnumApps = rhs.numApps;\napps = rhs.apps;\nreturn *this;}",
    "// check if it is self \nif (this == &rhs) return *this;\n// delete \ndelete[] apps;\n// shallow copy \nthis->numApps = rhs.numApps;\n// deep copy \nApplication *apps = new Application[MAX_APPS];\nfor(int i = 0; i <MAX_APPS ;++i){\n    this->apps[i] = rhs.apps[i]; \n} \nreturn *this; }",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i = 0; i <numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this ==&rhs) { return *this; }\n\ndelete [] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this == &rhs) return *this;\nfor (int i = 0; i < numApps; i++) {\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n  return *this;\n}\nfor (int i = 0; i < numApps; i++) {\n  delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n  apps[i] = new Application(*rhs.apps[i]);\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\nnumApps = rhs.numApps;\ndelete[] apps;\napps = new Application [MAX_APPS];\nfor (int i=0; i<numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\n\ndelete apps;\n\nnumApps = rhs.numApps;\n\nif (rhs.apps) {\n    apps = new Application(*rhs.apps);\n}\nelse {\n    apps = nullptr;\n}\n\nreturn *this;}",
    "if(this == &rhs) {return *this;}\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new apps[MAX_APPS];\nfor(int i = 0 ; i < numApps; ++i)\n{\napps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if (this == &rhs)\n    return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this==&rhs) {\n    return *this; \n} \ndelete[] apps;\nnumApps = rhs.numApps; \napps = new Application[numApps]; \nfor(int i= 0; i < numApps; i++){ \n    numApps[i] = rhs.numApps[i]; \n} \nreturn *this; \n}",
    "if (this == &rhs) {return *this;}\nfor(int i; i < numApps; ++i){\n    delete data[i];\n}\nnumApps = rhs.numApps;\nfor(int i; i < numApps; ++i){\n    data[i] = new Application;\n    *(data[i]) = *(rhs.data[i]);\n}\nreturn *this;}",
    "if(this == &rhs) return *this;\n\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps; ++i) {\n  apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (*this == rhs) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == rhs){\n    return *this;\n}\nelse{\n    delete[] apps;\n    this.MAX_APPS = 200;\n    this.numApps = rhs.numApps;\n    apps = new Application[rhs.MAX_APPS];\n    for( int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n    }\n}\n    return *this;\n    \n    \n}",
    "if(this == &rhs) { \n    return *this; \n}\ndelete belt;\nnumApps = rhs.numApps;\nif (rhs.apps) {\napps = new Application(*rhs.apps);\n}\nelse {\napps = nullptr;\n}\nreturn *this;}",
    "if(this == &rhs)\n    return *this;\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i<numApps; i++)\n    apps[i] = rhs.apps[i];\nreturn *this;}",
    "if(this == &rhs){ \n    return *this;\n}\nfor(int i = 0; i < numApps; i++){\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor(int j = 0; j < numApps; j++){\n    apps[j] = new Application{rhs.apps[j]->memoryUsed, rhs.apps[j]->name};\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new int[numApps];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = other.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){return *this;}\n    delete[] apps;\n    numApps = rhs.numApps;\n    apps = new Application[numApps];\n    for(int i = 0; i < numApps;i++){\n        apps[i] = rhs.apps[i];\n    }\n    return *this;}",
    " if (this == &rhs) return *this;\n delete [ ] apps;\nnumApps = rhs.numApps;\n\n apps = new Application[ MAX_APPS ];\nfor ( int i = 0; i < MAX_APPS; i++ )\napps[ i ] = rhs.apps[ i ];\nreturn *this\n}",
    "    if (this == &rhs)\n        return *this;\n    for (int i = 0; i < numApps; i++){\n        delete apps[i];\n    }\n\n    Application * app2;\n    for (int j = 0; i < r.numApps; j++){\n        app2 = new Application;\n        app2->memoryUsed = rhs.apps[j]->memoryUsed;\n        app2->name = rhs.apps[j]->name;\n        apps[j] = app2;\n    }\n\n    numApps = rhs.numApps;\n\n    return *this;}",
    "if(this == &rhs) {\n    return *this;\n}\ndelete[] apps;\napps = new Application*[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int k = 0; k < rhs.numApps; k++) {\n    apps[k] = rhs[k];\n}\n\nreturn *this;}",
    "if (this == &rhs){\n  return *this;\n}\ndelete[] apps;\nmemoryUsed = rhs.memoryUsed;\nname = rhs.name;\nnumApps = rhs.numApps;\nfor (int i = 0; i < memoryUsed; i++)\n{\n  apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if(this == &rhs) {\n    return *this;\n}\n\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps; ++i){\n    delete apps[i];\n}\n\nfor(int i = 0; i < rhs.numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) return *this;\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Applications[MAX_APPS];\nfor (int i=0; i<numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if (this == &rhs){\n    return *this;\n}\nfor (int i = 0; i < numApps; i++){\n    delete apps[i];\n    apps[i] = nullptr;\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++){\n    apps[i] = new Application(*(rhs.apps[i]));\n}\nreturn *this;}",
    "if (this == &rhs) {\n  return *this;\n}\nthis->numApps = rhs.numApps;\nthis->apps = new Application[MAX_APPS];\nfor (int i = 0; i < MAX_APPS; ++i) {this->app[i] = rhs->app[i];}\nreturn *this;}",
    "if (this == &rhs){\nreturn *this;\n}\nfor (int i = 0;i < numApps;i++){\ndelete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0;i < numApps;i++){\napps[i] = new Application;\napps[i]->memoryUsed = (rhs.apps[i])->memoryUsed;\napps[i]->name = (rhs.apps[i])->name;\n}\nreturn *this;}",
    "    this->numApps = res->numApps\n    //creates a new dynamic application for each app rhs has\n    for(auto rhs_currentapp :rhs->apps){\n        Application *currentapp = new Application; \n            currentapp = *(rhs_current_app);\n        this->apps[i] = currentapp; \n    }\n    }",
    "if (this == rhs) { return this};\ndelete []apps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn this;}",
    "if(this == rhs){\n    return *this;\n}\nMAX_APPS = rhs.MAX_APPS;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < rhs.numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {return *this;}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs){\n    return *this;\n}\nfor (int i = 0; i < numApps; i++){\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++){\n    Application *a = new Application();\n    a->memoryUsed = rhs.apps[i]->memoryUsed;\n    a->name = rhs.apps[i]->name;\n    apps[i] = a;\n}\nreturn *this;}",
    "if(this == &rhs) {\n    return *this;\n}\ndelete apps;\nif (rhs.apps) {\n    apps = new Application(*rhs.apps);\n}\nelse {\n    apps = nullptr;\n}\nreturn *this;}",
    "if (this = &rhs) { return *this }\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = new Application{*(rhs.apps[i]).memoryUsed, *(rhs.apps[i].name};\n}\nreturn *this;}",
    "if ((this->numApps == rhs.apps) && (this->numApps == rhs.apps))\n{return *this;}\nfor (int i = 0; i < numApps; i++)\n{delete apps[i];}\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; ++i) {apps[i] = rhs.apps[i];}\n\nreturn *this;}",
    "numApps = rhs.numApps;\n\nfor(int i = 0; i < rhs.numApps; ++i){\n    apps[i] =rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) \n    return *this; \ndelete[] apps; \nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\napps[i] = rhs.apps[i];\n}\n\n\n}",
    "if(this == &rhs)\n    return *this;\n\nfor(int i=0; i<numApps ; ++i){\n    delete apps[i];\n}\n\nnumApps = rhs.numApps;\n\nfor(int i=0 ; i<numApps ; ++i){\n    apps[i] = new Application;\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name= rhs.apps[i]->name;\n}\n\nreturn *this;}",
    "if (this == &rhs) {return *this};\ndelete[] apps;\napps = new apps[numApps];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){return *this}\n\nfor(int i = 0; i < numApps; ++i){\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = new Application{rhs.apps[i]->memoryUsed, rhs.apps[i]->name};\n}\nreturn *this;}",
    "if(this==rhs){\n    return *this;\n}\n\ndelete apps;\napplications *apps=new Application[MAX_APPS];\nnumApps=rhs.numApps;\n\nfor(int i=0;i<rhs.numApps;i++)\n    apps[i]-rhs.apps[i];\n    return *this;\n}\n}",
    "if(this == &rhs) { return *this; }\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(&rhs == this)\n{\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; i++)\n{\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (&rhs == this) {return *this;}\nnumApps = rhs.numApps;\nfree(apps);\n*apps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this = &rhs) {\n    return *this;\n}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(*this=rhs){\n    return *this;\n}\n\ndelete apps;\n\nnumApps = rhs.numApps;\n\nfor(int i=0;i<rhs.numApps;i++){\napps[i]=rhs.apps[i];\n}",
    "if(this == &rhs) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[numApps];\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this == rhs) {\n    return *this;\ndelete[] apps;\napps = new apps[numApps];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[1];\n}\nreturn *this;}",
    "if (this == &rhs) return *this;\ndelete[] apps;\napps = new apps[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n\n}",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] *apps;\napps = new apps[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i = 0; i < rhs.numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if (this == &rhs) {\n    return *this;\n}\nnumApps = rhs.numApps;\nfor (int i=0; i<MAX_APPS; i++){\n    if (apps[i])\n        delete apps[i];\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) return this; // self-assignment\n\ndelete[] apps; // delete existing dynamic array of Applications\napps = new Application[rhs.numApps]; // allocate new array of Applications\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps; i++) // copy over items from rhs apps\n    apps[i] = rhs.apps[i];\n    \nreturn *this;}",
    "if (this == rhs){\n        return *this;\n    }\n    delete [ ] apps;\n    numApps = rhs.numApps;\n    *apps = new Application[ MAX_APPS];\n    for (int i = 0; i < numApps; i++){\n        apps[i] = rhs.apps[i];\n    }\n    return *this;}",
    "if ( this == &rhs ) {\nreturn *this;\n}\nnumApps = rhs.numApps;\napps = rhs.apps;\nreturn *this;\n}",
    "if (this == &rhs)\n    return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < rhs.numApps; ++i)\n\tapps[i] = rhs.apps[i];}",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new *apps[MAX_APPS];\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps; \nnumApps = rhs.numApps; \napps = new Application[MAX_APPS]; \nfor(int i = 0; i < numApps; ++i){\n    (*(apps + i)).memoryUsed = rhs.(*(apps + i)).memoryUsed; \n    (*(apps + i)).namw = rhs.(*(apps + i)).name; \n}",
    "if(this == &rhs) {\n    return *this;\n}\nfor(int i = 0; i < this->numApps; ++i) {\n    delete this->apps[i];\n}\nthis->numApps = rhs.numApps;\nfor(int i = 0; i < this->numApps; ++i) {\n    this->apps[i] = new Application{rhs.memoryUsed, rhs.name};\n}\nreturn *this;}",
    "MAX_APPS = rhs.MAX_APPS;\nnumApps = rhs.numApps;\nfor (int i=0; i<MAX_APPS; ++i){\n    apps[i]=rhs.apps[i];\n    }\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\nfor(int i = 0; i < numApps; i++){\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor(int j = 0; j < numApps; j++){\n    apps[j] = new Application(rhs.apps[j]);\n}\n\nreturn *this;\n}",
    "if(this == rhs) { return *this;}\n\ndelete[] apps;\napps.numApps = rhs.numApps;\napps.MAX_APPS = rhs.MAX_APPS;\napps = new Application[rhs.MAX_APPS];\n\nfor(int i = 0; i < numApps; ++i){\n   apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){return *this;}\n// delete old arr\ndelete[] apps;\napps = new Application* [rhs.MAX_APPS];\n// shallow copy\nMAX_APPS = rhs.MAX_APPS;\nnumApps = rhs.numApps;\n// deep copy\nfor(int i = 0; i < numApps; ++i){\n   apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) return *this;\nnumApps = rhs.numApps;\ndelete[] apps;\nApplication *copy_arr[numApps];\napps = copy_arr;\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = new Application;\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name = rhs.apps[i]->name;\n}\nreturn *this;}",
    "if (this == &rhs){\n    return *this; \n}\ndelete []apps; \nnumApps = rhs.numApps; \napps = new Application[MAX_APPS]; \nfor (int x = 0; x < numApps; ++x){\n    apps[x] = rhs.apps[x];\n}\nreturn *this; }",
    "if (this == &rhs) { return *this }\n     delete[] apps;\n     num_apps = rhs.elts_size;\n     apps = new int[MAX_APPS];\n     for (int i = 0; i < num_apps; i++) {\n          apps[i] = rhs.apps[i];\n     }\n     return *this\n}",
    "if (this == &rhs)\n    return *this;\nfor(int i=0; i < numApps; ++i){\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    Application *app = new Application;\n    app->memoryUsed = rhs.apps[i]->memoryUsed;\n    app->name = rhs.apps[i]->name;\n    apps[i] = app;\n}\nreturn *this;}",
    "if (this == &rhs) {\n      return *this;\n    }\n    for (int i = 0; i < rhs.numApps) {\n    this->apps[i] = rhs.apps[i];\n    }\n    this->numApps = rhs.numApps;\n    return *this;}",
    "if (this == &rhs) {\n    return *this;\n}\n\ndelete[] apps;\n\napps = new Application[rhs.MAX_APPS];\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this == &rhs) {return *this; }\ndelete[] apps;\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n        apps[i].memoryUsed = rhs.apps[i].memoryUsed;\n        apps[i].name = rhs.apps[i].name;\n}\nreturn *this;}",
    "if(this == &rhs) { return *this; }\n\n   for (int i = 0; i < MAX_APPS; i++)\n    {\n        delete apps[i];\n    }\n\n    Application *apps = new Application[MAX_APPS];\n\n    for (int i = 0; i < MAX_APPS; i++) {\n      apps[i] = *(rhs.apps[i]);\n    }\n\n  numApps = rhs.numApps;\n\n  return *this;}",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps; \nnumApps = rhs.numApps;\napps = new Smartphone[numApps];\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {return *this; }\n\nint i = 0;\n\nwhile(i < *apps.size())\n{\n    delete *(apps + i);\n    i++;\n}\ndelete apps[];\n\nnumApps = rhs.numApps;\n\ni = 0;\n\nwhile(i < *apps.size())\n{\n    *(apps + i) = *(rhs.apps + i);\n}\n\nreturn *this;}",
    "if (&rhs == this) {\n    return *this;\n}\n\nnumApps = rhs.numApps;\n\ndelete [] apps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;\n\n}",
    "if (this == &rhs) {\nreturn *this\n}\ndelete [] apps;\napps = new Smartphone[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < MAX_APPS; i++) {\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs)\n    return *this;\nnumApps = rhs.numApps;\ndelete [] apps;\nfor (int i = 0; i < numApps; ++i)\n{\n    *apps[i] = rhs.(*apps[i]);\n}\nreturn *this;}",
    "if (this == &rhs) return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\n    app[i] = rhs.app[i];\n}",
    "numApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; i++) {\n    *apps[i] = *rhs.apps[i]; \n}\nreturn *this;}",
    "if (rhs == &this) {\n    return *this;\n}\n\ndelete[] apps;\nnumApps = rhs.sumApps;\n\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n} \n\nreturn *this;}",
    "if(this == &rhs) {return *this; }\n\nnumApps = rhs.numApps;\napps = rhs.apps;\nreturn *this;}",
    "if (this == rhs) { return *this; }\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[rhs.MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n\n\n}",
    "if (this = &rhs) {return *this}\nfor (int i = 0; i < numApps; i++)\n{\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; i++)\n{\n    apps[i] = new Application[rhs.apps[i]];\n}\nreturn *this;\n}",
    "if (this == rhs) {return *this;}\nnumApps = rhs.numApps;\nMAX_APPS = rhs.MAX_APPS;\ndelete []apps;\napps = new Application[rhs.MAX_APPS];\nfor (int i = 0; i < MAX_APPS; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (*this == rhs) {\n    return *this;\n}\nif (apps) {\ndelete apps[];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < MAX_APPS; i++) {\n    aaps[i] = new Application{rhs.apps[i]->memoryUsed, rhs.apps[i]->name};\n}\nreturn *this;}",
    "if (&rhs == this) {\nreturn *this;\n}\ndelete[] apps;\n\nnumApps = rhs.numApps;\napps = new Application[rhs.numApps];\nfor (int app = 0; app < numApps; app++) {\napps[app] = rhs.apps[app];\n}\nreturn *this;\n}",
    "if (this == &rhs) { return *this }\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[numApps];\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "numApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++)\n{\n    apps[i] = rhs.apps[i];\n}",
    "if (this == &rhs) return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < rhs.numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == rhs){\n    return *this;\n    }\n\ndelete[] apps;\n\nApplication* apps = new Application[MAX_APPS];\nfor (int i = 0; i < MAX_APPS; i++){\n    apps[i] = rhs.apps[i];\n    }\n    \nreturn *this;\n}",
    "numApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++){\n    *apps[i] = *rhs.apps[i];  \n}\n\nreturn *this;}",
    "if (this == rhs) {\nreturn *this;}\ndelete[] apps;\nthis->numApps = rhs.numApps;\n\nfor ( int i = 0; i < numApps; ++i) {\nthis->apps[i] = rhs.apps[i];}\nreturn *this;\n\n    \n\n}",
    "if(this == &rhs) {return *this;} \ndelete[] apps;\nnumApps = rhs.numApps;\nint max = MAX_APPS;\nApplication *newApps = new Application[MAX_APPS];\nif(max > rhs.numApps) {max = rhs.numApps;}\nfor(int i = 0; i < max; i++)\n    newApps[i] = rhs.apps[i];\nreturn *this;\n    }",
    "if (&rhs == this)\n    return *this;\n\nfor (int i = 0; i < numApps; ++i) {\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this == &rhs) { return *this; }\ndelete[] apps;\n\nnumApps = rhs.numApps;\n\napps = new int[MAX_APPS];\nfor(int i = 0; i < MAX_APPS; ++i){\n  apps[i] = rhs.apps[i]\n  ++i;\n}\n\nreturn *this}",
    "if (apps == rhs.apps) { return *this;}\nelse {\n    delete[] apps;\n    numApps = rhs.numApps;\n    int *ptr = new int[MAX_APPS];\n    int *otherdata = rhs.data;\n    \n    for (int *i =  ptr; i < ptr+numApps; ++i) {\n        *i = *otherdata;\n        otherdata++;\n    }\n    apps = ptr;\n}\nreturn *this;}",
    "numApps = rhs.numapps; \nfor (int i = 0; i < rhs.numApps; i++) {\n*apps[i] = rhs->apps[i];\n}\nreturn *this;  //\n}",
    "if(this == &rhs){\n    return *this;\n}\nnumApps = rhs.numApps;\ndelete [] apps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "// if (rhs == *this) { return; }\n\ndelete[] apps;\n\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < rhs.numApps; i++) {\n\tapps[i] = rhs.apps[i];\n}",
    "if(this == &rhs){ return *this }\ndelete[] apps //delete old array\nApplication * apps = new Application[MAX_APPS] //create new\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "    if (this == &rhs) {\n      return *this;\n    }\n\n    delete[] apps;\n    numApps = rhs.numApps;\n\n    for (int i = 0; i < numApps; i++) {\n      apps[i] = rhs.apps[i];\n    }\n    return *this;\n  }\n    }",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this = &rhs) {\n    return *this;\n}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i=0;i<numApps;i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if (&rhs == this) {\n    return *this;\n}\n\ndelete[] apps;\n\napps = new Application[MAX_APPS]\n\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (&rhs == this) {return *this;}\nfor (int i = 0; i < MAX_APPS; ++i) {\n    delete apps[i];\n     apps[i] = nullptr;\n}\nnumApps = rhs.numApps;\n//apps = new *Application[MAX_APPS];\nfor (int i = 0; i < MAX_APPS; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this = &rhs) {\n    return *this;\n}\ndelete[]apps;\napps = new Application[rhs.numApps];\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if(this == rhs){\nreturn *this;\n}\ndelete [] *apps;\n*apps[rhs->numApps];\n\n\nfor(int i=0; i < rhs->numApps; ++i){\n(*apps)[i] = rhs->apps[i]\n}\n}",
    "if (this == &rhs) {\n    return *this;\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) return *this;\nfor (size_t i = 0; i < numApps; ++i) {\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (size_t i = 0; i < numApps; ++i) {\n    apps[i] = new Application(*(rhs.apps[i]));  // calls Application's copy ctor\n}",
    "if(this == &rhs) return *this;\n\ndelete[] apps;\n\nnumApps = rhs.numApps;\napps = new Application [MAX_APPS];\nfor(int i = 0; i < numApps; i++){\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "  if (this == &rhs) { return *this; }\n    \n    for(int i = 0; i < numApps; i++) {\n        delete apps[i];\n    }\n    numApps = rhs.numApps;\n    \n    for (int i = 0; i < numApps; ++i) {\n        apps[i] = rhs.apps[i];\n    }\n    \n    return *this;}",
    "if (this == &rhs) {\n    return *this;\n}\nfor (int i = 0; i < MAX_APPS; ++i) {\n    delete[] apps;\n}\ndelete apps;\nnumApps = rhs.numApps;\n*apps = newApplication[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name = rhs.apps[i]->name;\n}\nreturn *this;}",
    "apps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application [MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){return *this;}\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps; ++i){\n    delete apps[i];\n    apps[i] = new Application;\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n    }\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs)\n    return *this;\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++){\n    delete apps[i];\n    apps[i] = new Application(*rhs.apps[i]);\n}\nreturn *this;}",
    "if (this == &rhs) return *this;\n\t\tdelete[] apps;\n\t\tnumApps = rhs.numApps;\n\t\tapps = new Applications[MaxApps];\n\t\tfor (int i = 0; i < numApps; ++i) {\n\t\t\tapps[i] = rhs.apps[i];\n\t\t}\n\t\treturn *this;}",
    "if (this == &rhs)\n{\n    return *this;\n}\n\ndelete []apps;\n\nnumApps = rhs.numApps;\napps = new Application[numApps];\n\nfor (int i = 0; i < numApps; i++)\n{\n    apps[i] = rhs.app[i];\n}\n\nmemoryUsed = rhs.memoryUsed;\nname = rhs.name;\n\nreturn *this;}",
    "// copy static member variables\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < MAX_APPS; ++i){\n    // Delete current dynamic variables\n    delete apps[i];\n    // Copy valuables within dynamic arrays\n    apps[i] = rhs.apps[i];\n}",
    "if (this == &rhs) return *this;\nfor (int i = 0; i < numApps; ++i) {\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) {\n    return *this; }\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    delete apps[i];\n    apps[i] = new rhs.apps[i]; }\n    return *this;}",
    "if(this == &rhs){ return *this;}\ndelete[] apps;\napps = new Appliction[rhs.numApps];\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i]\n}\nreturn *this;\n\n    }",
    "if(this == rhs) {return *this;}\n\nfor(int i = 0; i < numApps; i++){\n    delete apps[i];\n}\n\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < rhs.numApps; i++){\n    apps[i] = new Application;\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "numApps = rhs -> numApps;\n\nfor(int i = 0; i < numApps; i++){\n\n}",
    "if(this == &rhs) return *this;\n\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "//initializes smartphone\nSmartphone *temp = new Smartphone;\n\n//sets numApps\n(*temp).numApps = rhs.numApps;\n\n//copies over apps array\nfor(int i = 0; i < MAX_APPS; i++){\n    (*temp).apps[i] = rhs.apps[i];\n}\nreturn temp;\n}",
    "if(this==&rhs) {\nreturn *this;\n}\nnumApps = rhs.numApps;\nfor(auto i = 0; i < numApps; i++) {\napps[i] = new Application(*rhs.apps[i]);\n}\nreturn *this;\n}",
    "if (this == &rhs){\n    return *this;}\ndelete  [] apps; \nnumApps = rhs.NumApps; \napps = new *apps[ numApps ]; \nfor (int = 0; i <numApps; i++){\n    apps[i] = rhs.apps[i];\n} \n\n}",
    "if (this == &rhs)\n{\n    return *this;\n}\ndelete []apps;\nnumApps = rhs.numApps;\nApplication *apps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++)\n{\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == rhs){\n    return *this;\n}\nfor(int i = 0; i < numApps; ++i){\n    delete apps[i];\n}\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps; ++i){\n    Application * newApp = new Application();\n    newApp = rhs.apps[i];\n    apps[i] = newApp;\n}\nreturn *this;\n\n}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[numApps];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n\n}",
    "if(this == &rhs) return *this;\nfor(int i = 0; i < numApps; i++){\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor(int i = 0; i < rhs.numApps; i++){\n    Application *app = new Application;\n    app->memoryUsed = rhs.apps[i]->memoryUsed;\n    app->name  = rhs.apps[i]->name;\n    apps[i] = app;\n}\nreturn *this;\n}",
    "if (this == &rhs) return *this;\ndelete[] apps;\napps = new Application*[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i<numApps; ++i)\n    apps[i] = rhs.apps[i];\nreturn *this;}",
    "if(this == &rhs) {\n    return *this\n}\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application[Max_Apps];\nfor(int i = 0; i < numApps; i++) {\n    apps[i] = rhs.numApps[i];\n}\nreturn *this;\n}",
    "if(this == &rhs){return *this;}\ndelete[] apps;\nnumApps = rhs.numApps;\nint i = 0;\nfor(Application *ptr = rhs.apps; ptr < rhs.apps + rhs.numApps; ++ptr){\n    Application *app = new Application;\n    app->memoryUsed = ptr->memoryUsed;\n    app->name = ptr->name;\n    apps[i] = app;\n    ++i;\n}\nreturn *this;}",
    "num_apps = rhs.num_apps;\ndelete[] apps;\napps = new Application[num_apps];\nfor (int i = 0; i < num_apps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) return *this;\n\nnumApps = rhs.numApps;\ndelete[] apps;\n\nfor (int i = 0; i < numApps; ++i) {\n\tapps[i] = rhs.apps[i];\n}\n}",
    "if (this == &rhs){ return *this; }\ndetele[] apps;\nmemoryUsed = rhs.memoryUsed;\napps = new apps[MAX_APPS];\nfor(int i = 0; i < MAX_APPS; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) return *this;\nnumApps = rhs.numApps;\n//I don't think we need to delete the apps array since the size will be the same and values after numApps won't matter\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "// Delete old content that could be stored in dynamic memory\ndelete[] apps;\n// Create a new dynamic apps array\nApplication *apps[MAX_APPS];\nnumApps = rhs.numApps;\n// Iterate through rhs apps and create deep copies\nfor(int i = 0; i < rhs.numApps; i++){\n    Application *temp = new Application;\n    temp->memoryUsed = rhs.apps[i]->memoryUsed;\n    temp->name = rhs.apps[i]->name;\n    apps[i] = temp;\n}",
    "if (this == &rhs) \n    return *this;\n    \nnumApps = rhs.numApps;\n\nfor (int index = 0 ; index < numApps ; index++) {\n    delete apps[index];\n}\n\nApplication* temp;\n\nfor (int index = 0 ; index < numApps ; index++) {\n    temp = new Application;\n    temp->memoryUsed = rhs.apps[index]->memoryUsed;\n    temp->name = rhs.apps[index]->name;\n    \n    apps[index] = temp;\n}\n\nreturn *this;}",
    "if (this==&rhs){\n   return *this;\n} delete [] apps;\nnumApps = rhs.numApps;\napps = new apps[MAX_APS];\nfor (int i = 0; i<numApps; ++i){\napps[i]= rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\nfor(int i = 0; i < numApps; ++i){\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = new Application(rhs.apps[i]);\n}\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\n\ndelete [] apps;\n\nthis->numApps = rhs.numApps;\n\nint count = 0;\nfor (Application *ptr = rhs.apps; count < numApps; ++ptr){\n    Application *app1 = new Application;\n    app1->memoryUsed = rhs.apps[count]->memoryUsed;\n    app1->name = rhs.apps[count]->name;\n    apps[count] = app1;\n    ++count;\n}\n\nreturn *this}",
    "if(this == &rhs) {\n    return *this;\n}\nnumApps = rhs.numApps;\nfor(int i = 0; i < MAX_APPS; ++i)\n{\n    delete apps[i];\n    apps[i] = new Application();\n}\nfor(int i = 0; i < numApps; ++i)\n{\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name = rhs.apps[i]->name;\n}\nreturn *this;}",
    "if (*this == rhs){\n    return *this;\n}\n\n    delete [] apps;\n    numApps = rhs.numApps;\n    apps = new Application[rhs.numApps];\n    for (int i = 0; i < numApps; i++){\n        apps[i] = rhs.apps[i];\n        \n    }\n    return *this;\n}",
    "if (this == &rhs) return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) { return *this; }\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(*this == &rhs){\n    return *this;\n}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nMAX_APPS = rhs.MAX_APPS;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) {return *this;}\n\nnumApps=rhs.numApps;\napps=rhs.apps;\n\nreturn *this;}",
    "if (this == &rhs) {\nreturn *this;\n}\ndelete [] apps;\napps = new Application [rhs.numApps];\nnumApps = rhs.numApps;\n\nfor (int i=0; i< numApps; i++) {\n apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\nfor (int i = 0; i < numApps; i++) {\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; i++) {\n    Application *new_app = new Application();\n    new_app->memoryUsed = rhs.apps[i].memoryUsed;\n    new_app->name = rhs.apps[i].name;\n    apps[i] = new_app;\n}\nreturn *this;}",
    "if(this == rhs)\n{\nreturn;\n}\ndelete apps[];\napps = new Application[rhs.numApps];\nnumApps = rhs.numApps;\nfor(int i=0; i<numApps; ++i)\n{\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "delete[] apps;\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this == &rhs)\n    return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "\tif (this == &rhs)\n\t{\n\t\treturn *this;\n\t}\n\n\tfor (int i = 0; i < numApps; i++)\n\t{\n\t\tdelete apps[i];\n\t}\n\n\tthis->numApps = rhs.numApps;\n\tfor (int i = 0; i < this->numApps; i++)\n\t{\n\t\tapps[i] = new Application(*rhs.apps[i]);\n\t}\n\treturn *this;}",
    "if (this == &rhs) return *this;\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n    delete apps[i];\n    apps[i] = rhs.apps[i];\n}",
    "if (this == &rhs) {\n    return *this;\n}\nelse {\n    numApps = rhs.numApps;\n    for (int i = 0; i < numApps; i++) {\n        apps[i] = rhs.apps[i];\n    }",
    "if (this == &rhs) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < rhs.numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this == &rhs) {return *this}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == rhs) {return *this}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i+=1) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs)\n    return *this;\nfor(int i = 0; i < numApps; i++)\n    delete apps[i]; //deletes each pointer object. pointers still intact\nnumApps = rhs.numApps; //copy local\nfor(int i = 0; i < numApps; i++)\n    *(apps[i]) = *(rhs.apps[i]); //assigns the actual rhs app object to this apps this pointer\nreturn *this;}",
    "for (int i = 0; i < numApps; i++){\n    delete apps[i];\n}\n\nfor (int i = 0; i < rhs.numApps; i++){\n    apps[i] = new Application;\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name = rhs.apps[i]->name;\n}\n\nnumApps = rhs.numApps;}",
    "if (this == &rhs) {\n    return *this;\n    }\n    \nnumApps = rhs.numApps;\nfor (int i = 0; i < MAX_APPS; ++i ) {\n    apps[i] = *rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "numApps = rhs.numApps;\napps = new Application(MAX_APPS);\nfor(int i = 0; i < MAX_APPS){\n    apps[i] = rhs.apps[i];\n}",
    " if(this == &rhs){\n    return *this;\n}\nint numHolder = numApps;\nnumApps = rhs.numApps;\nfor(int i = 0; i < numHolder;i++){\n    delete apps[i];\n}\nfor(int i = 0; i < numApps;i++){\n    Application *newApp = new Application;\n    newApp->memoryUsed = (rhs.apps[i])->memoryUsed;\n    newApp->name = (rhs.apps[i])->name;\n    apps[i] = newApp;\n}\nreturn *this;}",
    "if (this == &rhs)\n    return *this;\n\ndelete []apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < rhs.numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if(this == rhs){\n    return *this;\n    delete *apps;\n}\nif(this->numApps == rhs->numApps){\n    this->apps = new[MAX_APPS];\n}\nfor(int i = 0; i<MAX_APPS; ++i){\n    this->apps[i]=rhs->apps[i];\n}\nreturn *this;}",
    "numApps = rhs.numApps;\ndelete apps;\nApplication *a[MAX_APPS];\nfor(int i=0;i<numApps;i++){\n    a[i] = rhs.apps[i];\n}\napps = a;}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete[] *apps;\nnumApps = rhs.numApps;\napps = new *apps[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name = rhs.apps[i]->name;\n}\nreturn *this;}",
    "if (this == &rhs) { return *this };\n    MAX_APPS = rhs.MAX_APPS;\n    numApps = rhs.numApps;\n    for (int i = 0; i < numApps; i++) {\n        Application *app_1 = new Application(rhs.apps[i]);\n        apps[i] = app_1;\n    }\n    }",
    "if(this==&rhs){return *this;}\ndelete app;\napp=new Application[MAX_APPS];\nfor(int i=0;i<MAX_APPS;++i){\napps[i]=rhs.apps[i];\n}\nnumApps=rhs.numapps;\n}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[numApps];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps;\napps = new Application[MAX_APPS]\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}",
    "if (this == &rhs) {                       \n    return *this;\n}\nnumApps = rhs.numApps;\ndelete[] apps;\napps = new T[MAX_APPS];\napps->memoryUsed = rhs.apps->memoryUsed;\napps->name = rhs.apps->name;\nfor (int i = 0; i < MAX_APPS; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "numApps = rhs.numApps;\nMAX_APPS = rhs.MAX_APPs;\napps[MAX_APPS] = rhs.apps[MAX_APPS];\nreturn *this;}",
    "if(this == &rhs) return *this;\nfor(int i=0;i<numApps;i++)\n{\n    delete apps[i];\n}\nnumApps = rhs.numApps; \nfor(int i=0;i<numApps;i++)\n{\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if (this == &rhs)\n    return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new apps[MAX_APPS]\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) { return *this; }\nfor (int i = 0; i < MAX_APPS; ++i) {\n    delete i;\n    apps[i] = rhs.apps[i];\n}\n\nnumApps = rhs.numApps;\n\n}",
    "if(this == &rhs) return *this;\n\ndelete[] apps;\n\nnumApps = rhs.getNum();//how am I supposed to NOT call existing member functions when I needa private member variable\n\nfor(int i =0; i< numApps; i++){\n    int mem = rhs.apps[i]->memoryUsed;\n    string nam = rhs.apps[i]->name;\n    apps[i] = new Application{mem,nam};\n}\n\nreturn *this;}",
    "    if (this == &rhs) return *this;\n    for(int i = 0; i < MAX_APPS; i++) delete apps[i];\n    numApps = rhs.numApps;\n\n    for (int i = 0; i < MAX_APPS; i++) { apps[i] = rhs.apps[i]; }\n    return *this;}",
    "if (this == &rhs) {\n    return *this;\n}\n\ndelete[] apps;\n\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if(this == &rhs) {\n    return *this;\n}\n\ndelete[] apps;\n\nnumApps = rhs.numApps;\napps = new Application*[numApps];\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}",
    "numApps = rhs.numApps;\nfor(int i = 0; i < MAX_APPS; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) return *this;\nMAX_APPS = 200;\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++){\n    delete apps[i];\n}\nfor(int x = 0; x < numApps; x++){\n    apps[x] = new Application(rhs.apps[x]);\n}\n}",
    "if(this == rhs){\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs)\n    return *this;\ndelete[] apps; \nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < rhs.numApps; i++) \n    apps[i] = rhs.apps[i];\nreturn *this;}",
    "if(this==&rhs){\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps; \nappList = new Application[MAX_APPS];\nint i = 0;\nwhile(i<numApps){\n    appList[i] = rhs.apps[i];\n    i++;\n}",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) {\n    return *this;\n}\nfor(int i = 0; i < numapps; i++) {\n    delete apps[i];\n}\nnumapps = rhs.apps;\nfor(int c = 0; c < numapps; c++) {\n    apps[c] = rhs.apps[c];\n}\nreturn *this;}",
    "if(&rhs == this) {return *this;}\n\nfor (int i = 0; i < numApps; i++) {\n    delete apps[i];\n}\n\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "Smartphone &Smartphone::operator=(const Smartphone &rhs) {\n  if (this == &rhs) {return *this;}\n  delete[] apps;\n\n  apps = new Application* [MAX_APPS]; //apps is nonmodifiable???\n\n  for(int i = 0; i < MAX_APPS; ++i) {\n    apps[i] = rhs.apps[i];\n  }\n  return *this; \n}",
    "if(this==rhs)\nreturn *this;\ndelete apps;\nApplication *apps= new Application[MAX-APPS];\nnumApps=rhs.numApps;\nfor(int i=0;i<numApps;i++)\napps[i]=rhs.apps[i];\nreturn *this;}",
    "if(*this == rhs){\n    return *this;\n}\nnumApps = rhs.numapps;\nfor(int n=0;n<200;++n){\n    apps[n] = rhs.apps[n];\n}\nreturn *this;}",
    "if (this == &rhs) {return *this;}\ndelete[] apps;\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = new Application;\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name = rhs.apps[i]->name;\n}\nreturn *this;}",
    "if ( this == &rhs )\n    return *this;\n            \ndelete[] apps;\n            \nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\n\n\n for ( int i = 0;  i < MAX_APPS; i++ )\n    apps[ i ] = rhs.apps[ i ];\n    \n return *this;}",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps;\napps = new Application[rhs.MAX_APPS];\nMAX_APPS = rhs.MAX_APPS;\nnumApps = rhs.numApps;\nfor(int i = 0; i < rhs.numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == rhs) {\n    return *this;\n}\nnumApps = rhs.numApps;\ndelete[] apps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.numApps[i];\n}",
    "if (this==&rhs) {return *this;}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new apps[MAX_APPS];\nfor (int i = 0; i<numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) {\n        return *this;\n    }\n    numApps = rhs.numApps;\n    delete[] apps;\n    apps = new Application[MAX_APPS]; \n    for(int i = 0; i < numApps; ++i) {\n        apps[i] = rhs.apps[i];\n    }",
    "if(this == &rhs) {return *this;}\ndelete[] apps;\nnumApps = rhs.numApps;\nif(rhs.apps){\napps = new Application[rhs.apps];\n}\nelse {\napps = nullptr;\n}\nreturn *this;\n}\n}",
    "if(*this == rhs) {\n    return *this;\n}\nnumApps = rhs.numApps;\ndelete [] apps;\napps = new Application[MAX_APPS];\nfor(int i = 0, i < numApps, ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\ndelete[] apps;\nfor(int i = 0; i<rhs.numApps; ++i){\n    Application thisApp = new Application;\n    thisApp.memoryUsed = (rhs.apps[i])->memoryUsed;\n    thisApp.name = (rhs.apps[i])->name;\n    apps[i] = &thisApp;\n}\n\nnumApps = rhs.numApps;\n\nreturn *this;}",
    "if (this == &rhs){\nreturn *this;\n}\ndelete[] apps;\napps = new Application[MAX_APPS];\n//memoryUsed = rhs.memoryUsed;\n//name = name.rhs;\nnumApps = rhs.numApps;\nfor (int i = 0; i <numApps; ++i){\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\nreturn *this;\n}\ndelete [ ] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; i++) {\napps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if (this == &rhs ){\nreturn *this;\n}\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\n\nfor (int i = 0; i < numApps; i++){\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == rhs){\n    return *this;\n}\nfor (int i = 0; i < numApps; ++i){\n    delete[] apps[i];\n}\nthis->numApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i){\n    this->apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs){\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[numApps];\nfor (int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "    if (this == rhs) {\n        return *this;\n    }\n    delete[] apps;\n    numApps = rhs.numApps;\n    Application *apps = new Application[numApps];\n    for (int i = 0; i < numApps; ++i) {\n        apps[i] = rhs.apps[i];\n    }\n    return *this;\n}",
    "if(this == &rhs){\n    return *this;\n}\ndelete [] apps;\nMAX_APPS = rhs.MAX_APPS;\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this==&rhs){\n    return *this;\n}\ndelete[] apps;\nnumApps=rhs.numApps;\napps=new Application[MAX_APPS];\nfor (int i=0;i<numApps;++i){\n    apps[i]=new Application(rhs.apps[i]);\n}\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\n\ndelete [] apps;\n\nnumApps = rhs.apps;\n\napps = new Application[MAX_APPS];\n\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "for(int i = 0; i < numApps; ++i){delete apps[i];}\nnumApps = rhs.numApps;\nif(rhs.numApps > 0){\nfor(int i = 0; i < numApps; ++i){apps[i] = new Application(*rhs.apps[i]);}\n}\nreturn *this;}",
    "if (this = &rhs) {\n    return *this;\n}\ndelete[] apps;\napps = new Application[rhs.numApps];\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(*this = &rhs) { return *this; }\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application*[MAX_APPS];\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){\nreturn *this;\n}\n\nnumApps = rhs.numApps;\nfor(int a = 0; a < MAX_APPS; ++a){\napps[a] = rhs.apps[a];\n}\n\nreturn *this;}",
    "if (this = rhs) {\n    return *this;\n}\ndelete[] apps;\napps = new Application[rhs.numApps]\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; i++) {\n    *(apps[i]) = *(rhs.apps[i]);\n}\n\nreturn *this;}",
    "    if (this == &rhs) {\n      return *this;\n    }\n    numApps = rhs.numApps;\n    int i = 0;\n    while (i < numApps) {\n    apps[i] = new Application(*rhs.apps[i];\n    i++;\n    }\n    return *this;}",
    "if(this == &rhs){\n    return *this;\n}\nfor(int i = 0; i < MAX_APPS; ++i){\n    delete apps[i];\n}\nthis->numApps = rhs.numApps;\nfor(int i = 0; i < MAX_APPS; ++i){\n    new *Application app;\n    app->memoryUsed = *rhs.apps[i].memoryUsed;\n    app->name = *rhs.apps[i].name;\n    this->apps[i] = app;\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete [] apps;\napps = new Application[rhs.MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == rhs) {\n    return *this;\n}\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < rhs.numApps; i++) {\n    apps[i] = rhs.apps[i];\n}",
    "if(this == rhs) return *this;\nelse{\n    delete apps;\n    numApps = rhs.numApps\n    for(auto it = rhs.apps; it < rhs.apps + numApps; ++it){\n        *apps = *it;\n        ++apps;\n    }\n    return *this;\n}",
    "if(this == &rhs){return *this;}\ndelete[] apps;\nnumApps = rhs.numApps;\nfor(int i=0;i<numApps; i++){\napps[i] = new Application();\napps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\napps[i]->name = rhs.apps[i]->name;\n}\nreturn *this;}",
    "if (this != &rhs){\n    numApps = rhs.numApps;\n}\nreturn *this;}",
    "delete[] apps;\nnumApps = rhs.numApps;\napps = new Application(*rhs.apps);}",
    "if(this == &rhs){\n    return *this;\n}\ndelete this;\nmemoryUsed = rhs.numApps;\napps = rhs.apps;\nreturn *this\n}",
    "if (this== &rhs) { return  *this;}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    delete apps[i];\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == rhs) {\nreturn *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\nfor (int i = 0; i < numApps; i++) {\n    delete apps[i];\n}\n\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = new Application;\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name = rhs.apps[i]->name;\n}\n\nreturn *this;}",
    "if(&rhs == this) {\n    return *this;\n}\nfor(int i = 0; i < numApps; i++) {\n    delete apps[i];\n    apps[i] = nullptr; \n}\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++) {\n    apps[i] = new Application(); \n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name = rhs.apps[i]->name;\n}\nreturn *this;}",
    "if (rhs == this) {\n    return *this;\n}\nelse {\n    for (int i = 0; i < MAX_APPS; i++) {\n        apps[i] = *rhs.elements[i];\n    }\n    numApps = rhs.numApps;\n    return *this;\n}",
    "if (this == &rhs){\n    return *this;\n}\ndelete []apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i =0;i<numApps;++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if(this == &rhs){\n\nreturn *this;\n}\ndelete [] apps;\napps =  new Application[MAX_APPS];\nfor(int i =0; i < MAP_APPS; i++){\n        apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "delete[] apps;\nfor (int i = 0; i < MAX_APPS; i++) {\n    apps[i] = rhs.apps[i];\n}\nnumApps = rhs.numApps;}",
    "if (this = &rhs)\n{\n    return *this;\n}\nelse \n{\n    numApps = rhs.numApps;\n    Application* temp_apps = rhs.apps;\n    Application* iter = rhs.apps;\n    Application* new_apps = temp_apps;\n    for (int i = 0; i < num_apps; ++i)\n    {\n        temp_apps->memory_used = iter->memory_used;\n        temp_apps->name = iter->name;\n        temp_apps++;\n        iter++;\n    }\n    apps = new_apps;\n    return *this;\n}\n}",
    "  if (this == &rhs) {\n      return *this;\n    }\nApplication *copy = new Application;\ndelete *this;\nSmartphone *newsmartphone = new Smartphone;\nfor(int i = 0; i < numApps; i++)\n{\ncopy->memoryUsed = rhs.memoryUsed();\ncopy->name = rhs.name();\n\nnewsmartphone->apps.pushback(copy);\nnewsmartphone->numApps = rhs.numApps;\n}\nreturn *newsmartphone;}",
    "if(this == rhs){return *this;}\nphone = new Smartphone;\nphone.numApps = rhs.numApps;\nreturn &phone;}",
    "if (*this == rhs) {return *this;} \nfor (int i = 0; i < numApps; ++i) {\n    delete apps[i];\n}\nfor (int i = 0; i < rhs.numApps; ++i) {\n    apps[i] = new Application;\n    (apps[i])->memoryUsed = (rhs.apps[i])->memoryUsed;\n    (apps[i])->name = (rhs.apps[i])->name;\n}\nnumApps = rhs.numApps;\nreturn *this;}",
    "if (this == rhs) {\n    return *this;\n}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this!=&rhs)\n    {\n        numApps=rhs.numApps;\n        for (int i=0; i<MAX_APPS; i++)\n             *apps[i]=rhs.apps[i];\n            }\n            \nreturn *this;\n\n \n }",
    "if (this == &rhs) {\n    return *this;\n}\ndelete apps;\nApplication *apps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i = 0; i < rhs.numApps; ++i) {\n    appa[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "  if (this == &rhs) { \n    return *this; \n  }\n  numApps = rhs.numApps;\n  for (int i = 0; i < rhs.numApps; i++) {\n      Application *newApp = new Application;\n      newApp->memoryUsed = apps[i]->memoryUsed;\n      newApp->name = apps[i]->name;\n      apps[i] = newApp;\n  }\n  return *this;}",
    "if(this == &rhs) {return *this; }\n\ndelete []apps;\nnumApps = rhs.numApps;\napps = new Application[numApps];\n\nfor (int i = 0; i<numApps; ++i) \n{\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;\n}",
    "if(this==&rhs) return *this;\ndelete[] apps;\n\nnumApps = rhs.numApps;\napps = new Application[numApps];\n\nfor(int i = 0; i < numApps; ++i) apps[i] = rhs.apps[i];\nreturn *this;\n}",
    "if(*this == rhs) return;\n\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i = 0; i < rhs.numApps;i++){\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "numApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++){\n    *apps[i] = rhs.(*apps[i]);\n}\n}",
    " if(this == &rhs){\n          return *this;\n      }\n      delete [] apps;\n      numApps = rhs.numApps; \n      *apps = new Application[MAX_APPS]; \n      for(int i = 0; i <numApps; i++){\n          apps[i] = rhs.apps[i];\n      }  \n      return *this;}",
    "if (this == &rhs) {\n   return *this;\n }\n\nfor(int i = 0; i < numApps.size(); ++i) {\n    delete apps[i];\n}\n\nnumApps = rhs.numApps;\n   \n   for(int i = 0; i < numApps.size(); ++i) {\n      apps[i] = rhs.apps[i];\n   }\n   \n   return *this;\n}\n}",
    "if (this == &rhs) {\n    return *this;\n}\nnumApps = rhs.numApps;\ndelete[] apps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if(this == &rhs){\n    return *this;\n}\n\ndelete[] apps;\napps = new Application[MAX_APPS];\nnum_apps = rhs.num_apps;\n\nfor(int i = 0; i < num_apps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){return *this;}\ndelete[] apps;\nnumApps = rhs.numApps;\nif(rhs.apps[]){\napps[MAX_APPS] = new Application(*rhs.apps[]);\n}\nreturn *this;}",
    "if(this == &rhs) { return *this; }\ndelete []apps;\nnumApps; = rhs.numApps;\napps = new Application[ MAX_APPS ];\nfor ( int i = 0; i <  MAX_APPS; i++ )\napps[ i ] = rhs.apps[ i ];\nreturn *this}",
    "if (this == rhs) {return *this}\nnumApps = rhs.numApps;\ndelete[] apps;\nApplication *Temp = new Application[MAX_APPS};\nfor (int x = 0; x < MAX_APPS; ++x) {\nTemp[x] = rhs.apps[x];\n}\napps = Temp;\nreturn *this;}",
    "if(this == rhs) return this;\ndelete[] apps;\nnumApps = rhs.numApps;\nfor(int i = 0; i<MAX_APPS; i++){\n    apps[i] = rhs.apps[i];\n} return *this;}",
    "if(this == &rhs){\n          return *this;\n      }\n      delete[] apps;\n      numApps = rhs.numApps;\n      apps = new Application[MAX_APPS];\n      for(int i=0; i<MAX_APPS; i++){\n          apps[i]=rhs.apps[i];\n      }\n      return *this;}",
    "memoryUsed = rhs.memoryUsed;\nname = rhs.name;\nreturn *this;}",
    "if (*this==&rhs)\n{\n    return *this;\n}\ndelete[] apps;\napps = new Application (rhs.MAX_APPS)\nnumApps = rhs.numApps;\nfor(int i=0; i<numApps;i++)\n{\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){return *this;}\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return this;\n}\n//check for self assignment\ndelete [] apps;\n//delete existing array\nnumApps = rhs.numApps;\n//sets numApps and elements in array of this to rhs\napps = new Application[numApps];\nfor ( int i = 0; i < numApps; i++ )\napps[i] = rhs.apps[i];\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\nfor (int i = 0; i < numApps; i++) {\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; i++) {\n    apps[i] = new Application(*rhs.apps[i]);\n}\nreturn *this;}",
    "if (this == &rhs)\n    return *this;\n\nfor (int i = 0; i < numApps; i++){\n    delete apps[i];\n}\n\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++){\n    apps[i] = new Application(*(rhs.apps[i]));\n}\n\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps\nint i = 0;\nwhile (i < rhs.numApps){\n    apps[i] = rhs.apps[i];\n    ++i;\n}\nreturn *this;}",
    "if (this == &rhs)\n    return *this;\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}  \nreturn *this;}",
    "if( this == &rhs){\n    return *this;\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application[numApps];\nfor( int i =0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {return *this;}\n\ndelete[] apps;\napps = new Application[rhs.MAX_APPS];\nMAX_APPS = rhs.MAX_APPS;\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (&rhs != this) { \n    delete apps; \n    numApps = rhs.numApps;\n    apps = new Application[MAX_APPS];\n    for (Application * ptr: rhs.apps) {\n        (*apps).memoryUsed = (*rhs.apps).memoryUsed; \n        (*apps).name = (*rhs.apps).name;  \n    }\n}\nreturn *this; }",
    "if (this == &rhs) return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == rhs)\n    return *this;\ndelete [] apps;\nthis->apps = new Application*[MAX_APPS];\nfor(int i = 0; i < MAX_APPS; ++i){\n    this->apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) {\n    return *this;\n}\ndelete apps;\nnumApps = rhs.numApps;\nfor(int i = 0; i < MAX_APPS; ++i) {\n    apps[i] = new APplication;\n\nreturn *this;}",
    "if(this == &rhs){return *this;}\nfor(int i =0; i < numApps; i++){\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor(int i=0; i<numApps; i++){\n    Application *temp = new Application;\n    temp->memoryUsed = (rhs.apps)[i]->memoryUsed;\n    temp->name= (rhs.apps)[i]->name;\n    apps[i] = temp;\n}\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n}\ndelete [] apps; \nnumApps = rhs.numApps; \napps = new Application[numApps];\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this; }",
    "if(this==&rhs){\n    return *this;\n}\ndelete[] apps;\nnumApps=rhs.numApps;\napps=new Application[Max_APPS];\nfor(int i=0;i<numApps;i++){\n    apps[i]=Application();\n    apps[i].memoriesUsed=rhs.apps[i].memoriesUsed;\n    apps[i].name=rhs.apps[i].name;\n}\nreturn *this;}",
    "if (this == &rhs) {\n        return *this;\n    }\n    this->numApps = rhs.numApps;\n    for (int i = 0; i < numApps; i++) {\n        apps[i] = new Application;\n        apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n        apps[i]->name = rhs.apps[i]->name;\n    }\n    return *this;\n}",
    "memoryUsed = rhs->numApps;\nname = rhs->apps;}",
    "if (this == rhs) {\nreturn *this;\n}\nelse {\nthis.numApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\nthis.apps[i] = rhs.apps[i];\n}\nfor (int i = numApps; i < MAX_APPS; ++i) {\nthis.apps[i] = nullptr;\n}\n}\n\n}",
    "if(this == &rhs){ return *this; }\n\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if(this == &rhs){\nreturn *this;}\ndelete [] apps;\n//dont need to copy static \nnum_apps = rhs.num_apps;\napps = new Application [MAX_APPS];\nfor(int i = 0; i < num_apps; ++i){\napps[i] = rhs.apps[i];}\nreturn *this;}",
    "if(this == &rhs)\n    return *this;\n    \ndelete []apps;\nnumApps = rhs.numApps;\n\napps = new Application[MAX_APPS];\nfor(int i = 0; i < MAX_APPS; i++)\n    apps[i] = rhs.apps[i];\n}",
    "\t\tif (this == &rhs) {\n\t\t\treturn(*this);\n\t\t}\n\n\t\tfor (int i = 0; i < numApps; i++) {\n\t\t\tdelete apps[i];\n\t\t}\n\n\t\tfor (int i = 0; i < rhs.numApps; i++) {\n\t\t\tapps[i] = rhs.apps[i];\n\t\t}\n\n\t\tnumApps = rhs.numApps;\n\t\treturn(*this);\n}",
    "if (this == &rhs)\n    return *this;\n    \n// deletes old\nfor(int i = 0; i < numApps; i++) {\n    delete *(apps + i);\n}\n\nnumApps = rhs.numApps;\n\n// allocates new memory\nfor(int i = 0; i < numApps; i++) {\n    auto original_app = *(rhs.apps + (size_t) i);\n    auto copied_app = new Application;\n    copied_app->memoryUsed = original_app->memoryUsed;\n    copied_app->name = original_app->name;\n    \n    *(apps + (size_t) i) = copied_app;\n}\n\nreturn *this;}",
    "for (int app = 0; app < rhs.numApps; app++) {\n  Application *copy_app = new Application();\n  copy_app->memoryUsed = rhs.apps[app]->memoryUsed;\n  copy_app->name = rhs.apps[app]->name;\n  apps[app] = copy_app;\n  numApps += 1;\n}",
    "        if (this == &rhs) {\n            return *this;\n        }\n        numApps = rhs.numApps;\n        for (int i = 0; i < numApps; ++i) {\n            delete apps[i];\n            apps[i] = new Application;\n            apps[i] = rhs.apps[i];\n        {\n        return *this;}",
    "    if(this == &rhs) return *this;\n    numApps = rhs.numApps;\n    delete[] apps;\n    apps = new Application[MAX_APPS];\n    for(int i = 0; i < numApps; ++i){\n        apps[i] = rhs.apps[i];\n    }\n    return *this;}",
    "if (this == rhs){\n    return *this;\n}\ndelete [] apps;\napps = new Application[rhs.MAX_APPS];\nnumApps=rhs.numApps;\n\nfor(int i = 0; i < numApps; ++i){\n    apps[i]=rhs.apps[i];\n}\n\nreturn *this;}",
    "if(this == &rhs) return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i<numApps; ++i){\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "numApps = rhs.numApps;\nApplication *arr[rhs.MAX_APPS];\nfor (int i=0; i<(rhs.MAX_APPS); i++) {\n    Application a = *(rhs.apps[i]);\n    arr[i] = *a;\n}",
    "if(this == &rhs){\n    return *this;\n}\ndelete apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nwhile(rhs.apps){\n    apps = rhs.apps;\n    rhs.apps++;\n}\nreturn *this;}",
    "if (this == &rhs){\n    return *this;\n}\nfor (int i = 0; i < numApps; ++i){\n    delete apps[i];\n}\nfor (int j = 0; j < rhs.numApps; ++j){\n    Application *temp = rhs.apps[j];\n    Application *a = new Application{temp->memoryUsed, temp->name};\n    apps[j] = a;\n}\nnumApps = rhs.numApps;}",
    "if (this == &rhs) {\n    return *this;\n}\n\ndelete[] apps;\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if(this == &rhs){ return *this; }\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs){ return *this)\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\n\nfor (int i = 0; i < numApps; i++)\n{\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n }",
    "if (&rhs == this) return *this;\nnumApps = rhs.numApps;\ndelete[] apps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i){\n     apps[i] = rhs.apps[i];\n }\n return *this;\n}",
    "if (this == &rhs) { return *this; }\n\ndelete[] apps;\n\napps[MAX_APPS] = new Application[MAX_APPS](*rhs.apps);\n\nreturn *this;\n}",
    "if(this == &rhs){ return *this}\nnumApps = rhs.numApps; \ndelete[] apps;\napps = new Applicaton[MAX_APPS];\nfor(int i = 0; i < numApps; ++i){\n    apps = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == rhs) {\n    return *this;\n}\ndelete apps;\napplications *apps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "numApps = rhs.numApps;\ndelete[] apps;\nApplication** new_apps = new Application*[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    new_apps[i] = rhs.apps[i];\n}\napps = *new_apps;\nreturn *this;}",
    "if (this == &rhs) {return *this;}\nfor (int i = 0; i < MAX_APPS; ++i) {\n    delete apps[i];\n    *apps[i] = rhs->apps[i];\n}\nnumApps = rhs.numApps;\nreturn *this;}",
    "if(this==&rhs){ return *this;}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application*[MAX_APPS];\nfor(int i = 0; i<numApps; ++i){\n    *apps[i] = *(rhs.apps[i]);\n}\n\nreturn *this;}",
    "if (this == &rhs) {return *this;}\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i)\n    apps[i] = rhs.apps[i];\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\nfor (int i = 0; i < rhs.numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == rhs){\n    return *this;\n}\ndelete[] apps;\nMAX_APPS = rhs.MAX_APPS;\nnumApps = rhs.numApps;\napps[] = new apps[MAX_APPS];\nfor(int i = 0; i<numApps; ++i){\n    apps[i] = rhs.apps[i]\n}\nreturn *this;}",
    "for (int x = 0; x < numApps; x++) {\n    delete apps[x];\n}\nnumApps = rhs.numApps;\nfor (int x = 0; x < numApps; x++) {\n    int memory_temp = rhs.apps[x]->memoryUsed;\n    string name_temp = rhs.apps[x]->name;\n    apps[x]->memoryUsed = memory_temp;\n    apps[x]->name = name_temp;\n}\nreturn *this;}",
    "\nif (apps == rhs.apps) return;    //if it is a self copy, copy is done, dont mess with data\nif (apps != NULL) delete[] apps;    // delete current memory if not already empty to clear\n\nnumApps = rhs.numApps;    //assigns the num of rhs maps\n\nApplication *apps = new Application[MAX_APPS];   // create new memory location for app arr\nfor (int i = 0; i < numApps; i++) {    // replaces empty values with rhs.app values\n    *apps[i] = *rhs.apps[i];\n}\n}",
    "if (this == &rhs){\n    return *this\n}\nelse{\n    delete app[];   \n    numApps = rhs.numApps;\n    \n    apps[] = new *apps_var[MAX_APPS];\n    \n    for (int i = 0; i < MAX_APPS; ++i0{\n        apps[i] = rhs.apps[i];\n    }\n    \n    return *this   \n}",
    "if(this == &rhs) {\n    return *this;\n}\nthis -> numApps = rhs.numApps;\nfor(int i = 0; i < rhs.numApps; ++i) {\n    this -> apps.[i] = rhs.apps[i];\n}\n}",
    "if(this == &rhs){\n    return *this;\n}\n\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) return *this;\nnumApps = rhs.numApps;\ndelete[] apps;\napp = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; ++i){\napp[i] = rhs.app[i];\n}\nreturn *this;}",
    " if (this == &rhs) { return *this; }\n delete[] apps;\n numApps = rhs.numApps;\n apps = new Application[MAX_APPS];\n\n for (int i = 0; i < numApps; ++i) {\n     apps[i] = rhs.apps[i];\n }\n return *this;\n }",
    "if(this == &rhs) { \n    return *this; \n} \nfor(int i = 0; i < num_Apps; i++) { \n    delete apps[i];\n} \nnumApps = 0;\nfor(int i = 0; i < rhs.num_Apps; i++) { \n    apps[i] = rhs.apps[i];\n    numApps++; \n}\nreturn *this;}",
    "if(this == rhs) return *this;\ndelete this.apps[];\nfor(int i = 0; i < rhs.numApps; i++){\n    Application add = new Application;\n    add->memoryUsed = rhs.apps[i]->memoryUsed;\n    add->name = rhs.apps[i]->name;\n    apps[i] = add;     \n    numApps++;\n}\nreturn *this;}",
    "if (this == &rhs) return *this;\nfor (int i = 0; i < numApps; i++) {\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "\nif (&rhs != this)\n    {\n    numApps = rhs.numApps;\nApps* temp = new Apps[MAX_APPS];\nfor (int i = 0; i < MAX_APPS; i++){\n  temp[i] = rhs.movieArry[i];\n}\nstd::swap(Apps, temp);\ndelete temp;\n}\n\nreturn *this\n}\n\n}",
    " numApps=rhs.numApps;\n for(int i=0;i<numApps;i++){\n        Application ap= {rhs.apps[i]->memoryUsed,rhs.apps[i]->name};\n}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete []apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < MAX_APPS; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n        return *this;\n     }\n      numApps = rhs.numApps;\n      delete[] apps;\n      Application *apps = new Application[MAX_APPS];\n      for(int i = 0; i < numApps; i++) {\n         apps[i] = rhs.apps[i];\n      }\n     return *this;}",
    "if (this == &rhs) return *this;\nfor(int i = 0; i< numApps; ++i){\n    delete apps[i];\n}\nassert(rhs.numApps<=MAX_APPS);\nnumApps= rhs.numApps;\nfor (int i = 0; i< rhs.numApps; ++i) {\n    apps[i] = new Application(*(rhs.numApps[i]));\n}\nreturn *this;}",
    "if (*this == rhs) return *this;\nnumApps = rhs.numApps;\nfor (int i = 0; i < MAX_APPS; ++i) {\n    delete apps[i];\n    apps[i] = nullptr;\n}\nfor (int i = 0; i < numApps; ++i) {\n    Application newapp = rhs.apps[i];\n    apps[i] = &newapp;\n}\nreturn *this;}",
    "numApps = rhs.numApps;\nfor (int i = 0; i < MAX_APPS; ++i) {\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if( this == rhs)  { \nreturn *this; \n}\n\nnumApps = rhs.numApps; \ndelete [] apps; \napps = new Application [MAX_APPS]\nfor(int i = 0; i < numApps; i++) { \n    apps[i] = rhs.apps[i]; \n} \nreturn *this;\n}",
    "if(this == rhs) { return this;}\ndelete []apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i){\napps[i] = rhs.apps[i];\n}\nreturn this;}",
    " if(this == &rhs){\n      return *this;\n  }\n\n      delete[] *apps;\n      numApps = rhs.numApps;\n      *apps = new Application[MAX_APPS];\n\n  for(int i = 0; i < MAX_APPS; ++i){\n      apps[i] = rhs.apps[i];\n  }\n  \n  return *this;}",
    "  if (this == &rhs) {                       // self-assignment check\n    return *this;\n  }\n\n  delete[] apps;                        // delete old array\n\n  apps= new Application[MAX_APPS];           // make new array of the required size\n  numApps= rhs.numApps;\n\n  for (int i = 0; i < numApps; ++i) {  // copy over the elements\n    apps[i] = rhs.apps[i];\n  }\n\n  return *this;  }",
    "if (this == rhs){\nreturn *this;\n}\ndelete[] apps;\n//deep copy for array\nfor(int i = 0; i<rhs.numApps; i++){\nthis.apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs){return *this;}\ndelete[] apps;\napps = new Smartphone[rhs.MAX_APPS];\nMAX_APPS = rhs.MAX_APPS;\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps; ++i){\n    elements[i] = rhs.elements[i];\n}\n\nreturn *this;}",
    "if (this == &rhs){\n    return *this;\n}\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++){\n    delete apps[i];\n    apps[i] = nullptr;\n}\nfor(int i = 0; i < rhs.numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if (this == &rhs){\n       return *this;\n   }\nfor (int i = 0; i <rhs.numApps; i++){\n       delete apps[i];\n       Application * a = new Application(*(rhs.apps[i]));\n       apps[i] = a;\n }\n numApps = rhs.numApps;\n\n return *this;}",
    "if(this==&rhs)\n    return *this;\n    \ndelete[] apps;\nnumApps=rhs.numApps;\napps=new Application*[MAX_APPS];\nfor(int i=0; i<numApps; i++)\n    apps[i]=rhs.apps[i];\n\nreturn *this;}",
    "if(this == &rhs){\n    return *this;\n} else{\n    for(int i = 0; i < numApps; ++i){\n        delete apps[i];\n    }\n    numApps = rhs.numApps;\n    for(int j = 0; j < numApps; ++j){\n         Application *rhsApp = rhs.apps[j];   \n         apps[j] = new Application{rhsApp->memoryUsed, rhsApp->name};\n    }\n    \n}",
    "Smartphone *s = new Smartphone();\ndelete this;\ns->numApps = rhs.numApps;\nfor (int i = 0; i < s->numApps; i++){\n    Application *a = new Application;\n    a->memoryUsed = rhs.apps[i]->memoryUsed;\n    a->name = rhs.apps[i]->name;\n    s->apps[i] = a;\n}\nreturn *s;}",
    "numApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i) {\n    Application newApp;\n    newApp.memoryUsed = rhs.apps[i].memoryUsed;\n    newApp.name= rhs.apps[i].name;\n    apps[i] = *newApp;\n}",
    "if (this = &rhs){\n    return;\n}\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this; \n}\ndelete[] apps; \nnumApps = rhs.numApps; \napps = new Application[MAX_APPS]; \nfor (int i = 0; i < rhs.numApps; ++i) {\n    apps[i] = apps[i]; \n}\nreturn *this; }",
    "if(this == rhs) { return *this; }\n\ndelete[] apps;\napps = new T[rhs.MAX_APPS];\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "numApps = rhs.numApps;\nreturn *this;}",
    "if(this==&rhs){return  *this}\ndelete [] apps;\nnumApps=rhs.numApps;\napps= new rhs.apps;\nreturn *this;\n\n\n\n}",
    "if (this == &rhs)\n{\n    return *this;\n}\n\ndelete [] apps;\napps = new Application[rhs.MAX_APPS];\nMAX_APPS = rhs.MAX_APPS;\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; ++i)\n{\n    apps[i]. = rhs.apps[i];\n}\n\nreturn *this;}",
    "delete[] apps;\n\napps = new Application* [rhs.MAX_APPS];\nnum_apps = rhs.num_apps;\n\nfor (int i = 0; i < num_apps; i++){\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;}",
    "if (this == &rhs){ return *this;}\nfor(int i = 0; i < numApps; ++i){\n    delete apps[i];\n}\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; ++i){\n    apps[i] = new Application(rhs.apps[i]);\n}\nreturn *this;\n\n}",
    "if (this == &rhs) {\n    return *this;\n}\n\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++) {\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n    apps[i]->name = rhs.apps[i]->name;\n}\n\nreturn *this;}",
    "\nif(this == &rhs) { return *this; }\nnumApps = rhs.numApps;\nfor (int i = 0; i < MAX_APPS; i++) {\n    apps[i] = rhs.apps[i];\n}\n    }",
    "if (this == &rhs) {return *this;}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < rhs.numApps; ++i) { \n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) {\n    return *this;\n  }\n  delete[] apps;\n  apps = new Application[MAX_APPS];\n  numApps = rhs.numApps;\n  for(int i = 0; i < rhs.numApps; i++) {\n    apps[i] = rhs.apps[i];\n  }\n  return *this;}",
    "numApps = rhs.numApps;\napps = rhs.apps;}",
    "if (*this == rhs) { return *this; } //self-assignment check\n\ndelete[] apps; //free old resources\napps = new Application*[rhs.MAX_APPS];\nnumApps = rhs.numApps;\n\nfor (int i=0; i<numApps; i++){\n    apps[i] = rhs.apps[i];\n}\n\nreturn *this;\n    }",
    "if (this ==  &rhs) {\n    return *this;\n}\n\ndelete[] apps;\n\napps = new Application*[MAX_APPS];\n\nfor (int i = 0; i < rhs.numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\n\nnumApps = rhs.numApps;\n\nreturn *this;\n\n}",
    "if (this == &rhs){\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[Smartphone::MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) return *this;\nfor(int i = 0; i < numApps; i++){\n  delete apps[i];\n}\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++){\n  apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\nreturn *this;\n}\n\nfor (int i = 0; i < numApps; ++i) {\ndelete apps[i];\n}\n\nnumApps = rhs.numApps;\n\nfor (int i = 0; i < numApps; ++i) {\napps[i] = rhs.apps[i]\n}",
    "if (this == &rhs){ return *this; }\n\nnumApps = rhs.numApps;\ndelete[] apps;\napps = new Application*[MAX_APPS];\n\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if (this == &rhs) return *this;\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\n   apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this==&rhs){\n    return *this;\n}\nfor (int i=0; i<numApps; i++){\n    delete apps[i];\n}\n\nnumApps = rhs.numApps;\nfor (int j=0; j<numApps; j++){\n    apps[j] = rhs.apps[j];\n}\nreturn *this;\n\n }",
    "if(this == &rhs) return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; i++){\n    apps[i] = rhs.apps[i];\n    }\nreturn *this;}",
    "if (this != rhs) {\n    numApps = rhs.numApps;  \n    delete[] apps;\n    apps = new Application[MAX_APPS];\n    for (int i = 0; i < numApps + 1; ++i) {\n        apps[i] = rhs.apps[i];\n    }\n}\n\nreturn this;}",
    "if(this == &rhs) {\n    return *this; }\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i]; }\nreturn *this;}",
    "delete[] apps;\nnumApps = rhs.numApps;\nApplication *newApps = new arr[MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\n    newApps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "numApps = rhs.numApps;\nfor(int i = 0; i < MAX_APPS; i++ {\n    apps[i] = rhs.apps[i];\n}",
    "numApps = rhs.numApps;\ndelete[] apps;\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}",
    "numApps = rhs.numApps;\nfor(int i= 0; i < rhs.numApps; ++i){\n    Application *newApp = new Application;\n    *newApp = *rhs.apps[i];\n    apps[i] = newApp;\n}",
    "if(this == &rhs)\n    return *this;\n\ndelete[] apps;\napps = new Applications[MAX_APPS];\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i]; }\n    \nreturn *this;\n}",
    "if(this = &rhs) return *this;\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor(int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "delete &apps;\napps[MAX_APPS] = new Application;\nnumApps = rhs.numApps;\nfor(int i=0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if(this == &rhs) return *this;\nfor(int i = 0; i < numApps; i++) delete apps[i];\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++) apps[i] = rhs.apps[i];}",
    "if(this==rhs){\n    return *this;}\ndelete[] apps;\napps = new Application[MAX_APPS];\nfor(int i=0; i<rhs.numApps; ++i){\n    apps[i] = rhs.apps[i];}\nnumApps = rhs.numApps;\nreturn *this;}",
    "if (this == rhs){\n    return *this;\n}\ndelte[] apps;\nthis-> MAX_APPS = rhs.MAX_APPS;\nthis-> numApps = rhs.numApps;\nthis-> apps = new Application apps[MAX_APPS];\nfor (int i = 0; i < MAX_APPS; ++i) {\n    this-> apps[i] = Application(rhs.apps[i]);\n}\nreturn *this;}",
    "if(this == &rhs) {\n    return *this;\n}\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS]; //CALL DELETE\nfor(int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\ndelete[]apps;}",
    "if(&rhs == this){\n        return *this;\n    }\n    for(int i = 0; i < numApps; ++i){\n        delete apps[i];\n    }\n    numApps = rhs.numApps;\n\n    Application *copied_apps[numApps];\n    apps = copied_apps;\n    for(int i = 0; i <numApps; ++i){\n        apps[i] = new Application{rhs.apps[i]->memoryUsed, rhs.apps[i]->name};\n    }\n    return *this;}",
    "if(this == &rhs){\n    return *this;\n}\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Smartphone(*rhs.apps);\nreturn *this;}",
    "if (this == &rhs) {return *this;}\ndelete [] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\napps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "delete [] apps;\napps = new application[MAX_APPS];\nnumApps = rhs.numApps;\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}",
    "if(this == &rhs)\nreturn *this;\n\nnumApps = rhs.numApps;\ndelete[] apps;\napps = new Application[MAX_APPS];\n\nfor(int i{0}; i < numApps; i++)\n{\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) { \n    return *this; \n}\n\nfor (int i = 0; i < rhs.numApps; i++) {\n    apps[i] = new Application;\n    apps[i]->name = rhs.apps[i]->name;\n    apps[i]->memoryUsed = rhs.apps[i]->memoryUsed;\n}\n\nnumApps = rhs.numApps;\n\nreturn *this;}",
    "if (this==rhs) {\n    return this; \n}\ndelete[] apps;\nMAX_APPS=200;\nnumApps=rhs.numApps;\napps=new Application[MAX_APPS];\nfor(int i=0; i<numApps; i++)\n   apps[i]=rhs.apps[i];\nreturn *this;\n}",
    "if( this == &rhs) { return *this; }\ndelete[] apps;\napps = new Application[MAX_APPS];\nnumApps = rhs.numApps;\n\nfor(int i = 0; i < numApps; ++i){\n    apps[i] = rhs.apps[i];\n}\nreturn *this;\n}",
    "if(this == &rhs) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; i++) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\ndelete[] apps;\nnumApps = rhs.numApps;\napps = new Application[MAX_APPS];\nfor (int i = 0; i < numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\nreturn *this;}",
    "if (this == &rhs) {\n    return *this;\n}\n\ndelete[] apps;\napps = new Application[rhs.MAX_APPS];\nfor (int i = 0; i < rhs.numApps; ++i) {\n    apps[i] = rhs.apps[i];\n}\n\nnumApps = rhs.numApps;\nMAX_APPS = 200;\n\nreturn *this;}",
    "if(this == &rhs){ return *this; }\n\nfor(int i = 0; i < numApps; i++){\n    delete apps[i];\n}\n\nnumApps = rhs.numApps;\nfor(int i = 0; i < numApps; i++){\n    apps[i] = new Application;\n    *apps[i] = *rhs.apps[i];\n}\n\nreturn *this;\n\n}",
    "if (this == &rhs){\nreturn *this;\n}}"
]