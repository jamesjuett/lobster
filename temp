
> lobster@1.0.0 build /mnt/c/Users/james/Desktop/lobster
> webpack --config webpack.config.js

/mnt/c/Users/james/Desktop/lobster/node_modules/webpack-cli/bin/cli.js:281
				throw err;
				^

ValidationError: Invalid configuration object. Webpack has been initialized using a configuration object that does not match the API schema.
 - configuration.module has an unknown property 'loaders'. These properties are valid:
   object { defaultRules?, exprContextCritical?, exprContextRecursive?, exprContextRegExp?, exprContextRequest?, noParse?, rules?, strictExportPresence?, strictThisContextOnImports?, unknownContextCritical?, unknownContextRecursive?, unknownContextRegExp?, unknownContextRequest?, unsafeCache?, wrappedContextCritical?, wrappedContextRecursive?, wrappedContextRegExp? }
   -> Options affecting the normal modules (`NormalModuleFactory`).
   Did you mean module.rules or module.rules.*.use?
    at validate (/mnt/c/Users/james/Desktop/lobster/node_modules/schema-utils/dist/validate.js:104:11)
    at validateSchema (/mnt/c/Users/james/Desktop/lobster/node_modules/webpack/lib/validateSchema.js:79:2)
    at create (/mnt/c/Users/james/Desktop/lobster/node_modules/webpack/lib/webpack.js:100:3)
    at webpack (/mnt/c/Users/james/Desktop/lobster/node_modules/webpack/lib/webpack.js:137:31)
    at f (/mnt/c/Users/james/Desktop/lobster/node_modules/webpack/lib/index.js:37:15)
    at processOptions (/mnt/c/Users/james/Desktop/lobster/node_modules/webpack-cli/bin/cli.js:272:16)
    at /mnt/c/Users/james/Desktop/lobster/node_modules/webpack-cli/bin/cli.js:364:3
    at Object.parse (/mnt/c/Users/james/Desktop/lobster/node_modules/yargs/yargs.js:567:18)
    at /mnt/c/Users/james/Desktop/lobster/node_modules/webpack-cli/bin/cli.js:49:8
    at Object.<anonymous> (/mnt/c/Users/james/Desktop/lobster/node_modules/webpack-cli/bin/cli.js:366:3)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)
    at Module.load (internal/modules/cjs/loader.js:928:32)
    at Function.Module._load (internal/modules/cjs/loader.js:769:14)
    at Module.require (internal/modules/cjs/loader.js:952:19)
    at require (internal/modules/cjs/helpers.js:88:18)
    at runCli (/mnt/c/Users/james/Desktop/lobster/node_modules/webpack/bin/webpack.js:54:2)
    at Object.<anonymous> (/mnt/c/Users/james/Desktop/lobster/node_modules/webpack/bin/webpack.js:147:2)
    at Module._compile (internal/modules/cjs/loader.js:1063:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)
    at Module.load (internal/modules/cjs/loader.js:928:32)
    at Function.Module._load (internal/modules/cjs/loader.js:769:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)
    at internal/main/run_main_module.js:17:47 {
  errors: [
    {
      keyword: 'additionalProperties',
      dataPath: '.module',
      schemaPath: '#/additionalProperties',
      params: { additionalProperty: 'loaders' },
      message: 'should NOT have additional properties',
      schema: false,
      parentSchema: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          noParse: {
            description: "Don't parse files matching. It's matched against the full resolved request.",
            anyOf: [Array]
          },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      data: {
        loaders: [
          {
            test: /\.tsx?$/,
            use: 'awesome-typescript-loader',
            exclude: /node_modules/,
            query: [Object]
          },
          { test: /\.css$/, use: [Array], exclude: /node_modules/ }
        ]
      }
    }
  ],
  schema: {
    definitions: {
      Amd: {
        description: 'Set the value of `require.amd` and `define.amd`. Or disable AMD support.',
        anyOf: [
          {
            description: 'You can pass `false` to disable AMD support.',
            enum: [Array]
          },
          {
            description: 'You can pass an object to set the value of `require.amd` and `define.amd`.',
            type: 'object'
          }
        ]
      },
      AssetModuleFilename: {
        description: 'The filename of asset modules as relative path inside the `output.path` directory.',
        anyOf: [
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      AuxiliaryComment: {
        description: 'Add a comment in the UMD wrapper.',
        anyOf: [
          {
            description: 'Append the same comment above each import style.',
            type: 'string'
          },
          { '$ref': '#/definitions/LibraryCustomUmdCommentObject' }
        ]
      },
      Bail: {
        description: 'Report the first error as a hard error instead of tolerating it.',
        type: 'boolean'
      },
      CacheOptions: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Enable in memory caching.', enum: [Array] },
          { '$ref': '#/definitions/CacheOptionsNormalized' }
        ]
      },
      CacheOptionsNormalized: {
        description: 'Cache generated modules and chunks to improve performance for multiple incremental builds.',
        anyOf: [
          { description: 'Disable caching.', enum: [Array] },
          { '$ref': '#/definitions/MemoryCacheOptions' },
          { '$ref': '#/definitions/FileCacheOptions' }
        ]
      },
      Charset: {
        description: 'Add charset attribute for script tag.',
        type: 'boolean'
      },
      ChunkFilename: {
        description: 'The filename of non-initial chunks as relative path inside the `output.path` directory.',
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      ChunkFormat: {
        description: "The format of chunks (formats included by default are 'array-push' (web/WebWorker), 'commonjs' (node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      ChunkLoadTimeout: {
        description: 'Number of milliseconds before chunk request expires.',
        type: 'number'
      },
      ChunkLoading: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/ChunkLoadingType' }
        ]
      },
      ChunkLoadingGlobal: {
        description: 'The global variable used by webpack for loading of chunks.',
        type: 'string'
      },
      ChunkLoadingType: {
        description: "The method of loading chunks (methods included by default are 'jsonp' (web), 'importScripts' (WebWorker), 'require' (sync node.js), 'async-node' (async node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      CompareBeforeEmit: {
        description: 'Check if to be emitted file already exists and have the same content before writing to output filesystem.',
        type: 'boolean'
      },
      Context: {
        description: 'The base directory (absolute path!) for resolving the `entry` option. If `output.pathinfo` is set, the included pathinfo is shortened to this directory.',
        type: 'string',
        absolutePath: true
      },
      CrossOriginLoading: {
        description: 'This option enables cross-origin loading of chunks.',
        enum: [ false, 'anonymous', 'use-credentials' ]
      },
      Dependencies: {
        description: 'References to other configurations to depend on.',
        type: 'array',
        items: {
          description: 'References to another configuration to depend on.',
          type: 'string'
        }
      },
      DevServer: {
        description: 'Options for the webpack-dev-server.',
        type: 'object'
      },
      DevTool: {
        description: 'A developer tool to enhance debugging (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).',
        anyOf: [
          { enum: [Array] },
          {
            type: 'string',
            pattern: '^(inline-|hidden-|eval-)?(nosources-)?(cheap-(module-)?)?source-map$'
          }
        ]
      },
      DevtoolFallbackModuleFilenameTemplate: {
        description: 'Similar to `output.devtoolModuleFilenameTemplate`, but used in the case of duplicate module identifiers.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolModuleFilenameTemplate: {
        description: 'Filename template string of function for the sources array in a generated SourceMap.',
        anyOf: [
          { type: 'string' },
          { instanceof: 'Function', tsType: 'Function' }
        ]
      },
      DevtoolNamespace: {
        description: "Module namespace to use when interpolating filename template string for the sources array in a generated SourceMap. Defaults to `output.library` if not set. It's useful for avoiding runtime collisions in sourcemaps from multiple webpack projects built as libraries.",
        type: 'string'
      },
      EnabledChunkLoadingTypes: {
        description: 'List of chunk loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/ChunkLoadingType' }
      },
      EnabledLibraryTypes: {
        description: 'List of library types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/LibraryType' }
      },
      EnabledWasmLoadingTypes: {
        description: 'List of wasm loading types enabled for use by entry points.',
        type: 'array',
        items: { '$ref': '#/definitions/WasmLoadingType' }
      },
      Entry: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamic' },
          { '$ref': '#/definitions/EntryStatic' }
        ]
      },
      EntryDescription: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            anyOf: [Array]
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: { '$ref': '#/definitions/EntryItem' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        },
        required: [ 'import' ]
      },
      EntryDescriptionNormalized: {
        description: 'An object with entry point description.',
        type: 'object',
        additionalProperties: false,
        properties: {
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          dependOn: {
            description: 'The entrypoints that the current entrypoint depend on. They must be loaded when this entrypoint is loaded.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          filename: { '$ref': '#/definitions/Filename' },
          import: {
            description: 'Module(s) that are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          library: { '$ref': '#/definitions/LibraryOptions' },
          runtime: { '$ref': '#/definitions/EntryRuntime' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      EntryDynamic: {
        description: 'A Function returning an entry object, an entry string, an entry array or a promise to these things.',
        instanceof: 'Function',
        tsType: '(() => EntryStatic | Promise<EntryStatic>)'
      },
      EntryDynamicNormalized: {
        description: 'A Function returning a Promise resolving to a normalized entry.',
        instanceof: 'Function',
        tsType: '(() => Promise<EntryStaticNormalized>)'
      },
      EntryItem: {
        description: 'Module(s) that are loaded upon startup.',
        anyOf: [
          {
            description: 'All modules are loaded upon startup. The last one is exported.',
            type: 'array',
            items: [Object],
            minItems: 1,
            uniqueItems: true
          },
          {
            description: 'The string is resolved to a module which is loaded upon startup.',
            type: 'string',
            minLength: 1
          }
        ]
      },
      EntryNormalized: {
        description: 'The entry point(s) of the compilation.',
        anyOf: [
          { '$ref': '#/definitions/EntryDynamicNormalized' },
          { '$ref': '#/definitions/EntryStaticNormalized' }
        ]
      },
      EntryObject: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value can be a string, an array or an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An entry point with name.',
          anyOf: [ [Object], [Object] ]
        }
      },
      EntryRuntime: {
        description: 'The name of the runtime chunk. If set a runtime chunk with this name is created or an existing entrypoint is used as runtime.',
        type: 'string',
        minLength: 1
      },
      EntryStatic: {
        description: 'A static entry description.',
        anyOf: [
          { '$ref': '#/definitions/EntryObject' },
          { '$ref': '#/definitions/EntryUnnamed' }
        ]
      },
      EntryStaticNormalized: {
        description: 'Multiple entry bundles are created. The key is the entry name. The value is an entry description object.',
        type: 'object',
        additionalProperties: {
          description: 'An object with entry point description.',
          oneOf: [ [Object] ]
        }
      },
      EntryUnnamed: {
        description: 'An entry point without name.',
        oneOf: [ { '$ref': '#/definitions/EntryItem' } ]
      },
      Environment: {
        description: 'The abilities of the environment where the webpack generated code should run.',
        type: 'object',
        additionalProperties: false,
        properties: {
          arrowFunction: {
            description: "The environment supports arrow functions ('() => { ... }').",
            type: 'boolean'
          },
          bigIntLiteral: {
            description: 'The environment supports BigInt as literal (123n).',
            type: 'boolean'
          },
          const: {
            description: 'The environment supports const and let for variable declarations.',
            type: 'boolean'
          },
          destructuring: {
            description: "The environment supports destructuring ('{ a, b } = obj').",
            type: 'boolean'
          },
          dynamicImport: {
            description: 'The environment supports an async import() function to import EcmaScript modules.',
            type: 'boolean'
          },
          forOf: {
            description: "The environment supports 'for of' iteration ('for (const x of array) { ... }').",
            type: 'boolean'
          },
          module: {
            description: "The environment supports EcmaScript Module syntax to import EcmaScript modules (import ... from '...').",
            type: 'boolean'
          }
        }
      },
      Experiments: {
        description: 'Enables/Disables experiments (experimental features with relax SemVer compatibility).',
        type: 'object',
        additionalProperties: false,
        properties: {
          asset: {
            description: "Allow module type 'asset' to generate assets.",
            type: 'boolean'
          },
          asyncWebAssembly: {
            description: 'Support WebAssembly as asynchronous EcmaScript Module.',
            type: 'boolean'
          },
          outputModule: {
            description: 'Allow output javascript files as module source type.',
            type: 'boolean'
          },
          syncWebAssembly: {
            description: 'Support WebAssembly as synchronous EcmaScript Module (outdated).',
            type: 'boolean'
          },
          topLevelAwait: {
            description: 'Allow using top-level-await in EcmaScript Modules.',
            type: 'boolean'
          }
        }
      },
      ExternalItem: {
        description: "Specify dependency that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          {
            description: 'Every matched dependency becomes external.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          },
          {
            description: 'An exact matched dependency becomes external. The same string is used as external dependency.',
            type: 'string'
          },
          {
            description: 'If an dependency matches exactly a property of the object, the property value is used as dependency.',
            type: 'object',
            additionalProperties: [Object]
          },
          {
            description: 'The function is called on each dependency (`function(context, request, callback(err, result))`).',
            instanceof: 'Function',
            tsType: '((data: { context: string, request: string }, callback: (err?: Error, result?: string) => void) => void)'
          }
        ]
      },
      Externals: {
        description: "Specify dependencies that shouldn't be resolved by webpack, but should become dependencies of the resulting bundle. The kind of the dependency depends on `output.libraryTarget`.",
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/ExternalItem' }
        ]
      },
      ExternalsPresets: {
        description: 'Enable presets of externals for specific targets.',
        type: 'object',
        additionalProperties: false,
        properties: {
          electron: {
            description: "Treat common electron built-in modules in main and preload context like 'electron', 'ipc' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronMain: {
            description: "Treat electron built-in modules in the main context like 'app', 'ipc-main' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronPreload: {
            description: "Treat electron built-in modules in the preload context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          electronRenderer: {
            description: "Treat electron built-in modules in the renderer context like 'web-frame', 'ipc-renderer' or 'shell' as external and load them via require() when used.",
            type: 'boolean'
          },
          node: {
            description: 'Treat node.js built-in modules like fs, path or vm as external and load them via require() when used.',
            type: 'boolean'
          },
          nwjs: {
            description: 'Treat NW.js legacy nw.gui module as external and load it via require() when used.',
            type: 'boolean'
          },
          web: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via import when used (Note that this changes execution order as externals are executed before any other code in the chunk).",
            type: 'boolean'
          },
          webAsync: {
            description: "Treat references to 'http(s)://...' and 'std:...' as external and load them via async import() when used (Note that this external type is an async module, which has various effects on the execution).",
            type: 'boolean'
          }
        }
      },
      ExternalsType: {
        description: "Specifies the default type of externals ('amd*', 'umd*', 'system' and 'jsonp' depend on output.libraryTarget set to the same value).",
        enum: [
          'var',       'module',
          'assign',    'this',
          'window',    'self',
          'global',    'commonjs',
          'commonjs2', 'commonjs-module',
          'amd',       'amd-require',
          'umd',       'umd2',
          'jsonp',     'system',
          'promise',   'import',
          'script'
        ]
      },
      FileCacheOptions: {
        description: 'Options object for persistent file-based caching.',
        type: 'object',
        additionalProperties: false,
        properties: {
          buildDependencies: {
            description: "Dependencies the build depends on (in multiple categories, default categories: 'defaultWebpack').",
            type: 'object',
            additionalProperties: [Object]
          },
          cacheDirectory: {
            description: 'Base directory for the cache (defaults to node_modules/.cache/webpack).',
            type: 'string',
            absolutePath: true
          },
          cacheLocation: {
            description: 'Locations for the cache (defaults to cacheDirectory / name).',
            type: 'string',
            absolutePath: true
          },
          hashAlgorithm: {
            description: 'Algorithm used for generation the hash (see node.js crypto package).',
            type: 'string'
          },
          idleTimeout: {
            description: "Time in ms after which idle period the cache storing should happen (only for store: 'pack' or 'idle').",
            type: 'number',
            minimum: 0
          },
          idleTimeoutForInitialStore: {
            description: "Time in ms after which idle period the initial cache storing should happen (only for store: 'pack' or 'idle').",
            type: 'number',
            minimum: 0
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          name: {
            description: 'Name for the cache. Different names will lead to different coexisting caches.',
            type: 'string'
          },
          store: {
            description: 'When to store data to the filesystem. (pack: Store data when compiler is idle in a single file).',
            enum: [Array]
          },
          type: { description: 'Filesystem caching.', enum: [Array] },
          version: {
            description: "Version of the cache data. Different versions won't allow to reuse the cache and override existing content. Update the version when config changed in a way which doesn't allow to reuse cache. This will invalidate the cache.",
            type: 'string'
          }
        },
        required: [ 'type' ]
      },
      Filename: {
        description: 'Specifies the name of each output file on disk. You must **not** specify an absolute path here! The `output.path` option determines the location on disk the files are written to, filename is used solely for naming the individual files.',
        anyOf: [
          { type: 'string', absolutePath: false, minLength: 1 },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      FilterItemTypes: {
        description: 'Filtering value, regexp or function.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: false },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          }
        ]
      },
      FilterTypes: {
        description: 'Filtering values.',
        cli: { helper: true },
        anyOf: [
          { type: 'array', items: [Object] },
          { '$ref': '#/definitions/FilterItemTypes' }
        ]
      },
      GlobalObject: {
        description: 'An expression which is used to address the global object/scope in runtime code.',
        type: 'string',
        minLength: 1
      },
      HashDigest: { description: 'Digest type used for the hash.', type: 'string' },
      HashDigestLength: {
        description: 'Number of chars which are used for the hash.',
        type: 'number',
        minimum: 1
      },
      HashFunction: {
        description: 'Algorithm used for generation the hash (see node.js crypto package).',
        anyOf: [
          { type: 'string', minLength: 1 },
          {
            instanceof: 'Function',
            tsType: "typeof import('../lib/util/Hash')"
          }
        ]
      },
      HashSalt: {
        description: 'Any string which is added to the hash to salt it.',
        type: 'string',
        minLength: 1
      },
      HotUpdateChunkFilename: {
        description: 'The filename of the Hot Update Chunks. They are inside the output.path directory.',
        type: 'string',
        absolutePath: false
      },
      HotUpdateGlobal: {
        description: 'The global variable used by webpack for loading of hot update chunks.',
        type: 'string'
      },
      HotUpdateMainFilename: {
        description: 'The filename of the Hot Update Main File. It is inside the `output.path` directory.',
        type: 'string',
        absolutePath: false
      },
      IgnoreWarnings: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'Ignore specific warnings.',
          anyOf: [ [Object], [Object], [Object] ]
        }
      },
      IgnoreWarningsNormalized: {
        description: 'Ignore specific warnings.',
        type: 'array',
        items: {
          description: 'A function to select warnings based on the raw warning instance.',
          instanceof: 'Function',
          tsType: "((warning: import('../lib/WebpackError'), compilation: import('../lib/Compilation')) => boolean)"
        }
      },
      Iife: {
        description: "Wrap javascript code into IIFE's to avoid leaking into global scope.",
        type: 'boolean'
      },
      ImportFunctionName: {
        description: 'The name of the native import() function (can be exchanged for a polyfill).',
        type: 'string'
      },
      ImportMetaName: {
        description: 'The name of the native import.meta object (can be exchanged for a polyfill).',
        type: 'string'
      },
      InfrastructureLogging: {
        description: 'Options for infrastructure level logging.',
        type: 'object',
        additionalProperties: false,
        properties: {
          debug: {
            description: 'Enable debug logging for specific loggers.',
            anyOf: [Array]
          },
          level: { description: 'Log level.', enum: [Array] }
        }
      },
      Library: {
        description: 'Make the output files a library, exporting the exports of the entry point.',
        anyOf: [
          { '$ref': '#/definitions/LibraryName' },
          { '$ref': '#/definitions/LibraryOptions' }
        ]
      },
      LibraryCustomUmdCommentObject: {
        description: 'Set explicit comments for `commonjs`, `commonjs2`, `amd`, and `root`.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Set comment for `amd` section in UMD.',
            type: 'string'
          },
          commonjs: {
            description: 'Set comment for `commonjs` (exports) section in UMD.',
            type: 'string'
          },
          commonjs2: {
            description: 'Set comment for `commonjs2` (module.exports) section in UMD.',
            type: 'string'
          },
          root: {
            description: 'Set comment for `root` (global variable) section in UMD.',
            type: 'string'
          }
        }
      },
      LibraryCustomUmdObject: {
        description: 'Description object for all UMD variants of the library name.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: {
            description: 'Name of the exposed AMD library in the UMD.',
            type: 'string',
            minLength: 1
          },
          commonjs: {
            description: 'Name of the exposed commonjs export in the UMD.',
            type: 'string',
            minLength: 1
          },
          root: {
            description: 'Name of the property exposed globally by a UMD library.',
            anyOf: [Array]
          }
        }
      },
      LibraryExport: {
        description: 'Specify which export should be exposed as library.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 }
        ]
      },
      LibraryName: {
        description: 'The name of the library (some types allow unnamed libraries too).',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'string', minLength: 1 },
          { '$ref': '#/definitions/LibraryCustomUmdObject' }
        ]
      },
      LibraryOptions: {
        description: 'Options for library.',
        type: 'object',
        additionalProperties: false,
        properties: {
          auxiliaryComment: { '$ref': '#/definitions/AuxiliaryComment' },
          export: { '$ref': '#/definitions/LibraryExport' },
          name: { '$ref': '#/definitions/LibraryName' },
          type: { '$ref': '#/definitions/LibraryType' },
          umdNamedDefine: { '$ref': '#/definitions/UmdNamedDefine' }
        },
        required: [ 'type' ]
      },
      LibraryType: {
        description: "Type of library (types included by default are 'var', 'module', 'assign', 'this', 'window', 'self', 'global', 'commonjs', 'commonjs2', 'commonjs-module', 'amd', 'amd-require', 'umd', 'umd2', 'jsonp', 'system', but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Loader: {
        description: 'Custom values available in the loader context.',
        type: 'object'
      },
      MemoryCacheOptions: {
        description: 'Options object for in-memory caching.',
        type: 'object',
        additionalProperties: false,
        properties: { type: { description: 'In memory caching.', enum: [Array] } },
        required: [ 'type' ]
      },
      Mode: {
        description: 'Enable production optimizations or development hints.',
        enum: [ 'development', 'production', 'none' ]
      },
      ModuleOptions: {
        description: 'Options affecting the normal modules (`NormalModuleFactory`).',
        type: 'object',
        additionalProperties: false,
        properties: {
          defaultRules: {
            description: 'An array of rules applied by default for modules.',
            cli: [Object],
            oneOf: [Array]
          },
          exprContextCritical: {
            description: 'Enable warnings for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRecursive: {
            description: 'Enable recursive directory lookup for full dynamic dependencies.',
            type: 'boolean'
          },
          exprContextRegExp: {
            description: 'Sets the default regular expression for full dynamic dependencies.',
            anyOf: [Array]
          },
          exprContextRequest: {
            description: 'Set the default request for full dynamic dependencies.',
            type: 'string'
          },
          noParse: {
            description: "Don't parse files matching. It's matched against the full resolved request.",
            anyOf: [Array]
          },
          rules: {
            description: 'An array of rules applied for modules.',
            oneOf: [Array]
          },
          strictExportPresence: {
            description: "Emit errors instead of warnings when imported names don't exist in imported module.",
            type: 'boolean'
          },
          strictThisContextOnImports: {
            description: 'Handle the this context correctly according to the spec for namespace objects.',
            type: 'boolean'
          },
          unknownContextCritical: {
            description: 'Enable warnings when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRecursive: {
            description: 'Enable recursive directory lookup when using the require function in a not statically analyse-able way.',
            type: 'boolean'
          },
          unknownContextRegExp: {
            description: 'Sets the regular expression when using the require function in a not statically analyse-able way.',
            anyOf: [Array]
          },
          unknownContextRequest: {
            description: 'Sets the request when using the require function in a not statically analyse-able way.',
            type: 'string'
          },
          unsafeCache: {
            description: 'Cache the resolving of module requests.',
            anyOf: [Array]
          },
          wrappedContextCritical: {
            description: 'Enable warnings for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRecursive: {
            description: 'Enable recursive directory lookup for partial dynamic dependencies.',
            type: 'boolean'
          },
          wrappedContextRegExp: {
            description: 'Set the inner regular expression for partial dynamic dependencies.',
            instanceof: 'RegExp',
            tsType: 'RegExp'
          }
        }
      },
      Name: {
        description: 'Name of the configuration. Used when loading multiple configurations.',
        type: 'string'
      },
      Node: {
        description: 'Include polyfills or mocks for various node stuff.',
        anyOf: [ { enum: [Array] }, { '$ref': '#/definitions/NodeOptions' } ]
      },
      NodeOptions: {
        description: 'Options object for node compatibility features.',
        type: 'object',
        additionalProperties: false,
        properties: {
          __dirname: {
            description: "Include a polyfill for the '__dirname' variable.",
            enum: [Array]
          },
          __filename: {
            description: "Include a polyfill for the '__filename' variable.",
            enum: [Array]
          },
          global: {
            description: "Include a polyfill for the 'global' variable.",
            type: 'boolean'
          }
        }
      },
      Optimization: {
        description: 'Enables/Disables integrated optimizations.',
        type: 'object',
        additionalProperties: false,
        properties: {
          checkWasmTypes: {
            description: 'Check for incompatible wasm types when importing/exporting from/to ESM.',
            type: 'boolean'
          },
          chunkIds: {
            description: 'Define the algorithm to choose chunk ids (named: readable ids for better debugging, deterministic: numeric hash ids for better long term caching, size: numeric ids focused on minimal initial download size, total-size: numeric ids focused on minimal total download size, false: no algorithm used, as custom one can be provided via plugin).',
            enum: [Array]
          },
          concatenateModules: {
            description: 'Concatenate modules when possible to generate less modules, more efficient code and enable more optimizations by the minimizer.',
            type: 'boolean'
          },
          emitOnErrors: {
            description: 'Emit assets even when errors occur. Critical errors are emitted into the generated code and will cause errors at runtime.',
            type: 'boolean'
          },
          flagIncludedChunks: {
            description: 'Also flag chunks as loaded which contain a subset of the modules.',
            type: 'boolean'
          },
          innerGraph: {
            description: 'Creates a module-internal dependency graph for top level symbols, exports and imports, to improve unused exports detection.',
            type: 'boolean'
          },
          mangleExports: {
            description: 'Rename exports when possible to generate shorter code (depends on optimization.usedExports and optimization.providedExports, true/"deterministic": generate short deterministic names optimized for caching, "size": generate the shortest possible names).',
            anyOf: [Array]
          },
          mangleWasmImports: {
            description: 'Reduce size of WASM by changing imports to shorter strings.',
            type: 'boolean'
          },
          mergeDuplicateChunks: {
            description: 'Merge chunks which contain the same modules.',
            type: 'boolean'
          },
          minimize: {
            description: 'Enable minimizing the output. Uses optimization.minimizer.',
            type: 'boolean'
          },
          minimizer: {
            description: 'Minimizer(s) to use for minimizing the output.',
            type: 'array',
            cli: [Object],
            items: [Object]
          },
          moduleIds: {
            description: 'Define the algorithm to choose module ids (natural: numeric ids in order of usage, named: readable ids for better debugging, hashed: (deprecated) short hashes as ids for better long term caching, deterministic: numeric hash ids for better long term caching, size: numeric ids focused on minimal initial download size, false: no algorithm used, as custom one can be provided via plugin).',
            enum: [Array]
          },
          noEmitOnErrors: {
            description: "Avoid emitting assets when errors occur (deprecated: use 'emitOnErrors' instead).",
            type: 'boolean',
            cli: [Object]
          },
          nodeEnv: {
            description: 'Set process.env.NODE_ENV to a specific value.',
            anyOf: [Array]
          },
          portableRecords: {
            description: 'Generate records with relative paths to be able to move the context folder.',
            type: 'boolean'
          },
          providedExports: {
            description: 'Figure out which exports are provided by modules to generate more efficient code.',
            type: 'boolean'
          },
          realContentHash: {
            description: 'Use real [contenthash] based on final content of the assets.',
            type: 'boolean'
          },
          removeAvailableModules: {
            description: 'Removes modules from chunks when these modules are already included in all parents.',
            type: 'boolean'
          },
          removeEmptyChunks: {
            description: 'Remove chunks which are empty.',
            type: 'boolean'
          },
          runtimeChunk: { '$ref': '#/definitions/OptimizationRuntimeChunk' },
          sideEffects: {
            description: "Skip over modules which contain no side effects when exports are not used (false: disabled, 'flag': only use manually placed side effects flag, true: also analyse source code for side effects).",
            anyOf: [Array]
          },
          splitChunks: {
            description: 'Optimize duplication and caching by splitting chunks by shared modules and cache group.',
            anyOf: [Array]
          },
          usedExports: {
            description: 'Figure out which exports are used by modules to mangle export names, omit unused exports and generate more efficient code (true: analyse used exports for each runtime, "global": analyse exports globally for all runtimes combined).',
            anyOf: [Array]
          }
        }
      },
      OptimizationRuntimeChunk: {
        description: 'Create an additional chunk which contains only the webpack runtime and chunk hash maps.',
        anyOf: [
          { enum: [Array] },
          { type: 'boolean' },
          {
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          }
        ]
      },
      OptimizationRuntimeChunkNormalized: {
        description: 'Create an additional chunk which contains only the webpack runtime and chunk hash maps.',
        anyOf: [
          { enum: [Array] },
          {
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          }
        ]
      },
      OptimizationSplitChunksCacheGroup: {
        description: 'Options object for describing behavior of a cache group selecting modules that should be cached together.',
        type: 'object',
        additionalProperties: false,
        properties: {
          automaticNameDelimiter: {
            description: 'Sets the name delimiter for created chunks.',
            type: 'string',
            minLength: 1
          },
          chunks: {
            description: 'Select chunks for determining cache group content (defaults to "initial", "initial" and "all" requires adding these chunks to the HTML).',
            anyOf: [Array]
          },
          enforce: {
            description: 'Ignore minimum size, minimum chunks and maximum requests and always create chunks for this cache group.',
            type: 'boolean'
          },
          enforceSizeThreshold: {
            description: 'Size threshold at which splitting is enforced and other restrictions (minRemainingSize, maxAsyncRequests, maxInitialRequests) are ignored.',
            oneOf: [Array]
          },
          filename: {
            description: 'Sets the template for the filename for created chunks.',
            anyOf: [Array]
          },
          idHint: {
            description: 'Sets the hint for chunk id.',
            type: 'string'
          },
          maxAsyncRequests: {
            description: 'Maximum number of requests which are accepted for on-demand loading.',
            type: 'number',
            minimum: 1
          },
          maxAsyncSize: {
            description: 'Maximal size hint for the on-demand chunks.',
            oneOf: [Array]
          },
          maxInitialRequests: {
            description: 'Maximum number of initial chunks which are accepted for an entry point.',
            type: 'number',
            minimum: 1
          },
          maxInitialSize: {
            description: 'Maximal size hint for the initial chunks.',
            oneOf: [Array]
          },
          maxSize: {
            description: 'Maximal size hint for the created chunks.',
            oneOf: [Array]
          },
          minChunks: {
            description: "Minimum number of times a module has to be duplicated until it's considered for splitting.",
            type: 'number',
            minimum: 1
          },
          minRemainingSize: {
            description: 'Minimal size for the chunks the stay after moving the modules to a new chunk.',
            oneOf: [Array]
          },
          minSize: {
            description: 'Minimal size for the created chunk.',
            oneOf: [Array]
          },
          name: {
            description: 'Give chunks for this cache group a name (chunks with equal name are merged).',
            anyOf: [Array]
          },
          priority: {
            description: 'Priority of this cache group.',
            type: 'number'
          },
          reuseExistingChunk: {
            description: 'Try to reuse existing chunk (with name) when it has matching modules.',
            type: 'boolean'
          },
          test: {
            description: 'Assign modules to a cache group by module name.',
            anyOf: [Array]
          },
          type: {
            description: 'Assign modules to a cache group by module type.',
            anyOf: [Array]
          },
          usedExports: {
            description: 'Compare used exports when checking common modules. Modules will only be put in the same chunk when exports are equal.',
            type: 'boolean'
          }
        }
      },
      OptimizationSplitChunksGetCacheGroups: {
        description: 'A function returning cache groups.',
        instanceof: 'Function',
        tsType: "((module: import('../lib/Module')) => OptimizationSplitChunksCacheGroup | OptimizationSplitChunksCacheGroup[] | void)"
      },
      OptimizationSplitChunksOptions: {
        description: 'Options object for splitting chunks into smaller chunks.',
        type: 'object',
        additionalProperties: false,
        properties: {
          automaticNameDelimiter: {
            description: 'Sets the name delimiter for created chunks.',
            type: 'string',
            minLength: 1
          },
          cacheGroups: {
            description: "Assign modules to a cache group (modules from different cache groups are tried to keep in separate chunks, default categories: 'default', 'defaultVendors').",
            type: 'object',
            additionalProperties: [Object],
            not: [Object]
          },
          chunks: {
            description: 'Select chunks for determining shared modules (defaults to "async", "initial" and "all" requires adding these chunks to the HTML).',
            anyOf: [Array]
          },
          defaultSizeTypes: {
            description: 'Sets the size types which are used when a number is used for sizes.',
            type: 'array',
            items: [Object],
            minLength: 1
          },
          enforceSizeThreshold: {
            description: 'Size threshold at which splitting is enforced and other restrictions (minRemainingSize, maxAsyncRequests, maxInitialRequests) are ignored.',
            oneOf: [Array]
          },
          fallbackCacheGroup: {
            description: 'Options for modules not selected by any other cache group.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          filename: {
            description: 'Sets the template for the filename for created chunks.',
            anyOf: [Array]
          },
          hidePathInfo: {
            description: 'Prevents exposing path info when creating names for parts splitted by maxSize.',
            type: 'boolean'
          },
          maxAsyncRequests: {
            description: 'Maximum number of requests which are accepted for on-demand loading.',
            type: 'number',
            minimum: 1
          },
          maxAsyncSize: {
            description: 'Maximal size hint for the on-demand chunks.',
            oneOf: [Array]
          },
          maxInitialRequests: {
            description: 'Maximum number of initial chunks which are accepted for an entry point.',
            type: 'number',
            minimum: 1
          },
          maxInitialSize: {
            description: 'Maximal size hint for the initial chunks.',
            oneOf: [Array]
          },
          maxSize: {
            description: 'Maximal size hint for the created chunks.',
            oneOf: [Array]
          },
          minChunks: {
            description: "Minimum number of times a module has to be duplicated until it's considered for splitting.",
            type: 'number',
            minimum: 1
          },
          minRemainingSize: {
            description: 'Minimal size for the chunks the stay after moving the modules to a new chunk.',
            oneOf: [Array]
          },
          minSize: {
            description: 'Minimal size for the created chunks.',
            oneOf: [Array]
          },
          name: {
            description: 'Give chunks created a name (chunks with equal name are merged).',
            anyOf: [Array]
          },
          usedExports: {
            description: 'Compare used exports when checking common modules. Modules will only be put in the same chunk when exports are equal.',
            type: 'boolean'
          }
        }
      },
      OptimizationSplitChunksSizes: {
        description: 'Size description for limits.',
        anyOf: [
          {
            description: 'Size of the javascript part of the chunk.',
            type: 'number',
            minimum: 0
          },
          {
            description: 'Specify size limits per size type.',
            type: 'object',
            additionalProperties: [Object]
          }
        ]
      },
      Output: {
        description: 'Options affecting the output of the compilation. `output` options tell webpack how to write the compiled files to disk.',
        type: 'object',
        additionalProperties: false,
        properties: {
          assetModuleFilename: { '$ref': '#/definitions/AssetModuleFilename' },
          auxiliaryComment: { cli: [Object], oneOf: [Array] },
          charset: { '$ref': '#/definitions/Charset' },
          chunkFilename: { '$ref': '#/definitions/ChunkFilename' },
          chunkFormat: { '$ref': '#/definitions/ChunkFormat' },
          chunkLoadTimeout: { '$ref': '#/definitions/ChunkLoadTimeout' },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          chunkLoadingGlobal: { '$ref': '#/definitions/ChunkLoadingGlobal' },
          compareBeforeEmit: { '$ref': '#/definitions/CompareBeforeEmit' },
          crossOriginLoading: { '$ref': '#/definitions/CrossOriginLoading' },
          devtoolFallbackModuleFilenameTemplate: {
            '$ref': '#/definitions/DevtoolFallbackModuleFilenameTemplate'
          },
          devtoolModuleFilenameTemplate: { '$ref': '#/definitions/DevtoolModuleFilenameTemplate' },
          devtoolNamespace: { '$ref': '#/definitions/DevtoolNamespace' },
          enabledChunkLoadingTypes: { '$ref': '#/definitions/EnabledChunkLoadingTypes' },
          enabledLibraryTypes: { '$ref': '#/definitions/EnabledLibraryTypes' },
          enabledWasmLoadingTypes: { '$ref': '#/definitions/EnabledWasmLoadingTypes' },
          environment: { '$ref': '#/definitions/Environment' },
          filename: { '$ref': '#/definitions/Filename' },
          globalObject: { '$ref': '#/definitions/GlobalObject' },
          hashDigest: { '$ref': '#/definitions/HashDigest' },
          hashDigestLength: { '$ref': '#/definitions/HashDigestLength' },
          hashFunction: { '$ref': '#/definitions/HashFunction' },
          hashSalt: { '$ref': '#/definitions/HashSalt' },
          hotUpdateChunkFilename: { '$ref': '#/definitions/HotUpdateChunkFilename' },
          hotUpdateGlobal: { '$ref': '#/definitions/HotUpdateGlobal' },
          hotUpdateMainFilename: { '$ref': '#/definitions/HotUpdateMainFilename' },
          iife: { '$ref': '#/definitions/Iife' },
          importFunctionName: { '$ref': '#/definitions/ImportFunctionName' },
          importMetaName: { '$ref': '#/definitions/ImportMetaName' },
          library: { '$ref': '#/definitions/Library' },
          libraryExport: { cli: [Object], oneOf: [Array] },
          libraryTarget: { cli: [Object], oneOf: [Array] },
          module: { '$ref': '#/definitions/OutputModule' },
          path: { '$ref': '#/definitions/Path' },
          pathinfo: { '$ref': '#/definitions/Pathinfo' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          scriptType: { '$ref': '#/definitions/ScriptType' },
          sourceMapFilename: { '$ref': '#/definitions/SourceMapFilename' },
          sourcePrefix: { '$ref': '#/definitions/SourcePrefix' },
          strictModuleExceptionHandling: { '$ref': '#/definitions/StrictModuleExceptionHandling' },
          umdNamedDefine: { cli: [Object], oneOf: [Array] },
          uniqueName: { '$ref': '#/definitions/UniqueName' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' },
          webassemblyModuleFilename: { '$ref': '#/definitions/WebassemblyModuleFilename' },
          workerChunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          workerWasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      OutputModule: {
        description: 'Output javascript files as module source type.',
        type: 'boolean'
      },
      OutputNormalized: {
        description: 'Normalized options affecting the output of the compilation. `output` options tell webpack how to write the compiled files to disk.',
        type: 'object',
        additionalProperties: false,
        properties: {
          assetModuleFilename: { '$ref': '#/definitions/AssetModuleFilename' },
          charset: { '$ref': '#/definitions/Charset' },
          chunkFilename: { '$ref': '#/definitions/ChunkFilename' },
          chunkFormat: { '$ref': '#/definitions/ChunkFormat' },
          chunkLoadTimeout: { '$ref': '#/definitions/ChunkLoadTimeout' },
          chunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          chunkLoadingGlobal: { '$ref': '#/definitions/ChunkLoadingGlobal' },
          compareBeforeEmit: { '$ref': '#/definitions/CompareBeforeEmit' },
          crossOriginLoading: { '$ref': '#/definitions/CrossOriginLoading' },
          devtoolFallbackModuleFilenameTemplate: {
            '$ref': '#/definitions/DevtoolFallbackModuleFilenameTemplate'
          },
          devtoolModuleFilenameTemplate: { '$ref': '#/definitions/DevtoolModuleFilenameTemplate' },
          devtoolNamespace: { '$ref': '#/definitions/DevtoolNamespace' },
          enabledChunkLoadingTypes: { '$ref': '#/definitions/EnabledChunkLoadingTypes' },
          enabledLibraryTypes: { '$ref': '#/definitions/EnabledLibraryTypes' },
          enabledWasmLoadingTypes: { '$ref': '#/definitions/EnabledWasmLoadingTypes' },
          environment: { '$ref': '#/definitions/Environment' },
          filename: { '$ref': '#/definitions/Filename' },
          globalObject: { '$ref': '#/definitions/GlobalObject' },
          hashDigest: { '$ref': '#/definitions/HashDigest' },
          hashDigestLength: { '$ref': '#/definitions/HashDigestLength' },
          hashFunction: { '$ref': '#/definitions/HashFunction' },
          hashSalt: { '$ref': '#/definitions/HashSalt' },
          hotUpdateChunkFilename: { '$ref': '#/definitions/HotUpdateChunkFilename' },
          hotUpdateGlobal: { '$ref': '#/definitions/HotUpdateGlobal' },
          hotUpdateMainFilename: { '$ref': '#/definitions/HotUpdateMainFilename' },
          iife: { '$ref': '#/definitions/Iife' },
          importFunctionName: { '$ref': '#/definitions/ImportFunctionName' },
          importMetaName: { '$ref': '#/definitions/ImportMetaName' },
          library: { '$ref': '#/definitions/LibraryOptions' },
          module: { '$ref': '#/definitions/OutputModule' },
          path: { '$ref': '#/definitions/Path' },
          pathinfo: { '$ref': '#/definitions/Pathinfo' },
          publicPath: { '$ref': '#/definitions/PublicPath' },
          scriptType: { '$ref': '#/definitions/ScriptType' },
          sourceMapFilename: { '$ref': '#/definitions/SourceMapFilename' },
          sourcePrefix: { '$ref': '#/definitions/SourcePrefix' },
          strictModuleExceptionHandling: { '$ref': '#/definitions/StrictModuleExceptionHandling' },
          uniqueName: { '$ref': '#/definitions/UniqueName' },
          wasmLoading: { '$ref': '#/definitions/WasmLoading' },
          webassemblyModuleFilename: { '$ref': '#/definitions/WebassemblyModuleFilename' },
          workerChunkLoading: { '$ref': '#/definitions/ChunkLoading' },
          workerWasmLoading: { '$ref': '#/definitions/WasmLoading' }
        }
      },
      Parallelism: {
        description: 'The number of parallel processed modules in the compilation.',
        type: 'number',
        minimum: 1
      },
      Path: {
        description: 'The output directory as **absolute path** (required).',
        type: 'string',
        absolutePath: true
      },
      Pathinfo: {
        description: 'Include comments with information about the modules.',
        anyOf: [ { enum: [Array] }, { type: 'boolean' } ]
      },
      Performance: {
        description: 'Configuration for web performance recommendations.',
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/PerformanceOptions' }
        ]
      },
      PerformanceOptions: {
        description: 'Configuration object for web performance recommendations.',
        type: 'object',
        additionalProperties: false,
        properties: {
          assetFilter: {
            description: 'Filter function to select assets that are checked.',
            instanceof: 'Function',
            tsType: 'Function'
          },
          hints: {
            description: 'Sets the format of the hints: warnings, errors or nothing at all.',
            enum: [Array]
          },
          maxAssetSize: {
            description: 'File size limit (in bytes) when exceeded, that webpack will provide performance hints.',
            type: 'number'
          },
          maxEntrypointSize: {
            description: 'Total size of an entry point (in bytes).',
            type: 'number'
          }
        }
      },
      Plugins: {
        description: 'Add additional plugins to the compiler.',
        type: 'array',
        items: {
          description: 'Plugin of type object or instanceof Function.',
          anyOf: [ [Object], [Object] ]
        }
      },
      Profile: {
        description: 'Capture timing information for each module.',
        type: 'boolean'
      },
      PublicPath: {
        description: 'The `publicPath` specifies the public URL address of the output files when referenced in a browser.',
        anyOf: [
          { enum: [Array] },
          { type: 'string' },
          {
            instanceof: 'Function',
            tsType: '((pathData: import("../lib/Compilation").PathData, assetInfo?: import("../lib/Compilation").AssetInfo) => string)'
          }
        ]
      },
      RecordsInputPath: {
        description: 'Store compiler state to a json file.',
        anyOf: [ { enum: [Array] }, { type: 'string', absolutePath: true } ]
      },
      RecordsOutputPath: {
        description: 'Load compiler state from a json file.',
        anyOf: [ { enum: [Array] }, { type: 'string', absolutePath: true } ]
      },
      RecordsPath: {
        description: 'Store/Load compiler state from/to a json file. This will result in persistent ids of modules and chunks. An absolute path is expected. `recordsPath` is used for `recordsInputPath` and `recordsOutputPath` if they left undefined.',
        anyOf: [ { enum: [Array] }, { type: 'string', absolutePath: true } ]
      },
      Resolve: {
        description: 'Options for the resolver.',
        oneOf: [ { '$ref': '#/definitions/ResolveOptions' } ]
      },
      ResolveAlias: {
        description: 'Redirect module requests.',
        anyOf: [
          { type: 'array', items: [Object] },
          { type: 'object', additionalProperties: [Object] }
        ]
      },
      ResolveLoader: {
        description: 'Options for the resolver when resolving loaders.',
        oneOf: [ { '$ref': '#/definitions/ResolveOptions' } ]
      },
      ResolveOptions: {
        description: 'Options object for resolving requests.',
        type: 'object',
        additionalProperties: false,
        properties: {
          alias: { '$ref': '#/definitions/ResolveAlias' },
          aliasFields: {
            description: 'Fields in the description file (usually package.json) which are used to redirect requests inside the module.',
            type: 'array',
            items: [Object]
          },
          byDependency: {
            description: 'Extra resolve options per dependency category. Typical categories are "commonjs", "amd", "esm".',
            type: 'object',
            additionalProperties: [Object]
          },
          cache: {
            description: 'Enable caching of successfully resolved requests (cache entries are revalidated).',
            type: 'boolean'
          },
          cachePredicate: {
            description: 'Predicate function to decide which requests should be cached.',
            instanceof: 'Function',
            tsType: "((request: import('enhanced-resolve').ResolveRequest) => boolean)"
          },
          cacheWithContext: {
            description: 'Include the context information in the cache identifier when caching.',
            type: 'boolean'
          },
          conditionNames: {
            description: 'Condition names for exports field entry point.',
            type: 'array',
            items: [Object]
          },
          descriptionFiles: {
            description: 'Filenames used to find a description file (like a package.json).',
            type: 'array',
            items: [Object]
          },
          enforceExtension: {
            description: 'Enforce the resolver to use one of the extensions from the extensions option (User must specify requests without extension).',
            type: 'boolean'
          },
          exportsFields: {
            description: 'Field names from the description file (usually package.json) which are used to provide entry points of a package.',
            type: 'array',
            items: [Object]
          },
          extensions: {
            description: 'Extensions added to the request when trying to find the file.',
            type: 'array',
            items: [Object]
          },
          fallback: {
            description: 'Redirect module requests when normal resolving fails.',
            oneOf: [Array]
          },
          fileSystem: {
            description: 'Filesystem for the resolver.',
            tsType: "(import('../lib/util/fs').InputFileSystem)"
          },
          fullySpecified: {
            description: "Treats the request specified by the user as fully specified, meaning no extensions are added and the mainFiles in directories are not resolved (This doesn't affect requests from mainFields, aliasFields or aliases).",
            type: 'boolean'
          },
          importsFields: {
            description: 'Field names from the description file (usually package.json) which are used to provide internal request of a package (requests starting with # are considered as internal).',
            type: 'array',
            items: [Object]
          },
          mainFields: {
            description: 'Field names from the description file (package.json) which are used to find the default entry point.',
            type: 'array',
            items: [Object]
          },
          mainFiles: {
            description: 'Filenames used to find the default entry point if there is no description file or main field.',
            type: 'array',
            items: [Object]
          },
          modules: {
            description: 'Folder names or directory paths where to find modules.',
            type: 'array',
            items: [Object]
          },
          plugins: {
            description: 'Plugins for the resolver.',
            type: 'array',
            cli: [Object],
            items: [Object]
          },
          preferRelative: {
            description: 'Prefer to resolve module requests as relative request and fallback to resolving as module.',
            type: 'boolean'
          },
          resolver: {
            description: 'Custom resolver.',
            tsType: "(import('enhanced-resolve').Resolver)"
          },
          restrictions: {
            description: 'A list of resolve restrictions. Resolve results must fulfill all of these restrictions to resolve successfully. Other resolve paths are taken when restrictions are not met.',
            type: 'array',
            items: [Object]
          },
          roots: {
            description: "A list of directories in which requests that are server-relative URLs (starting with '/') are resolved. On non-windows system these requests are tried to resolve as absolute path first.",
            type: 'array',
            items: [Object]
          },
          symlinks: {
            description: 'Enable resolving symlinks to the original location.',
            type: 'boolean'
          },
          unsafeCache: {
            description: 'Enable caching of successfully resolved requests (cache entries are not revalidated).',
            anyOf: [Array]
          },
          useSyncFileSystemCalls: {
            description: 'Use synchronous filesystem calls for the resolver.',
            type: 'boolean'
          }
        }
      },
      ResolvePluginInstance: {
        description: 'Plugin instance.',
        type: 'object',
        additionalProperties: true,
        properties: {
          apply: {
            description: 'The run point of the plugin, required method.',
            instanceof: 'Function',
            tsType: "(resolver: import('enhanced-resolve').Resolver) => void"
          }
        },
        required: [ 'apply' ]
      },
      RuleSetCondition: {
        description: 'A condition matcher.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', minLength: 1 },
          {
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          },
          { '$ref': '#/definitions/RuleSetConditions' }
        ]
      },
      RuleSetConditionAbsolute: {
        description: 'A condition matcher matching an absolute path.',
        cli: { helper: true },
        anyOf: [
          { instanceof: 'RegExp', tsType: 'RegExp' },
          { type: 'string', absolutePath: true },
          {
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          {
            instanceof: 'Function',
            tsType: '((value: string) => boolean)'
          },
          { '$ref': '#/definitions/RuleSetConditionsAbsolute' }
        ]
      },
      RuleSetConditionOrConditions: {
        description: 'One or multiple rule conditions.',
        cli: { helper: true },
        anyOf: [
          { '$ref': '#/definitions/RuleSetCondition' },
          { '$ref': '#/definitions/RuleSetConditions' }
        ]
      },
      RuleSetConditionOrConditionsAbsolute: {
        description: 'One or multiple rule conditions matching an absolute path.',
        cli: { helper: true },
        anyOf: [
          { '$ref': '#/definitions/RuleSetConditionAbsolute' },
          { '$ref': '#/definitions/RuleSetConditionsAbsolute' }
        ]
      },
      RuleSetConditions: {
        description: 'A list of rule conditions.',
        type: 'array',
        items: { description: 'A rule condition.', oneOf: [ [Object] ] }
      },
      RuleSetConditionsAbsolute: {
        description: 'A list of rule conditions matching an absolute path.',
        type: 'array',
        items: {
          description: 'A rule condition matching an absolute path.',
          oneOf: [ [Object] ]
        }
      },
      RuleSetLoader: {
        description: 'A loader request.',
        type: 'string',
        minLength: 1
      },
      RuleSetLoaderOptions: {
        description: 'Options passed to a loader.',
        anyOf: [ { type: 'string' }, { type: 'object' } ]
      },
      RuleSetRule: {
        description: 'A rule description with conditions and effects for modules.',
        type: 'object',
        additionalProperties: false,
        properties: {
          compiler: {
            description: 'Match the child compiler name.',
            oneOf: [Array]
          },
          dependency: { description: 'Match dependency type.', oneOf: [Array] },
          descriptionData: {
            description: 'Match values of properties in the description file (usually package.json).',
            type: 'object',
            additionalProperties: [Object]
          },
          enforce: {
            description: 'Enforce this rule as pre or post step.',
            enum: [Array]
          },
          exclude: {
            description: 'Shortcut for resource.exclude.',
            oneOf: [Array]
          },
          generator: {
            description: 'The options for the module generator.',
            type: 'object'
          },
          include: {
            description: 'Shortcut for resource.include.',
            oneOf: [Array]
          },
          issuer: {
            description: 'Match the issuer of the module (The module pointing to this module).',
            oneOf: [Array]
          },
          loader: { description: 'Shortcut for use.loader.', oneOf: [Array] },
          mimetype: {
            description: 'Match module mimetype when load from Data URI.',
            oneOf: [Array]
          },
          oneOf: {
            description: 'Only execute the first matching rule in this array.',
            type: 'array',
            items: [Object]
          },
          options: {
            description: 'Shortcut for use.options.',
            cli: [Object],
            oneOf: [Array]
          },
          parser: {
            description: 'Options for parsing.',
            type: 'object',
            additionalProperties: true
          },
          realResource: {
            description: 'Match the real resource path of the module.',
            oneOf: [Array]
          },
          resolve: {
            description: 'Options for the resolver.',
            type: 'object',
            oneOf: [Array]
          },
          resource: {
            description: 'Match the resource path of the module.',
            oneOf: [Array]
          },
          resourceFragment: {
            description: 'Match the resource fragment of the module.',
            oneOf: [Array]
          },
          resourceQuery: {
            description: 'Match the resource query of the module.',
            oneOf: [Array]
          },
          rules: {
            description: 'Match and execute these rules when this rule is matched.',
            type: 'array',
            items: [Object]
          },
          sideEffects: {
            description: 'Flags a module as with or without side effects.',
            type: 'boolean'
          },
          test: {
            description: 'Shortcut for resource.test.',
            oneOf: [Array]
          },
          type: {
            description: 'Module type to use for the module.',
            type: 'string'
          },
          use: {
            description: 'Modifiers applied to the module when rule is matched.',
            oneOf: [Array]
          }
        }
      },
      RuleSetRules: {
        description: 'A list of rules.',
        type: 'array',
        items: { description: 'A rule.', anyOf: [ [Object], [Object] ] }
      },
      RuleSetUse: {
        description: 'A list of descriptions of loaders applied.',
        anyOf: [
          { type: 'array', items: [Object] },
          {
            instanceof: 'Function',
            tsType: '((data: { resource: string, realResource: string, resourceQuery: string, issuer: string, compiler: string }) => RuleSetUseItem[])'
          },
          { '$ref': '#/definitions/RuleSetUseItem' }
        ]
      },
      RuleSetUseItem: {
        description: 'A description of an applied loader.',
        anyOf: [
          {
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          {
            instanceof: 'Function',
            tsType: '((data: object) => RuleSetUseItem|RuleSetUseItem[])'
          },
          { '$ref': '#/definitions/RuleSetLoader' }
        ]
      },
      ScriptType: {
        description: 'This option enables loading async chunks via a custom script type, such as script type="module".',
        enum: [ false, 'text/javascript', 'module' ]
      },
      SnapshotOptions: {
        description: 'Options affecting how file system snapshots are created and validated.',
        type: 'object',
        additionalProperties: false,
        properties: {
          buildDependencies: {
            description: 'Options for snapshotting build dependencies to determine if the whole cache need to be invalidated.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          immutablePaths: {
            description: 'List of paths that are managed by a package manager and contain a version or hash in its path so all files are immutable.',
            type: 'array',
            items: [Object]
          },
          managedPaths: {
            description: 'List of paths that are managed by a package manager and can be trusted to not be modified otherwise.',
            type: 'array',
            items: [Object]
          },
          module: {
            description: 'Options for snapshotting dependencies of modules to determine if they need to be built again.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          resolve: {
            description: 'Options for snapshotting dependencies of request resolving to determine if requests need to be re-resolved.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          },
          resolveBuildDependencies: {
            description: 'Options for snapshotting the resolving of build dependencies to determine if the build dependencies need to be re-resolved.',
            type: 'object',
            additionalProperties: false,
            properties: [Object]
          }
        }
      },
      SourceMapFilename: {
        description: 'The filename of the SourceMaps for the JavaScript files. They are inside the `output.path` directory.',
        type: 'string',
        absolutePath: false
      },
      SourcePrefix: {
        description: 'Prefixes every line of the source in the bundle with this string.',
        type: 'string'
      },
      StatsOptions: {
        description: 'Stats options object.',
        type: 'object',
        additionalProperties: false,
        properties: {
          all: {
            description: 'Fallback value for stats options when an option is not defined (has precedence over local webpack defaults).',
            type: 'boolean'
          },
          assets: { description: 'Add assets information.', type: 'boolean' },
          assetsSort: {
            description: 'Sort the assets by that field.',
            type: 'string'
          },
          assetsSpace: {
            description: 'Space to display assets (groups will be collapsed to fit this space).',
            type: 'number'
          },
          builtAt: {
            description: 'Add built at time information.',
            type: 'boolean'
          },
          cached: {
            description: "Add information about cached (not built) modules (deprecated: use 'cachedModules' instead).",
            type: 'boolean'
          },
          cachedAssets: {
            description: 'Show cached assets (setting this to `false` only shows emitted files).',
            type: 'boolean'
          },
          cachedModules: {
            description: 'Add information about cached (not built) modules.',
            type: 'boolean'
          },
          children: { description: 'Add children information.', type: 'boolean' },
          chunkGroupAuxiliary: {
            description: 'Display auxiliary assets in chunk groups.',
            type: 'boolean'
          },
          chunkGroupChildren: {
            description: 'Display children of chunk groups.',
            type: 'boolean'
          },
          chunkGroupMaxAssets: {
            description: 'Limit of assets displayed in chunk groups.',
            type: 'number'
          },
          chunkGroups: {
            description: 'Display all chunk groups with the corresponding bundles.',
            type: 'boolean'
          },
          chunkModules: {
            description: 'Add built modules information to chunk information.',
            type: 'boolean'
          },
          chunkOrigins: {
            description: 'Add the origins of chunks and chunk merging info.',
            type: 'boolean'
          },
          chunkRelations: {
            description: 'Add information about parent, children and sibling chunks to chunk information.',
            type: 'boolean'
          },
          chunks: { description: 'Add chunk information.', type: 'boolean' },
          chunksSort: {
            description: 'Sort the chunks by that field.',
            type: 'string'
          },
          colors: {
            description: 'Enables/Disables colorful output.',
            anyOf: [Array]
          },
          context: {
            description: 'Context directory for request shortening.',
            type: 'string',
            absolutePath: true
          },
          dependentModules: {
            description: 'Show chunk modules that are dependencies of other modules of the chunk.',
            type: 'boolean'
          },
          depth: {
            description: 'Add module depth in module graph.',
            type: 'boolean'
          },
          entrypoints: {
            description: 'Display the entry points with the corresponding bundles.',
            anyOf: [Array]
          },
          env: { description: 'Add --env information.', type: 'boolean' },
          errorDetails: {
            description: 'Add details to errors (like resolving log).',
            type: 'boolean'
          },
          errorStack: {
            description: 'Add internal stack trace to errors.',
            type: 'boolean'
          },
          errors: { description: 'Add errors.', type: 'boolean' },
          errorsCount: { description: 'Add errors count.', type: 'boolean' },
          exclude: {
            description: 'Please use excludeModules instead.',
            cli: [Object],
            anyOf: [Array]
          },
          excludeAssets: {
            description: 'Suppress assets that match the specified filters. Filters can be Strings, RegExps or Functions.',
            oneOf: [Array]
          },
          excludeModules: {
            description: 'Suppress modules that match the specified filters. Filters can be Strings, RegExps, Booleans or Functions.',
            anyOf: [Array]
          },
          groupAssetsByChunk: {
            description: 'Group assets by how their are related to chunks.',
            type: 'boolean'
          },
          groupAssetsByEmitStatus: {
            description: 'Group assets by their status (emitted, compared for emit or cached).',
            type: 'boolean'
          },
          groupAssetsByExtension: {
            description: 'Group assets by their extension.',
            type: 'boolean'
          },
          groupAssetsByInfo: {
            description: 'Group assets by their asset info (immutable, development, hotModuleReplacement, etc).',
            type: 'boolean'
          },
          groupAssetsByPath: {
            description: 'Group assets by their path.',
            type: 'boolean'
          },
          groupModulesByAttributes: {
            description: 'Group modules by their attributes (errors, warnings, assets, optional, orphan, or dependent).',
            type: 'boolean'
          },
          groupModulesByCacheStatus: {
            description: 'Group modules by their status (cached or built and cacheable).',
            type: 'boolean'
          },
          groupModulesByExtension: {
            description: 'Group modules by their extension.',
            type: 'boolean'
          },
          groupModulesByPath: {
            description: 'Group modules by their path.',
            type: 'boolean'
          },
          hash: {
            description: 'Add the hash of the compilation.',
            type: 'boolean'
          },
          ids: { description: 'Add ids.', type: 'boolean' },
          logging: { description: 'Add logging output.', anyOf: [Array] },
          loggingDebug: {
            description: 'Include debug logging of specified loggers (i. e. for plugins or loaders). Filters can be Strings, RegExps or Functions.',
            anyOf: [Array]
          },
          loggingTrace: {
            description: 'Add stack traces to logging output.',
            type: 'boolean'
          },
          moduleAssets: {
            description: 'Add information about assets inside modules.',
            type: 'boolean'
          },
          moduleTrace: {
            description: 'Add dependencies and origin of warnings/errors.',
            type: 'boolean'
          },
          modules: {
            description: 'Add built modules information.',
            type: 'boolean'
          },
          modulesSort: {
            description: 'Sort the modules by that field.',
            type: 'string'
          },
          modulesSpace: {
            description: 'Space to display modules (groups will be collapsed to fit this space, values is in number of modules/groups).',
            type: 'number'
          },
          nestedModules: {
            description: 'Add information about modules nested in other modules (like with module concatenation).',
            type: 'boolean'
          },
          optimizationBailout: {
            description: 'Show reasons why optimization bailed out for modules.',
            type: 'boolean'
          },
          orphanModules: {
            description: 'Add information about orphan modules.',
            type: 'boolean'
          },
          outputPath: {
            description: 'Add output path information.',
            type: 'boolean'
          },
          performance: {
            description: 'Add performance hint flags.',
            type: 'boolean'
          },
          preset: {
            description: 'Preset for the default values.',
            anyOf: [Array]
          },
          providedExports: {
            description: 'Show exports provided by modules.',
            type: 'boolean'
          },
          publicPath: {
            description: 'Add public path information.',
            type: 'boolean'
          },
          reasons: {
            description: 'Add information about the reasons why modules are included.',
            type: 'boolean'
          },
          relatedAssets: {
            description: 'Add information about assets that are related to other assets (like SourceMaps for assets).',
            type: 'boolean'
          },
          runtime: {
            description: "Add information about runtime modules (deprecated: use 'runtimeModules' instead).",
            type: 'boolean'
          },
          runtimeModules: {
            description: 'Add information about runtime modules.',
            type: 'boolean'
          },
          source: {
            description: 'Add the source code of modules.',
            type: 'boolean'
          },
          timings: { description: 'Add timing information.', type: 'boolean' },
          usedExports: {
            description: 'Show exports used by modules.',
            type: 'boolean'
          },
          version: {
            description: 'Add webpack version information.',
            type: 'boolean'
          },
          warnings: { description: 'Add warnings.', type: 'boolean' },
          warningsCount: { description: 'Add warnings count.', type: 'boolean' },
          warningsFilter: {
            description: 'Suppress listing warnings that match the specified filters (they will still be counted). Filters can be Strings, RegExps or Functions.',
            oneOf: [Array]
          }
        }
      },
      StatsValue: {
        description: 'Stats options object or preset name.',
        anyOf: [
          { enum: [Array] },
          { type: 'boolean' },
          { '$ref': '#/definitions/StatsOptions' }
        ]
      },
      StrictModuleExceptionHandling: {
        description: 'Handles exceptions in module loading correctly at a performance cost.',
        type: 'boolean'
      },
      Target: {
        description: 'Environment to build for. An array of environments to build for all of them when possible.',
        anyOf: [
          { type: 'array', items: [Object], minItems: 1 },
          { enum: [Array] },
          { type: 'string', minLength: 1 }
        ]
      },
      UmdNamedDefine: {
        description: 'If `output.libraryTarget` is set to umd and `output.library` is set, setting this to true will name the AMD module.',
        type: 'boolean'
      },
      UniqueName: {
        description: 'A unique name of the webpack build to avoid multiple webpack runtimes to conflict when using globals.',
        type: 'string',
        minLength: 1
      },
      WasmLoading: {
        description: "The method of loading WebAssembly Modules (methods included by default are 'fetch' (web/WebWorker), 'async-node' (node.js), but others might be added by plugins).",
        anyOf: [
          { enum: [Array] },
          { '$ref': '#/definitions/WasmLoadingType' }
        ]
      },
      WasmLoadingType: {
        description: "The method of loading WebAssembly Modules (methods included by default are 'fetch' (web/WebWorker), 'async-node' (node.js), but others might be added by plugins).",
        anyOf: [ { enum: [Array] }, { type: 'string' } ]
      },
      Watch: {
        description: 'Enter watch mode, which rebuilds on file change.',
        type: 'boolean'
      },
      WatchOptions: {
        description: 'Options for the watcher.',
        type: 'object',
        additionalProperties: false,
        properties: {
          aggregateTimeout: {
            description: 'Delay the rebuilt after the first change. Value is a time in ms.',
            type: 'number'
          },
          followSymlinks: {
            description: "Resolve symlinks and watch symlink and real file. This is usually not needed as webpack already resolves symlinks ('resolve.symlinks').",
            type: 'boolean'
          },
          ignored: {
            description: 'Ignore some files from watching (glob pattern or regexp).',
            anyOf: [Array]
          },
          poll: {
            description: 'Enable polling mode for watching.',
            anyOf: [Array]
          },
          stdin: {
            description: 'Stop watching when stdin stream has ended.',
            type: 'boolean'
          }
        }
      },
      WebassemblyModuleFilename: {
        description: 'The filename of WebAssembly modules as relative path inside the `output.path` directory.',
        type: 'string',
        absolutePath: false
      },
      WebpackOptionsNormalized: {
        description: 'Normalized webpack options object.',
        type: 'object',
        additionalProperties: false,
        properties: {
          amd: { '$ref': '#/definitions/Amd' },
          bail: { '$ref': '#/definitions/Bail' },
          cache: { '$ref': '#/definitions/CacheOptionsNormalized' },
          context: { '$ref': '#/definitions/Context' },
          dependencies: { '$ref': '#/definitions/Dependencies' },
          devServer: { '$ref': '#/definitions/DevServer' },
          devtool: { '$ref': '#/definitions/DevTool' },
          entry: { '$ref': '#/definitions/EntryNormalized' },
          experiments: { '$ref': '#/definitions/Experiments' },
          externals: { '$ref': '#/definitions/Externals' },
          externalsPresets: { '$ref': '#/definitions/ExternalsPresets' },
          externalsType: { '$ref': '#/definitions/ExternalsType' },
          ignoreWarnings: { '$ref': '#/definitions/IgnoreWarningsNormalized' },
          infrastructureLogging: { '$ref': '#/definitions/InfrastructureLogging' },
          loader: { '$ref': '#/definitions/Loader' },
          mode: { '$ref': '#/definitions/Mode' },
          module: { '$ref': '#/definitions/ModuleOptions' },
          name: { '$ref': '#/definitions/Name' },
          node: { '$ref': '#/definitions/Node' },
          optimization: { '$ref': '#/definitions/Optimization' },
          output: { '$ref': '#/definitions/OutputNormalized' },
          parallelism: { '$ref': '#/definitions/Parallelism' },
          performance: { '$ref': '#/definitions/Performance' },
          plugins: { '$ref': '#/definitions/Plugins' },
          profile: { '$ref': '#/definitions/Profile' },
          recordsInputPath: { '$ref': '#/definitions/RecordsInputPath' },
          recordsOutputPath: { '$ref': '#/definitions/RecordsOutputPath' },
          resolve: { '$ref': '#/definitions/Resolve' },
          resolveLoader: { '$ref': '#/definitions/ResolveLoader' },
          snapshot: { '$ref': '#/definitions/SnapshotOptions' },
          stats: { '$ref': '#/definitions/StatsValue' },
          target: { '$ref': '#/definitions/Target' },
          watch: { '$ref': '#/definitions/Watch' },
          watchOptions: { '$ref': '#/definitions/WatchOptions' }
        },
        required: [
          'cache',
          'snapshot',
          'entry',
          'experiments',
          'externals',
          'externalsPresets',
          'infrastructureLogging',
          'module',
          'node',
          'optimization',
          'output',
          'plugins',
          'resolve',
          'resolveLoader',
          'stats',
          'watchOptions'
        ]
      },
      WebpackPluginFunction: {
        description: 'Function acting as plugin.',
        instanceof: 'Function',
        tsType: "(this: import('../lib/Compiler'), compiler: import('../lib/Compiler')) => void"
      },
      WebpackPluginInstance: {
        description: 'Plugin instance.',
        type: 'object',
        additionalProperties: true,
        properties: {
          apply: {
            description: 'The run point of the plugin, required method.',
            instanceof: 'Function',
            tsType: "(compiler: import('../lib/Compiler')) => void"
          }
        },
        required: [ 'apply' ]
      }
    },
    description: 'Options object as provided by the user.',
    type: 'object',
    additionalProperties: false,
    properties: {
      amd: { '$ref': '#/definitions/Amd' },
      bail: { '$ref': '#/definitions/Bail' },
      cache: { '$ref': '#/definitions/CacheOptions' },
      context: { '$ref': '#/definitions/Context' },
      dependencies: { '$ref': '#/definitions/Dependencies' },
      devServer: { '$ref': '#/definitions/DevServer' },
      devtool: { '$ref': '#/definitions/DevTool' },
      entry: { '$ref': '#/definitions/Entry' },
      experiments: { '$ref': '#/definitions/Experiments' },
      externals: { '$ref': '#/definitions/Externals' },
      externalsPresets: { '$ref': '#/definitions/ExternalsPresets' },
      externalsType: { '$ref': '#/definitions/ExternalsType' },
      ignoreWarnings: { '$ref': '#/definitions/IgnoreWarnings' },
      infrastructureLogging: { '$ref': '#/definitions/InfrastructureLogging' },
      loader: { '$ref': '#/definitions/Loader' },
      mode: { '$ref': '#/definitions/Mode' },
      module: { '$ref': '#/definitions/ModuleOptions' },
      name: { '$ref': '#/definitions/Name' },
      node: { '$ref': '#/definitions/Node' },
      optimization: { '$ref': '#/definitions/Optimization' },
      output: { '$ref': '#/definitions/Output' },
      parallelism: { '$ref': '#/definitions/Parallelism' },
      performance: { '$ref': '#/definitions/Performance' },
      plugins: { '$ref': '#/definitions/Plugins' },
      profile: { '$ref': '#/definitions/Profile' },
      recordsInputPath: { '$ref': '#/definitions/RecordsInputPath' },
      recordsOutputPath: { '$ref': '#/definitions/RecordsOutputPath' },
      recordsPath: { '$ref': '#/definitions/RecordsPath' },
      resolve: { '$ref': '#/definitions/Resolve' },
      resolveLoader: { '$ref': '#/definitions/ResolveLoader' },
      snapshot: { '$ref': '#/definitions/SnapshotOptions' },
      stats: { '$ref': '#/definitions/StatsValue' },
      target: { '$ref': '#/definitions/Target' },
      watch: { '$ref': '#/definitions/Watch' },
      watchOptions: { '$ref': '#/definitions/WatchOptions' }
    }
  },
  headerName: 'Webpack',
  baseDataPath: 'configuration',
  postFormatter: [Function: postFormatter]
}
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! lobster@1.0.0 build: `webpack --config webpack.config.js`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the lobster@1.0.0 build script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/jjuett/.npm/_logs/2020-12-28T23_57_44_638Z-debug.log
