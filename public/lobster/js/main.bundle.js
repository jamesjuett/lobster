var Bundle=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=57)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.asMutable=function(t){return t},e.assert=function(t,e){if(void 0===e&&(e=""),!t)throw Error("Assert failed: "+e)},e.assertFalse=function(t){throw void 0===t&&(t=""),Error("Assert failed: "+t)},e.createMethodMixin=function(t){return function(e,n){e[n]=t}},e.htmlDecoratedType=function(t){return'<span class="code-type">'+t+"</span>"};var r=['\\"',"\\'","\\?","\\\\","\\a","\\b","\\f","\\n","\\r","\\t","\\v","\\0"],i=['"',"'","","\\","","\b","\f","\n","\r","\t","\v","\0"];e.escapeString=function(t){for(var e=0;e<r.length;++e)t=t.replace(r[e],i[e]);return t},e.unescapeString=function(t){for(var e="",n=0;n<t.length;++n){for(var o=t[n],a=0;a<i.length;++a)if(o===i[a]){o=r[a];break}e+=o}return e};var o=function(){function t(){this.seed=0}return t.prototype.setRandomSeed=function(t){this.seed=t},t.prototype.random=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=1),this.seed=(9301*this.seed+49297)%233280,this.seededRandom(this.seed,t,e)},t.prototype.seededRandom=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=1);var r=t%233280/233280;return r=e+r*(n-e),r=Math.max(e,Math.min(n,r))},t}();e.CPPRandom=o},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),o=["a","e","i","o","u"];function a(t,e){return t.sameType(e)}function u(t,e){return t.similarType(e)}function s(t,e){return t instanceof S&&e instanceof S&&t.isDerivedFrom(e)}e.isType=function(t,e){return t.isType(e)},e.sameType=a,e.similarType=u,e.subType=s,e.covariantType=function(t,e){if(a(t,e))return!0;var n,r;if(t instanceof T&&e instanceof T)n=t.ptrTo,r=e.ptrTo;else{if(!(t instanceof A&&e instanceof A))return!1;n=t.refTo,r=e.refTo}return n instanceof S&&r instanceof S&&(!!n.isDerivedFrom(r)&&(t.isConst==e.isConst&&t.isVolatile==e.isVolatile&&!(n.isConst&&!r.isConst||n.isVolatile&&!r.isVolatile)))},e.referenceCompatible=function(t,e){return t&&e&&t.isReferenceCompatible(e)},e.isCvConvertible=function(t,e){if(null===t||null===e)return!1;if(!u(t,e))return!1;t=t.getCompoundNext(),e=e.getCompoundNext();for(var n=!0;t&&e;){if(t.isConst&&!e.isConst)return!1;if(!t.isConst&&e.isConst&&!n)return!1;n=n&&e.isConst,t=t.getCompoundNext(),e=e.getCompoundNext()}return!0};var c=function(){function t(t,e){void 0===t&&(t=!1),void 0===e&&(e=!1),this.isConst=t,this.isVolatile=e}return t.prototype.getCVString=function(){return(this.isConst?"const ":"")+(this.isVolatile?"volatile ":"")},t.prototype.toString=function(){return this.typeString(!1,"")},t.prototype.isType=function(t){return this instanceof t},t.prototype.isObjectType=function(){return this instanceof f},t.prototype.isAtomicType=function(){return this instanceof p},t.prototype.isArithmeticType=function(){return this instanceof d},t.prototype.isIntegralType=function(){return this instanceof y},t.prototype.isFloatingPointType=function(){return this instanceof g},t.prototype.isPointerType=function(){return this instanceof T},t.prototype.isReferenceType=function(){return this instanceof A},t.prototype.isClassType=function(){return this instanceof S},t.prototype.isBoundedArrayType=function(){return this instanceof C},t.prototype.isArrayOfUnknownBoundType=function(){return this instanceof O},t.prototype.isGenericArrayType=function(){return this instanceof C||this instanceof O},t.prototype.isFunctionType=function(){return this instanceof P},t.prototype.isArrayElemType=function(){return this instanceof p||this instanceof S},t.prototype.isVoidType=function(){return this instanceof l},t.prototype.isPotentialReturnType=function(){return this instanceof f||this instanceof A||this instanceof l},t.prototype.isPotentialParameterType=function(){return this instanceof f||this instanceof A},t.prototype.isReferenceRelated=function(t){return a(this.cvUnqualified(),t.cvUnqualified())||s(this.cvUnqualified(),t.cvUnqualified())},t.prototype.isReferenceCompatible=function(t){return this.isReferenceRelated(t)&&(t.isConst||!this.isConst)&&(t.isVolatile||!this.isVolatile)},t.prototype.declaratorString=function(t){return this.typeString(!0,t)},t.prototype.parenthesize=function(t,e){return this.precedence<t.precedence?"("+e+")":e},t.prototype.describe=function(){var t=this.typeString(!1,"");return{name:t,message:t}},t.prototype.getCompoundNext=function(){return null},t.prototype.isCVQualified=function(){return this.isConst||this.isVolatile},t.prototype.cvUnqualified=function(){return this.cvQualified(!1,!1)},t.prototype.cvQualified=function(t,e){return void 0===e&&(e=!1),this.cvQualifiedImpl(t,e)},t._name="Type",t}(),l=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.isComplete=!0,e.precedence=0,e}return r(e,t),e.prototype.sameType=function(t){return t instanceof e&&t.isConst===this.isConst&&t.isVolatile===this.isVolatile},e.prototype.similarType=function(t){return t instanceof e},e.prototype.typeString=function(t,e,n){return"void"},e.prototype.englishString=function(t){return"void"},e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.VOID=new e,e}(c);e.VoidType=l;var f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(c);e.ObjectType=f;var p=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.isAtomic=!0,e}return r(e,t),e}(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.bytesToValue=function(t){return t[0]},e.prototype.valueToBytes=function(t){var e=[];e[0]=t;for(var n=1;n<this.size-1;++n)e.push(0);return e},e.prototype.valueToOstreamString=function(t){return this.valueToString(t)},e}(f));e.AtomicType=p;var h=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.isComplete=!0,e.precedence=0,e}return r(e,t),e.prototype.sameType=function(t){return t instanceof e&&t.simpleType===this.simpleType&&t.isConst===this.isConst&&t.isVolatile===this.isVolatile},e.prototype.similarType=function(t){return t instanceof e&&t.simpleType===this.simpleType},e.prototype.typeString=function(t,e,n){return t?e||"":this.getCVString()+(n?i.htmlDecoratedType(this.simpleType.toString()):this.simpleType)+(e?" "+e:"")},e.prototype.englishString=function(t){var e=this.getCVString()+this.simpleType;return t?this.simpleType+"s":(function(t){return-1!=o.indexOf(t)}(e.charAt(0))?"an ":"a ")+e},e.prototype.valueToString=function(t){return""+t},e.prototype.isValueValid=function(t){return!0},e}(p);e.SimpleType=h;var d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.ArithmeticType=d;var y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(d);e.IntegralType=y;var m=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="char",e.size=1,e}return r(e,t),e.isNullChar=function(t){return t===this.NULL_CHAR},e.jsStringToNullTerminatedCharArray=function(t){var n=t.split("").map(function(t){return t.charCodeAt(0)});return n.push(e.NULL_CHAR),n},e.prototype.valueToString=function(t){return"'"+i.unescapeString(String.fromCharCode(t))+"'"},e.prototype.valueToOstreamString=function(t){return String.fromCharCode(t)},e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.CHAR=new e,e.NULL_CHAR=0,e}(y);e.Char=m;var v=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="int",e.size=4,e}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.INT=new e,e}(y);e.Int=v;var b=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="size_t",e.size=8,e}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e}(y);e.Size_t=b;var _=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="bool",e.size=1,e}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.BOOL=new e,e}(y);e.Bool=_;var g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.valueToString=function(t){var e=""+t;return-1!=e.indexOf(".")?e:e+"."},e}(d);e.FloatingPointType=g;var w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="float",e.size=4,e}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.FLOAT=new e,e}(g);e.Float=w;var R=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="double",e.size=8,e}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.DOUBLE=new e,e}(g);e.Double=R;var T=function(t){function e(e,n,r){var i=t.call(this,n,r)||this;return i.size=8,i.precedence=1,i.isComplete=!0,i.ptrTo=e,i}return r(e,t),e.isNull=function(t){return 0===t},e.isNegative=function(t){return t<0},e.prototype.getCompoundNext=function(){return this.ptrTo},e.prototype.sameType=function(t){return t instanceof e&&this.ptrTo.sameType(t.ptrTo)&&t.isConst===this.isConst&&t.isVolatile===this.isVolatile},e.prototype.similarType=function(t){return t instanceof e&&this.ptrTo.similarType(t.ptrTo)},e.prototype.typeString=function(t,e,n){return this.ptrTo.typeString(t,this.parenthesize(this.ptrTo,this.getCVString()+"*"+e),n)},e.prototype.englishString=function(t){return(t?this.getCVString()+"pointers to":"a "+this.getCVString()+"pointer to")+" "+this.ptrTo.englishString(!1)},e.prototype.valueToString=function(t){return"0x"+t},e.prototype.isObjectPointer=function(){return this.ptrTo.isObjectType()},e.prototype.isValueDereferenceable=function(t){return this.isValueValid(t)},e.prototype.isValueValid=function(t){return!0},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.ptrTo,t,n)},e}(p);e.PointerType=T;var x=function(t){function e(e,n,r){var i=t.call(this,e.type.elemType,n,r)||this;return i.arrayObject=e,i}return r(e,t),e.prototype.min=function(){return this.arrayObject.address},e.prototype.onePast=function(){return this.arrayObject.address+this.arrayObject.type.size},e.prototype.isValueValid=function(t){if(!this.arrayObject.isAlive)return!1;var e=this.arrayObject;return e.address<=t&&t<=e.address+e.type.size},e.prototype.isValueDereferenceable=function(t){return this.isValueValid(t)&&t!==this.onePast()},e.prototype.toIndex=function(t){return Math.trunc((t-this.arrayObject.address)/this.arrayObject.type.elemType.size)},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.arrayObject,t,n)},e}(T);e.ArrayPointer=x;var E=function(t){function e(e,n,r){var i=t.call(this,e.type,n,r)||this;return i.pointedObject=e,i}return r(e,t),e.prototype.getPointedObject=function(){return this.pointedObject},e.prototype.isValueValid=function(t){return this.pointedObject.isAlive&&this.pointedObject.address===t},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.pointedObject,t,n)},e}(T);e.ObjectPointer=E;var A=function(t){function e(e,n,r){var i=t.call(this,!1,r)||this;return i.precedence=1,i.isComplete=!0,i.refTo=e,i}return r(e,t),e.prototype.getCompoundNext=function(){return this.refTo},e.prototype.sameType=function(t){return t instanceof e&&this.refTo.sameType(t.refTo)},e.prototype.similarType=function(t){return t instanceof e&&this.refTo.similarType(t.refTo)},e.prototype.typeString=function(t,e,n){return this.refTo.typeString(t,this.parenthesize(this.refTo,this.getCVString()+"&"+e),n)},e.prototype.englishString=function(t){return this.getCVString()+(t?"references to":"a reference to")+" "+this.refTo.englishString(!1)},e.prototype.valueToString=function(t){return""+t},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.refTo,t,n)},e}(c);e.ReferenceType=A,e.noRef=function(t){return t instanceof A?t.refTo:t};var C=function(t){function e(e,n){var r=t.call(this,!1,!1)||this;return r.precedence=2,r.elemType=e,r.length=n,r.size=e.size*n,r}return r(e,t),Object.defineProperty(e.prototype,"isComplete",{get:function(){return this.elemType.isComplete},enumerable:!0,configurable:!0}),e.prototype.getCompoundNext=function(){return this.elemType},e.prototype.sameType=function(t){return t instanceof e&&this.elemType.sameType(t.elemType)&&this.length===t.length},e.prototype.similarType=function(t){return t instanceof e&&this.elemType.similarType(t.elemType)&&this.length===t.length},e.prototype.typeString=function(t,e,n){return this.elemType.typeString(t,e+"["+this.length+"]",n)},e.prototype.englishString=function(t){return(t?"arrays of ":"an array of ")+this.length+" "+this.elemType.englishString(this.length>1)},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.elemType,this.length)},e.prototype.adjustToPointerType=function(){return new T(this.elemType,!1,!1)},e}(f);e.BoundedArrayType=C;var O=function(t){function e(e,n){var r=t.call(this,!1,!1)||this;return r.precedence=2,r.isComplete=!1,r.elemType=e,r.sizeExpressionAST=n,r}return r(e,t),e.prototype.getCompoundNext=function(){return this.elemType},e.prototype.sameType=function(t){return t instanceof e&&this.elemType.sameType(t.elemType)},e.prototype.similarType=function(t){return t instanceof e&&this.elemType.similarType(t.elemType)},e.prototype.typeString=function(t,e,n){return this.elemType.typeString(t,e+"[]",n)},e.prototype.englishString=function(t){return(t?"arrays of unknown bound of ":"an array of unknown bound of ")+this.elemType.englishString(!0)},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.elemType,this.sizeExpressionAST)},e.prototype.adjustToPointerType=function(){return new T(this.elemType,!1,!1)},e}(c);e.ArrayOfUnknownBoundType=O;var S=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.size=0,e.precedence=0,e.isComplete=!1,e.className="",e.name="",e}return r(e,t),e.prototype.sameType=function(t){throw new Error("Method not implemented.")},e.prototype.similarType=function(t){throw new Error("Method not implemented.")},e.prototype.isDerivedFrom=function(t){throw new Error("Method not implemented.")},e.prototype.typeString=function(t,e,n){throw new Error("Method not implemented.")},e.prototype.englishString=function(t){throw new Error("Method not implemented.")},e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e}(f);e.ClassType=S;var P=function(t){function e(e,n,r,i,o){var a=t.call(this,r,i)||this;a.isComplete=!0,a.precedence=2,a.receiverType=o,a.returnType=e instanceof S||e instanceof T||e instanceof A?e:e.cvUnqualified(),a.paramTypes=n.map(function(t){return t instanceof S?t:t.cvUnqualified()}),a.paramStrType="(";for(var u=0;u<n.length;++u)a.paramStrType+=(0==u?"":",")+n[u];a.paramStrType+=")",a.paramStrEnglish="(";for(u=0;u<n.length;++u)a.paramStrEnglish+=(0==u?"":", ")+n[u].englishString(!1);return a.paramStrEnglish+=")",a}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(this.returnType,this.paramTypes,t,n,this.receiverType)},e.prototype.sameType=function(t){return!!t&&(t instanceof e&&(!!this.sameReturnType(t)&&!!this.sameParamTypes(t)))},e.prototype.similarType=function(t){return this.sameType(t)},e.prototype.sameParamTypes=function(t){var n=t instanceof e?t.paramTypes:t;if(this.paramTypes.length!==n.length)return!1;for(var r=0;r<this.paramTypes.length;++r)if(!this.paramTypes[r].sameType(n[r]))return!1;return!0},e.prototype.sameReturnType=function(t){return this.returnType.sameType(t.returnType)},e.prototype.sameReceiverType=function(t){return this.receiverType&&t.receiverType?this.receiverType.sameType(t.receiverType):!this.receiverType&&!t.receiverType},e.prototype.sameSignature=function(t){return this.sameReceiverType(t)&&this.sameParamTypes(t)},e.prototype.isPotentialOverriderOf=function(t){return this.sameParamTypes(t)&&this.isConst===t.isConst&&this.isVolatile==t.isVolatile},e.prototype.typeString=function(t,e,n){return void 0===n&&(n=!1),this.returnType.typeString(t,e+this.paramStrType,n)},e.prototype.englishString=function(t){return(t?"functions that take ":"a function that takes ")+this.paramStrEnglish+" "+(t?"and return ":"and returns ")+this.returnType.englishString(!1)},e}(c);e.FunctionType=P;var j=new Set(["char","int","bool","float","double","void"]);e.isBuiltInTypeName=function(t){return j.has(t)},e.builtInTypes={char:m,int:v,bool:_,float:w,double:R,void:l}},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(4),o=n(3),a=n(0),u=n(5);e.createTranslationUnitContext=function(t,e,n){return Object.assign({},t,{translationUnit:e,contextualScope:n})},e.createExpressionContext=function(t,e){return Object.assign({},t,{contextualParameterTypes:e})},e.createFunctionContext=function(t,e){return Object.assign({},t,{containingFunction:e,functionLocals:new y})},e.isBlockContext=function(t){return t.contextualScope instanceof i.BlockScope};var s=function(){function t(e){this.notes=[],this.hasErrors=!1,this.children=[],this.id=t.NEXT_ID++,this.context=e}return t.prototype.attach=function(t){a.asMutable(this.children).push(t),t.onAttach(this)},t.prototype.attachAll=function(t){var e=this;t.forEach(function(t){return e.attach(t)})},t.prototype.setAST=function(t){return a.asMutable(this).ast=t,t.source||a.assertFalse("AST source is undefined. A track() call is likely missing in the grammar."),a.asMutable(this).sourceReference=this.context.translationUnit.getSourceReference(t.source.line,t.source.column,t.source.start,t.source.end),this},t.prototype.explain=function(t,e){return{message:"[No explanation available.]",ignore:!0}},t.prototype.describe=function(t,e){return{message:"[No description available.]",ignore:!1}},t.prototype.addNote=function(t){this.notes.push(t),t.kind===o.NoteKind.ERROR&&(this.hasErrors=!0)},t.prototype.getNearestSourceReference=function(){for(var t=this;!t.sourceReference&&t.parent;)t=t.parent;return t.sourceReference||this.context.translationUnit.getSourceReference(0,0,0,0)},t.NEXT_ID=0,t}();e.CPPConstruct=s;var c=function(){function t(e,n,r){this.observable=new u.Observable(this),this.pushedChildren={},this.isActive=!1,this.isDone=!1,this.pauses={},this.model=e,this.stackType=n,r instanceof t?(a.assert(this.parent!==this,"Code instance may not be its own parent"),this.sim=r.sim,a.assert(r.sim===this.sim,"Runtime construct may not belong to a different simulation than its parent."),this.parent=r,this.parent.addChild(this),r.containingRuntimeFunction&&(this.containingRuntimeFunction=r.containingRuntimeFunction)):this.sim=r,this.stepsTakenAtStart=this.sim.stepsTaken}return t.prototype.stepForward=function(){return this.observable.send("stepForward"),this.stepForwardImpl()},t.prototype.upNext=function(){return this.observable.send("upNext"),this.upNextImpl()},t.prototype.done=function(){this.isDone=!0},t.prototype.setPauseWhenUpNext=function(){this.pauses.upNext={pauseWhenUpNext:!0}},t.prototype.wait=function(){this.observable.send("wait")},t.prototype.pushed=function(){this.isActive=!0,this.observable.send("pushed")},t.prototype.popped=function(){this.isActive=!1,this.observable.send("popped",this)},t.prototype.addChild=function(t){this.pushedChildren[t.model.id]=t,this.observable.send("childPushed",t)},t.prototype.findParentByModel=function(t){for(var e=this.parent;e&&e.model.id!=t.id;)e=e.parent;return e},t.prototype.explain=function(){return this.model.explain(this.sim,this)},t.prototype.describe=function(){return this.model.describe(this.sim,this)},t}();e.RuntimeConstruct=c;var l=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.onAttach=function(t){this.parent=t},e}(s);e.BasicCPPConstruct=l;var f=function(t){function e(e,n){var r=t.call(this,e)||this;return r.addNote(r.note=n(r)),r}return r(e,t),e}(l);e.InvalidConstruct=f;var p=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.temporaryObjects=[],e}return r(e,t),e.prototype.onAttach=function(t){if(this.parent=t,!this.isFullExpression()){var e=this.findFullExpression();this.temporaryObjects.forEach(function(t){e.addTemporaryObject(t)}),this.temporaryObjects.length=0}this.temporaryObjects.length>0&&(this.temporaryDeallocator=new v(this.context,this.temporaryObjects),this.attach(this.temporaryDeallocator))},e.prototype.isFullExpression=function(){return!(this.parent&&this.parent instanceof e)||!this.parent.isFullExpression()},e.prototype.findFullExpression=function(){return this.isFullExpression()?this:this.parent&&this.parent instanceof e?this.parent.findFullExpression():a.assertFalse("failed to find full expression for "+this)},e.prototype.addTemporaryObject=function(t){a.assert(!this.parent,"Temporary objects may not be added to a full expression after it has been attached."),this.temporaryObjects.push(t),t.setOwner(this)},e.prototype.createTemporaryObject=function(t,e){var n=this.findFullExpression(),r=new i.TemporaryObjectEntity(t,this,n,e);return this.temporaryObjects[r.entityId]=r,r},e}(l);e.PotentialFullExpression=p;var h=function(t){function e(e,n,r){var i=t.call(this,e,n,r)||this;return i.temporaryObjects={},i.model.temporaryDeallocator&&(i.temporaryDeallocator=i.model.temporaryDeallocator.createRuntimeConstruct(i)),i.containingFullExpression=i.findFullExpression(),i}return r(e,t),e.prototype.findFullExpression=function(){for(var t=this;t instanceof e&&!t.model.isFullExpression()&&t.parent;)t=t.parent;return t instanceof e?t:a.assertFalse()},e.prototype.done=function(){this.temporaryDeallocator&&this.sim.push(this.temporaryDeallocator),t.prototype.done.call(this)},e}(c);e.RuntimePotentialFullExpression=h;var d,y=function(){function t(){this.localObjects=[],this.localReferences=[],this.localVariablesByEntityId={}}return t.prototype.registerLocalVariable=function(t){a.assert(!this.localVariablesByEntityId[t.entityId]),this.localVariablesByEntityId[t.entityId]=t,"AutoEntity"===t.kind?a.asMutable(this.localObjects).push(t):a.asMutable(this.localReferences).push(t)},t}();e.FunctionLocals=y,d||(d={});var m=function(t){function e(e,n,r){var i=t.call(this,e,"function",n)||this;return i.hasControl=!1,i.receiver=r,i.body=i.model.body.createRuntimeStatement(i),i}return r(e,t),e.prototype.pushStackFrame=function(){this.stackFrame=this.sim.memory.stack.pushFrame(this)},e.prototype.setReturnObject=function(t){a.assert(!this.returnObject),this.returnObject=t},e.prototype.gainControl=function(){this.hasControl=!0,this.observable.send("gainControl")},e.prototype.loseControl=function(){this.hasControl=!0,this.observable.send("loseControl")},e.prototype.stepForwardImpl=function(){},e.prototype.upNextImpl=function(){this.body.isDone?this.sim.pop():this.sim.push(this.body)},e}(c);e.RuntimeFunction=m;var v=function(t){function e(e,n){var r=t.call(this,e)||this;return r.temporaryObjects=n,r}return r(e,t),e.prototype.createRuntimeConstruct=function(t){return new b(this,t)},e}(l);e.TemporaryDeallocator=v;var b=function(t){function e(e,n){var r=t.call(this,e,"expression",n)||this;return r.index=0,r.justDestructed=!1,r}return r(e,t),e.prototype.upNextImpl=function(){var t=this.model.temporaryObjects.map(function(t){return null});this.index<t.length?(this.sim.memory.deallocateTemporaryObject(this.model.temporaryObjects[this.index].runtimeLookup(this)),++this.index):this.sim.pop()},e.prototype.stepForwardImpl=function(){return!1},e}(c);e.RuntimeTemporaryDeallocator=b;var _=function(t){function e(e,n){var r=t.call(this,e)||this;return r.addNote(o.CPPError.lobster.unsupported_feature(r,n)),r}return r(e,t),e}(l);e.UnsupportedConstruct=_;var g=function(t){function e(e,n){var r=t.call(this,e)||this;return r.globalObjects=n,r}return r(e,t),e.prototype.onAttach=function(t){throw new Error("Method not implemented.")},e.prototype.createRuntimeConstruct=function(t){return new w(this,t)},e}(s);e.GlobalObjectAllocator=g;var w=function(t){function e(e,n){var r=t.call(this,e,"statement",n)||this;return r.index=0,r}return r(e,t),e.prototype.upNextImpl=function(){if(this.index<this.model.globalObjects.length){var t=this.model.globalObjects[this.index];this.sim.memory.allocateStatic(t),t.initializer&&this.sim.push(t.initializer.createRuntimeInitializer(this)),++this.index}else this.sim.pop()},e.prototype.stepForwardImpl=function(){return!1},e}(c);e.RuntimeGlobalObjectAllocator=w},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i,o=n(2),a=n(1);!function(t){t.ERROR="error",t.WARNING="warning",t.STYLE="style",t.OTHER="other"}(i=e.NoteKind||(e.NoteKind={}));var u=function(){return function(t,e,n){this.kind=t,this.id=e,this.message=n}}();e.Note=u;var s=function(t){function e(e,n,r,i){var o=t.call(this,n,r,i)||this;return o.primarySourceReference=e,o.allSourceReferences=[e],o}return r(e,t),e}(u),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(s);e.PreprocessorNote=c;var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(s);e.SyntaxNote=l;var f=function(t){function e(e,n,r,i){var a=t.call(this,n,r,i)||this;return a.constructs=e instanceof o.CPPConstruct?[e]:e,a.primaryConstruct=a.constructs[0],a}return r(e,t),Object.defineProperty(e.prototype,"primarySourceReference",{get:function(){return this.primaryConstruct.getNearestSourceReference()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"allSourceReferences",{get:function(){return this.constructs.map(function(t){return t.getNearestSourceReference()})},enumerable:!0,configurable:!0}),e}(u),p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(f);e.CompilerNote=p;var h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(f);e.LinkerNote=h,e.CPPError={other:{cin_not_supported:function(t){return new p(t,i.ERROR,"other.cin_not_supported","Sorry, <span class='code'>cin</span> is not supported yet :(.")}},class_def:{prev_def:function(t,e,n){return new p(t,i.ERROR,"class_def.prev_def",e+" cannot be defined more than once. Note that Lobster just puts all class names (i.e. types) in one global sort of namespace, so you can't ever have two classes of the same name.")},base_class_type:function(t,e){return new p(t,i.ERROR,"class_def.base_class_type",'I cannot find a suitable class called "'+e+'" to use as a base.')},big_three:function(t,e,n){var r=e.join(" and "),o=n.join(" and ");return new p(t,i.WARNING,"class_def.big_three","This class does not follow the rule of the Big Three. It has a custom implementation for the "+r+" but not for the "+o+'. The compiler will provide implicit versions of the missing ones, but they will almost certainly work "incorrectly" (e.g. make shallow copies or neglect to delete dynamic memory).')},multiple_inheritance:function(t){return new p(t,i.ERROR,"class_def.multiple_inheritance","Sorry, but Lobster does not support multiple inheritance.")},virtual_inheritance:function(t){return new p(t,i.ERROR,"class_def.virtual_inheritance","Sorry, but Lobster does not support virtual inheritance.")},ctor_def:function(t){return new p(t,i.ERROR,"class_def.ctor_def","Sorry, but for now Lobster only supports constructors that are defined inline. (i.e. You need a body.)")},dtor_def:function(t){return new p(t,i.ERROR,"class_def.dtor_def","Sorry, but for now Lobster only supports destructors that are defined inline. (i.e. You need a body.)")}},declaration:{ctor:{copy:{pass_by_value:function(t,e,n){var r=new a.ReferenceType(e,!0);return new p(t,i.ERROR,"declaration.ctor.copy.pass_by_value","A copy constructor cannot take its parameter by value. Because pass-by-value itself uses the copy constructor, this would cause infinite recursion if it were allowed. Try passing by const reference instead! (i.e. "+r.typeString(!1,n,!1)+")")}},init:{no_such_member:function(t,e,n){return new p(t,i.ERROR,"declaration.ctor.init.no_such_member","Class "+e.toString()+" has no member named "+n+".")},improper_member:function(t,e,n){return new p(t,i.ERROR,"declaration.ctor.init.improper_member","A member initializer can only be used for non-static data members. There is no such member named "+n+" in the "+e.className+" class.")},delegating_only:function(t,e,n){return new p(t,i.ERROR,"declaration.ctor.init.delegating_only","If a constructor's initializer list delegates to another constructor from the same class, that must be the only thing it does.")},multiple_base_inits:function(t,e,n){return new p(t,i.ERROR,"declaration.ctor.init.multiple_base_inits","A constructor's initializer list cannot specify more than one base class constructor to use.")}}},dtor:{no_destructor_auto:function(t,e){return new p(t,i.ERROR,"declaration.dtor.no_destructor_auto","The local variable "+e.name+' needs to be destroyed when it "goes out of scope", but I can\'t find a destructor for the '+e.type+" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)")},no_destructor_temporary:function(t,e){return new p(t,i.ERROR,"declaration.dtor.no_destructor_temporary","This expression creates a temporary object of type "+e.type+" that needs to be destroyed, but I can't find a destructor for the "+e.type+" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)")}},prev_def:function(t,e){return new p(t,i.ERROR,"declaration.prev_def",e+" cannot be defined more than once in this scope.")},prev_local:function(t,e){return new p(t,i.ERROR,"declaration.prev_local","This declaration of a local variable "+e+' + " conflicts with an earlier declaration of '+e+" in the same scope.")},func:{return_array:function(t){return new p(t,i.ERROR,"declaration.func.return_array","Cannot declare a function that returns an array.")},return_func:function(t){return new p(t,i.ERROR,"declaration.func.return_func","Cannot declare a function that returns a function. Try returning a function pointer?")},invalid_return_type:function(t,e){return new p(t,i.ERROR,"declaration.func.invalid_return_type","The type "+e.toString()+" is not allowed as a return type.")},some_invalid_parameter_types:function(t){return new p(t,i.ERROR,"declaration.func.some_invalid_parameter_types","This function type contains some invalid parameter types.")},array:function(t){return new p(t,i.ERROR,"declaration.func.array","Cannot declare an array of functions.")},void_param:function(t){return new p(t,i.ERROR,"declaration.func.void_param","Function parameters may not have void type.")},op_member:function(t){return new p(t,i.ERROR,"declaration.func.op_member","This operator must be overloaded as a non-static member function.")},op_subscript_one_param:function(t){return new p(t,i.ERROR,"declaration.func.op_subscript_one_param","An overloaded subscript ([]) operator must take exactly one parameter.")},returnTypesMatch:function(t,e){return new p(t,i.ERROR,"declaration.func.returnTypesMatch","Cannot redeclare function "+e+" with the same parameter types but a different return type.")},mainParams:function(t){return new p(t,i.ERROR,"declaration.func.mainParams","Sorry, but for now command line arguments (and thus parameters for main) are not supported in Lobster.")},no_return_type:function(t){return new p(t,i.ERROR,"declaration.func.no_return_type","You must specify a return type for this function. (Or if you meant it to be a constructor, did you misspell the name?)")},nonCovariantReturnType:function(t,e,n){return new p(t,i.ERROR,"declaration.func.nonCovariantReturnType","Return types in overridden virtual functions must either be the same or covariant (i.e. follow the Liskov Substitution Principle). Both return types must be pointers/references to class types, and the class type in the overriding function must be the same or a derived type. There are also restrictions on the cv-qualifications of the return types. In this case, returning a "+e+" in place of a "+n+" violates covariance.")},definition_non_function_type:function(t){return new p(t,i.ERROR,"declaration.func.definition_non_function_type","This appears to be a function definition, but the declarator does not indicate a function type. Maybe you forgt the parentheses?")}},pointer:{reference:function(t){return new p(t,i.ERROR,"declaration.pointer.reference","Cannot declare a pointer to a reference.")},void:function(t){return new p(t,i.ERROR,"declaration.pointer.void","Sorry, Lobster does not support void pointers.")},invalid_pointed_type:function(t,e){return new p(t,i.ERROR,"declaration.pointer.invalid_pointed_type","A pointer to type "+e.toString()+" is not allowed.")}},ref:{ref:function(t){return new p(t,i.ERROR,"declaration.ref.ref","A reference to a reference is not allowed.")},array:function(t){return new p(t,i.ERROR,"declaration.ref.array","Cannot declare an array of references.")},invalid_referred_type:function(t,e){return new p(t,i.ERROR,"declaration.ref.invalid_referred_type","A reference to type "+e.toString()+" is not allowed.")},memberNotSupported:function(t){return new p(t,i.ERROR,"declaration.ref.memberNotSupported","Sorry, reference members are not supported at the moment.")}},array:{length_required:function(t){return new p(t,i.ERROR,"declaration.array.length_required","Must specify length as an integer literal when declaring an array. (Sorry, but Lobster requires this for now even if it could hypothetically be deduced from the initializer.)")},zero_length:function(t){return new p(t,i.ERROR,"declaration.array.zero_length","Although technically allowed in C++, arrays with zero length are prohibited in Lobster.")},multidimensional_arrays_unsupported:function(t){return new p(t,i.ERROR,"declaration.array.multidimensional_arrays_unsupported","Sorry, Lobster currently doesn't support multidimensional arrays.")},invalid_element_type:function(t,e){return new p(t,i.ERROR,"declaration.array.invalid_element_type","The type "+e.toString()+" is not allowed as an array parameter.")}},init:{scalar_args:function(t,e){return new p(t,i.ERROR,"declaration.init.scalar_args","Invalid initialization of scalar type "+e+" from multiple values.")},array_string_literal:function(t,e){return new p(t,i.ERROR,"declaration.init.array_string_literal","Cannot direct/copy initialize an array of type "+e+". The only allowed direct/copy initialization of an array is to initialize an array of char from a string literal.")},convert:function(t,e,n){return new p(t,i.ERROR,"declaration.init.convert","Invalid conversion from "+e+" to "+n+".")},list_narrowing:function(t,e,n){return new p(t,i.ERROR,"declaration.init.list_narrowing","Implicit narrowing conversion from "+e+" to "+n+" is not allowed in initializer list.")},list_array:function(t){return new p(t,i.ERROR,"declaration.init.list_array","Initializer list syntax only supported for arrays.")},list_length:function(t,e){return new p(t,i.ERROR,"declaration.init.list_length","Length of initializer list must match length of array ("+e+").")},matching_constructor:function(t,e,n){var r=e.describe();return new p(t,i.ERROR,"declaration.init.matching_constructor","Trying to initialize "+(r.name||r.message)+", but unable to find a matching constructor definition for the "+e.type.className+" class using the given arguments ("+n.join(", ")+").")},no_default_constructor:function(t,e){var n=e.describe();return new p(t,i.ERROR,"declaration.init.no_default_constructor","This calls for the default initialization of "+(n.name||n.message)+", but I can't find a default constructor (i.e. taking no arguments) for the "+e.type.className+" class. The compiler usually provides an implicit one for you, but not if you have declared other constructors (under the assumption you would want to use one of those).")},referencePrvalueConst:function(t){return new p(t,i.ERROR,"declaration.init.referencePrvalueConst","You cannot bind a non-const reference to a prvalue (e.g. a temporary object).")},referenceType:function(t,e,n){return new p(t,i.ERROR,"declaration.init.referenceType","A reference (of type "+n+") cannot be bound to an object of a different type ("+e+").")},referenceBind:function(t){return new p(t,i.ERROR,"declaration.init.referenceBind","References must be bound to something when they are declared.")},referenceBindMultiple:function(t){return new p(t,i.ERROR,"declaration.init.referenceBindMultiple","References cannot be bound to multiple objects.")},stringLiteralLength:function(t,e,n){return n===e-1?new p(t,i.ERROR,"declaration.init.stringLiteralLength","Your array is one element too short. Remember, when initializing a character array (i.e. a c-string) with a string literal, an extra \\0 (null character) is automatically appended."):n>e?new p(t,i.WARNING,"declaration.init.stringLiteralLength","Your array (length "+n+") is longer than it needs to be to hold the string literal (length "+e+"). The remaining character elements will be zero-initialized."):new p(t,i.ERROR,"declaration.init.stringLiteralLength","The string literal used for initialization (length "+e+") cannot fit in the declared array (length "+n+").")},uninitialized:function(t,e){return new p(t,i.WARNING,"declaration.init.uninitialized",(e.describe().name||e.describe().message)+" is uninitialized, so it will start with whatever value happens to be in memory (i.e. memory junk). If you try to use this variable before initializing it, who knows what will happen!")},array_default_init:function(t){return new p(t,i.WARNING,"declaration.init.array_default_init","Note: Default initialization of an array requires default initialization of each of its elements.")},array_direct_init:function(t){return new p(t,i.OTHER,"declaration.init.array_direct_init","Note: initialization of an array requires initialization of each of its elements.")}},storage:{once:function(t,e){return new p(t,i.ERROR,"declaration.storage.once","Storage specifier ("+e+") may only be used once.")},incompatible:function(t,e){return new p(t,i.ERROR,"declaration.storage.incompatible","Storage specifiers ( "+e.join(" ")+") are incompatible with each other.")}},typeSpecifier:{once:function(t,e){return new p(t,i.ERROR,"declaration.typeSpecifier.once","Type specifier ("+e+") may only be used once.")},one_type:function(t,e){return new p(t,i.ERROR,"declaration.typeSpecifier.one_type","Type specifier must only specify one type. Found: "+e+".")},signed_unsigned:function(t){return new p(t,i.ERROR,"type.signed_unsigned","Type specifier may not indicate both signed and unsigned.")}},friend:{outside_class:function(t){return new p(t,i.ERROR,"declaration.friend.outside_class","Friend declarations are not allowed here.")},virtual_prohibited:function(t){return new p(t,i.ERROR,"declaration.friend.virtual_prohibited","A virtual function may not be declared as a friend.")}},parameter:{storage_prohibited:function(t){return new p(t,i.ERROR,"declaration.parameter.storage_prohibited","Storage specifiers are not permitted in parameter declarations.")},virtual_prohibited:function(t){return new p(t,i.ERROR,"declaration.friend.virtual_prohibited","A virtual function may not be declared as a friend.")}},unknown_type:function(t){return new p(t,i.ERROR,"declaration.unknown_type","Unable to determine the type declared here.")},void_prohibited:function(t){return new p(t,i.ERROR,"declaration.void_prohibited","The variable "+(t.declarator.name||"here")+" may not be declared as type void.")},virtual_prohibited:function(t){return new p(t,i.ERROR,"declaration.virtual_prohibited","The virtual keyword may only be used in member function declarations.")},type_mismatch:function(t,e,n){return new p(t,i.ERROR,"declaration.type_mismatch","Type mismatch. This declaration for "+e.name+" has type "+e.type+", but a previous declaration of "+n.name+" has type "+n.type)}},type:{unsigned_not_supported:function(t){return new p(t,i.WARNING,"type.unsigned_not_supported","Sorry, unsigned integral types are not supported yet. It will just be treated like a normal int.")},storage:function(t){return new p(t,i.WARNING,"type.storage","Because of the way Lobster works, storage class specifiers (e.g. static) have no effect.")},typeNotFound:function(t,e){return new p(t,i.ERROR,"type.typeNotFound","Oops, this is embarassing... I feel like "+e+" should be a type, but I can't figure out what it is.")}},expr:{array_operand:function(t,e){return new p(t,i.ERROR,"expr.array_operand","Type "+e+" cannot be subscripted.")},array_offset:function(t,e){return new p(t,i.ERROR,"expr.array_offset","Invalid type ("+e+") for array subscript offset.")},assignment:{lhs_lvalue:function(t){return new p(t,i.ERROR,"expr.assignment.lhs_lvalue","Lvalue required as left operand of assignment.")},lhs_const:function(t){return new p(t,i.ERROR,"expr.assignment.lhs_const","Left hand side of assignment is not modifiable.")},convert:function(t,e,n){return new p(t,i.ERROR,"expr.assignment.convert","Cannot convert "+n.type+" to "+e.type+" in assignment.")},self:function(t,e){return new p(t,i.WARNING,"expr.assignment.self","Self assignment from "+(e.describe().name||e.describe().message)+" to itself.")}},binary:{arithmetic_operands:function(t,e,n,r){return new p(t,i.ERROR,"expr.binary.arithmetic_operands","Invalid operand types ("+n.type+", "+r.type+") for operator "+e+", which requires operands of arithmetic type.")},integral_operands:function(t,e,n,r){return new p(t,i.ERROR,"expr.binary.integral_operands","Invalid operand types ("+n.type+", "+r.type+") for operator "+e+", which requires operands of integral type.")},boolean_operand:function(t,e,n){return new p(t,i.ERROR,"expr.binary.boolean_operand","Invalid operand type ("+n.type+") for operator "+e+", which requires operands that may be converted to boolean type.")},arithmetic_common_type:function(t,e,n,r){return new p(t,i.ERROR,"expr.binary.arithmetic_common_type","Performing the usual arithmetic conversions yielded operands of types ("+n.type+", "+r.type+") for operator "+e+", but a common arithmetic type could not be found.")}},unary:{},delete:{no_destructor:function(t,e){return new p(t,i.ERROR,"expr.delete.no_destructor","I can't find a destructor for the "+e+" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)")},pointer:function(t,e){return new p(t,i.ERROR,"expr.delete.pointer","The delete operator requires an operand of pointer type. (Current operand is "+e+" ).")},pointerToObjectType:function(t,e){return new p(t,i.ERROR,"expr.delete.pointerToObjectType","The delete operator cannot be used with a pointer to a non-object type (e.g. void pointers, function pointers). (Current operand is "+e+" ).")}},dereference:{pointer:function(t,e){return new p(t,i.ERROR,"expr.dereference.pointer","The dereference operator (*) requires an operand of pointer type. (Current operand is "+e+" ).")},pointerToObjectType:function(t,e){return new p(t,i.ERROR,"expr.dereference.pointerToObjectType","Pointers to a non-object, non-function type (e.g. void pointers) cannot be dereferenced. (Current operand is "+e+" ).")}},dot:{class_type:function(t){return new p(t,i.ERROR,"expr.dot.class_type","The dot operator can only be used to access members of an operand with class type.")},no_such_member:function(t,e,n){return new p(t,i.ERROR,"expr.dot.no_such_member","Operand of type "+e+" has no member named "+n+".")},memberLookup:function(t,e,n){return new p(t,i.ERROR,"expr.dot.memberLookup","Member lookup for "+n+" in class "+e+" failed...")}},arrow:{class_pointer_type:function(t){return new p(t,i.ERROR,"expr.arrow.class_pointer_type","The arrow operator can only be used to access members of an operand with pointer-to-class type.")},no_such_member:function(t,e,n){return new p(t,i.ERROR,"expr.arrow.no_such_member","Operand of type "+e+" has no member named "+n+".")},memberLookup:function(t,e,n){return new p(t,i.ERROR,"expr.arrow.memberLookup","Member lookup for "+n+" in class "+e+" failed...")}},invalid_operand:function(t,e,n){return new p(t,i.ERROR,"expr.invalid_operand","Invalid operand type ("+n.type+") for operator "+e+".")},lvalue_operand:function(t,e){return new p(t,i.ERROR,"expr.lvalue_operand","The "+e+" operator requires an lvalue operand.")},invalid_binary_operands:function(t,e,n,r){return n.type.isPointerType()&&a.sameType(n.type.ptrTo,r.type)?new p(t,i.ERROR,"expr.invalid_binary_operands","The types of the operands used for the "+e+" operator aren't quite compatible. The one on the right is "+r.type.englishString(!1)+", but the left is a pointer to that type. Think about whether you want to compare pointers (addresses) or the objects they point to."):r.type.isPointerType()&&a.sameType(r.type.ptrTo,n.type)?new p(t,i.ERROR,"expr.invalid_binary_operands","The types of the operands used for the "+e+" operator aren't quite compatible. The one on the left is "+n.type.englishString(!1)+", but the right is a pointer to that type.  Think about whether you want to compare pointers (addresses) or the objects they point to."):new p(t,i.ERROR,"expr.invalid_binary_operands","Invalid operand types ("+n.type+", "+r.type+") for operator "+e+".")},logicalNot:{operand_bool:function(t,e){return new p(t,i.ERROR,"expr.logicalNot.operand_bool","Expression of type ("+e.type+") cannot be converted to boolean (as required for the operand of logical not).")}},addressOf:{lvalue_required:function(t){return new p(t,i.ERROR,"expr.addressOf.lvalue_required","Operand for address-of operator (&) must be an lvalue.")}},ternary:{condition_bool:function(t,e){return new p(t,i.ERROR,"expr.ternary.condition_bool","Expression of type ("+e+") cannot be converted to boolean condition.")},sameValueCategory:function(t){return new p(t,i.ERROR,"expr.ternary.sameValueCategory","The second and third operands of the ternary operator must yield a common value category.")}},unaryPlus:{operand:function(t){return new p(t,i.ERROR,"expr.unaryPlus.operand","The unary plus operator (+) requires an operand of arithmetic or pointer type.")}},unaryMinus:{operand:function(t){return new p(t,i.ERROR,"expr.unaryMinus.operand","The unary minus operator (-) requires an operand of arithmetic type.")}},functionCall:{main:function(t){return new p(t,i.ERROR,"expr.functionCall.main","You can't explicitly call main.")},numParams:function(t){return new p(t,i.ERROR,"expr.functionCall.numParams","Improper number of arguments for this function call.")},invalid_operand_expression:function(t,e){return new p(t,i.ERROR,"expr.functionCall.invalid_operand_expression","The expression "+e+" cannot be called as a function.")},operand:function(t,e){return new p(t,i.ERROR,"expr.functionCall.operand","Operand of type "+e.type+" cannot be called as a function.")},paramType:function(t,e,n){return new p(t,i.ERROR,"expr.functionCall.paramType","Cannot convert "+e+" to "+n+" in function call parameter.")},paramReferenceType:function(t,e,n){return new p(t,i.ERROR,"expr.functionCall.paramReferenceType","The given argument (of type "+e+") cannot be bound to a reference parameter of a different type ("+n+").")},paramReferenceLvalue:function(t){return new p(t,i.ERROR,"expr.functionCall.paramReferenceLvalue","For now, you cannot bind a non-lvalue as a reference parameter in Lobster. (i.e. you have to bind a variable)")},not_defined:function(t,e,n){return new p(t,i.ERROR,"expr.functionCall.not_defined","A function call operator with parameters of types ("+n.map(function(t){return t.toString()}).join(", ")+") for the class type "+e+" has not been defined.")}},thisExpr:{memberFunc:function(t){return new p(t,i.ERROR,"expr.thisExpr.memberFunc","You may only use the </span class='code'>this</span> keyword in non-static member functions.")}}},iden:{ambiguous:function(t,e){return new p(t,i.ERROR,"iden.ambiguous",'"'+e+'" is ambiguous. (There is not enough contextual type information for name lookup to figure out which entity this identifier refers to.)')},no_match:function(t,e){return new p(t,i.ERROR,"iden.no_match",'No matching function found for call to "'+e+'" with these parameter types.')},keyword:function(t,e){return new p(t,i.ERROR,"iden.keyword",'"'+e+'" is a C++ keyword and cannot be used as an identifier.')},alt_op:function(t,e){return new p(t,i.ERROR,"iden.alt_op",'"'+e+'" is a C++ operator and cannot be used as an identifier.')}},param:{numParams:function(t){return new p(t,i.ERROR,"param.numParams","Improper number of arguments.")},paramType:function(t,e,n){return new p(t,i.ERROR,"param.paramType","Cannot convert "+e+" to a parameter of type "+n+".")},paramReferenceType:function(t,e,n){return new p(t,i.ERROR,"param.paramReferenceType","The given argument (of type "+e+") cannot be bound to a reference parameter of a different type ("+n+").")},paramReferenceLvalue:function(t){return new p(t,i.ERROR,"param.paramReferenceLvalue","For now, you cannot bind a non-lvalue as a reference parameter in Lobster. (i.e. you have to bind a variable)")},thisConst:function(t,e){return new p(t,i.ERROR,"param.thisConst","A non-const member function cannot be called on a const instance of the "+e+" class.")}},stmt:{function_definition_prohibited:function(t){return new p(t,i.ERROR,"stmt.function_definition_prohibited","A function definition is prohibited here (i.e. inside a statement).")},selection:{condition_bool:function(t,e){return new p(e,i.ERROR,"stmt.selection.condition_bool","Expression of type ("+e.type+") cannot be converted to boolean condition.")}},iteration:{condition_bool:function(t,e){return new p(e,i.ERROR,"stmt.iteration.condition_bool","Expression of type ("+e.type+") cannot be converted to boolean condition.")}},breakStatement:{location:function(t){return new p(t,i.ERROR,"stmt.breakStatement.location","Break statements may only occur inside loops or case statements.")}},returnStatement:{empty:function(t){return new p(t,i.ERROR,"stmt.returnStatement.empty","A return statement without an expression is only allowed in void functions.")},exprVoid:function(t){return new p(t,i.ERROR,"stmt.returnStatement.exprVoid","A return statement with an expression of non-void type is only allowed in a non-void function.")},convert:function(t,e,n){return new p(t,i.ERROR,"stmt.returnStatement.convert","Cannot convert "+e+" to return type of "+n+" in return statement.")}}},link:{library_unsupported:function(t,e){return new h(t,i.ERROR,"link.library_unsupported","I'm sorry, but this function ("+e+") is a part of the standard library that isn't currently supported.")},multiple_def:function(t,e){return new h(t,i.ERROR,"link.multiple_def","Multiple definitions found for "+e+".")},type_mismatch:function(t,e,n){return new h(t,i.ERROR,"link.type_mismatch","Multiple declarations found for "+e.name+", but with different types.")},class_same_tokens:function(t,e,n){return new h(t,i.ERROR,"link.class_same_tokens","Multiple class definitions are ok if they are EXACTLY the same in the source code. However, the multiple definitions found for "+e.name+" do not match exactly.")},func:{def_not_found:function(t,e){return new h(t,i.ERROR,"link.func.def_not_found","Cannot find definition for function "+e.name+". That is, the function is declared and I know what it is, but I can't find the actual code that implements it.")},no_matching_overload:function(t,e){return new h(t,i.ERROR,"link.func.no_matching_overload","Although some definitions for a function named "+e.name+" exist, I can't find one with the right signature to match this declaration.")},returnTypesMatch:function(t,e){return new h(t,i.ERROR,"link.func.returnTypesMatch","This declaration of the function "+e.name+" has a different return type than its definition.")}},def_not_found:function(t,e){return new h(t,i.ERROR,"link.def_not_found","Cannot find definition for object "+e.name+". (It is declared, so I know it's a variable and what type it is, but it's never defined anywhere.)")}},preprocess:{recursiveInclude:function(t){return new c(t,i.WARNING,"preprocess.recursiveInclude","Recursive #include detected. (i.e. A file #included itself, or #included a different file that then #includes the original, etc.)")}},lobster:{unsupported_feature:function(t,e){return new p(t,i.ERROR,"lobster.unsupported_feature","Sorry, you have used a C++ feature ("+e+") that is not currently supported in Lobster.")},referencePrvalue:function(t){return new p(t,i.ERROR,"lobster.referencePrvalue","Sorry, Lobster does not yet support binding references (even if they are reference-to-const) to prvalues (e.g. temporary objects).")},ternarySameType:function(t,e,n){return new p(t,i.ERROR,"lobster.ternarySameType","Lobster's ternary operator requires second and third operands of the same type. The given operands have types "+e+" and "+n+".")},ternaryNoVoid:function(t){return new p(t,i.ERROR,"lobster.ternaryNoVoid","Lobster's ternary operator does not allow void operands.")}}}},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(1),o=n(0),a=n(5),u=n(2),s=n(9),c=n(3),l=function(){function t(t){this.entities={},this.parent=t}return t.prototype.toString=function(){var t="";for(var e in this.entities)t+=this.entities[e]+"\n";return t},t.prototype.addDeclaredEntity=function(t){var e=this.entities[t.name];return e?t.mergeInto(e):this.entities[t.name]=t instanceof C?[t]:t},t.prototype.lookup=function(t,e){void 0===e&&(e={kind:"normal"}),e=e||{},o.assert(!t.includes("::"),"Qualified name used with unqualified loookup function.");var n=this.entities[t];if(!n&&!e.own&&this.parent)return this.parent.lookup(t,e);if(n){if(Array.isArray(n)){var r=n;if("exact"===e.kind){var i=e.paramTypes,a=e.receiverType;return r=n.filter(function(t){return t.type.sameParamTypes(i)?t.type.sameParamTypes(i):a?t.type.receiverType&&a.isConst===t.type.isConst:!t.type.receiverType})}return r}return n}},t}();e.Scope=l;var f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(l);e.BlockScope=f;var p=function(t){function e(n,r){var i=t.call(this,r)||this;return o.assert(!r||r instanceof e),i.name=n,i.children={},r&&r.addChild(i),i}return r(e,t),e.prototype.addChild=function(t){t.name&&(this.children[t.name]=t)},e}(l);e.NamespaceScope=p;var h=function(){function t(e){this.observable=new a.Observable(this),this.entityId=t._nextEntityId++,this.type=e}return t._nextEntityId=0,t}();e.CPPEntity=h;var d=function(t){function e(e,n){var r=t.call(this,e)||this;return r.name=n,r}return r(e,t),e}(h);e.NamedEntity=d;var y=function(t){function e(e,n){var r=t.call(this,e,n.name)||this;return r.declaration=n,r}return r(e,t),e}(d);e.DeclaredEntityBase=y;var m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.mergeInto=function(t){if(Array.isArray(t))throw c.CPPError.declaration.type_mismatch(this.declaration,this,t[0]);if(!i.sameType(this.type,t.type))throw c.CPPError.declaration.type_mismatch(this.declaration,this,t);return t},e}(y);e.DeclaredObjectEntity=m;var v=function(t){function e(e,n,r){var i=t.call(this,e,n)||this;return i.kind="AutoEntity",i.definition=n,i.isParameter=!!r,i}return r(e,t),e.prototype.toString=function(){return this.name+" ("+this.type+")"},e.prototype.mergeInto=function(t){throw c.CPPError.declaration.prev_local(this.declaration,this.name)},e.prototype.runtimeLookup=function(t){return t.containingRuntimeFunction.stackFrame.getLocalObject(this)},e.prototype.describe=function(){return{message:"the "+(this.isParameter?"parameter":"local variable")+" "+this.name}},e}(m);e.AutoEntity=v;var b=function(t){function e(e,n,r){void 0===r&&(r=!1);var i=t.call(this,e,n)||this;return i.kind="LocalReferenceEntity",i.isParameter=r,i}return r(e,t),e.prototype.mergeInto=function(t){throw c.CPPError.declaration.prev_local(this.declaration,this.name)},e.prototype.bindTo=function(t,e){t.containingRuntimeFunction.stackFrame.bindReference(this,e)},e.prototype.runtimeLookup=function(t){return t.containingRuntimeFunction.stackFrame.referenceLookup(this)},e.prototype.describe=function(){return{message:"the "+(this.isParameter?"reference parameter":"reference")+" "+this.name}},e}(m);e.LocalReferenceEntity=b;var _=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.qualifiedName="::"+r.name,r}return r(e,t),e.prototype.toString=function(){return this.name+" ("+this.type+")"},e.prototype.link=function(t){t&&!Array.isArray(t)?this.definition=t:this.declaration.addNote(c.CPPError.link.def_not_found(this.declaration,this))},e.prototype.runtimeLookup=function(t){return t.sim.memory.staticLookup(this)},e.prototype.describe=function(){return{name:this.name,message:"the variable "+this.name}},e}(m);e.StaticEntity=_;var g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.runtimeLookup=function(t){var e=t.containingRuntimeFunction.returnObject;if(!e)throw"Error: Runtime lookup performed for the return object of a function, but the return object does not currently exist.";return e},e.prototype.describe=function(){return{message:"the return object"}},e}(h);e.ReturnObjectEntity=g;var w=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.bindTo=function(t,e){t.containingRuntimeFunction.setReturnObject(e)},e.prototype.describe=function(){return{message:"the object returned by reference"}},e}(h);e.ReturnByReferenceEntity=w;var R=function(t){function e(e){var n=t.call(this,new i.BoundedArrayType(new i.Char(!0),e.length+1))||this;return n.str=e,n}return r(e,t),e.prototype.objectInstance=function(t,e){return new s.StringLiteralObject(this.type,t,e)},e.prototype.toString=function(){return'string literal "'+o.unescapeString(this.str)+'"'},e.prototype.runtimeLookup=function(t){return t.sim.memory.getStringLiteral(this.str)},e.prototype.describe=function(){return{message:'the string literal "'+o.unescapeString(this.str)+'"'}},e}(h);e.StringLiteralEntity=R;var T=function(t){function e(e,n,r){var a=t.call(this,n)||this;return a.calledFunction=e,a.type=n,a.num=r,o.assert(i.sameType(e.type.paramTypes[r],n),"Inconsistent type for parameter entity."),a}return r(e,t),e.prototype.runtimeLookup=function(t){var e=t.sim.topFunction(),n=e.model.parameters[this.num].declaredEntity;if(!(n instanceof v))return o.assertFalse("Pass by value used with reference parameter.");var r=n.runtimeLookup(e);return o.assert(i.sameType(r.type,this.type)),r},e.prototype.describe=function(){var t=this.calledFunction.definition;return t?t.parameters[this.num].declaredEntity.describe():{message:"Parameter #"+(this.num+1)+" of the called function"}},e}(h);e.PassByValueParameterEntity=T;var x=function(t){function e(e,n,r){var a=t.call(this,n)||this;return a.calledFunction=e,a.type=n,a.num=r,o.assert(i.sameType(e.type.paramTypes[r],n),"Inconsistent type for parameter entity."),a}return r(e,t),e.prototype.bindTo=function(t,e){var n=t.sim.topFunction(),r=n.model.parameters[this.num].declaredEntity;if(!(r instanceof b))return o.assertFalse("Pass by reference used with non-reference parameter.");r.bindTo(n,e)},e.prototype.describe=function(){var t=this.calledFunction.definition;return t?t.parameters[this.num].declaredEntity.describe():{message:"Parameter #"+(this.num+1)+" of the called function"}},e}(h);e.PassByReferenceParameterEntity=x;var E=function(t){function e(e,n){var r=t.call(this,e.type.elemType)||this;return r.arrayEntity=e,r.index=n,r}return r(e,t),e.prototype.runtimeLookup=function(t){return this.arrayEntity.runtimeLookup(t).getArrayElemSubobject(this.index)},e.prototype.describe=function(){var t=this.arrayEntity.describe(),e={message:"element "+this.index+" of "+t.message};return t.name&&(e.name=t.name+"["+this.index+"]"),e},e}(h);e.ArraySubobjectEntity=E;var A=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.creator=n,o.owner=r,o.name=name,o}return r(e,t),e.prototype.setOwner=function(t){this.owner=t},e.prototype.objectInstance=function(t){var e=t.sim.memory.allocateTemporaryObject(this);return t.containingFullExpression.temporaryObjects[this.entityId]=e,e},e.prototype.runtimeLookup=function(t){return t instanceof u.RuntimePotentialFullExpression?t.containingFullExpression.temporaryObjects[this.entityId]:o.assertFalse()},e.prototype.describe=function(){return{message:this.name}},e._name="TemporaryObjectEntity",e}(h);e.TemporaryObjectEntity=A;var C=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.qualifiedName="::"+r.name,r}return r(e,t),e.prototype.isStaticallyBound=function(){return!0},Object.defineProperty(e.prototype,"isVirtual",{get:function(){return!1},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.name},e.prototype.nameString=function(){return this.name},e.prototype.mergeInto=function(t){if(Array.isArray(t)){var e=O(t,this.type);if(!e)return t.push(this),this;if(!this.type.sameReturnType(e.type))throw c.CPPError.declaration.func.returnTypesMatch([this.declaration,e.declaration],this.name);if(!i.sameType(this.type,e.type))throw c.CPPError.declaration.type_mismatch(this.declaration,this,e);return e}throw c.CPPError.declaration.type_mismatch(this.declaration,this,t)},e.prototype.link=function(t){if(t&&Array.isArray(t)){var e=S(t,this.type);e?this.type.sameReturnType(e.declaration.type)?this.definition=e:this.declaration.addNote(c.CPPError.link.func.returnTypesMatch(this.declaration,this)):this.declaration.addNote(c.CPPError.link.func.no_matching_overload(this.declaration,this))}else this.declaration.addNote(c.CPPError.link.func.def_not_found(this.declaration,this))},e.prototype.isMain=function(){return"::main"===this.qualifiedName},e.prototype.describe=function(){throw new Error("Method not implemented.")},e}(y);function O(t,e){return t.find(function(t){return e.sameSignature(t.type)})}function S(t,e){return t.find(function(t){return e.sameSignature(t.declaration.type)})}e.FunctionEntity=C,e.selectOverloadedEntity=O,e.selectOverloadedDefinition=S},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(54)),o=n(0);function a(t,e){var n=t._act[e.category];n?n.call(t,e):t._act._default?t._act._default.call(t,e):o.assert(!1)}e.addListener=function(t,e,n){t.observable.addListener(e,n)},e.messageResponse=function(t){return function(e,n,r){e._act||(e._act={}),e._act[t||n]=e[n]}};var u=function(){function t(t){this.universalObservers=[],this.observers={},this.source=t}return t.prototype.send=function(t,e){if(!this.source.silent){var n={category:t,data:e,source:this.source},r=this.observers[n.category];if(r)for(var i=0;i<r.length;++i)a(r[i],n);for(i=0;i<this.universalObservers.length;++i)a(this.universalObservers[i],n)}},t.prototype.addListener=function(t,e){if(e)if(Array.isArray(e))for(var n=0;n<e.length;++n)this.addListener(t,e[n]);else this.observers[e]||(this.observers[e]=[]),this.observers[e].push(t),this.listenerAdded(t,e);else this.universalObservers.push(t),this.listenerAdded(t);return this},t.prototype.removeListener=function(t,e){if(e){var n=this.observers[e];n&&i.default(n,t),this.listenerRemoved(t,e)}else{for(var r in this.observers)this.removeListener(t,r);i.default(this.universalObservers,t),this.listenerRemoved(t)}return this},t.prototype.listenerAdded=function(t,e){},t.prototype.listenerRemoved=function(t,e){},t}();e.Observable=u},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(23),o=n(1),a=n(3),u=n(4),s=n(7),c=n(0),l=n(11),f=n(10),p=n(22),h=n(8);e.readValueWithAlert=function(t,e){var n=t.readValue();if(!n.isValid){var r=t.describe(),o="The value you just got out of "+(r.name||r.message)+" isn't valid. It might be uninitialized or it could have come from a dead object.";0===n.rawValue&&(o+="\n\n(Note: The value just happens to be zero. Don't be fooled! Uninitialized memory isn't guaranteed to be zero.)"),e.eventOccurred(i.SimulationEvent.UNDEFINED_BEHAVIOR,o,!0)}return n};var d={comma_expression:function(t,e){return b.createFromAST(t,e)},ternary_expression:function(t,e){return g.createFromAST(t,e)},assignment_expression:function(t,e){return R.createFromAST(t,e)},compound_assignment_expression:function(t,e){return new m(e,"compound assignment").setAST(t)},arithmetic_binary_operator_expression:function(t,e){return q.createFromAST(t,e)},relational_binary_operator_expression:function(t,e){return Y.createFromAST(t,e)},logical_binary_operator_expression:function(t,e){return J.createFromAST(t,e)},pointer_to_member_expression:function(t,e){return new m(e,"pointer-to-member").setAST(t)},c_style_cast_expression:function(t,e){return new m(e,"c-style cast").setAST(t)},prefix_increment_expression:function(t,e){return new m(e,"prefix increment").setAST(t)},prefix_decrement_expression:function(t,e){return new m(e,"prefix decrement").setAST(t)},dereference_expression:function(t,e){return new m(e,"dereference").setAST(t)},address_of_expression:function(t,e){return new m(e,"address-of").setAST(t)},unary_plus_expression:function(t,e){return new m(e,"unary plus").setAST(t)},unary_minus_expression:function(t,e){return new m(e,"unary minus").setAST(t)},logical_not_expression:function(t,e){return new m(e,"logical not").setAST(t)},bitwise_not_expression:function(t,e){return new m(e,"bitwise not").setAST(t)},sizeof_expression:function(t,e){return new m(e,"sizeof").setAST(t)},sizeof_type_expression:function(t,e){return new m(e,"sizeof (type)").setAST(t)},new_expression:function(t,e){return new m(e,"new").setAST(t)},delete_expression:function(t,e){return new m(e,"delete").setAST(t)},delete_array_expression:function(t,e){return new m(e,"delete[]").setAST(t)},static_cast_expression:function(t,e){return new m(e,"static cast").setAST(t)},dynamic_cast_expression:function(t,e){return new m(e,"dynamic cast").setAST(t)},reinterpret_cast_expression:function(t,e){return new m(e,"reinterpret cast").setAST(t)},const_cast_expression:function(t,e){return new m(e,"const cast").setAST(t)},subscript_expression:function(t,e){return new m(e,"subscript").setAST(t)},function_call_expression:function(t,e){return p.FunctionCallExpression.createFromAST(t,e)},dot_expression:function(t,e){return new m(e,"dot operator").setAST(t)},arrow_expression:function(t,e){return new m(e,"arrow operator").setAST(t)},postfix_increment_expression:function(t,e){return new m(e,"postfix increment").setAST(t)},postfix_decrement_expression:function(t,e){return new m(e,"postfix decrement").setAST(t)},construct_expression:function(t,e){return new m(e,"construct expression").setAST(t)},identifier_expression:function(t,e){return et.createFromAST(t,e)},this_expression:function(t,e){return new m(e,"this pointer").setAST(t)},numeric_literal:function(t,e){return ut.createFromAST(t,e)}};function y(t,e){return d[t.construct_type](t,e)}e.createExpressionFromAST=y;var m=function(t){function e(e,n){var r=t.call(this,e)||this;return r.type=void 0,r.valueCategory=void 0,r.addNote(a.CPPError.lobster.unsupported_feature(r,n)),r}return r(e,t),e.prototype.createRuntimeExpression=function(t){throw new Error("Cannot create a runtime instance of an unsupported construct.")},e.prototype.describeEvalResult=function(t){return{message:"an unsupported expression"}},e}(h.Expression);e.UnsupportedExpression=m;var v=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=0,r.subexpressions=[],r}return r(e,t),e.prototype.setSubexpressions=function(t){this.subexpressions=t},e.prototype.upNextImpl=function(){if(0===this.index){for(var t=this.subexpressions.length-1;t>=0;--t)this.sim.push(this.subexpressions[t]);this.index=1}},e.prototype.stepForwardImpl=function(){this.operate(),this.done()},e}(h.RuntimeExpression);e.SimpleRuntimeExpression=v;var b=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.type=r.type,i.valueCategory=r.valueCategory,i.attach(i.left=n),i.attach(i.right=r),i}return r(e,t),e.createFromAST=function(t,n){return new e(n,y(t.left,n),y(t.right,n))},e.prototype.createRuntimeExpression=function(t){return new _(this,t)},e.prototype.describeEvalResult=function(t){return this.right.describeEvalResult(t)},e.constructKind=Symbol("Comma"),e}(h.Expression);e.CommaExpression=b;var _=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.right=r.model.right.createRuntimeExpression(r),r.left=r.model.left.createRuntimeExpression(r),r.setSubexpressions([r.left,r.right]),r}return r(e,t),e.prototype.operate=function(){this.setEvalResult(this.right.evalResult)},e}(v);e.RuntimeComma=_;var g=function(t){function e(e,n,r,i){var o,a=t.call(this,e)||this;return n.isWellTyped()&&(n=a.compileCondition(n)),r.isWellTyped()&&i.isWellTyped()&&(r=(o=a.compileConsequences(r,i)).then,i=o.otherwise),a.attach(a.condition=n),a.attach(a.then=r),a.attach(a.otherwise=i),a.type=r.type,a.valueCategory=r.valueCategory,a}return r(e,t),e.createFromAST=function(t,n){return new e(n,y(t.condition,n),y(t.then,n),y(t.otherwise,n))},e.prototype.compileCondition=function(t){return t=l.standardConversion(t,new o.Bool),o.isType(t.type,o.Bool)||this.addNote(a.CPPError.expr.ternary.condition_bool(t,t.type)),t},e.prototype.compileConsequences=function(t,e){return t.isPrvalue()&&e.isLvalue()?e=l.convertToPRValue(e):e.isPrvalue()&&t.isLvalue()&&(t=l.convertToPRValue(t)),o.sameType(t.type,e.type)||this.addNote(a.CPPError.lobster.ternarySameType(this,t.type,e.type)),(o.isType(t.type,o.VoidType)||o.isType(e.type,o.VoidType))&&this.addNote(a.CPPError.lobster.ternaryNoVoid(this)),t.valueCategory!==e.valueCategory&&this.addNote(a.CPPError.expr.ternary.sameValueCategory(this)),{then:t,otherwise:e}},e.prototype.createRuntimeExpression=function(t){return new w(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(h.Expression);e.TernaryExpression=g;var w=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index="condition",r.condition=r.model.condition.createRuntimeExpression(r),r.then=r.model.then.createRuntimeExpression(r),r.otherwise=r.model.otherwise.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){"condition"===this.index?(this.sim.push(this.condition),this.index="branch"):"branch"===this.index&&(this.condition.evalResult.rawValue?this.sim.push(this.then):this.sim.push(this.otherwise),this.index="operate")},e.prototype.stepForwardImpl=function(){this.setEvalResult(this.then?this.then.evalResult:this.otherwise.evalResult),this.sim.pop()},e}(h.RuntimeExpression);e.RuntimeTernary=w;var R=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.valueCategory="lvalue",n.isWellTyped()&&r.isWellTyped()?(r=l.standardConversion(r,n.type.cvUnqualified()),n.valueCategory&&"lvalue"!=n.valueCategory&&i.addNote(a.CPPError.expr.assignment.lhs_lvalue(i)),n.type.isConst&&i.addNote(a.CPPError.expr.assignment.lhs_const(i)),r.isWellTyped()&&!o.sameType(r.type,n.type.cvUnqualified())&&i.addNote(a.CPPError.expr.assignment.convert(i,n,r)),i.type=n.type,i.attach(i.lhs=n),i.attach(i.rhs=r),i):(i.attach(i.lhs=n),i.attach(i.rhs=r),i)}return r(e,t),e.createFromAST=function(t,n){return new e(n,y(t.lhs,n),y(t.rhs,n))},e.prototype.createRuntimeExpression=function(t){return new T(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e.prototype.isTailChild=function(t){return{isTail:!1,reason:"The assignment itself will happen after the recursive call returns.",others:[this]}},e.prototype.explain=function(t,e){var n=this.lhs.describeEvalResult(0),r=this.rhs.describeEvalResult(0);return{message:"The value of "+(r.name||r.message)+" will be assigned to "+(n.name||n.message)+"."}},e}(h.Expression);e.AssignmentExpression=R;var T=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.lhs=r.model.lhs.createRuntimeExpression(r),r.rhs=r.model.rhs.createRuntimeExpression(r),r.setSubexpressions([r.rhs,r.lhs]),r}return r(e,t),e.prototype.operate=function(){this.lhs.evalResult.writeValue(this.rhs.evalResult),this.setEvalResult(this.lhs.evalResult)},e}(v);function x(t,e){return t+e}function E(t,e){return t-e}function A(t,e){return t*e}function C(t,e){return Math.trunc(t/e)}function O(t,e){return t/e}function S(t,e){return t-C(t,e)*e}function P(t,e){return t<e}function j(t,e){return t>e}function I(t,e){return t<=e}function F(t,e){return t>=e}function N(t,e){return t==e}function k(t,e){return t==e}function z(t,e){return t&e}function V(t,e){return t^e}function L(t,e){return t|e}function B(t,e){return t<<e}function D(t,e){return t>>>e}e.RuntimeAssignment=T,e.add=x,e.sub=E,e.mult=A,e.intDiv=C,e.floatDiv=O,e.mod=S,e.lt=P,e.gt=j,e.lte=I,e.gte=F,e.eq=N,e.ne=k,e.bitAnd=z,e.bitXor=V,e.bitOr=L,e.bitShiftLeft=B,e.bitShiftRight=D;var M=function(t){function e(e,n){var r=t.call(this,e)||this;return r.valueCategory="prvalue",r.operator=n,r}return r(e,t),e}(h.Expression);e.BinaryOperator=M;var U=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(v);e.RuntimeBinaryOperator=U;var W={"+":function(t,e){return t.combine(e,x)},"-":function(t,e){return t.combine(e,E)},"*":function(t,e){return t.combine(e,A)},"/":function(t,e){return t.type.isIntegralType()?t.combine(e,C):t.combine(e,O)},"%":function(t,e){return t.combine(e,S)},"&":function(t,e){return t.combine(e,z)},"^":function(t,e){return t.combine(e,V)},"|":function(t,e){return t.combine(e,L)},"<<":function(t,e){return t.combine(e,B)},">>":function(t,e){return t.combine(e,D)}},q=function(t){function e(e,n,r,i){var u=t.call(this,e,i)||this;if(!n.isWellTyped()||!r.isWellTyped())return u.attach(u.left=n),u.attach(u.right=r),u;if(!n.isArithmeticTyped()||!r.isArithmeticTyped())return u.addNote(a.CPPError.expr.binary.arithmetic_operands(u,u.operator,n,r)),u.attach(u.left=n),u.attach(u.right=r),u;if(!("%"!==i&&"<<"!==i&&">>"!=i||n.isIntegralTyped()&&r.isIntegralTyped()))return u.addNote(a.CPPError.expr.binary.arithmetic_operands(u,u.operator,n,r)),u.attach(u.left=n),u.attach(u.right=r),u;var s=l.usualArithmeticConversions(n,r),c=s[0],f=s[1];return o.sameType(c.type,f.type)||u.addNote(a.CPPError.expr.invalid_binary_operands(u,u.operator,c,f)),u.type=c.type,u.attach(u.left=c),u.attach(u.right=f),u}return r(e,t),e.createFromAST=function(t,n){var r=y(t.left,n),i=y(t.right,n),o=t.operator;return"-"===o&&(r.isPointerTyped()||r.isBoundedArrayTyped())&&(i.isPointerTyped()||i.isBoundedArrayTyped())?new G(n,l.convertToPRValue(r),l.convertToPRValue(i)):"-"!==o&&"+"!==o||!((r.isPointerTyped()||r.isBoundedArrayTyped())&&i.isIntegralTyped()||(i.isPointerTyped()||i.isBoundedArrayTyped())&&r.isIntegralTyped())?new e(n,r,i,o):new Q(n,l.convertToPRValue(r),l.convertToPRValue(i))},e.prototype.createRuntimeExpression=function(t){return new $(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(M),$=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.left=r.model.left.createRuntimeExpression(r),r.right=r.model.right.createRuntimeExpression(r),r.setSubexpressions([r.left,r.right]),r}return r(e,t),e.prototype.operate=function(){this.setEvalResult(W[this.model.operator](this.left.evalResult,this.right.evalResult))},e}(U);e.RuntimeArithmeticBinaryOperator=$;var G=function(t){function e(e,n,r){var i=t.call(this,e,"-")||this;return i.valueCategory="prvalue",i.attach(i.left=n),i.attach(i.right=r),i.type=new o.Int,i}return r(e,t),e.prototype.createRuntimeExpression=function(t){return new H(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(M);e.PointerDifference=G;var H=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.left=r.model.left.createRuntimeExpression(r),r.right=r.model.right.createRuntimeExpression(r),r.setSubexpressions([r.left,r.right]),r}return r(e,t),e.prototype.operate=function(){var t=this.left.evalResult.pointerDifference(this.right.evalResult),e=this.left.model.type.isType(o.ArrayPointer)?this.left.model.type.arrayObject:null,n=this.right.model.type.isType(o.ArrayPointer)?this.right.model.type.arrayObject:null;t.rawEquals(0)||(!e&&n?(this.sim.eventOccurred(i.SimulationEvent.UNDEFINED_BEHAVIOR,"The left pointer in this subtraction is not from an array, so the resulting difference is not meaningful.",!0),t=t.invalidated()):e&&!n?(this.sim.eventOccurred(i.SimulationEvent.UNDEFINED_BEHAVIOR,"The right pointer in this subtraction is not from an array, so the resulting difference is not meaningful.",!0),t=t.invalidated()):e&&n&&e!==n&&(this.sim.eventOccurred(i.SimulationEvent.UNDEFINED_BEHAVIOR,"The pointers in this subtraction are pointing into two different arrays, so the resulting difference is not meaningful.",!0),t=t.invalidated())),this.setEvalResult(t)},e}(U);e.RuntimePointerDifference=H;var Q=function(t){function e(e,n,r){var i=t.call(this,e,"+")||this;return i.attach(i.left=n),i.attach(i.right=r),n.isWellTyped()&&r.isWellTyped()?(n.isPointerTyped()&&r.isIntegralTyped()?(i.pointerOnLeft=!0,i.pointer=n,i.offset=r,i.type=i.pointer.type):n.isIntegralTyped()&&r.isPointerTyped()?(i.pointerOnLeft=!1,i.pointer=r,i.offset=n,i.type=i.pointer.type):i.addNote(a.CPPError.expr.invalid_binary_operands(i,i.operator,n,r)),i):i}return r(e,t),e.prototype.createRuntimeExpression=function(t){return new Z(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(M);e.PointerOffset=Q;var Z=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.pointer=r.model.pointer.createRuntimeExpression(r),r.offset=r.model.offset.createRuntimeExpression(r),e.pointerOnLeft?(r.left=r.pointer,r.right=r.offset):(r.left=r.offset,r.right=r.pointer),r.setSubexpressions([r.left,r.right]),r}return r(e,t),e.prototype.operate=function(){var t=this.pointer.evalResult.pointerOffset(this.offset.evalResult);this.setEvalResult(t);var e=t.type;e.isType(o.ArrayPointer)?t.rawValue<e.min()||(e.onePast(),t.rawValue):this.sim.eventOccurred(i.SimulationEvent.UNDEFINED_BEHAVIOR,"Uh, I don't think you're supposed to do arithmetic with that pointer. It's not pointing into an array.",!0)},e}(U);e.RuntimePointerOffset=Z;var K={"<":function(t,e){return t.compare(e,P)},">":function(t,e){return t.compare(e,j)},"<=":function(t,e){return t.compare(e,I)},">=":function(t,e){return t.compare(e,F)},"==":function(t,e){return t.compare(e,N)},"!=":function(t,e){return t.compare(e,k)}},Y=function(t){function e(e,n,r,i){var u=t.call(this,e,i)||this;if(u.type=o.Bool.BOOL,!n.isWellTyped()||!r.isWellTyped())return u.attach(u.left=n),u.attach(u.right=r),u;if(!n.isArithmeticTyped()||!r.isArithmeticTyped())return u.addNote(a.CPPError.expr.binary.arithmetic_operands(u,u.operator,n,r)),u.attach(u.left=n),u.attach(u.right=r),u;var s=l.usualArithmeticConversions(n,r),c=s[0],f=s[1];return o.sameType(c.type,f.type)||u.addNote(a.CPPError.expr.invalid_binary_operands(u,u.operator,c,f)),u.attach(u.left=c),u.attach(u.right=f),u}return r(e,t),e.createFromAST=function(t,n){return new e(n,y(t.left,n),y(t.right,n),t.operator)},e.prototype.createRuntimeExpression=function(t){return new X(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(M),X=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.left=r.model.left.createRuntimeExpression(r),r.right=r.model.right.createRuntimeExpression(r),r.setSubexpressions([r.left,r.right]),r}return r(e,t),e.prototype.operate=function(){this.setEvalResult(K[this.model.operator](this.left.evalResult,this.right.evalResult))},e}(U);e.RuntimeRelationalBinaryOperator=X;var J=function(t){function e(e,n,r,i){var a=t.call(this,e,i)||this;return a.type=new o.Bool,n.isWellTyped()&&r.isWellTyped()?(a.attach(a.left=a.compileLogicalSubexpression(n)),a.attach(a.right=a.compileLogicalSubexpression(r))):(a.attach(a.left=n),a.attach(a.right=r)),a}return r(e,t),e.prototype.compileLogicalSubexpression=function(t){return t=l.standardConversion(t,o.Bool.BOOL),o.isType(t.type,o.Bool)||this.addNote(a.CPPError.expr.binary.boolean_operand(this,this.operator,t)),t},e.createFromAST=function(t,n){return new e(n,y(t.left,n),y(t.right,n),t.operator)},e.prototype.createRuntimeExpression=function(t){return new tt(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(M),tt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index="left",r.left=r.model.left.createRuntimeExpression(r),r.right=r.model.right.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){if("left"===this.index)this.sim.push(this.left),this.index="right";else if("right"===this.index){var t="&&"===this.model.operator?0:1;this.hasShortCircuited=this.left.evalResult.rawEquals(t),this.hasShortCircuited||this.sim.push(this.right),this.index="operate"}},e.prototype.stepForwardImpl=function(){this.hasShortCircuited?this.setEvalResult(this.left.evalResult):this.setEvalResult(this.operate(this.left.evalResult,this.right.evalResult)),this.sim.pop()},e.prototype.operate=function(t,e){var n=this;return t.combine(e,function(t,e){return"&&"==n.model.operator?t&&e:t||e})},e}(h.RuntimeExpression);e.RuntimeLogicalBinaryOperator=tt;var et=function(t){function e(e,n){var r=t.call(this,e)||this;r.valueCategory="lvalue",r.name=n,f.checkIdentifier(r,n,r);var i=r.context.contextualScope.lookup(r.name);if(Array.isArray(i))if(1===i.length)r.entity=i[0];else if(r.context.contextualParameterTypes){var o=dt(i,r.context.contextualParameterTypes,r.context.contextualReceiverType);o.selected?r.entity=o.selected:r.entity=o.candidates[0].candidate}else r.addNote(a.CPPError.iden.ambiguous(r,r.name));else r.entity=i;return r.type=r.entity&&r.entity.type,r}return r(e,t),e.createFromAST=function(t,n){return new e(n,t.identifier)},e.prototype.createRuntimeExpression=function(t){return this.entity instanceof u.FunctionEntity?new rt(this,t):new nt(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(h.Expression);e.IdentifierExpression=et;var nt=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.prototype.upNextImpl=function(){this.setEvalResult(this.model.entity.runtimeLookup(this)),this.sim.pop()},e.prototype.stepForwardImpl=function(){},e}(h.RuntimeExpression);e.RuntimeObjectIdentifier=nt;var rt=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.prototype.upNextImpl=function(){this.setEvalResult(this.model.entity)},e.prototype.stepForwardImpl=function(){},e}(h.RuntimeExpression);e.RuntimeFunctionIdentifier=rt;var it={int:parseInt,float:parseFloat,double:parseFloat,bool:function(t){return t?1:0},char:function(t){return c.escapeString(t).charCodeAt(0)}},ot={int:o.Int.INT,float:o.Double.DOUBLE,double:o.Double.DOUBLE,bool:o.Bool.BOOL,char:o.Char.CHAR};function at(t){return it[t.type](t.value)}e.parseNumericLiteralValueFromAST=at;var ut=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.valueCategory="prvalue",i.type=n,i.value=new s.Value(r,i.type),i}return r(e,t),e.createFromAST=function(t,n){return new e(n,ot[t.type],at(t))},e.prototype.createRuntimeExpression=function(t){return new st(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(h.Expression);e.NumericLiteral=ut;var st=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.prototype.upNextImpl=function(){this.setEvalResult(this.model.value),this.sim.pop()},e.prototype.stepForwardImpl=function(){},e}(h.RuntimeExpression);e.RuntimeNumericLiteral=st;var ct=function(t){function e(e,n){var r=t.call(this,e)||this;return r.attach(r.subexpression=n),r.type=n.type,r.valueCategory=n.valueCategory,r}return r(e,t),e.createFromAST=function(t,n){return new e(n,y(t.subexpression,n))},e.prototype.createRuntimeExpression=function(t){return new ft(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(h.Expression);e.Parentheses=ct;var lt=0,ft=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=lt,r.subexpression=r.model.subexpression.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){this.index===lt?(this.sim.push(this.subexpression),this.index=1):(this.setEvalResult(this.subexpression.evalResult),this.sim.pop())},e.prototype.stepForwardImpl=function(){},e}(h.RuntimeExpression);e.RuntimeParentheses=ft;var pt={program:void 0,translationUnit:void 0,contextualScope:void 0},ht=function(t){function e(e,n){var r=t.call(this,pt)||this;return r.type=e,r.valueCategory=n,r}return r(e,t),e.prototype.createRuntimeExpression=function(t){throw new Error("Auxiliary expressions must never be instantiated at runtime.")},e.prototype.describeEvalResult=function(t){throw new Error("Auxiliary expressions have no description")},e}(h.Expression);function dt(t,e,n){var r=[],i=t.map(function(t){var n=[],i=t.type.paramTypes;return e.length!==i.length?n.push(a.CPPError.param.numParams(t.declaration)):e.forEach(function(e,r){if(e){var u=i[r];if(u.isReferenceType())o.referenceCompatible(e,u.refTo)||n.push(a.CPPError.param.paramReferenceType(t.declaration,e,u));else{var s=new ht(e,"prvalue"),c=l.standardConversion(s,u);o.sameType(c.type,u)||n.push(a.CPPError.param.paramType(t.declaration,e,u))}}}),0==n.length&&r.push(t),{candidate:t,notes:n}}),u=r[0]?r[0]:void 0;return{candidates:i,viable:r,selected:u}}e.AuxiliaryExpression=ht,e.overloadResolution=dt},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),o=n(5),a=n(9),u=n(1),s=r(n(24)),c=n(4),l=function(){function t(t,e,n){void 0===n&&(n=!0),this.rawValue=t,this.type=e,this._isValid=n}return Object.defineProperty(t.prototype,"isValid",{get:function(){return this._isValid&&this.type.isValueValid(this.rawValue)},enumerable:!0,configurable:!0}),t.prototype.clone=function(e){return void 0===e&&(e=this.rawValue),new t(e,this.type,this.isValid)},t.prototype.invalidated=function(){return new t(this.rawValue,this.type,!1)},t.prototype.equals=function(e){return new t(this.rawValue===e.rawValue?1:0,new u.Bool,this.isValid&&e.isValid)},t.prototype.rawEquals=function(t){return this.rawValue===t},t.prototype.combine=function(e,n){return i.assert(u.sameType(this.type,e.type)),new t(n(this.rawValue,e.rawValue),this.type,this.isValid&&e.isValid)},t.prototype.pointerOffset=function(e,n){return void 0===n&&(n=!1),new t(n?this.rawValue-this.type.ptrTo.size*e.rawValue:this.rawValue+this.type.ptrTo.size*e.rawValue,this.type,this.isValid&&e.isValid)},t.prototype.pointerDifference=function(e){return new t((this.rawValue-e.rawValue)/this.type.ptrTo.size,new u.Int,this.isValid&&e.isValid)},t.prototype.compare=function(e,n){return i.assert(u.sameType(this.type,e.type)),new t(n(this.rawValue,e.rawValue)?1:0,new u.Bool,this.isValid&&e.isValid)},t.prototype.modify=function(e){return new t(e(this.rawValue),this.type,this.isValid)},t.prototype.toString=function(){return this.valueString()},t.prototype.valueString=function(){return this.type.valueToString(this.rawValue)},t.prototype.valueToOstreamString=function(){return this.type.valueToOstreamString(this.rawValue)},t.prototype.setRawValue=function(t){this.rawValue=t,this.isValid=this.isValid&&this.type.isValueValid(this.rawValue)},t.prototype.describe=function(){return{message:this.valueString()}},t._name="Value",t}();e.Value=l;var f=function(){function t(t,e,n){this.observable=new o.Observable(this),this.capacity=t||1e4,this.staticCapacity=e||Math.floor(this.capacity/10),this.stackCapacity=n||Math.floor((this.capacity-this.staticCapacity)/2),this.heapCapacity=this.capacity-this.staticCapacity-this.stackCapacity,this.staticStart=0,this.staticEnd=this.staticStart+this.staticCapacity,this.stackStart=this.staticEnd,this.stackEnd=this.stackStart+this.stackCapacity,this.heapStart=this.stackEnd,this.heapEnd=this.heapStart+this.heapCapacity,this.temporaryStart=this.heapEnd+100,this.temporaryCapacity=1e4,this.temporaryEnd=this.temporaryStart+this.temporaryCapacity,i.assert(this.staticCapacity<this.capacity&&this.stackCapacity<this.capacity&&this.heapCapacity<this.capacity),i.assert(this.heapEnd==this.capacity),this.reset()}return t.prototype.reset=function(){this.bytes=new Array(this.capacity+this.temporaryCapacity);for(var t=0;t<this.capacity+this.temporaryCapacity;++t)this.bytes[t]=Math.floor(100*Math.random());this.objects={},this.stringLiteralMap={},this.staticTop=this.staticStart+4,this.staticObjects={},this.temporaryBottom=this.temporaryStart,this.stack=new p(this,this.staticEnd),this.heap=new h(this,this.heapEnd),this.temporaryObjects={},this.observable.send("reset")},t.prototype.getByte=function(t){return this.bytes[t]},t.prototype.readByte=function(t){return this.bytes[t]},t.prototype.getBytes=function(t,e){return this.bytes.slice(t,t+e)},t.prototype.readBytes=function(t,e){var n=t+e;return this.bytes.slice(t,n)},t.prototype.setByte=function(t,e){this.bytes[t]=e},t.prototype.writeByte=function(t,e){this.bytes[t]=e},t.prototype.setBytes=function(t,e){for(var n=0;n<e.length;++n)this.bytes[t+n]=e[n]},t.prototype.writeBytes=function(t,e){for(var n=0;n<e.length;++n)this.bytes[t+n]=e[n]},t.prototype.dereference=function(t){i.assert(t.type.isObjectPointer());var e=t.rawValue;if(t.type instanceof u.ArrayPointer)return t.type.arrayObject.getArrayElemSubobjectByAddress(e);if(t.type instanceof u.ObjectPointer&&t.type.isValueValid(e))return t.type.pointedObject;var n=this.objects[e];return n&&(u.similarType(n.type,t.type.ptrTo)||u.subType(n.type,t.type.ptrTo))?n:new a.InvalidObject(t.type,this,e)},t.prototype.allocateObject=function(t){this.objects[t.address]=t},t.prototype.killObject=function(t,e){var n=this.objects[t];n&&n.isAlive&&n.kill(e)},t.prototype.allocateStringLiteral=function(t){var e=t.str;if(!this.stringLiteralMap[e]){var n=t.objectInstance(this,this.staticTop);this.allocateObject(n),this.stringLiteralMap[e]=n,u.Char.jsStringToNullTerminatedCharArray(e).forEach(function(t,e){n.getArrayElemSubobject(e).setValue(new l(t,u.Char.CHAR))}),this.staticTop+=n.size}},t.prototype.getStringLiteral=function(t){return this.stringLiteralMap[t]},t.prototype.allocateStatic=function(t){var e=new a.StaticObject(t,t.declaredEntity.type,this,this.staticTop);this.allocateObject(e),this.staticTop+=e.size,this.staticObjects[t.declaredEntity.qualifiedName]=e},t.prototype.staticLookup=function(t){return this.staticObjects[t.qualifiedName]},t.prototype.allocateTemporaryObject=function(t){var e=new a.TemporaryObject(t.type,this,this.temporaryBottom,t.name);return this.allocateObject(e),this.temporaryBottom+=t.type.size,this.temporaryObjects[t.entityId]=e,this.observable.send("temporaryObjectAllocated",e),e},t.prototype.deallocateTemporaryObject=function(t,e){this.killObject(t.address,e),delete this.temporaryObjects[t.address],this.observable.send("temporaryObjectDeallocated",t)},t._name="Memory",t}();e.Memory=f;var p=function(){function t(t,e){this.observable=new o.Observable(this),this.memory=t,this.start=e,this.top=e,this.frames=[]}return t.prototype.topFrame=function(){return s.default(this.frames)},t.prototype.pushFrame=function(t){var e=new d(this.memory,this.top,t);return this.top+=e.size,this.frames.push(e),this.memory.observable.send("framePushed",e),e},t.prototype.popFrame=function(t){var e=this.frames.pop();if(!e)return i.assertFalse();e.pop(t),this.top-=e.size,this.memory.observable.send("framePopped",e)},t.prototype.toString=function(){for(var t='<ul class="stackFrames">',e=0;e<this.frames.length;++e){t+="<li>"+this.frames[e].toString()+"</li>"}return t+="</ul>"},t._name="MemoryStack",t}(),h=function(){function t(t,e){this.observable=new o.Observable(this),this.memory=t,this.end=e,this.bottom=e,this.objectMap={}}return t._name="MemoryHeap",t}(),d=function(){function t(t,e,n){var r=this;this.observable=new o.Observable(this),this.localObjectsByEntityId={},this.localReferencesByEntityId={},this.memory=t,this.start=e,this.func=n,this.size=0;var i=this.start;n.model.context.functionLocals.localObjects.forEach(function(e){if(e instanceof c.AutoEntity){var n=new a.AutoObject(e.definition,e.type,t,i);r.localObjectsByEntityId[e.entityId]=n,i+=n.size,r.size+=n.size}}),this.end=this.start+this.size}return t.prototype.toString=function(){var t="";for(var e in this.localObjectsByEntityId){t+="<span>"+this.localObjectsByEntityId[e]+"</span>\n"}return t},t.prototype.getLocalObject=function(t){return this.localObjectsByEntityId[t.entityId]},t.prototype.referenceLookup=function(t){return this.localReferencesByEntityId[t.entityId]||i.assertFalse("Attempt to look up referred object before reference was bound.")},t.prototype.bindReference=function(t,e){this.localReferencesByEntityId[t.entityId]=e},t.prototype.pop=function(t){for(var e in this.localObjectsByEntityId){var n=this.localObjectsByEntityId[e];this.memory.killObject(n.address,t)}},t._name="MemoryFrame",t}();e.MemoryFrame=d},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=function(t){function e(e){var n=t.call(this,e)||this;return n.conversionLength=0,n}return r(e,t),e.prototype.isWellTyped=function(){return!!this.type&&!!this.valueCategory},e.prototype.isTyped=function(t){return!!this.type&&this.type.isType(t)},e.prototype.isObjectTyped=function(){return!!this.type&&this.type.isObjectType()},e.prototype.isAtomicTyped=function(){return!!this.type&&this.type.isAtomicType()},e.prototype.isArithmeticTyped=function(){return!!this.type&&this.type.isArithmeticType()},e.prototype.isIntegralTyped=function(){return!!this.type&&this.type.isIntegralType()},e.prototype.isFloatingPointTyped=function(){return!!this.type&&this.type.isFloatingPointType()},e.prototype.isPointerTyped=function(){return!!this.type&&this.type.isPointerType()},e.prototype.isReferenceTyped=function(){return!!this.type&&this.type.isReferenceType()},e.prototype.isClassTyped=function(){return!!this.type&&this.type.isClassType()},e.prototype.isBoundedArrayTyped=function(){return!!this.type&&this.type.isBoundedArrayType()},e.prototype.isArrayOfUnknownBoundTyped=function(){return!!this.type&&this.type.isArrayOfUnknownBoundType()},e.prototype.isGenericArrayTyped=function(){return!!this.type&&this.type.isGenericArrayType()},e.prototype.isPrvalue=function(){return"prvalue"===this.valueCategory},e.prototype.isLvalue=function(){return"lvalue"===this.valueCategory},e.prototype.isTailChild=function(t){return{isTail:!1}},e}(i.PotentialFullExpression);e.Expression=o,e.allWellTyped=function(t){return t.every(function(t){return t.isWellTyped()})},e.allObjectTyped=function(t){return t.every(function(t){return t.isObjectTyped()})};var a=function(t){function e(e,n){return t.call(this,e,"expression",n)||this}return r(e,t),e.prototype.setEvalResult=function(t){this.evalResult=t},e}(i.RuntimePotentialFullExpression);e.RuntimeExpression=a},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(1),o=n(5),a=n(0),u=n(7),s=function(){return function(t,e,n){this.object=t,this.size=this.object.size,this.memory=e,this.address=n}}(),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.rawValue=function(){var t=this.memory.readBytes(this.address,this.size);return this.object.type.bytesToValue(t)},e.prototype.setRawValue=function(t,e){this.memory.writeBytes(this.address,this.object.type.valueToBytes(t))},e}(s),l=function(t){function e(e,n,r){var i=t.call(this,e,n,r)||this,o=i.address;i.elemObjects=[];for(var a=0;a<i.object.type.length;++a)i.elemObjects.push(new w(i.object,a,n,o)),o+=i.object.type.elemType.size;return i}return r(e,t),e.create=function(t,n,r){return new e(t,n,r)},e.prototype.getArrayElemSubobjectByAddress=function(t){var e=(t-this.address)/this.object.type.elemType.size;return this.getArrayElemSubobject(e)},e.prototype.getArrayElemSubobject=function(t){return 0<=t&&t<this.elemObjects.length?this.elemObjects[t]:new w(this.object,t,this.memory,this.address+t*this.object.type.elemType.size)},e}(s),f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(s),p=function(){function t(t,e,n){this.observable=new o.Observable(this),this.type=t,this.size=t.size,a.assert(0!=this.size,"Size cannot be 0."),this.type instanceof i.BoundedArrayType?this.data=l.create(this,e,n):this.type instanceof i.ClassType?this.data=new f(this,e,n):this.data=new c(this,e,n),this.address=n,this.isAlive=!0,this._isValid=!1}return t.prototype.getArrayElemSubobject=function(t){return this.data.getArrayElemSubobject(t)},t.prototype.getArrayElemSubobjectByAddress=function(t){return this.data.getArrayElemSubobjectByAddress(t)},t.prototype.subobjectValueWritten=function(){this.observable.send("valueWritten")},t.prototype.toString=function(){return"@"+this.address},t.prototype.kill=function(t){this.isAlive=!1,this._isValid=!1,t&&(this.deallocatedBy=t),this.observable.send("deallocated")},t.prototype.getPointerTo=function(){return new u.Value(this.address,new i.ObjectPointer(this))},t.prototype.getValue=function(t){void 0===t&&(t=!1);var e=new u.Value(this.getRawValue(),this.type,this._isValid);return t&&this.observable.send("valueRead",e),e},t.prototype.getRawValue=function(){return this.data.rawValue()},t.prototype.readValue=function(){return this.getValue(!0)},t.prototype.setValue=function(t,e){void 0===e&&(e=!1),this._isValid=t.isValid,a.asMutable(this).type=t.type,this.data.setRawValue(t.rawValue,e),e&&this.observable.send("valueWritten",t),this.onValueSet(e)},t.prototype.onValueSet=function(t){},t.prototype.writeValue=function(t){this.setValue(t,!0)},t.prototype.isValueValid=function(){return this._isValid&&this.type.isValueValid(this.getRawValue())},t.prototype.callReceived=function(){this.observable.send("callReceived",this)},t.prototype.callEnded=function(){this.observable.send("callEnded",this)},t.prototype.setValidity=function(t){this._isValid=t,this.observable.send("validitySet",t)},t}();e.CPPObject=p;var h=function(t){function e(e,n,r,i){var o=t.call(this,n,r,i)||this;return o.def=e,o}return r(e,t),e.prototype.describe=function(){return this.def.declaredEntity.describe()},e}(p);e.AutoObject=h;var d=function(t){function e(e){return t.call(this,i.Int.INT,e,0)||this}return r(e,t),e.prototype.describe=function(){return{message:"The value returned from main."}},e}(p);e.MainReturnObject=d;var y=function(t){function e(e,n,r,i){var o=t.call(this,n,r,i)||this;return o.def=e,o}return r(e,t),e.prototype.describe=function(){return this.def.declaredEntity.describe()},e}(p);e.StaticObject=y;var m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.describe=function(){return{message:"the heap object at 0x"+this.address}},e}(p);e.DynamicObject=m;var v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.describe=function(){return{message:"an invalid object at 0x"+this.address}},e}(p);e.InvalidObject=v;var b=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.describe=function(){return{name:"this",message:"the this pointer"}},e}(p);e.ThisObject=b;var _=function(t){function e(e,n,r){return t.call(this,e,n,r)||this}return r(e,t),e.prototype.describe=function(){return{message:"string literal at 0x"+this.address}},e}(p);e.StringLiteralObject=_;var g=function(t){function e(e,n,r,i){var o=t.call(this,n,r,i)||this;return o.containingObject=e,o}return r(e,t),Object.defineProperty(e.prototype,"isAlive",{get:function(){return this.containingObject.isAlive},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"deallocatedBy",{get:function(){return this.containingObject.deallocatedBy},enumerable:!0,configurable:!0}),e.prototype.onValueSet=function(t){t&&this.containingObject.subobjectValueWritten()},e}(p),w=function(t){function e(e,n,r,i){var o=t.call(this,e,e.type.elemType,r,i)||this;return o.index=n,o}return r(e,t),e.prototype.getPointerTo=function(){return new u.Value(this.address,new i.ArrayPointer(this.containingObject))},e.prototype.describe=function(){var t=this.containingObject.describe(),e={message:"element "+this.index+" of "+t.message};return t.name&&(e.name=t.name+"["+this.index+"]"),e},e}(g);e.ArraySubobject=w;var R=function(t){function e(e,n,r,i){return t.call(this,e,n,r,i)||this}return r(e,t),e.prototype.describe=function(){return{message:"the "+this.type.name+" base of "+this.containingObject.describe().message}},e}(g);e.BaseSubobject=R;var T=function(t){function e(e,n,r,i,o){var a=t.call(this,e,n,i,o)||this;return a.name=r,a}return r(e,t),e.prototype.describe=function(){var t=this.containingObject.describe(),e={message:"the member "+this.name+" of "+t.message};return t.name&&(e.name=t.name+"."+this.name),e},e}(g);e.MemberSubobject=T;var x=function(t){function e(e,n,r,i){var o=t.call(this,e,n,r)||this;return o.name=i,o}return r(e,t),e.prototype.nameString=function(){return"@"+this.address},e.prototype.describe=function(){return name?{name:this.name,message:"the temporary object "+this.name}:{message:"a temporary object"}},e}(p);e.TemporaryObject=x},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3);e.KEYWORDS=new Set(["alignas","continue","friend","register","true","alignof","decltype","goto","reinterpret_cast","try","asm","default","if","return","typedef","auto","delete","inline","short","typeid","bool","do","int","signed","typename","break","double","long","sizeof","union","case","dynamic_cast","mutable","static","unsigned","catch","else","namespace","static_assert","using","char","enum","new","static_cast","virtual","char16_t","explicit","noexcept","struct","void","char32_t","export","nullptr","switch","volatile","class","extern","operator","template","wchar_t","const","false","private","this","while","constexpr","float","protected","thread_local","const_cast","for","public","throw"]),e.ALT_OPS=new Set(["and","and_eq","bitand","bitor","compl","not","not_eq","or","or_eq","xor","xor_eq"]),e.checkIdentifier=function t(n,i,o){i.includes("::")?i.split("::").forEach(function(e){return t(n,e,o)}):(e.KEYWORDS.has(i)&&o.addNote(r.CPPError.iden.keyword(n,i)),e.ALT_OPS.has(i)&&o.addNote(r.CPPError.iden.alt_op(n,i)))},e.createFullyQualifiedName=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return"::"+t.join("::")},e.fullyQualifiedNameToUnqualified=function(t){var e=t.lastIndexOf("::");return-1===e?t:t.slice(e+2)}},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(1),o=n(6),a=n(7),u=n(0),s=function(t){function e(n,r,i){var o=t.call(this,n.context)||this;return o.attach(o.from=n),o.type=r,o.valueCategory=i,o.conversionLength=n instanceof e?n.conversionLength+1:1,o}return r(e,t),e.prototype.createRuntimeExpression=function(t){return new c(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(n(8).Expression);e.ImplicitConversion=s;var c=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.from=r.model.from.createRuntimeExpression(r),r.setSubexpressions([r.from]),r}return r(e,t),e.prototype.operate=function(){this.setEvalResult(this.model.operate(this.from.evalResult))},e}(o.SimpleRuntimeExpression);e.RuntimeImplicitConversion=c;var l=function(t){function e(e){return t.call(this,e,e.type.cvUnqualified(),"prvalue")||this}return r(e,t),e.prototype.operate=function(t){return t.getValue()},e}(s);e.LValueToRValue=l;var f=function(t){function e(e){return t.call(this,e,e.type.adjustToPointerType(),"prvalue")||this}return r(e,t),e.prototype.operate=function(t){return new a.Value(t.address,new i.ArrayPointer(t))},e}(s);e.ArrayToPointer=f;var p=function(t){function e(e,n){return t.call(this,e,n.cvQualified(e.type.isConst,e.type.isVolatile),"prvalue")||this}return r(e,t),e}(s),h=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.prototype.operate=function(t){return new a.Value(t.rawValue,this.type)},e}(p),d=function(t){function e(e,n){var r=t.call(this,e,n)||this;return u.assert(0===e.value.rawValue),r}return r(e,t),e}(h);e.NullPointerConversion=d;var y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.PointerConversion=y;var m=function(t){function e(e){return t.call(this,e,i.Bool.BOOL)||this}return r(e,t),e}(h);e.PointerToBooleanConversion=m;var v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.IntegralPromotion=v;var b=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.IntegralConversion=b;var _=function(t){function e(e){return t.call(this,e,i.Double.DOUBLE)||this}return r(e,t),e}(h);e.FloatingPointPromotion=_;var g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.FloatingPointConversion=g;var w=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.IntegralToFloatingConversion=w;var R=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.operate=function(t){return this.type.isType(i.Bool)?new a.Value(0===t.rawValue?0:1,i.Int.INT):new a.Value(Math.trunc(t.rawValue),i.Int.INT)},e}(p);e.FloatingToIntegralConversion=R;var T=function(t){function e(e,n){var r=t.call(this,e,n,"prvalue")||this;return u.assert(i.similarType(e.type,n)),r}return r(e,t),e.prototype.operate=function(t){return new a.Value(t.rawValue,this.type)},e}(s);function x(t){return t.isBoundedArrayTyped()?new f(t):t.isAtomicTyped()?t.isPrvalue()?t:new l(t):t}function E(t,e){if(i.similarType(t.type,e))return t;if(e.isPointerType()&&t instanceof o.NumericLiteral&&i.isType(t.type,i.Int)&&0===t.value.rawValue)return new d(t,e);if(e.isPointerType()&&e.ptrTo.isClassType()&&t.isPointerTyped()&&t.type.ptrTo.isClassType()&&i.subType(t.type.ptrTo,e.ptrTo))return new y(t,new i.PointerType(e.ptrTo.cvQualified(t.type.ptrTo.isConst,t.type.ptrTo.isVolatile)));if(e.isType(i.Bool)&&t.isPointerTyped())return new m(t);if(e.isType(i.Double)&&t.isTyped(i.Float))return new _(t);if(e.isIntegralType()){if(t.isIntegralTyped())return new b(t,e);if(t.isFloatingPointTyped())return new R(t,e)}if(e.isFloatingPointType()){if(t.isIntegralTyped())return new w(t,e);if(t.isFloatingPointTyped())return new g(t,e)}return t}function A(t,e){return i.sameType(t.type,e)?t:"prvalue"===t.valueCategory&&i.isCvConvertible(t.type,e)?new T(t,e):t}function C(t){return t.isIntegralTyped()&&!t.isTyped(i.Int)?new v(t,i.Int.INT):t}e.QualificationConversion=T,e.convertToPRValue=x,e.typeConversion=E,e.qualificationConversion=A,e.standardConversion=function(t,e,n){if(void 0===n&&(n={}),!t.isAtomicTyped()&&!t.isBoundedArrayTyped())return t;if(!e.isAtomicType())return t;if(!n.suppressLTR){var r=x(t);return r=A(r=E(r,e),e)}return t},e.integralPromotion=C,e.usualArithmeticConversions=function(t,e){var n=x(t),r=x(e);return n.isTyped(i.Double)?[n,r=E(r,i.Double.DOUBLE)]:r.isTyped(i.Double)?[n=E(n,i.Double.DOUBLE),r]:n.isTyped(i.Float)?[n,r=E(r,i.Float.FLOAT)]:r.isTyped(i.Float)?[n=E(n,i.Float.FLOAT),r]:(n.isIntegralTyped()&&(n=C(n)),r.isIntegralTyped()&&(r=C(r)),i.sameType(n.type,r.type),[n,r])}},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=n(4),a=n(1),u=n(0),s=n(3),c=n(11),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.isTailChild=function(t){return{isTail:!0}},e}(i.PotentialFullExpression);e.Initializer=l;var f=function(t){function e(e,n){return t.call(this,e,"initializer",n)||this}return r(e,t),e}(i.RuntimePotentialFullExpression);e.RuntimeInitializer=f;var p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.create=function(t,e){return e.bindTo?new d(t,e):e.type instanceof a.AtomicType?new y(t,e):e.type instanceof a.BoundedArrayType?new v(t,e):u.assertFalse()},e}(l);e.DefaultInitializer=p;var h=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e}(f);e.RuntimeDefaultInitializer=h;var d=function(t){function e(e,n){var r=t.call(this,e)||this;return r.target=n,r.addNote(s.CPPError.declaration.init.referenceBind(r)),r}return r(e,t),e.prototype.createRuntimeInitializer=function(t){return u.assertFalse("A default initializer for a reference is not allowed.")},e.prototype.explain=function(t,e){return u.assertFalse("A default initializer for a reference is not allowed.")},e}(p);e.ReferenceDefaultInitializer=d;var y=function(t){function e(e,n){var r=t.call(this,e)||this;return r.target=n,r}return r(e,t),e.prototype.createRuntimeInitializer=function(t){return new m(this,t)},e.prototype.explain=function(t,e){var n=this.target.describe();return{message:"No initialization will take place. "+(n.name||n.message)+" will have a junk value."}},e}(p);e.AtomicDefaultInitializer=y;var m=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.target=r.model.target.runtimeLookup(r),r}return r(e,t),e.prototype.upNextImpl=function(){this.observable.send("initialized",this.target),this.sim.pop()},e.prototype.stepForwardImpl=function(){},e}(h);e.RuntimeAtomicDefaultInitializer=m;var v=function(t){function e(e,n){var r=t.call(this,e)||this;r.target=n;var i=r.target.type;if(i.elemType instanceof a.AtomicType);else{r.elementInitializers=[];for(var u=0;u<i.length;++u){var c=p.create(e,new o.ArraySubobjectEntity(r.target,u));if(r.elementInitializers.push(c),r.attach(c),c.hasErrors){r.addNote(s.CPPError.declaration.init.array_default_init(r));break}}}return r}return r(e,t),e.prototype.createRuntimeInitializer=function(t){return new b(this,t)},e.prototype.explain=function(t,e){var n=this.target.describe(),r=this.target.type;return 0===r.length?{message:"No initialization is performed for "+(n.name||n.message)+"because the array has length 0."}:r.elemType instanceof a.AtomicType?{message:"No initialization will take place. The elements of "+(n.name||n.message)+" will have junk values."}:{message:"Each element of "+(n.name||n.message)+" will be default-initialized. For example, "+this.elementInitializers[0].explain(t,e)}},e}(p);e.ArrayDefaultInitializer=v;var b=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=0,r.target=r.model.target.runtimeLookup(r),r.model.elementInitializers&&(r.elementInitializers=r.model.elementInitializers.map(function(t){return t.createRuntimeInitializer(r)})),r}return r(e,t),e.prototype.upNextImpl=function(){this.elementInitializers&&this.index<this.elementInitializers.length?this.sim.push(this.elementInitializers[this.index++]):(this.observable.send("initialized",this.target),this.sim.pop())},e.prototype.stepForwardImpl=function(){},e}(h);e.RuntimeArrayDefaultInitializer=b;var _=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.create=function(t,e,n){return e.bindTo?new w(t,e,n):e.type instanceof a.AtomicType?new T(t,e,n):u.assertFalse()},e}(l);e.DirectInitializer=_;var g=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e}(f);e.RuntimeDirectInitializer=g;var w=function(t){function e(e,n,r){var i=t.call(this,e)||this;if(i.target=n,i.args=r,r.forEach(function(t){i.attach(t)}),i.args.length>1)return i.addNote(s.CPPError.declaration.init.referenceBindMultiple(i)),i;if(i.arg=i.args[0],!i.arg.isWellTyped())return i;var o=n.type;return a.referenceCompatible(i.arg.type,o)?"prvalue"!==i.arg.valueCategory||o.isConst?"prvalue"===i.arg.valueCategory&&i.addNote(s.CPPError.lobster.referencePrvalue(i)):i.addNote(s.CPPError.declaration.init.referencePrvalueConst(i)):i.addNote(s.CPPError.declaration.init.referenceType(i,i.arg.type,o)),i}return r(e,t),e.prototype.createRuntimeInitializer=function(t){return new R(this,t)},e.prototype.explain=function(t,e){var n=this.target.describe(),r=this.args[0].describeEvalResult(0);return{message:(n.name||n.message)+" will be bound to "+(r.name||r.message)+"."}},e}(_);e.ReferenceDirectInitializer=w;var R=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.alreadyPushed=!1,r.arg=r.model.arg.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){this.alreadyPushed||(this.sim.push(this.arg),this.alreadyPushed=!0)},e.prototype.stepForwardImpl=function(){var t=this.model.target.bindTo(this,this.arg.evalResult);this.observable.send("initialized",t),this.sim.pop()},e}(g);e.RuntimeReferenceDirectInitializer=R;var T=function(t){function e(e,n,r){var i=t.call(this,e)||this;i.target=n;var o=n.type;if(i.args=r,r.forEach(function(t){i.attach(t)}),r.length>1)return i.addNote(s.CPPError.declaration.init.scalar_args(i,o)),i;if(i.arg=r[0],!i.arg.isWellTyped())return i;var u=c.standardConversion(i.arg,o);return i.arg=u,a.sameType(u.type,o)||i.addNote(s.CPPError.declaration.init.convert(i,u.type,o)),i}return r(e,t),e.prototype.createRuntimeInitializer=function(t){return new x(this,t)},e.prototype.explain=function(t,e){var n=this.target.runtimeLookup(e).describe(),r=this.args[0].describeEvalResult(0);return{message:(n.name||n.message)+" will be initialized with "+(r.name||r.message)+"."}},e}(_);e.AtomicDirectInitializer=T;var x=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.alreadyPushed=!1,r.target=r.model.target.runtimeLookup(r),r.arg=r.model.arg.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){this.alreadyPushed||(this.sim.push(this.arg),this.alreadyPushed=!0)},e.prototype.stepForwardImpl=function(){this.target.writeValue(this.arg.evalResult),this.observable.send("initialized",this.target),this.sim.pop()},e}(g);e.RuntimeAtomicDirectInitializer=x;var E=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(_);e.CopyInitializer=E;var A=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(g);e.RuntimeCopyInitializer=A;var C=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(w);e.ReferenceCopyInitializer=C;var O=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(R);e.RuntimeReferenceCopyInitializer=O;var S=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(T);e.AtomicCopyInitializer=S;var P=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(x);e.RuntimeAtomicCopyInitializer=P},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=n(3),a=n(0),u=n(1),s=n(12),c=n(4),l=n(6),f=n(19),p=n(10),h=function(t){function e(e,n){var r=t.call(this,e)||this,i=0;return n.forEach(function(t){r[t]?r.addNote(o.CPPError.declaration.storage.once(r,t)):(a.asMutable(r)[t]=!0,++i)}),r.static&&r.addNote(o.CPPError.lobster.unsupported_feature(r,"static")),r.extern&&r.addNote(o.CPPError.lobster.unsupported_feature(r,"extern")),r.thread_local&&r.addNote(o.CPPError.lobster.unsupported_feature(r,"thread_local")),r.register&&r.addNote(o.CPPError.lobster.unsupported_feature(r,"register")),r.mutable&&r.addNote(o.CPPError.lobster.unsupported_feature(r,"mutable")),i<2||2==i&&r.thread_local&&(r.static||r.extern)||r.addNote(o.CPPError.declaration.storage.incompatible(r,n)),r.isEmpty=0===i,r}return r(e,t),e.createFromAST=function(t,n){return new e(n,t)},e}(i.BasicCPPConstruct);e.StorageSpecifier=h;var d=function(t){function e(e,n){var r=t.call(this,e)||this;return n.forEach(function(t){if("enum"===t)return a.asMutable(r).enum=!0,void r.addNote(o.CPPError.lobster.unsupported_feature(r,"mutable"));var e=["const","volatile","signed","unsigned","enum"].find(function(e){return e===t});e?r[e]?r.addNote(o.CPPError.declaration.typeSpecifier.once(r,e)):a.asMutable(r)[e]=!0:r.typeName?r.addNote(o.CPPError.declaration.typeSpecifier.one_type(r,[r.typeName,t])):a.asMutable(r).typeName=t}),r.unsigned&&r.signed&&r.addNote(o.CPPError.declaration.typeSpecifier.signed_unsigned(r)),!r.unsigned&&!r.signed||r.typeName||(r.typeName="int"),r.typeName?u.isBuiltInTypeName(r.typeName)?(a.asMutable(r).type=new u.builtInTypes[r.typeName](r.const,r.volatile),r):(r.addNote(o.CPPError.type.typeNotFound(r,r.typeName)),r):(r.addNote(o.CPPError.declaration.func.no_return_type(r)),r)}return r(e,t),e.createFromAST=function(t,n){return new e(n,t)},e}(i.BasicCPPConstruct);function y(t,e){var n=d.createFromAST(t.specs.typeSpecs,e),r=n.type,o=h.createFromAST(t.specs.storageSpecs,e);return t.declarators.map(function(a){var u,s=C.createFromAST(a,e,r),c=s.type;if(c)if(t.specs.friend)u=new g(e,n,o,s,t.specs);else if(t.specs.typedef)u=new _(e,n,o,s,t.specs);else if(c.isVoidType())u=new b(e,n,o,s,t.specs);else if(c.isFunctionType())u=new R(e,n,o,s,t.specs,c);else if(c.isArrayOfUnknownBoundType())u=new w(e,n,o,s,t.specs,c);else{var f=void 0;u=f=i.isBlockContext(e)?new x(e,n,o,s,t.specs,c):new E(e,n,o,s,t.specs,c);var p=a.initializer;p?"direct_initializer"==p.construct_type?f.setDirectInitializer(p.args.map(function(t){return l.createExpressionFromAST(t,e)})):"copy_initializer"==p.construct_type&&f.setCopyInitializer(p.args.map(function(t){return l.createExpressionFromAST(t,e)})):f.setDefaultInitializer()}else u=new v(e,n,o,s,t.specs);return u.setAST(t),u})}e.TypeSpecifier=d,e.createDeclarationFromAST=function(t,e){return"simple_declaration"===t.construct_type?y(t,e):S.createFromAST(t,e)},e.createSimpleDeclarationFromAST=y;var m=function(t){function e(e,n,r,i,u){var s=t.call(this,e)||this;return s.typeSpecifier=n,s.storageSpecifier=r,s.otherSpecifiers=u,s.declarator=i,s.name=i.name,i.name?(u.virtual&&s.addNote(o.CPPError.declaration.virtual_prohibited(s)),s):a.assertFalse("Simple declarations must have a name.")}return r(e,t),e}(i.BasicCPPConstruct);e.SimpleDeclaration=m;var v=function(t){function e(e,n,r,i,a){var u=t.call(this,e,n,r,i,a)||this;return u.initializerAllowed=!0,u.isDefinition=!1,u.addNote(o.CPPError.declaration.unknown_type(u)),u}return r(e,t),e}(m);e.UnknownTypeDeclaration=v;var b=function(t){function e(e,n,r,i,a){var s=t.call(this,e,n,r,i,a)||this;return s.initializerAllowed=!0,s.isDefinition=!1,s.type=u.VoidType.VOID,s.addNote(o.CPPError.declaration.void_prohibited(s)),s}return r(e,t),e}(m);e.VoidDeclaration=b;var _=function(t){function e(e,n,r,i,a){var u=t.call(this,e,n,r,i,a)||this;return u.initializerAllowed=!1,u.isDefinition=!1,u.addNote(o.CPPError.lobster.unsupported_feature(u,"typedef")),u}return r(e,t),e}(m);e.TypedefDeclaration=_;var g=function(t){function e(e,n,r,i,a){var u=t.call(this,e,n,r,i,a)||this;return u.initializerAllowed=!1,u.isDefinition=!1,u.addNote(o.CPPError.lobster.unsupported_feature(u,"friend")),a.virtual&&u.addNote(o.CPPError.declaration.friend.virtual_prohibited(u)),u}return r(e,t),e}(m);e.FriendDeclaration=g;var w=function(t){function e(e,n,r,i,a,u){var s=t.call(this,e,n,r,i,a)||this;return s.initializerAllowed=!0,s.isDefinition=!1,s.type=u,s.addNote(o.CPPError.declaration.array.length_required(s)),s}return r(e,t),e}(m);e.UnknownBoundArrayDeclaration=w;var R=function(t){function e(e,n,r,i,u,s){var l=t.call(this,e,n,r,i,u)||this;l.initializerAllowed=!1,l.isDefinition=!1,l.type=s,l.declaredEntity=new c.FunctionEntity(s,l),a.assert(!!l.declarator.parameters,"The declarator for a function declaration must contain declarators for its parameters as well."),l.parameterDeclarators=l.declarator.parameters,l.declaredEntity.isMain()&&l.type.paramTypes.length>0&&l.addNote(o.CPPError.declaration.func.mainParams(l.declarator));try{l.context.contextualScope.addDeclaredEntity(l.declaredEntity)}catch(t){if(!(t instanceof o.Note))throw t;l.addNote(t)}return l.context.contextualScope instanceof c.NamespaceScope&&l.context.translationUnit.program.registerLinkedEntity(l.declaredEntity),l}return r(e,t),e}(m);e.FunctionDeclaration=R;var T=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.setInitializer=function(t){return a.assert(!this.initializer),this.initializer=t,this},e.prototype.setDefaultInitializer=function(){return this.setInitializer(s.DefaultInitializer.create(this.context,this.declaredEntity))},e.prototype.setDirectInitializer=function(t){return this.setInitializer(s.DirectInitializer.create(this.context,this.declaredEntity,t))},e.prototype.setCopyInitializer=function(t){return this.setInitializer(s.CopyInitializer.create(this.context,this.declaredEntity,t))},e.prototype.setInitializerList=function(t){return this.addNote(o.CPPError.lobster.unsupported_feature(this,"initializer lists")),this},e}(m);e.VariableDefinition=T;var x=function(t){function e(e,n,r,i,a,u){var s=t.call(this,e,n,r,i,a)||this;s.initializerAllowed=!0,s.isDefinition=!0,s.type=u,s.declaredEntity=u.isReferenceType()?new c.LocalReferenceEntity(u.refTo,s):new c.AutoEntity(u,s);try{s.context.contextualScope.addDeclaredEntity(s.declaredEntity),s.context.functionLocals.registerLocalVariable(s.declaredEntity)}catch(t){if(!(t instanceof o.Note))throw t;s.addNote(t)}return s}return r(e,t),e}(T);e.LocalVariableDefinition=x;var E=function(t){function e(e,n,r,i,a,u){var s=t.call(this,e,n,r,i,a)||this;if(s.kind="GlobalObjectDefinition",s.initializerAllowed=!0,s.isDefinition=!0,s.type=u,u.isReferenceType())return s.addNote(o.CPPError.lobster.unsupported_feature(s,"globally scoped references")),s;s.declaredEntity=new c.StaticEntity(u,s);try{s.context.contextualScope.addDeclaredEntity(s.declaredEntity)}catch(t){if(!(t instanceof o.Note))throw t;s.addNote(t)}return s.context.translationUnit.program.registerGlobalObjectDefinition(s.declaredEntity.qualifiedName,s),s}return r(e,t),e}(T);e.GlobalObjectDefinition=E;var A=function(t){function e(e,n,r,i,a,u){var s=t.call(this,e,n,r,i,a)||this;s.initializerAllowed=!0,s.isDefinition=!0,s.type=u,s.declaredEntity=s.type.isReferenceType()?new c.LocalReferenceEntity(s.type.refTo,s,!0):new c.AutoEntity(s.type,s,!0);try{s.context.contextualScope.addDeclaredEntity(s.declaredEntity),e.functionLocals.registerLocalVariable(s.declaredEntity)}catch(t){if(!(t instanceof o.Note))throw t;s.addNote(t)}return s}return r(e,t),e}(m);e.ParameterDefinition=A;var C=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.setAST(n),i.baseType=r,n.pureVirtual&&(i.isPureVirtual=!0),i.determineNameAndType(n),i}return r(e,t),e.createFromAST=function(t,n,r){return new e(n,t,r)},e.prototype.determineNameAndType=function(t){var n=this;if(this.baseType){for(var r=this.baseType,i=t;i;){for(var a=i;a.sub;)a=a.sub;var s=!(a.pointer||a.reference||a.sub);if(i.name&&(this.name=i.name.identifier,p.checkIdentifier(this,i.name.identifier,this)),i.postfixes)for(var c=s,f=i.postfixes.length-1;f>=0;--f){var y=i.postfixes[f];if(s=c&&0===f,"array"===y.kind){if(r.isBoundedArrayType())return void this.addNote(o.CPPError.declaration.array.multidimensional_arrays_unsupported(this));if(!r.isArrayElemType())return void this.addNote(o.CPPError.declaration.array.invalid_element_type(this,r));r=y.size?"numeric_literal"===y.size.construct_type?new u.BoundedArrayType(r,l.parseNumericLiteralValueFromAST(y.size)):new u.ArrayOfUnknownBoundType(r,y.size):new u.ArrayOfUnknownBoundType(r)}else if("function"===y.kind){if(!r.isPotentialReturnType())return void(r.isFunctionType()?this.addNote(o.CPPError.declaration.func.return_func(this)):r.isBoundedArrayType()?this.addNote(o.CPPError.declaration.func.return_array(this)):this.addNote(o.CPPError.declaration.func.invalid_return_type(this,r)));var m=y.args.map(function(t){var r=h.createFromAST(t.specs.storageSpecs,n.context);n.attach(r),r.isEmpty||r.addNote(o.CPPError.declaration.parameter.storage_prohibited(n));var i=d.createFromAST(t.specs.typeSpecs,n.context);return n.attach(i),e.createFromAST(t.declarator,n.context,i.type)});this.parameters=m;var v=m.map(function(t){return t.type&&t.type.isBoundedArrayType()?t.type.adjustToPointerType():t.type});if(1==v.length&&v[0]&&v[0].isVoidType())v=[];else for(var b=0;b<v.length;++b){var _=v[b];_&&_.isVoidType()&&this.addNote(o.CPPError.declaration.func.void_param(m[b]))}v.every(function(t){return t&&t.isPotentialParameterType()})||this.addNote(o.CPPError.declaration.func.some_invalid_parameter_types(this)),r=new u.FunctionType(r,v,i.const,i.volatile,this.context.containingClass&&this.context.containingClass.cvQualified(!!y.const))}!1}if(i.pointer){if(!r.isObjectType())return void(r.isReferenceType()?this.addNote(o.CPPError.declaration.pointer.reference(this)):r.isVoidType()?this.addNote(o.CPPError.declaration.pointer.void(this)):this.addNote(o.CPPError.declaration.pointer.invalid_pointed_type(this,r)));r=new u.PointerType(r,i.const,i.volatile),i=i.pointer}else if(i.reference){if(!r.isObjectType())return void(r.isReferenceType()?this.addNote(o.CPPError.declaration.ref.ref(this)):this.addNote(o.CPPError.declaration.ref.invalid_referred_type(this,r)));r=new u.ReferenceType(r,i.const,i.volatile),i=i.reference}else{if(!i.hasOwnProperty("sub"))break;i=i.sub}!1}this.type=r,r.isFunctionType()||delete this.parameters}},e}(i.BasicCPPConstruct);e.Declarator=C;var O={};["new[]","delete[]","new","delete","->*",">>=","<<=","+=","-=","*=",",=","%=","^=","&=","|=","<<",">>","==","!=","<=",">=","&&","||","++","--","->","()","[]","+","-","*","/","%","^","&","|","~","!","=","<",">",","].forEach(function(t){O["operator"+t]=!0});var S=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.kind="FunctionDefinition",o.attach(o.declaration=n),o.attachAll(o.parameters=r),o.attach(o.body=i),o.context.translationUnit.program.registerFunctionDefinition(o.declaration.declaredEntity.qualifiedName,o),o}return r(e,t),e.createFromAST=function(t,n){var r=y({construct_type:"simple_declaration",declarators:[t.declarator],specs:t.specs,source:t.declarator.source},n)[0];if(!(r instanceof R))return new i.InvalidConstruct(n,o.CPPError.declaration.func.definition_non_function_type);var a=i.createFunctionContext(n,r.declaredEntity),u=new f.Block(a),s=u.blockContext,c=r.parameterDeclarators.map(function(t){return new A(s,d.createFromAST([],s),h.createFromAST([],s),t,{},t.type)});return t.body.statements.forEach(function(t){return u.addStatement(f.createStatementFromAST(t,s))}),new e(a,r,c,u)},e.prototype.createRuntimeFunction=function(t,e){return new i.RuntimeFunction(this,t,e)},e}(i.BasicCPPConstruct);e.FunctionDefinition=S},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(42),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},function(t,e,n){var r=n(16).Symbol;t.exports=r},function(t,e){t.exports=function(t){return t}},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=n(3),a=n(6),u=n(13),s=n(12),c=n(1),l=n(4),f=n(0),p={labeled_statement:function(t,e){return new m(e,"labeled statement").setAST(t)},compound_statement:function(t,e){return A.createFromAST(t,e)},selection_statement:function(t,e){return new m(e,"selection statement").setAST(t)},while_statement:function(t,e){return new m(e,"while loop").setAST(t)},dowhile_statement:function(t,e){return new m(e,"do-while loop").setAST(t)},for_statement:function(t,e){return new m(e,"for loop").setAST(t)},break_statement:function(t,e){return new m(e,"break statement").setAST(t)},continue_statement:function(t,e){return new m(e,"continue statement").setAST(t)},return_statement:function(t,e){return x.createFromAST(t,e)},declaration_statement:function(t,e){return w.createFromAST(t,e)},expression_statement:function(t,e){return v.createFromAST(t,e)},null_statement:function(t,e){return new _(e).setAST(t)}};function h(t,e){return p[t.construct_type](t,e)}e.createStatementFromAST=h;var d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(i.BasicCPPConstruct);e.Statement=d;var y=function(t){function e(e,n){var r=t.call(this,e,"statement",n)||this;return n instanceof i.RuntimeFunction?r.containingRuntimeFunction=n:r.containingRuntimeFunction=n.containingRuntimeFunction,r}return r(e,t),e.prototype.popped=function(){t.prototype.popped.call(this),this.observable.send("reset")},e}(i.RuntimeConstruct);e.RuntimeStatement=y;var m=function(t){function e(e,n){var r=t.call(this,e)||this;return r.addNote(o.CPPError.lobster.unsupported_feature(r,n)),r}return r(e,t),e.prototype.createRuntimeStatement=function(t){throw new Error("Cannot create a runtime instance of an unsupported construct.")},e}(d);e.UnsupportedStatement=m;var v=function(t){function e(e,n){var r=t.call(this,e)||this;return r.attach(r.expression=n),r}return r(e,t),e.createFromAST=function(t,n){return new e(n,a.createExpressionFromAST(t.expression,n)).setAST(t)},e.prototype.createRuntimeStatement=function(t){return new b(this,t)},e.prototype.isTailChild=function(t){return{isTail:!0}},e}(d);e.ExpressionStatement=v;var b=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index="expr",r.expression=r.model.expression.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){return"expr"===this.index&&(this.sim.push(this.expression),this.index="done"),!0},e.prototype.stepForwardImpl=function(){return this.sim.pop(),!1},e}(y);e.RuntimeExpressionStatement=b;var _=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.createRuntimeStatement=function(t){return new g(this,t)},e.prototype.isTailChild=function(t){return{isTail:!0}},e}(d);e.NullStatement=_;var g=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.prototype.upNextImpl=function(){return!1},e.prototype.stepForwardImpl=function(){return!1},e}(y);e.RuntimeNullStatement=g;var w=function(t){function e(e,n){var r=t.call(this,e)||this;return n instanceof u.FunctionDefinition?(r.addNote(o.CPPError.stmt.function_definition_prohibited(r)),r.attach(r.declarations=n),r):(r.attachAll(r.declarations=n),r)}return r(e,t),e.createFromAST=function(t,n){return new e(n,u.createDeclarationFromAST(t.declaration,n)).setAST(t)},e.prototype.createRuntimeStatement=function(t){return new R(this,t)},e.prototype.isTailChild=function(t){return{isTail:!0}},e}(d);e.DeclarationStatement=w;var R=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=0,r}return r(e,t),e.prototype.upNextImpl=function(){var t=this.model.declarations.map(function(t){return t.initializer});if(this.index<t.length){var e=t[this.index];if(e){this.observable.send("initializing",this.index);var n=e.createRuntimeInitializer(this);this.sim.push(n)}++this.index,this.wait()}else this.sim.pop()},e.prototype.stepForwardImpl=function(){return!1},e}(y);e.RuntimeDeclarationStatement=R;var T,x=function(t){function e(e,n){var r=t.call(this,e)||this;r.expression=n;var i=r.context.containingFunction.type.returnType;return i instanceof c.VoidType?(n&&r.addNote(o.CPPError.stmt.returnStatement.exprVoid(r)),r):n?(i instanceof c.ReferenceType?r.returnInitializer=s.DirectInitializer.create(e,new l.ReturnByReferenceEntity(i.refTo),[n]):r.returnInitializer=s.DirectInitializer.create(e,new l.ReturnObjectEntity(i),[n]),r.attach(r.returnInitializer),r):(r.addNote(o.CPPError.stmt.returnStatement.empty(r)),r)}return r(e,t),e.createFromAST=function(t,n){return t.expression?new e(n,a.createExpressionFromAST(t.expression,n)).setAST(t):new e(n).setAST(t)},e.prototype.createRuntimeStatement=function(t){return new E(this,t)},e}(d);e.ReturnStatement=x,function(t){t[t.PUSH_INITIALIZER=0]="PUSH_INITIALIZER",t[t.RETURN=1]="RETURN"}(T||(T={}));var E=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=T.PUSH_INITIALIZER,e.returnInitializer&&(r.returnInitializer=e.returnInitializer.createRuntimeInitializer(r)),r}return r(e,t),e.prototype.upNextImpl=function(){this.index===T.PUSH_INITIALIZER&&(this.returnInitializer&&this.sim.push(this.returnInitializer),this.index=T.RETURN)},e.prototype.stepForwardImpl=function(){if(this.index===T.RETURN){var t=this.containingRuntimeFunction;this.observable.send("returned",{call:t.caller}),this.sim.popUntil(t)}},e}(y);e.RuntimeReturnStatement=E;var A=function(t){function e(e){var n=t.call(this,e)||this;return n.statements=[],n.blockContext=function(t){return Object.assign({},t,{contextualScope:new l.BlockScope(t.contextualScope),localObjects:[],localReferences:[]})}(e),n}return r(e,t),e.createFromAST=function(t,n){var r=new e(n).setAST(t);return t.statements.forEach(function(t){return r.addStatement(h(t,n))}),r},e.prototype.addStatement=function(t){f.asMutable(this.statements).push(t),this.attach(t)},e.prototype.createRuntimeStatement=function(t){return new C(this,t)},e}(d);e.Block=A;var C=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=0,r.statements=e.statements.map(function(t){return t.createRuntimeStatement(r)}),r}return r(e,t),e.prototype.upNextImpl=function(){this.index<this.statements.length?(this.observable.send("index",this.index),this.sim.push(this.statements[this.index++])):this.sim.pop()},e.prototype.stepForwardImpl=function(){},e}(y);e.RuntimeBlock=C},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,a=200,u="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",s="Expected a function",c="__lodash_hash_undefined__",l=500,f="__lodash_placeholder__",p=1,h=2,d=4,y=1,m=2,v=1,b=2,_=4,g=8,w=16,R=32,T=64,x=128,E=256,A=512,C=30,O="...",S=800,P=16,j=1,I=2,F=1/0,N=9007199254740991,k=1.7976931348623157e308,z=NaN,V=4294967295,L=V-1,B=V>>>1,D=[["ary",x],["bind",v],["bindKey",b],["curry",g],["curryRight",w],["flip",A],["partial",R],["partialRight",T],["rearg",E]],M="[object Arguments]",U="[object Array]",W="[object AsyncFunction]",q="[object Boolean]",$="[object Date]",G="[object DOMException]",H="[object Error]",Q="[object Function]",Z="[object GeneratorFunction]",K="[object Map]",Y="[object Number]",X="[object Null]",J="[object Object]",tt="[object Proxy]",et="[object RegExp]",nt="[object Set]",rt="[object String]",it="[object Symbol]",ot="[object Undefined]",at="[object WeakMap]",ut="[object WeakSet]",st="[object ArrayBuffer]",ct="[object DataView]",lt="[object Float32Array]",ft="[object Float64Array]",pt="[object Int8Array]",ht="[object Int16Array]",dt="[object Int32Array]",yt="[object Uint8Array]",mt="[object Uint8ClampedArray]",vt="[object Uint16Array]",bt="[object Uint32Array]",_t=/\b__p \+= '';/g,gt=/\b(__p \+=) '' \+/g,wt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Rt=/&(?:amp|lt|gt|quot|#39);/g,Tt=/[&<>"']/g,xt=RegExp(Rt.source),Et=RegExp(Tt.source),At=/<%-([\s\S]+?)%>/g,Ct=/<%([\s\S]+?)%>/g,Ot=/<%=([\s\S]+?)%>/g,St=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Pt=/^\w*$/,jt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,It=/[\\^$.*+?()[\]{}|]/g,Ft=RegExp(It.source),Nt=/^\s+|\s+$/g,kt=/^\s+/,zt=/\s+$/,Vt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Lt=/\{\n\/\* \[wrapped with (.+)\] \*/,Bt=/,? & /,Dt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Mt=/\\(\\)?/g,Ut=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Wt=/\w*$/,qt=/^[-+]0x[0-9a-f]+$/i,$t=/^0b[01]+$/i,Gt=/^\[object .+?Constructor\]$/,Ht=/^0o[0-7]+$/i,Qt=/^(?:0|[1-9]\d*)$/,Zt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Kt=/($^)/,Yt=/['\n\r\u2028\u2029\\]/g,Xt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Jt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+Jt+"]",ne="["+Xt+"]",re="\\d+",ie="[\\u2700-\\u27bf]",oe="[a-z\\xdf-\\xf6\\xf8-\\xff]",ae="[^\\ud800-\\udfff"+Jt+re+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ue="\\ud83c[\\udffb-\\udfff]",se="[^\\ud800-\\udfff]",ce="(?:\\ud83c[\\udde6-\\uddff]){2}",le="[\\ud800-\\udbff][\\udc00-\\udfff]",fe="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pe="(?:"+oe+"|"+ae+")",he="(?:"+fe+"|"+ae+")",de="(?:"+ne+"|"+ue+")"+"?",ye="[\\ufe0e\\ufe0f]?"+de+("(?:\\u200d(?:"+[se,ce,le].join("|")+")[\\ufe0e\\ufe0f]?"+de+")*"),me="(?:"+[ie,ce,le].join("|")+")"+ye,ve="(?:"+[se+ne+"?",ne,ce,le,te].join("|")+")",be=RegExp("['’]","g"),_e=RegExp(ne,"g"),ge=RegExp(ue+"(?="+ue+")|"+ve+ye,"g"),we=RegExp([fe+"?"+oe+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,fe,"$"].join("|")+")",he+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,fe+pe,"$"].join("|")+")",fe+"?"+pe+"+(?:['’](?:d|ll|m|re|s|t|ve))?",fe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",re,me].join("|"),"g"),Re=RegExp("[\\u200d\\ud800-\\udfff"+Xt+"\\ufe0e\\ufe0f]"),Te=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,xe=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ee=-1,Ae={};Ae[lt]=Ae[ft]=Ae[pt]=Ae[ht]=Ae[dt]=Ae[yt]=Ae[mt]=Ae[vt]=Ae[bt]=!0,Ae[M]=Ae[U]=Ae[st]=Ae[q]=Ae[ct]=Ae[$]=Ae[H]=Ae[Q]=Ae[K]=Ae[Y]=Ae[J]=Ae[et]=Ae[nt]=Ae[rt]=Ae[at]=!1;var Ce={};Ce[M]=Ce[U]=Ce[st]=Ce[ct]=Ce[q]=Ce[$]=Ce[lt]=Ce[ft]=Ce[pt]=Ce[ht]=Ce[dt]=Ce[K]=Ce[Y]=Ce[J]=Ce[et]=Ce[nt]=Ce[rt]=Ce[it]=Ce[yt]=Ce[mt]=Ce[vt]=Ce[bt]=!0,Ce[H]=Ce[Q]=Ce[at]=!1;var Oe={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Se=parseFloat,Pe=parseInt,je="object"==typeof t&&t&&t.Object===Object&&t,Ie="object"==typeof self&&self&&self.Object===Object&&self,Fe=je||Ie||Function("return this")(),Ne="object"==typeof e&&e&&!e.nodeType&&e,ke=Ne&&"object"==typeof r&&r&&!r.nodeType&&r,ze=ke&&ke.exports===Ne,Ve=ze&&je.process,Le=function(){try{var t=ke&&ke.require&&ke.require("util").types;return t||Ve&&Ve.binding&&Ve.binding("util")}catch(t){}}(),Be=Le&&Le.isArrayBuffer,De=Le&&Le.isDate,Me=Le&&Le.isMap,Ue=Le&&Le.isRegExp,We=Le&&Le.isSet,qe=Le&&Le.isTypedArray;function $e(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Ge(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}function He(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Qe(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Ze(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Ke(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}function Ye(t,e){return!!(null==t?0:t.length)&&sn(t,e,0)>-1}function Xe(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Je(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function tn(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function en(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function nn(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function rn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var on=pn("length");function an(t,e,n){var r;return n(t,function(t,n,i){if(e(t,n,i))return r=n,!1}),r}function un(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function sn(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):un(t,ln,n)}function cn(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function ln(t){return t!=t}function fn(t,e){var n=null==t?0:t.length;return n?yn(t,e)/n:z}function pn(t){return function(e){return null==e?o:e[t]}}function hn(t){return function(e){return null==t?o:t[e]}}function dn(t,e,n,r,i){return i(t,function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)}),n}function yn(t,e){for(var n,r=-1,i=t.length;++r<i;){var a=e(t[r]);a!==o&&(n=n===o?a:n+a)}return n}function mn(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function vn(t){return function(e){return t(e)}}function bn(t,e){return Je(e,function(e){return t[e]})}function _n(t,e){return t.has(e)}function gn(t,e){for(var n=-1,r=t.length;++n<r&&sn(e,t[n],0)>-1;);return n}function wn(t,e){for(var n=t.length;n--&&sn(e,t[n],0)>-1;);return n}var Rn=hn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Tn=hn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function xn(t){return"\\"+Oe[t]}function En(t){return Re.test(t)}function An(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function Cn(t,e){return function(n){return t(e(n))}}function On(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n];a!==e&&a!==f||(t[n]=f,o[i++]=n)}return o}function Sn(t,e){return"__proto__"==e?o:t[e]}function Pn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function jn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}function In(t){return En(t)?function(t){var e=ge.lastIndex=0;for(;ge.test(t);)++e;return e}(t):on(t)}function Fn(t){return En(t)?function(t){return t.match(ge)||[]}(t):function(t){return t.split("")}(t)}var Nn=hn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var kn=function t(e){var n=(e=null==e?Fe:kn.defaults(Fe.Object(),e,kn.pick(Fe,xe))).Array,r=e.Date,i=e.Error,Xt=e.Function,Jt=e.Math,te=e.Object,ee=e.RegExp,ne=e.String,re=e.TypeError,ie=n.prototype,oe=Xt.prototype,ae=te.prototype,ue=e["__core-js_shared__"],se=oe.toString,ce=ae.hasOwnProperty,le=0,fe=function(){var t=/[^.]+$/.exec(ue&&ue.keys&&ue.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),pe=ae.toString,he=se.call(te),de=Fe._,ye=ee("^"+se.call(ce).replace(It,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),me=ze?e.Buffer:o,ve=e.Symbol,ge=e.Uint8Array,Re=me?me.allocUnsafe:o,Oe=Cn(te.getPrototypeOf,te),je=te.create,Ie=ae.propertyIsEnumerable,Ne=ie.splice,ke=ve?ve.isConcatSpreadable:o,Ve=ve?ve.iterator:o,Le=ve?ve.toStringTag:o,on=function(){try{var t=Bo(te,"defineProperty");return t({},"",{}),t}catch(t){}}(),hn=e.clearTimeout!==Fe.clearTimeout&&e.clearTimeout,zn=r&&r.now!==Fe.Date.now&&r.now,Vn=e.setTimeout!==Fe.setTimeout&&e.setTimeout,Ln=Jt.ceil,Bn=Jt.floor,Dn=te.getOwnPropertySymbols,Mn=me?me.isBuffer:o,Un=e.isFinite,Wn=ie.join,qn=Cn(te.keys,te),$n=Jt.max,Gn=Jt.min,Hn=r.now,Qn=e.parseInt,Zn=Jt.random,Kn=ie.reverse,Yn=Bo(e,"DataView"),Xn=Bo(e,"Map"),Jn=Bo(e,"Promise"),tr=Bo(e,"Set"),er=Bo(e,"WeakMap"),nr=Bo(te,"create"),rr=er&&new er,ir={},or=la(Yn),ar=la(Xn),ur=la(Jn),sr=la(tr),cr=la(er),lr=ve?ve.prototype:o,fr=lr?lr.valueOf:o,pr=lr?lr.toString:o;function hr(t){if(Cu(t)&&!mu(t)&&!(t instanceof vr)){if(t instanceof mr)return t;if(ce.call(t,"__wrapped__"))return fa(t)}return new mr(t)}var dr=function(){function t(){}return function(e){if(!Au(e))return{};if(je)return je(e);t.prototype=e;var n=new t;return t.prototype=o,n}}();function yr(){}function mr(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function vr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=V,this.__views__=[]}function br(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function _r(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function gr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function wr(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new gr;++e<n;)this.add(t[e])}function Rr(t){var e=this.__data__=new _r(t);this.size=e.size}function Tr(t,e){var n=mu(t),r=!n&&yu(t),i=!n&&!r&&gu(t),o=!n&&!r&&!i&&ku(t),a=n||r||i||o,u=a?mn(t.length,ne):[],s=u.length;for(var c in t)!e&&!ce.call(t,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Go(c,s))||u.push(c);return u}function xr(t){var e=t.length;return e?t[wi(0,e-1)]:o}function Er(t,e){return ua(no(t),Nr(e,0,t.length))}function Ar(t){return ua(no(t))}function Cr(t,e,n){(n===o||pu(t[e],n))&&(n!==o||e in t)||Ir(t,e,n)}function Or(t,e,n){var r=t[e];ce.call(t,e)&&pu(r,n)&&(n!==o||e in t)||Ir(t,e,n)}function Sr(t,e){for(var n=t.length;n--;)if(pu(t[n][0],e))return n;return-1}function Pr(t,e,n,r){return Br(t,function(t,i,o){e(r,t,n(t),o)}),r}function jr(t,e){return t&&ro(e,rs(e),t)}function Ir(t,e,n){"__proto__"==e&&on?on(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Fr(t,e){for(var r=-1,i=e.length,a=n(i),u=null==t;++r<i;)a[r]=u?o:Xu(t,e[r]);return a}function Nr(t,e,n){return t==t&&(n!==o&&(t=t<=n?t:n),e!==o&&(t=t>=e?t:e)),t}function kr(t,e,n,r,i,a){var u,s=e&p,c=e&h,l=e&d;if(n&&(u=i?n(t,r,i,a):n(t)),u!==o)return u;if(!Au(t))return t;var f=mu(t);if(f){if(u=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&ce.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!s)return no(t,u)}else{var y=Uo(t),m=y==Q||y==Z;if(gu(t))return Ki(t,s);if(y==J||y==M||m&&!i){if(u=c||m?{}:qo(t),!s)return c?function(t,e){return ro(t,Mo(t),e)}(t,function(t,e){return t&&ro(e,is(e),t)}(u,t)):function(t,e){return ro(t,Do(t),e)}(t,jr(u,t))}else{if(!Ce[y])return i?t:{};u=function(t,e,n){var r=t.constructor;switch(e){case st:return Yi(t);case q:case $:return new r(+t);case ct:return function(t,e){var n=e?Yi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case lt:case ft:case pt:case ht:case dt:case yt:case mt:case vt:case bt:return Xi(t,n);case K:return new r;case Y:case rt:return new r(t);case et:return function(t){var e=new t.constructor(t.source,Wt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case nt:return new r;case it:return function(t){return fr?te(fr.call(t)):{}}(t)}}(t,y,s)}}a||(a=new Rr);var v=a.get(t);if(v)return v;if(a.set(t,u),Iu(t))return t.forEach(function(r){u.add(kr(r,e,n,r,t,a))}),u;if(Ou(t))return t.forEach(function(r,i){u.set(i,kr(r,e,n,i,t,a))}),u;var b=f?o:(l?c?Io:jo:c?is:rs)(t);return He(b||t,function(r,i){b&&(r=t[i=r]),Or(u,i,kr(r,e,n,i,t,a))}),u}function zr(t,e,n){var r=n.length;if(null==t)return!r;for(t=te(t);r--;){var i=n[r],a=e[i],u=t[i];if(u===o&&!(i in t)||!a(u))return!1}return!0}function Vr(t,e,n){if("function"!=typeof t)throw new re(s);return ra(function(){t.apply(o,n)},e)}function Lr(t,e,n,r){var i=-1,o=Ye,u=!0,s=t.length,c=[],l=e.length;if(!s)return c;n&&(e=Je(e,vn(n))),r?(o=Xe,u=!1):e.length>=a&&(o=_n,u=!1,e=new wr(e));t:for(;++i<s;){var f=t[i],p=null==n?f:n(f);if(f=r||0!==f?f:0,u&&p==p){for(var h=l;h--;)if(e[h]===p)continue t;c.push(f)}else o(e,p,r)||c.push(f)}return c}hr.templateSettings={escape:At,evaluate:Ct,interpolate:Ot,variable:"",imports:{_:hr}},hr.prototype=yr.prototype,hr.prototype.constructor=hr,mr.prototype=dr(yr.prototype),mr.prototype.constructor=mr,vr.prototype=dr(yr.prototype),vr.prototype.constructor=vr,br.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},br.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},br.prototype.get=function(t){var e=this.__data__;if(nr){var n=e[t];return n===c?o:n}return ce.call(e,t)?e[t]:o},br.prototype.has=function(t){var e=this.__data__;return nr?e[t]!==o:ce.call(e,t)},br.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=nr&&e===o?c:e,this},_r.prototype.clear=function(){this.__data__=[],this.size=0},_r.prototype.delete=function(t){var e=this.__data__,n=Sr(e,t);return!(n<0||(n==e.length-1?e.pop():Ne.call(e,n,1),--this.size,0))},_r.prototype.get=function(t){var e=this.__data__,n=Sr(e,t);return n<0?o:e[n][1]},_r.prototype.has=function(t){return Sr(this.__data__,t)>-1},_r.prototype.set=function(t,e){var n=this.__data__,r=Sr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},gr.prototype.clear=function(){this.size=0,this.__data__={hash:new br,map:new(Xn||_r),string:new br}},gr.prototype.delete=function(t){var e=Vo(this,t).delete(t);return this.size-=e?1:0,e},gr.prototype.get=function(t){return Vo(this,t).get(t)},gr.prototype.has=function(t){return Vo(this,t).has(t)},gr.prototype.set=function(t,e){var n=Vo(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(t){return this.__data__.set(t,c),this},wr.prototype.has=function(t){return this.__data__.has(t)},Rr.prototype.clear=function(){this.__data__=new _r,this.size=0},Rr.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Rr.prototype.get=function(t){return this.__data__.get(t)},Rr.prototype.has=function(t){return this.__data__.has(t)},Rr.prototype.set=function(t,e){var n=this.__data__;if(n instanceof _r){var r=n.__data__;if(!Xn||r.length<a-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new gr(r)}return n.set(t,e),this.size=n.size,this};var Br=ao(Hr),Dr=ao(Qr,!0);function Mr(t,e){var n=!0;return Br(t,function(t,r,i){return n=!!e(t,r,i)}),n}function Ur(t,e,n){for(var r=-1,i=t.length;++r<i;){var a=t[r],u=e(a);if(null!=u&&(s===o?u==u&&!Nu(u):n(u,s)))var s=u,c=a}return c}function Wr(t,e){var n=[];return Br(t,function(t,r,i){e(t,r,i)&&n.push(t)}),n}function qr(t,e,n,r,i){var o=-1,a=t.length;for(n||(n=$o),i||(i=[]);++o<a;){var u=t[o];e>0&&n(u)?e>1?qr(u,e-1,n,r,i):tn(i,u):r||(i[i.length]=u)}return i}var $r=uo(),Gr=uo(!0);function Hr(t,e){return t&&$r(t,e,rs)}function Qr(t,e){return t&&Gr(t,e,rs)}function Zr(t,e){return Ke(e,function(e){return Tu(t[e])})}function Kr(t,e){for(var n=0,r=(e=Gi(e,t)).length;null!=t&&n<r;)t=t[ca(e[n++])];return n&&n==r?t:o}function Yr(t,e,n){var r=e(t);return mu(t)?r:tn(r,n(t))}function Xr(t){return null==t?t===o?ot:X:Le&&Le in te(t)?function(t){var e=ce.call(t,Le),n=t[Le];try{t[Le]=o;var r=!0}catch(t){}var i=pe.call(t);return r&&(e?t[Le]=n:delete t[Le]),i}(t):function(t){return pe.call(t)}(t)}function Jr(t,e){return t>e}function ti(t,e){return null!=t&&ce.call(t,e)}function ei(t,e){return null!=t&&e in te(t)}function ni(t,e,r){for(var i=r?Xe:Ye,a=t[0].length,u=t.length,s=u,c=n(u),l=1/0,f=[];s--;){var p=t[s];s&&e&&(p=Je(p,vn(e))),l=Gn(p.length,l),c[s]=!r&&(e||a>=120&&p.length>=120)?new wr(s&&p):o}p=t[0];var h=-1,d=c[0];t:for(;++h<a&&f.length<l;){var y=p[h],m=e?e(y):y;if(y=r||0!==y?y:0,!(d?_n(d,m):i(f,m,r))){for(s=u;--s;){var v=c[s];if(!(v?_n(v,m):i(t[s],m,r)))continue t}d&&d.push(m),f.push(y)}}return f}function ri(t,e,n){var r=null==(t=ea(t,e=Gi(e,t)))?t:t[ca(Ra(e))];return null==r?o:$e(r,t,n)}function ii(t){return Cu(t)&&Xr(t)==M}function oi(t,e,n,r,i){return t===e||(null==t||null==e||!Cu(t)&&!Cu(e)?t!=t&&e!=e:function(t,e,n,r,i,a){var u=mu(t),s=mu(e),c=u?U:Uo(t),l=s?U:Uo(e),f=(c=c==M?J:c)==J,p=(l=l==M?J:l)==J,h=c==l;if(h&&gu(t)){if(!gu(e))return!1;u=!0,f=!1}if(h&&!f)return a||(a=new Rr),u||ku(t)?So(t,e,n,r,i,a):function(t,e,n,r,i,o,a){switch(n){case ct:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case st:return!(t.byteLength!=e.byteLength||!o(new ge(t),new ge(e)));case q:case $:case Y:return pu(+t,+e);case H:return t.name==e.name&&t.message==e.message;case et:case rt:return t==e+"";case K:var u=An;case nt:var s=r&y;if(u||(u=Pn),t.size!=e.size&&!s)return!1;var c=a.get(t);if(c)return c==e;r|=m,a.set(t,e);var l=So(u(t),u(e),r,i,o,a);return a.delete(t),l;case it:if(fr)return fr.call(t)==fr.call(e)}return!1}(t,e,c,n,r,i,a);if(!(n&y)){var d=f&&ce.call(t,"__wrapped__"),v=p&&ce.call(e,"__wrapped__");if(d||v){var b=d?t.value():t,_=v?e.value():e;return a||(a=new Rr),i(b,_,n,r,a)}}return!!h&&(a||(a=new Rr),function(t,e,n,r,i,a){var u=n&y,s=jo(t),c=s.length,l=jo(e).length;if(c!=l&&!u)return!1;for(var f=c;f--;){var p=s[f];if(!(u?p in e:ce.call(e,p)))return!1}var h=a.get(t);if(h&&a.get(e))return h==e;var d=!0;a.set(t,e),a.set(e,t);for(var m=u;++f<c;){p=s[f];var v=t[p],b=e[p];if(r)var _=u?r(b,v,p,e,t,a):r(v,b,p,t,e,a);if(!(_===o?v===b||i(v,b,n,r,a):_)){d=!1;break}m||(m="constructor"==p)}if(d&&!m){var g=t.constructor,w=e.constructor;g!=w&&"constructor"in t&&"constructor"in e&&!("function"==typeof g&&g instanceof g&&"function"==typeof w&&w instanceof w)&&(d=!1)}return a.delete(t),a.delete(e),d}(t,e,n,r,i,a))}(t,e,n,r,oi,i))}function ai(t,e,n,r){var i=n.length,a=i,u=!r;if(null==t)return!a;for(t=te(t);i--;){var s=n[i];if(u&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++i<a;){var c=(s=n[i])[0],l=t[c],f=s[1];if(u&&s[2]){if(l===o&&!(c in t))return!1}else{var p=new Rr;if(r)var h=r(l,f,c,t,e,p);if(!(h===o?oi(f,l,y|m,r,p):h))return!1}}return!0}function ui(t){return!(!Au(t)||function(t){return!!fe&&fe in t}(t))&&(Tu(t)?ye:Gt).test(la(t))}function si(t){return"function"==typeof t?t:null==t?Ss:"object"==typeof t?mu(t)?di(t[0],t[1]):hi(t):Ls(t)}function ci(t){if(!Yo(t))return qn(t);var e=[];for(var n in te(t))ce.call(t,n)&&"constructor"!=n&&e.push(n);return e}function li(t){if(!Au(t))return function(t){var e=[];if(null!=t)for(var n in te(t))e.push(n);return e}(t);var e=Yo(t),n=[];for(var r in t)("constructor"!=r||!e&&ce.call(t,r))&&n.push(r);return n}function fi(t,e){return t<e}function pi(t,e){var r=-1,i=bu(t)?n(t.length):[];return Br(t,function(t,n,o){i[++r]=e(t,n,o)}),i}function hi(t){var e=Lo(t);return 1==e.length&&e[0][2]?Jo(e[0][0],e[0][1]):function(n){return n===t||ai(n,t,e)}}function di(t,e){return Qo(t)&&Xo(e)?Jo(ca(t),e):function(n){var r=Xu(n,t);return r===o&&r===e?Ju(n,t):oi(e,r,y|m)}}function yi(t,e,n,r,i){t!==e&&$r(e,function(a,u){if(Au(a))i||(i=new Rr),function(t,e,n,r,i,a,u){var s=Sn(t,n),c=Sn(e,n),l=u.get(c);if(l)Cr(t,n,l);else{var f=a?a(s,c,n+"",t,e,u):o,p=f===o;if(p){var h=mu(c),d=!h&&gu(c),y=!h&&!d&&ku(c);f=c,h||d||y?mu(s)?f=s:_u(s)?f=no(s):d?(p=!1,f=Ki(c,!0)):y?(p=!1,f=Xi(c,!0)):f=[]:Pu(c)||yu(c)?(f=s,yu(s)?f=Wu(s):(!Au(s)||r&&Tu(s))&&(f=qo(c))):p=!1}p&&(u.set(c,f),i(f,c,r,a,u),u.delete(c)),Cr(t,n,f)}}(t,e,u,n,yi,r,i);else{var s=r?r(Sn(t,u),a,u+"",t,e,i):o;s===o&&(s=a),Cr(t,u,s)}},is)}function mi(t,e){var n=t.length;if(n)return Go(e+=e<0?n:0,n)?t[e]:o}function vi(t,e,n){var r=-1;return e=Je(e.length?e:[Ss],vn(zo())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(pi(t,function(t,n,i){return{criteria:Je(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,a=i.length,u=n.length;++r<a;){var s=Ji(i[r],o[r]);if(s){if(r>=u)return s;var c=n[r];return s*("desc"==c?-1:1)}}return t.index-e.index}(t,e,n)})}function bi(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var a=e[r],u=Kr(t,a);n(u,a)&&Ai(o,Gi(a,t),u)}return o}function _i(t,e,n,r){var i=r?cn:sn,o=-1,a=e.length,u=t;for(t===e&&(e=no(e)),n&&(u=Je(t,vn(n)));++o<a;)for(var s=0,c=e[o],l=n?n(c):c;(s=i(u,l,s,r))>-1;)u!==t&&Ne.call(u,s,1),Ne.call(t,s,1);return t}function gi(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;Go(i)?Ne.call(t,i,1):Li(t,i)}}return t}function wi(t,e){return t+Bn(Zn()*(e-t+1))}function Ri(t,e){var n="";if(!t||e<1||e>N)return n;do{e%2&&(n+=t),(e=Bn(e/2))&&(t+=t)}while(e);return n}function Ti(t,e){return ia(ta(t,e,Ss),t+"")}function xi(t){return xr(ps(t))}function Ei(t,e){var n=ps(t);return ua(n,Nr(e,0,n.length))}function Ai(t,e,n,r){if(!Au(t))return t;for(var i=-1,a=(e=Gi(e,t)).length,u=a-1,s=t;null!=s&&++i<a;){var c=ca(e[i]),l=n;if(i!=u){var f=s[c];(l=r?r(f,c,s):o)===o&&(l=Au(f)?f:Go(e[i+1])?[]:{})}Or(s,c,l),s=s[c]}return t}var Ci=rr?function(t,e){return rr.set(t,e),t}:Ss,Oi=on?function(t,e){return on(t,"toString",{configurable:!0,enumerable:!1,value:As(e),writable:!0})}:Ss;function Si(t){return ua(ps(t))}function Pi(t,e,r){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(r=r>o?o:r)<0&&(r+=o),o=e>r?0:r-e>>>0,e>>>=0;for(var a=n(o);++i<o;)a[i]=t[i+e];return a}function ji(t,e){var n;return Br(t,function(t,r,i){return!(n=e(t,r,i))}),!!n}function Ii(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=B){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!Nu(a)&&(n?a<=e:a<e)?r=o+1:i=o}return i}return Fi(t,e,Ss,n)}function Fi(t,e,n,r){e=n(e);for(var i=0,a=null==t?0:t.length,u=e!=e,s=null===e,c=Nu(e),l=e===o;i<a;){var f=Bn((i+a)/2),p=n(t[f]),h=p!==o,d=null===p,y=p==p,m=Nu(p);if(u)var v=r||y;else v=l?y&&(r||h):s?y&&h&&(r||!d):c?y&&h&&!d&&(r||!m):!d&&!m&&(r?p<=e:p<e);v?i=f+1:a=f}return Gn(a,L)}function Ni(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],u=e?e(a):a;if(!n||!pu(u,s)){var s=u;o[i++]=0===a?0:a}}return o}function ki(t){return"number"==typeof t?t:Nu(t)?z:+t}function zi(t){if("string"==typeof t)return t;if(mu(t))return Je(t,zi)+"";if(Nu(t))return pr?pr.call(t):"";var e=t+"";return"0"==e&&1/t==-F?"-0":e}function Vi(t,e,n){var r=-1,i=Ye,o=t.length,u=!0,s=[],c=s;if(n)u=!1,i=Xe;else if(o>=a){var l=e?null:To(t);if(l)return Pn(l);u=!1,i=_n,c=new wr}else c=e?[]:s;t:for(;++r<o;){var f=t[r],p=e?e(f):f;if(f=n||0!==f?f:0,u&&p==p){for(var h=c.length;h--;)if(c[h]===p)continue t;e&&c.push(p),s.push(f)}else i(c,p,n)||(c!==s&&c.push(p),s.push(f))}return s}function Li(t,e){return null==(t=ea(t,e=Gi(e,t)))||delete t[ca(Ra(e))]}function Bi(t,e,n,r){return Ai(t,e,n(Kr(t,e)),r)}function Di(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?Pi(t,r?0:o,r?o+1:i):Pi(t,r?o+1:0,r?i:o)}function Mi(t,e){var n=t;return n instanceof vr&&(n=n.value()),en(e,function(t,e){return e.func.apply(e.thisArg,tn([t],e.args))},n)}function Ui(t,e,r){var i=t.length;if(i<2)return i?Vi(t[0]):[];for(var o=-1,a=n(i);++o<i;)for(var u=t[o],s=-1;++s<i;)s!=o&&(a[o]=Lr(a[o]||u,t[s],e,r));return Vi(qr(a,1),e,r)}function Wi(t,e,n){for(var r=-1,i=t.length,a=e.length,u={};++r<i;){var s=r<a?e[r]:o;n(u,t[r],s)}return u}function qi(t){return _u(t)?t:[]}function $i(t){return"function"==typeof t?t:Ss}function Gi(t,e){return mu(t)?t:Qo(t,e)?[t]:sa(qu(t))}var Hi=Ti;function Qi(t,e,n){var r=t.length;return n=n===o?r:n,!e&&n>=r?t:Pi(t,e,n)}var Zi=hn||function(t){return Fe.clearTimeout(t)};function Ki(t,e){if(e)return t.slice();var n=t.length,r=Re?Re(n):new t.constructor(n);return t.copy(r),r}function Yi(t){var e=new t.constructor(t.byteLength);return new ge(e).set(new ge(t)),e}function Xi(t,e){var n=e?Yi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Ji(t,e){if(t!==e){var n=t!==o,r=null===t,i=t==t,a=Nu(t),u=e!==o,s=null===e,c=e==e,l=Nu(e);if(!s&&!l&&!a&&t>e||a&&u&&c&&!s&&!l||r&&u&&c||!n&&c||!i)return 1;if(!r&&!a&&!l&&t<e||l&&n&&i&&!r&&!a||s&&n&&i||!u&&i||!c)return-1}return 0}function to(t,e,r,i){for(var o=-1,a=t.length,u=r.length,s=-1,c=e.length,l=$n(a-u,0),f=n(c+l),p=!i;++s<c;)f[s]=e[s];for(;++o<u;)(p||o<a)&&(f[r[o]]=t[o]);for(;l--;)f[s++]=t[o++];return f}function eo(t,e,r,i){for(var o=-1,a=t.length,u=-1,s=r.length,c=-1,l=e.length,f=$n(a-s,0),p=n(f+l),h=!i;++o<f;)p[o]=t[o];for(var d=o;++c<l;)p[d+c]=e[c];for(;++u<s;)(h||o<a)&&(p[d+r[u]]=t[o++]);return p}function no(t,e){var r=-1,i=t.length;for(e||(e=n(i));++r<i;)e[r]=t[r];return e}function ro(t,e,n,r){var i=!n;n||(n={});for(var a=-1,u=e.length;++a<u;){var s=e[a],c=r?r(n[s],t[s],s,n,t):o;c===o&&(c=t[s]),i?Ir(n,s,c):Or(n,s,c)}return n}function io(t,e){return function(n,r){var i=mu(n)?Ge:Pr,o=e?e():{};return i(n,t,zo(r,2),o)}}function oo(t){return Ti(function(e,n){var r=-1,i=n.length,a=i>1?n[i-1]:o,u=i>2?n[2]:o;for(a=t.length>3&&"function"==typeof a?(i--,a):o,u&&Ho(n[0],n[1],u)&&(a=i<3?o:a,i=1),e=te(e);++r<i;){var s=n[r];s&&t(e,s,r,a)}return e})}function ao(t,e){return function(n,r){if(null==n)return n;if(!bu(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=te(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function uo(t){return function(e,n,r){for(var i=-1,o=te(e),a=r(e),u=a.length;u--;){var s=a[t?u:++i];if(!1===n(o[s],s,o))break}return e}}function so(t){return function(e){var n=En(e=qu(e))?Fn(e):o,r=n?n[0]:e.charAt(0),i=n?Qi(n,1).join(""):e.slice(1);return r[t]()+i}}function co(t){return function(e){return en(Ts(ys(e).replace(be,"")),t,"")}}function lo(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=dr(t.prototype),r=t.apply(n,e);return Au(r)?r:n}}function fo(t){return function(e,n,r){var i=te(e);if(!bu(e)){var a=zo(n,3);e=rs(e),n=function(t){return a(i[t],t,i)}}var u=t(e,n,r);return u>-1?i[a?e[u]:u]:o}}function po(t){return Po(function(e){var n=e.length,r=n,i=mr.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new re(s);if(i&&!u&&"wrapper"==No(a))var u=new mr([],!0)}for(r=u?r:n;++r<n;){var c=No(a=e[r]),l="wrapper"==c?Fo(a):o;u=l&&Zo(l[0])&&l[1]==(x|g|R|E)&&!l[4].length&&1==l[9]?u[No(l[0])].apply(u,l[3]):1==a.length&&Zo(a)?u[c]():u.thru(a)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&mu(r))return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}})}function ho(t,e,r,i,a,u,s,c,l,f){var p=e&x,h=e&v,d=e&b,y=e&(g|w),m=e&A,_=d?o:lo(t);return function v(){for(var b=arguments.length,g=n(b),w=b;w--;)g[w]=arguments[w];if(y)var R=ko(v),T=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(g,R);if(i&&(g=to(g,i,a,y)),u&&(g=eo(g,u,s,y)),b-=T,y&&b<f){var x=On(g,R);return wo(t,e,ho,v.placeholder,r,g,x,c,l,f-b)}var E=h?r:this,A=d?E[t]:t;return b=g.length,c?g=function(t,e){for(var n=t.length,r=Gn(e.length,n),i=no(t);r--;){var a=e[r];t[r]=Go(a,n)?i[a]:o}return t}(g,c):m&&b>1&&g.reverse(),p&&l<b&&(g.length=l),this&&this!==Fe&&this instanceof v&&(A=_||lo(A)),A.apply(E,g)}}function yo(t,e){return function(n,r){return function(t,e,n,r){return Hr(t,function(t,i,o){e(r,n(t),i,o)}),r}(n,t,e(r),{})}}function mo(t,e){return function(n,r){var i;if(n===o&&r===o)return e;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=zi(n),r=zi(r)):(n=ki(n),r=ki(r)),i=t(n,r)}return i}}function vo(t){return Po(function(e){return e=Je(e,vn(zo())),Ti(function(n){var r=this;return t(e,function(t){return $e(t,r,n)})})})}function bo(t,e){var n=(e=e===o?" ":zi(e)).length;if(n<2)return n?Ri(e,t):e;var r=Ri(e,Ln(t/In(e)));return En(e)?Qi(Fn(r),0,t).join(""):r.slice(0,t)}function _o(t){return function(e,r,i){return i&&"number"!=typeof i&&Ho(e,r,i)&&(r=i=o),e=Bu(e),r===o?(r=e,e=0):r=Bu(r),function(t,e,r,i){for(var o=-1,a=$n(Ln((e-t)/(r||1)),0),u=n(a);a--;)u[i?a:++o]=t,t+=r;return u}(e,r,i=i===o?e<r?1:-1:Bu(i),t)}}function go(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=Uu(e),n=Uu(n)),t(e,n)}}function wo(t,e,n,r,i,a,u,s,c,l){var f=e&g;e|=f?R:T,(e&=~(f?T:R))&_||(e&=~(v|b));var p=[t,e,i,f?a:o,f?u:o,f?o:a,f?o:u,s,c,l],h=n.apply(o,p);return Zo(t)&&na(h,p),h.placeholder=r,oa(h,t,e)}function Ro(t){var e=Jt[t];return function(t,n){if(t=Uu(t),n=null==n?0:Gn(Du(n),292)){var r=(qu(t)+"e").split("e");return+((r=(qu(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var To=tr&&1/Pn(new tr([,-0]))[1]==F?function(t){return new tr(t)}:Ns;function xo(t){return function(e){var n=Uo(e);return n==K?An(e):n==nt?jn(e):function(t,e){return Je(e,function(e){return[e,t[e]]})}(e,t(e))}}function Eo(t,e,r,i,a,u,c,l){var p=e&b;if(!p&&"function"!=typeof t)throw new re(s);var h=i?i.length:0;if(h||(e&=~(R|T),i=a=o),c=c===o?c:$n(Du(c),0),l=l===o?l:Du(l),h-=a?a.length:0,e&T){var d=i,y=a;i=a=o}var m=p?o:Fo(t),A=[t,e,r,i,a,d,y,u,c,l];if(m&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<(v|b|x),a=r==x&&n==g||r==x&&n==E&&t[7].length<=e[8]||r==(x|E)&&e[7].length<=e[8]&&n==g;if(!o&&!a)return t;r&v&&(t[2]=e[2],i|=n&v?0:_);var u=e[3];if(u){var s=t[3];t[3]=s?to(s,u,e[4]):u,t[4]=s?On(t[3],f):e[4]}(u=e[5])&&(s=t[5],t[5]=s?eo(s,u,e[6]):u,t[6]=s?On(t[5],f):e[6]),(u=e[7])&&(t[7]=u),r&x&&(t[8]=null==t[8]?e[8]:Gn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(A,m),t=A[0],e=A[1],r=A[2],i=A[3],a=A[4],!(l=A[9]=A[9]===o?p?0:t.length:$n(A[9]-h,0))&&e&(g|w)&&(e&=~(g|w)),e&&e!=v)C=e==g||e==w?function(t,e,r){var i=lo(t);return function a(){for(var u=arguments.length,s=n(u),c=u,l=ko(a);c--;)s[c]=arguments[c];var f=u<3&&s[0]!==l&&s[u-1]!==l?[]:On(s,l);return(u-=f.length)<r?wo(t,e,ho,a.placeholder,o,s,f,o,o,r-u):$e(this&&this!==Fe&&this instanceof a?i:t,this,s)}}(t,e,l):e!=R&&e!=(v|R)||a.length?ho.apply(o,A):function(t,e,r,i){var o=e&v,a=lo(t);return function e(){for(var u=-1,s=arguments.length,c=-1,l=i.length,f=n(l+s),p=this&&this!==Fe&&this instanceof e?a:t;++c<l;)f[c]=i[c];for(;s--;)f[c++]=arguments[++u];return $e(p,o?r:this,f)}}(t,e,r,i);else var C=function(t,e,n){var r=e&v,i=lo(t);return function e(){return(this&&this!==Fe&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,r);return oa((m?Ci:na)(C,A),t,e)}function Ao(t,e,n,r){return t===o||pu(t,ae[n])&&!ce.call(r,n)?e:t}function Co(t,e,n,r,i,a){return Au(t)&&Au(e)&&(a.set(e,t),yi(t,e,o,Co,a),a.delete(e)),t}function Oo(t){return Pu(t)?o:t}function So(t,e,n,r,i,a){var u=n&y,s=t.length,c=e.length;if(s!=c&&!(u&&c>s))return!1;var l=a.get(t);if(l&&a.get(e))return l==e;var f=-1,p=!0,h=n&m?new wr:o;for(a.set(t,e),a.set(e,t);++f<s;){var d=t[f],v=e[f];if(r)var b=u?r(v,d,f,e,t,a):r(d,v,f,t,e,a);if(b!==o){if(b)continue;p=!1;break}if(h){if(!rn(e,function(t,e){if(!_n(h,e)&&(d===t||i(d,t,n,r,a)))return h.push(e)})){p=!1;break}}else if(d!==v&&!i(d,v,n,r,a)){p=!1;break}}return a.delete(t),a.delete(e),p}function Po(t){return ia(ta(t,o,va),t+"")}function jo(t){return Yr(t,rs,Do)}function Io(t){return Yr(t,is,Mo)}var Fo=rr?function(t){return rr.get(t)}:Ns;function No(t){for(var e=t.name+"",n=ir[e],r=ce.call(ir,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function ko(t){return(ce.call(hr,"placeholder")?hr:t).placeholder}function zo(){var t=hr.iteratee||Ps;return t=t===Ps?si:t,arguments.length?t(arguments[0],arguments[1]):t}function Vo(t,e){var n=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?n["string"==typeof e?"string":"hash"]:n.map}function Lo(t){for(var e=rs(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Xo(i)]}return e}function Bo(t,e){var n=function(t,e){return null==t?o:t[e]}(t,e);return ui(n)?n:o}var Do=Dn?function(t){return null==t?[]:(t=te(t),Ke(Dn(t),function(e){return Ie.call(t,e)}))}:Ms,Mo=Dn?function(t){for(var e=[];t;)tn(e,Do(t)),t=Oe(t);return e}:Ms,Uo=Xr;function Wo(t,e,n){for(var r=-1,i=(e=Gi(e,t)).length,o=!1;++r<i;){var a=ca(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Eu(i)&&Go(a,i)&&(mu(t)||yu(t))}function qo(t){return"function"!=typeof t.constructor||Yo(t)?{}:dr(Oe(t))}function $o(t){return mu(t)||yu(t)||!!(ke&&t&&t[ke])}function Go(t,e){var n=typeof t;return!!(e=null==e?N:e)&&("number"==n||"symbol"!=n&&Qt.test(t))&&t>-1&&t%1==0&&t<e}function Ho(t,e,n){if(!Au(n))return!1;var r=typeof e;return!!("number"==r?bu(n)&&Go(e,n.length):"string"==r&&e in n)&&pu(n[e],t)}function Qo(t,e){if(mu(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Nu(t))||Pt.test(t)||!St.test(t)||null!=e&&t in te(e)}function Zo(t){var e=No(t),n=hr[e];if("function"!=typeof n||!(e in vr.prototype))return!1;if(t===n)return!0;var r=Fo(n);return!!r&&t===r[0]}(Yn&&Uo(new Yn(new ArrayBuffer(1)))!=ct||Xn&&Uo(new Xn)!=K||Jn&&"[object Promise]"!=Uo(Jn.resolve())||tr&&Uo(new tr)!=nt||er&&Uo(new er)!=at)&&(Uo=function(t){var e=Xr(t),n=e==J?t.constructor:o,r=n?la(n):"";if(r)switch(r){case or:return ct;case ar:return K;case ur:return"[object Promise]";case sr:return nt;case cr:return at}return e});var Ko=ue?Tu:Us;function Yo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||ae)}function Xo(t){return t==t&&!Au(t)}function Jo(t,e){return function(n){return null!=n&&n[t]===e&&(e!==o||t in te(n))}}function ta(t,e,r){return e=$n(e===o?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=$n(i.length-e,0),u=n(a);++o<a;)u[o]=i[e+o];o=-1;for(var s=n(e+1);++o<e;)s[o]=i[o];return s[e]=r(u),$e(t,this,s)}}function ea(t,e){return e.length<2?t:Kr(t,Pi(e,0,-1))}var na=aa(Ci),ra=Vn||function(t,e){return Fe.setTimeout(t,e)},ia=aa(Oi);function oa(t,e,n){var r=e+"";return ia(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Vt,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return He(D,function(n){var r="_."+n[0];e&n[1]&&!Ye(t,r)&&t.push(r)}),t.sort()}(function(t){var e=t.match(Lt);return e?e[1].split(Bt):[]}(r),n)))}function aa(t){var e=0,n=0;return function(){var r=Hn(),i=P-(r-n);if(n=r,i>0){if(++e>=S)return arguments[0]}else e=0;return t.apply(o,arguments)}}function ua(t,e){var n=-1,r=t.length,i=r-1;for(e=e===o?r:e;++n<e;){var a=wi(n,i),u=t[a];t[a]=t[n],t[n]=u}return t.length=e,t}var sa=function(t){var e=au(t,function(t){return n.size===l&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(jt,function(t,n,r,i){e.push(r?i.replace(Mt,"$1"):n||t)}),e});function ca(t){if("string"==typeof t||Nu(t))return t;var e=t+"";return"0"==e&&1/t==-F?"-0":e}function la(t){if(null!=t){try{return se.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function fa(t){if(t instanceof vr)return t.clone();var e=new mr(t.__wrapped__,t.__chain__);return e.__actions__=no(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var pa=Ti(function(t,e){return _u(t)?Lr(t,qr(e,1,_u,!0)):[]}),ha=Ti(function(t,e){var n=Ra(e);return _u(n)&&(n=o),_u(t)?Lr(t,qr(e,1,_u,!0),zo(n,2)):[]}),da=Ti(function(t,e){var n=Ra(e);return _u(n)&&(n=o),_u(t)?Lr(t,qr(e,1,_u,!0),o,n):[]});function ya(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Du(n);return i<0&&(i=$n(r+i,0)),un(t,zo(e,3),i)}function ma(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==o&&(i=Du(n),i=n<0?$n(r+i,0):Gn(i,r-1)),un(t,zo(e,3),i,!0)}function va(t){return null!=t&&t.length?qr(t,1):[]}function ba(t){return t&&t.length?t[0]:o}var _a=Ti(function(t){var e=Je(t,qi);return e.length&&e[0]===t[0]?ni(e):[]}),ga=Ti(function(t){var e=Ra(t),n=Je(t,qi);return e===Ra(n)?e=o:n.pop(),n.length&&n[0]===t[0]?ni(n,zo(e,2)):[]}),wa=Ti(function(t){var e=Ra(t),n=Je(t,qi);return(e="function"==typeof e?e:o)&&n.pop(),n.length&&n[0]===t[0]?ni(n,o,e):[]});function Ra(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Ta=Ti(xa);function xa(t,e){return t&&t.length&&e&&e.length?_i(t,e):t}var Ea=Po(function(t,e){var n=null==t?0:t.length,r=Fr(t,e);return gi(t,Je(e,function(t){return Go(t,n)?+t:t}).sort(Ji)),r});function Aa(t){return null==t?t:Kn.call(t)}var Ca=Ti(function(t){return Vi(qr(t,1,_u,!0))}),Oa=Ti(function(t){var e=Ra(t);return _u(e)&&(e=o),Vi(qr(t,1,_u,!0),zo(e,2))}),Sa=Ti(function(t){var e=Ra(t);return e="function"==typeof e?e:o,Vi(qr(t,1,_u,!0),o,e)});function Pa(t){if(!t||!t.length)return[];var e=0;return t=Ke(t,function(t){if(_u(t))return e=$n(t.length,e),!0}),mn(e,function(e){return Je(t,pn(e))})}function ja(t,e){if(!t||!t.length)return[];var n=Pa(t);return null==e?n:Je(n,function(t){return $e(e,o,t)})}var Ia=Ti(function(t,e){return _u(t)?Lr(t,e):[]}),Fa=Ti(function(t){return Ui(Ke(t,_u))}),Na=Ti(function(t){var e=Ra(t);return _u(e)&&(e=o),Ui(Ke(t,_u),zo(e,2))}),ka=Ti(function(t){var e=Ra(t);return e="function"==typeof e?e:o,Ui(Ke(t,_u),o,e)}),za=Ti(Pa);var Va=Ti(function(t){var e=t.length,n=e>1?t[e-1]:o;return ja(t,n="function"==typeof n?(t.pop(),n):o)});function La(t){var e=hr(t);return e.__chain__=!0,e}function Ba(t,e){return e(t)}var Da=Po(function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return Fr(e,t)};return!(e>1||this.__actions__.length)&&r instanceof vr&&Go(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:Ba,args:[i],thisArg:o}),new mr(r,this.__chain__).thru(function(t){return e&&!t.length&&t.push(o),t})):this.thru(i)});var Ma=io(function(t,e,n){ce.call(t,n)?++t[n]:Ir(t,n,1)});var Ua=fo(ya),Wa=fo(ma);function qa(t,e){return(mu(t)?He:Br)(t,zo(e,3))}function $a(t,e){return(mu(t)?Qe:Dr)(t,zo(e,3))}var Ga=io(function(t,e,n){ce.call(t,n)?t[n].push(e):Ir(t,n,[e])});var Ha=Ti(function(t,e,r){var i=-1,o="function"==typeof e,a=bu(t)?n(t.length):[];return Br(t,function(t){a[++i]=o?$e(e,t,r):ri(t,e,r)}),a}),Qa=io(function(t,e,n){Ir(t,n,e)});function Za(t,e){return(mu(t)?Je:pi)(t,zo(e,3))}var Ka=io(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]});var Ya=Ti(function(t,e){if(null==t)return[];var n=e.length;return n>1&&Ho(t,e[0],e[1])?e=[]:n>2&&Ho(e[0],e[1],e[2])&&(e=[e[0]]),vi(t,qr(e,1),[])}),Xa=zn||function(){return Fe.Date.now()};function Ja(t,e,n){return e=n?o:e,e=t&&null==e?t.length:e,Eo(t,x,o,o,o,o,e)}function tu(t,e){var n;if("function"!=typeof e)throw new re(s);return t=Du(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=o),n}}var eu=Ti(function(t,e,n){var r=v;if(n.length){var i=On(n,ko(eu));r|=R}return Eo(t,r,e,n,i)}),nu=Ti(function(t,e,n){var r=v|b;if(n.length){var i=On(n,ko(nu));r|=R}return Eo(e,r,t,n,i)});function ru(t,e,n){var r,i,a,u,c,l,f=0,p=!1,h=!1,d=!0;if("function"!=typeof t)throw new re(s);function y(e){var n=r,a=i;return r=i=o,f=e,u=t.apply(a,n)}function m(t){var n=t-l;return l===o||n>=e||n<0||h&&t-f>=a}function v(){var t=Xa();if(m(t))return b(t);c=ra(v,function(t){var n=e-(t-l);return h?Gn(n,a-(t-f)):n}(t))}function b(t){return c=o,d&&r?y(t):(r=i=o,u)}function _(){var t=Xa(),n=m(t);if(r=arguments,i=this,l=t,n){if(c===o)return function(t){return f=t,c=ra(v,e),p?y(t):u}(l);if(h)return c=ra(v,e),y(l)}return c===o&&(c=ra(v,e)),u}return e=Uu(e)||0,Au(n)&&(p=!!n.leading,a=(h="maxWait"in n)?$n(Uu(n.maxWait)||0,e):a,d="trailing"in n?!!n.trailing:d),_.cancel=function(){c!==o&&Zi(c),f=0,r=l=i=c=o},_.flush=function(){return c===o?u:b(Xa())},_}var iu=Ti(function(t,e){return Vr(t,1,e)}),ou=Ti(function(t,e,n){return Vr(t,Uu(e)||0,n)});function au(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new re(s);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(au.Cache||gr),n}function uu(t){if("function"!=typeof t)throw new re(s);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}au.Cache=gr;var su=Hi(function(t,e){var n=(e=1==e.length&&mu(e[0])?Je(e[0],vn(zo())):Je(qr(e,1),vn(zo()))).length;return Ti(function(r){for(var i=-1,o=Gn(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return $e(t,this,r)})}),cu=Ti(function(t,e){var n=On(e,ko(cu));return Eo(t,R,o,e,n)}),lu=Ti(function(t,e){var n=On(e,ko(lu));return Eo(t,T,o,e,n)}),fu=Po(function(t,e){return Eo(t,E,o,o,o,e)});function pu(t,e){return t===e||t!=t&&e!=e}var hu=go(Jr),du=go(function(t,e){return t>=e}),yu=ii(function(){return arguments}())?ii:function(t){return Cu(t)&&ce.call(t,"callee")&&!Ie.call(t,"callee")},mu=n.isArray,vu=Be?vn(Be):function(t){return Cu(t)&&Xr(t)==st};function bu(t){return null!=t&&Eu(t.length)&&!Tu(t)}function _u(t){return Cu(t)&&bu(t)}var gu=Mn||Us,wu=De?vn(De):function(t){return Cu(t)&&Xr(t)==$};function Ru(t){if(!Cu(t))return!1;var e=Xr(t);return e==H||e==G||"string"==typeof t.message&&"string"==typeof t.name&&!Pu(t)}function Tu(t){if(!Au(t))return!1;var e=Xr(t);return e==Q||e==Z||e==W||e==tt}function xu(t){return"number"==typeof t&&t==Du(t)}function Eu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=N}function Au(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Cu(t){return null!=t&&"object"==typeof t}var Ou=Me?vn(Me):function(t){return Cu(t)&&Uo(t)==K};function Su(t){return"number"==typeof t||Cu(t)&&Xr(t)==Y}function Pu(t){if(!Cu(t)||Xr(t)!=J)return!1;var e=Oe(t);if(null===e)return!0;var n=ce.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&se.call(n)==he}var ju=Ue?vn(Ue):function(t){return Cu(t)&&Xr(t)==et};var Iu=We?vn(We):function(t){return Cu(t)&&Uo(t)==nt};function Fu(t){return"string"==typeof t||!mu(t)&&Cu(t)&&Xr(t)==rt}function Nu(t){return"symbol"==typeof t||Cu(t)&&Xr(t)==it}var ku=qe?vn(qe):function(t){return Cu(t)&&Eu(t.length)&&!!Ae[Xr(t)]};var zu=go(fi),Vu=go(function(t,e){return t<=e});function Lu(t){if(!t)return[];if(bu(t))return Fu(t)?Fn(t):no(t);if(Ve&&t[Ve])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Ve]());var e=Uo(t);return(e==K?An:e==nt?Pn:ps)(t)}function Bu(t){return t?(t=Uu(t))===F||t===-F?(t<0?-1:1)*k:t==t?t:0:0===t?t:0}function Du(t){var e=Bu(t),n=e%1;return e==e?n?e-n:e:0}function Mu(t){return t?Nr(Du(t),0,V):0}function Uu(t){if("number"==typeof t)return t;if(Nu(t))return z;if(Au(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Au(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Nt,"");var n=$t.test(t);return n||Ht.test(t)?Pe(t.slice(2),n?2:8):qt.test(t)?z:+t}function Wu(t){return ro(t,is(t))}function qu(t){return null==t?"":zi(t)}var $u=oo(function(t,e){if(Yo(e)||bu(e))ro(e,rs(e),t);else for(var n in e)ce.call(e,n)&&Or(t,n,e[n])}),Gu=oo(function(t,e){ro(e,is(e),t)}),Hu=oo(function(t,e,n,r){ro(e,is(e),t,r)}),Qu=oo(function(t,e,n,r){ro(e,rs(e),t,r)}),Zu=Po(Fr);var Ku=Ti(function(t,e){t=te(t);var n=-1,r=e.length,i=r>2?e[2]:o;for(i&&Ho(e[0],e[1],i)&&(r=1);++n<r;)for(var a=e[n],u=is(a),s=-1,c=u.length;++s<c;){var l=u[s],f=t[l];(f===o||pu(f,ae[l])&&!ce.call(t,l))&&(t[l]=a[l])}return t}),Yu=Ti(function(t){return t.push(o,Co),$e(as,o,t)});function Xu(t,e,n){var r=null==t?o:Kr(t,e);return r===o?n:r}function Ju(t,e){return null!=t&&Wo(t,e,ei)}var ts=yo(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=pe.call(e)),t[e]=n},As(Ss)),es=yo(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=pe.call(e)),ce.call(t,e)?t[e].push(n):t[e]=[n]},zo),ns=Ti(ri);function rs(t){return bu(t)?Tr(t):ci(t)}function is(t){return bu(t)?Tr(t,!0):li(t)}var os=oo(function(t,e,n){yi(t,e,n)}),as=oo(function(t,e,n,r){yi(t,e,n,r)}),us=Po(function(t,e){var n={};if(null==t)return n;var r=!1;e=Je(e,function(e){return e=Gi(e,t),r||(r=e.length>1),e}),ro(t,Io(t),n),r&&(n=kr(n,p|h|d,Oo));for(var i=e.length;i--;)Li(n,e[i]);return n});var ss=Po(function(t,e){return null==t?{}:function(t,e){return bi(t,e,function(e,n){return Ju(t,n)})}(t,e)});function cs(t,e){if(null==t)return{};var n=Je(Io(t),function(t){return[t]});return e=zo(e),bi(t,n,function(t,n){return e(t,n[0])})}var ls=xo(rs),fs=xo(is);function ps(t){return null==t?[]:bn(t,rs(t))}var hs=co(function(t,e,n){return e=e.toLowerCase(),t+(n?ds(e):e)});function ds(t){return Rs(qu(t).toLowerCase())}function ys(t){return(t=qu(t))&&t.replace(Zt,Rn).replace(_e,"")}var ms=co(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),vs=co(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),bs=so("toLowerCase");var _s=co(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()});var gs=co(function(t,e,n){return t+(n?" ":"")+Rs(e)});var ws=co(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),Rs=so("toUpperCase");function Ts(t,e,n){return t=qu(t),(e=n?o:e)===o?function(t){return Te.test(t)}(t)?function(t){return t.match(we)||[]}(t):function(t){return t.match(Dt)||[]}(t):t.match(e)||[]}var xs=Ti(function(t,e){try{return $e(t,o,e)}catch(t){return Ru(t)?t:new i(t)}}),Es=Po(function(t,e){return He(e,function(e){e=ca(e),Ir(t,e,eu(t[e],t))}),t});function As(t){return function(){return t}}var Cs=po(),Os=po(!0);function Ss(t){return t}function Ps(t){return si("function"==typeof t?t:kr(t,p))}var js=Ti(function(t,e){return function(n){return ri(n,t,e)}}),Is=Ti(function(t,e){return function(n){return ri(t,n,e)}});function Fs(t,e,n){var r=rs(e),i=Zr(e,r);null!=n||Au(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=Zr(e,rs(e)));var o=!(Au(n)&&"chain"in n&&!n.chain),a=Tu(t);return He(i,function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__);return(n.__actions__=no(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,tn([this.value()],arguments))})}),t}function Ns(){}var ks=vo(Je),zs=vo(Ze),Vs=vo(rn);function Ls(t){return Qo(t)?pn(ca(t)):function(t){return function(e){return Kr(e,t)}}(t)}var Bs=_o(),Ds=_o(!0);function Ms(){return[]}function Us(){return!1}var Ws=mo(function(t,e){return t+e},0),qs=Ro("ceil"),$s=mo(function(t,e){return t/e},1),Gs=Ro("floor");var Hs=mo(function(t,e){return t*e},1),Qs=Ro("round"),Zs=mo(function(t,e){return t-e},0);return hr.after=function(t,e){if("function"!=typeof e)throw new re(s);return t=Du(t),function(){if(--t<1)return e.apply(this,arguments)}},hr.ary=Ja,hr.assign=$u,hr.assignIn=Gu,hr.assignInWith=Hu,hr.assignWith=Qu,hr.at=Zu,hr.before=tu,hr.bind=eu,hr.bindAll=Es,hr.bindKey=nu,hr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return mu(t)?t:[t]},hr.chain=La,hr.chunk=function(t,e,r){e=(r?Ho(t,e,r):e===o)?1:$n(Du(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var a=0,u=0,s=n(Ln(i/e));a<i;)s[u++]=Pi(t,a,a+=e);return s},hr.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},hr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=n(t-1),r=arguments[0],i=t;i--;)e[i-1]=arguments[i];return tn(mu(r)?no(r):[r],qr(e,1))},hr.cond=function(t){var e=null==t?0:t.length,n=zo();return t=e?Je(t,function(t){if("function"!=typeof t[1])throw new re(s);return[n(t[0]),t[1]]}):[],Ti(function(n){for(var r=-1;++r<e;){var i=t[r];if($e(i[0],this,n))return $e(i[1],this,n)}})},hr.conforms=function(t){return function(t){var e=rs(t);return function(n){return zr(n,t,e)}}(kr(t,p))},hr.constant=As,hr.countBy=Ma,hr.create=function(t,e){var n=dr(t);return null==e?n:jr(n,e)},hr.curry=function t(e,n,r){var i=Eo(e,g,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},hr.curryRight=function t(e,n,r){var i=Eo(e,w,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},hr.debounce=ru,hr.defaults=Ku,hr.defaultsDeep=Yu,hr.defer=iu,hr.delay=ou,hr.difference=pa,hr.differenceBy=ha,hr.differenceWith=da,hr.drop=function(t,e,n){var r=null==t?0:t.length;return r?Pi(t,(e=n||e===o?1:Du(e))<0?0:e,r):[]},hr.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Pi(t,0,(e=r-(e=n||e===o?1:Du(e)))<0?0:e):[]},hr.dropRightWhile=function(t,e){return t&&t.length?Di(t,zo(e,3),!0,!0):[]},hr.dropWhile=function(t,e){return t&&t.length?Di(t,zo(e,3),!0):[]},hr.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&Ho(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=Du(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:Du(r))<0&&(r+=i),r=n>r?0:Mu(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},hr.filter=function(t,e){return(mu(t)?Ke:Wr)(t,zo(e,3))},hr.flatMap=function(t,e){return qr(Za(t,e),1)},hr.flatMapDeep=function(t,e){return qr(Za(t,e),F)},hr.flatMapDepth=function(t,e,n){return n=n===o?1:Du(n),qr(Za(t,e),n)},hr.flatten=va,hr.flattenDeep=function(t){return null!=t&&t.length?qr(t,F):[]},hr.flattenDepth=function(t,e){return null!=t&&t.length?qr(t,e=e===o?1:Du(e)):[]},hr.flip=function(t){return Eo(t,A)},hr.flow=Cs,hr.flowRight=Os,hr.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},hr.functions=function(t){return null==t?[]:Zr(t,rs(t))},hr.functionsIn=function(t){return null==t?[]:Zr(t,is(t))},hr.groupBy=Ga,hr.initial=function(t){return null!=t&&t.length?Pi(t,0,-1):[]},hr.intersection=_a,hr.intersectionBy=ga,hr.intersectionWith=wa,hr.invert=ts,hr.invertBy=es,hr.invokeMap=Ha,hr.iteratee=Ps,hr.keyBy=Qa,hr.keys=rs,hr.keysIn=is,hr.map=Za,hr.mapKeys=function(t,e){var n={};return e=zo(e,3),Hr(t,function(t,r,i){Ir(n,e(t,r,i),t)}),n},hr.mapValues=function(t,e){var n={};return e=zo(e,3),Hr(t,function(t,r,i){Ir(n,r,e(t,r,i))}),n},hr.matches=function(t){return hi(kr(t,p))},hr.matchesProperty=function(t,e){return di(t,kr(e,p))},hr.memoize=au,hr.merge=os,hr.mergeWith=as,hr.method=js,hr.methodOf=Is,hr.mixin=Fs,hr.negate=uu,hr.nthArg=function(t){return t=Du(t),Ti(function(e){return mi(e,t)})},hr.omit=us,hr.omitBy=function(t,e){return cs(t,uu(zo(e)))},hr.once=function(t){return tu(2,t)},hr.orderBy=function(t,e,n,r){return null==t?[]:(mu(e)||(e=null==e?[]:[e]),mu(n=r?o:n)||(n=null==n?[]:[n]),vi(t,e,n))},hr.over=ks,hr.overArgs=su,hr.overEvery=zs,hr.overSome=Vs,hr.partial=cu,hr.partialRight=lu,hr.partition=Ka,hr.pick=ss,hr.pickBy=cs,hr.property=Ls,hr.propertyOf=function(t){return function(e){return null==t?o:Kr(t,e)}},hr.pull=Ta,hr.pullAll=xa,hr.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?_i(t,e,zo(n,2)):t},hr.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?_i(t,e,o,n):t},hr.pullAt=Ea,hr.range=Bs,hr.rangeRight=Ds,hr.rearg=fu,hr.reject=function(t,e){return(mu(t)?Ke:Wr)(t,uu(zo(e,3)))},hr.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=zo(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return gi(t,i),n},hr.rest=function(t,e){if("function"!=typeof t)throw new re(s);return Ti(t,e=e===o?e:Du(e))},hr.reverse=Aa,hr.sampleSize=function(t,e,n){return e=(n?Ho(t,e,n):e===o)?1:Du(e),(mu(t)?Er:Ei)(t,e)},hr.set=function(t,e,n){return null==t?t:Ai(t,e,n)},hr.setWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:Ai(t,e,n,r)},hr.shuffle=function(t){return(mu(t)?Ar:Si)(t)},hr.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&Ho(t,e,n)?(e=0,n=r):(e=null==e?0:Du(e),n=n===o?r:Du(n)),Pi(t,e,n)):[]},hr.sortBy=Ya,hr.sortedUniq=function(t){return t&&t.length?Ni(t):[]},hr.sortedUniqBy=function(t,e){return t&&t.length?Ni(t,zo(e,2)):[]},hr.split=function(t,e,n){return n&&"number"!=typeof n&&Ho(t,e,n)&&(e=n=o),(n=n===o?V:n>>>0)?(t=qu(t))&&("string"==typeof e||null!=e&&!ju(e))&&!(e=zi(e))&&En(t)?Qi(Fn(t),0,n):t.split(e,n):[]},hr.spread=function(t,e){if("function"!=typeof t)throw new re(s);return e=null==e?0:$n(Du(e),0),Ti(function(n){var r=n[e],i=Qi(n,0,e);return r&&tn(i,r),$e(t,this,i)})},hr.tail=function(t){var e=null==t?0:t.length;return e?Pi(t,1,e):[]},hr.take=function(t,e,n){return t&&t.length?Pi(t,0,(e=n||e===o?1:Du(e))<0?0:e):[]},hr.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Pi(t,(e=r-(e=n||e===o?1:Du(e)))<0?0:e,r):[]},hr.takeRightWhile=function(t,e){return t&&t.length?Di(t,zo(e,3),!1,!0):[]},hr.takeWhile=function(t,e){return t&&t.length?Di(t,zo(e,3)):[]},hr.tap=function(t,e){return e(t),t},hr.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new re(s);return Au(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),ru(t,e,{leading:r,maxWait:e,trailing:i})},hr.thru=Ba,hr.toArray=Lu,hr.toPairs=ls,hr.toPairsIn=fs,hr.toPath=function(t){return mu(t)?Je(t,ca):Nu(t)?[t]:no(sa(qu(t)))},hr.toPlainObject=Wu,hr.transform=function(t,e,n){var r=mu(t),i=r||gu(t)||ku(t);if(e=zo(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:Au(t)&&Tu(o)?dr(Oe(t)):{}}return(i?He:Hr)(t,function(t,r,i){return e(n,t,r,i)}),n},hr.unary=function(t){return Ja(t,1)},hr.union=Ca,hr.unionBy=Oa,hr.unionWith=Sa,hr.uniq=function(t){return t&&t.length?Vi(t):[]},hr.uniqBy=function(t,e){return t&&t.length?Vi(t,zo(e,2)):[]},hr.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?Vi(t,o,e):[]},hr.unset=function(t,e){return null==t||Li(t,e)},hr.unzip=Pa,hr.unzipWith=ja,hr.update=function(t,e,n){return null==t?t:Bi(t,e,$i(n))},hr.updateWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:Bi(t,e,$i(n),r)},hr.values=ps,hr.valuesIn=function(t){return null==t?[]:bn(t,is(t))},hr.without=Ia,hr.words=Ts,hr.wrap=function(t,e){return cu($i(e),t)},hr.xor=Fa,hr.xorBy=Na,hr.xorWith=ka,hr.zip=za,hr.zipObject=function(t,e){return Wi(t||[],e||[],Or)},hr.zipObjectDeep=function(t,e){return Wi(t||[],e||[],Ai)},hr.zipWith=Va,hr.entries=ls,hr.entriesIn=fs,hr.extend=Gu,hr.extendWith=Hu,Fs(hr,hr),hr.add=Ws,hr.attempt=xs,hr.camelCase=hs,hr.capitalize=ds,hr.ceil=qs,hr.clamp=function(t,e,n){return n===o&&(n=e,e=o),n!==o&&(n=(n=Uu(n))==n?n:0),e!==o&&(e=(e=Uu(e))==e?e:0),Nr(Uu(t),e,n)},hr.clone=function(t){return kr(t,d)},hr.cloneDeep=function(t){return kr(t,p|d)},hr.cloneDeepWith=function(t,e){return kr(t,p|d,e="function"==typeof e?e:o)},hr.cloneWith=function(t,e){return kr(t,d,e="function"==typeof e?e:o)},hr.conformsTo=function(t,e){return null==e||zr(t,e,rs(e))},hr.deburr=ys,hr.defaultTo=function(t,e){return null==t||t!=t?e:t},hr.divide=$s,hr.endsWith=function(t,e,n){t=qu(t),e=zi(e);var r=t.length,i=n=n===o?r:Nr(Du(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},hr.eq=pu,hr.escape=function(t){return(t=qu(t))&&Et.test(t)?t.replace(Tt,Tn):t},hr.escapeRegExp=function(t){return(t=qu(t))&&Ft.test(t)?t.replace(It,"\\$&"):t},hr.every=function(t,e,n){var r=mu(t)?Ze:Mr;return n&&Ho(t,e,n)&&(e=o),r(t,zo(e,3))},hr.find=Ua,hr.findIndex=ya,hr.findKey=function(t,e){return an(t,zo(e,3),Hr)},hr.findLast=Wa,hr.findLastIndex=ma,hr.findLastKey=function(t,e){return an(t,zo(e,3),Qr)},hr.floor=Gs,hr.forEach=qa,hr.forEachRight=$a,hr.forIn=function(t,e){return null==t?t:$r(t,zo(e,3),is)},hr.forInRight=function(t,e){return null==t?t:Gr(t,zo(e,3),is)},hr.forOwn=function(t,e){return t&&Hr(t,zo(e,3))},hr.forOwnRight=function(t,e){return t&&Qr(t,zo(e,3))},hr.get=Xu,hr.gt=hu,hr.gte=du,hr.has=function(t,e){return null!=t&&Wo(t,e,ti)},hr.hasIn=Ju,hr.head=ba,hr.identity=Ss,hr.includes=function(t,e,n,r){t=bu(t)?t:ps(t),n=n&&!r?Du(n):0;var i=t.length;return n<0&&(n=$n(i+n,0)),Fu(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&sn(t,e,n)>-1},hr.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Du(n);return i<0&&(i=$n(r+i,0)),sn(t,e,i)},hr.inRange=function(t,e,n){return e=Bu(e),n===o?(n=e,e=0):n=Bu(n),function(t,e,n){return t>=Gn(e,n)&&t<$n(e,n)}(t=Uu(t),e,n)},hr.invoke=ns,hr.isArguments=yu,hr.isArray=mu,hr.isArrayBuffer=vu,hr.isArrayLike=bu,hr.isArrayLikeObject=_u,hr.isBoolean=function(t){return!0===t||!1===t||Cu(t)&&Xr(t)==q},hr.isBuffer=gu,hr.isDate=wu,hr.isElement=function(t){return Cu(t)&&1===t.nodeType&&!Pu(t)},hr.isEmpty=function(t){if(null==t)return!0;if(bu(t)&&(mu(t)||"string"==typeof t||"function"==typeof t.splice||gu(t)||ku(t)||yu(t)))return!t.length;var e=Uo(t);if(e==K||e==nt)return!t.size;if(Yo(t))return!ci(t).length;for(var n in t)if(ce.call(t,n))return!1;return!0},hr.isEqual=function(t,e){return oi(t,e)},hr.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:o)?n(t,e):o;return r===o?oi(t,e,o,n):!!r},hr.isError=Ru,hr.isFinite=function(t){return"number"==typeof t&&Un(t)},hr.isFunction=Tu,hr.isInteger=xu,hr.isLength=Eu,hr.isMap=Ou,hr.isMatch=function(t,e){return t===e||ai(t,e,Lo(e))},hr.isMatchWith=function(t,e,n){return n="function"==typeof n?n:o,ai(t,e,Lo(e),n)},hr.isNaN=function(t){return Su(t)&&t!=+t},hr.isNative=function(t){if(Ko(t))throw new i(u);return ui(t)},hr.isNil=function(t){return null==t},hr.isNull=function(t){return null===t},hr.isNumber=Su,hr.isObject=Au,hr.isObjectLike=Cu,hr.isPlainObject=Pu,hr.isRegExp=ju,hr.isSafeInteger=function(t){return xu(t)&&t>=-N&&t<=N},hr.isSet=Iu,hr.isString=Fu,hr.isSymbol=Nu,hr.isTypedArray=ku,hr.isUndefined=function(t){return t===o},hr.isWeakMap=function(t){return Cu(t)&&Uo(t)==at},hr.isWeakSet=function(t){return Cu(t)&&Xr(t)==ut},hr.join=function(t,e){return null==t?"":Wn.call(t,e)},hr.kebabCase=ms,hr.last=Ra,hr.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=Du(n))<0?$n(r+i,0):Gn(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):un(t,ln,i,!0)},hr.lowerCase=vs,hr.lowerFirst=bs,hr.lt=zu,hr.lte=Vu,hr.max=function(t){return t&&t.length?Ur(t,Ss,Jr):o},hr.maxBy=function(t,e){return t&&t.length?Ur(t,zo(e,2),Jr):o},hr.mean=function(t){return fn(t,Ss)},hr.meanBy=function(t,e){return fn(t,zo(e,2))},hr.min=function(t){return t&&t.length?Ur(t,Ss,fi):o},hr.minBy=function(t,e){return t&&t.length?Ur(t,zo(e,2),fi):o},hr.stubArray=Ms,hr.stubFalse=Us,hr.stubObject=function(){return{}},hr.stubString=function(){return""},hr.stubTrue=function(){return!0},hr.multiply=Hs,hr.nth=function(t,e){return t&&t.length?mi(t,Du(e)):o},hr.noConflict=function(){return Fe._===this&&(Fe._=de),this},hr.noop=Ns,hr.now=Xa,hr.pad=function(t,e,n){t=qu(t);var r=(e=Du(e))?In(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return bo(Bn(i),n)+t+bo(Ln(i),n)},hr.padEnd=function(t,e,n){t=qu(t);var r=(e=Du(e))?In(t):0;return e&&r<e?t+bo(e-r,n):t},hr.padStart=function(t,e,n){t=qu(t);var r=(e=Du(e))?In(t):0;return e&&r<e?bo(e-r,n)+t:t},hr.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),Qn(qu(t).replace(kt,""),e||0)},hr.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Ho(t,e,n)&&(e=n=o),n===o&&("boolean"==typeof e?(n=e,e=o):"boolean"==typeof t&&(n=t,t=o)),t===o&&e===o?(t=0,e=1):(t=Bu(t),e===o?(e=t,t=0):e=Bu(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=Zn();return Gn(t+i*(e-t+Se("1e-"+((i+"").length-1))),e)}return wi(t,e)},hr.reduce=function(t,e,n){var r=mu(t)?en:dn,i=arguments.length<3;return r(t,zo(e,4),n,i,Br)},hr.reduceRight=function(t,e,n){var r=mu(t)?nn:dn,i=arguments.length<3;return r(t,zo(e,4),n,i,Dr)},hr.repeat=function(t,e,n){return e=(n?Ho(t,e,n):e===o)?1:Du(e),Ri(qu(t),e)},hr.replace=function(){var t=arguments,e=qu(t[0]);return t.length<3?e:e.replace(t[1],t[2])},hr.result=function(t,e,n){var r=-1,i=(e=Gi(e,t)).length;for(i||(i=1,t=o);++r<i;){var a=null==t?o:t[ca(e[r])];a===o&&(r=i,a=n),t=Tu(a)?a.call(t):a}return t},hr.round=Qs,hr.runInContext=t,hr.sample=function(t){return(mu(t)?xr:xi)(t)},hr.size=function(t){if(null==t)return 0;if(bu(t))return Fu(t)?In(t):t.length;var e=Uo(t);return e==K||e==nt?t.size:ci(t).length},hr.snakeCase=_s,hr.some=function(t,e,n){var r=mu(t)?rn:ji;return n&&Ho(t,e,n)&&(e=o),r(t,zo(e,3))},hr.sortedIndex=function(t,e){return Ii(t,e)},hr.sortedIndexBy=function(t,e,n){return Fi(t,e,zo(n,2))},hr.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Ii(t,e);if(r<n&&pu(t[r],e))return r}return-1},hr.sortedLastIndex=function(t,e){return Ii(t,e,!0)},hr.sortedLastIndexBy=function(t,e,n){return Fi(t,e,zo(n,2),!0)},hr.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=Ii(t,e,!0)-1;if(pu(t[n],e))return n}return-1},hr.startCase=gs,hr.startsWith=function(t,e,n){return t=qu(t),n=null==n?0:Nr(Du(n),0,t.length),e=zi(e),t.slice(n,n+e.length)==e},hr.subtract=Zs,hr.sum=function(t){return t&&t.length?yn(t,Ss):0},hr.sumBy=function(t,e){return t&&t.length?yn(t,zo(e,2)):0},hr.template=function(t,e,n){var r=hr.templateSettings;n&&Ho(t,e,n)&&(e=o),t=qu(t),e=Hu({},e,r,Ao);var i,a,u=Hu({},e.imports,r.imports,Ao),s=rs(u),c=bn(u,s),l=0,f=e.interpolate||Kt,p="__p += '",h=ee((e.escape||Kt).source+"|"+f.source+"|"+(f===Ot?Ut:Kt).source+"|"+(e.evaluate||Kt).source+"|$","g"),d="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++Ee+"]")+"\n";t.replace(h,function(e,n,r,o,u,s){return r||(r=o),p+=t.slice(l,s).replace(Yt,xn),n&&(i=!0,p+="' +\n__e("+n+") +\n'"),u&&(a=!0,p+="';\n"+u+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=s+e.length,e}),p+="';\n";var y=e.variable;y||(p="with (obj) {\n"+p+"\n}\n"),p=(a?p.replace(_t,""):p).replace(gt,"$1").replace(wt,"$1;"),p="function("+(y||"obj")+") {\n"+(y?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var m=xs(function(){return Xt(s,d+"return "+p).apply(o,c)});if(m.source=p,Ru(m))throw m;return m},hr.times=function(t,e){if((t=Du(t))<1||t>N)return[];var n=V,r=Gn(t,V);e=zo(e),t-=V;for(var i=mn(r,e);++n<t;)e(n);return i},hr.toFinite=Bu,hr.toInteger=Du,hr.toLength=Mu,hr.toLower=function(t){return qu(t).toLowerCase()},hr.toNumber=Uu,hr.toSafeInteger=function(t){return t?Nr(Du(t),-N,N):0===t?t:0},hr.toString=qu,hr.toUpper=function(t){return qu(t).toUpperCase()},hr.trim=function(t,e,n){if((t=qu(t))&&(n||e===o))return t.replace(Nt,"");if(!t||!(e=zi(e)))return t;var r=Fn(t),i=Fn(e);return Qi(r,gn(r,i),wn(r,i)+1).join("")},hr.trimEnd=function(t,e,n){if((t=qu(t))&&(n||e===o))return t.replace(zt,"");if(!t||!(e=zi(e)))return t;var r=Fn(t);return Qi(r,0,wn(r,Fn(e))+1).join("")},hr.trimStart=function(t,e,n){if((t=qu(t))&&(n||e===o))return t.replace(kt,"");if(!t||!(e=zi(e)))return t;var r=Fn(t);return Qi(r,gn(r,Fn(e))).join("")},hr.truncate=function(t,e){var n=C,r=O;if(Au(e)){var i="separator"in e?e.separator:i;n="length"in e?Du(e.length):n,r="omission"in e?zi(e.omission):r}var a=(t=qu(t)).length;if(En(t)){var u=Fn(t);a=u.length}if(n>=a)return t;var s=n-In(r);if(s<1)return r;var c=u?Qi(u,0,s).join(""):t.slice(0,s);if(i===o)return c+r;if(u&&(s+=c.length-s),ju(i)){if(t.slice(s).search(i)){var l,f=c;for(i.global||(i=ee(i.source,qu(Wt.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var p=l.index;c=c.slice(0,p===o?s:p)}}else if(t.indexOf(zi(i),s)!=s){var h=c.lastIndexOf(i);h>-1&&(c=c.slice(0,h))}return c+r},hr.unescape=function(t){return(t=qu(t))&&xt.test(t)?t.replace(Rt,Nn):t},hr.uniqueId=function(t){var e=++le;return qu(t)+e},hr.upperCase=ws,hr.upperFirst=Rs,hr.each=qa,hr.eachRight=$a,hr.first=ba,Fs(hr,function(){var t={};return Hr(hr,function(e,n){ce.call(hr.prototype,n)||(t[n]=e)}),t}(),{chain:!1}),hr.VERSION="4.17.10",He(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){hr[t].placeholder=hr}),He(["drop","take"],function(t,e){vr.prototype[t]=function(n){n=n===o?1:$n(Du(n),0);var r=this.__filtered__&&!e?new vr(this):this.clone();return r.__filtered__?r.__takeCount__=Gn(n,r.__takeCount__):r.__views__.push({size:Gn(n,V),type:t+(r.__dir__<0?"Right":"")}),r},vr.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),He(["filter","map","takeWhile"],function(t,e){var n=e+1,r=n==j||3==n;vr.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:zo(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),He(["head","last"],function(t,e){var n="take"+(e?"Right":"");vr.prototype[t]=function(){return this[n](1).value()[0]}}),He(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");vr.prototype[t]=function(){return this.__filtered__?new vr(this):this[n](1)}}),vr.prototype.compact=function(){return this.filter(Ss)},vr.prototype.find=function(t){return this.filter(t).head()},vr.prototype.findLast=function(t){return this.reverse().find(t)},vr.prototype.invokeMap=Ti(function(t,e){return"function"==typeof t?new vr(this):this.map(function(n){return ri(n,t,e)})}),vr.prototype.reject=function(t){return this.filter(uu(zo(t)))},vr.prototype.slice=function(t,e){t=Du(t);var n=this;return n.__filtered__&&(t>0||e<0)?new vr(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==o&&(n=(e=Du(e))<0?n.dropRight(-e):n.take(e-t)),n)},vr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},vr.prototype.toArray=function(){return this.take(V)},Hr(vr.prototype,function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=hr[r?"take"+("last"==e?"Right":""):e],a=r||/^find/.test(e);i&&(hr.prototype[e]=function(){var e=this.__wrapped__,u=r?[1]:arguments,s=e instanceof vr,c=u[0],l=s||mu(e),f=function(t){var e=i.apply(hr,tn([t],u));return r&&p?e[0]:e};l&&n&&"function"==typeof c&&1!=c.length&&(s=l=!1);var p=this.__chain__,h=!!this.__actions__.length,d=a&&!p,y=s&&!h;if(!a&&l){e=y?e:new vr(this);var m=t.apply(e,u);return m.__actions__.push({func:Ba,args:[f],thisArg:o}),new mr(m,p)}return d&&y?t.apply(this,u):(m=this.thru(f),d?r?m.value()[0]:m.value():m)})}),He(["pop","push","shift","sort","splice","unshift"],function(t){var e=ie[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);hr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(mu(i)?i:[],t)}return this[n](function(n){return e.apply(mu(n)?n:[],t)})}}),Hr(vr.prototype,function(t,e){var n=hr[e];if(n){var r=n.name+"";(ir[r]||(ir[r]=[])).push({name:e,func:n})}}),ir[ho(o,b).name]=[{name:"wrapper",func:o}],vr.prototype.clone=function(){var t=new vr(this.__wrapped__);return t.__actions__=no(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=no(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=no(this.__views__),t},vr.prototype.reverse=function(){if(this.__filtered__){var t=new vr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},vr.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=mu(t),r=e<0,i=n?t.length:0,o=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=Gn(e,t+a);break;case"takeRight":t=$n(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,u=o.end,s=u-a,c=r?u:a-1,l=this.__iteratees__,f=l.length,p=0,h=Gn(s,this.__takeCount__);if(!n||!r&&i==s&&h==s)return Mi(t,this.__actions__);var d=[];t:for(;s--&&p<h;){for(var y=-1,m=t[c+=e];++y<f;){var v=l[y],b=v.iteratee,_=v.type,g=b(m);if(_==I)m=g;else if(!g){if(_==j)continue t;break t}}d[p++]=m}return d},hr.prototype.at=Da,hr.prototype.chain=function(){return La(this)},hr.prototype.commit=function(){return new mr(this.value(),this.__chain__)},hr.prototype.next=function(){this.__values__===o&&(this.__values__=Lu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},hr.prototype.plant=function(t){for(var e,n=this;n instanceof yr;){var r=fa(n);r.__index__=0,r.__values__=o,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},hr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof vr){var e=t;return this.__actions__.length&&(e=new vr(this)),(e=e.reverse()).__actions__.push({func:Ba,args:[Aa],thisArg:o}),new mr(e,this.__chain__)}return this.thru(Aa)},hr.prototype.toJSON=hr.prototype.valueOf=hr.prototype.value=function(){return Mi(this.__wrapped__,this.__actions__)},hr.prototype.first=hr.prototype.head,Ve&&(hr.prototype[Ve]=function(){return this}),hr}();Fe._=kn,(i=function(){return kn}.call(e,n,e,r))===o||(r.exports=i)}).call(this)}).call(this,n(15),n(20)(t))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=n(4),a=n(6),u=n(1),s=n(21),c=n(3),l=n(8),f=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;o.func=n,o.args=s.clone(r),o.receiver=i;var a=o.func.type.returnType;return a instanceof u.VoidType||a instanceof u.ReferenceType||(o.returnByValueTarget=o.createTemporaryObject(a,(o.func.name||"unknown")+"() [return]")),o.context.translationUnit.registerFunctionCall(o),o}return r(e,t),e.prototype.createRuntimeFunctionCall=function(t){return new d(this,t)},e}(i.PotentialFullExpression);e.FunctionCall=f;var p=0,h=2,d=function(t){function e(e,n){var r=t.call(this,e,"call",n)||this;r.index=p;var i=r.model.func.definition;(r.argInitializers=r.model.argInitializers.map(function(t){return t.createRuntimeInitializer(r)}),r.receiver=r.model.receiver&&r.model.receiver.runtimeLookup(r),r.calledFunction=i.createRuntimeFunction(r,r.receiver),r.model.returnByValueTarget)&&r.calledFunction.setReturnObject(r.model.returnByValueTarget.objectInstance(r));return r.index=h,r}return r(e,t),e.prototype.upNextImpl=function(){if(1===this.index)for(var t=this.argInitializers.length-1;t>=0;--t)this.sim.push(this.argInitializers[t]);else 2===this.index&&(this.calledFunction.loseControl(),this.containingRuntimeFunction.gainControl(),this.done(),this.sim.pop())},e.prototype.stepForwardImpl=function(){this.index===p?(this.calledFunction.pushStackFrame(),this.index=1):this.index===h&&(this.containingRuntimeFunction.loseControl(),this.sim.push(this.calledFunction),this.calledFunction.gainControl(),this.receiver&&this.receiver.callReceived(),this.observable.send("called",this.calledFunction),this.index=2)},e}(i.RuntimePotentialFullExpression);e.RuntimeFunctionCall=d;var y=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.attach(i.operand=n),i.args=r,r.forEach(function(t){return i.attach(t)}),l.allWellTyped(r)?n instanceof a.IdentifierExpression?n.entity?n.entity instanceof o.FunctionEntity?(i.type=u.noRef(n.entity.type.returnType),i.valueCategory=n.entity.type.returnType instanceof u.ReferenceType?"lvalue":"prvalue",i.call=new f(e,n.entity,r),i):(i.addNote(c.CPPError.expr.functionCall.operand(i,n.entity)),i):i:(i.addNote(c.CPPError.expr.functionCall.invalid_operand_expression(i,n)),i):i}return r(e,t),e.createFromAST=function(t,n){var r=t.args.map(function(t){return a.createExpressionFromAST(t,n)}),o=r.map(function(t){return t.type});return new e(n,a.createExpressionFromAST(t.operand,i.createExpressionContext(n,o)),r)},e.prototype.createRuntimeExpression=function(t){return new v(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(l.Expression);e.FunctionCallExpression=y;var m=0,v=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=m,r.operand=r.model.operand.createRuntimeExpression(r),r.args=r.model.args.map(function(t){return t.createRuntimeExpression(r)}),r.call=r.model.call.createRuntimeFunctionCall(r),r}return r(e,t),e.prototype.upNextImpl=function(){if(this.index===m)this.sim.push(this.operand),this.index=1;else{if(1===this.index)return this.sim.push(this.call),this.index=2,!0;if(2===this.index){if(this.model.type,u.VoidType,this.model.isReferenceTyped())this.setEvalResult(this.call.calledFunction.returnObject);else if(this.model.isAtomicTyped()){var t=this.call.calledFunction.returnObject;this.setEvalResult(t.getValue())}else this.setEvalResult(this.call.calledFunction.returnObject);this.sim.pop()}}},e.prototype.stepForwardImpl=function(){},e}(l.RuntimeExpression);e.RuntimeFunctionCallExpression=v},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(5),i=n(7),o=n(2),a=n(0),u=n(9),s=n(1);!function(t){t.UNDEFINED_BEHAVIOR="undefined_behavior",t.UNSPECIFIED_BEHAVIOR="unspecified_behavior",t.IMPLEMENTATION_DEFINED_BEHAVIOR="implementation_defined_behavior",t.MEMORY_LEAK="memory_leak",t.ASSERTION_FAILURE="assertion_failure",t.CRASH="crash"}(e.SimulationEvent||(e.SimulationEvent={}));var c=function(){function t(t){this.observable=new r.Observable(this),this.random=new a.CPPRandom,this.alertsOff=!1,this._eventsOccurred={undefined_behavior:[],unspecified_behavior:[],implementation_defined_behavior:[],memory_leak:[],assertion_failure:[],crash:[]},this.eventsOccurred=this._eventsOccurred,this.isPaused=!0,this.program=t,this.memory=new i.Memory,this.execStack=this._execStack=[],this.pendingNews=[],this.leakCheckIndex=0,this.isPaused=!0,this.stepsTaken=0,this.atEnd=!1,this.start()}return t.prototype.start=function(){this.allocateStringLiterals(),this.callMain(),this.push(this.program.globalObjectAllocator.createRuntimeConstruct(this)),this.observable.send("started"),this.upNext()},t.prototype.callMain=function(){this.mainReturnObject=new u.MainReturnObject(this.memory),this.mainFunction=new o.RuntimeFunction(this.program.mainFunction,this),this.mainFunction.setReturnObject(this.mainReturnObject),this.mainFunction.pushStackFrame(),this.push(this.mainFunction),this.mainFunction.gainControl()},t.prototype.push=function(t){this._execStack.push(t),t.pushed(),this.observable.send("pushed",t)},t.prototype.top=function(){if(this.execStack.length>0)return this.execStack[this.execStack.length-1]},t.prototype.pop=function(){return this._execStack.pop()},t.prototype.popUntil=function(t){for(;this._execStack.length>0&&this._execStack[this._execStack.length-1]!==t;)this.pop()},t.prototype.topFunction=function(){for(var t=this.execStack.length-1;t>=0;--t){var e=this.execStack[t];if(e instanceof o.RuntimeFunction)return e}},t.prototype.allocateStringLiterals=function(){var t=this,e=this.program.translationUnits;for(var n in e)e[n].stringLiterals.forEach(function(e){t.memory.allocateStringLiteral(e)})},t.prototype.stepForward=function(t){void 0===t&&(t=1);for(var e=0;!this.atEnd&&e<t;++e)this._stepForward();this.observable.send("afterFullStep",this.execStack.length>0&&this.execStack[this.execStack.length-1])},t.prototype._stepForward=function(){var t=this.top();t&&(this.observable.send("beforeStepForward",{rt:t}),t.stepForward(),this.observable.send("afterStepForward",{rt:t}),++this.stepsTaken,this.upNext())},t.prototype.upNext=function(){for(;;){var t=this.top();if(!t)return this.atEnd=!0,void this.observable.send("atEnded");if(this.observable.send("beforeUpNext",{rt:t}),t.upNext(),this.observable.send("afterUpNext",{inst:t}),t===this.top())break}},t.prototype.stepToEnd=function(){for(;!this.atEnd;)this.stepForward()},t.prototype.cout=function(t){var e="";if(t.type instanceof s.PointerType&&t.type.ptrTo instanceof s.Char)for(var n=t.rawValue,r=this.memory.getByte(n);!s.Char.isNullChar(r);)e+=t.type.ptrTo.valueToOstreamString(r),r=this.memory.getByte(++n);else e=a.escapeString(t.valueToOstreamString());console.log("cout: "+e)},t.prototype.eventOccurred=function(t,e,n){this._eventsOccurred[t].push(e),n&&this.alert(e)},t.prototype.hasEventOccurred=function(t){return this.eventsOccurred[t].length>0},t.prototype.alert=function(t){this.alertsOff||this.observable.send("alert",t)},t}();e.Simulation=c},function(t,e){t.exports=function(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}},function(t,e){t.exports=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e){t.exports=function(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}},function(t,e){t.exports=function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}},function(t,e){t.exports=function(t){return t!=t}},function(t,e){t.exports=function(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}},function(t,e,n){var r=n(30),i=n(29),o=n(28);t.exports=function(t,e,n){return e==e?o(t,e,n):r(t,i,n)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}},function(t,e,n){var r=n(32),i=n(31),o=n(27),a=n(26),u=n(25),s=Array.prototype.splice;t.exports=function(t,e,n,c){var l=c?o:i,f=-1,p=e.length,h=t;for(t===e&&(e=u(e)),n&&(h=r(t,a(n)));++f<p;)for(var d=0,y=e[f],m=n?n(y):y;(d=l(h,m,d,c))>-1;)h!==t&&s.call(h,d,1),s.call(t,d,1);return t}},function(t,e,n){var r=n(33);t.exports=function(t,e){return t&&t.length&&e&&e.length?r(t,e):t}},function(t,e){var n=800,r=16,i=Date.now;t.exports=function(t){var e=0,o=0;return function(){var a=i(),u=r-(a-o);if(o=a,u>0){if(++e>=n)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(16)["__core-js_shared__"];t.exports=r},function(t,e,n){var r=n(38),i=function(){var t=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}();t.exports=function(t){return!!i&&i in t}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r=n(17),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,u=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var i=a.call(t);return r&&(e?t[u]=n:delete t[u]),i}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(15))},function(t,e,n){var r=n(17),i=n(41),o=n(40),a="[object Null]",u="[object Undefined]",s=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?u:a:s&&s in Object(t)?i(t):o(t)}},function(t,e,n){var r=n(43),i=n(14),o="[object AsyncFunction]",a="[object Function]",u="[object GeneratorFunction]",s="[object Proxy]";t.exports=function(t){if(!i(t))return!1;var e=r(t);return e==a||e==u||e==o||e==s}},function(t,e,n){var r=n(44),i=n(39),o=n(14),a=n(37),u=/^\[object .+?Constructor\]$/,s=Function.prototype,c=Object.prototype,l=s.toString,f=c.hasOwnProperty,p=RegExp("^"+l.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||i(t))&&(r(t)?p:u).test(a(t))}},function(t,e,n){var r=n(45),i=n(36);t.exports=function(t,e){var n=i(t,e);return r(n)?n:void 0}},function(t,e,n){var r=n(46),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},function(t,e){t.exports=function(t){return function(){return t}}},function(t,e,n){var r=n(48),i=n(47),o=n(18),a=i?function(t,e){return i(t,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;t.exports=a},function(t,e,n){var r=n(49),i=n(35)(r);t.exports=i},function(t,e){t.exports=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}},function(t,e,n){var r=n(51),i=Math.max;t.exports=function(t,e,n){return e=i(void 0===e?t.length-1:e,0),function(){for(var o=arguments,a=-1,u=i(o.length-e,0),s=Array(u);++a<u;)s[a]=o[e+a];a=-1;for(var c=Array(e+1);++a<e;)c[a]=o[a];return c[e]=n(s),r(t,this,c)}}},function(t,e,n){var r=n(18),i=n(52),o=n(50);t.exports=function(t,e){return o(i(t,e,r),t+"")}},function(t,e,n){var r=n(53)(n(34));t.exports=r},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(n,r,i,o){var a=t.call(this)||this;return a.message=n,a.expected=r,a.found=i,a.location=o,a.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(a,e),a}return r(e,t),e.buildMessage=function(t,e){function n(t){return t.charCodeAt(0).toString(16).toUpperCase()}function r(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}function i(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}function o(t){switch(t.type){case"literal":return'"'+r(t.text)+'"';case"class":var e=t.parts.map(function(t){return Array.isArray(t)?i(t[0])+"-"+i(t[1]):i(t)});return"["+(t.inverted?"^":"")+e+"]";case"any":return"any character";case"end":return"end of input";case"other":return t.description}}return"Expected "+function(t){var e,n,r=t.map(o);if(r.sort(),r.length>0){for(e=1,n=1;e<r.length;e++)r[e-1]!==r[e]&&(r[n]=r[e],n++);r.length=n}switch(r.length){case 1:return r[0];case 2:return r[0]+" or "+r[1];default:return r.slice(0,-1).join(", ")+", or "+r[r.length-1]}}(t)+" but "+function(t){return t?'"'+r(t)+'"':"end of input"}(e)+" found."},e}(Error);e.SyntaxError=i,e.parse=function(t,e){e=void 0!==e?e:{};var n,r={},o={start:ns},a=ns,u=function(t){return t},s=function(t){return t.filter(function(t){return"comment"!==t})},c=function(){return"comment"},l="//",f=Zu("//",!1),p=/^[^\n]/,h=Ku(["\n"],!0,!1),d="\n",y=Zu("\n",!1),m="/*",v=Zu("/*",!1),b="*/",_=Zu("*/",!1),g={type:"any"},w=function(t){return Rc(t,Qu(),Hu())},R=function(t){return wc({construct_type:"labeled_statement"},t)},T=":",x=Zu(":",!1),E=function(t,e){return{construct_type:"labeled_statement",label:t,statement:e}},A="case",C=Zu("case",!1),O=function(t,e){return{construct_type:"labeled_statement",case:t,statement:e}},S="default",P=Zu("default",!1),j=function(t){return{construct_type:"labeled_statement",default:!0,stmt:t}},I=";",F=Zu(";",!1),N=function(t){return{construct_type:"expression_statement",expression:t}},k=function(){return{construct_type:"null_statement"}},z="{",V=Zu("{",!1),L=function(t){return t},B="}",D=Zu("}",!1),M=function(t){return{construct_type:"block",statements:t}},U="if",W=Zu("if",!1),q="(",$=Zu("(",!1),G=")",H=Zu(")",!1),Q="else",Z=Zu("else",!1),K=function(t,e,n){return{construct_type:"selection_statement",condition:t,then:e,otherwise:n}},Y=function(t,e){return{construct_type:"selection_statement",condition:t,then:e}},X="while",J=Zu("while",!1),tt=function(t,e){return{construct_type:"while_statement",condition:t,body:e}},et="do",nt=Zu("do",!1),rt=function(t,e){return{construct_type:"dowhile_statement",condition:e,body:t}},it="for",ot=Zu("for",!1),at=function(t,e,n,r){return{construct_type:"for_statement",condition:e,initial:t,post:n,body:r}},ut=function(t){return Rc(t,Qu(),Hu())},st="break",ct=Zu("break",!1),lt=function(){return{construct_type:"break_statement"}},ft="continue",pt=Zu("continue",!1),ht=function(){return{construct_type:"continue_statement"}},dt="return",yt=Zu("return",!1),mt=function(t){return{construct_type:"return_statement",expression:t}},vt=function(t){return{construct_type:"declaration_statement",declaration:t}},bt=function(t,e){return Rc({construct_type:"simple_declaration",specs:t,declarators:e},Qu(),Hu())},_t=",",gt=Zu(",",!1),wt=function(t,e){return e},Rt=function(t,e){return e.unshift(t),e},Tt=function(t){return Rc(wc({construct_type:"class_declaration"},t),Qu(),Hu())},xt=function(t,e,n){return Rc({construct_type:"function_definition",specs:t,declarator:e,body:n},Qu(),Hu())},Et=function(t,e,n){return null},At=function(t,e,n,r){return Rc({construct_type:"constructor_definition",name:t,body:r,initializer:n,args:e},Qu(),Hu())},Ct="~",Ot=Zu("~",!1),St=function(t){return null},Pt=function(t,e){return Rc({construct_type:"destructor_definition",name:{identifier:"~"+t.identifier},body:e},Qu(),Hu())},jt="virtual",It=Zu("virtual",!1),Ft=function(t,e){return Rc({construct_type:"destructor_definition",name:{identifier:"~"+t.identifier},body:e,virtual:!0},Qu(),Hu())},Nt=function(t,e){return e},kt=function(t,e){return e.unshift(t),e},zt=function(t,e){return Rc({construct_type:"member_initializer",member:t,args:e||[]},Qu(),Hu())},Vt=function(t){return t},Lt=function(t,e,n){return n},Bt=function(t,e,n){t.push({typeSpec:e});for(var r=t.concat(n),i={typeSpecs:[],storageSpecs:[]},o=0;o<r.length;++o){var a=r[o];a.typeSpec?i.typeSpecs.push(a.typeSpec):a.storageSpec?i.storageSpecs.push(a.storageSpec):"friend"===a?i.friend=!0:"typedef"===a?i.typedef=!0:"inline"===a?i.inline=!0:"explicit"===a?i.explicit=!0:"virtual"===a&&(i.virtual=!0)}return Rc(i,Qu(),Hu())},Dt=function(t){return{typeSpec:t}},Mt=function(t){return{storageSpec:t}},Ut="typedef",Wt=Zu("typedef",!1),qt="friend",$t=Zu("friend",!1),Gt=function(t,e,n){return t.push(e),Rc(t=t.concat(n),Qu(),Hu())},Ht="const",Qt=Zu("const",!1),Zt="volatile",Kt=Zu("volatile",!1),Yt="register",Xt=Zu("register",!1),Jt="static",te=Zu("static",!1),ee="thread_local",ne=Zu("thread_local",!1),re="extern",ie=Zu("extern",!1),oe="mutable",ae=Zu("mutable",!1),ue="inline",se=Zu("inline",!1),ce="explicit",le=Zu("explicit",!1),fe=Yu("simple type name"),pe=function(t){return t},he="char",de=Zu("char",!1),ye="short",me=Zu("short",!1),ve="int",be=Zu("int",!1),_e="bool",ge=Zu("bool",!1),we="long",Re=Zu("long",!1),Te="signed",xe=Zu("signed",!1),Ee="unsigned",Ae=Zu("unsigned",!1),Ce="float",Oe=Zu("float",!1),Se="double",Pe=Zu("double",!1),je="void",Ie=Zu("void",!1),Fe=function(t){return function(t){return xc()[t]}(t.identifier)},Ne=function(t){return t.identifier},ke="enum",ze=Zu("enum",!1),Ve=function(t,e,n){return n},Le=function(t,e,n){return"enum"},Be="=",De=Zu("=",!1),Me=function(t,e){return e},Ue=function(t,e){return{name:t,value:e}},We="@library_unsupported@",qe=Zu("@library_unsupported@",!1),$e=function(t){return Rc(wc(t,{library_unsupported:!0}),Qu(),Hu())},Ge=function(t,e){return Rc(wc(t,{initializer:e}),Qu(),Hu())},He=function(t){return{construct_type:"direct_initializer",args:t}},Qe=function(t){return{construct_type:"copy_initializer",args:[t]}},Ze=function(t){return t},Ke=function(t,e,n){return n},Ye=function(t,e){return e.unshift(t),Rc({construct_type:"initializer_list",args:e},Qu(),Hu())},Xe=function(t){return Rc(wc({construct_type:"declarator"},t),Qu(),Hu())},Je=function(t){return Rc(wc({construct_type:"declarator",abstract:!0},t),Qu(),Hu())},tn="*",en=Zu("*",!1),nn=function(t,e){return wc({pointer:e},t)},rn="&",on=Zu("&",!1),an=function(t,e){return wc({reference:e},t)},un=function(t,e){return wc(t,{postfixes:e})},sn=function(t){return t},cn=function(t,e){return wc({kind:"function",args:t},e)},ln="[",fn=Zu("[",!1),pn="]",hn=Zu("]",!1),dn=function(t){return{kind:"array",size:t}},yn=function(t){return{name:t}},mn=function(t){return{sub:t}},vn="",bn=function(){return{}},_n=function(t,e){return Rc({specs:t,declarator:e},Qu(),Hu())},gn=function(){return{const:!0,volatile:!0}},wn=function(){return{const:!0}},Rn=function(){return{volatile:!0}},Tn=function(t,e){return e},xn=function(t,e){return e.unshift(t),e},En=function(){return[]},An=function(t,e,n){return{construct_type:"parameter_declaration",declarator:e,specs:t,initializer:n}},Cn=function(t,e){return Rc({construct_type:"parameter_declaration",specs:t,declarator:e},Qu(),Hu())},On=function(t,e,n){return[e,n]},Sn=function(t,e){return Rc(gc(t,e,"left","comma_expression"),Qu(),Hu())},Pn=function(t,e,n){return Rc({construct_type:"assignment_expression",lhs:t,operator:e,rhs:n},Qu(),Hu())},jn=function(t,e,n){return Rc({construct_type:"compound_assignment",lhs:t,operator:e,rhs:n},Qu(),Hu())},In="*=",Fn=Zu("*=",!1),Nn="/=",kn=Zu("/=",!1),zn="%=",Vn=Zu("%=",!1),Ln="+=",Bn=Zu("+=",!1),Dn="-=",Mn=Zu("-=",!1),Un=">>=",Wn=Zu(">>=",!1),qn="<<=",$n=Zu("<<=",!1),Gn="&=",Hn=Zu("&=",!1),Qn="and_eq",Zn=Zu("and_eq",!1),Kn=function(){return"&="},Yn="^=",Xn=Zu("^=",!1),Jn="xor_eq",tr=Zu("xor_eq",!1),er=function(){return"^="},nr="|=",rr=Zu("|=",!1),ir="or_eq",or=Zu("or_eq",!1),ar=function(){return"|="},ur=function(t){return t.constant=!0,t},sr="?",cr=Zu("?",!1),lr=function(t,e,n){return Rc({construct_type:"ternary_expression",condition:t,then:e,otherwise:n},Qu(),Hu())},fr="||",pr=Zu("||",!1),hr="or",dr=Zu("or",!1),yr=function(t,e,n){return["||",n]},mr=function(t,e){return Rc(gc(t,e,"left","logical_binary_operator_expression"),Qu(),Hu())},vr="&&",br=Zu("&&",!1),_r="and",gr=Zu("and",!1),wr=function(t,e,n){return["&&",n]},Rr="|",Tr=Zu("|",!1),xr="bitor",Er=Zu("bitor",!1),Ar=function(t,e,n){return["|",n]},Cr=function(t,e){return Rc(gc(t,e,"left","arithmetic_binary_operator_expression"),Qu(),Hu())},Or="^",Sr=Zu("^",!1),Pr="xor",jr=Zu("xor",!1),Ir=function(t,e,n){return["^",n]},Fr="bitand",Nr=Zu("bitand",!1),kr=function(t,e,n){return["&",n]},zr="==",Vr=Zu("==",!1),Lr="!=",Br=Zu("!=",!1),Dr="not_eq",Mr=Zu("not_eq",!1),Ur=function(t){return"!="},Wr=function(t,e){return Rc(gc(t,e,"left","relational_binary_operator_expression"),Qu(),Hu())},qr="<=",$r=Zu("<=",!1),Gr=">=",Hr=Zu(">=",!1),Qr="<",Zr=Zu("<",!1),Kr=">",Yr=Zu(">",!1),Xr="<<",Jr=Zu("<<",!1),ti=">>",ei=Zu(">>",!1),ni="+",ri=Zu("+",!1),ii="-",oi=Zu("-",!1),ai="/",ui=Zu("/",!1),si="%",ci=Zu("%",!1),li=function(t,e){return Rc(gc(t,e,"left","pointer_to_member_expression"),Qu(),Hu())},fi=".*",pi=Zu(".*",!1),hi="->*",di=Zu("->*",!1),yi=function(t,e){return Rc({construct_type:"c_style_cast_expression",type:t,operand:e},Qu(),Hu())},mi="++",vi=Zu("++",!1),bi=function(t,e){return Rc({construct_type:"prefix_increment_expression",operator:t,operand:e},Qu(),Hu())},_i="--",gi=Zu("--",!1),wi=function(t,e){return Rc({construct_type:"prefix_decrement_expression",operator:t,operand:e},Qu(),Hu())},Ri=function(t,e){return Rc(wc({operand:e},t),Qu(),Hu())},Ti="sizeof",xi=Zu("sizeof",!1),Ei=function(t,e){return Rc({construct_type:"sizeof_expression",operator:"sizeof",operand:e},Qu(),Hu())},Ai=function(t,e){return Rc({construct_type:"sizeof_type_expression",operator:"sizeof",operand:e},Qu(),Hu())},Ci=function(){return{construct_type:"dereference_expression",operator:"*"}},Oi=function(){return{construct_type:"address_of_expression",operator:"&"}},Si=function(){return{construct_type:"unary_plus_expression",operator:"+"}},Pi=function(){return{construct_type:"unary_minus_expression",operator:"-"}},ji="!",Ii=Zu("!",!1),Fi=function(){return{construct_type:"logical_not_expression",operator:"!"}},Ni="not",ki=Zu("not",!1),zi=function(){return{construct_type:"bitwise_not_expression",operator:"~"}},Vi="compl",Li=Zu("compl",!1),Bi="new",Di=Zu("new",!1),Mi=function(t,e){return Rc(wc({construct_type:"new_expression",initializer:e},t),Qu(),Hu())},Ui=function(t,e){return Rc(wc({construct_type:"new_expression",initializer:e},t),Qu(),Hu())},Wi=function(t,e){return e},qi=function(t,e){return Rc({specs:t,declarator:e},Qu(),Hu())},$i=function(t){return Rc(wc({construct_type:"declarator"},t),Qu(),Hu())},Gi=function(t){return{postfixes:t}},Hi=function(t){return t},Qi=function(t){return{type:"array",size:t}},Zi=function(t){return{args:t||[]}},Ki="delete",Yi=Zu("delete",!1),Xi=function(t){return Rc({construct_type:"delete_expression",operand:t},Qu(),Hu())},Ji=function(t){return Rc({construct_type:"delete_array_expression",operand:t},Qu(),Hu())},to="static_cast",eo=Zu("static_cast",!1),no=function(t,e){return Rc({construct_type:"static_cast_expression",type:t,operand:e},Qu(),Hu())},ro="dynamic_cast",io=Zu("dynamic_cast",!1),oo=function(t,e){return Rc({construct_type:"dynamic_cast_expression",type:t,operand:e},Qu(),Hu())},ao="reinterpret_cast",uo=Zu("reinterpret_cast",!1),so=function(t,e){return Rc({construct_type:"reinterpret_cast_expression",type:t,operand:e},Qu(),Hu())},co="const_cast",lo=Zu("const_cast",!1),fo=function(t,e){return Rc({construct_type:"const_cast_expression",type:t,operand:e},Qu(),Hu())},po=function(t,e){return e},ho=function(t,e){return e.length>0?Rc(function t(e,n){if(0==e.length)return n;var r=e.pop();return r.operand=t(e,n),r}(e,t),Qu(),Hu()):t},yo=function(t){return Rc({construct_type:"subscript_expression",arg:t},Qu(),Hu())},mo=function(t){return Rc({construct_type:"function_call_expression",args:t||[]},Qu(),Hu())},vo=".",bo=Zu(".",!1),_o=function(t){return Rc({construct_type:"dot_expression",member:t},Qu(),Hu())},go="->",wo=Zu("->",!1),Ro=function(t){return Rc({construct_type:"arrow_expression",member:t},Qu(),Hu())},To=function(){return Rc({construct_type:"postfix_increment_expression"},Qu(),Hu())},xo=function(){return Rc({construct_type:"postfix_decrement_expression"},Qu(),Hu())},Eo=function(t,e){return Rc({construct_type:"construct_expression",type:t,args:e||[]},Qu(),Hu())},Ao=function(t,e){return e},Co=function(t){return Rc({construct_type:"parentheses_expression",subexpression:t},Qu(),Hu())},Oo="this",So=Zu("this",!1),Po=function(){return Rc({construct_type:"this_expression"},Qu(),Hu())},jo=function(t){return Rc(wc({construct_type:"identifier_expression"},t),Qu(),Hu())},Io=function(t,e){return t.push(e),{identifier:t}},Fo="::",No=Zu("::",!1),ko=function(t){return t},zo=function(){return[]},Vo=function(t){return Rc({identifier:t},Qu(),Hu())},Lo="operator",Bo=Zu("operator",!1),Do=function(t){return Rc({identifier:"operator"+t,operator:t},Qu(),Hu())},Mo="new[]",Uo=Zu("new[]",!1),Wo="delete[]",qo=Zu("delete[]",!1),$o="()",Go=Zu("()",!1),Ho="[]",Qo=Zu("[]",!1),Zo=(Zu("?:",!1),function(t){return Rc({construct_type:"numeric_literal",type:"float",value:t},Qu(),Hu())}),Ko=function(t){return Rc({construct_type:"numeric_literal",type:"int",value:t},Qu(),Hu())},Yo=function(t){return Rc({construct_type:"numeric_literal",type:"char",value:t},Qu(),Hu())},Xo=function(t){return Rc({construct_type:"string_literal",type:"string",value:t},Qu(),Hu())},Jo=function(t){return Rc({construct_type:"numeric_literal",type:"bool",value:t},Qu(),Hu())},ta=/^[0-9]/,ea=Ku([["0","9"]],!1,!1),na=function(t,e){return parseInt((t||"")+e.join(""))},ra=/^[0-9.]/,ia=Ku([["0","9"],"."],!1,!1),oa=function(t,e){return e.indexOf(".")==e.lastIndexOf(".")&&-1!=e.indexOf(".")},aa=function(t,e){return parseFloat((t||"")+e.join(""))},ua="'",sa=Zu("'",!1),ca=/^[^'\\\n]/,la=Ku(["'","\\","\n"],!0,!1),fa=function(t){return t},pa='"',ha=Zu('"',!1),da=/^[^"\\\n]/,ya=Ku(['"',"\\","\n"],!0,!1),ma=function(t){return t.join("")},va="true",ba=Zu("true",!1),_a=function(){return!0},ga="false",wa=Zu("false",!1),Ra=function(){return!1},Ta='\\"',xa=Zu('\\"',!1),Ea="\\'",Aa=Zu("\\'",!1),Ca="\\?",Oa=Zu("\\?",!1),Sa="\\\\",Pa=Zu("\\\\",!1),ja="\\a",Ia=Zu("\\a",!1),Fa="\\b",Na=Zu("\\b",!1),ka="\\f",za=Zu("\\f",!1),Va="\\n",La=Zu("\\n",!1),Ba="\\r",Da=Zu("\\r",!1),Ma="\\t",Ua=Zu("\\t",!1),Wa="\\v",qa=Zu("\\v",!1),$a="\\0",Ga=Zu("\\0",!1),Ha=/^[0-8]/,Qa=Ku([["0","8"]],!1,!1),Za=Yu("identifier"),Ka=function(t,e){return Rc({identifier:t+e.join("")},Qu(),Hu())},Ya=/^[a-zA-Z0-9_]/,Xa=Ku([["a","z"],["A","Z"],["0","9"],"_"],!1,!1),Ja=/^[a-zA-Z_]/,tu=Ku([["a","z"],["A","Z"],"_"],!1,!1),eu=Yu("optional whitespace"),nu=/^[ \t\n\r]/,ru=Ku([" ","\t","\n","\r"],!1,!1),iu=Yu("whitespace"),ou=function(t){xc()[t.name.identifier]=!0},au=function(t,e){return Rc({head:t,member_specs:e},Qu(),Hu())},uu=function(t,e,n){return n},su=function(t,e,n){return Rc({key:t,name:e,bases:n},Qu(),Hu())},cu="class",lu=Zu("class",!1),fu="struct",pu=Zu("struct",!1),hu="union",du=Zu("union",!1),yu=function(t){return t},mu=function(t){return{members:t}},vu=function(t,e){return e},bu=function(t,e){return{members:e,access:t}},_u="private",gu=Zu("private",!1),wu="protected",Ru=Zu("protected",!1),Tu="public",xu=Zu("public",!1),Eu=function(t,e){return Rc({construct_type:"member_declaration",specs:t,declarators:e},Qu(),Hu())},Au=function(t){return t},Cu=function(t){return t},Ou=function(t){return t},Su="0",Pu=Zu("0",!1),ju=function(t){return t.pureVirtual=!0,t},Iu=function(t){return t.library_unsupported=!0,t},Fu=function(t,e){return t.init=e,t},Nu=function(t){return t},ku=function(t,e){return e},zu=function(t){return t},Vu=function(t,e){return{name:e,virtual:!0,access:t}},Lu=function(t,e){return{name:e,access:t}},Bu=function(t){return{name:t}},Du=function(t,e){return t.push(e),t},Mu=0,Uu=0,Wu=[{line:1,column:1}],qu=0,$u=[],Gu=0;if(void 0!==e.startRule){if(!(e.startRule in o))throw new Error("Can't start parsing from rule \""+e.startRule+'".');a=o[e.startRule]}function Hu(){return t.substring(Uu,Mu)}function Qu(){return Ju(Uu,Mu)}function Zu(t,e){return{type:"literal",text:t,ignoreCase:e}}function Ku(t,e,n){return{type:"class",parts:t,inverted:e,ignoreCase:n}}function Yu(t){return{type:"other",description:t}}function Xu(e){var n,r=Wu[e];if(r)return r;for(n=e-1;!Wu[n];)n--;for(r={line:(r=Wu[n]).line,column:r.column};n<e;)10===t.charCodeAt(n)?(r.line++,r.column=1):r.column++,n++;return Wu[e]=r,r}function Ju(t,e){var n=Xu(t),r=Xu(e);return{start:{offset:t,line:n.line,column:n.column},end:{offset:e,line:r.line,column:r.column}}}function ts(t){Mu<qu||(Mu>qu&&(qu=Mu,$u=[]),$u.push(t))}function es(t,e,n){return new i(i.buildMessage(t,e),t,e,n)}function ns(){var t,e,n,i;if(t=Mu,pc()!==r){for(e=[],n=Mu,(i=rs())!==r&&pc()!==r?(Uu=n,n=i=u(i)):(Mu=n,n=r);n!==r;)e.push(n),n=Mu,(i=rs())!==r&&pc()!==r?(Uu=n,n=i=u(i)):(Mu=n,n=r);e!==r?(Uu=t,t=s(e)):(Mu=t,t=r)}else Mu=t,t=r;return t}function rs(){var t,e;return t=Mu,(e=is())!==r&&(Uu=t,e=c()),(t=e)===r&&(t=ls()),t}function is(){var e,n,i,o,a,u;if(e=Mu,t.substr(Mu,2)===l?(n=l,Mu+=2):(n=r,0===Gu&&ts(f)),n!==r){for(i=[],p.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(h));o!==r;)i.push(o),p.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(h));i!==r?(10===t.charCodeAt(Mu)?(o=d,Mu++):(o=r,0===Gu&&ts(y)),o!==r?e=n=[n,i,o]:(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;if(e===r)if(e=Mu,t.substr(Mu,2)===m?(n=m,Mu+=2):(n=r,0===Gu&&ts(v)),n!==r){for(i=[],o=Mu,a=Mu,Gu++,t.substr(Mu,2)===b?(u=b,Mu+=2):(u=r,0===Gu&&ts(_)),Gu--,u===r?a=void 0:(Mu=a,a=r),a!==r?(t.length>Mu?(u=t.charAt(Mu),Mu++):(u=r,0===Gu&&ts(g)),u!==r?o=a=[a,u]:(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,a=Mu,Gu++,t.substr(Mu,2)===b?(u=b,Mu+=2):(u=r,0===Gu&&ts(_)),Gu--,u===r?a=void 0:(Mu=a,a=r),a!==r?(t.length>Mu?(u=t.charAt(Mu),Mu++):(u=r,0===Gu&&ts(g)),u!==r?o=a=[a,u]:(Mu=o,o=r)):(Mu=o,o=r);i!==r?(t.substr(Mu,2)===b?(o=b,Mu+=2):(o=r,0===Gu&&ts(_)),o!==r?e=n=[n,i,o]:(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;return e}function os(){var e,n;return e=Mu,(n=function(){var e,n;return e=Mu,(n=function(){var e,n,i,o,a;return e=Mu,(n=lc())!==r&&pc()!==r?(58===t.charCodeAt(Mu)?(i=T,Mu++):(i=r,0===Gu&&ts(x)),i!==r&&pc()!==r&&(o=os())!==r?(Uu=e,n=E(n,o),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,4)===A?(n=A,Mu+=4):(n=r,0===Gu&&ts(C)),n!==r&&hc()!==r&&(i=zs())!==r&&pc()!==r?(58===t.charCodeAt(Mu)?(o=T,Mu++):(o=r,0===Gu&&ts(x)),o!==r&&pc()!==r&&(a=os())!==r?(Uu=e,n=O(i,a),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,7)===S?(n=S,Mu+=7):(n=r,0===Gu&&ts(P)),n!==r&&pc()!==r?(58===t.charCodeAt(Mu)?(i=T,Mu++):(i=r,0===Gu&&ts(x)),i!==r&&pc()!==r&&(o=os())!==r?(Uu=e,n=j(o),e=n):(Mu=e,e=r)):(Mu=e,e=r))),e}())!==r&&(Uu=e,n=R(n)),(e=n)===r&&(e=ss())===r&&(e=function(){var e,n,i,o,a,u,s,c;return e=Mu,t.substr(Mu,2)===U?(n=U,Mu+=2):(n=r,0===Gu&&ts(W)),n!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r&&(o=Ns())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r&&pc()!==r&&(u=os())!==r&&pc()!==r?(t.substr(Mu,4)===Q?(s=Q,Mu+=4):(s=r,0===Gu&&ts(Z)),s!==r&&pc()!==r&&(c=os())!==r?(Uu=e,n=K(o,u,c),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,2)===U?(n=U,Mu+=2):(n=r,0===Gu&&ts(W)),n!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r&&(o=Ns())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r&&pc()!==r&&(u=os())!==r?(Uu=e,n=Y(o,u),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}())===r&&(e=function(){var e,n,i,o,a,u,s,c,l,f,p,h,d,y,m,v;return e=Mu,t.substr(Mu,5)===X?(n=X,Mu+=5):(n=r,0===Gu&&ts(J)),n!==r&&(i=pc())!==r?(40===t.charCodeAt(Mu)?(o=q,Mu++):(o=r,0===Gu&&ts($)),o!==r&&(a=pc())!==r&&(u=Ns())!==r&&(s=pc())!==r?(41===t.charCodeAt(Mu)?(c=G,Mu++):(c=r,0===Gu&&ts(H)),c!==r&&(l=pc())!==r&&(f=os())!==r?(Uu=e,n=tt(u,f),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,2)===et?(n=et,Mu+=2):(n=r,0===Gu&&ts(nt)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r&&(a=os())!==r&&(u=pc())!==r?(t.substr(Mu,5)===X?(s=X,Mu+=5):(s=r,0===Gu&&ts(J)),s!==r&&(c=pc())!==r?(40===t.charCodeAt(Mu)?(l=q,Mu++):(l=r,0===Gu&&ts($)),l!==r&&(f=pc())!==r&&(p=Ns())!==r&&(h=pc())!==r?(41===t.charCodeAt(Mu)?(d=G,Mu++):(d=r,0===Gu&&ts(H)),d!==r&&(y=pc())!==r?(59===t.charCodeAt(Mu)?(m=I,Mu++):(m=r,0===Gu&&ts(F)),m!==r?(Uu=e,n=rt(a,p),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,3)===it?(n=it,Mu+=3):(n=r,0===Gu&&ts(ot)),n!==r&&(i=pc())!==r?(40===t.charCodeAt(Mu)?(o=q,Mu++):(o=r,0===Gu&&ts($)),o!==r&&(a=pc())!==r&&(u=function(){var t,e;return(t=as())===r&&(t=us())===r&&(t=Mu,(e=cs())!==r&&(Uu=t,e=ut(e)),t=e),t}())!==r&&(s=pc())!==r&&(c=Ns())!==r&&(l=pc())!==r?(59===t.charCodeAt(Mu)?(f=I,Mu++):(f=r,0===Gu&&ts(F)),f!==r&&(p=pc())!==r&&(h=Ns())!==r&&(d=pc())!==r?(41===t.charCodeAt(Mu)?(y=G,Mu++):(y=r,0===Gu&&ts(H)),y!==r&&(m=pc())!==r&&(v=os())!==r?(Uu=e,n=at(u,c,h,v),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r))),e}())===r&&(e=function(){var e,n,i,o,a,u;return e=Mu,t.substr(Mu,5)===st?(n=st,Mu+=5):(n=r,0===Gu&&ts(ct)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r?(59===t.charCodeAt(Mu)?(a=I,Mu++):(a=r,0===Gu&&ts(F)),a!==r?(Uu=e,n=lt(),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,8)===ft?(n=ft,Mu+=8):(n=r,0===Gu&&ts(pt)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r?(59===t.charCodeAt(Mu)?(a=I,Mu++):(a=r,0===Gu&&ts(F)),a!==r?(Uu=e,n=ht(),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,6)===dt?(n=dt,Mu+=6):(n=r,0===Gu&&ts(yt)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r?((a=Ns())===r&&(a=null),a!==r&&pc()!==r?(59===t.charCodeAt(Mu)?(u=I,Mu++):(u=r,0===Gu&&ts(F)),u!==r?(Uu=e,n=mt(a),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r))),e}())===r&&(e=cs())===r&&(e=as())===r&&(e=us()),e}())!==r&&(Uu=e,n=w(n)),e=n}function as(){var e,n,i;return e=Mu,(n=Ns())!==r&&pc()!==r?(59===t.charCodeAt(Mu)?(i=I,Mu++):(i=r,0===Gu&&ts(F)),i!==r?(Uu=e,e=n=N(n)):(Mu=e,e=r)):(Mu=e,e=r),e}function us(){var e,n;return e=Mu,pc()!==r?(59===t.charCodeAt(Mu)?(n=I,Mu++):(n=r,0===Gu&&ts(F)),n!==r?(Uu=e,e=k()):(Mu=e,e=r)):(Mu=e,e=r),e}function ss(){var e,n,i,o,a;if(e=Mu,123===t.charCodeAt(Mu)?(n=z,Mu++):(n=r,0===Gu&&ts(V)),n!==r)if(pc()!==r){for(i=[],o=Mu,(a=os())!==r&&pc()!==r?(Uu=o,o=a=L(a)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=os())!==r&&pc()!==r?(Uu=o,o=a=L(a)):(Mu=o,o=r);i!==r?(125===t.charCodeAt(Mu)?(o=B,Mu++):(o=r,0===Gu&&ts(D)),o!==r?(Uu=e,e=n=M(i)):(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;else Mu=e,e=r;return e}function cs(){var t,e;return t=Mu,(e=ls())!==r&&(Uu=t,e=vt(e)),t=e}function ls(){var e;return(e=function(){var e,n,i,o,a,u;return e=Mu,(n=ds())!==r?(i=Mu,Gu++,o=lc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r&&(a=function(){var e,n,i,o,a,u,s;if(e=Mu,(n=gs())!==r){for(i=[],o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=gs())!==r?(Uu=o,a=wt(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=gs())!==r?(Uu=o,a=wt(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,n=Rt(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&pc()!==r?(59===t.charCodeAt(Mu)?(u=I,Mu++):(u=r,0===Gu&&ts(F)),u!==r?(Uu=e,n=bt(n,a),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}())===r&&(e=function(){var e,n,i;return e=Mu,(n=function(){var e,n,i,o,a,u;if(e=Mu,(n=function(){var e,n,i,o,a,u;return e=Mu,(n=function(){var e;return t.substr(Mu,5)===cu?(e=cu,Mu+=5):(e=r,0===Gu&&ts(lu)),e===r&&(t.substr(Mu,6)===fu?(e=fu,Mu+=6):(e=r,0===Gu&&ts(pu)),e===r&&(t.substr(Mu,5)===hu?(e=hu,Mu+=5):(e=r,0===Gu&&ts(du)))),e}())!==r&&hc()!==r&&(i=lc())!==r?(o=Mu,(a=hc())!==r&&(u=function(){var e,n,i;return e=Mu,58===t.charCodeAt(Mu)?(n=T,Mu++):(n=r,0===Gu&&ts(x)),n!==r&&pc()!==r&&(i=function(){var e,n,i,o,a,u,s;if(e=Mu,(n=bc())!==r){for(i=[],o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=bc())!==r?(Uu=o,a=ku(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=bc())!==r?(Uu=o,a=ku(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,n=Rt(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r?(Uu=e,n=Nu(i),e=n):(Mu=e,e=r),e}())!==r?(Uu=o,a=uu(n,i,u),o=a):(Mu=o,o=r),o===r&&(o=null),o!==r?(Uu=e,n=su(n,i,o),e=n):(Mu=e,e=r)):(Mu=e,e=r),e}())!==r)if(Uu=Mu,(ou(n)?r:void 0)!==r)if(pc()!==r)if(123===t.charCodeAt(Mu)?(i=z,Mu++):(i=r,0===Gu&&ts(V)),i!==r)if(pc()!==r){for(o=[],a=dc();a!==r;)o.push(a),a=dc();o!==r&&(a=pc())!==r?(125===t.charCodeAt(Mu)?(u=B,Mu++):(u=r,0===Gu&&ts(D)),u!==r?(Uu=e,n=au(n,o),e=n):(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;return e}())!==r&&pc()!==r?(59===t.charCodeAt(Mu)?(i=I,Mu++):(i=r,0===Gu&&ts(F)),i!==r?(Uu=e,n=Tt(n),e=n):(Mu=e,e=r)):(Mu=e,e=r),e}())===r&&(e=fs()),e}function fs(){var t,e,n,i,o,a;return t=Mu,(e=ds())!==r?(n=Mu,Gu++,i=lc(),Gu--,i===r?n=void 0:(Mu=n,n=r),n!==r&&(i=pc())!==r&&(o=Rs())!==r&&pc()!==r&&(a=ss())!==r?(Uu=t,t=e=xt(e,o,a)):(Mu=t,t=r)):(Mu=t,t=r),t}function ps(){var e,n,i,o,a,u,s,c;return e=Mu,(n=lc())!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r&&(o=Is())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r&&pc()!==r?((u=function(){var e,n,i,o,a,u,s,c;if(e=Mu,58===t.charCodeAt(Mu)?(n=T,Mu++):(n=r,0===Gu&&ts(x)),n!==r)if(pc()!==r)if((i=hs())!==r){for(o=[],a=Mu,(u=pc())!==r?(44===t.charCodeAt(Mu)?(s=_t,Mu++):(s=r,0===Gu&&ts(gt)),s!==r&&pc()!==r&&(c=hs())!==r?(Uu=a,u=Nt(i,c),a=u):(Mu=a,a=r)):(Mu=a,a=r);a!==r;)o.push(a),a=Mu,(u=pc())!==r?(44===t.charCodeAt(Mu)?(s=_t,Mu++):(s=r,0===Gu&&ts(gt)),s!==r&&pc()!==r&&(c=hs())!==r?(Uu=a,u=Nt(i,c),a=u):(Mu=a,a=r)):(Mu=a,a=r);o!==r?(Uu=e,n=kt(i,o),e=n):(Mu=e,e=r)}else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;return e}())===r&&(u=null),u!==r&&pc()!==r?((s=ss())===r&&(s=Mu,59===t.charCodeAt(Mu)?(c=I,Mu++):(c=r,0===Gu&&ts(F)),c!==r&&(Uu=s,c=Et(n,o,u)),s=c),s!==r?(Uu=e,e=n=At(n,o,u,s)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}function hs(){var e,n,i,o,a;return e=Mu,(n=lc())!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r?((o=oc())===r&&(o=null),o!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r?(Uu=e,e=n=zt(n,o)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}function ds(){var t,e,n,i,o,a;for(t=Mu,e=[],n=Mu,(i=ys())!==r&&(o=hc())!==r?(Uu=n,n=i=Vt(i)):(Mu=n,n=r);n!==r;)e.push(n),n=Mu,(i=ys())!==r&&(o=hc())!==r?(Uu=n,n=i=Vt(i)):(Mu=n,n=r);if(e!==r)if((n=bs())!==r){for(i=[],o=Mu,hc()!==r&&(a=ys())!==r?(Uu=o,o=Lt(e,n,a)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,hc()!==r&&(a=ys())!==r?(Uu=o,o=Lt(e,n,a)):(Mu=o,o=r);i!==r?(Uu=t,t=e=Bt(e,n,i)):(Mu=t,t=r)}else Mu=t,t=r;else Mu=t,t=r;return t}function ys(){var e,n;return e=Mu,(n=vs())!==r&&(Uu=e,n=Dt(n)),(e=n)===r&&(e=Mu,(n=function(){var e;return t.substr(Mu,8)===Yt?(e=Yt,Mu+=8):(e=r,0===Gu&&ts(Xt)),e===r&&(t.substr(Mu,6)===Jt?(e=Jt,Mu+=6):(e=r,0===Gu&&ts(te)),e===r&&(t.substr(Mu,12)===ee?(e=ee,Mu+=12):(e=r,0===Gu&&ts(ne)),e===r&&(t.substr(Mu,6)===re?(e=re,Mu+=6):(e=r,0===Gu&&ts(ie)),e===r&&(t.substr(Mu,7)===oe?(e=oe,Mu+=7):(e=r,0===Gu&&ts(ae)))))),e}())!==r&&(Uu=e,n=Mt(n)),(e=n)===r&&(e=function(){var e;return t.substr(Mu,6)===ue?(e=ue,Mu+=6):(e=r,0===Gu&&ts(se)),e===r&&(t.substr(Mu,8)===ce?(e=ce,Mu+=8):(e=r,0===Gu&&ts(le)),e===r&&(t.substr(Mu,7)===jt?(e=jt,Mu+=7):(e=r,0===Gu&&ts(It)))),e}())===r&&(t.substr(Mu,7)===Ut?(e=Ut,Mu+=7):(e=r,0===Gu&&ts(Wt)),e===r&&(t.substr(Mu,6)===qt?(e=qt,Mu+=6):(e=r,0===Gu&&ts($t))))),e}function ms(){var t,e,n,i,o,a;for(t=Mu,e=[],n=Mu,(i=vs())!==r&&(o=hc())!==r?(Uu=n,n=i=Vt(i)):(Mu=n,n=r);n!==r;)e.push(n),n=Mu,(i=vs())!==r&&(o=hc())!==r?(Uu=n,n=i=Vt(i)):(Mu=n,n=r);if(e!==r)if((n=bs())!==r){for(i=[],o=Mu,hc()!==r&&(a=vs())!==r?(Uu=o,o=Lt(e,n,a)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,hc()!==r&&(a=vs())!==r?(Uu=o,o=Lt(e,n,a)):(Mu=o,o=r);i!==r?(Uu=t,t=e=Gt(e,n,i)):(Mu=t,t=r)}else Mu=t,t=r;else Mu=t,t=r;return t}function vs(){var e;return(e=function(){var e,n,i,o,a,u,s,c,l,f;if(e=Mu,t.substr(Mu,4)===ke?(n=ke,Mu+=4):(n=r,0===Gu&&ts(ze)),n!==r)if(hc()!==r)if((i=lc())===r&&(i=null),i!==r)if(pc()!==r)if(123===t.charCodeAt(Mu)?(o=z,Mu++):(o=r,0===Gu&&ts(V)),o!==r)if((a=_s())!==r){for(u=[],s=Mu,(c=pc())!==r?(44===t.charCodeAt(Mu)?(l=_t,Mu++):(l=r,0===Gu&&ts(gt)),l!==r&&pc()!==r&&(f=_s())!==r?(Uu=s,c=Ve(i,a,f),s=c):(Mu=s,s=r)):(Mu=s,s=r);s!==r;)u.push(s),s=Mu,(c=pc())!==r?(44===t.charCodeAt(Mu)?(l=_t,Mu++):(l=r,0===Gu&&ts(gt)),l!==r&&pc()!==r&&(f=_s())!==r?(Uu=s,c=Ve(i,a,f),s=c):(Mu=s,s=r)):(Mu=s,s=r);u!==r&&(s=pc())!==r?(125===t.charCodeAt(Mu)?(c=B,Mu++):(c=r,0===Gu&&ts(D)),c!==r?(Uu=e,n=Le(i,a,u),e=n):(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;return e}())===r&&(t.substr(Mu,5)===Ht?(e=Ht,Mu+=5):(e=r,0===Gu&&ts(Qt)),e===r&&(t.substr(Mu,8)===Zt?(e=Zt,Mu+=8):(e=r,0===Gu&&ts(Kt)))),e}function bs(){var e,n,i,o;return Gu++,e=Mu,(n=function(){var e,n;return t.substr(Mu,4)===he?(e=he,Mu+=4):(e=r,0===Gu&&ts(de)),e===r&&(t.substr(Mu,5)===ye?(e=ye,Mu+=5):(e=r,0===Gu&&ts(me)),e===r&&(t.substr(Mu,3)===ve?(e=ve,Mu+=3):(e=r,0===Gu&&ts(be)),e===r&&(t.substr(Mu,4)===_e?(e=_e,Mu+=4):(e=r,0===Gu&&ts(ge)),e===r&&(t.substr(Mu,4)===we?(e=we,Mu+=4):(e=r,0===Gu&&ts(Re)),e===r&&(t.substr(Mu,6)===Te?(e=Te,Mu+=6):(e=r,0===Gu&&ts(xe)),e===r&&(t.substr(Mu,8)===Ee?(e=Ee,Mu+=8):(e=r,0===Gu&&ts(Ae)),e===r&&(t.substr(Mu,5)===Ce?(e=Ce,Mu+=5):(e=r,0===Gu&&ts(Oe)),e===r&&(t.substr(Mu,6)===Se?(e=Se,Mu+=6):(e=r,0===Gu&&ts(Pe)),e===r&&(t.substr(Mu,4)===je?(e=je,Mu+=4):(e=r,0===Gu&&ts(Ie)),e===r&&(e=Mu,(n=lc())!==r?(Uu=Mu,(Fe(n)?void 0:r)!==r?(Uu=e,n=Ne(n),e=n):(Mu=e,e=r)):(Mu=e,e=r))))))))))),e}())!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,e=n=pe(n)):(Mu=e,e=r)):(Mu=e,e=r),Gu--,e===r&&(n=r,0===Gu&&ts(fe)),e}function _s(){var e,n,i,o,a;return e=Mu,(n=lc())!==r?(i=Mu,pc()!==r?(61===t.charCodeAt(Mu)?(o=Be,Mu++):(o=r,0===Gu&&ts(De)),o!==r&&pc()!==r&&(a=zs())!==r?(Uu=i,i=Me(n,a)):(Mu=i,i=r)):(Mu=i,i=r),i!==r?(Uu=e,e=n=Ue(n,i)):(Mu=e,e=r)):(Mu=e,e=r),e}function gs(){var e,n,i,o;return e=Mu,(n=Rs())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(i=Be,Mu++):(i=r,0===Gu&&ts(De)),i!==r&&pc()!==r?(t.substr(Mu,21)===We?(o=We,Mu+=21):(o=r,0===Gu&&ts(qe)),o!==r?(Uu=e,e=n=$e(n)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=Rs())!==r&&pc()!==r?((i=function(){var e,n,i,o;return(e=ws())===r&&(e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r?((i=oc())===r&&(i=null),i!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r?(Uu=e,n=He(i),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}())===r&&(i=null),i!==r?(Uu=e,e=n=Ge(n,i)):(Mu=e,e=r)):(Mu=e,e=r)),e}function ws(){var e,n,i,o,a;return e=Mu,61===t.charCodeAt(Mu)?(n=Be,Mu++):(n=r,0===Gu&&ts(De)),n!==r&&pc()!==r&&(i=ks())!==r?(Uu=e,e=n=Qe(i)):(Mu=e,e=r),e===r&&(e=Mu,61===t.charCodeAt(Mu)?(n=Be,Mu++):(n=r,0===Gu&&ts(De)),n!==r&&pc()!==r?(123===t.charCodeAt(Mu)?(i=z,Mu++):(i=r,0===Gu&&ts(V)),i!==r&&pc()!==r&&(o=function(){var e,n,i,o,a,u,s;if(e=Mu,(n=ks())!==r){for(i=[],o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=ks())!==r?(Uu=o,a=Ke(n,u,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=ks())!==r?(Uu=o,a=Ke(n,u,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,n=Ye(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&pc()!==r?(125===t.charCodeAt(Mu)?(a=B,Mu++):(a=r,0===Gu&&ts(D)),a!==r?(Uu=e,e=n=Ze(o)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}function Rs(){var t,e;return t=Mu,(e=xs())!==r&&(Uu=t,e=Xe(e)),t=e}function Ts(){var t,e;return t=Mu,(e=Es())!==r&&(Uu=t,e=Je(e)),t=e}function xs(){var e,n,i,o,a;return e=Mu,42===t.charCodeAt(Mu)?(n=tn,Mu++):(n=r,0===Gu&&ts(en)),n!==r&&(i=pc())!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r&&(a=xs())!==r?(Uu=e,e=n=nn(o,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,38===t.charCodeAt(Mu)?(n=rn,Mu++):(n=r,0===Gu&&ts(on)),n!==r&&(i=pc())!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r&&(a=xs())!==r?(Uu=e,e=n=an(o,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=Os())!==r&&(i=As())!==r?(Uu=e,e=n=un(n,i)):(Mu=e,e=r),e===r&&(e=Os()))),e}function Es(){var e,n,i,o,a;return e=Mu,42===t.charCodeAt(Mu)?(n=tn,Mu++):(n=r,0===Gu&&ts(en)),n!==r&&(i=pc())!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r&&(a=Es())!==r?(Uu=e,e=n=nn(o,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,38===t.charCodeAt(Mu)?(n=rn,Mu++):(n=r,0===Gu&&ts(on)),n!==r&&(i=pc())!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r&&(a=Es())!==r?(Uu=e,e=n=an(o,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=Ss())!==r&&(i=As())!==r?(Uu=e,e=n=un(n,i)):(Mu=e,e=r),e===r&&(e=Ss()))),e}function As(){var t,e,n;if(t=[],e=Mu,pc()!==r&&(n=Cs())!==r?(Uu=e,e=sn(n)):(Mu=e,e=r),e!==r)for(;e!==r;)t.push(e),e=Mu,pc()!==r&&(n=Cs())!==r?(Uu=e,e=sn(n)):(Mu=e,e=r);else t=r;return t}function Cs(){var e,n,i,o,a;return e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r&&(i=Is())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r&&pc()!==r?((a=js())===r&&(a=null),a!==r?(Uu=e,e=n=cn(i,a)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,91===t.charCodeAt(Mu)?(n=ln,Mu++):(n=r,0===Gu&&ts(fn)),n!==r&&pc()!==r?((i=zs())===r&&(i=null),i!==r&&pc()!==r?(93===t.charCodeAt(Mu)?(o=pn,Mu++):(o=r,0===Gu&&ts(hn)),o!==r?(Uu=e,e=n=dn(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}function Os(){var e,n,i,o;return e=Mu,(n=sc())!==r&&(Uu=e,n=yn(n)),(e=n)===r&&(e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r?((i=xs())===r&&(i=null),i!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r?(Uu=e,e=n=mn(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}function Ss(){var e,n,i,o;return e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r?((i=Es())===r&&(i=null),i!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r?(Uu=e,e=n=mn(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=vn)!==r&&(Uu=e,n=bn()),e=n),e}function Ps(){var t,e,n;return t=Mu,(e=ms())!==r&&pc()!==r&&(n=Ts())!==r?(Uu=t,t=e=_n(e,n)):(Mu=t,t=r),t}function js(){var e,n,i;return e=Mu,t.substr(Mu,5)===Ht?(n=Ht,Mu+=5):(n=r,0===Gu&&ts(Qt)),n!==r&&hc()!==r?(t.substr(Mu,8)===Zt?(i=Zt,Mu+=8):(i=r,0===Gu&&ts(Kt)),i!==r?(Uu=e,e=n=gn()):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,8)===Zt?(n=Zt,Mu+=8):(n=r,0===Gu&&ts(Kt)),n!==r&&hc()!==r?(t.substr(Mu,5)===Ht?(i=Ht,Mu+=5):(i=r,0===Gu&&ts(Qt)),i!==r?(Uu=e,e=n=gn()):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,5)===Ht?(n=Ht,Mu+=5):(n=r,0===Gu&&ts(Qt)),n!==r&&(Uu=e,n=wn()),(e=n)===r&&(e=Mu,t.substr(Mu,8)===Zt?(n=Zt,Mu+=8):(n=r,0===Gu&&ts(Kt)),n!==r&&(Uu=e,n=Rn()),e=n))),e}function Is(){var e,n,i,o,a,u;if(e=Mu,(n=Fs())!==r){for(i=[],o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=Fs())!==r?(Uu=o,o=Tn(n,u)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=Fs())!==r?(Uu=o,o=Tn(n,u)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=xn(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e===r&&(e=Mu,(n=vn)!==r&&(Uu=e,n=En()),e=n),e}function Fs(){var e,n,i,o,a;return e=Mu,(n=ds())!==r&&pc()!==r&&(i=Rs())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(o=Be,Mu++):(o=r,0===Gu&&ts(De)),o!==r&&pc()!==r&&(a=ks())!==r?(Uu=e,e=n=An(n,i,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=ds())!==r&&pc()!==r&&(i=Rs())!==r?(Uu=e,e=n=Cn(n,i)):(Mu=e,e=r),e===r&&(e=Mu,(n=ds())!==r&&pc()!==r&&(i=Ts())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(o=Be,Mu++):(o=r,0===Gu&&ts(De)),o!==r&&pc()!==r&&(a=ks())!==r?(Uu=e,e=n=An(n,i,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=ds())!==r&&pc()!==r&&(i=Ts())!==r?(Uu=e,e=n=Cn(n,i)):(Mu=e,e=r)))),e}function Ns(){var e,n,i,o,a,u;if(e=Mu,(n=ks())!==r){for(i=[],o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=ks())!==r?(Uu=o,o=On(n,a,u)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=ks())!==r?(Uu=o,o=On(n,a,u)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=Sn(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e===r&&(e=ks()),e}function ks(){var e,n,i,o;return e=Mu,(n=ec())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(i=Be,Mu++):(i=r,0===Gu&&ts(De)),i!==r&&pc()!==r&&(o=ks())!==r?(Uu=e,e=n=Pn(n,i,o)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=ec())!==r&&pc()!==r&&(i=function(){var e,n,i,o;return t.substr(Mu,2)===In?(e=In,Mu+=2):(e=r,0===Gu&&ts(Fn)),e===r&&(t.substr(Mu,2)===Nn?(e=Nn,Mu+=2):(e=r,0===Gu&&ts(kn)),e===r&&(t.substr(Mu,2)===zn?(e=zn,Mu+=2):(e=r,0===Gu&&ts(Vn)),e===r&&(t.substr(Mu,2)===Ln?(e=Ln,Mu+=2):(e=r,0===Gu&&ts(Bn)),e===r&&(t.substr(Mu,2)===Dn?(e=Dn,Mu+=2):(e=r,0===Gu&&ts(Mn)),e===r&&(t.substr(Mu,3)===Un?(e=Un,Mu+=3):(e=r,0===Gu&&ts(Wn)),e===r&&(t.substr(Mu,3)===qn?(e=qn,Mu+=3):(e=r,0===Gu&&ts($n)),e===r&&(t.substr(Mu,2)===Gn?(e=Gn,Mu+=2):(e=r,0===Gu&&ts(Hn)),e===r&&(e=Mu,t.substr(Mu,6)===Qn?(n=Qn,Mu+=6):(n=r,0===Gu&&ts(Zn)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=Kn(),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(t.substr(Mu,2)===Yn?(e=Yn,Mu+=2):(e=r,0===Gu&&ts(Xn)),e===r&&(e=Mu,t.substr(Mu,6)===Jn?(n=Jn,Mu+=6):(n=r,0===Gu&&ts(tr)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=er(),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(t.substr(Mu,2)===nr?(e=nr,Mu+=2):(e=r,0===Gu&&ts(rr)),e===r&&(e=Mu,t.substr(Mu,5)===ir?(n=ir,Mu+=5):(n=r,0===Gu&&ts(or)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=ar(),e=n):(Mu=e,e=r)):(Mu=e,e=r))))))))))))),e}())!==r&&pc()!==r&&(o=ks())!==r?(Uu=e,e=n=jn(n,i,o)):(Mu=e,e=r),e===r&&(e=Vs())),e}function zs(){var t,e;return t=Mu,(e=Vs())!==r&&(Uu=t,e=ur(e)),t=e}function Vs(){var e,n,i,o,a,u;return e=Mu,(n=Ls())!==r&&pc()!==r?(63===t.charCodeAt(Mu)?(i=sr,Mu++):(i=r,0===Gu&&ts(cr)),i!==r&&pc()!==r&&(o=Ns())!==r&&pc()!==r?(58===t.charCodeAt(Mu)?(a=T,Mu++):(a=r,0===Gu&&ts(x)),a!==r&&pc()!==r&&(u=ks())!==r?(Uu=e,e=n=lr(n,o,u)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Ls()),e}function Ls(){var e,n,i,o,a,u,s,c;if(e=Mu,(n=Bs())!==r){for(i=[],o=Mu,pc()!==r?(t.substr(Mu,2)===fr?(a=fr,Mu+=2):(a=r,0===Gu&&ts(pr)),a===r&&(a=Mu,t.substr(Mu,2)===hr?(u=hr,Mu+=2):(u=r,0===Gu&&ts(dr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Bs())!==r?(Uu=o,o=yr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(t.substr(Mu,2)===fr?(a=fr,Mu+=2):(a=r,0===Gu&&ts(pr)),a===r&&(a=Mu,t.substr(Mu,2)===hr?(u=hr,Mu+=2):(u=r,0===Gu&&ts(dr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Bs())!==r?(Uu=o,o=yr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=mr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function Bs(){var e,n,i,o,a,u,s,c;if(e=Mu,(n=Ds())!==r){for(i=[],o=Mu,pc()!==r?(t.substr(Mu,2)===vr?(a=vr,Mu+=2):(a=r,0===Gu&&ts(br)),a===r&&(a=Mu,t.substr(Mu,3)===_r?(u=_r,Mu+=3):(u=r,0===Gu&&ts(gr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ds())!==r?(Uu=o,o=wr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(t.substr(Mu,2)===vr?(a=vr,Mu+=2):(a=r,0===Gu&&ts(br)),a===r&&(a=Mu,t.substr(Mu,3)===_r?(u=_r,Mu+=3):(u=r,0===Gu&&ts(gr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ds())!==r?(Uu=o,o=wr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=mr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function Ds(){var e,n,i,o,a,u,s,c;if(e=Mu,(n=Ms())!==r){for(i=[],o=Mu,pc()!==r?(124===t.charCodeAt(Mu)?(a=Rr,Mu++):(a=r,0===Gu&&ts(Tr)),a===r&&(a=Mu,t.substr(Mu,5)===xr?(u=xr,Mu+=5):(u=r,0===Gu&&ts(Er)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ms())!==r?(Uu=o,o=Ar(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(124===t.charCodeAt(Mu)?(a=Rr,Mu++):(a=r,0===Gu&&ts(Tr)),a===r&&(a=Mu,t.substr(Mu,5)===xr?(u=xr,Mu+=5):(u=r,0===Gu&&ts(Er)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ms())!==r?(Uu=o,o=Ar(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=Cr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function Ms(){var e,n,i,o,a,u;if(e=Mu,(n=Us())!==r){for(i=[],o=Mu,pc()!==r?(94===t.charCodeAt(Mu)?(a=Or,Mu++):(a=r,0===Gu&&ts(Sr)),a===r&&(t.substr(Mu,3)===Pr?(a=Pr,Mu+=3):(a=r,0===Gu&&ts(jr))),a!==r&&pc()!==r&&(u=Us())!==r?(Uu=o,o=Ir(n,a,u)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(94===t.charCodeAt(Mu)?(a=Or,Mu++):(a=r,0===Gu&&ts(Sr)),a===r&&(t.substr(Mu,3)===Pr?(a=Pr,Mu+=3):(a=r,0===Gu&&ts(jr))),a!==r&&pc()!==r&&(u=Us())!==r?(Uu=o,o=Ir(n,a,u)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=Cr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function Us(){var e,n,i,o,a,u,s,c;if(e=Mu,(n=Ws())!==r){for(i=[],o=Mu,pc()!==r?(a=Mu,38===t.charCodeAt(Mu)?(u=rn,Mu++):(u=r,0===Gu&&ts(on)),u!==r?(s=Mu,Gu++,38===t.charCodeAt(Mu)?(c=rn,Mu++):(c=r,0===Gu&&ts(on)),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r),a===r&&(a=Mu,t.substr(Mu,6)===Fr?(u=Fr,Mu+=6):(u=r,0===Gu&&ts(Nr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ws())!==r?(Uu=o,o=kr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(a=Mu,38===t.charCodeAt(Mu)?(u=rn,Mu++):(u=r,0===Gu&&ts(on)),u!==r?(s=Mu,Gu++,38===t.charCodeAt(Mu)?(c=rn,Mu++):(c=r,0===Gu&&ts(on)),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r),a===r&&(a=Mu,t.substr(Mu,6)===Fr?(u=Fr,Mu+=6):(u=r,0===Gu&&ts(Nr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ws())!==r?(Uu=o,o=kr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=Cr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function Ws(){var e,n,i,o,a,u,s,c;if(e=Mu,(n=qs())!==r){for(i=[],o=Mu,pc()!==r?(t.substr(Mu,2)===zr?(a=zr,Mu+=2):(a=r,0===Gu&&ts(Vr)),a===r&&(t.substr(Mu,2)===Lr?(a=Lr,Mu+=2):(a=r,0===Gu&&ts(Br)),a===r&&(a=Mu,t.substr(Mu,6)===Dr?(u=Dr,Mu+=6):(u=r,0===Gu&&ts(Mr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?(Uu=a,a=u=Ur(n)):(Mu=a,a=r)):(Mu=a,a=r))),a!==r&&(u=pc())!==r&&(s=qs())!==r?(Uu=o,o=On(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(t.substr(Mu,2)===zr?(a=zr,Mu+=2):(a=r,0===Gu&&ts(Vr)),a===r&&(t.substr(Mu,2)===Lr?(a=Lr,Mu+=2):(a=r,0===Gu&&ts(Br)),a===r&&(a=Mu,t.substr(Mu,6)===Dr?(u=Dr,Mu+=6):(u=r,0===Gu&&ts(Mr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?(Uu=a,a=u=Ur(n)):(Mu=a,a=r)):(Mu=a,a=r))),a!==r&&(u=pc())!==r&&(s=qs())!==r?(Uu=o,o=On(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=Wr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function qs(){var t,e,n,i,o,a;if(t=Mu,(e=Gs())!==r){for(n=[],i=Mu,pc()!==r&&(o=$s())!==r&&pc()!==r&&(a=Gs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);i!==r;)n.push(i),i=Mu,pc()!==r&&(o=$s())!==r&&pc()!==r&&(a=Gs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);n!==r?(Uu=t,t=e=Wr(e,n)):(Mu=t,t=r)}else Mu=t,t=r;return t}function $s(){var e;return t.substr(Mu,2)===qr?(e=qr,Mu+=2):(e=r,0===Gu&&ts($r)),e===r&&(t.substr(Mu,2)===Gr?(e=Gr,Mu+=2):(e=r,0===Gu&&ts(Hr)),e===r&&(60===t.charCodeAt(Mu)?(e=Qr,Mu++):(e=r,0===Gu&&ts(Zr)),e===r&&(62===t.charCodeAt(Mu)?(e=Kr,Mu++):(e=r,0===Gu&&ts(Yr))))),e}function Gs(){var t,e,n,i,o,a;if(t=Mu,(e=Qs())!==r){for(n=[],i=Mu,pc()!==r&&(o=Hs())!==r&&pc()!==r&&(a=Qs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);i!==r;)n.push(i),i=Mu,pc()!==r&&(o=Hs())!==r&&pc()!==r&&(a=Qs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);n!==r?(Uu=t,t=e=Cr(e,n)):(Mu=t,t=r)}else Mu=t,t=r;return t}function Hs(){var e;return t.substr(Mu,2)===Xr?(e=Xr,Mu+=2):(e=r,0===Gu&&ts(Jr)),e===r&&(t.substr(Mu,2)===ti?(e=ti,Mu+=2):(e=r,0===Gu&&ts(ei))),e}function Qs(){var t,e,n,i,o,a;if(t=Mu,(e=Ks())!==r){for(n=[],i=Mu,pc()!==r&&(o=Zs())!==r&&pc()!==r&&(a=Ks())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);i!==r;)n.push(i),i=Mu,pc()!==r&&(o=Zs())!==r&&pc()!==r&&(a=Ks())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);n!==r?(Uu=t,t=e=Cr(e,n)):(Mu=t,t=r)}else Mu=t,t=r;return t}function Zs(){var e;return 43===t.charCodeAt(Mu)?(e=ni,Mu++):(e=r,0===Gu&&ts(ri)),e===r&&(45===t.charCodeAt(Mu)?(e=ii,Mu++):(e=r,0===Gu&&ts(oi))),e}function Ks(){var t,e,n,i,o,a;if(t=Mu,(e=Xs())!==r){for(n=[],i=Mu,pc()!==r&&(o=Ys())!==r&&pc()!==r&&(a=Xs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);i!==r;)n.push(i),i=Mu,pc()!==r&&(o=Ys())!==r&&pc()!==r&&(a=Xs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);n!==r?(Uu=t,t=e=Cr(e,n)):(Mu=t,t=r)}else Mu=t,t=r;return t}function Ys(){var e;return 42===t.charCodeAt(Mu)?(e=tn,Mu++):(e=r,0===Gu&&ts(en)),e===r&&(47===t.charCodeAt(Mu)?(e=ai,Mu++):(e=r,0===Gu&&ts(ui)),e===r&&(37===t.charCodeAt(Mu)?(e=si,Mu++):(e=r,0===Gu&&ts(ci)))),e}function Xs(){var t,e,n,i,o,a;if(t=Mu,(e=tc())!==r){for(n=[],i=Mu,pc()!==r&&(o=Js())!==r&&pc()!==r&&(a=tc())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);i!==r;)n.push(i),i=Mu,pc()!==r&&(o=Js())!==r&&pc()!==r&&(a=tc())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);n!==r?(Uu=t,t=e=li(e,n)):(Mu=t,t=r)}else Mu=t,t=r;return t}function Js(){var e;return t.substr(Mu,2)===fi?(e=fi,Mu+=2):(e=r,0===Gu&&ts(pi)),e===r&&(t.substr(Mu,3)===hi?(e=hi,Mu+=3):(e=r,0===Gu&&ts(di))),e}function tc(){var e,n,i,o,a;return e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r&&(i=Ps())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r&&pc()!==r&&(a=tc())!==r?(Uu=e,e=n=yi(i,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=ec()),e}function ec(){var e,n,i,o,a;return e=Mu,t.substr(Mu,2)===mi?(n=mi,Mu+=2):(n=r,0===Gu&&ts(vi)),n!==r&&pc()!==r&&(i=ec())!==r?(Uu=e,e=n=bi(n,i)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,2)===_i?(n=_i,Mu+=2):(n=r,0===Gu&&ts(gi)),n!==r&&pc()!==r&&(i=ec())!==r?(Uu=e,e=n=wi(n,i)):(Mu=e,e=r),e===r&&(e=Mu,(n=function(){var e,n,i,o;return e=Mu,42===t.charCodeAt(Mu)?(n=tn,Mu++):(n=r,0===Gu&&ts(en)),n!==r&&(Uu=e,n=Ci()),(e=n)===r&&(e=Mu,38===t.charCodeAt(Mu)?(n=rn,Mu++):(n=r,0===Gu&&ts(on)),n!==r&&(Uu=e,n=Oi()),(e=n)===r&&(e=Mu,43===t.charCodeAt(Mu)?(n=ni,Mu++):(n=r,0===Gu&&ts(ri)),n!==r&&(Uu=e,n=Si()),(e=n)===r&&(e=Mu,45===t.charCodeAt(Mu)?(n=ii,Mu++):(n=r,0===Gu&&ts(oi)),n!==r&&(Uu=e,n=Pi()),(e=n)===r&&(e=Mu,33===t.charCodeAt(Mu)?(n=ji,Mu++):(n=r,0===Gu&&ts(Ii)),n!==r&&(Uu=e,n=Fi()),(e=n)===r&&(e=Mu,t.substr(Mu,3)===Ni?(n=Ni,Mu+=3):(n=r,0===Gu&&ts(ki)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=Fi(),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,126===t.charCodeAt(Mu)?(n=Ct,Mu++):(n=r,0===Gu&&ts(Ot)),n!==r&&(Uu=e,n=zi()),(e=n)===r&&(e=Mu,t.substr(Mu,5)===Vi?(n=Vi,Mu+=5):(n=r,0===Gu&&ts(Li)),n!==r&&(Uu=e,n=zi()),e=n))))))),e}())!==r&&pc()!==r&&(i=tc())!==r?(Uu=e,e=n=Ri(n,i)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,6)===Ti?(n=Ti,Mu+=6):(n=r,0===Gu&&ts(xi)),n!==r&&pc()!==r&&(i=ec())!==r?(Uu=e,e=n=Ei(n,i)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,6)===Ti?(n=Ti,Mu+=6):(n=r,0===Gu&&ts(xi)),n!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r&&(o=bs())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r?(Uu=e,e=n=Ai(n,o)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=function(){var e,n,i,o,a,u;return e=Mu,t.substr(Mu,3)===Bi?(n=Bi,Mu+=3):(n=r,0===Gu&&ts(Di)),n!==r&&hc()!==r&&(i=function(){var e,n,i,o,a;return e=Mu,(n=ms())!==r?(i=Mu,(o=pc())!==r&&(a=function(){var e,n;return e=Mu,(n=function e(){var n,i,o,a;return n=Mu,42===t.charCodeAt(Mu)?(i=tn,Mu++):(i=r,0===Gu&&ts(en)),i!==r&&pc()!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r?((a=e())===r&&(a=null),a!==r?(Uu=n,i=nn(o,a),n=i):(Mu=n,n=r)):(Mu=n,n=r)):(Mu=n,n=r),n===r&&(n=Mu,38===t.charCodeAt(Mu)?(i=rn,Mu++):(i=r,0===Gu&&ts(on)),i!==r&&pc()!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r?((a=e())===r&&(a=null),a!==r?(Uu=n,i=an(o,a),n=i):(Mu=n,n=r)):(Mu=n,n=r)):(Mu=n,n=r),n===r&&(n=Mu,(i=function(){var t,e,n,i;if(t=[],e=Mu,(n=pc())!==r&&(i=nc())!==r?(Uu=e,n=Hi(i),e=n):(Mu=e,e=r),e!==r)for(;e!==r;)t.push(e),e=Mu,(n=pc())!==r&&(i=nc())!==r?(Uu=e,n=Hi(i),e=n):(Mu=e,e=r);else t=r;return t}())!==r&&(Uu=n,i=Gi(i)),n=i)),n}())!==r&&(Uu=e,n=$i(n)),e=n}())!==r?(Uu=i,o=Wi(n,a),i=o):(Mu=i,i=r),i===r&&(i=null),i!==r?(Uu=e,n=qi(n,i),e=n):(Mu=e,e=r)):(Mu=e,e=r),e}())!==r&&pc()!==r?((o=rc())===r&&(o=null),o!==r?(Uu=e,n=Mi(i,o),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,3)===Bi?(n=Bi,Mu+=3):(n=r,0===Gu&&ts(Di)),n!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r&&(o=Ps())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r&&pc()!==r?((u=rc())===r&&(u=null),u!==r?(Uu=e,n=Ui(o,u),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}())===r&&(e=function(){var e,n,i,o,a;return e=Mu,t.substr(Mu,6)===Ki?(n=Ki,Mu+=6):(n=r,0===Gu&&ts(Yi)),n!==r&&hc()!==r&&(i=tc())!==r?(Uu=e,n=Xi(i),e=n):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,6)===Ki?(n=Ki,Mu+=6):(n=r,0===Gu&&ts(Yi)),n!==r&&pc()!==r?(91===t.charCodeAt(Mu)?(i=ln,Mu++):(i=r,0===Gu&&ts(fn)),i!==r&&pc()!==r?(93===t.charCodeAt(Mu)?(o=pn,Mu++):(o=r,0===Gu&&ts(hn)),o!==r&&hc()!==r&&(a=tc())!==r?(Uu=e,n=Ji(a),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=function(){var e,n,i,o,a,u,s,c,l,f;if(e=Mu,t.substr(Mu,11)===to?(n=to,Mu+=11):(n=r,0===Gu&&ts(eo)),n!==r&&(i=pc())!==r?(60===t.charCodeAt(Mu)?(o=Qr,Mu++):(o=r,0===Gu&&ts(Zr)),o!==r&&(a=pc())!==r&&(u=bs())!==r&&pc()!==r?(62===t.charCodeAt(Mu)?(s=Kr,Mu++):(s=r,0===Gu&&ts(Yr)),s!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(c=q,Mu++):(c=r,0===Gu&&ts($)),c!==r&&pc()!==r&&(l=tc())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(f=G,Mu++):(f=r,0===Gu&&ts(H)),f!==r?(Uu=e,n=no(u,l),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,12)===ro?(n=ro,Mu+=12):(n=r,0===Gu&&ts(io)),n!==r&&(i=pc())!==r?(60===t.charCodeAt(Mu)?(o=Qr,Mu++):(o=r,0===Gu&&ts(Zr)),o!==r&&(a=pc())!==r&&(u=bs())!==r&&pc()!==r?(62===t.charCodeAt(Mu)?(s=Kr,Mu++):(s=r,0===Gu&&ts(Yr)),s!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(c=q,Mu++):(c=r,0===Gu&&ts($)),c!==r&&pc()!==r&&(l=tc())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(f=G,Mu++):(f=r,0===Gu&&ts(H)),f!==r?(Uu=e,n=oo(u,l),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,16)===ao?(n=ao,Mu+=16):(n=r,0===Gu&&ts(uo)),n!==r&&(i=pc())!==r?(60===t.charCodeAt(Mu)?(o=Qr,Mu++):(o=r,0===Gu&&ts(Zr)),o!==r&&(a=pc())!==r&&(u=bs())!==r&&pc()!==r?(62===t.charCodeAt(Mu)?(s=Kr,Mu++):(s=r,0===Gu&&ts(Yr)),s!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(c=q,Mu++):(c=r,0===Gu&&ts($)),c!==r&&pc()!==r&&(l=tc())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(f=G,Mu++):(f=r,0===Gu&&ts(H)),f!==r?(Uu=e,n=so(u,l),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,10)===co?(n=co,Mu+=10):(n=r,0===Gu&&ts(lo)),n!==r&&(i=pc())!==r?(60===t.charCodeAt(Mu)?(o=Qr,Mu++):(o=r,0===Gu&&ts(Zr)),o!==r&&(a=pc())!==r&&(u=bs())!==r&&pc()!==r?(62===t.charCodeAt(Mu)?(s=Kr,Mu++):(s=r,0===Gu&&ts(Yr)),s!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(c=q,Mu++):(c=r,0===Gu&&ts($)),c!==r&&pc()!==r&&(l=tc())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(f=G,Mu++):(f=r,0===Gu&&ts(H)),f!==r?(Uu=e,n=fo(u,l),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r))))if(e=Mu,(n=function(){var e,n,i,o,a;return e=Mu,(n=bs())!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r?((o=oc())===r&&(o=null),o!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r?(Uu=e,n=Eo(n,o),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}())===r&&(n=function(){var e,n,i,o,a;return e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&(i=pc())!==r&&(o=Ns())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r?(Uu=e,n=Co(o),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=function(){var e,n;return e=Mu,(n=function(){var e,n,i,o;if(e=Mu,45===t.charCodeAt(Mu)?(n=ii,Mu++):(n=r,0===Gu&&ts(oi)),n===r&&(n=null),n!==r){if(i=[],ra.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ia)),o!==r)for(;o!==r;)i.push(o),ra.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ia));else i=r;i!==r?(Uu=Mu,(o=(o=oa(n,i))?void 0:r)!==r?(Uu=e,n=aa(n,i),e=n):(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&(Uu=e,n=Zo(n)),(e=n)===r&&(e=Mu,(n=function(){var e,n,i,o;if(e=Mu,45===t.charCodeAt(Mu)?(n=ii,Mu++):(n=r,0===Gu&&ts(oi)),n===r&&(n=null),n!==r){if(i=[],ta.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ea)),o!==r)for(;o!==r;)i.push(o),ta.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ea));else i=r;i!==r?(Uu=e,n=na(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&(Uu=e,n=Ko(n)),(e=n)===r&&(e=Mu,(n=function(){var e,n,i,o;return e=Mu,39===t.charCodeAt(Mu)?(n=ua,Mu++):(n=r,0===Gu&&ts(sa)),n!==r?(ca.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(la)),i===r&&(i=cc()),i!==r?(39===t.charCodeAt(Mu)?(o=ua,Mu++):(o=r,0===Gu&&ts(sa)),o!==r?(Uu=e,n=fa(i),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}())!==r&&(Uu=e,n=Yo(n)),(e=n)===r&&(e=Mu,(n=function(){var e,n,i,o;if(e=Mu,34===t.charCodeAt(Mu)?(n=pa,Mu++):(n=r,0===Gu&&ts(ha)),n!==r){for(i=[],da.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ya)),o===r&&(o=cc());o!==r;)i.push(o),da.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ya)),o===r&&(o=cc());i!==r?(34===t.charCodeAt(Mu)?(o=pa,Mu++):(o=r,0===Gu&&ts(ha)),o!==r?(Uu=e,n=ma(i),e=n):(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&(Uu=e,n=Xo(n)),(e=n)===r&&(e=Mu,(n=function(){var e,n,i,o;return e=Mu,t.substr(Mu,4)===va?(n=va,Mu+=4):(n=r,0===Gu&&ts(ba)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=_a(),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,5)===ga?(n=ga,Mu+=5):(n=r,0===Gu&&ts(wa)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=Ra(),e=n):(Mu=e,e=r)):(Mu=e,e=r)),e}())!==r&&(Uu=e,n=Jo(n)),e=n)))),e}())===r&&(e=Mu,t.substr(Mu,4)===Oo?(n=Oo,Mu+=4):(n=r,0===Gu&&ts(So)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=Po(),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=function(){var t,e;return t=Mu,(e=function(){var t,e,n;return t=Mu,(e=ac())!==r&&pc()!==r&&(n=sc())!==r?(Uu=t,e=Io(e,n),t=e):(Mu=t,t=r),t}())===r&&(e=sc()),e!==r&&(Uu=t,e=jo(e)),t=e}())),e}()),n!==r){for(i=[],o=Mu,(a=pc())!==r&&(u=ic())!==r?(Uu=o,a=po(n,u),o=a):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=pc())!==r&&(u=ic())!==r?(Uu=o,a=po(n,u),o=a):(Mu=o,o=r);i!==r?(Uu=e,n=ho(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())),e}()))))),e}function nc(){var e,n,i,o;return e=Mu,91===t.charCodeAt(Mu)?(n=ln,Mu++):(n=r,0===Gu&&ts(fn)),n!==r&&pc()!==r?((i=ks())===r&&(i=null),i!==r&&pc()!==r?(93===t.charCodeAt(Mu)?(o=pn,Mu++):(o=r,0===Gu&&ts(hn)),o!==r?(Uu=e,e=n=Qi(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}function rc(){var e,n,i,o;return e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r?((i=oc())===r&&(i=null),i!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r?(Uu=e,e=n=Zi(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}function ic(){var e,n,i,o;return e=Mu,91===t.charCodeAt(Mu)?(n=ln,Mu++):(n=r,0===Gu&&ts(fn)),n!==r&&pc()!==r&&(i=Ns())!==r&&pc()!==r?(93===t.charCodeAt(Mu)?(o=pn,Mu++):(o=r,0===Gu&&ts(hn)),o!==r?(Uu=e,e=n=yo(i)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r?((i=oc())===r&&(i=null),i!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r?(Uu=e,e=n=mo(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,46===t.charCodeAt(Mu)?(n=vo,Mu++):(n=r,0===Gu&&ts(bo)),n!==r&&pc()!==r&&(i=sc())!==r?(Uu=e,e=n=_o(i)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,2)===go?(n=go,Mu+=2):(n=r,0===Gu&&ts(wo)),n!==r&&pc()!==r&&(i=sc())!==r?(Uu=e,e=n=Ro(i)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,2)===mi?(n=mi,Mu+=2):(n=r,0===Gu&&ts(vi)),n!==r&&(Uu=e,n=To()),(e=n)===r&&(e=Mu,t.substr(Mu,2)===_i?(n=_i,Mu+=2):(n=r,0===Gu&&ts(gi)),n!==r&&(Uu=e,n=xo()),e=n))))),e}function oc(){var e,n,i,o,a,u;if(e=Mu,(n=ks())!==r){for(i=[],o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=ks())!==r?(Uu=o,o=Ao(n,u)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=ks())!==r?(Uu=o,o=Ao(n,u)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=xn(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function ac(){var e,n,i,o;if(e=[],n=Mu,(i=uc())===r&&(i=lc()),i!==r&&pc()!==r?(t.substr(Mu,2)===Fo?(o=Fo,Mu+=2):(o=r,0===Gu&&ts(No)),o!==r&&pc()!==r?(Uu=n,n=i=ko(i)):(Mu=n,n=r)):(Mu=n,n=r),n!==r)for(;n!==r;)e.push(n),n=Mu,(i=uc())===r&&(i=lc()),i!==r&&pc()!==r?(t.substr(Mu,2)===Fo?(o=Fo,Mu+=2):(o=r,0===Gu&&ts(No)),o!==r&&pc()!==r?(Uu=n,n=i=ko(i)):(Mu=n,n=r)):(Mu=n,n=r);else e=r;return e===r&&(e=Mu,t.substr(Mu,2)===Fo?(n=Fo,Mu+=2):(n=r,0===Gu&&ts(No)),n!==r&&(i=pc())!==r?(Uu=e,e=n=zo()):(Mu=e,e=r)),e}function uc(){var t,e;return t=Mu,(e=bs())!==r&&(Uu=t,e=Vo(e)),t=e}function sc(){var e;return(e=function(){var e,n,i;return e=Mu,t.substr(Mu,8)===Lo?(n=Lo,Mu+=8):(n=r,0===Gu&&ts(Bo)),n!==r&&pc()!==r&&(i=function(){var e;return t.substr(Mu,5)===Mo?(e=Mo,Mu+=5):(e=r,0===Gu&&ts(Uo)),e===r&&(t.substr(Mu,8)===Wo?(e=Wo,Mu+=8):(e=r,0===Gu&&ts(qo)),e===r&&(t.substr(Mu,3)===Bi?(e=Bi,Mu+=3):(e=r,0===Gu&&ts(Di)),e===r&&(t.substr(Mu,6)===Ki?(e=Ki,Mu+=6):(e=r,0===Gu&&ts(Yi)),e===r&&(t.substr(Mu,3)===hi?(e=hi,Mu+=3):(e=r,0===Gu&&ts(di)),e===r&&(t.substr(Mu,3)===Un?(e=Un,Mu+=3):(e=r,0===Gu&&ts(Wn)),e===r&&(t.substr(Mu,3)===qn?(e=qn,Mu+=3):(e=r,0===Gu&&ts($n)),e===r&&(t.substr(Mu,2)===Ln?(e=Ln,Mu+=2):(e=r,0===Gu&&ts(Bn)),e===r&&(t.substr(Mu,2)===Dn?(e=Dn,Mu+=2):(e=r,0===Gu&&ts(Mn)),e===r&&(t.substr(Mu,2)===In?(e=In,Mu+=2):(e=r,0===Gu&&ts(Fn)),e===r&&(t.substr(Mu,2)===Nn?(e=Nn,Mu+=2):(e=r,0===Gu&&ts(kn)),e===r&&(t.substr(Mu,2)===zn?(e=zn,Mu+=2):(e=r,0===Gu&&ts(Vn)),e===r&&(t.substr(Mu,2)===Yn?(e=Yn,Mu+=2):(e=r,0===Gu&&ts(Xn)),e===r&&(t.substr(Mu,2)===Gn?(e=Gn,Mu+=2):(e=r,0===Gu&&ts(Hn)),e===r&&(t.substr(Mu,2)===nr?(e=nr,Mu+=2):(e=r,0===Gu&&ts(rr)),e===r&&(t.substr(Mu,2)===Xr?(e=Xr,Mu+=2):(e=r,0===Gu&&ts(Jr)),e===r&&(t.substr(Mu,2)===ti?(e=ti,Mu+=2):(e=r,0===Gu&&ts(ei)),e===r&&(t.substr(Mu,2)===zr?(e=zr,Mu+=2):(e=r,0===Gu&&ts(Vr)),e===r&&(t.substr(Mu,2)===Lr?(e=Lr,Mu+=2):(e=r,0===Gu&&ts(Br)),e===r&&(t.substr(Mu,2)===qr?(e=qr,Mu+=2):(e=r,0===Gu&&ts($r)),e===r&&(t.substr(Mu,2)===Gr?(e=Gr,Mu+=2):(e=r,0===Gu&&ts(Hr)),e===r&&(t.substr(Mu,2)===vr?(e=vr,Mu+=2):(e=r,0===Gu&&ts(br)),e===r&&(t.substr(Mu,2)===fr?(e=fr,Mu+=2):(e=r,0===Gu&&ts(pr)),e===r&&(t.substr(Mu,2)===mi?(e=mi,Mu+=2):(e=r,0===Gu&&ts(vi)),e===r&&(t.substr(Mu,2)===_i?(e=_i,Mu+=2):(e=r,0===Gu&&ts(gi)),e===r&&(t.substr(Mu,2)===go?(e=go,Mu+=2):(e=r,0===Gu&&ts(wo)),e===r&&(t.substr(Mu,2)===$o?(e=$o,Mu+=2):(e=r,0===Gu&&ts(Go)),e===r&&(t.substr(Mu,2)===Ho?(e=Ho,Mu+=2):(e=r,0===Gu&&ts(Qo)),e===r&&(43===t.charCodeAt(Mu)?(e=ni,Mu++):(e=r,0===Gu&&ts(ri)),e===r&&(45===t.charCodeAt(Mu)?(e=ii,Mu++):(e=r,0===Gu&&ts(oi)),e===r&&(42===t.charCodeAt(Mu)?(e=tn,Mu++):(e=r,0===Gu&&ts(en)),e===r&&(47===t.charCodeAt(Mu)?(e=ai,Mu++):(e=r,0===Gu&&ts(ui)),e===r&&(37===t.charCodeAt(Mu)?(e=si,Mu++):(e=r,0===Gu&&ts(ci)),e===r&&(94===t.charCodeAt(Mu)?(e=Or,Mu++):(e=r,0===Gu&&ts(Sr)),e===r&&(38===t.charCodeAt(Mu)?(e=rn,Mu++):(e=r,0===Gu&&ts(on)),e===r&&(124===t.charCodeAt(Mu)?(e=Rr,Mu++):(e=r,0===Gu&&ts(Tr)),e===r&&(126===t.charCodeAt(Mu)?(e=Ct,Mu++):(e=r,0===Gu&&ts(Ot)),e===r&&(33===t.charCodeAt(Mu)?(e=ji,Mu++):(e=r,0===Gu&&ts(Ii)),e===r&&(61===t.charCodeAt(Mu)?(e=Be,Mu++):(e=r,0===Gu&&ts(De)),e===r&&(60===t.charCodeAt(Mu)?(e=Qr,Mu++):(e=r,0===Gu&&ts(Zr)),e===r&&(62===t.charCodeAt(Mu)?(e=Kr,Mu++):(e=r,0===Gu&&ts(Yr)),e===r&&(44===t.charCodeAt(Mu)?(e=_t,Mu++):(e=r,0===Gu&&ts(gt))))))))))))))))))))))))))))))))))))))))))),e}())!==r?(Uu=e,n=Do(i),e=n):(Mu=e,e=r),e}())===r&&(e=lc()),e}function cc(){var e;return(e=function(){var e;return t.substr(Mu,2)===Ta?(e=Ta,Mu+=2):(e=r,0===Gu&&ts(xa)),e===r&&(t.substr(Mu,2)===Ea?(e=Ea,Mu+=2):(e=r,0===Gu&&ts(Aa)),e===r&&(t.substr(Mu,2)===Ca?(e=Ca,Mu+=2):(e=r,0===Gu&&ts(Oa)),e===r&&(t.substr(Mu,2)===Sa?(e=Sa,Mu+=2):(e=r,0===Gu&&ts(Pa)),e===r&&(t.substr(Mu,2)===ja?(e=ja,Mu+=2):(e=r,0===Gu&&ts(Ia)),e===r&&(t.substr(Mu,2)===Fa?(e=Fa,Mu+=2):(e=r,0===Gu&&ts(Na)),e===r&&(t.substr(Mu,2)===ka?(e=ka,Mu+=2):(e=r,0===Gu&&ts(za)),e===r&&(t.substr(Mu,2)===Va?(e=Va,Mu+=2):(e=r,0===Gu&&ts(La)),e===r&&(t.substr(Mu,2)===Ba?(e=Ba,Mu+=2):(e=r,0===Gu&&ts(Da)),e===r&&(t.substr(Mu,2)===Ma?(e=Ma,Mu+=2):(e=r,0===Gu&&ts(Ua)),e===r&&(t.substr(Mu,2)===Wa?(e=Wa,Mu+=2):(e=r,0===Gu&&ts(qa)),e===r&&(t.substr(Mu,2)===$a?(e=$a,Mu+=2):(e=r,0===Gu&&ts(Ga))))))))))))),e}())===r&&(e=function(){var e,n,i,o;return Ha.test(t.charAt(Mu))?(e=t.charAt(Mu),Mu++):(e=r,0===Gu&&ts(Qa)),e===r&&(e=Mu,Ha.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(Qa)),n!==r?(Ha.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(Qa)),i!==r?e=n=[n,i]:(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,Ha.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(Qa)),n!==r?(Ha.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(Qa)),i!==r?(Ha.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(Qa)),o!==r?e=n=[n,i,o]:(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r))),e}()),e}function lc(){var e,n,i,o;if(Gu++,e=Mu,(n=function(){var e;return Ja.test(t.charAt(Mu))?(e=t.charAt(Mu),Mu++):(e=r,0===Gu&&ts(tu)),e}())!==r){for(i=[],o=fc();o!==r;)i.push(o),o=fc();i!==r?(Uu=e,e=n=Ka(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return Gu--,e===r&&(n=r,0===Gu&&ts(Za)),e}function fc(){var e;return Ya.test(t.charAt(Mu))?(e=t.charAt(Mu),Mu++):(e=r,0===Gu&&ts(Xa)),e}function pc(){var e,n,i,o;for(Gu++,e=Mu,n=[],nu.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(ru));i!==r;)n.push(i),nu.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(ru));if(n!==r&&(i=is())!==r&&(o=pc())!==r?e=n=[n,i,o]:(Mu=e,e=r),e===r)for(e=[],nu.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(ru));n!==r;)e.push(n),nu.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(ru));return Gu--,e===r&&(n=r,0===Gu&&ts(eu)),e}function hc(){var e,n,i,o;if(Gu++,e=Mu,(n=is())!==r&&(i=hc())!==r?e=n=[n,i]:(Mu=e,e=r),e===r){if(e=Mu,n=[],nu.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(ru)),i!==r)for(;i!==r;)n.push(i),nu.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(ru));else n=r;if(n!==r&&(i=is())!==r&&(o=pc())!==r?e=n=[n,i,o]:(Mu=e,e=r),e===r)if(e=[],nu.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(ru)),n!==r)for(;n!==r;)e.push(n),nu.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(ru));else e=r}return Gu--,e===r&&(n=r,0===Gu&&ts(iu)),e}function dc(){var e,n,i,o,a,u,s;if(e=Mu,n=[],i=Mu,(o=mc())!==r&&pc()!==r?(Uu=i,i=o=yu(o)):(Mu=i,i=r),i!==r)for(;i!==r;)n.push(i),i=Mu,(o=mc())!==r&&pc()!==r?(Uu=i,i=o=yu(o)):(Mu=i,i=r);else n=r;if(n!==r&&(Uu=e,n=mu(n)),(e=n)===r)if(e=Mu,(n=yc())!==r)if((i=pc())!==r)if(58===t.charCodeAt(Mu)?(o=T,Mu++):(o=r,0===Gu&&ts(x)),o!==r)if(pc()!==r){for(a=[],u=Mu,(s=mc())!==r&&pc()!==r?(Uu=u,u=s=vu(n,s)):(Mu=u,u=r);u!==r;)a.push(u),u=Mu,(s=mc())!==r&&pc()!==r?(Uu=u,u=s=vu(n,s)):(Mu=u,u=r);a!==r?(Uu=e,e=n=bu(n,a)):(Mu=e,e=r)}else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;return e}function yc(){var e;return t.substr(Mu,7)===_u?(e=_u,Mu+=7):(e=r,0===Gu&&ts(gu)),e===r&&(t.substr(Mu,9)===wu?(e=wu,Mu+=9):(e=r,0===Gu&&ts(Ru)),e===r&&(t.substr(Mu,6)===Tu?(e=Tu,Mu+=6):(e=r,0===Gu&&ts(xu)))),e}function mc(){var e,n,i,o,a,u;return e=Mu,(n=ds())!==r?(i=Mu,Gu++,o=lc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r&&(a=function(){var e,n,i,o,a,u,s;if(e=Mu,(n=vc())!==r){for(i=[],o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=vc())!==r?(Uu=o,a=wt(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=vc())!==r?(Uu=o,a=wt(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,n=Rt(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&pc()!==r?(59===t.charCodeAt(Mu)?(u=I,Mu++):(u=r,0===Gu&&ts(F)),u!==r?(Uu=e,e=n=Eu(n,a)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=ps())!==r&&(i=pc())!==r?(59===t.charCodeAt(Mu)?(o=I,Mu++):(o=r,0===Gu&&ts(F)),o===r&&(o=null),o!==r?(Uu=e,e=n=Au(n)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=function(){var e,n,i,o,a,u,s,c,l,f;return e=Mu,126===t.charCodeAt(Mu)?(n=Ct,Mu++):(n=r,0===Gu&&ts(Ot)),n!==r&&(i=lc())!==r&&(o=pc())!==r?(40===t.charCodeAt(Mu)?(a=q,Mu++):(a=r,0===Gu&&ts($)),a!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(u=G,Mu++):(u=r,0===Gu&&ts(H)),u!==r&&pc()!==r?((s=ss())===r&&(s=Mu,59===t.charCodeAt(Mu)?(c=I,Mu++):(c=r,0===Gu&&ts(F)),c!==r&&(Uu=s,c=St(i)),s=c),s!==r?(Uu=e,e=n=Pt(i,s)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,7)===jt?(n=jt,Mu+=7):(n=r,0===Gu&&ts(It)),n!==r&&(i=hc())!==r?(126===t.charCodeAt(Mu)?(o=Ct,Mu++):(o=r,0===Gu&&ts(Ot)),o!==r&&(a=lc())!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(u=q,Mu++):(u=r,0===Gu&&ts($)),u!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(s=G,Mu++):(s=r,0===Gu&&ts(H)),s!==r&&(c=pc())!==r?((l=ss())===r&&(l=Mu,59===t.charCodeAt(Mu)?(f=I,Mu++):(f=r,0===Gu&&ts(F)),f!==r&&(Uu=l,f=St(a)),l=f),l!==r?(Uu=e,e=n=Ft(a,l)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}())!==r&&(i=pc())!==r?(59===t.charCodeAt(Mu)?(o=I,Mu++):(o=r,0===Gu&&ts(F)),o===r&&(o=null),o!==r?(Uu=e,e=n=Cu(n)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=fs())!==r&&(i=pc())!==r?(59===t.charCodeAt(Mu)?(o=I,Mu++):(o=r,0===Gu&&ts(F)),o===r&&(o=null),o!==r?(Uu=e,e=n=Ou(n)):(Mu=e,e=r)):(Mu=e,e=r)))),e}function vc(){var e,n,i,o;return e=Mu,(n=Rs())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(i=Be,Mu++):(i=r,0===Gu&&ts(De)),i!==r&&pc()!==r?(48===t.charCodeAt(Mu)?(o=Su,Mu++):(o=r,0===Gu&&ts(Pu)),o!==r?(Uu=e,e=n=ju(n)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=Rs())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(i=Be,Mu++):(i=r,0===Gu&&ts(De)),i!==r&&pc()!==r?(t.substr(Mu,21)===We?(o=We,Mu+=21):(o=r,0===Gu&&ts(qe)),o!==r?(Uu=e,e=n=Iu(n)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=Rs())!==r&&pc()!==r&&(i=ws())!==r?(Uu=e,e=n=Fu(n,i)):(Mu=e,e=r),e===r&&(e=Rs()))),e}function bc(){var e,n,i,o,a;return e=Mu,t.substr(Mu,7)===jt?(n=jt,Mu+=7):(n=r,0===Gu&&ts(It)),n!==r&&(i=hc())!==r?(o=Mu,(a=yc())!==r&&hc()!==r?(Uu=o,o=a=zu(a)):(Mu=o,o=r),o!==r&&(a=_c())!==r?(Uu=e,e=n=Vu(o,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,n=Mu,(i=yc())!==r&&(o=hc())!==r?(Uu=n,n=i=zu(i)):(Mu=n,n=r),n!==r?(t.substr(Mu,7)===jt?(i=jt,Mu+=7):(i=r,0===Gu&&ts(It)),i!==r&&(o=hc())!==r&&(a=_c())!==r?(Uu=e,e=n=Vu(n,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=yc())!==r&&(i=hc())!==r&&(o=_c())!==r?(Uu=e,e=n=Lu(n,o)):(Mu=e,e=r),e===r&&(e=Mu,(n=_c())!==r&&(Uu=e,n=Bu(n)),e=n))),e}function _c(){var t,e,n;return t=Mu,(e=ac())!==r&&pc()!==r&&(n=lc())!==r?(Uu=t,t=e=Du(e,n)):(Mu=t,t=r),t===r&&(t=lc()),t}function gc(t,e,n,r){if(!e||0===e.length)return t;if("left"===n){var i=e.pop();return{construct_type:r,operator:i[0],left:gc(t,e,n,r),right:i[1],associativity:n}}var o=e.shift();return{construct_type:r,operator:o[0],left:t,right:gc(o[1],e,n,r),associativity:n}}function wc(t,e){if(!e)return t;for(var n in e)"start"!=n&&"end"!=n&&(t[n]=e[n]);return t}function Rc(t,e,n){return t.source={location:e,start:e.start.offset,text:n,line:e.start.line,column:e.start.column,end:e.start.offset+n.length},t}var Tc={};function xc(){return Tc}if((n=a())!==r&&Mu===t.length)return n;throw n!==r&&Mu<t.length&&ts({type:"end"}),es($u,qu<t.length?t.charAt(qu):null,qu<t.length?Ju(qu,qu+1):Ju(qu,qu))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(55),i=n(3),o=n(0),a=n(13),u=n(4),s=n(5),c=n(2),l=function(){function t(){this._allNotes=[],this.allNotes=this._allNotes,this.hasErrors=!1,this.hasSyntaxErrors=!1,this.hasWarnings=!1}return t.prototype.addNote=function(t){this._allNotes.push(t);t.kind===i.NoteKind.ERROR?(this.hasErrors=!0,t instanceof i.SyntaxNote&&(this.hasSyntaxErrors=!0)):t.kind===i.NoteKind.WARNING&&(this.hasWarnings=!0)},t.prototype.addNotes=function(t){var e=this;t.forEach(function(t){return e.addNote(t)})},t.prototype.clearNotes=function(){this._allNotes.length=0;this.hasErrors=!1,this.hasSyntaxErrors=!1,this.hasWarnings=!1},t}();e.NoteRecorder=l;var f=function(){function t(t,e){var n=this;for(var r in this.context={program:this},this.isCompilationUpToDate=!0,this.sourceFiles={},this.translationUnits={},this.globalObjects=[],this.functionCalls=[],this.definitions={},this.linkedEntities=[],this.notes=new l,t.forEach(function(t){n.sourceFiles[t.name]=t}),e.forEach(function(t){o.assert(!!n.sourceFiles[t],"Source file "+t+" not found."),n.translationUnits[t]=new y(n,new d(n.sourceFiles[t],n.sourceFiles))}),this.translationUnits){var i=this.translationUnits[r];this.notes.addNotes(i.notes.allNotes)}this.notes.hasSyntaxErrors||this.link(),this.isCompilationUpToDate=!0}return t.prototype.link=function(){var t=this;this.defineIntrinsics(),this.linkedEntities.forEach(function(e){return e.link(t.definitions[e.qualifiedName])});var e=this.definitions["::main"];e instanceof a.FunctionDefinition&&(this.mainFunction=e),this.globalObjectAllocator=new c.GlobalObjectAllocator(this.context,this.globalObjects)},t.prototype.defineIntrinsics=function(){},t.prototype.registerLinkedEntity=function(t){o.asMutable(this.linkedEntities).push(t)},t.prototype.registerGlobalObjectDefinition=function(t,e){this.definitions[t]?this.notes.addNote(i.CPPError.link.multiple_def(e,t)):(this.definitions[t]=e,o.asMutable(this.globalObjects).push(e))},t.prototype.registerFunctionDefinition=function(t,e){var n=this.definitions[t];if(n)if(Array.isArray(n)){u.selectOverloadedDefinition(n,e.declaration.type)?this.notes.addNote(i.CPPError.link.multiple_def(e,t)):n.push(e)}else this.notes.addNote(i.CPPError.link.multiple_def(e,t));else this.definitions[t]=[e]},t}();e.Program=f;var p=function(){return function(t,e){this.observable=new s.Observable(this),this.name=t,this.text=e}}();e.SourceFile=p;var h=function(){function t(t,e,n,r,i){this._includes=[],this.includes=this._includes,this.sourceFile=t,this.line=e,this.column=n,this.start=r,this.end=i}return t.createIncluded=function(e,n,r){var i=new t(r.sourceFile,r.line,r.column,r.start,r.end);return i._includes.push({sourceFile:e,lineIncluded:n}),r.includes.forEach(function(t){return i._includes.push(t)}),i},Object.defineProperty(t.prototype,"isIncluded",{get:function(){return this.includes.length>0},enumerable:!0,configurable:!0}),t}();e.SourceReference=h;var d=function(){function t(e,n,r){var o=this;void 0===r&&(r={}),this.notes=new l,this._includes=[],this.includes=this._includes,this.includedSourceFiles={},this.primarySourceFile=e,this.name=e.name,this.availableToInclude=n,r[this.primarySourceFile.name]=!0;var a=e.text;a=this.filterSourceCode(a);var u=0,s=1,c=1;this.includedSourceFiles[this.primarySourceFile.name]=this.primarySourceFile,this.preprocessedText=a.replace(/#include[^\S\n]+"(.*)"/g,function(n,a,l,f){for(var p={},d=u;d<l;++d)"\n"===f[d]&&(++s,++c);if(p.startLine=s,p.startOffset=l,u=l+n.length,r[a])return o.notes.addNote(i.CPPError.preprocess.recursiveInclude(new h(e,s,0,l,u))),Array(n.length+1).join(" ");var y=new t(o.availableToInclude[a],o.availableToInclude,Object.assign({},r));return Object.assign(o.includedSourceFiles,y.includedSourceFiles),p.numLines=y.numLines,p.endLine=p.startLine+y.numLines,p.lineDelta=y.numLines-1,p.lengthDelta=y.length-n.length,s+=y.numLines-1,p.included=y,p.lineIncluded=c,o._includes.push(p),y.preprocessedText});for(var f=u;f<a.length;++f)"\n"===a[f]&&++s;this.numLines=s,this.length=this.preprocessedText.length}return t.prototype.filterSourceCode=function(t){return(t=t.replace(/\r/g,"")).includes("#ifndef")&&(t=t.replace(/#ifndef.*/g,function(t){return Array(t.length+1).join(" ")})),t.includes("#define")&&(t=t.replace(/#define.*/g,function(t){return Array(t.length+1).join(" ")})),t.includes("#endif")&&(t=t.replace(/#endif.*/g,function(t){return Array(t.length+1).join(" ")})),(t=t.replace(/#include.*<.*>/g,function(t){return Array(t.length+1).join(" ")})).includes("using namespace")&&(t=t.replace(/using namespace.*/g,function(t){return Array(t.length+1).join(" ")})),t.includes("using std::")&&(t=t.replace(/using std::.*/g,function(t){return Array(t.length+1).join(" ")})),t},t.prototype.getSourceReference=function(t,e,n,r){for(var i=0,o=1,a=0;a<this.includes.length;++a){var u=this.includes[a];if(t<u.startLine)return new h(this.primarySourceFile,t-o+1,e,n&&n-i,r&&r-i);if(u.startLine<=t&&t<u.endLine)return h.createIncluded(this.primarySourceFile,u.lineIncluded,u.included.getSourceReference(t-u.startLine+1,e,n&&n-u.startOffset,r&&r-u.startOffset));i+=u.lengthDelta,o+=u.lineDelta}return new h(this.primarySourceFile,t-o+1,e,n&&n-i,r&&r-i)},t}(),y=function(){function t(t,e){this.notes=new l,this.topLevelDeclarations=[],this.staticEntities=[],this.stringLiterals=[],this.functionCalls=[],this.program=t,this.source=e,this.globalScope=new u.NamespaceScope(e.primarySourceFile.name+"_GLOBAL_SCOPE"),this.name=e.name,this.context=c.createTranslationUnitContext(t.context,this,this.globalScope);try{var n=r.parse(this.source.preprocessedText);this.parsedAST=n,this.createBuiltInGlobals(),this.compileTopLevelDeclarations(this.parsedAST)}catch(t){if("SyntaxError"!=t.name)throw console.log(t.stack),t;this.notes.addNote(new i.SyntaxNote(this.getSourceReference(t.location.start.line,t.location.start.column,t.location.start.offset,t.location.start.offset+1),i.NoteKind.ERROR,"syntax",t.message))}}return t.prototype.createBuiltInGlobals=function(){},t.prototype.compileTopLevelDeclarations=function(t){var e=this;t.declarations.forEach(function(t){var n=a.createDeclarationFromAST(t,e.context);Array.isArray(n)?n.forEach(function(t){return o.asMutable(e.topLevelDeclarations).push(t)}):o.asMutable(e.topLevelDeclarations).push(n)})},t.prototype.addStringLiteral=function(t){o.asMutable(this.stringLiterals).push(t)},t.prototype.registerFunctionCall=function(t){o.asMutable(this.functionCalls).push(t)},t.prototype.getNearestSourceReferenceForConstruct=function(t){for(;!t.ast&&t.parent;)t=t.parent;if(!t.ast)return o.assertFalse("Can't find source reference for construct");var e=t.ast.source;return this.getSourceReference(e.line,e.column,e.start,e.end)},t.prototype.getSourceReference=function(t,e,n,r){return this.source.getSourceReference(t,e,n,r)},t}();e.TranslationUnit=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(56);console.log("hello");var i=new r.SourceFile("test.cpp","int main() {int x = 2;}"),o=new r.Program([i],["test.cpp"]);console.log(o)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,