var Bundle=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=56)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.asMutable=function(t){return t},e.assert=function(t,e){if(void 0===e&&(e=""),!t)throw Error("Assert failed: "+e)},e.assertFalse=function(t){throw void 0===t&&(t=""),Error("Assert failed: "+t)},e.createMethodMixin=function(t){return function(e,n){e[n]=t}},e.htmlDecoratedType=function(t){return'<span class="code-type">'+t+"</span>"};var r=['\\"',"\\'","\\?","\\\\","\\a","\\b","\\f","\\n","\\r","\\t","\\v","\\0"],i=['"',"'","","\\","","\b","\f","\n","\r","\t","\v","\0"];e.escapeString=function(t){for(var e=0;e<r.length;++e)t=t.replace(r[e],i[e]);return t},e.unescapeString=function(t){for(var e="",n=0;n<t.length;++n){for(var o=t[n],a=0;a<i.length;++a)if(o===i[a]){o=r[a];break}e+=o}return e};var o=function(){function t(){this.seed=0}return t.prototype.setRandomSeed=function(t){this.seed=t},t.prototype.random=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=1),this.seed=(9301*this.seed+49297)%233280,this.seededRandom(this.seed,t,e)},t.prototype.seededRandom=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=1);var r=t%233280/233280;return r=e+r*(n-e),r=Math.max(e,Math.min(n,r))},t}();e.CPPRandom=o},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),o=["a","e","i","o","u"];function a(t,e){return t.sameType(e)}function u(t,e){return t.similarType(e)}function s(t,e){return t instanceof S&&e instanceof S&&t.isDerivedFrom(e)}e.isType=function(t,e){return t.isType(e)},e.sameType=a,e.similarType=u,e.subType=s,e.covariantType=function(t,e){if(a(t,e))return!0;var n,r;if(t instanceof T&&e instanceof T)n=t.ptrTo,r=e.ptrTo;else{if(!(t instanceof A&&e instanceof A))return!1;n=t.refTo,r=e.refTo}return n instanceof S&&r instanceof S&&(!!n.isDerivedFrom(r)&&(t.isConst==e.isConst&&t.isVolatile==e.isVolatile&&!(n.isConst&&!r.isConst||n.isVolatile&&!r.isVolatile)))},e.referenceCompatible=function(t,e){return t&&e&&t.isReferenceCompatible(e)},e.isCvConvertible=function(t,e){if(null===t||null===e)return!1;if(!u(t,e))return!1;t=t.getCompoundNext(),e=e.getCompoundNext();for(var n=!0;t&&e;){if(t.isConst&&!e.isConst)return!1;if(!t.isConst&&e.isConst&&!n)return!1;n=n&&e.isConst,t=t.getCompoundNext(),e=e.getCompoundNext()}return!0};var c=function(){function t(t,e){void 0===t&&(t=!1),void 0===e&&(e=!1),this.isConst=t,this.isVolatile=e}return t.prototype.getCVString=function(){return(this.isConst?"const ":"")+(this.isVolatile?"volatile ":"")},t.prototype.toString=function(){return this.typeString(!1,"")},t.prototype.isType=function(t){return this instanceof t},t.prototype.isObjectType=function(){return this instanceof f},t.prototype.isAtomicType=function(){return this instanceof p},t.prototype.isArithmeticType=function(){return this instanceof d},t.prototype.isIntegralType=function(){return this instanceof y},t.prototype.isFloatingPointType=function(){return this instanceof g},t.prototype.isPointerType=function(){return this instanceof T},t.prototype.isReferenceType=function(){return this instanceof A},t.prototype.isClassType=function(){return this instanceof S},t.prototype.isBoundedArrayType=function(){return this instanceof C},t.prototype.isArrayOfUnknownBoundType=function(){return this instanceof O},t.prototype.isGenericArrayType=function(){return this instanceof C||this instanceof O},t.prototype.isFunctionType=function(){return this instanceof P},t.prototype.isArrayElemType=function(){return this instanceof p||this instanceof S},t.prototype.isVoidType=function(){return this instanceof l},t.prototype.isPotentialReturnType=function(){return this instanceof f||this instanceof A||this instanceof l},t.prototype.isPotentialParameterType=function(){return this instanceof f||this instanceof A},t.prototype.isReferenceRelated=function(t){return a(this.cvUnqualified(),t.cvUnqualified())||s(this.cvUnqualified(),t.cvUnqualified())},t.prototype.isReferenceCompatible=function(t){return this.isReferenceRelated(t)&&(t.isConst||!this.isConst)&&(t.isVolatile||!this.isVolatile)},t.prototype.declaratorString=function(t){return this.typeString(!0,t)},t.prototype.parenthesize=function(t,e){return this.precedence<t.precedence?"("+e+")":e},t.prototype.describe=function(){var t=this.typeString(!1,"");return{name:t,message:t}},t.prototype.getCompoundNext=function(){return null},t.prototype.isCVQualified=function(){return this.isConst||this.isVolatile},t.prototype.cvUnqualified=function(){return this.cvQualified(!1,!1)},t.prototype.cvQualified=function(t,e){return void 0===e&&(e=!1),this.cvQualifiedImpl(t,e)},t._name="Type",t}(),l=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.isComplete=!0,e.precedence=0,e}return r(e,t),e.prototype.sameType=function(t){return t instanceof e&&t.isConst===this.isConst&&t.isVolatile===this.isVolatile},e.prototype.similarType=function(t){return t instanceof e},e.prototype.typeString=function(t,e,n){return"void"},e.prototype.englishString=function(t){return"void"},e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.VOID=new e,e}(c);e.VoidType=l;var f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(c);e.ObjectType=f;var p=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.isAtomic=!0,e}return r(e,t),e}(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.bytesToValue=function(t){return t[0]},e.prototype.valueToBytes=function(t){var e=[];e[0]=t;for(var n=1;n<this.size-1;++n)e.push(0);return e},e.prototype.valueToOstreamString=function(t){return this.valueToString(t)},e}(f));e.AtomicType=p;var h=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.isComplete=!0,e.precedence=0,e}return r(e,t),e.prototype.sameType=function(t){return t instanceof e&&t.simpleType===this.simpleType&&t.isConst===this.isConst&&t.isVolatile===this.isVolatile},e.prototype.similarType=function(t){return t instanceof e&&t.simpleType===this.simpleType},e.prototype.typeString=function(t,e,n){return t?e||"":this.getCVString()+(n?i.htmlDecoratedType(this.simpleType.toString()):this.simpleType)+(e?" "+e:"")},e.prototype.englishString=function(t){var e=this.getCVString()+this.simpleType;return t?this.simpleType+"s":(function(t){return-1!=o.indexOf(t)}(e.charAt(0))?"an ":"a ")+e},e.prototype.valueToString=function(t){return""+t},e.prototype.isValueValid=function(t){return!0},e}(p);e.SimpleType=h;var d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.ArithmeticType=d;var y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(d);e.IntegralType=y;var v=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="char",e.size=1,e}return r(e,t),e.isNullChar=function(t){return t===this.NULL_CHAR},e.jsStringToNullTerminatedCharArray=function(t){var n=t.split("").map(function(t){return t.charCodeAt(0)});return n.push(e.NULL_CHAR),n},e.prototype.valueToString=function(t){return"'"+i.unescapeString(String.fromCharCode(t))+"'"},e.prototype.valueToOstreamString=function(t){return String.fromCharCode(t)},e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.CHAR=new e,e.NULL_CHAR=0,e}(y);e.Char=v;var m=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="int",e.size=4,e}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.INT=new e,e}(y);e.Int=m;var b=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="size_t",e.size=8,e}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e}(y);e.Size_t=b;var _=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="bool",e.size=1,e}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.BOOL=new e,e}(y);e.Bool=_;var g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.valueToString=function(t){var e=""+t;return-1!=e.indexOf(".")?e:e+"."},e}(d);e.FloatingPointType=g;var w=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="float",e.size=4,e}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.FLOAT=new e,e}(g);e.Float=w;var R=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.simpleType="double",e.size=8,e}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e.DOUBLE=new e,e}(g);e.Double=R;var T=function(t){function e(e,n,r){var i=t.call(this,n,r)||this;return i.size=8,i.precedence=1,i.isComplete=!0,i.ptrTo=e,i}return r(e,t),e.isNull=function(t){return 0===t},e.isNegative=function(t){return t<0},e.prototype.getCompoundNext=function(){return this.ptrTo},e.prototype.sameType=function(t){return t instanceof e&&this.ptrTo.sameType(t.ptrTo)&&t.isConst===this.isConst&&t.isVolatile===this.isVolatile},e.prototype.similarType=function(t){return t instanceof e&&this.ptrTo.similarType(t.ptrTo)},e.prototype.typeString=function(t,e,n){return this.ptrTo.typeString(t,this.parenthesize(this.ptrTo,this.getCVString()+"*"+e),n)},e.prototype.englishString=function(t){return(t?this.getCVString()+"pointers to":"a "+this.getCVString()+"pointer to")+" "+this.ptrTo.englishString(!1)},e.prototype.valueToString=function(t){return"0x"+t},e.prototype.isObjectPointer=function(){return this.ptrTo.isObjectType()},e.prototype.isValueDereferenceable=function(t){return this.isValueValid(t)},e.prototype.isValueValid=function(t){return!0},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.ptrTo,t,n)},e}(p);e.PointerType=T;var x=function(t){function e(e,n,r){var i=t.call(this,e.type.elemType,n,r)||this;return i.arrayObject=e,i}return r(e,t),e.prototype.min=function(){return this.arrayObject.address},e.prototype.onePast=function(){return this.arrayObject.address+this.arrayObject.type.size},e.prototype.isValueValid=function(t){if(!this.arrayObject.isAlive)return!1;var e=this.arrayObject;return e.address<=t&&t<=e.address+e.type.size},e.prototype.isValueDereferenceable=function(t){return this.isValueValid(t)&&t!==this.onePast()},e.prototype.toIndex=function(t){return Math.trunc((t-this.arrayObject.address)/this.arrayObject.type.elemType.size)},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.arrayObject,t,n)},e}(T);e.ArrayPointer=x;var E=function(t){function e(e,n,r){var i=t.call(this,e.type,n,r)||this;return i.pointedObject=e,i}return r(e,t),e.prototype.getPointedObject=function(){return this.pointedObject},e.prototype.isValueValid=function(t){return this.pointedObject.isAlive&&this.pointedObject.address===t},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.pointedObject,t,n)},e}(T);e.ObjectPointer=E;var A=function(t){function e(e,n,r){var i=t.call(this,!1,r)||this;return i.precedence=1,i.isComplete=!0,i.refTo=e,i}return r(e,t),e.prototype.getCompoundNext=function(){return this.refTo},e.prototype.sameType=function(t){return t instanceof e&&this.refTo.sameType(t.refTo)},e.prototype.similarType=function(t){return t instanceof e&&this.refTo.similarType(t.refTo)},e.prototype.typeString=function(t,e,n){return this.refTo.typeString(t,this.parenthesize(this.refTo,this.getCVString()+"&"+e),n)},e.prototype.englishString=function(t){return this.getCVString()+(t?"references to":"a reference to")+" "+this.refTo.englishString(!1)},e.prototype.valueToString=function(t){return""+t},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.refTo,t,n)},e}(c);e.ReferenceType=A,e.noRef=function(t){return t instanceof A?t.refTo:t};var C=function(t){function e(e,n){var r=t.call(this,!1,!1)||this;return r.precedence=2,r.elemType=e,r.length=n,r.size=e.size*n,r}return r(e,t),Object.defineProperty(e.prototype,"isComplete",{get:function(){return this.elemType.isComplete},enumerable:!0,configurable:!0}),e.prototype.getCompoundNext=function(){return this.elemType},e.prototype.sameType=function(t){return t instanceof e&&this.elemType.sameType(t.elemType)&&this.length===t.length},e.prototype.similarType=function(t){return t instanceof e&&this.elemType.similarType(t.elemType)&&this.length===t.length},e.prototype.typeString=function(t,e,n){return this.elemType.typeString(t,e+"["+this.length+"]",n)},e.prototype.englishString=function(t){return(t?"arrays of ":"an array of ")+this.length+" "+this.elemType.englishString(this.length>1)},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.elemType,this.length)},e.prototype.adjustToPointerType=function(){return new T(this.elemType,!1,!1)},e}(f);e.BoundedArrayType=C;var O=function(t){function e(e,n){var r=t.call(this,!1,!1)||this;return r.precedence=2,r.isComplete=!1,r.elemType=e,r.sizeExpressionAST=n,r}return r(e,t),e.prototype.getCompoundNext=function(){return this.elemType},e.prototype.sameType=function(t){return t instanceof e&&this.elemType.sameType(t.elemType)},e.prototype.similarType=function(t){return t instanceof e&&this.elemType.similarType(t.elemType)},e.prototype.typeString=function(t,e,n){return this.elemType.typeString(t,e+"[]",n)},e.prototype.englishString=function(t){return(t?"arrays of unknown bound of ":"an array of unknown bound of ")+this.elemType.englishString(!0)},e.prototype.cvQualifiedImpl=function(t,n){return new e(this.elemType,this.sizeExpressionAST)},e.prototype.adjustToPointerType=function(){return new T(this.elemType,!1,!1)},e}(c);e.ArrayOfUnknownBoundType=O;var S=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.size=0,e.precedence=0,e.isComplete=!1,e.className="",e.name="",e}return r(e,t),e.prototype.sameType=function(t){throw new Error("Method not implemented.")},e.prototype.similarType=function(t){throw new Error("Method not implemented.")},e.prototype.isDerivedFrom=function(t){throw new Error("Method not implemented.")},e.prototype.typeString=function(t,e,n){throw new Error("Method not implemented.")},e.prototype.englishString=function(t){throw new Error("Method not implemented.")},e.prototype.cvQualifiedImpl=function(t,n){return new e(t,n)},e}(f);e.ClassType=S;var P=function(t){function e(e,n,r,i,o){var a=t.call(this,r,i)||this;a.isComplete=!0,a.precedence=2,a.receiverType=o,a.returnType=e instanceof S||e instanceof T||e instanceof A?e:e.cvUnqualified(),a.paramTypes=n.map(function(t){return t instanceof S?t:t.cvUnqualified()}),a.paramStrType="(";for(var u=0;u<n.length;++u)a.paramStrType+=(0==u?"":",")+n[u];a.paramStrType+=")",a.paramStrEnglish="(";for(u=0;u<n.length;++u)a.paramStrEnglish+=(0==u?"":", ")+n[u].englishString(!1);return a.paramStrEnglish+=")",a}return r(e,t),e.prototype.cvQualifiedImpl=function(t,n){return new e(this.returnType,this.paramTypes,t,n,this.receiverType)},e.prototype.sameType=function(t){return!!t&&(t instanceof e&&(!!this.sameReturnType(t)&&!!this.sameParamTypes(t)))},e.prototype.similarType=function(t){return this.sameType(t)},e.prototype.sameParamTypes=function(t){var n=t instanceof e?t.paramTypes:t;if(this.paramTypes.length!==n.length)return!1;for(var r=0;r<this.paramTypes.length;++r)if(!this.paramTypes[r].sameType(n[r]))return!1;return!0},e.prototype.sameReturnType=function(t){return this.returnType.sameType(t.returnType)},e.prototype.sameReceiverType=function(t){return this.receiverType&&t.receiverType?this.receiverType.sameType(t.receiverType):!this.receiverType&&!t.receiverType},e.prototype.sameSignature=function(t){return this.sameReceiverType(t)&&this.sameParamTypes(t)},e.prototype.isPotentialOverriderOf=function(t){return this.sameParamTypes(t)&&this.isConst===t.isConst&&this.isVolatile==t.isVolatile},e.prototype.typeString=function(t,e,n){return void 0===n&&(n=!1),this.returnType.typeString(t,e+this.paramStrType,n)},e.prototype.englishString=function(t){return(t?"functions that take ":"a function that takes ")+this.paramStrEnglish+" "+(t?"and return ":"and returns ")+this.returnType.englishString(!1)},e}(c);e.FunctionType=P;var j=new Set(["char","int","bool","float","double","void"]);e.isBuiltInTypeName=function(t){return j.has(t)},e.builtInTypes={char:v,int:m,bool:_,float:w,double:R,void:l}},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(1),o=n(4),a=n(0),u=n(5),s=n(3),c=n(12),l=n(9),f=n(8),p=n(10),h=function(){function t(t){this.entities={},this.parent=t}return t.prototype.toString=function(){var t="";for(var e in this.entities)t+=this.entities[e]+"\n";return t},t.prototype.addDeclaredEntity=function(t){var e=this.entities[t.name];return e?t.mergeInto(e):this.entities[t.name]=t instanceof P?[t]:t},t.prototype.lookup=function(t,e){void 0===e&&(e={kind:"normal"}),e=e||{},a.assert(!t.includes("::"),"Qualified name used with unqualified loookup function.");var n=this.entities[t];if(!n&&!e.own&&this.parent)return this.parent.lookup(t,e);if(n){if(Array.isArray(n)){var r=n;if("exact"===e.kind){var i=e.paramTypes,o=e.receiverType;return r=n.filter(function(t){return t.type.sameParamTypes(i)?t.type.sameParamTypes(i):o?t.type.receiverType&&o.isConst===t.type.isConst:!t.type.receiverType})}return r}return n}},t}();e.Scope=h;var d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.BlockScope=d;var y=function(t){function e(n,r){var i=t.call(this,r)||this;return a.assert(!r||r instanceof e),i.name=n,i.children={},r&&r.addChild(i),i}return r(e,t),e.prototype.addChild=function(t){t.name&&(this.children[t.name]=t)},e}(h);e.NamespaceScope=y;var v=function(){function t(e){this.observable=new u.Observable(this),this.entityId=t._nextEntityId++,this.type=e}return t._nextEntityId=0,t}();e.CPPEntity=v;var m=function(t){function e(e,n){var r=t.call(this,e)||this;return r.name=n,r}return r(e,t),e}(v);e.NamedEntity=m;var b=function(t){function e(e,n){var r=t.call(this,e,n.name)||this;return r.declaration=n,r}return r(e,t),e}(m);e.DeclaredEntityBase=b;var _=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.mergeInto=function(t){if(Array.isArray(t))throw o.CPPError.declaration.type_mismatch(this.declaration,this,t[0]);if(!i.sameType(this.type,t.type))throw o.CPPError.declaration.type_mismatch(this.declaration,this,t);return t},e}(b);e.DeclaredObjectEntity=_;var g=function(t){function e(e,n,r){var i=t.call(this,e,n)||this;return i.definition=n,i.isParameter=!!r,i}return r(e,t),e.prototype.toString=function(){return this.name+" ("+this.type+")"},e.prototype.mergeInto=function(t){throw o.CPPError.declaration.prev_local(this.declaration,this.name)},e.prototype.runtimeLookup=function(t){return t.containingRuntimeFunction.stackFrame.getLocalObject(this)},e.prototype.describe=function(){return{message:"the "+(this.isParameter?"parameter":"local variable")+" "+this.name}},e}(_);e.AutoEntity=g;var w=function(t){function e(e,n,r){void 0===r&&(r=!1);var i=t.call(this,e,n)||this;return i.isParameter=r,i}return r(e,t),e.prototype.mergeInto=function(t){throw o.CPPError.declaration.prev_local(this.declaration,this.name)},e.prototype.bindTo=function(t,e){t.containingRuntimeFunction.stackFrame.bindReference(this,e)},e.prototype.runtimeLookup=function(t){return t.containingRuntimeFunction.stackFrame.referenceLookup(this)},e.prototype.describe=function(){return{message:"the "+(this.isParameter?"reference parameter":"reference")+" "+this.name}},e}(_);e.LocalReferenceEntity=w;var R=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.qualifiedName="::"+r.name,r}return r(e,t),e.prototype.toString=function(){return this.name+" ("+this.type+")"},e.prototype.link=function(t){t&&t instanceof c.GlobalObjectDefinition?this.definition=t:this.declaration.addNote(o.CPPError.link.def_not_found(this.declaration,this))},e.prototype.runtimeLookup=function(t){return t.sim.memory.staticLookup(this)},e.prototype.describe=function(){return{name:this.name,message:"the variable "+this.name}},e}(_);e.StaticEntity=R;var T=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.runtimeLookup=function(t){var e=t.containingRuntimeFunction.returnObject;if(!e)throw"Error: Runtime lookup performed for the return object of a function, but the return object does not currently exist.";return e},e.prototype.describe=function(){return{message:"the return object"}},e}(v);e.ReturnObjectEntity=T;var x=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.bindTo=function(t,e){t.containingRuntimeFunction.setReturnObject(e)},e.prototype.describe=function(){return{message:"the object returned by reference"}},e}(v);e.ReturnByReferenceEntity=x;var E=function(t){function e(e){var n=t.call(this,new i.BoundedArrayType(new i.Char(!0),e.length+1))||this;return n.str=e,n}return r(e,t),e.prototype.objectInstance=function(t,e){return new l.StringLiteralObject(this.type,t,e)},e.prototype.toString=function(){return'string literal "'+a.unescapeString(this.str)+'"'},e.prototype.runtimeLookup=function(t){return t.sim.memory.getStringLiteral(this.str)},e.prototype.describe=function(){return{message:'the string literal "'+a.unescapeString(this.str)+'"'}},e}(v);e.StringLiteralEntity=E;var A=function(t){function e(e,n,r){var o=t.call(this,n)||this;return o.calledFunction=e,o.type=n,o.num=r,a.assert(i.sameType(e.type.paramTypes[r],n),"Inconsistent type for parameter entity."),o}return r(e,t),e.prototype.runtimeLookup=function(t){var e=t.sim.topFunction(),n=e.model.parameters[this.num].declaredEntity;if(!(n instanceof g))return a.assertFalse("Pass by value used with reference parameter.");var r=n.runtimeLookup(e);return a.assert(i.sameType(r.type,this.type)),r},e.prototype.describe=function(){var t=this.calledFunction.definition;return t?t.parameters[this.num].declaredEntity.describe():{message:"Parameter #"+(this.num+1)+" of the called function"}},e}(v);e.PassByValueParameterEntity=A;var C=function(t){function e(e,n,r){var o=t.call(this,n)||this;return o.calledFunction=e,o.type=n,o.num=r,a.assert(i.sameType(e.type.paramTypes[r],n),"Inconsistent type for parameter entity."),o}return r(e,t),e.prototype.bindTo=function(t,e){var n=t.sim.topFunction(),r=n.model.parameters[this.num].declaredEntity;if(!(r instanceof w))return a.assertFalse("Pass by reference used with non-reference parameter.");r.bindTo(n,e)},e.prototype.describe=function(){var t=this.calledFunction.definition;return t?t.parameters[this.num].declaredEntity.describe():{message:"Parameter #"+(this.num+1)+" of the called function"}},e}(v);e.PassByReferenceParameterEntity=C;var O=function(t){function e(e,n){var r=t.call(this,e.type.elemType)||this;return r.arrayEntity=e,r.index=n,r}return r(e,t),e.prototype.runtimeLookup=function(t){return this.arrayEntity.runtimeLookup(t).getArrayElemSubobject(this.index)},e.prototype.describe=function(){var t=this.arrayEntity.describe(),e={message:"element "+this.index+" of "+t.message};return t.name&&(e.name=t.name+"["+this.index+"]"),e},e}(v);e.ArraySubobjectEntity=O;var S=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.creator=n,o.owner=r,o.name=name,o}return r(e,t),e.prototype.setOwner=function(t){this.owner=t},e.prototype.objectInstance=function(t){var e=t.sim.memory.allocateTemporaryObject(this);return t.containingFullExpression.temporaryObjects[this.entityId]=e,e},e.prototype.runtimeLookup=function(t){return t instanceof s.RuntimePotentialFullExpression?t.containingFullExpression.temporaryObjects[this.entityId]:a.assertFalse()},e.prototype.describe=function(){return{message:this.name}},e._name="TemporaryObjectEntity",e}(v);e.TemporaryObjectEntity=S;var P=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.qualifiedName="::"+r.name,r}return r(e,t),e.prototype.isStaticallyBound=function(){return!0},Object.defineProperty(e.prototype,"isVirtual",{get:function(){return!1},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.name},e.prototype.nameString=function(){return this.name},e.prototype.mergeInto=function(t){if(Array.isArray(t)){var e=j(t,this.type);if(!e)return t.push(this),this;if(!this.type.sameReturnType(e.type))throw o.CPPError.declaration.func.returnTypesMatch([this.declaration,e.declaration],this.name);if(!i.sameType(this.type,e.type))throw o.CPPError.declaration.type_mismatch(this.declaration,this,e);return e}throw o.CPPError.declaration.type_mismatch(this.declaration,this,t)},e.prototype.link=function(t){if(t&&Array.isArray(t)){var e=c.selectOverloadedDefinition(t,this.type);e?this.type.sameReturnType(e.declaration.type)?this.definition=e:this.declaration.addNote(o.CPPError.link.func.returnTypesMatch(this.declaration,this)):this.declaration.addNote(o.CPPError.link.func.no_matching_overload(this.declaration,this))}else this.declaration.addNote(o.CPPError.link.func.def_not_found(this.declaration,this))},e.prototype.isMain=function(){return"::main"===this.qualifiedName},e.prototype.describe=function(){throw new Error("Method not implemented.")},e}(b);function j(t,e){return t.find(function(t){return e.sameSignature(t.type)})}e.FunctionEntity=P,e.overloadResolution=function(t,e,n){var r=[],a=t.map(function(t){var n=[],a=t.type.paramTypes;return e.length!==a.length?n.push(o.CPPError.param.numParams(t.declaration)):e.forEach(function(e,r){if(e){var u=a[r];if(u.isReferenceType())i.referenceCompatible(e,u.refTo)||n.push(o.CPPError.param.paramReferenceType(t.declaration,e,u));else{var s=new f.AuxiliaryExpression(e,"prvalue"),c=p.standardConversion(s,u);i.sameType(c.type,u)||n.push(o.CPPError.param.paramType(t.declaration,e,u))}}}),0==n.length&&r.push(t),{candidate:t,notes:n}}),u=r[0]?r[0]:void 0;return{candidates:a,viable:r,selected:u}},e.selectOverloadedEntity=j},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=n(4),a=n(0),u=n(5);e.createTranslationUnitContext=function(t,e,n){return Object.assign({},t,{translationUnit:e,contextualScope:n})};var s=function(){function t(e){this.notes=[],this.hasErrors=!1,this.children=[],this.id=t.NEXT_ID++,this.context=e}return t.prototype.attach=function(t){a.asMutable(this.children).push(t),t.onAttach(this)},t.prototype.attachAll=function(t){var e=this;t.forEach(function(t){return e.attach(t)})},t.prototype.setAST=function(t){return a.asMutable(this).ast=t,t.source||a.assertFalse("AST source is undefined. A track() call is likely missing in the grammar."),a.asMutable(this).sourceReference=this.context.translationUnit.getSourceReference(t.source.line,t.source.column,t.source.start,t.source.end),this},t.prototype.explain=function(t,e){return{message:"[No explanation available.]",ignore:!0}},t.prototype.describe=function(t,e){return{message:"[No description available.]",ignore:!1}},t.prototype.addNote=function(t){this.notes.push(t),t.kind===o.NoteKind.ERROR&&(this.hasErrors=!0)},t.prototype.getNearestSourceReference=function(){for(var t=this;!t.sourceReference&&t.parent;)t=t.parent;return t.sourceReference||this.context.translationUnit.getSourceReference(0,0,0,0)},t.NEXT_ID=0,t}();e.CPPConstruct=s;var c=function(){function t(e,n,r){this.observable=new u.Observable(this),this.pushedChildren={},this.isActive=!1,this.isDone=!1,this.pauses={},this.model=e,this.stackType=n,r instanceof t?(a.assert(this.parent!==this,"Code instance may not be its own parent"),this.sim=r.sim,a.assert(r.sim===this.sim,"Runtime construct may not belong to a different simulation than its parent."),this.parent=r,this.parent.addChild(this),r.containingRuntimeFunction&&(this.containingRuntimeFunction=r.containingRuntimeFunction)):this.sim=r,this.stepsTakenAtStart=this.sim.stepsTaken}return t.prototype.stepForward=function(){return this.observable.send("stepForward"),this.stepForwardImpl()},t.prototype.upNext=function(){return this.observable.send("upNext"),this.upNextImpl()},t.prototype.done=function(){this.isDone=!0},t.prototype.setPauseWhenUpNext=function(){this.pauses.upNext={pauseWhenUpNext:!0}},t.prototype.wait=function(){this.observable.send("wait")},t.prototype.pushed=function(){this.isActive=!0,this.observable.send("pushed")},t.prototype.popped=function(){this.isActive=!1,this.observable.send("popped",this)},t.prototype.addChild=function(t){this.pushedChildren[t.model.id]=t,this.observable.send("childPushed",t)},t.prototype.findParentByModel=function(t){for(var e=this.parent;e&&e.model.id!=t.id;)e=e.parent;return e},t.prototype.explain=function(){return this.model.explain(this.sim,this)},t.prototype.describe=function(){return this.model.describe(this.sim,this)},t}();e.RuntimeConstruct=c;var l=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.onAttach=function(t){this.parent=t},e}(s);e.BasicCPPConstruct=l;var f=function(t){function e(e,n){var r=t.call(this,e)||this;return r.addNote(r.note=n(r)),r}return r(e,t),e}(l);e.InvalidConstruct=f;var p=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.temporaryObjects=[],e}return r(e,t),e.prototype.onAttach=function(t){if(this.parent=t,!this.isFullExpression()){var e=this.findFullExpression();this.temporaryObjects.forEach(function(t){e.addTemporaryObject(t)}),this.temporaryObjects.length=0}this.temporaryObjects.length>0&&(this.temporaryDeallocator=new d(this.context,this.temporaryObjects),this.attach(this.temporaryDeallocator))},e.prototype.isFullExpression=function(){return!(this.parent&&this.parent instanceof e)||!this.parent.isFullExpression()},e.prototype.findFullExpression=function(){return this.isFullExpression()?this:this.parent&&this.parent instanceof e?this.parent.findFullExpression():a.assertFalse("failed to find full expression for "+this)},e.prototype.addTemporaryObject=function(t){a.assert(!this.parent,"Temporary objects may not be added to a full expression after it has been attached."),this.temporaryObjects.push(t),t.setOwner(this)},e.prototype.createTemporaryObject=function(t,e){var n=this.findFullExpression(),r=new i.TemporaryObjectEntity(t,this,n,e);return this.temporaryObjects[r.entityId]=r,r},e}(l);e.PotentialFullExpression=p;var h=function(t){function e(e,n,r){var i=t.call(this,e,n,r)||this;return i.temporaryObjects={},i.model.temporaryDeallocator&&(i.temporaryDeallocator=i.model.temporaryDeallocator.createRuntimeConstruct(i)),i.containingFullExpression=i.findFullExpression(),i}return r(e,t),e.prototype.findFullExpression=function(){for(var t=this;t instanceof e&&!t.model.isFullExpression()&&t.parent;)t=t.parent;return t instanceof e?t:a.assertFalse()},e.prototype.done=function(){this.temporaryDeallocator&&this.sim.push(this.temporaryDeallocator),t.prototype.done.call(this)},e}(c);e.RuntimePotentialFullExpression=h;var d=function(t){function e(e,n){var r=t.call(this,e)||this;return r.temporaryObjects=n,r}return r(e,t),e.prototype.createRuntimeConstruct=function(t){return new y(this,t)},e}(l);e.TemporaryDeallocator=d;var y=function(t){function e(e,n){var r=t.call(this,e,"expression",n)||this;return r.index=0,r.justDestructed=!1,r}return r(e,t),e.prototype.upNextImpl=function(){var t=this.model.temporaryObjects.map(function(t){return null});this.index<t.length?(this.sim.memory.deallocateTemporaryObject(this.model.temporaryObjects[this.index].runtimeLookup(this)),++this.index):this.sim.pop()},e.prototype.stepForwardImpl=function(){return!1},e}(c);e.RuntimeTemporaryDeallocator=y;var v=function(t){function e(e,n){var r=t.call(this,e)||this;return r.addNote(o.CPPError.lobster.unsupported_feature(r,n)),r}return r(e,t),e}(l);e.UnsupportedConstruct=v;var m=function(t){function e(e,n){var r=t.call(this,e)||this;return r.globalObjects=n,r}return r(e,t),e.prototype.onAttach=function(t){throw new Error("Method not implemented.")},e.prototype.createRuntimeConstruct=function(t){return new b(this,t)},e}(s);e.GlobalObjectAllocator=m;var b=function(t){function e(e,n){var r=t.call(this,e,"statement",n)||this;return r.index=0,r}return r(e,t),e.prototype.upNextImpl=function(){if(this.index<this.model.globalObjects.length){var t=this.model.globalObjects[this.index];this.sim.memory.allocateStatic(t),t.initializer&&this.sim.push(t.initializer.createRuntimeInitializer(this)),++this.index}else this.sim.pop()},e.prototype.stepForwardImpl=function(){return!1},e}(c);e.RuntimeGlobalObjectAllocator=b},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i,o=n(3),a=n(1);!function(t){t.ERROR="error",t.WARNING="warning",t.STYLE="style",t.OTHER="other"}(i=e.NoteKind||(e.NoteKind={}));var u=function(){return function(t,e,n){this.kind=t,this.id=e,this.message=n}}();e.Note=u;var s=function(t){function e(e,n,r,i){var o=t.call(this,n,r,i)||this;return o.primarySourceReference=e,o.allSourceReferences=[e],o}return r(e,t),e}(u),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(s);e.PreprocessorNote=c;var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(s);e.SyntaxNote=l;var f=function(t){function e(e,n,r,i){var a=t.call(this,n,r,i)||this;return a.constructs=e instanceof o.CPPConstruct?[e]:e,a.primaryConstruct=a.constructs[0],a}return r(e,t),Object.defineProperty(e.prototype,"primarySourceReference",{get:function(){return this.primaryConstruct.getNearestSourceReference()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"allSourceReferences",{get:function(){return this.constructs.map(function(t){return t.getNearestSourceReference()})},enumerable:!0,configurable:!0}),e}(u),p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(f);e.CompilerNote=p;var h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(f);e.LinkerNote=h,e.CPPError={other:{cin_not_supported:function(t){return new p(t,i.ERROR,"other.cin_not_supported","Sorry, <span class='code'>cin</span> is not supported yet :(.")}},class_def:{prev_def:function(t,e,n){return new p(t,i.ERROR,"class_def.prev_def",e+" cannot be defined more than once. Note that Lobster just puts all class names (i.e. types) in one global sort of namespace, so you can't ever have two classes of the same name.")},base_class_type:function(t,e){return new p(t,i.ERROR,"class_def.base_class_type",'I cannot find a suitable class called "'+e+'" to use as a base.')},big_three:function(t,e,n){var r=e.join(" and "),o=n.join(" and ");return new p(t,i.WARNING,"class_def.big_three","This class does not follow the rule of the Big Three. It has a custom implementation for the "+r+" but not for the "+o+'. The compiler will provide implicit versions of the missing ones, but they will almost certainly work "incorrectly" (e.g. make shallow copies or neglect to delete dynamic memory).')},multiple_inheritance:function(t){return new p(t,i.ERROR,"class_def.multiple_inheritance","Sorry, but Lobster does not support multiple inheritance.")},virtual_inheritance:function(t){return new p(t,i.ERROR,"class_def.virtual_inheritance","Sorry, but Lobster does not support virtual inheritance.")},ctor_def:function(t){return new p(t,i.ERROR,"class_def.ctor_def","Sorry, but for now Lobster only supports constructors that are defined inline. (i.e. You need a body.)")},dtor_def:function(t){return new p(t,i.ERROR,"class_def.dtor_def","Sorry, but for now Lobster only supports destructors that are defined inline. (i.e. You need a body.)")}},declaration:{ctor:{copy:{pass_by_value:function(t,e,n){var r=new a.ReferenceType(e,!0);return new p(t,i.ERROR,"declaration.ctor.copy.pass_by_value","A copy constructor cannot take its parameter by value. Because pass-by-value itself uses the copy constructor, this would cause infinite recursion if it were allowed. Try passing by const reference instead! (i.e. "+r.typeString(!1,n,!1)+")")}},init:{no_such_member:function(t,e,n){return new p(t,i.ERROR,"declaration.ctor.init.no_such_member","Class "+e.toString()+" has no member named "+n+".")},improper_member:function(t,e,n){return new p(t,i.ERROR,"declaration.ctor.init.improper_member","A member initializer can only be used for non-static data members. There is no such member named "+n+" in the "+e.className+" class.")},delegating_only:function(t,e,n){return new p(t,i.ERROR,"declaration.ctor.init.delegating_only","If a constructor's initializer list delegates to another constructor from the same class, that must be the only thing it does.")},multiple_base_inits:function(t,e,n){return new p(t,i.ERROR,"declaration.ctor.init.multiple_base_inits","A constructor's initializer list cannot specify more than one base class constructor to use.")}}},dtor:{no_destructor_auto:function(t,e){return new p(t,i.ERROR,"declaration.dtor.no_destructor_auto","The local variable "+e.name+' needs to be destroyed when it "goes out of scope", but I can\'t find a destructor for the '+e.type+" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)")},no_destructor_temporary:function(t,e){return new p(t,i.ERROR,"declaration.dtor.no_destructor_temporary","This expression creates a temporary object of type "+e.type+" that needs to be destroyed, but I can't find a destructor for the "+e.type+" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)")}},prev_def:function(t,e){return new p(t,i.ERROR,"declaration.prev_def",e+" cannot be defined more than once in this scope.")},prev_local:function(t,e){return new p(t,i.ERROR,"declaration.prev_local","This declaration of a local variable "+e+' + " conflicts with an earlier declaration of '+e+" in the same scope.")},func:{return_array:function(t){return new p(t,i.ERROR,"declaration.func.return_array","Cannot declare a function that returns an array.")},return_func:function(t){return new p(t,i.ERROR,"declaration.func.return_func","Cannot declare a function that returns a function. Try returning a function pointer?")},invalid_return_type:function(t,e){return new p(t,i.ERROR,"declaration.func.invalid_return_type","The type "+e.toString()+" is not allowed as a return type.")},some_invalid_parameter_types:function(t){return new p(t,i.ERROR,"declaration.func.some_invalid_parameter_types","This function type contains some invalid parameter types.")},array:function(t){return new p(t,i.ERROR,"declaration.func.array","Cannot declare an array of functions.")},void_param:function(t){return new p(t,i.ERROR,"declaration.func.void_param","Function parameters may not have void type.")},op_member:function(t){return new p(t,i.ERROR,"declaration.func.op_member","This operator must be overloaded as a non-static member function.")},op_subscript_one_param:function(t){return new p(t,i.ERROR,"declaration.func.op_subscript_one_param","An overloaded subscript ([]) operator must take exactly one parameter.")},returnTypesMatch:function(t,e){return new p(t,i.ERROR,"declaration.func.returnTypesMatch","Cannot redeclare function "+e+" with the same parameter types but a different return type.")},mainParams:function(t){return new p(t,i.ERROR,"declaration.func.mainParams","Sorry, but for now command line arguments (and thus parameters for main) are not supported in Lobster.")},no_return_type:function(t){return new p(t,i.ERROR,"declaration.func.no_return_type","You must specify a return type for this function. (Or if you meant it to be a constructor, did you misspell the name?)")},nonCovariantReturnType:function(t,e,n){return new p(t,i.ERROR,"declaration.func.nonCovariantReturnType","Return types in overridden virtual functions must either be the same or covariant (i.e. follow the Liskov Substitution Principle). Both return types must be pointers/references to class types, and the class type in the overriding function must be the same or a derived type. There are also restrictions on the cv-qualifications of the return types. In this case, returning a "+e+" in place of a "+n+" violates covariance.")},definition_non_function_type:function(t){return new p(t,i.ERROR,"declaration.func.definition_non_function_type","This appears to be a function definition, but the declarator does not indicate a function type. Maybe you forgt the parentheses?")}},pointer:{reference:function(t){return new p(t,i.ERROR,"declaration.pointer.reference","Cannot declare a pointer to a reference.")},void:function(t){return new p(t,i.ERROR,"declaration.pointer.void","Sorry, Lobster does not support void pointers.")},invalid_pointed_type:function(t,e){return new p(t,i.ERROR,"declaration.pointer.invalid_pointed_type","A pointer to type "+e.toString()+" is not allowed.")}},ref:{ref:function(t){return new p(t,i.ERROR,"declaration.ref.ref","A reference to a reference is not allowed.")},array:function(t){return new p(t,i.ERROR,"declaration.ref.array","Cannot declare an array of references.")},invalid_referred_type:function(t,e){return new p(t,i.ERROR,"declaration.ref.invalid_referred_type","A reference to type "+e.toString()+" is not allowed.")},memberNotSupported:function(t){return new p(t,i.ERROR,"declaration.ref.memberNotSupported","Sorry, reference members are not supported at the moment.")}},array:{length_required:function(t){return new p(t,i.ERROR,"declaration.array.length_required","Must specify length as an integer literal when declaring an array. (Sorry, but Lobster requires this for now even if it could hypothetically be deduced from the initializer.)")},zero_length:function(t){return new p(t,i.ERROR,"declaration.array.zero_length","Although technically allowed in C++, arrays with zero length are prohibited in Lobster.")},multidimensional_arrays_unsupported:function(t){return new p(t,i.ERROR,"declaration.array.multidimensional_arrays_unsupported","Sorry, Lobster currently doesn't support multidimensional arrays.")},invalid_element_type:function(t,e){return new p(t,i.ERROR,"declaration.array.invalid_element_type","The type "+e.toString()+" is not allowed as an array parameter.")}},init:{scalar_args:function(t,e){return new p(t,i.ERROR,"declaration.init.scalar_args","Invalid initialization of scalar type "+e+" from multiple values.")},array_string_literal:function(t,e){return new p(t,i.ERROR,"declaration.init.array_string_literal","Cannot direct/copy initialize an array of type "+e+". The only allowed direct/copy initialization of an array is to initialize an array of char from a string literal.")},convert:function(t,e,n){return new p(t,i.ERROR,"declaration.init.convert","Invalid conversion from "+e+" to "+n+".")},list_narrowing:function(t,e,n){return new p(t,i.ERROR,"declaration.init.list_narrowing","Implicit narrowing conversion from "+e+" to "+n+" is not allowed in initializer list.")},list_array:function(t){return new p(t,i.ERROR,"declaration.init.list_array","Initializer list syntax only supported for arrays.")},list_length:function(t,e){return new p(t,i.ERROR,"declaration.init.list_length","Length of initializer list must match length of array ("+e+").")},matching_constructor:function(t,e,n){var r=e.describe();return new p(t,i.ERROR,"declaration.init.matching_constructor","Trying to initialize "+(r.name||r.message)+", but unable to find a matching constructor definition for the "+e.type.className+" class using the given arguments ("+n.join(", ")+").")},no_default_constructor:function(t,e){var n=e.describe();return new p(t,i.ERROR,"declaration.init.no_default_constructor","This calls for the default initialization of "+(n.name||n.message)+", but I can't find a default constructor (i.e. taking no arguments) for the "+e.type.className+" class. The compiler usually provides an implicit one for you, but not if you have declared other constructors (under the assumption you would want to use one of those).")},referencePrvalueConst:function(t){return new p(t,i.ERROR,"declaration.init.referencePrvalueConst","You cannot bind a non-const reference to a prvalue (e.g. a temporary object).")},referenceType:function(t,e,n){return new p(t,i.ERROR,"declaration.init.referenceType","A reference (of type "+n+") cannot be bound to an object of a different type ("+e+").")},referenceBind:function(t){return new p(t,i.ERROR,"declaration.init.referenceBind","References must be bound to something when they are declared.")},referenceBindMultiple:function(t){return new p(t,i.ERROR,"declaration.init.referenceBindMultiple","References cannot be bound to multiple objects.")},stringLiteralLength:function(t,e,n){return n===e-1?new p(t,i.ERROR,"declaration.init.stringLiteralLength","Your array is one element too short. Remember, when initializing a character array (i.e. a c-string) with a string literal, an extra \\0 (null character) is automatically appended."):n>e?new p(t,i.WARNING,"declaration.init.stringLiteralLength","Your array (length "+n+") is longer than it needs to be to hold the string literal (length "+e+"). The remaining character elements will be zero-initialized."):new p(t,i.ERROR,"declaration.init.stringLiteralLength","The string literal used for initialization (length "+e+") cannot fit in the declared array (length "+n+").")},uninitialized:function(t,e){return new p(t,i.WARNING,"declaration.init.uninitialized",(e.describe().name||e.describe().message)+" is uninitialized, so it will start with whatever value happens to be in memory (i.e. memory junk). If you try to use this variable before initializing it, who knows what will happen!")},array_default_init:function(t){return new p(t,i.WARNING,"declaration.init.array_default_init","Note: Default initialization of an array requires default initialization of each of its elements.")},array_direct_init:function(t){return new p(t,i.OTHER,"declaration.init.array_direct_init","Note: initialization of an array requires initialization of each of its elements.")}},storage:{once:function(t,e){return new p(t,i.ERROR,"declaration.storage.once","Storage specifier ("+e+") may only be used once.")},incompatible:function(t,e){return new p(t,i.ERROR,"declaration.storage.incompatible","Storage specifiers ( "+e.join(" ")+") are incompatible with each other.")}},typeSpecifier:{once:function(t,e){return new p(t,i.ERROR,"declaration.typeSpecifier.once","Type specifier ("+e+") may only be used once.")},one_type:function(t,e){return new p(t,i.ERROR,"declaration.typeSpecifier.one_type","Type specifier must only specify one type. Found: "+e+".")},signed_unsigned:function(t){return new p(t,i.ERROR,"type.signed_unsigned","Type specifier may not indicate both signed and unsigned.")}},friend:{outside_class:function(t){return new p(t,i.ERROR,"declaration.friend.outside_class","Friend declarations are not allowed here.")},virtual_prohibited:function(t){return new p(t,i.ERROR,"declaration.friend.virtual_prohibited","A virtual function may not be declared as a friend.")}},parameter:{storage_prohibited:function(t){return new p(t,i.ERROR,"declaration.parameter.storage_prohibited","Storage specifiers are not permitted in parameter declarations.")},virtual_prohibited:function(t){return new p(t,i.ERROR,"declaration.friend.virtual_prohibited","A virtual function may not be declared as a friend.")}},unknown_type:function(t){return new p(t,i.ERROR,"declaration.unknown_type","Unable to determine the type declared here.")},void_prohibited:function(t){return new p(t,i.ERROR,"declaration.void_prohibited","The variable "+(t.declarator.name||"here")+" may not be declared as type void.")},virtual_prohibited:function(t){return new p(t,i.ERROR,"declaration.virtual_prohibited","The virtual keyword may only be used in member function declarations.")},type_mismatch:function(t,e,n){return new p(t,i.ERROR,"declaration.type_mismatch","Type mismatch. This declaration for "+e.name+" has type "+e.type+", but a previous declaration of "+n.name+" has type "+n.type)}},type:{unsigned_not_supported:function(t){return new p(t,i.WARNING,"type.unsigned_not_supported","Sorry, unsigned integral types are not supported yet. It will just be treated like a normal int.")},storage:function(t){return new p(t,i.WARNING,"type.storage","Because of the way Lobster works, storage class specifiers (e.g. static) have no effect.")},typeNotFound:function(t,e){return new p(t,i.ERROR,"type.typeNotFound","Oops, this is embarassing... I feel like "+e+" should be a type, but I can't figure out what it is.")}},expr:{array_operand:function(t,e){return new p(t,i.ERROR,"expr.array_operand","Type "+e+" cannot be subscripted.")},array_offset:function(t,e){return new p(t,i.ERROR,"expr.array_offset","Invalid type ("+e+") for array subscript offset.")},assignment:{lhs_lvalue:function(t){return new p(t,i.ERROR,"expr.assignment.lhs_lvalue","Lvalue required as left operand of assignment.")},lhs_const:function(t){return new p(t,i.ERROR,"expr.assignment.lhs_const","Left hand side of assignment is not modifiable.")},convert:function(t,e,n){return new p(t,i.ERROR,"expr.assignment.convert","Cannot convert "+n.type+" to "+e.type+" in assignment.")},self:function(t,e){return new p(t,i.WARNING,"expr.assignment.self","Self assignment from "+(e.describe().name||e.describe().message)+" to itself.")}},binary:{arithmetic_operands:function(t,e,n,r){return new p(t,i.ERROR,"expr.binary.arithmetic_operands","Invalid operand types ("+n.type+", "+r.type+") for operator "+e+", which requires operands of arithmetic type.")},integral_operands:function(t,e,n,r){return new p(t,i.ERROR,"expr.binary.integral_operands","Invalid operand types ("+n.type+", "+r.type+") for operator "+e+", which requires operands of integral type.")},boolean_operand:function(t,e,n){return new p(t,i.ERROR,"expr.binary.boolean_operand","Invalid operand type ("+n.type+") for operator "+e+", which requires operands that may be converted to boolean type.")},arithmetic_common_type:function(t,e,n,r){return new p(t,i.ERROR,"expr.binary.arithmetic_common_type","Performing the usual arithmetic conversions yielded operands of types ("+n.type+", "+r.type+") for operator "+e+", but a common arithmetic type could not be found.")}},unary:{},delete:{no_destructor:function(t,e){return new p(t,i.ERROR,"expr.delete.no_destructor","I can't find a destructor for the "+e+" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)")},pointer:function(t,e){return new p(t,i.ERROR,"expr.delete.pointer","The delete operator requires an operand of pointer type. (Current operand is "+e+" ).")},pointerToObjectType:function(t,e){return new p(t,i.ERROR,"expr.delete.pointerToObjectType","The delete operator cannot be used with a pointer to a non-object type (e.g. void pointers, function pointers). (Current operand is "+e+" ).")}},dereference:{pointer:function(t,e){return new p(t,i.ERROR,"expr.dereference.pointer","The dereference operator (*) requires an operand of pointer type. (Current operand is "+e+" ).")},pointerToObjectType:function(t,e){return new p(t,i.ERROR,"expr.dereference.pointerToObjectType","Pointers to a non-object, non-function type (e.g. void pointers) cannot be dereferenced. (Current operand is "+e+" ).")}},dot:{class_type:function(t){return new p(t,i.ERROR,"expr.dot.class_type","The dot operator can only be used to access members of an operand with class type.")},no_such_member:function(t,e,n){return new p(t,i.ERROR,"expr.dot.no_such_member","Operand of type "+e+" has no member named "+n+".")},memberLookup:function(t,e,n){return new p(t,i.ERROR,"expr.dot.memberLookup","Member lookup for "+n+" in class "+e+" failed...")}},arrow:{class_pointer_type:function(t){return new p(t,i.ERROR,"expr.arrow.class_pointer_type","The arrow operator can only be used to access members of an operand with pointer-to-class type.")},no_such_member:function(t,e,n){return new p(t,i.ERROR,"expr.arrow.no_such_member","Operand of type "+e+" has no member named "+n+".")},memberLookup:function(t,e,n){return new p(t,i.ERROR,"expr.arrow.memberLookup","Member lookup for "+n+" in class "+e+" failed...")}},invalid_operand:function(t,e,n){return new p(t,i.ERROR,"expr.invalid_operand","Invalid operand type ("+n.type+") for operator "+e+".")},lvalue_operand:function(t,e){return new p(t,i.ERROR,"expr.lvalue_operand","The "+e+" operator requires an lvalue operand.")},invalid_binary_operands:function(t,e,n,r){return n.type.isPointerType()&&a.sameType(n.type.ptrTo,r.type)?new p(t,i.ERROR,"expr.invalid_binary_operands","The types of the operands used for the "+e+" operator aren't quite compatible. The one on the right is "+r.type.englishString(!1)+", but the left is a pointer to that type. Think about whether you want to compare pointers (addresses) or the objects they point to."):r.type.isPointerType()&&a.sameType(r.type.ptrTo,n.type)?new p(t,i.ERROR,"expr.invalid_binary_operands","The types of the operands used for the "+e+" operator aren't quite compatible. The one on the left is "+n.type.englishString(!1)+", but the right is a pointer to that type.  Think about whether you want to compare pointers (addresses) or the objects they point to."):new p(t,i.ERROR,"expr.invalid_binary_operands","Invalid operand types ("+n.type+", "+r.type+") for operator "+e+".")},logicalNot:{operand_bool:function(t,e){return new p(t,i.ERROR,"expr.logicalNot.operand_bool","Expression of type ("+e.type+") cannot be converted to boolean (as required for the operand of logical not).")}},addressOf:{lvalue_required:function(t){return new p(t,i.ERROR,"expr.addressOf.lvalue_required","Operand for address-of operator (&) must be an lvalue.")}},ternary:{condition_bool:function(t,e){return new p(t,i.ERROR,"expr.ternary.condition_bool","Expression of type ("+e+") cannot be converted to boolean condition.")},sameValueCategory:function(t){return new p(t,i.ERROR,"expr.ternary.sameValueCategory","The second and third operands of the ternary operator must yield a common value category.")}},unaryPlus:{operand:function(t){return new p(t,i.ERROR,"expr.unaryPlus.operand","The unary plus operator (+) requires an operand of arithmetic or pointer type.")}},unaryMinus:{operand:function(t){return new p(t,i.ERROR,"expr.unaryMinus.operand","The unary minus operator (-) requires an operand of arithmetic type.")}},functionCall:{main:function(t){return new p(t,i.ERROR,"expr.functionCall.main","You can't explicitly call main.")},numParams:function(t){return new p(t,i.ERROR,"expr.functionCall.numParams","Improper number of arguments for this function call.")},invalid_operand_expression:function(t,e){return new p(t,i.ERROR,"expr.functionCall.invalid_operand_expression","The expression "+e+" cannot be called as a function.")},operand:function(t,e){return new p(t,i.ERROR,"expr.functionCall.operand","Operand of type "+e.type+" cannot be called as a function.")},paramType:function(t,e,n){return new p(t,i.ERROR,"expr.functionCall.paramType","Cannot convert "+e+" to "+n+" in function call parameter.")},paramReferenceType:function(t,e,n){return new p(t,i.ERROR,"expr.functionCall.paramReferenceType","The given argument (of type "+e+") cannot be bound to a reference parameter of a different type ("+n+").")},paramReferenceLvalue:function(t){return new p(t,i.ERROR,"expr.functionCall.paramReferenceLvalue","For now, you cannot bind a non-lvalue as a reference parameter in Lobster. (i.e. you have to bind a variable)")},not_defined:function(t,e,n){return new p(t,i.ERROR,"expr.functionCall.not_defined","A function call operator with parameters of types ("+n.map(function(t){return t.toString()}).join(", ")+") for the class type "+e+" has not been defined.")}},thisExpr:{memberFunc:function(t){return new p(t,i.ERROR,"expr.thisExpr.memberFunc","You may only use the </span class='code'>this</span> keyword in non-static member functions.")}}},iden:{ambiguous:function(t,e){return new p(t,i.ERROR,"iden.ambiguous",'"'+e+'" is ambiguous. (There is not enough contextual type information for name lookup to figure out which entity this identifier refers to.)')},no_match:function(t,e){return new p(t,i.ERROR,"iden.no_match",'No matching function found for call to "'+e+'" with these parameter types.')},keyword:function(t,e){return new p(t,i.ERROR,"iden.keyword",'"'+e+'" is a C++ keyword and cannot be used as an identifier.')},alt_op:function(t,e){return new p(t,i.ERROR,"iden.alt_op",'"'+e+'" is a C++ operator and cannot be used as an identifier.')}},param:{numParams:function(t){return new p(t,i.ERROR,"param.numParams","Improper number of arguments.")},paramType:function(t,e,n){return new p(t,i.ERROR,"param.paramType","Cannot convert "+e+" to a parameter of type "+n+".")},paramReferenceType:function(t,e,n){return new p(t,i.ERROR,"param.paramReferenceType","The given argument (of type "+e+") cannot be bound to a reference parameter of a different type ("+n+").")},paramReferenceLvalue:function(t){return new p(t,i.ERROR,"param.paramReferenceLvalue","For now, you cannot bind a non-lvalue as a reference parameter in Lobster. (i.e. you have to bind a variable)")},thisConst:function(t,e){return new p(t,i.ERROR,"param.thisConst","A non-const member function cannot be called on a const instance of the "+e+" class.")}},stmt:{function_definition_prohibited:function(t){return new p(t,i.ERROR,"stmt.function_definition_prohibited","A function definition is prohibited here (i.e. inside a statement).")},selection:{condition_bool:function(t,e){return new p(e,i.ERROR,"stmt.selection.condition_bool","Expression of type ("+e.type+") cannot be converted to boolean condition.")}},iteration:{condition_bool:function(t,e){return new p(e,i.ERROR,"stmt.iteration.condition_bool","Expression of type ("+e.type+") cannot be converted to boolean condition.")}},breakStatement:{location:function(t){return new p(t,i.ERROR,"stmt.breakStatement.location","Break statements may only occur inside loops or case statements.")}},returnStatement:{empty:function(t){return new p(t,i.ERROR,"stmt.returnStatement.empty","A return statement without an expression is only allowed in void functions.")},exprVoid:function(t){return new p(t,i.ERROR,"stmt.returnStatement.exprVoid","A return statement with an expression of non-void type is only allowed in a non-void function.")},convert:function(t,e,n){return new p(t,i.ERROR,"stmt.returnStatement.convert","Cannot convert "+e+" to return type of "+n+" in return statement.")}}},link:{library_unsupported:function(t,e){return new h(t,i.ERROR,"link.library_unsupported","I'm sorry, but this function ("+e+") is a part of the standard library that isn't currently supported.")},multiple_def:function(t,e){return new h(t,i.ERROR,"link.multiple_def","Multiple definitions found for "+e+".")},type_mismatch:function(t,e,n){return new h(t,i.ERROR,"link.type_mismatch","Multiple declarations found for "+e.name+", but with different types.")},class_same_tokens:function(t,e,n){return new h(t,i.ERROR,"link.class_same_tokens","Multiple class definitions are ok if they are EXACTLY the same in the source code. However, the multiple definitions found for "+e.name+" do not match exactly.")},func:{def_not_found:function(t,e){return new h(t,i.ERROR,"link.func.def_not_found","Cannot find definition for function "+e.name+". That is, the function is declared and I know what it is, but I can't find the actual code that implements it.")},no_matching_overload:function(t,e){return new h(t,i.ERROR,"link.func.no_matching_overload","Although some definitions for a function named "+e.name+" exist, I can't find one with the right signature to match this declaration.")},returnTypesMatch:function(t,e){return new h(t,i.ERROR,"link.func.returnTypesMatch","This declaration of the function "+e.name+" has a different return type than its definition.")}},def_not_found:function(t,e){return new h(t,i.ERROR,"link.def_not_found","Cannot find definition for object "+e.name+". (It is declared, so I know it's a variable and what type it is, but it's never defined anywhere.)")}},preprocess:{recursiveInclude:function(t){return new c(t,i.WARNING,"preprocess.recursiveInclude","Recursive #include detected. (i.e. A file #included itself, or #included a different file that then #includes the original, etc.)")}},lobster:{unsupported_feature:function(t,e){return new p(t,i.ERROR,"lobster.unsupported_feature","Sorry, you have used a C++ feature ("+e+") that is not currently supported in Lobster.")},referencePrvalue:function(t){return new p(t,i.ERROR,"lobster.referencePrvalue","Sorry, Lobster does not yet support binding references (even if they are reference-to-const) to prvalues (e.g. temporary objects).")},ternarySameType:function(t,e,n){return new p(t,i.ERROR,"lobster.ternarySameType","Lobster's ternary operator requires second and third operands of the same type. The given operands have types "+e+" and "+n+".")},ternaryNoVoid:function(t){return new p(t,i.ERROR,"lobster.ternaryNoVoid","Lobster's ternary operator does not allow void operands.")}}}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(53)),o=n(0);function a(t,e){var n=t._act[e.category];n?n.call(t,e):t._act._default?t._act._default.call(t,e):o.assert(!1)}e.addListener=function(t,e,n){t.observable.addListener(e,n)},e.messageResponse=function(t){return function(e,n,r){e._act||(e._act={}),e._act[t||n]=e[n]}};var u=function(){function t(t){this.universalObservers=[],this.observers={},this.source=t}return t.prototype.send=function(t,e){if(!this.source.silent){var n={category:t,data:e,source:this.source},r=this.observers[n.category];if(r)for(var i=0;i<r.length;++i)a(r[i],n);for(i=0;i<this.universalObservers.length;++i)a(this.universalObservers[i],n)}},t.prototype.addListener=function(t,e){if(e)if(Array.isArray(e))for(var n=0;n<e.length;++n)this.addListener(t,e[n]);else this.observers[e]||(this.observers[e]=[]),this.observers[e].push(t),this.listenerAdded(t,e);else this.universalObservers.push(t),this.listenerAdded(t);return this},t.prototype.removeListener=function(t,e){if(e){var n=this.observers[e];n&&i.default(n,t),this.listenerRemoved(t,e)}else{for(var r in this.observers)this.removeListener(t,r);i.default(this.universalObservers,t),this.listenerRemoved(t)}return this},t.prototype.listenerAdded=function(t,e){},t.prototype.listenerRemoved=function(t,e){},t}();e.Observable=u},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),o=n(2),a=n(1),u=n(0),s=n(11),c=n(21);e.createFunctionContext=function(t,e){return Object.assign({},t,{containingFunction:e,functionLocals:new f})};var l,f=function(){function t(){this.localObjects=[],this.localReferences=[],this.localVariablesByEntityId={}}return t.prototype.registerLocalVariable=function(t){u.assert(!this.localVariablesByEntityId[t.entityId]),this.localVariablesByEntityId[t.entityId]=t,t instanceof o.AutoEntity?u.asMutable(this.localObjects).push(t):u.asMutable(this.localReferences).push(t)},t}();e.FunctionLocals=f,l||(l={});var p=function(t){function e(e,n,r){var i=t.call(this,e,"function",n)||this;return i.hasControl=!1,n instanceof v&&(i.caller=n),i.receiver=r,i.body=i.model.body.createRuntimeStatement(i),i}return r(e,t),e.prototype.pushStackFrame=function(){this.stackFrame=this.sim.memory.stack.pushFrame(this)},e.prototype.setReturnObject=function(t){u.assert(!this.returnObject),this.returnObject=t},e.prototype.gainControl=function(){this.hasControl=!0,this.observable.send("gainControl")},e.prototype.loseControl=function(){this.hasControl=!0,this.observable.send("loseControl")},e.prototype.stepForwardImpl=function(){},e.prototype.upNextImpl=function(){this.body.isDone?this.sim.pop():this.sim.push(this.body)},e}(i.RuntimeConstruct);e.RuntimeFunction=p;var h=function(t){function e(e,n,r,i){var u=t.call(this,e)||this;u.func=n,u.args=c.clone(r),u.receiver=i,u.argInitializers=r.map(function(t,n){var r=u.func.type.paramTypes[n];return r.isReferenceType()?s.CopyInitializer.create(e,new o.PassByReferenceParameterEntity(u.func,r.refTo,n),[t]):s.CopyInitializer.create(e,new o.PassByValueParameterEntity(u.func,r,n),[t])});var l=u.func.type.returnType;return l instanceof a.VoidType||l instanceof a.ReferenceType||(u.returnByValueTarget=u.createTemporaryObject(l,(u.func.name||"unknown")+"() [return]")),u.context.translationUnit.registerFunctionCall(u),u}return r(e,t),e.prototype.createRuntimeFunctionCall=function(t){return new v(this,t)},e}(i.PotentialFullExpression);e.FunctionCall=h;var d=0,y=2,v=function(t){function e(e,n){var r=t.call(this,e,"call",n)||this;r.index=d;var i=r.model.func.definition;(r.argInitializers=r.model.argInitializers.map(function(t){return t.createRuntimeInitializer(r)}),r.receiver=r.model.receiver&&r.model.receiver.runtimeLookup(r),r.calledFunction=i.createRuntimeFunction(r,r.receiver),r.model.returnByValueTarget)&&r.calledFunction.setReturnObject(r.model.returnByValueTarget.objectInstance(r));return r.index=y,r}return r(e,t),e.prototype.upNextImpl=function(){if(1===this.index)for(var t=this.argInitializers.length-1;t>=0;--t)this.sim.push(this.argInitializers[t]);else 2===this.index&&(this.calledFunction.loseControl(),this.containingRuntimeFunction.gainControl(),this.done(),this.sim.pop())},e.prototype.stepForwardImpl=function(){this.index===d?(this.calledFunction.pushStackFrame(),this.index=1):this.index===y&&(this.containingRuntimeFunction.loseControl(),this.sim.push(this.calledFunction),this.calledFunction.gainControl(),this.receiver&&this.receiver.callReceived(),this.observable.send("called",this.calledFunction),this.index=2)},e}(i.RuntimePotentialFullExpression);e.RuntimeFunctionCall=v},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),o=n(5),a=n(9),u=n(1),s=r(n(22)),c=n(2),l=function(){function t(t,e,n){void 0===n&&(n=!0),this.rawValue=t,this.type=e,this._isValid=n}return Object.defineProperty(t.prototype,"isValid",{get:function(){return this._isValid&&this.type.isValueValid(this.rawValue)},enumerable:!0,configurable:!0}),t.prototype.clone=function(e){return void 0===e&&(e=this.rawValue),new t(e,this.type,this.isValid)},t.prototype.invalidated=function(){return new t(this.rawValue,this.type,!1)},t.prototype.equals=function(e){return new t(this.rawValue===e.rawValue?1:0,new u.Bool,this.isValid&&e.isValid)},t.prototype.rawEquals=function(t){return this.rawValue===t},t.prototype.combine=function(e,n){return i.assert(u.sameType(this.type,e.type)),new t(n(this.rawValue,e.rawValue),this.type,this.isValid&&e.isValid)},t.prototype.pointerOffset=function(e,n){return void 0===n&&(n=!1),new t(n?this.rawValue-this.type.ptrTo.size*e.rawValue:this.rawValue+this.type.ptrTo.size*e.rawValue,this.type,this.isValid&&e.isValid)},t.prototype.pointerDifference=function(e){return new t((this.rawValue-e.rawValue)/this.type.ptrTo.size,new u.Int,this.isValid&&e.isValid)},t.prototype.compare=function(e,n){return i.assert(u.sameType(this.type,e.type)),new t(n(this.rawValue,e.rawValue)?1:0,new u.Bool,this.isValid&&e.isValid)},t.prototype.modify=function(e){return new t(e(this.rawValue),this.type,this.isValid)},t.prototype.toString=function(){return this.valueString()},t.prototype.valueString=function(){return this.type.valueToString(this.rawValue)},t.prototype.valueToOstreamString=function(){return this.type.valueToOstreamString(this.rawValue)},t.prototype.setRawValue=function(t){this.rawValue=t,this.isValid=this.isValid&&this.type.isValueValid(this.rawValue)},t.prototype.describe=function(){return{message:this.valueString()}},t._name="Value",t}();e.Value=l;var f=function(){function t(t,e,n){this.observable=new o.Observable(this),this.capacity=t||1e4,this.staticCapacity=e||Math.floor(this.capacity/10),this.stackCapacity=n||Math.floor((this.capacity-this.staticCapacity)/2),this.heapCapacity=this.capacity-this.staticCapacity-this.stackCapacity,this.staticStart=0,this.staticEnd=this.staticStart+this.staticCapacity,this.stackStart=this.staticEnd,this.stackEnd=this.stackStart+this.stackCapacity,this.heapStart=this.stackEnd,this.heapEnd=this.heapStart+this.heapCapacity,this.temporaryStart=this.heapEnd+100,this.temporaryCapacity=1e4,this.temporaryEnd=this.temporaryStart+this.temporaryCapacity,i.assert(this.staticCapacity<this.capacity&&this.stackCapacity<this.capacity&&this.heapCapacity<this.capacity),i.assert(this.heapEnd==this.capacity),this.reset()}return t.prototype.reset=function(){this.bytes=new Array(this.capacity+this.temporaryCapacity);for(var t=0;t<this.capacity+this.temporaryCapacity;++t)this.bytes[t]=Math.floor(100*Math.random());this.objects={},this.stringLiteralMap={},this.staticTop=this.staticStart+4,this.staticObjects={},this.temporaryBottom=this.temporaryStart,this.stack=new p(this,this.staticEnd),this.heap=new h(this,this.heapEnd),this.temporaryObjects={},this.observable.send("reset")},t.prototype.getByte=function(t){return this.bytes[t]},t.prototype.readByte=function(t){return this.bytes[t]},t.prototype.getBytes=function(t,e){return this.bytes.slice(t,t+e)},t.prototype.readBytes=function(t,e){var n=t+e;return this.bytes.slice(t,n)},t.prototype.setByte=function(t,e){this.bytes[t]=e},t.prototype.writeByte=function(t,e){this.bytes[t]=e},t.prototype.setBytes=function(t,e){for(var n=0;n<e.length;++n)this.bytes[t+n]=e[n]},t.prototype.writeBytes=function(t,e){for(var n=0;n<e.length;++n)this.bytes[t+n]=e[n]},t.prototype.dereference=function(t){i.assert(t.type.isObjectPointer());var e=t.rawValue;if(t.type instanceof u.ArrayPointer)return t.type.arrayObject.getArrayElemSubobjectByAddress(e);if(t.type instanceof u.ObjectPointer&&t.type.isValueValid(e))return t.type.pointedObject;var n=this.objects[e];return n&&(u.similarType(n.type,t.type.ptrTo)||u.subType(n.type,t.type.ptrTo))?n:new a.InvalidObject(t.type,this,e)},t.prototype.allocateObject=function(t){this.objects[t.address]=t},t.prototype.killObject=function(t,e){var n=this.objects[t];n&&n.isAlive&&n.kill(e)},t.prototype.allocateStringLiteral=function(t){var e=t.str;if(!this.stringLiteralMap[e]){var n=t.objectInstance(this,this.staticTop);this.allocateObject(n),this.stringLiteralMap[e]=n,u.Char.jsStringToNullTerminatedCharArray(e).forEach(function(t,e){n.getArrayElemSubobject(e).setValue(new l(t,u.Char.CHAR))}),this.staticTop+=n.size}},t.prototype.getStringLiteral=function(t){return this.stringLiteralMap[t]},t.prototype.allocateStatic=function(t){var e=new a.StaticObject(t,t.declaredEntity.type,this,this.staticTop);this.allocateObject(e),this.staticTop+=e.size,this.staticObjects[t.declaredEntity.qualifiedName]=e},t.prototype.staticLookup=function(t){return this.staticObjects[t.qualifiedName]},t.prototype.allocateTemporaryObject=function(t){var e=new a.TemporaryObject(t.type,this,this.temporaryBottom,t.name);return this.allocateObject(e),this.temporaryBottom+=t.type.size,this.temporaryObjects[t.entityId]=e,this.observable.send("temporaryObjectAllocated",e),e},t.prototype.deallocateTemporaryObject=function(t,e){this.killObject(t.address,e),delete this.temporaryObjects[t.address],this.observable.send("temporaryObjectDeallocated",t)},t._name="Memory",t}();e.Memory=f;var p=function(){function t(t,e){this.observable=new o.Observable(this),this.memory=t,this.start=e,this.top=e,this.frames=[]}return t.prototype.topFrame=function(){return s.default(this.frames)},t.prototype.pushFrame=function(t){var e=new d(this.memory,this.top,t);return this.top+=e.size,this.frames.push(e),this.memory.observable.send("framePushed",e),e},t.prototype.popFrame=function(t){var e=this.frames.pop();if(!e)return i.assertFalse();e.pop(t),this.top-=e.size,this.memory.observable.send("framePopped",e)},t.prototype.toString=function(){for(var t='<ul class="stackFrames">',e=0;e<this.frames.length;++e){t+="<li>"+this.frames[e].toString()+"</li>"}return t+="</ul>"},t._name="MemoryStack",t}(),h=function(){function t(t,e){this.observable=new o.Observable(this),this.memory=t,this.end=e,this.bottom=e,this.objectMap={}}return t._name="MemoryHeap",t}(),d=function(){function t(t,e,n){var r=this;this.observable=new o.Observable(this),this.localObjectsByEntityId={},this.localReferencesByEntityId={},this.memory=t,this.start=e,this.func=n,this.size=0;var i=this.start;n.model.context.functionLocals.localObjects.forEach(function(e){if(e instanceof c.AutoEntity){var n=new a.AutoObject(e.definition,e.type,t,i);r.localObjectsByEntityId[e.entityId]=n,i+=n.size,r.size+=n.size}}),this.end=this.start+this.size}return t.prototype.toString=function(){var t="";for(var e in this.localObjectsByEntityId){t+="<span>"+this.localObjectsByEntityId[e]+"</span>\n"}return t},t.prototype.getLocalObject=function(t){return this.localObjectsByEntityId[t.entityId]},t.prototype.referenceLookup=function(t){return this.localReferencesByEntityId[t.entityId]||i.assertFalse("Attempt to look up referred object before reference was bound.")},t.prototype.bindReference=function(t,e){this.localReferencesByEntityId[t.entityId]=e},t.prototype.pop=function(t){for(var e in this.localObjectsByEntityId){var n=this.localObjectsByEntityId[e];this.memory.killObject(n.address,t)}},t._name="MemoryFrame",t}();e.MemoryFrame=d},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(23),o=n(1),a=n(3),u=n(4),s=n(2),c=n(7),l=n(0),f=n(6),p=n(10),h=n(13);e.readValueWithAlert=function(t,e){var n=t.readValue();if(!n.isValid){var r=t.describe(),o="The value you just got out of "+(r.name||r.message)+" isn't valid. It might be uninitialized or it could have come from a dead object.";0===n.rawValue&&(o+="\n\n(Note: The value just happens to be zero. Don't be fooled! Uninitialized memory isn't guaranteed to be zero.)"),e.eventOccurred(i.SimulationEvent.UNDEFINED_BEHAVIOR,o,!0)}return n};var d={comma_expression:function(t,e){return R.createFromAST(t,e)},ternary_expression:function(t,e){return x.createFromAST(t,e)},assignment_expression:function(t,e){return A.createFromAST(t,e)},compound_assignment_expression:function(t,e){return new g(e,"compound assignment").setAST(t)},arithmetic_binary_operator_expression:function(t,e){return Q.createFromAST(t,e)},relational_binary_operator_expression:function(t,e){return et.createFromAST(t,e)},logical_binary_operator_expression:function(t,e){return rt.createFromAST(t,e)},pointer_to_member_expression:function(t,e){return new g(e,"pointer-to-member").setAST(t)},c_style_cast_expression:function(t,e){return new g(e,"c-style cast").setAST(t)},prefix_increment_expression:function(t,e){return new g(e,"prefix increment").setAST(t)},prefix_decrement_expression:function(t,e){return new g(e,"prefix decrement").setAST(t)},dereference_expression:function(t,e){return new g(e,"dereference").setAST(t)},address_of_expression:function(t,e){return new g(e,"address-of").setAST(t)},unary_plus_expression:function(t,e){return new g(e,"unary plus").setAST(t)},unary_minus_expression:function(t,e){return new g(e,"unary minus").setAST(t)},logical_not_expression:function(t,e){return new g(e,"logical not").setAST(t)},bitwise_not_expression:function(t,e){return new g(e,"bitwise not").setAST(t)},sizeof_expression:function(t,e){return new g(e,"sizeof").setAST(t)},sizeof_type_expression:function(t,e){return new g(e,"sizeof (type)").setAST(t)},new_expression:function(t,e){return new g(e,"new").setAST(t)},delete_expression:function(t,e){return new g(e,"delete").setAST(t)},delete_array_expression:function(t,e){return new g(e,"delete[]").setAST(t)},static_cast_expression:function(t,e){return new g(e,"static cast").setAST(t)},dynamic_cast_expression:function(t,e){return new g(e,"dynamic cast").setAST(t)},reinterpret_cast_expression:function(t,e){return new g(e,"reinterpret cast").setAST(t)},const_cast_expression:function(t,e){return new g(e,"const cast").setAST(t)},subscript_expression:function(t,e){return new g(e,"subscript").setAST(t)},function_call_expression:function(t,e){return ot.createFromAST(t,e)},dot_expression:function(t,e){return new g(e,"dot operator").setAST(t)},arrow_expression:function(t,e){return new g(e,"arrow operator").setAST(t)},postfix_increment_expression:function(t,e){return new g(e,"postfix increment").setAST(t)},postfix_decrement_expression:function(t,e){return new g(e,"postfix decrement").setAST(t)},construct_expression:function(t,e){return new g(e,"construct expression").setAST(t)},identifier_expression:function(t,e){return st.createFromAST(t,e)},this_expression:function(t,e){return new g(e,"this pointer").setAST(t)},numeric_literal:function(t,e){return dt.createFromAST(t,e)}};function y(t,e){return d[t.construct_type](t,e)}function v(t,e){return Object.assign({},t,{contextualParameterTypes:e})}e.createExpressionFromAST=y,e.createExpressionContext=v;var m=function(t){function e(e){var n=t.call(this,e)||this;return n.conversionLength=0,n}return r(e,t),e.prototype.isWellTyped=function(){return!!this.type&&!!this.valueCategory},e.prototype.isTyped=function(t){return!!this.type&&this.type.isType(t)},e.prototype.isObjectTyped=function(){return!!this.type&&this.type.isObjectType()},e.prototype.isAtomicTyped=function(){return!!this.type&&this.type.isAtomicType()},e.prototype.isArithmeticTyped=function(){return!!this.type&&this.type.isArithmeticType()},e.prototype.isIntegralTyped=function(){return!!this.type&&this.type.isIntegralType()},e.prototype.isFloatingPointTyped=function(){return!!this.type&&this.type.isFloatingPointType()},e.prototype.isPointerTyped=function(){return!!this.type&&this.type.isPointerType()},e.prototype.isReferenceTyped=function(){return!!this.type&&this.type.isReferenceType()},e.prototype.isClassTyped=function(){return!!this.type&&this.type.isClassType()},e.prototype.isBoundedArrayTyped=function(){return!!this.type&&this.type.isBoundedArrayType()},e.prototype.isArrayOfUnknownBoundTyped=function(){return!!this.type&&this.type.isArrayOfUnknownBoundType()},e.prototype.isGenericArrayTyped=function(){return!!this.type&&this.type.isGenericArrayType()},e.prototype.isPrvalue=function(){return"prvalue"===this.valueCategory},e.prototype.isLvalue=function(){return"lvalue"===this.valueCategory},e.prototype.isTailChild=function(t){return{isTail:!1}},e}(a.PotentialFullExpression);function b(t){return t.every(function(t){return t.isWellTyped()})}e.Expression=m,e.allWellTyped=b,e.allObjectTyped=function(t){return t.every(function(t){return t.isObjectTyped()})};var _=function(t){function e(e,n){return t.call(this,e,"expression",n)||this}return r(e,t),e.prototype.setEvalResult=function(t){this.evalResult=t},e}(a.RuntimePotentialFullExpression);e.RuntimeExpression=_;var g=function(t){function e(e,n){var r=t.call(this,e)||this;return r.type=void 0,r.valueCategory=void 0,r.addNote(u.CPPError.lobster.unsupported_feature(r,n)),r}return r(e,t),e.prototype.createRuntimeExpression=function(t){throw new Error("Cannot create a runtime instance of an unsupported construct.")},e.prototype.describeEvalResult=function(t){return{message:"an unsupported expression"}},e}(m);e.UnsupportedExpression=g;var w=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=0,r.subexpressions=[],r}return r(e,t),e.prototype.setSubexpressions=function(t){this.subexpressions=t},e.prototype.upNextImpl=function(){if(0===this.index){for(var t=this.subexpressions.length-1;t>=0;--t)this.sim.push(this.subexpressions[t]);this.index=1}},e.prototype.stepForwardImpl=function(){this.operate(),this.done()},e}(_);e.SimpleRuntimeExpression=w;var R=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.type=r.type,i.valueCategory=r.valueCategory,i.attach(i.left=n),i.attach(i.right=r),i}return r(e,t),e.createFromAST=function(t,n){return new e(n,y(t.left,n),y(t.right,n))},e.prototype.createRuntimeExpression=function(t){return new T(this,t)},e.prototype.describeEvalResult=function(t){return this.right.describeEvalResult(t)},e.constructKind=Symbol("Comma"),e}(m);e.CommaExpression=R;var T=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.right=r.model.right.createRuntimeExpression(r),r.left=r.model.left.createRuntimeExpression(r),r.setSubexpressions([r.left,r.right]),r}return r(e,t),e.prototype.operate=function(){this.setEvalResult(this.right.evalResult)},e}(w);e.RuntimeComma=T;var x=function(t){function e(e,n,r,i){var o,a=t.call(this,e)||this;return n.isWellTyped()&&(n=a.compileCondition(n)),r.isWellTyped()&&i.isWellTyped()&&(r=(o=a.compileConsequences(r,i)).then,i=o.otherwise),a.attach(a.condition=n),a.attach(a.then=r),a.attach(a.otherwise=i),a.type=r.type,a.valueCategory=r.valueCategory,a}return r(e,t),e.createFromAST=function(t,n){return new e(n,y(t.condition,n),y(t.then,n),y(t.otherwise,n))},e.prototype.compileCondition=function(t){return t=p.standardConversion(t,new o.Bool),o.isType(t.type,o.Bool)||this.addNote(u.CPPError.expr.ternary.condition_bool(t,t.type)),t},e.prototype.compileConsequences=function(t,e){return t.isPrvalue()&&e.isLvalue()?e=p.convertToPRValue(e):e.isPrvalue()&&t.isLvalue()&&(t=p.convertToPRValue(t)),o.sameType(t.type,e.type)||this.addNote(u.CPPError.lobster.ternarySameType(this,t.type,e.type)),(o.isType(t.type,o.VoidType)||o.isType(e.type,o.VoidType))&&this.addNote(u.CPPError.lobster.ternaryNoVoid(this)),t.valueCategory!==e.valueCategory&&this.addNote(u.CPPError.expr.ternary.sameValueCategory(this)),{then:t,otherwise:e}},e.prototype.createRuntimeExpression=function(t){return new E(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(m);e.TernaryExpression=x;var E=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index="condition",r.condition=r.model.condition.createRuntimeExpression(r),r.then=r.model.then.createRuntimeExpression(r),r.otherwise=r.model.otherwise.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){"condition"===this.index?(this.sim.push(this.condition),this.index="branch"):"branch"===this.index&&(this.condition.evalResult.rawValue?this.sim.push(this.then):this.sim.push(this.otherwise),this.index="operate")},e.prototype.stepForwardImpl=function(){this.setEvalResult(this.then?this.then.evalResult:this.otherwise.evalResult),this.sim.pop()},e}(_);e.RuntimeTernary=E;var A=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.valueCategory="lvalue",n.isWellTyped()&&r.isWellTyped()?(r=p.standardConversion(r,n.type.cvUnqualified()),n.valueCategory&&"lvalue"!=n.valueCategory&&i.addNote(u.CPPError.expr.assignment.lhs_lvalue(i)),n.type.isConst&&i.addNote(u.CPPError.expr.assignment.lhs_const(i)),r.isWellTyped()&&!o.sameType(r.type,n.type.cvUnqualified())&&i.addNote(u.CPPError.expr.assignment.convert(i,n,r)),i.type=n.type,i.attach(i.lhs=n),i.attach(i.rhs=r),i):(i.attach(i.lhs=n),i.attach(i.rhs=r),i)}return r(e,t),e.createFromAST=function(t,n){return new e(n,y(t.lhs,n),y(t.rhs,n))},e.prototype.createRuntimeExpression=function(t){return new C(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e.prototype.isTailChild=function(t){return{isTail:!1,reason:"The assignment itself will happen after the recursive call returns.",others:[this]}},e.prototype.explain=function(t,e){var n=this.lhs.describeEvalResult(0),r=this.rhs.describeEvalResult(0);return{message:"The value of "+(r.name||r.message)+" will be assigned to "+(n.name||n.message)+"."}},e}(m);e.AssignmentExpression=A;var C=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.lhs=r.model.lhs.createRuntimeExpression(r),r.rhs=r.model.rhs.createRuntimeExpression(r),r.setSubexpressions([r.rhs,r.lhs]),r}return r(e,t),e.prototype.operate=function(){this.lhs.evalResult.writeValue(this.rhs.evalResult),this.setEvalResult(this.lhs.evalResult)},e}(w);function O(t,e){return t+e}function S(t,e){return t-e}function P(t,e){return t*e}function j(t,e){return Math.trunc(t/e)}function I(t,e){return t/e}function F(t,e){return t-j(t,e)*e}function N(t,e){return t<e}function k(t,e){return t>e}function z(t,e){return t<=e}function V(t,e){return t>=e}function L(t,e){return t==e}function B(t,e){return t==e}function D(t,e){return t&e}function M(t,e){return t^e}function U(t,e){return t|e}function W(t,e){return t<<e}function q(t,e){return t>>>e}e.RuntimeAssignment=C,e.add=O,e.sub=S,e.mult=P,e.intDiv=j,e.floatDiv=I,e.mod=F,e.lt=N,e.gt=k,e.lte=z,e.gte=V,e.eq=L,e.ne=B,e.bitAnd=D,e.bitXor=M,e.bitOr=U,e.bitShiftLeft=W,e.bitShiftRight=q;var $=function(t){function e(e,n){var r=t.call(this,e)||this;return r.valueCategory="prvalue",r.operator=n,r}return r(e,t),e}(m);e.BinaryOperator=$;var G=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(w);e.RuntimeBinaryOperator=G;var H={"+":function(t,e){return t.combine(e,O)},"-":function(t,e){return t.combine(e,S)},"*":function(t,e){return t.combine(e,P)},"/":function(t,e){return t.type.isIntegralType()?t.combine(e,j):t.combine(e,I)},"%":function(t,e){return t.combine(e,F)},"&":function(t,e){return t.combine(e,D)},"^":function(t,e){return t.combine(e,M)},"|":function(t,e){return t.combine(e,U)},"<<":function(t,e){return t.combine(e,W)},">>":function(t,e){return t.combine(e,q)}},Q=function(t){function e(e,n,r,i){var a=t.call(this,e,i)||this;if(!n.isWellTyped()||!r.isWellTyped())return a.attach(a.left=n),a.attach(a.right=r),a;if(!n.isArithmeticTyped()||!r.isArithmeticTyped())return a.addNote(u.CPPError.expr.binary.arithmetic_operands(a,a.operator,n,r)),a.attach(a.left=n),a.attach(a.right=r),a;if(!("%"!==i&&"<<"!==i&&">>"!=i||n.isIntegralTyped()&&r.isIntegralTyped()))return a.addNote(u.CPPError.expr.binary.arithmetic_operands(a,a.operator,n,r)),a.attach(a.left=n),a.attach(a.right=r),a;var s=p.usualArithmeticConversions(n,r),c=s[0],l=s[1];return o.sameType(c.type,l.type)||a.addNote(u.CPPError.expr.invalid_binary_operands(a,a.operator,c,l)),a.type=c.type,a.attach(a.left=c),a.attach(a.right=l),a}return r(e,t),e.createFromAST=function(t,n){var r=y(t.left,n),i=y(t.right,n),o=t.operator;return"-"===o&&(r.isPointerTyped()||r.isBoundedArrayTyped())&&(i.isPointerTyped()||i.isBoundedArrayTyped())?new K(n,p.convertToPRValue(r),p.convertToPRValue(i)):"-"!==o&&"+"!==o||!((r.isPointerTyped()||r.isBoundedArrayTyped())&&i.isIntegralTyped()||(i.isPointerTyped()||i.isBoundedArrayTyped())&&r.isIntegralTyped())?new e(n,r,i,o):new X(n,p.convertToPRValue(r),p.convertToPRValue(i))},e.prototype.createRuntimeExpression=function(t){return new Z(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}($),Z=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.left=r.model.left.createRuntimeExpression(r),r.right=r.model.right.createRuntimeExpression(r),r.setSubexpressions([r.left,r.right]),r}return r(e,t),e.prototype.operate=function(){this.setEvalResult(H[this.model.operator](this.left.evalResult,this.right.evalResult))},e}(G);e.RuntimeArithmeticBinaryOperator=Z;var K=function(t){function e(e,n,r){var i=t.call(this,e,"-")||this;return i.valueCategory="prvalue",i.attach(i.left=n),i.attach(i.right=r),i.type=new o.Int,i}return r(e,t),e.prototype.createRuntimeExpression=function(t){return new Y(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}($);e.PointerDifference=K;var Y=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.left=r.model.left.createRuntimeExpression(r),r.right=r.model.right.createRuntimeExpression(r),r.setSubexpressions([r.left,r.right]),r}return r(e,t),e.prototype.operate=function(){var t=this.left.evalResult.pointerDifference(this.right.evalResult),e=this.left.model.type.isType(o.ArrayPointer)?this.left.model.type.arrayObject:null,n=this.right.model.type.isType(o.ArrayPointer)?this.right.model.type.arrayObject:null;t.rawEquals(0)||(!e&&n?(this.sim.eventOccurred(i.SimulationEvent.UNDEFINED_BEHAVIOR,"The left pointer in this subtraction is not from an array, so the resulting difference is not meaningful.",!0),t=t.invalidated()):e&&!n?(this.sim.eventOccurred(i.SimulationEvent.UNDEFINED_BEHAVIOR,"The right pointer in this subtraction is not from an array, so the resulting difference is not meaningful.",!0),t=t.invalidated()):e&&n&&e!==n&&(this.sim.eventOccurred(i.SimulationEvent.UNDEFINED_BEHAVIOR,"The pointers in this subtraction are pointing into two different arrays, so the resulting difference is not meaningful.",!0),t=t.invalidated())),this.setEvalResult(t)},e}(G);e.RuntimePointerDifference=Y;var X=function(t){function e(e,n,r){var i=t.call(this,e,"+")||this;return i.attach(i.left=n),i.attach(i.right=r),n.isWellTyped()&&r.isWellTyped()?(n.isPointerTyped()&&r.isIntegralTyped()?(i.pointerOnLeft=!0,i.pointer=n,i.offset=r,i.type=i.pointer.type):n.isIntegralTyped()&&r.isPointerTyped()?(i.pointerOnLeft=!1,i.pointer=r,i.offset=n,i.type=i.pointer.type):i.addNote(u.CPPError.expr.invalid_binary_operands(i,i.operator,n,r)),i):i}return r(e,t),e.prototype.createRuntimeExpression=function(t){return new J(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}($);e.PointerOffset=X;var J=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.pointer=r.model.pointer.createRuntimeExpression(r),r.offset=r.model.offset.createRuntimeExpression(r),e.pointerOnLeft?(r.left=r.pointer,r.right=r.offset):(r.left=r.offset,r.right=r.pointer),r.setSubexpressions([r.left,r.right]),r}return r(e,t),e.prototype.operate=function(){var t=this.pointer.evalResult.pointerOffset(this.offset.evalResult);this.setEvalResult(t);var e=t.type;e.isType(o.ArrayPointer)?t.rawValue<e.min()||(e.onePast(),t.rawValue):this.sim.eventOccurred(i.SimulationEvent.UNDEFINED_BEHAVIOR,"Uh, I don't think you're supposed to do arithmetic with that pointer. It's not pointing into an array.",!0)},e}(G);e.RuntimePointerOffset=J;var tt={"<":function(t,e){return t.compare(e,N)},">":function(t,e){return t.compare(e,k)},"<=":function(t,e){return t.compare(e,z)},">=":function(t,e){return t.compare(e,V)},"==":function(t,e){return t.compare(e,L)},"!=":function(t,e){return t.compare(e,B)}},et=function(t){function e(e,n,r,i){var a=t.call(this,e,i)||this;if(a.type=o.Bool.BOOL,!n.isWellTyped()||!r.isWellTyped())return a.attach(a.left=n),a.attach(a.right=r),a;if(!n.isArithmeticTyped()||!r.isArithmeticTyped())return a.addNote(u.CPPError.expr.binary.arithmetic_operands(a,a.operator,n,r)),a.attach(a.left=n),a.attach(a.right=r),a;var s=p.usualArithmeticConversions(n,r),c=s[0],l=s[1];return o.sameType(c.type,l.type)||a.addNote(u.CPPError.expr.invalid_binary_operands(a,a.operator,c,l)),a.attach(a.left=c),a.attach(a.right=l),a}return r(e,t),e.createFromAST=function(t,n){return new e(n,y(t.left,n),y(t.right,n),t.operator)},e.prototype.createRuntimeExpression=function(t){return new nt(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}($),nt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.left=r.model.left.createRuntimeExpression(r),r.right=r.model.right.createRuntimeExpression(r),r.setSubexpressions([r.left,r.right]),r}return r(e,t),e.prototype.operate=function(){this.setEvalResult(tt[this.model.operator](this.left.evalResult,this.right.evalResult))},e}(G);e.RuntimeRelationalBinaryOperator=nt;var rt=function(t){function e(e,n,r,i){var a=t.call(this,e,i)||this;return a.type=new o.Bool,n.isWellTyped()&&r.isWellTyped()?(a.attach(a.left=a.compileLogicalSubexpression(n)),a.attach(a.right=a.compileLogicalSubexpression(r))):(a.attach(a.left=n),a.attach(a.right=r)),a}return r(e,t),e.prototype.compileLogicalSubexpression=function(t){return t=p.standardConversion(t,o.Bool.BOOL),o.isType(t.type,o.Bool)||this.addNote(u.CPPError.expr.binary.boolean_operand(this,this.operator,t)),t},e.createFromAST=function(t,n){return new e(n,y(t.left,n),y(t.right,n),t.operator)},e.prototype.createRuntimeExpression=function(t){return new it(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}($),it=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index="left",r.left=r.model.left.createRuntimeExpression(r),r.right=r.model.right.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){if("left"===this.index)this.sim.push(this.left),this.index="right";else if("right"===this.index){var t="&&"===this.model.operator?0:1;this.hasShortCircuited=this.left.evalResult.rawEquals(t),this.hasShortCircuited||this.sim.push(this.right),this.index="operate"}},e.prototype.stepForwardImpl=function(){this.hasShortCircuited?this.setEvalResult(this.left.evalResult):this.setEvalResult(this.operate(this.left.evalResult,this.right.evalResult)),this.sim.pop()},e.prototype.operate=function(t,e){var n=this;return t.combine(e,function(t,e){return"&&"==n.model.operator?t&&e:t||e})},e}(_);e.RuntimeLogicalBinaryOperator=it;var ot=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.attach(i.operand=n),i.args=r,r.forEach(function(t){return i.attach(t)}),b(r)?n instanceof st?n.entity?n.entity instanceof s.FunctionEntity?(i.type=o.noRef(n.entity.type.returnType),i.valueCategory=n.entity.type.returnType instanceof o.ReferenceType?"lvalue":"prvalue",i.call=new f.FunctionCall(e,n.entity,r),i):(i.addNote(u.CPPError.expr.functionCall.operand(i,n.entity)),i):i:(i.addNote(u.CPPError.expr.functionCall.invalid_operand_expression(i,n)),i):i}return r(e,t),e.createFromAST=function(t,n){var r=t.args.map(function(t){return y(t,n)}),i=r.map(function(t){return t.type});return new e(n,y(t.operand,v(n,i)),r)},e.prototype.createRuntimeExpression=function(t){return new ut(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(m);e.FunctionCallExpression=ot;var at=0,ut=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=at,r.operand=r.model.operand.createRuntimeExpression(r),r.args=r.model.args.map(function(t){return t.createRuntimeExpression(r)}),r.call=r.model.call.createRuntimeFunctionCall(r),r}return r(e,t),e.prototype.upNextImpl=function(){if(this.index===at)this.sim.push(this.operand),this.index=1;else{if(1===this.index)return this.sim.push(this.call),this.index=2,!0;if(2===this.index){if(this.model.type,o.VoidType,this.model.isReferenceTyped())this.setEvalResult(this.call.calledFunction.returnObject);else if(this.model.isAtomicTyped()){var t=this.call.calledFunction.returnObject;this.setEvalResult(t.getValue())}else this.setEvalResult(this.call.calledFunction.returnObject);this.sim.pop()}}},e.prototype.stepForwardImpl=function(){},e}(_);e.RuntimeFunctionCallExpression=ut;var st=function(t){function e(e,n){var r=t.call(this,e)||this;r.valueCategory="lvalue",r.name=n,h.checkIdentifier(r,n,r);var i=r.context.contextualScope.lookup(r.name);if(Array.isArray(i))if(1===i.length)r.entity=i[0];else if(r.context.contextualParameterTypes){var o=s.overloadResolution(i,r.context.contextualParameterTypes,r.context.contextualReceiverType);o.selected?r.entity=o.selected:r.entity=o.candidates[0].candidate}else r.addNote(u.CPPError.iden.ambiguous(r,r.name));else r.entity=i;return r.type=r.entity&&r.entity.type,r}return r(e,t),e.createFromAST=function(t,n){return new e(n,t.identifier)},e.prototype.createRuntimeExpression=function(t){return this.entity instanceof s.FunctionEntity?new lt(this,t):new ct(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(m);e.IdentifierExpression=st;var ct=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.prototype.upNextImpl=function(){this.setEvalResult(this.model.entity.runtimeLookup(this)),this.sim.pop()},e.prototype.stepForwardImpl=function(){},e}(_);e.RuntimeObjectIdentifier=ct;var lt=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.prototype.upNextImpl=function(){this.setEvalResult(this.model.entity)},e.prototype.stepForwardImpl=function(){},e}(_);e.RuntimeFunctionIdentifier=lt;var ft={int:parseInt,float:parseFloat,double:parseFloat,bool:function(t){return t?1:0},char:function(t){return l.escapeString(t).charCodeAt(0)}},pt={int:o.Int.INT,float:o.Double.DOUBLE,double:o.Double.DOUBLE,bool:o.Bool.BOOL,char:o.Char.CHAR};function ht(t){return ft[t.type](t.value)}e.parseNumericLiteralValueFromAST=ht;var dt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.valueCategory="prvalue",i.type=n,i.value=new c.Value(r,i.type),i}return r(e,t),e.createFromAST=function(t,n){return new e(n,pt[t.type],ht(t))},e.prototype.createRuntimeExpression=function(t){return new yt(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(m);e.NumericLiteral=dt;var yt=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.prototype.upNextImpl=function(){this.setEvalResult(this.model.value),this.sim.pop()},e.prototype.stepForwardImpl=function(){},e}(_);e.RuntimeNumericLiteral=yt;var vt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.attach(r.subexpression=n),r.type=n.type,r.valueCategory=n.valueCategory,r}return r(e,t),e.createFromAST=function(t,n){return new e(n,y(t.subexpression,n))},e.prototype.createRuntimeExpression=function(t){return new bt(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(m);e.Parentheses=vt;var mt=0,bt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=mt,r.subexpression=r.model.subexpression.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){this.index===mt?(this.sim.push(this.subexpression),this.index=1):(this.setEvalResult(this.subexpression.evalResult),this.sim.pop())},e.prototype.stepForwardImpl=function(){},e}(_);e.RuntimeParentheses=bt;var _t={program:void 0,translationUnit:void 0,contextualScope:void 0},gt=function(t){function e(e,n){var r=t.call(this,_t)||this;return r.type=e,r.valueCategory=n,r}return r(e,t),e.prototype.createRuntimeExpression=function(t){throw new Error("Auxiliary expressions must never be instantiated at runtime.")},e.prototype.describeEvalResult=function(t){throw new Error("Auxiliary expressions have no description")},e}(m);e.AuxiliaryExpression=gt},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(1),o=n(5),a=n(0),u=n(7),s=function(){return function(t,e,n){this.object=t,this.size=this.object.size,this.memory=e,this.address=n}}(),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.rawValue=function(){var t=this.memory.readBytes(this.address,this.size);return this.object.type.bytesToValue(t)},e.prototype.setRawValue=function(t,e){this.memory.writeBytes(this.address,this.object.type.valueToBytes(t))},e}(s),l=function(t){function e(e,n,r){var i=t.call(this,e,n,r)||this,o=i.address;i.elemObjects=[];for(var a=0;a<i.object.type.length;++a)i.elemObjects.push(new w(i.object,a,n,o)),o+=i.object.type.elemType.size;return i}return r(e,t),e.create=function(t,n,r){return new e(t,n,r)},e.prototype.getArrayElemSubobjectByAddress=function(t){var e=(t-this.address)/this.object.type.elemType.size;return this.getArrayElemSubobject(e)},e.prototype.getArrayElemSubobject=function(t){return 0<=t&&t<this.elemObjects.length?this.elemObjects[t]:new w(this.object,t,this.memory,this.address+t*this.object.type.elemType.size)},e}(s),f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(s),p=function(){function t(t,e,n){this.observable=new o.Observable(this),this.type=t,this.size=t.size,a.assert(0!=this.size,"Size cannot be 0."),this.type instanceof i.BoundedArrayType?this.data=l.create(this,e,n):this.type instanceof i.ClassType?this.data=new f(this,e,n):this.data=new c(this,e,n),this.address=n,this.isAlive=!0,this._isValid=!1}return t.prototype.getArrayElemSubobject=function(t){return this.data.getArrayElemSubobject(t)},t.prototype.getArrayElemSubobjectByAddress=function(t){return this.data.getArrayElemSubobjectByAddress(t)},t.prototype.subobjectValueWritten=function(){this.observable.send("valueWritten")},t.prototype.toString=function(){return"@"+this.address},t.prototype.kill=function(t){this.isAlive=!1,this._isValid=!1,t&&(this.deallocatedBy=t),this.observable.send("deallocated")},t.prototype.getPointerTo=function(){return new u.Value(this.address,new i.ObjectPointer(this))},t.prototype.getValue=function(t){void 0===t&&(t=!1);var e=new u.Value(this.getRawValue(),this.type,this._isValid);return t&&this.observable.send("valueRead",e),e},t.prototype.getRawValue=function(){return this.data.rawValue()},t.prototype.readValue=function(){return this.getValue(!0)},t.prototype.setValue=function(t,e){void 0===e&&(e=!1),this._isValid=t.isValid,a.asMutable(this).type=t.type,this.data.setRawValue(t.rawValue,e),e&&this.observable.send("valueWritten",t),this.onValueSet(e)},t.prototype.onValueSet=function(t){},t.prototype.writeValue=function(t){this.setValue(t,!0)},t.prototype.isValueValid=function(){return this._isValid&&this.type.isValueValid(this.getRawValue())},t.prototype.callReceived=function(){this.observable.send("callReceived",this)},t.prototype.callEnded=function(){this.observable.send("callEnded",this)},t.prototype.setValidity=function(t){this._isValid=t,this.observable.send("validitySet",t)},t}();e.CPPObject=p;var h=function(t){function e(e,n,r,i){var o=t.call(this,n,r,i)||this;return o.def=e,o}return r(e,t),e.prototype.describe=function(){return this.def.declaredEntity.describe()},e}(p);e.AutoObject=h;var d=function(t){function e(e){return t.call(this,i.Int.INT,e,0)||this}return r(e,t),e.prototype.describe=function(){return{message:"The value returned from main."}},e}(p);e.MainReturnObject=d;var y=function(t){function e(e,n,r,i){var o=t.call(this,n,r,i)||this;return o.def=e,o}return r(e,t),e.prototype.describe=function(){return this.def.declaredEntity.describe()},e}(p);e.StaticObject=y;var v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.describe=function(){return{message:"the heap object at 0x"+this.address}},e}(p);e.DynamicObject=v;var m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.describe=function(){return{message:"an invalid object at 0x"+this.address}},e}(p);e.InvalidObject=m;var b=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.describe=function(){return{name:"this",message:"the this pointer"}},e}(p);e.ThisObject=b;var _=function(t){function e(e,n,r){return t.call(this,e,n,r)||this}return r(e,t),e.prototype.describe=function(){return{message:"string literal at 0x"+this.address}},e}(p);e.StringLiteralObject=_;var g=function(t){function e(e,n,r,i){var o=t.call(this,n,r,i)||this;return o.containingObject=e,o}return r(e,t),Object.defineProperty(e.prototype,"isAlive",{get:function(){return this.containingObject.isAlive},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"deallocatedBy",{get:function(){return this.containingObject.deallocatedBy},enumerable:!0,configurable:!0}),e.prototype.onValueSet=function(t){t&&this.containingObject.subobjectValueWritten()},e}(p),w=function(t){function e(e,n,r,i){var o=t.call(this,e,e.type.elemType,r,i)||this;return o.index=n,o}return r(e,t),e.prototype.getPointerTo=function(){return new u.Value(this.address,new i.ArrayPointer(this.containingObject))},e.prototype.describe=function(){var t=this.containingObject.describe(),e={message:"element "+this.index+" of "+t.message};return t.name&&(e.name=t.name+"["+this.index+"]"),e},e}(g);e.ArraySubobject=w;var R=function(t){function e(e,n,r,i){return t.call(this,e,n,r,i)||this}return r(e,t),e.prototype.describe=function(){return{message:"the "+this.type.name+" base of "+this.containingObject.describe().message}},e}(g);e.BaseSubobject=R;var T=function(t){function e(e,n,r,i,o){var a=t.call(this,e,n,i,o)||this;return a.name=r,a}return r(e,t),e.prototype.describe=function(){var t=this.containingObject.describe(),e={message:"the member "+this.name+" of "+t.message};return t.name&&(e.name=t.name+"."+this.name),e},e}(g);e.MemberSubobject=T;var x=function(t){function e(e,n,r,i){var o=t.call(this,e,n,r)||this;return o.name=i,o}return r(e,t),e.prototype.nameString=function(){return"@"+this.address},e.prototype.describe=function(){return name?{name:this.name,message:"the temporary object "+this.name}:{message:"a temporary object"}},e}(p);e.TemporaryObject=x},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(1),o=n(8),a=n(7),u=n(0),s=function(t){function e(n,r,i){var o=t.call(this,n.context)||this;return o.attach(o.from=n),o.type=r,o.valueCategory=i,o.conversionLength=n instanceof e?n.conversionLength+1:1,o}return r(e,t),e.prototype.createRuntimeExpression=function(t){return new c(this,t)},e.prototype.describeEvalResult=function(t){throw new Error("Method not implemented.")},e}(o.Expression);e.ImplicitConversion=s;var c=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.from=r.model.from.createRuntimeExpression(r),r.setSubexpressions([r.from]),r}return r(e,t),e.prototype.operate=function(){this.setEvalResult(this.model.operate(this.from.evalResult))},e}(o.SimpleRuntimeExpression);e.RuntimeImplicitConversion=c;var l=function(t){function e(e){return t.call(this,e,e.type.cvUnqualified(),"prvalue")||this}return r(e,t),e.prototype.operate=function(t){return t.getValue()},e}(s);e.LValueToRValue=l;var f=function(t){function e(e){return t.call(this,e,e.type.adjustToPointerType(),"prvalue")||this}return r(e,t),e.prototype.operate=function(t){return new a.Value(t.address,new i.ArrayPointer(t))},e}(s);e.ArrayToPointer=f;var p=function(t){function e(e,n){return t.call(this,e,n.cvQualified(e.type.isConst,e.type.isVolatile),"prvalue")||this}return r(e,t),e}(s),h=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.prototype.operate=function(t){return new a.Value(t.rawValue,this.type)},e}(p),d=function(t){function e(e,n){var r=t.call(this,e,n)||this;return u.assert(0===e.value.rawValue),r}return r(e,t),e}(h);e.NullPointerConversion=d;var y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.PointerConversion=y;var v=function(t){function e(e){return t.call(this,e,i.Bool.BOOL)||this}return r(e,t),e}(h);e.PointerToBooleanConversion=v;var m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.IntegralPromotion=m;var b=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.IntegralConversion=b;var _=function(t){function e(e){return t.call(this,e,i.Double.DOUBLE)||this}return r(e,t),e}(h);e.FloatingPointPromotion=_;var g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.FloatingPointConversion=g;var w=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(h);e.IntegralToFloatingConversion=w;var R=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.operate=function(t){return this.type.isType(i.Bool)?new a.Value(0===t.rawValue?0:1,i.Int.INT):new a.Value(Math.trunc(t.rawValue),i.Int.INT)},e}(p);e.FloatingToIntegralConversion=R;var T=function(t){function e(e,n){var r=t.call(this,e,n,"prvalue")||this;return u.assert(i.similarType(e.type,n)),r}return r(e,t),e.prototype.operate=function(t){return new a.Value(t.rawValue,this.type)},e}(s);function x(t){return t.isBoundedArrayTyped()?new f(t):t.isAtomicTyped()?t.isPrvalue()?t:new l(t):t}function E(t,e){if(i.similarType(t.type,e))return t;if(e.isPointerType()&&t instanceof o.NumericLiteral&&i.isType(t.type,i.Int)&&0===t.value.rawValue)return new d(t,e);if(e.isPointerType()&&e.ptrTo.isClassType()&&t.isPointerTyped()&&t.type.ptrTo.isClassType()&&i.subType(t.type.ptrTo,e.ptrTo))return new y(t,new i.PointerType(e.ptrTo.cvQualified(t.type.ptrTo.isConst,t.type.ptrTo.isVolatile)));if(e.isType(i.Bool)&&t.isPointerTyped())return new v(t);if(e.isType(i.Double)&&t.isTyped(i.Float))return new _(t);if(e.isIntegralType()){if(t.isIntegralTyped())return new b(t,e);if(t.isFloatingPointTyped())return new R(t,e)}if(e.isFloatingPointType()){if(t.isIntegralTyped())return new w(t,e);if(t.isFloatingPointTyped())return new g(t,e)}return t}function A(t,e){return i.sameType(t.type,e)?t:"prvalue"===t.valueCategory&&i.isCvConvertible(t.type,e)?new T(t,e):t}function C(t){return t.isIntegralTyped()&&!t.isTyped(i.Int)?new m(t,i.Int.INT):t}e.QualificationConversion=T,e.convertToPRValue=x,e.typeConversion=E,e.qualificationConversion=A,e.standardConversion=function(t,e,n){if(void 0===n&&(n={}),n=n||{},!t.isAtomicTyped()&&!t.isBoundedArrayTyped())return t;if(!e.isAtomicType())return t;if(!n.suppressLTR){var r=x(t);return r=A(r=E(r,e),e)}return t},e.integralPromotion=C,e.usualArithmeticConversions=function(t,e){var n=x(t),r=x(e);return n.isTyped(i.Double)?[n,r=E(r,i.Double.DOUBLE)]:r.isTyped(i.Double)?[n=E(n,i.Double.DOUBLE),r]:n.isTyped(i.Float)?[n,r=E(r,i.Float.FLOAT)]:r.isTyped(i.Float)?[n=E(n,i.Float.FLOAT),r]:(n.isIntegralTyped()&&(n=C(n)),r.isIntegralTyped()&&(r=C(r)),i.sameType(n.type,r.type),[n,r])}},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),o=n(2),a=n(1),u=n(0),s=n(4),c=n(10),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.isTailChild=function(t){return{isTail:!0}},e}(i.PotentialFullExpression);e.Initializer=l;var f=function(t){function e(e,n){return t.call(this,e,"initializer",n)||this}return r(e,t),e}(i.RuntimePotentialFullExpression);e.RuntimeInitializer=f;var p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.create=function(t,e){return e.bindTo?new d(t,e):e.type instanceof a.AtomicType?new y(t,e):e.type instanceof a.BoundedArrayType?new m(t,e):u.assertFalse()},e}(l);e.DefaultInitializer=p;var h=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e}(f);e.RuntimeDefaultInitializer=h;var d=function(t){function e(e,n){var r=t.call(this,e)||this;return r.target=n,r.addNote(s.CPPError.declaration.init.referenceBind(r)),r}return r(e,t),e.prototype.createRuntimeInitializer=function(t){return u.assertFalse("A default initializer for a reference is not allowed.")},e.prototype.explain=function(t,e){return u.assertFalse("A default initializer for a reference is not allowed.")},e}(p);e.ReferenceDefaultInitializer=d;var y=function(t){function e(e,n){var r=t.call(this,e)||this;return r.target=n,r}return r(e,t),e.prototype.createRuntimeInitializer=function(t){return new v(this,t)},e.prototype.explain=function(t,e){var n=this.target.describe();return{message:"No initialization will take place. "+(n.name||n.message)+" will have a junk value."}},e}(p);e.AtomicDefaultInitializer=y;var v=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.target=r.model.target.runtimeLookup(r),r}return r(e,t),e.prototype.upNextImpl=function(){this.observable.send("initialized",this.target),this.sim.pop()},e.prototype.stepForwardImpl=function(){},e}(h);e.RuntimeAtomicDefaultInitializer=v;var m=function(t){function e(e,n){var r=t.call(this,e)||this;r.target=n;var i=r.target.type;if(i.elemType instanceof a.AtomicType);else{r.elementInitializers=[];for(var u=0;u<i.length;++u){var c=p.create(e,new o.ArraySubobjectEntity(r.target,u));if(r.elementInitializers.push(c),r.attach(c),c.hasErrors){r.addNote(s.CPPError.declaration.init.array_default_init(r));break}}}return r}return r(e,t),e.prototype.createRuntimeInitializer=function(t){return new b(this,t)},e.prototype.explain=function(t,e){var n=this.target.describe(),r=this.target.type;return 0===r.length?{message:"No initialization is performed for "+(n.name||n.message)+"because the array has length 0."}:r.elemType instanceof a.AtomicType?{message:"No initialization will take place. The elements of "+(n.name||n.message)+" will have junk values."}:{message:"Each element of "+(n.name||n.message)+" will be default-initialized. For example, "+this.elementInitializers[0].explain(t,e)}},e}(p);e.ArrayDefaultInitializer=m;var b=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=0,r.target=r.model.target.runtimeLookup(r),r.model.elementInitializers&&(r.elementInitializers=r.model.elementInitializers.map(function(t){return t.createRuntimeInitializer(r)})),r}return r(e,t),e.prototype.upNextImpl=function(){this.elementInitializers&&this.index<this.elementInitializers.length?this.sim.push(this.elementInitializers[this.index++]):(this.observable.send("initialized",this.target),this.sim.pop())},e.prototype.stepForwardImpl=function(){},e}(h);e.RuntimeArrayDefaultInitializer=b;var _=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.create=function(t,e,n){return e.bindTo?new w(t,e,n):e.type instanceof a.AtomicType?new T(t,e,n):u.assertFalse()},e}(l);e.DirectInitializer=_;var g=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e}(f);e.RuntimeDirectInitializer=g;var w=function(t){function e(e,n,r){var i=t.call(this,e)||this;if(i.target=n,i.args=r,r.forEach(function(t){i.attach(t)}),i.args.length>1)return i.addNote(s.CPPError.declaration.init.referenceBindMultiple(i)),i;if(i.arg=i.args[0],!i.arg.isWellTyped())return i;var o=n.type;return a.referenceCompatible(i.arg.type,o)?"prvalue"!==i.arg.valueCategory||o.isConst?"prvalue"===i.arg.valueCategory&&i.addNote(s.CPPError.lobster.referencePrvalue(i)):i.addNote(s.CPPError.declaration.init.referencePrvalueConst(i)):i.addNote(s.CPPError.declaration.init.referenceType(i,i.arg.type,o)),i}return r(e,t),e.prototype.createRuntimeInitializer=function(t){return new R(this,t)},e.prototype.explain=function(t,e){var n=this.target.describe(),r=this.args[0].describeEvalResult(0);return{message:(n.name||n.message)+" will be bound to "+(r.name||r.message)+"."}},e}(_);e.ReferenceDirectInitializer=w;var R=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.alreadyPushed=!1,r.arg=r.model.arg.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){this.alreadyPushed||(this.sim.push(this.arg),this.alreadyPushed=!0)},e.prototype.stepForwardImpl=function(){var t=this.model.target.bindTo(this,this.arg.evalResult);this.observable.send("initialized",t),this.sim.pop()},e}(g);e.RuntimeReferenceDirectInitializer=R;var T=function(t){function e(e,n,r){var i=t.call(this,e)||this;i.target=n;var o=n.type;if(i.args=r,r.forEach(function(t){i.attach(t)}),r.length>1)return i.addNote(s.CPPError.declaration.init.scalar_args(i,o)),i;if(i.arg=r[0],!i.arg.isWellTyped())return i;var u=c.standardConversion(i.arg,o);return i.arg=u,a.sameType(u.type,o)||i.addNote(s.CPPError.declaration.init.convert(i,u.type,o)),i}return r(e,t),e.prototype.createRuntimeInitializer=function(t){return new x(this,t)},e.prototype.explain=function(t,e){var n=this.target.runtimeLookup(e).describe(),r=this.args[0].describeEvalResult(0);return{message:(n.name||n.message)+" will be initialized with "+(r.name||r.message)+"."}},e}(_);e.AtomicDirectInitializer=T;var x=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.alreadyPushed=!1,r.target=r.model.target.runtimeLookup(r),r.arg=r.model.arg.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){this.alreadyPushed||(this.sim.push(this.arg),this.alreadyPushed=!0)},e.prototype.stepForwardImpl=function(){this.target.writeValue(this.arg.evalResult),this.observable.send("initialized",this.target),this.sim.pop()},e}(g);e.RuntimeAtomicDirectInitializer=x;var E=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(_);e.CopyInitializer=E;var A=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(g);e.RuntimeCopyInitializer=A;var C=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(w);e.ReferenceCopyInitializer=C;var O=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(R);e.RuntimeReferenceCopyInitializer=O;var S=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(T);e.AtomicCopyInitializer=S;var P=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(x);e.RuntimeAtomicCopyInitializer=P},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),o=n(4),a=n(0),u=n(1),s=n(11),c=n(2),l=n(8),f=n(19),p=n(13),h=n(6),d=function(t){function e(e,n){var r=t.call(this,e)||this,i=0;return n.forEach(function(t){r[t]?r.addNote(o.CPPError.declaration.storage.once(r,t)):(a.asMutable(r)[t]=!0,++i)}),r.static&&r.addNote(o.CPPError.lobster.unsupported_feature(r,"static")),r.extern&&r.addNote(o.CPPError.lobster.unsupported_feature(r,"extern")),r.thread_local&&r.addNote(o.CPPError.lobster.unsupported_feature(r,"thread_local")),r.register&&r.addNote(o.CPPError.lobster.unsupported_feature(r,"register")),r.mutable&&r.addNote(o.CPPError.lobster.unsupported_feature(r,"mutable")),i<2||2==i&&r.thread_local&&(r.static||r.extern)||r.addNote(o.CPPError.declaration.storage.incompatible(r,n)),r.isEmpty=0===i,r}return r(e,t),e.createFromAST=function(t,n){return new e(n,t)},e}(i.BasicCPPConstruct);e.StorageSpecifier=d;var y=function(t){function e(e,n){var r=t.call(this,e)||this;return n.forEach(function(t){if("enum"===t)return a.asMutable(r).enum=!0,void r.addNote(o.CPPError.lobster.unsupported_feature(r,"mutable"));var e=["const","volatile","signed","unsigned","enum"].find(function(e){return e===t});e?r[e]?r.addNote(o.CPPError.declaration.typeSpecifier.once(r,e)):a.asMutable(r)[e]=!0:r.typeName?r.addNote(o.CPPError.declaration.typeSpecifier.one_type(r,[r.typeName,t])):a.asMutable(r).typeName=t}),r.unsigned&&r.signed&&r.addNote(o.CPPError.declaration.typeSpecifier.signed_unsigned(r)),!r.unsigned&&!r.signed||r.typeName||(r.typeName="int"),r.typeName?u.isBuiltInTypeName(r.typeName)?(a.asMutable(r).type=new u.builtInTypes[r.typeName](r.const,r.volatile),r):(r.addNote(o.CPPError.type.typeNotFound(r,r.typeName)),r):(r.addNote(o.CPPError.declaration.func.no_return_type(r)),r)}return r(e,t),e.createFromAST=function(t,n){return new e(n,t)},e}(i.BasicCPPConstruct);function v(t,e){var n=y.createFromAST(t.specs.typeSpecs,e),r=n.type,i=d.createFromAST(t.specs.storageSpecs,e);return t.declarators.map(function(o){var a,u=O.createFromAST(o,e,r),s=u.type;if(s)if(t.specs.friend)a=new w(e,n,i,u,t.specs);else if(t.specs.typedef)a=new g(e,n,i,u,t.specs);else if(s.isVoidType())a=new _(e,n,i,u,t.specs);else if(s.isFunctionType())a=new T(e,n,i,u,t.specs,s);else if(s.isArrayOfUnknownBoundType())a=new R(e,n,i,u,t.specs,s);else{var c=void 0;a=c=f.isBlockContext(e)?new E(e,n,i,u,t.specs,s):new A(e,n,i,u,t.specs,s);var p=o.initializer;p?"direct_initializer"==p.construct_type?c.setDirectInitializer(p.args.map(function(t){return l.createExpressionFromAST(t,e)})):"copy_initializer"==p.construct_type&&c.setCopyInitializer(p.args.map(function(t){return l.createExpressionFromAST(t,e)})):c.setDefaultInitializer()}else a=new b(e,n,i,u,t.specs);return a.setAST(t),a})}e.TypeSpecifier=y,e.createDeclarationFromAST=function(t,e){return"simple_declaration"===t.construct_type?v(t,e):P.createFromAST(t,e)},e.createSimpleDeclarationFromAST=v;var m=function(t){function e(e,n,r,i,u){var s=t.call(this,e)||this;return s.typeSpecifier=n,s.storageSpecifier=r,s.otherSpecifiers=u,s.declarator=i,s.name=i.name,i.name?(u.virtual&&s.addNote(o.CPPError.declaration.virtual_prohibited(s)),s):a.assertFalse("Simple declarations must have a name.")}return r(e,t),e}(i.BasicCPPConstruct);e.SimpleDeclaration=m;var b=function(t){function e(e,n,r,i,a){var u=t.call(this,e,n,r,i,a)||this;return u.initializerAllowed=!0,u.isDefinition=!1,u.addNote(o.CPPError.declaration.unknown_type(u)),u}return r(e,t),e}(m);e.UnknownTypeDeclaration=b;var _=function(t){function e(e,n,r,i,a){var s=t.call(this,e,n,r,i,a)||this;return s.initializerAllowed=!0,s.isDefinition=!1,s.type=u.VoidType.VOID,s.addNote(o.CPPError.declaration.void_prohibited(s)),s}return r(e,t),e}(m);e.VoidDeclaration=_;var g=function(t){function e(e,n,r,i,a){var u=t.call(this,e,n,r,i,a)||this;return u.initializerAllowed=!1,u.isDefinition=!1,u.addNote(o.CPPError.lobster.unsupported_feature(u,"typedef")),u}return r(e,t),e}(m);e.TypedefDeclaration=g;var w=function(t){function e(e,n,r,i,a){var u=t.call(this,e,n,r,i,a)||this;return u.initializerAllowed=!1,u.isDefinition=!1,u.addNote(o.CPPError.lobster.unsupported_feature(u,"friend")),a.virtual&&u.addNote(o.CPPError.declaration.friend.virtual_prohibited(u)),u}return r(e,t),e}(m);e.FriendDeclaration=w;var R=function(t){function e(e,n,r,i,a,u){var s=t.call(this,e,n,r,i,a)||this;return s.initializerAllowed=!0,s.isDefinition=!1,s.type=u,s.addNote(o.CPPError.declaration.array.length_required(s)),s}return r(e,t),e}(m);e.UnknownBoundArrayDeclaration=R;var T=function(t){function e(e,n,r,i,u,s){var l=t.call(this,e,n,r,i,u)||this;l.initializerAllowed=!1,l.isDefinition=!1,l.type=s,l.declaredEntity=new c.FunctionEntity(s,l),a.assert(!!l.declarator.parameters,"The declarator for a function declaration must contain declarators for its parameters as well."),l.parameterDeclarators=l.declarator.parameters,l.declaredEntity.isMain()&&l.type.paramTypes.length>0&&l.addNote(o.CPPError.declaration.func.mainParams(l.declarator));try{l.context.contextualScope.addDeclaredEntity(l.declaredEntity)}catch(t){if(!(t instanceof o.Note))throw t;l.addNote(t)}return l.context.contextualScope instanceof c.NamespaceScope&&l.context.translationUnit.program.registerLinkedEntity(l.declaredEntity),l}return r(e,t),e}(m);e.FunctionDeclaration=T;var x=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.setInitializer=function(t){return a.assert(!this.initializer),this.initializer=t,this},e.prototype.setDefaultInitializer=function(){return this.setInitializer(s.DefaultInitializer.create(this.context,this.declaredEntity))},e.prototype.setDirectInitializer=function(t){return this.setInitializer(s.DirectInitializer.create(this.context,this.declaredEntity,t))},e.prototype.setCopyInitializer=function(t){return this.setInitializer(s.CopyInitializer.create(this.context,this.declaredEntity,t))},e.prototype.setInitializerList=function(t){return this.addNote(o.CPPError.lobster.unsupported_feature(this,"initializer lists")),this},e}(m);e.VariableDefinition=x;var E=function(t){function e(e,n,r,i,a,u){var s=t.call(this,e,n,r,i,a)||this;s.initializerAllowed=!0,s.isDefinition=!0,s.type=u,s.declaredEntity=u.isReferenceType()?new c.LocalReferenceEntity(u.refTo,s):new c.AutoEntity(u,s);try{s.context.contextualScope.addDeclaredEntity(s.declaredEntity),s.context.functionLocals.registerLocalVariable(s.declaredEntity)}catch(t){if(!(t instanceof o.Note))throw t;s.addNote(t)}return s}return r(e,t),e}(x);e.LocalVariableDefinition=E;var A=function(t){function e(e,n,r,i,a,u){var s=t.call(this,e,n,r,i,a)||this;if(s.initializerAllowed=!0,s.isDefinition=!0,s.type=u,u.isReferenceType())return s.addNote(o.CPPError.lobster.unsupported_feature(s,"globally scoped references")),s;s.declaredEntity=new c.StaticEntity(u,s);try{s.context.contextualScope.addDeclaredEntity(s.declaredEntity)}catch(t){if(!(t instanceof o.Note))throw t;s.addNote(t)}return s.context.translationUnit.program.registerGlobalObjectDefinition(s.declaredEntity.qualifiedName,s),s}return r(e,t),e}(x);e.GlobalObjectDefinition=A;var C=function(t){function e(e,n,r,i,a,u){var s=t.call(this,e,n,r,i,a)||this;s.initializerAllowed=!0,s.isDefinition=!0,s.type=u,s.declaredEntity=s.type.isReferenceType()?new c.LocalReferenceEntity(s.type.refTo,s,!0):new c.AutoEntity(s.type,s,!0);try{s.context.contextualScope.addDeclaredEntity(s.declaredEntity),e.functionLocals.registerLocalVariable(s.declaredEntity)}catch(t){if(!(t instanceof o.Note))throw t;s.addNote(t)}return s}return r(e,t),e}(m);e.ParameterDefinition=C;var O=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.setAST(n),i.baseType=r,n.pureVirtual&&(i.isPureVirtual=!0),i.determineNameAndType(n),i}return r(e,t),e.createFromAST=function(t,n,r){return new e(n,t,r)},e.prototype.determineNameAndType=function(t){var n=this;if(this.baseType){for(var r=this.baseType,i=t;i;){for(var a=i;a.sub;)a=a.sub;var s=!(a.pointer||a.reference||a.sub);if(i.name&&(this.name=i.name.identifier,p.checkIdentifier(this,i.name.identifier,this)),i.postfixes)for(var c=s,f=i.postfixes.length-1;f>=0;--f){var h=i.postfixes[f];if(s=c&&0===f,"array"===h.kind){if(r.isBoundedArrayType())return void this.addNote(o.CPPError.declaration.array.multidimensional_arrays_unsupported(this));if(!r.isArrayElemType())return void this.addNote(o.CPPError.declaration.array.invalid_element_type(this,r));r=h.size?"numeric_literal"===h.size.construct_type?new u.BoundedArrayType(r,l.parseNumericLiteralValueFromAST(h.size)):new u.ArrayOfUnknownBoundType(r,h.size):new u.ArrayOfUnknownBoundType(r)}else if("function"===h.kind){if(!r.isPotentialReturnType())return void(r.isFunctionType()?this.addNote(o.CPPError.declaration.func.return_func(this)):r.isBoundedArrayType()?this.addNote(o.CPPError.declaration.func.return_array(this)):this.addNote(o.CPPError.declaration.func.invalid_return_type(this,r)));var v=h.args.map(function(t){var r=d.createFromAST(t.specs.storageSpecs,n.context);n.attach(r),r.isEmpty||r.addNote(o.CPPError.declaration.parameter.storage_prohibited(n));var i=y.createFromAST(t.specs.typeSpecs,n.context);return n.attach(i),e.createFromAST(t.declarator,n.context,i.type)});this.parameters=v;var m=v.map(function(t){return t.type&&t.type.isBoundedArrayType()?t.type.adjustToPointerType():t.type});if(1==m.length&&m[0]&&m[0].isVoidType())m=[];else for(var b=0;b<m.length;++b){var _=m[b];_&&_.isVoidType()&&this.addNote(o.CPPError.declaration.func.void_param(v[b]))}m.every(function(t){return t&&t.isPotentialParameterType()})||this.addNote(o.CPPError.declaration.func.some_invalid_parameter_types(this)),r=new u.FunctionType(r,m,i.const,i.volatile,this.context.containingClass&&this.context.containingClass.cvQualified(!!h.const))}!1}if(i.pointer){if(!r.isObjectType())return void(r.isReferenceType()?this.addNote(o.CPPError.declaration.pointer.reference(this)):r.isVoidType()?this.addNote(o.CPPError.declaration.pointer.void(this)):this.addNote(o.CPPError.declaration.pointer.invalid_pointed_type(this,r)));r=new u.PointerType(r,i.const,i.volatile),i=i.pointer}else if(i.reference){if(!r.isObjectType())return void(r.isReferenceType()?this.addNote(o.CPPError.declaration.ref.ref(this)):this.addNote(o.CPPError.declaration.ref.invalid_referred_type(this,r)));r=new u.ReferenceType(r,i.const,i.volatile),i=i.reference}else{if(!i.hasOwnProperty("sub"))break;i=i.sub}!1}this.type=r,r.isFunctionType()||delete this.parameters}},e}(i.BasicCPPConstruct);e.Declarator=O;var S={};["new[]","delete[]","new","delete","->*",">>=","<<=","+=","-=","*=",",=","%=","^=","&=","|=","<<",">>","==","!=","<=",">=","&&","||","++","--","->","()","[]","+","-","*","/","%","^","&","|","~","!","=","<",">",","].forEach(function(t){S["operator"+t]=!0});var P=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.attach(o.declaration=n),o.attachAll(o.parameters=r),o.attach(o.body=i),o.context.translationUnit.program.registerFunctionDefinition(o.declaration.declaredEntity.qualifiedName,o),o}return r(e,t),e.createFromAST=function(t,n){var r=v({construct_type:"simple_declaration",declarators:[t.declarator],specs:t.specs,source:t.declarator.source},n)[0];if(!(r instanceof T))return new i.InvalidConstruct(n,o.CPPError.declaration.func.definition_non_function_type);var a=h.createFunctionContext(n,r.declaredEntity),u=new f.Block(a),s=u.blockContext,c=r.parameterDeclarators.map(function(t){return new C(s,y.createFromAST([],s),d.createFromAST([],s),t,{},t.type)});return t.body.statements.forEach(function(t){return u.addStatement(f.createStatementFromAST(t,s))}),new e(a,r,c,u)},e.prototype.createRuntimeFunction=function(t,e){return new h.RuntimeFunction(this,t,e)},e}(i.BasicCPPConstruct);e.FunctionDefinition=P,e.selectOverloadedDefinition=function(t,e){return t.find(function(t){return e.sameSignature(t.declaration.type)})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(4);e.KEYWORDS=new Set(["alignas","continue","friend","register","true","alignof","decltype","goto","reinterpret_cast","try","asm","default","if","return","typedef","auto","delete","inline","short","typeid","bool","do","int","signed","typename","break","double","long","sizeof","union","case","dynamic_cast","mutable","static","unsigned","catch","else","namespace","static_assert","using","char","enum","new","static_cast","virtual","char16_t","explicit","noexcept","struct","void","char32_t","export","nullptr","switch","volatile","class","extern","operator","template","wchar_t","const","false","private","this","while","constexpr","float","protected","thread_local","const_cast","for","public","throw"]),e.ALT_OPS=new Set(["and","and_eq","bitand","bitor","compl","not","not_eq","or","or_eq","xor","xor_eq"]),e.checkIdentifier=function t(n,i,o){i.includes("::")?i.split("::").forEach(function(e){return t(n,e,o)}):(e.KEYWORDS.has(i)&&o.addNote(r.CPPError.iden.keyword(n,i)),e.ALT_OPS.has(i)&&o.addNote(r.CPPError.iden.alt_op(n,i)))},e.createFullyQualifiedName=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return"::"+t.join("::")},e.fullyQualifiedNameToUnqualified=function(t){var e=t.lastIndexOf("::");return-1===e?t:t.slice(e+2)}},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(41),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},function(t,e,n){var r=n(16).Symbol;t.exports=r},function(t,e){t.exports=function(t){return t}},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),o=n(4),a=n(8),u=n(12),s=n(11),c=n(1),l=n(2),f=n(6),p=n(0),h={labeled_statement:function(t,e){return new m(e,"labeled statement").setAST(t)},compound_statement:function(t,e){return C.createFromAST(t,e)},selection_statement:function(t,e){return new m(e,"selection statement").setAST(t)},while_statement:function(t,e){return new m(e,"while loop").setAST(t)},dowhile_statement:function(t,e){return new m(e,"do-while loop").setAST(t)},for_statement:function(t,e){return new m(e,"for loop").setAST(t)},break_statement:function(t,e){return new m(e,"break statement").setAST(t)},continue_statement:function(t,e){return new m(e,"continue statement").setAST(t)},return_statement:function(t,e){return E.createFromAST(t,e)},declaration_statement:function(t,e){return R.createFromAST(t,e)},expression_statement:function(t,e){return b.createFromAST(t,e)},null_statement:function(t,e){return new g(e).setAST(t)}};function d(t,e){return h[t.construct_type](t,e)}e.createStatementFromAST=d;var y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(i.BasicCPPConstruct);e.Statement=y;var v=function(t){function e(e,n){var r=t.call(this,e,"statement",n)||this;return n instanceof f.RuntimeFunction?r.containingRuntimeFunction=n:r.containingRuntimeFunction=n.containingRuntimeFunction,r}return r(e,t),e.prototype.popped=function(){t.prototype.popped.call(this),this.observable.send("reset")},e}(i.RuntimeConstruct);e.RuntimeStatement=v;var m=function(t){function e(e,n){var r=t.call(this,e)||this;return r.addNote(o.CPPError.lobster.unsupported_feature(r,n)),r}return r(e,t),e.prototype.createRuntimeStatement=function(t){throw new Error("Cannot create a runtime instance of an unsupported construct.")},e}(y);e.UnsupportedStatement=m;var b=function(t){function e(e,n){var r=t.call(this,e)||this;return r.attach(r.expression=n),r}return r(e,t),e.createFromAST=function(t,n){return new e(n,a.createExpressionFromAST(t.expression,n)).setAST(t)},e.prototype.createRuntimeStatement=function(t){return new _(this,t)},e.prototype.isTailChild=function(t){return{isTail:!0}},e}(y);e.ExpressionStatement=b;var _=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index="expr",r.expression=r.model.expression.createRuntimeExpression(r),r}return r(e,t),e.prototype.upNextImpl=function(){return"expr"===this.index&&(this.sim.push(this.expression),this.index="done"),!0},e.prototype.stepForwardImpl=function(){return this.sim.pop(),!1},e}(v);e.RuntimeExpressionStatement=_;var g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.createRuntimeStatement=function(t){return new w(this,t)},e.prototype.isTailChild=function(t){return{isTail:!0}},e}(y);e.NullStatement=g;var w=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.prototype.upNextImpl=function(){return!1},e.prototype.stepForwardImpl=function(){return!1},e}(v);e.RuntimeNullStatement=w;var R=function(t){function e(e,n){var r=t.call(this,e)||this;return n instanceof u.FunctionDefinition?(r.addNote(o.CPPError.stmt.function_definition_prohibited(r)),r.attach(r.declarations=n),r):(r.attachAll(r.declarations=n),r)}return r(e,t),e.createFromAST=function(t,n){return new e(n,u.createDeclarationFromAST(t.declaration,n)).setAST(t)},e.prototype.createRuntimeStatement=function(t){return new T(this,t)},e.prototype.isTailChild=function(t){return{isTail:!0}},e}(y);e.DeclarationStatement=R;var T=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=0,r}return r(e,t),e.prototype.upNextImpl=function(){var t=this.model.declarations.map(function(t){return t.initializer});if(this.index<t.length){var e=t[this.index];if(e){this.observable.send("initializing",this.index);var n=e.createRuntimeInitializer(this);this.sim.push(n)}++this.index,this.wait()}else this.sim.pop()},e.prototype.stepForwardImpl=function(){return!1},e}(v);e.RuntimeDeclarationStatement=T;var x,E=function(t){function e(e,n){var r=t.call(this,e)||this;r.expression=n;var i=r.context.containingFunction.type.returnType;return i instanceof c.VoidType?(n&&r.addNote(o.CPPError.stmt.returnStatement.exprVoid(r)),r):n?(i instanceof c.ReferenceType?r.returnInitializer=s.DirectInitializer.create(e,new l.ReturnByReferenceEntity(i.refTo),[n]):r.returnInitializer=s.DirectInitializer.create(e,new l.ReturnObjectEntity(i),[n]),r.attach(r.returnInitializer),r):(r.addNote(o.CPPError.stmt.returnStatement.empty(r)),r)}return r(e,t),e.createFromAST=function(t,n){return t.expression?new e(n,a.createExpressionFromAST(t.expression,n)).setAST(t):new e(n).setAST(t)},e.prototype.createRuntimeStatement=function(t){return new A(this,t)},e}(y);e.ReturnStatement=E,function(t){t[t.PUSH_INITIALIZER=0]="PUSH_INITIALIZER",t[t.RETURN=1]="RETURN"}(x||(x={}));var A=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=x.PUSH_INITIALIZER,e.returnInitializer&&(r.returnInitializer=e.returnInitializer.createRuntimeInitializer(r)),r}return r(e,t),e.prototype.upNextImpl=function(){this.index===x.PUSH_INITIALIZER&&(this.returnInitializer&&this.sim.push(this.returnInitializer),this.index=x.RETURN)},e.prototype.stepForwardImpl=function(){if(this.index===x.RETURN){var t=this.containingRuntimeFunction;this.observable.send("returned",{call:t.caller}),this.sim.popUntil(t)}},e}(v);e.RuntimeReturnStatement=A,e.isBlockContext=function(t){return t.contextualScope instanceof l.BlockScope};var C=function(t){function e(e){var n=t.call(this,e)||this;return n.statements=[],n.blockContext=function(t){return Object.assign({},t,{contextualScope:new l.BlockScope(t.contextualScope),localObjects:[],localReferences:[]})}(e),n}return r(e,t),e.createFromAST=function(t,n){var r=new e(n).setAST(t);return t.statements.forEach(function(t){return r.addStatement(d(t,n))}),r},e.prototype.addStatement=function(t){p.asMutable(this.statements).push(t),this.attach(t)},e.prototype.createRuntimeStatement=function(t){return new O(this,t)},e}(y);e.Block=C;var O=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.index=0,r.statements=e.statements.map(function(t){return t.createRuntimeStatement(r)}),r}return r(e,t),e.prototype.upNextImpl=function(){this.index<this.statements.length?(this.observable.send("index",this.index),this.sim.push(this.statements[this.index++])):this.sim.pop()},e.prototype.stepForwardImpl=function(){},e}(v);e.RuntimeBlock=O},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,a=200,u="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",s="Expected a function",c="__lodash_hash_undefined__",l=500,f="__lodash_placeholder__",p=1,h=2,d=4,y=1,v=2,m=1,b=2,_=4,g=8,w=16,R=32,T=64,x=128,E=256,A=512,C=30,O="...",S=800,P=16,j=1,I=2,F=1/0,N=9007199254740991,k=1.7976931348623157e308,z=NaN,V=4294967295,L=V-1,B=V>>>1,D=[["ary",x],["bind",m],["bindKey",b],["curry",g],["curryRight",w],["flip",A],["partial",R],["partialRight",T],["rearg",E]],M="[object Arguments]",U="[object Array]",W="[object AsyncFunction]",q="[object Boolean]",$="[object Date]",G="[object DOMException]",H="[object Error]",Q="[object Function]",Z="[object GeneratorFunction]",K="[object Map]",Y="[object Number]",X="[object Null]",J="[object Object]",tt="[object Proxy]",et="[object RegExp]",nt="[object Set]",rt="[object String]",it="[object Symbol]",ot="[object Undefined]",at="[object WeakMap]",ut="[object WeakSet]",st="[object ArrayBuffer]",ct="[object DataView]",lt="[object Float32Array]",ft="[object Float64Array]",pt="[object Int8Array]",ht="[object Int16Array]",dt="[object Int32Array]",yt="[object Uint8Array]",vt="[object Uint8ClampedArray]",mt="[object Uint16Array]",bt="[object Uint32Array]",_t=/\b__p \+= '';/g,gt=/\b(__p \+=) '' \+/g,wt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Rt=/&(?:amp|lt|gt|quot|#39);/g,Tt=/[&<>"']/g,xt=RegExp(Rt.source),Et=RegExp(Tt.source),At=/<%-([\s\S]+?)%>/g,Ct=/<%([\s\S]+?)%>/g,Ot=/<%=([\s\S]+?)%>/g,St=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Pt=/^\w*$/,jt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,It=/[\\^$.*+?()[\]{}|]/g,Ft=RegExp(It.source),Nt=/^\s+|\s+$/g,kt=/^\s+/,zt=/\s+$/,Vt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Lt=/\{\n\/\* \[wrapped with (.+)\] \*/,Bt=/,? & /,Dt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Mt=/\\(\\)?/g,Ut=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Wt=/\w*$/,qt=/^[-+]0x[0-9a-f]+$/i,$t=/^0b[01]+$/i,Gt=/^\[object .+?Constructor\]$/,Ht=/^0o[0-7]+$/i,Qt=/^(?:0|[1-9]\d*)$/,Zt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Kt=/($^)/,Yt=/['\n\r\u2028\u2029\\]/g,Xt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Jt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+Jt+"]",ne="["+Xt+"]",re="\\d+",ie="[\\u2700-\\u27bf]",oe="[a-z\\xdf-\\xf6\\xf8-\\xff]",ae="[^\\ud800-\\udfff"+Jt+re+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ue="\\ud83c[\\udffb-\\udfff]",se="[^\\ud800-\\udfff]",ce="(?:\\ud83c[\\udde6-\\uddff]){2}",le="[\\ud800-\\udbff][\\udc00-\\udfff]",fe="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pe="(?:"+oe+"|"+ae+")",he="(?:"+fe+"|"+ae+")",de="(?:"+ne+"|"+ue+")"+"?",ye="[\\ufe0e\\ufe0f]?"+de+("(?:\\u200d(?:"+[se,ce,le].join("|")+")[\\ufe0e\\ufe0f]?"+de+")*"),ve="(?:"+[ie,ce,le].join("|")+")"+ye,me="(?:"+[se+ne+"?",ne,ce,le,te].join("|")+")",be=RegExp("['’]","g"),_e=RegExp(ne,"g"),ge=RegExp(ue+"(?="+ue+")|"+me+ye,"g"),we=RegExp([fe+"?"+oe+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,fe,"$"].join("|")+")",he+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,fe+pe,"$"].join("|")+")",fe+"?"+pe+"+(?:['’](?:d|ll|m|re|s|t|ve))?",fe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",re,ve].join("|"),"g"),Re=RegExp("[\\u200d\\ud800-\\udfff"+Xt+"\\ufe0e\\ufe0f]"),Te=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,xe=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ee=-1,Ae={};Ae[lt]=Ae[ft]=Ae[pt]=Ae[ht]=Ae[dt]=Ae[yt]=Ae[vt]=Ae[mt]=Ae[bt]=!0,Ae[M]=Ae[U]=Ae[st]=Ae[q]=Ae[ct]=Ae[$]=Ae[H]=Ae[Q]=Ae[K]=Ae[Y]=Ae[J]=Ae[et]=Ae[nt]=Ae[rt]=Ae[at]=!1;var Ce={};Ce[M]=Ce[U]=Ce[st]=Ce[ct]=Ce[q]=Ce[$]=Ce[lt]=Ce[ft]=Ce[pt]=Ce[ht]=Ce[dt]=Ce[K]=Ce[Y]=Ce[J]=Ce[et]=Ce[nt]=Ce[rt]=Ce[it]=Ce[yt]=Ce[vt]=Ce[mt]=Ce[bt]=!0,Ce[H]=Ce[Q]=Ce[at]=!1;var Oe={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Se=parseFloat,Pe=parseInt,je="object"==typeof t&&t&&t.Object===Object&&t,Ie="object"==typeof self&&self&&self.Object===Object&&self,Fe=je||Ie||Function("return this")(),Ne="object"==typeof e&&e&&!e.nodeType&&e,ke=Ne&&"object"==typeof r&&r&&!r.nodeType&&r,ze=ke&&ke.exports===Ne,Ve=ze&&je.process,Le=function(){try{var t=ke&&ke.require&&ke.require("util").types;return t||Ve&&Ve.binding&&Ve.binding("util")}catch(t){}}(),Be=Le&&Le.isArrayBuffer,De=Le&&Le.isDate,Me=Le&&Le.isMap,Ue=Le&&Le.isRegExp,We=Le&&Le.isSet,qe=Le&&Le.isTypedArray;function $e(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Ge(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var a=t[i];e(r,a,n(a),t)}return r}function He(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Qe(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Ze(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Ke(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}function Ye(t,e){return!!(null==t?0:t.length)&&sn(t,e,0)>-1}function Xe(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Je(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function tn(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function en(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function nn(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function rn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var on=pn("length");function an(t,e,n){var r;return n(t,function(t,n,i){if(e(t,n,i))return r=n,!1}),r}function un(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function sn(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):un(t,ln,n)}function cn(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function ln(t){return t!=t}function fn(t,e){var n=null==t?0:t.length;return n?yn(t,e)/n:z}function pn(t){return function(e){return null==e?o:e[t]}}function hn(t){return function(e){return null==t?o:t[e]}}function dn(t,e,n,r,i){return i(t,function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)}),n}function yn(t,e){for(var n,r=-1,i=t.length;++r<i;){var a=e(t[r]);a!==o&&(n=n===o?a:n+a)}return n}function vn(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function mn(t){return function(e){return t(e)}}function bn(t,e){return Je(e,function(e){return t[e]})}function _n(t,e){return t.has(e)}function gn(t,e){for(var n=-1,r=t.length;++n<r&&sn(e,t[n],0)>-1;);return n}function wn(t,e){for(var n=t.length;n--&&sn(e,t[n],0)>-1;);return n}var Rn=hn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Tn=hn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function xn(t){return"\\"+Oe[t]}function En(t){return Re.test(t)}function An(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function Cn(t,e){return function(n){return t(e(n))}}function On(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n];a!==e&&a!==f||(t[n]=f,o[i++]=n)}return o}function Sn(t,e){return"__proto__"==e?o:t[e]}function Pn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function jn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}function In(t){return En(t)?function(t){var e=ge.lastIndex=0;for(;ge.test(t);)++e;return e}(t):on(t)}function Fn(t){return En(t)?function(t){return t.match(ge)||[]}(t):function(t){return t.split("")}(t)}var Nn=hn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var kn=function t(e){var n=(e=null==e?Fe:kn.defaults(Fe.Object(),e,kn.pick(Fe,xe))).Array,r=e.Date,i=e.Error,Xt=e.Function,Jt=e.Math,te=e.Object,ee=e.RegExp,ne=e.String,re=e.TypeError,ie=n.prototype,oe=Xt.prototype,ae=te.prototype,ue=e["__core-js_shared__"],se=oe.toString,ce=ae.hasOwnProperty,le=0,fe=function(){var t=/[^.]+$/.exec(ue&&ue.keys&&ue.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),pe=ae.toString,he=se.call(te),de=Fe._,ye=ee("^"+se.call(ce).replace(It,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ve=ze?e.Buffer:o,me=e.Symbol,ge=e.Uint8Array,Re=ve?ve.allocUnsafe:o,Oe=Cn(te.getPrototypeOf,te),je=te.create,Ie=ae.propertyIsEnumerable,Ne=ie.splice,ke=me?me.isConcatSpreadable:o,Ve=me?me.iterator:o,Le=me?me.toStringTag:o,on=function(){try{var t=Bo(te,"defineProperty");return t({},"",{}),t}catch(t){}}(),hn=e.clearTimeout!==Fe.clearTimeout&&e.clearTimeout,zn=r&&r.now!==Fe.Date.now&&r.now,Vn=e.setTimeout!==Fe.setTimeout&&e.setTimeout,Ln=Jt.ceil,Bn=Jt.floor,Dn=te.getOwnPropertySymbols,Mn=ve?ve.isBuffer:o,Un=e.isFinite,Wn=ie.join,qn=Cn(te.keys,te),$n=Jt.max,Gn=Jt.min,Hn=r.now,Qn=e.parseInt,Zn=Jt.random,Kn=ie.reverse,Yn=Bo(e,"DataView"),Xn=Bo(e,"Map"),Jn=Bo(e,"Promise"),tr=Bo(e,"Set"),er=Bo(e,"WeakMap"),nr=Bo(te,"create"),rr=er&&new er,ir={},or=la(Yn),ar=la(Xn),ur=la(Jn),sr=la(tr),cr=la(er),lr=me?me.prototype:o,fr=lr?lr.valueOf:o,pr=lr?lr.toString:o;function hr(t){if(Cu(t)&&!vu(t)&&!(t instanceof mr)){if(t instanceof vr)return t;if(ce.call(t,"__wrapped__"))return fa(t)}return new vr(t)}var dr=function(){function t(){}return function(e){if(!Au(e))return{};if(je)return je(e);t.prototype=e;var n=new t;return t.prototype=o,n}}();function yr(){}function vr(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function mr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=V,this.__views__=[]}function br(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function _r(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function gr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function wr(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new gr;++e<n;)this.add(t[e])}function Rr(t){var e=this.__data__=new _r(t);this.size=e.size}function Tr(t,e){var n=vu(t),r=!n&&yu(t),i=!n&&!r&&gu(t),o=!n&&!r&&!i&&ku(t),a=n||r||i||o,u=a?vn(t.length,ne):[],s=u.length;for(var c in t)!e&&!ce.call(t,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Go(c,s))||u.push(c);return u}function xr(t){var e=t.length;return e?t[wi(0,e-1)]:o}function Er(t,e){return ua(no(t),Nr(e,0,t.length))}function Ar(t){return ua(no(t))}function Cr(t,e,n){(n===o||pu(t[e],n))&&(n!==o||e in t)||Ir(t,e,n)}function Or(t,e,n){var r=t[e];ce.call(t,e)&&pu(r,n)&&(n!==o||e in t)||Ir(t,e,n)}function Sr(t,e){for(var n=t.length;n--;)if(pu(t[n][0],e))return n;return-1}function Pr(t,e,n,r){return Br(t,function(t,i,o){e(r,t,n(t),o)}),r}function jr(t,e){return t&&ro(e,rs(e),t)}function Ir(t,e,n){"__proto__"==e&&on?on(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Fr(t,e){for(var r=-1,i=e.length,a=n(i),u=null==t;++r<i;)a[r]=u?o:Xu(t,e[r]);return a}function Nr(t,e,n){return t==t&&(n!==o&&(t=t<=n?t:n),e!==o&&(t=t>=e?t:e)),t}function kr(t,e,n,r,i,a){var u,s=e&p,c=e&h,l=e&d;if(n&&(u=i?n(t,r,i,a):n(t)),u!==o)return u;if(!Au(t))return t;var f=vu(t);if(f){if(u=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&ce.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!s)return no(t,u)}else{var y=Uo(t),v=y==Q||y==Z;if(gu(t))return Ki(t,s);if(y==J||y==M||v&&!i){if(u=c||v?{}:qo(t),!s)return c?function(t,e){return ro(t,Mo(t),e)}(t,function(t,e){return t&&ro(e,is(e),t)}(u,t)):function(t,e){return ro(t,Do(t),e)}(t,jr(u,t))}else{if(!Ce[y])return i?t:{};u=function(t,e,n){var r=t.constructor;switch(e){case st:return Yi(t);case q:case $:return new r(+t);case ct:return function(t,e){var n=e?Yi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case lt:case ft:case pt:case ht:case dt:case yt:case vt:case mt:case bt:return Xi(t,n);case K:return new r;case Y:case rt:return new r(t);case et:return function(t){var e=new t.constructor(t.source,Wt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case nt:return new r;case it:return function(t){return fr?te(fr.call(t)):{}}(t)}}(t,y,s)}}a||(a=new Rr);var m=a.get(t);if(m)return m;if(a.set(t,u),Iu(t))return t.forEach(function(r){u.add(kr(r,e,n,r,t,a))}),u;if(Ou(t))return t.forEach(function(r,i){u.set(i,kr(r,e,n,i,t,a))}),u;var b=f?o:(l?c?Io:jo:c?is:rs)(t);return He(b||t,function(r,i){b&&(r=t[i=r]),Or(u,i,kr(r,e,n,i,t,a))}),u}function zr(t,e,n){var r=n.length;if(null==t)return!r;for(t=te(t);r--;){var i=n[r],a=e[i],u=t[i];if(u===o&&!(i in t)||!a(u))return!1}return!0}function Vr(t,e,n){if("function"!=typeof t)throw new re(s);return ra(function(){t.apply(o,n)},e)}function Lr(t,e,n,r){var i=-1,o=Ye,u=!0,s=t.length,c=[],l=e.length;if(!s)return c;n&&(e=Je(e,mn(n))),r?(o=Xe,u=!1):e.length>=a&&(o=_n,u=!1,e=new wr(e));t:for(;++i<s;){var f=t[i],p=null==n?f:n(f);if(f=r||0!==f?f:0,u&&p==p){for(var h=l;h--;)if(e[h]===p)continue t;c.push(f)}else o(e,p,r)||c.push(f)}return c}hr.templateSettings={escape:At,evaluate:Ct,interpolate:Ot,variable:"",imports:{_:hr}},hr.prototype=yr.prototype,hr.prototype.constructor=hr,vr.prototype=dr(yr.prototype),vr.prototype.constructor=vr,mr.prototype=dr(yr.prototype),mr.prototype.constructor=mr,br.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},br.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},br.prototype.get=function(t){var e=this.__data__;if(nr){var n=e[t];return n===c?o:n}return ce.call(e,t)?e[t]:o},br.prototype.has=function(t){var e=this.__data__;return nr?e[t]!==o:ce.call(e,t)},br.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=nr&&e===o?c:e,this},_r.prototype.clear=function(){this.__data__=[],this.size=0},_r.prototype.delete=function(t){var e=this.__data__,n=Sr(e,t);return!(n<0||(n==e.length-1?e.pop():Ne.call(e,n,1),--this.size,0))},_r.prototype.get=function(t){var e=this.__data__,n=Sr(e,t);return n<0?o:e[n][1]},_r.prototype.has=function(t){return Sr(this.__data__,t)>-1},_r.prototype.set=function(t,e){var n=this.__data__,r=Sr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},gr.prototype.clear=function(){this.size=0,this.__data__={hash:new br,map:new(Xn||_r),string:new br}},gr.prototype.delete=function(t){var e=Vo(this,t).delete(t);return this.size-=e?1:0,e},gr.prototype.get=function(t){return Vo(this,t).get(t)},gr.prototype.has=function(t){return Vo(this,t).has(t)},gr.prototype.set=function(t,e){var n=Vo(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(t){return this.__data__.set(t,c),this},wr.prototype.has=function(t){return this.__data__.has(t)},Rr.prototype.clear=function(){this.__data__=new _r,this.size=0},Rr.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Rr.prototype.get=function(t){return this.__data__.get(t)},Rr.prototype.has=function(t){return this.__data__.has(t)},Rr.prototype.set=function(t,e){var n=this.__data__;if(n instanceof _r){var r=n.__data__;if(!Xn||r.length<a-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new gr(r)}return n.set(t,e),this.size=n.size,this};var Br=ao(Hr),Dr=ao(Qr,!0);function Mr(t,e){var n=!0;return Br(t,function(t,r,i){return n=!!e(t,r,i)}),n}function Ur(t,e,n){for(var r=-1,i=t.length;++r<i;){var a=t[r],u=e(a);if(null!=u&&(s===o?u==u&&!Nu(u):n(u,s)))var s=u,c=a}return c}function Wr(t,e){var n=[];return Br(t,function(t,r,i){e(t,r,i)&&n.push(t)}),n}function qr(t,e,n,r,i){var o=-1,a=t.length;for(n||(n=$o),i||(i=[]);++o<a;){var u=t[o];e>0&&n(u)?e>1?qr(u,e-1,n,r,i):tn(i,u):r||(i[i.length]=u)}return i}var $r=uo(),Gr=uo(!0);function Hr(t,e){return t&&$r(t,e,rs)}function Qr(t,e){return t&&Gr(t,e,rs)}function Zr(t,e){return Ke(e,function(e){return Tu(t[e])})}function Kr(t,e){for(var n=0,r=(e=Gi(e,t)).length;null!=t&&n<r;)t=t[ca(e[n++])];return n&&n==r?t:o}function Yr(t,e,n){var r=e(t);return vu(t)?r:tn(r,n(t))}function Xr(t){return null==t?t===o?ot:X:Le&&Le in te(t)?function(t){var e=ce.call(t,Le),n=t[Le];try{t[Le]=o;var r=!0}catch(t){}var i=pe.call(t);return r&&(e?t[Le]=n:delete t[Le]),i}(t):function(t){return pe.call(t)}(t)}function Jr(t,e){return t>e}function ti(t,e){return null!=t&&ce.call(t,e)}function ei(t,e){return null!=t&&e in te(t)}function ni(t,e,r){for(var i=r?Xe:Ye,a=t[0].length,u=t.length,s=u,c=n(u),l=1/0,f=[];s--;){var p=t[s];s&&e&&(p=Je(p,mn(e))),l=Gn(p.length,l),c[s]=!r&&(e||a>=120&&p.length>=120)?new wr(s&&p):o}p=t[0];var h=-1,d=c[0];t:for(;++h<a&&f.length<l;){var y=p[h],v=e?e(y):y;if(y=r||0!==y?y:0,!(d?_n(d,v):i(f,v,r))){for(s=u;--s;){var m=c[s];if(!(m?_n(m,v):i(t[s],v,r)))continue t}d&&d.push(v),f.push(y)}}return f}function ri(t,e,n){var r=null==(t=ea(t,e=Gi(e,t)))?t:t[ca(Ra(e))];return null==r?o:$e(r,t,n)}function ii(t){return Cu(t)&&Xr(t)==M}function oi(t,e,n,r,i){return t===e||(null==t||null==e||!Cu(t)&&!Cu(e)?t!=t&&e!=e:function(t,e,n,r,i,a){var u=vu(t),s=vu(e),c=u?U:Uo(t),l=s?U:Uo(e),f=(c=c==M?J:c)==J,p=(l=l==M?J:l)==J,h=c==l;if(h&&gu(t)){if(!gu(e))return!1;u=!0,f=!1}if(h&&!f)return a||(a=new Rr),u||ku(t)?So(t,e,n,r,i,a):function(t,e,n,r,i,o,a){switch(n){case ct:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case st:return!(t.byteLength!=e.byteLength||!o(new ge(t),new ge(e)));case q:case $:case Y:return pu(+t,+e);case H:return t.name==e.name&&t.message==e.message;case et:case rt:return t==e+"";case K:var u=An;case nt:var s=r&y;if(u||(u=Pn),t.size!=e.size&&!s)return!1;var c=a.get(t);if(c)return c==e;r|=v,a.set(t,e);var l=So(u(t),u(e),r,i,o,a);return a.delete(t),l;case it:if(fr)return fr.call(t)==fr.call(e)}return!1}(t,e,c,n,r,i,a);if(!(n&y)){var d=f&&ce.call(t,"__wrapped__"),m=p&&ce.call(e,"__wrapped__");if(d||m){var b=d?t.value():t,_=m?e.value():e;return a||(a=new Rr),i(b,_,n,r,a)}}return!!h&&(a||(a=new Rr),function(t,e,n,r,i,a){var u=n&y,s=jo(t),c=s.length,l=jo(e).length;if(c!=l&&!u)return!1;for(var f=c;f--;){var p=s[f];if(!(u?p in e:ce.call(e,p)))return!1}var h=a.get(t);if(h&&a.get(e))return h==e;var d=!0;a.set(t,e),a.set(e,t);for(var v=u;++f<c;){p=s[f];var m=t[p],b=e[p];if(r)var _=u?r(b,m,p,e,t,a):r(m,b,p,t,e,a);if(!(_===o?m===b||i(m,b,n,r,a):_)){d=!1;break}v||(v="constructor"==p)}if(d&&!v){var g=t.constructor,w=e.constructor;g!=w&&"constructor"in t&&"constructor"in e&&!("function"==typeof g&&g instanceof g&&"function"==typeof w&&w instanceof w)&&(d=!1)}return a.delete(t),a.delete(e),d}(t,e,n,r,i,a))}(t,e,n,r,oi,i))}function ai(t,e,n,r){var i=n.length,a=i,u=!r;if(null==t)return!a;for(t=te(t);i--;){var s=n[i];if(u&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++i<a;){var c=(s=n[i])[0],l=t[c],f=s[1];if(u&&s[2]){if(l===o&&!(c in t))return!1}else{var p=new Rr;if(r)var h=r(l,f,c,t,e,p);if(!(h===o?oi(f,l,y|v,r,p):h))return!1}}return!0}function ui(t){return!(!Au(t)||function(t){return!!fe&&fe in t}(t))&&(Tu(t)?ye:Gt).test(la(t))}function si(t){return"function"==typeof t?t:null==t?Ss:"object"==typeof t?vu(t)?di(t[0],t[1]):hi(t):Ls(t)}function ci(t){if(!Yo(t))return qn(t);var e=[];for(var n in te(t))ce.call(t,n)&&"constructor"!=n&&e.push(n);return e}function li(t){if(!Au(t))return function(t){var e=[];if(null!=t)for(var n in te(t))e.push(n);return e}(t);var e=Yo(t),n=[];for(var r in t)("constructor"!=r||!e&&ce.call(t,r))&&n.push(r);return n}function fi(t,e){return t<e}function pi(t,e){var r=-1,i=bu(t)?n(t.length):[];return Br(t,function(t,n,o){i[++r]=e(t,n,o)}),i}function hi(t){var e=Lo(t);return 1==e.length&&e[0][2]?Jo(e[0][0],e[0][1]):function(n){return n===t||ai(n,t,e)}}function di(t,e){return Qo(t)&&Xo(e)?Jo(ca(t),e):function(n){var r=Xu(n,t);return r===o&&r===e?Ju(n,t):oi(e,r,y|v)}}function yi(t,e,n,r,i){t!==e&&$r(e,function(a,u){if(Au(a))i||(i=new Rr),function(t,e,n,r,i,a,u){var s=Sn(t,n),c=Sn(e,n),l=u.get(c);if(l)Cr(t,n,l);else{var f=a?a(s,c,n+"",t,e,u):o,p=f===o;if(p){var h=vu(c),d=!h&&gu(c),y=!h&&!d&&ku(c);f=c,h||d||y?vu(s)?f=s:_u(s)?f=no(s):d?(p=!1,f=Ki(c,!0)):y?(p=!1,f=Xi(c,!0)):f=[]:Pu(c)||yu(c)?(f=s,yu(s)?f=Wu(s):(!Au(s)||r&&Tu(s))&&(f=qo(c))):p=!1}p&&(u.set(c,f),i(f,c,r,a,u),u.delete(c)),Cr(t,n,f)}}(t,e,u,n,yi,r,i);else{var s=r?r(Sn(t,u),a,u+"",t,e,i):o;s===o&&(s=a),Cr(t,u,s)}},is)}function vi(t,e){var n=t.length;if(n)return Go(e+=e<0?n:0,n)?t[e]:o}function mi(t,e,n){var r=-1;return e=Je(e.length?e:[Ss],mn(zo())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(pi(t,function(t,n,i){return{criteria:Je(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,a=i.length,u=n.length;++r<a;){var s=Ji(i[r],o[r]);if(s){if(r>=u)return s;var c=n[r];return s*("desc"==c?-1:1)}}return t.index-e.index}(t,e,n)})}function bi(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var a=e[r],u=Kr(t,a);n(u,a)&&Ai(o,Gi(a,t),u)}return o}function _i(t,e,n,r){var i=r?cn:sn,o=-1,a=e.length,u=t;for(t===e&&(e=no(e)),n&&(u=Je(t,mn(n)));++o<a;)for(var s=0,c=e[o],l=n?n(c):c;(s=i(u,l,s,r))>-1;)u!==t&&Ne.call(u,s,1),Ne.call(t,s,1);return t}function gi(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;Go(i)?Ne.call(t,i,1):Li(t,i)}}return t}function wi(t,e){return t+Bn(Zn()*(e-t+1))}function Ri(t,e){var n="";if(!t||e<1||e>N)return n;do{e%2&&(n+=t),(e=Bn(e/2))&&(t+=t)}while(e);return n}function Ti(t,e){return ia(ta(t,e,Ss),t+"")}function xi(t){return xr(ps(t))}function Ei(t,e){var n=ps(t);return ua(n,Nr(e,0,n.length))}function Ai(t,e,n,r){if(!Au(t))return t;for(var i=-1,a=(e=Gi(e,t)).length,u=a-1,s=t;null!=s&&++i<a;){var c=ca(e[i]),l=n;if(i!=u){var f=s[c];(l=r?r(f,c,s):o)===o&&(l=Au(f)?f:Go(e[i+1])?[]:{})}Or(s,c,l),s=s[c]}return t}var Ci=rr?function(t,e){return rr.set(t,e),t}:Ss,Oi=on?function(t,e){return on(t,"toString",{configurable:!0,enumerable:!1,value:As(e),writable:!0})}:Ss;function Si(t){return ua(ps(t))}function Pi(t,e,r){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(r=r>o?o:r)<0&&(r+=o),o=e>r?0:r-e>>>0,e>>>=0;for(var a=n(o);++i<o;)a[i]=t[i+e];return a}function ji(t,e){var n;return Br(t,function(t,r,i){return!(n=e(t,r,i))}),!!n}function Ii(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=B){for(;r<i;){var o=r+i>>>1,a=t[o];null!==a&&!Nu(a)&&(n?a<=e:a<e)?r=o+1:i=o}return i}return Fi(t,e,Ss,n)}function Fi(t,e,n,r){e=n(e);for(var i=0,a=null==t?0:t.length,u=e!=e,s=null===e,c=Nu(e),l=e===o;i<a;){var f=Bn((i+a)/2),p=n(t[f]),h=p!==o,d=null===p,y=p==p,v=Nu(p);if(u)var m=r||y;else m=l?y&&(r||h):s?y&&h&&(r||!d):c?y&&h&&!d&&(r||!v):!d&&!v&&(r?p<=e:p<e);m?i=f+1:a=f}return Gn(a,L)}function Ni(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n],u=e?e(a):a;if(!n||!pu(u,s)){var s=u;o[i++]=0===a?0:a}}return o}function ki(t){return"number"==typeof t?t:Nu(t)?z:+t}function zi(t){if("string"==typeof t)return t;if(vu(t))return Je(t,zi)+"";if(Nu(t))return pr?pr.call(t):"";var e=t+"";return"0"==e&&1/t==-F?"-0":e}function Vi(t,e,n){var r=-1,i=Ye,o=t.length,u=!0,s=[],c=s;if(n)u=!1,i=Xe;else if(o>=a){var l=e?null:To(t);if(l)return Pn(l);u=!1,i=_n,c=new wr}else c=e?[]:s;t:for(;++r<o;){var f=t[r],p=e?e(f):f;if(f=n||0!==f?f:0,u&&p==p){for(var h=c.length;h--;)if(c[h]===p)continue t;e&&c.push(p),s.push(f)}else i(c,p,n)||(c!==s&&c.push(p),s.push(f))}return s}function Li(t,e){return null==(t=ea(t,e=Gi(e,t)))||delete t[ca(Ra(e))]}function Bi(t,e,n,r){return Ai(t,e,n(Kr(t,e)),r)}function Di(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?Pi(t,r?0:o,r?o+1:i):Pi(t,r?o+1:0,r?i:o)}function Mi(t,e){var n=t;return n instanceof mr&&(n=n.value()),en(e,function(t,e){return e.func.apply(e.thisArg,tn([t],e.args))},n)}function Ui(t,e,r){var i=t.length;if(i<2)return i?Vi(t[0]):[];for(var o=-1,a=n(i);++o<i;)for(var u=t[o],s=-1;++s<i;)s!=o&&(a[o]=Lr(a[o]||u,t[s],e,r));return Vi(qr(a,1),e,r)}function Wi(t,e,n){for(var r=-1,i=t.length,a=e.length,u={};++r<i;){var s=r<a?e[r]:o;n(u,t[r],s)}return u}function qi(t){return _u(t)?t:[]}function $i(t){return"function"==typeof t?t:Ss}function Gi(t,e){return vu(t)?t:Qo(t,e)?[t]:sa(qu(t))}var Hi=Ti;function Qi(t,e,n){var r=t.length;return n=n===o?r:n,!e&&n>=r?t:Pi(t,e,n)}var Zi=hn||function(t){return Fe.clearTimeout(t)};function Ki(t,e){if(e)return t.slice();var n=t.length,r=Re?Re(n):new t.constructor(n);return t.copy(r),r}function Yi(t){var e=new t.constructor(t.byteLength);return new ge(e).set(new ge(t)),e}function Xi(t,e){var n=e?Yi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Ji(t,e){if(t!==e){var n=t!==o,r=null===t,i=t==t,a=Nu(t),u=e!==o,s=null===e,c=e==e,l=Nu(e);if(!s&&!l&&!a&&t>e||a&&u&&c&&!s&&!l||r&&u&&c||!n&&c||!i)return 1;if(!r&&!a&&!l&&t<e||l&&n&&i&&!r&&!a||s&&n&&i||!u&&i||!c)return-1}return 0}function to(t,e,r,i){for(var o=-1,a=t.length,u=r.length,s=-1,c=e.length,l=$n(a-u,0),f=n(c+l),p=!i;++s<c;)f[s]=e[s];for(;++o<u;)(p||o<a)&&(f[r[o]]=t[o]);for(;l--;)f[s++]=t[o++];return f}function eo(t,e,r,i){for(var o=-1,a=t.length,u=-1,s=r.length,c=-1,l=e.length,f=$n(a-s,0),p=n(f+l),h=!i;++o<f;)p[o]=t[o];for(var d=o;++c<l;)p[d+c]=e[c];for(;++u<s;)(h||o<a)&&(p[d+r[u]]=t[o++]);return p}function no(t,e){var r=-1,i=t.length;for(e||(e=n(i));++r<i;)e[r]=t[r];return e}function ro(t,e,n,r){var i=!n;n||(n={});for(var a=-1,u=e.length;++a<u;){var s=e[a],c=r?r(n[s],t[s],s,n,t):o;c===o&&(c=t[s]),i?Ir(n,s,c):Or(n,s,c)}return n}function io(t,e){return function(n,r){var i=vu(n)?Ge:Pr,o=e?e():{};return i(n,t,zo(r,2),o)}}function oo(t){return Ti(function(e,n){var r=-1,i=n.length,a=i>1?n[i-1]:o,u=i>2?n[2]:o;for(a=t.length>3&&"function"==typeof a?(i--,a):o,u&&Ho(n[0],n[1],u)&&(a=i<3?o:a,i=1),e=te(e);++r<i;){var s=n[r];s&&t(e,s,r,a)}return e})}function ao(t,e){return function(n,r){if(null==n)return n;if(!bu(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=te(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function uo(t){return function(e,n,r){for(var i=-1,o=te(e),a=r(e),u=a.length;u--;){var s=a[t?u:++i];if(!1===n(o[s],s,o))break}return e}}function so(t){return function(e){var n=En(e=qu(e))?Fn(e):o,r=n?n[0]:e.charAt(0),i=n?Qi(n,1).join(""):e.slice(1);return r[t]()+i}}function co(t){return function(e){return en(Ts(ys(e).replace(be,"")),t,"")}}function lo(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=dr(t.prototype),r=t.apply(n,e);return Au(r)?r:n}}function fo(t){return function(e,n,r){var i=te(e);if(!bu(e)){var a=zo(n,3);e=rs(e),n=function(t){return a(i[t],t,i)}}var u=t(e,n,r);return u>-1?i[a?e[u]:u]:o}}function po(t){return Po(function(e){var n=e.length,r=n,i=vr.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new re(s);if(i&&!u&&"wrapper"==No(a))var u=new vr([],!0)}for(r=u?r:n;++r<n;){var c=No(a=e[r]),l="wrapper"==c?Fo(a):o;u=l&&Zo(l[0])&&l[1]==(x|g|R|E)&&!l[4].length&&1==l[9]?u[No(l[0])].apply(u,l[3]):1==a.length&&Zo(a)?u[c]():u.thru(a)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&vu(r))return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}})}function ho(t,e,r,i,a,u,s,c,l,f){var p=e&x,h=e&m,d=e&b,y=e&(g|w),v=e&A,_=d?o:lo(t);return function m(){for(var b=arguments.length,g=n(b),w=b;w--;)g[w]=arguments[w];if(y)var R=ko(m),T=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(g,R);if(i&&(g=to(g,i,a,y)),u&&(g=eo(g,u,s,y)),b-=T,y&&b<f){var x=On(g,R);return wo(t,e,ho,m.placeholder,r,g,x,c,l,f-b)}var E=h?r:this,A=d?E[t]:t;return b=g.length,c?g=function(t,e){for(var n=t.length,r=Gn(e.length,n),i=no(t);r--;){var a=e[r];t[r]=Go(a,n)?i[a]:o}return t}(g,c):v&&b>1&&g.reverse(),p&&l<b&&(g.length=l),this&&this!==Fe&&this instanceof m&&(A=_||lo(A)),A.apply(E,g)}}function yo(t,e){return function(n,r){return function(t,e,n,r){return Hr(t,function(t,i,o){e(r,n(t),i,o)}),r}(n,t,e(r),{})}}function vo(t,e){return function(n,r){var i;if(n===o&&r===o)return e;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=zi(n),r=zi(r)):(n=ki(n),r=ki(r)),i=t(n,r)}return i}}function mo(t){return Po(function(e){return e=Je(e,mn(zo())),Ti(function(n){var r=this;return t(e,function(t){return $e(t,r,n)})})})}function bo(t,e){var n=(e=e===o?" ":zi(e)).length;if(n<2)return n?Ri(e,t):e;var r=Ri(e,Ln(t/In(e)));return En(e)?Qi(Fn(r),0,t).join(""):r.slice(0,t)}function _o(t){return function(e,r,i){return i&&"number"!=typeof i&&Ho(e,r,i)&&(r=i=o),e=Bu(e),r===o?(r=e,e=0):r=Bu(r),function(t,e,r,i){for(var o=-1,a=$n(Ln((e-t)/(r||1)),0),u=n(a);a--;)u[i?a:++o]=t,t+=r;return u}(e,r,i=i===o?e<r?1:-1:Bu(i),t)}}function go(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=Uu(e),n=Uu(n)),t(e,n)}}function wo(t,e,n,r,i,a,u,s,c,l){var f=e&g;e|=f?R:T,(e&=~(f?T:R))&_||(e&=~(m|b));var p=[t,e,i,f?a:o,f?u:o,f?o:a,f?o:u,s,c,l],h=n.apply(o,p);return Zo(t)&&na(h,p),h.placeholder=r,oa(h,t,e)}function Ro(t){var e=Jt[t];return function(t,n){if(t=Uu(t),n=null==n?0:Gn(Du(n),292)){var r=(qu(t)+"e").split("e");return+((r=(qu(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var To=tr&&1/Pn(new tr([,-0]))[1]==F?function(t){return new tr(t)}:Ns;function xo(t){return function(e){var n=Uo(e);return n==K?An(e):n==nt?jn(e):function(t,e){return Je(e,function(e){return[e,t[e]]})}(e,t(e))}}function Eo(t,e,r,i,a,u,c,l){var p=e&b;if(!p&&"function"!=typeof t)throw new re(s);var h=i?i.length:0;if(h||(e&=~(R|T),i=a=o),c=c===o?c:$n(Du(c),0),l=l===o?l:Du(l),h-=a?a.length:0,e&T){var d=i,y=a;i=a=o}var v=p?o:Fo(t),A=[t,e,r,i,a,d,y,u,c,l];if(v&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<(m|b|x),a=r==x&&n==g||r==x&&n==E&&t[7].length<=e[8]||r==(x|E)&&e[7].length<=e[8]&&n==g;if(!o&&!a)return t;r&m&&(t[2]=e[2],i|=n&m?0:_);var u=e[3];if(u){var s=t[3];t[3]=s?to(s,u,e[4]):u,t[4]=s?On(t[3],f):e[4]}(u=e[5])&&(s=t[5],t[5]=s?eo(s,u,e[6]):u,t[6]=s?On(t[5],f):e[6]),(u=e[7])&&(t[7]=u),r&x&&(t[8]=null==t[8]?e[8]:Gn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(A,v),t=A[0],e=A[1],r=A[2],i=A[3],a=A[4],!(l=A[9]=A[9]===o?p?0:t.length:$n(A[9]-h,0))&&e&(g|w)&&(e&=~(g|w)),e&&e!=m)C=e==g||e==w?function(t,e,r){var i=lo(t);return function a(){for(var u=arguments.length,s=n(u),c=u,l=ko(a);c--;)s[c]=arguments[c];var f=u<3&&s[0]!==l&&s[u-1]!==l?[]:On(s,l);return(u-=f.length)<r?wo(t,e,ho,a.placeholder,o,s,f,o,o,r-u):$e(this&&this!==Fe&&this instanceof a?i:t,this,s)}}(t,e,l):e!=R&&e!=(m|R)||a.length?ho.apply(o,A):function(t,e,r,i){var o=e&m,a=lo(t);return function e(){for(var u=-1,s=arguments.length,c=-1,l=i.length,f=n(l+s),p=this&&this!==Fe&&this instanceof e?a:t;++c<l;)f[c]=i[c];for(;s--;)f[c++]=arguments[++u];return $e(p,o?r:this,f)}}(t,e,r,i);else var C=function(t,e,n){var r=e&m,i=lo(t);return function e(){return(this&&this!==Fe&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,r);return oa((v?Ci:na)(C,A),t,e)}function Ao(t,e,n,r){return t===o||pu(t,ae[n])&&!ce.call(r,n)?e:t}function Co(t,e,n,r,i,a){return Au(t)&&Au(e)&&(a.set(e,t),yi(t,e,o,Co,a),a.delete(e)),t}function Oo(t){return Pu(t)?o:t}function So(t,e,n,r,i,a){var u=n&y,s=t.length,c=e.length;if(s!=c&&!(u&&c>s))return!1;var l=a.get(t);if(l&&a.get(e))return l==e;var f=-1,p=!0,h=n&v?new wr:o;for(a.set(t,e),a.set(e,t);++f<s;){var d=t[f],m=e[f];if(r)var b=u?r(m,d,f,e,t,a):r(d,m,f,t,e,a);if(b!==o){if(b)continue;p=!1;break}if(h){if(!rn(e,function(t,e){if(!_n(h,e)&&(d===t||i(d,t,n,r,a)))return h.push(e)})){p=!1;break}}else if(d!==m&&!i(d,m,n,r,a)){p=!1;break}}return a.delete(t),a.delete(e),p}function Po(t){return ia(ta(t,o,ma),t+"")}function jo(t){return Yr(t,rs,Do)}function Io(t){return Yr(t,is,Mo)}var Fo=rr?function(t){return rr.get(t)}:Ns;function No(t){for(var e=t.name+"",n=ir[e],r=ce.call(ir,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function ko(t){return(ce.call(hr,"placeholder")?hr:t).placeholder}function zo(){var t=hr.iteratee||Ps;return t=t===Ps?si:t,arguments.length?t(arguments[0],arguments[1]):t}function Vo(t,e){var n=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?n["string"==typeof e?"string":"hash"]:n.map}function Lo(t){for(var e=rs(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Xo(i)]}return e}function Bo(t,e){var n=function(t,e){return null==t?o:t[e]}(t,e);return ui(n)?n:o}var Do=Dn?function(t){return null==t?[]:(t=te(t),Ke(Dn(t),function(e){return Ie.call(t,e)}))}:Ms,Mo=Dn?function(t){for(var e=[];t;)tn(e,Do(t)),t=Oe(t);return e}:Ms,Uo=Xr;function Wo(t,e,n){for(var r=-1,i=(e=Gi(e,t)).length,o=!1;++r<i;){var a=ca(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Eu(i)&&Go(a,i)&&(vu(t)||yu(t))}function qo(t){return"function"!=typeof t.constructor||Yo(t)?{}:dr(Oe(t))}function $o(t){return vu(t)||yu(t)||!!(ke&&t&&t[ke])}function Go(t,e){var n=typeof t;return!!(e=null==e?N:e)&&("number"==n||"symbol"!=n&&Qt.test(t))&&t>-1&&t%1==0&&t<e}function Ho(t,e,n){if(!Au(n))return!1;var r=typeof e;return!!("number"==r?bu(n)&&Go(e,n.length):"string"==r&&e in n)&&pu(n[e],t)}function Qo(t,e){if(vu(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Nu(t))||Pt.test(t)||!St.test(t)||null!=e&&t in te(e)}function Zo(t){var e=No(t),n=hr[e];if("function"!=typeof n||!(e in mr.prototype))return!1;if(t===n)return!0;var r=Fo(n);return!!r&&t===r[0]}(Yn&&Uo(new Yn(new ArrayBuffer(1)))!=ct||Xn&&Uo(new Xn)!=K||Jn&&"[object Promise]"!=Uo(Jn.resolve())||tr&&Uo(new tr)!=nt||er&&Uo(new er)!=at)&&(Uo=function(t){var e=Xr(t),n=e==J?t.constructor:o,r=n?la(n):"";if(r)switch(r){case or:return ct;case ar:return K;case ur:return"[object Promise]";case sr:return nt;case cr:return at}return e});var Ko=ue?Tu:Us;function Yo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||ae)}function Xo(t){return t==t&&!Au(t)}function Jo(t,e){return function(n){return null!=n&&n[t]===e&&(e!==o||t in te(n))}}function ta(t,e,r){return e=$n(e===o?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=$n(i.length-e,0),u=n(a);++o<a;)u[o]=i[e+o];o=-1;for(var s=n(e+1);++o<e;)s[o]=i[o];return s[e]=r(u),$e(t,this,s)}}function ea(t,e){return e.length<2?t:Kr(t,Pi(e,0,-1))}var na=aa(Ci),ra=Vn||function(t,e){return Fe.setTimeout(t,e)},ia=aa(Oi);function oa(t,e,n){var r=e+"";return ia(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Vt,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return He(D,function(n){var r="_."+n[0];e&n[1]&&!Ye(t,r)&&t.push(r)}),t.sort()}(function(t){var e=t.match(Lt);return e?e[1].split(Bt):[]}(r),n)))}function aa(t){var e=0,n=0;return function(){var r=Hn(),i=P-(r-n);if(n=r,i>0){if(++e>=S)return arguments[0]}else e=0;return t.apply(o,arguments)}}function ua(t,e){var n=-1,r=t.length,i=r-1;for(e=e===o?r:e;++n<e;){var a=wi(n,i),u=t[a];t[a]=t[n],t[n]=u}return t.length=e,t}var sa=function(t){var e=au(t,function(t){return n.size===l&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(jt,function(t,n,r,i){e.push(r?i.replace(Mt,"$1"):n||t)}),e});function ca(t){if("string"==typeof t||Nu(t))return t;var e=t+"";return"0"==e&&1/t==-F?"-0":e}function la(t){if(null!=t){try{return se.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function fa(t){if(t instanceof mr)return t.clone();var e=new vr(t.__wrapped__,t.__chain__);return e.__actions__=no(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var pa=Ti(function(t,e){return _u(t)?Lr(t,qr(e,1,_u,!0)):[]}),ha=Ti(function(t,e){var n=Ra(e);return _u(n)&&(n=o),_u(t)?Lr(t,qr(e,1,_u,!0),zo(n,2)):[]}),da=Ti(function(t,e){var n=Ra(e);return _u(n)&&(n=o),_u(t)?Lr(t,qr(e,1,_u,!0),o,n):[]});function ya(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Du(n);return i<0&&(i=$n(r+i,0)),un(t,zo(e,3),i)}function va(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==o&&(i=Du(n),i=n<0?$n(r+i,0):Gn(i,r-1)),un(t,zo(e,3),i,!0)}function ma(t){return null!=t&&t.length?qr(t,1):[]}function ba(t){return t&&t.length?t[0]:o}var _a=Ti(function(t){var e=Je(t,qi);return e.length&&e[0]===t[0]?ni(e):[]}),ga=Ti(function(t){var e=Ra(t),n=Je(t,qi);return e===Ra(n)?e=o:n.pop(),n.length&&n[0]===t[0]?ni(n,zo(e,2)):[]}),wa=Ti(function(t){var e=Ra(t),n=Je(t,qi);return(e="function"==typeof e?e:o)&&n.pop(),n.length&&n[0]===t[0]?ni(n,o,e):[]});function Ra(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Ta=Ti(xa);function xa(t,e){return t&&t.length&&e&&e.length?_i(t,e):t}var Ea=Po(function(t,e){var n=null==t?0:t.length,r=Fr(t,e);return gi(t,Je(e,function(t){return Go(t,n)?+t:t}).sort(Ji)),r});function Aa(t){return null==t?t:Kn.call(t)}var Ca=Ti(function(t){return Vi(qr(t,1,_u,!0))}),Oa=Ti(function(t){var e=Ra(t);return _u(e)&&(e=o),Vi(qr(t,1,_u,!0),zo(e,2))}),Sa=Ti(function(t){var e=Ra(t);return e="function"==typeof e?e:o,Vi(qr(t,1,_u,!0),o,e)});function Pa(t){if(!t||!t.length)return[];var e=0;return t=Ke(t,function(t){if(_u(t))return e=$n(t.length,e),!0}),vn(e,function(e){return Je(t,pn(e))})}function ja(t,e){if(!t||!t.length)return[];var n=Pa(t);return null==e?n:Je(n,function(t){return $e(e,o,t)})}var Ia=Ti(function(t,e){return _u(t)?Lr(t,e):[]}),Fa=Ti(function(t){return Ui(Ke(t,_u))}),Na=Ti(function(t){var e=Ra(t);return _u(e)&&(e=o),Ui(Ke(t,_u),zo(e,2))}),ka=Ti(function(t){var e=Ra(t);return e="function"==typeof e?e:o,Ui(Ke(t,_u),o,e)}),za=Ti(Pa);var Va=Ti(function(t){var e=t.length,n=e>1?t[e-1]:o;return ja(t,n="function"==typeof n?(t.pop(),n):o)});function La(t){var e=hr(t);return e.__chain__=!0,e}function Ba(t,e){return e(t)}var Da=Po(function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return Fr(e,t)};return!(e>1||this.__actions__.length)&&r instanceof mr&&Go(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:Ba,args:[i],thisArg:o}),new vr(r,this.__chain__).thru(function(t){return e&&!t.length&&t.push(o),t})):this.thru(i)});var Ma=io(function(t,e,n){ce.call(t,n)?++t[n]:Ir(t,n,1)});var Ua=fo(ya),Wa=fo(va);function qa(t,e){return(vu(t)?He:Br)(t,zo(e,3))}function $a(t,e){return(vu(t)?Qe:Dr)(t,zo(e,3))}var Ga=io(function(t,e,n){ce.call(t,n)?t[n].push(e):Ir(t,n,[e])});var Ha=Ti(function(t,e,r){var i=-1,o="function"==typeof e,a=bu(t)?n(t.length):[];return Br(t,function(t){a[++i]=o?$e(e,t,r):ri(t,e,r)}),a}),Qa=io(function(t,e,n){Ir(t,n,e)});function Za(t,e){return(vu(t)?Je:pi)(t,zo(e,3))}var Ka=io(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]});var Ya=Ti(function(t,e){if(null==t)return[];var n=e.length;return n>1&&Ho(t,e[0],e[1])?e=[]:n>2&&Ho(e[0],e[1],e[2])&&(e=[e[0]]),mi(t,qr(e,1),[])}),Xa=zn||function(){return Fe.Date.now()};function Ja(t,e,n){return e=n?o:e,e=t&&null==e?t.length:e,Eo(t,x,o,o,o,o,e)}function tu(t,e){var n;if("function"!=typeof e)throw new re(s);return t=Du(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=o),n}}var eu=Ti(function(t,e,n){var r=m;if(n.length){var i=On(n,ko(eu));r|=R}return Eo(t,r,e,n,i)}),nu=Ti(function(t,e,n){var r=m|b;if(n.length){var i=On(n,ko(nu));r|=R}return Eo(e,r,t,n,i)});function ru(t,e,n){var r,i,a,u,c,l,f=0,p=!1,h=!1,d=!0;if("function"!=typeof t)throw new re(s);function y(e){var n=r,a=i;return r=i=o,f=e,u=t.apply(a,n)}function v(t){var n=t-l;return l===o||n>=e||n<0||h&&t-f>=a}function m(){var t=Xa();if(v(t))return b(t);c=ra(m,function(t){var n=e-(t-l);return h?Gn(n,a-(t-f)):n}(t))}function b(t){return c=o,d&&r?y(t):(r=i=o,u)}function _(){var t=Xa(),n=v(t);if(r=arguments,i=this,l=t,n){if(c===o)return function(t){return f=t,c=ra(m,e),p?y(t):u}(l);if(h)return c=ra(m,e),y(l)}return c===o&&(c=ra(m,e)),u}return e=Uu(e)||0,Au(n)&&(p=!!n.leading,a=(h="maxWait"in n)?$n(Uu(n.maxWait)||0,e):a,d="trailing"in n?!!n.trailing:d),_.cancel=function(){c!==o&&Zi(c),f=0,r=l=i=c=o},_.flush=function(){return c===o?u:b(Xa())},_}var iu=Ti(function(t,e){return Vr(t,1,e)}),ou=Ti(function(t,e,n){return Vr(t,Uu(e)||0,n)});function au(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new re(s);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(au.Cache||gr),n}function uu(t){if("function"!=typeof t)throw new re(s);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}au.Cache=gr;var su=Hi(function(t,e){var n=(e=1==e.length&&vu(e[0])?Je(e[0],mn(zo())):Je(qr(e,1),mn(zo()))).length;return Ti(function(r){for(var i=-1,o=Gn(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return $e(t,this,r)})}),cu=Ti(function(t,e){var n=On(e,ko(cu));return Eo(t,R,o,e,n)}),lu=Ti(function(t,e){var n=On(e,ko(lu));return Eo(t,T,o,e,n)}),fu=Po(function(t,e){return Eo(t,E,o,o,o,e)});function pu(t,e){return t===e||t!=t&&e!=e}var hu=go(Jr),du=go(function(t,e){return t>=e}),yu=ii(function(){return arguments}())?ii:function(t){return Cu(t)&&ce.call(t,"callee")&&!Ie.call(t,"callee")},vu=n.isArray,mu=Be?mn(Be):function(t){return Cu(t)&&Xr(t)==st};function bu(t){return null!=t&&Eu(t.length)&&!Tu(t)}function _u(t){return Cu(t)&&bu(t)}var gu=Mn||Us,wu=De?mn(De):function(t){return Cu(t)&&Xr(t)==$};function Ru(t){if(!Cu(t))return!1;var e=Xr(t);return e==H||e==G||"string"==typeof t.message&&"string"==typeof t.name&&!Pu(t)}function Tu(t){if(!Au(t))return!1;var e=Xr(t);return e==Q||e==Z||e==W||e==tt}function xu(t){return"number"==typeof t&&t==Du(t)}function Eu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=N}function Au(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Cu(t){return null!=t&&"object"==typeof t}var Ou=Me?mn(Me):function(t){return Cu(t)&&Uo(t)==K};function Su(t){return"number"==typeof t||Cu(t)&&Xr(t)==Y}function Pu(t){if(!Cu(t)||Xr(t)!=J)return!1;var e=Oe(t);if(null===e)return!0;var n=ce.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&se.call(n)==he}var ju=Ue?mn(Ue):function(t){return Cu(t)&&Xr(t)==et};var Iu=We?mn(We):function(t){return Cu(t)&&Uo(t)==nt};function Fu(t){return"string"==typeof t||!vu(t)&&Cu(t)&&Xr(t)==rt}function Nu(t){return"symbol"==typeof t||Cu(t)&&Xr(t)==it}var ku=qe?mn(qe):function(t){return Cu(t)&&Eu(t.length)&&!!Ae[Xr(t)]};var zu=go(fi),Vu=go(function(t,e){return t<=e});function Lu(t){if(!t)return[];if(bu(t))return Fu(t)?Fn(t):no(t);if(Ve&&t[Ve])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Ve]());var e=Uo(t);return(e==K?An:e==nt?Pn:ps)(t)}function Bu(t){return t?(t=Uu(t))===F||t===-F?(t<0?-1:1)*k:t==t?t:0:0===t?t:0}function Du(t){var e=Bu(t),n=e%1;return e==e?n?e-n:e:0}function Mu(t){return t?Nr(Du(t),0,V):0}function Uu(t){if("number"==typeof t)return t;if(Nu(t))return z;if(Au(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Au(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Nt,"");var n=$t.test(t);return n||Ht.test(t)?Pe(t.slice(2),n?2:8):qt.test(t)?z:+t}function Wu(t){return ro(t,is(t))}function qu(t){return null==t?"":zi(t)}var $u=oo(function(t,e){if(Yo(e)||bu(e))ro(e,rs(e),t);else for(var n in e)ce.call(e,n)&&Or(t,n,e[n])}),Gu=oo(function(t,e){ro(e,is(e),t)}),Hu=oo(function(t,e,n,r){ro(e,is(e),t,r)}),Qu=oo(function(t,e,n,r){ro(e,rs(e),t,r)}),Zu=Po(Fr);var Ku=Ti(function(t,e){t=te(t);var n=-1,r=e.length,i=r>2?e[2]:o;for(i&&Ho(e[0],e[1],i)&&(r=1);++n<r;)for(var a=e[n],u=is(a),s=-1,c=u.length;++s<c;){var l=u[s],f=t[l];(f===o||pu(f,ae[l])&&!ce.call(t,l))&&(t[l]=a[l])}return t}),Yu=Ti(function(t){return t.push(o,Co),$e(as,o,t)});function Xu(t,e,n){var r=null==t?o:Kr(t,e);return r===o?n:r}function Ju(t,e){return null!=t&&Wo(t,e,ei)}var ts=yo(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=pe.call(e)),t[e]=n},As(Ss)),es=yo(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=pe.call(e)),ce.call(t,e)?t[e].push(n):t[e]=[n]},zo),ns=Ti(ri);function rs(t){return bu(t)?Tr(t):ci(t)}function is(t){return bu(t)?Tr(t,!0):li(t)}var os=oo(function(t,e,n){yi(t,e,n)}),as=oo(function(t,e,n,r){yi(t,e,n,r)}),us=Po(function(t,e){var n={};if(null==t)return n;var r=!1;e=Je(e,function(e){return e=Gi(e,t),r||(r=e.length>1),e}),ro(t,Io(t),n),r&&(n=kr(n,p|h|d,Oo));for(var i=e.length;i--;)Li(n,e[i]);return n});var ss=Po(function(t,e){return null==t?{}:function(t,e){return bi(t,e,function(e,n){return Ju(t,n)})}(t,e)});function cs(t,e){if(null==t)return{};var n=Je(Io(t),function(t){return[t]});return e=zo(e),bi(t,n,function(t,n){return e(t,n[0])})}var ls=xo(rs),fs=xo(is);function ps(t){return null==t?[]:bn(t,rs(t))}var hs=co(function(t,e,n){return e=e.toLowerCase(),t+(n?ds(e):e)});function ds(t){return Rs(qu(t).toLowerCase())}function ys(t){return(t=qu(t))&&t.replace(Zt,Rn).replace(_e,"")}var vs=co(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),ms=co(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),bs=so("toLowerCase");var _s=co(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()});var gs=co(function(t,e,n){return t+(n?" ":"")+Rs(e)});var ws=co(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),Rs=so("toUpperCase");function Ts(t,e,n){return t=qu(t),(e=n?o:e)===o?function(t){return Te.test(t)}(t)?function(t){return t.match(we)||[]}(t):function(t){return t.match(Dt)||[]}(t):t.match(e)||[]}var xs=Ti(function(t,e){try{return $e(t,o,e)}catch(t){return Ru(t)?t:new i(t)}}),Es=Po(function(t,e){return He(e,function(e){e=ca(e),Ir(t,e,eu(t[e],t))}),t});function As(t){return function(){return t}}var Cs=po(),Os=po(!0);function Ss(t){return t}function Ps(t){return si("function"==typeof t?t:kr(t,p))}var js=Ti(function(t,e){return function(n){return ri(n,t,e)}}),Is=Ti(function(t,e){return function(n){return ri(t,n,e)}});function Fs(t,e,n){var r=rs(e),i=Zr(e,r);null!=n||Au(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=Zr(e,rs(e)));var o=!(Au(n)&&"chain"in n&&!n.chain),a=Tu(t);return He(i,function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__);return(n.__actions__=no(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,tn([this.value()],arguments))})}),t}function Ns(){}var ks=mo(Je),zs=mo(Ze),Vs=mo(rn);function Ls(t){return Qo(t)?pn(ca(t)):function(t){return function(e){return Kr(e,t)}}(t)}var Bs=_o(),Ds=_o(!0);function Ms(){return[]}function Us(){return!1}var Ws=vo(function(t,e){return t+e},0),qs=Ro("ceil"),$s=vo(function(t,e){return t/e},1),Gs=Ro("floor");var Hs=vo(function(t,e){return t*e},1),Qs=Ro("round"),Zs=vo(function(t,e){return t-e},0);return hr.after=function(t,e){if("function"!=typeof e)throw new re(s);return t=Du(t),function(){if(--t<1)return e.apply(this,arguments)}},hr.ary=Ja,hr.assign=$u,hr.assignIn=Gu,hr.assignInWith=Hu,hr.assignWith=Qu,hr.at=Zu,hr.before=tu,hr.bind=eu,hr.bindAll=Es,hr.bindKey=nu,hr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return vu(t)?t:[t]},hr.chain=La,hr.chunk=function(t,e,r){e=(r?Ho(t,e,r):e===o)?1:$n(Du(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var a=0,u=0,s=n(Ln(i/e));a<i;)s[u++]=Pi(t,a,a+=e);return s},hr.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},hr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=n(t-1),r=arguments[0],i=t;i--;)e[i-1]=arguments[i];return tn(vu(r)?no(r):[r],qr(e,1))},hr.cond=function(t){var e=null==t?0:t.length,n=zo();return t=e?Je(t,function(t){if("function"!=typeof t[1])throw new re(s);return[n(t[0]),t[1]]}):[],Ti(function(n){for(var r=-1;++r<e;){var i=t[r];if($e(i[0],this,n))return $e(i[1],this,n)}})},hr.conforms=function(t){return function(t){var e=rs(t);return function(n){return zr(n,t,e)}}(kr(t,p))},hr.constant=As,hr.countBy=Ma,hr.create=function(t,e){var n=dr(t);return null==e?n:jr(n,e)},hr.curry=function t(e,n,r){var i=Eo(e,g,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},hr.curryRight=function t(e,n,r){var i=Eo(e,w,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},hr.debounce=ru,hr.defaults=Ku,hr.defaultsDeep=Yu,hr.defer=iu,hr.delay=ou,hr.difference=pa,hr.differenceBy=ha,hr.differenceWith=da,hr.drop=function(t,e,n){var r=null==t?0:t.length;return r?Pi(t,(e=n||e===o?1:Du(e))<0?0:e,r):[]},hr.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Pi(t,0,(e=r-(e=n||e===o?1:Du(e)))<0?0:e):[]},hr.dropRightWhile=function(t,e){return t&&t.length?Di(t,zo(e,3),!0,!0):[]},hr.dropWhile=function(t,e){return t&&t.length?Di(t,zo(e,3),!0):[]},hr.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&Ho(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=Du(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:Du(r))<0&&(r+=i),r=n>r?0:Mu(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},hr.filter=function(t,e){return(vu(t)?Ke:Wr)(t,zo(e,3))},hr.flatMap=function(t,e){return qr(Za(t,e),1)},hr.flatMapDeep=function(t,e){return qr(Za(t,e),F)},hr.flatMapDepth=function(t,e,n){return n=n===o?1:Du(n),qr(Za(t,e),n)},hr.flatten=ma,hr.flattenDeep=function(t){return null!=t&&t.length?qr(t,F):[]},hr.flattenDepth=function(t,e){return null!=t&&t.length?qr(t,e=e===o?1:Du(e)):[]},hr.flip=function(t){return Eo(t,A)},hr.flow=Cs,hr.flowRight=Os,hr.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},hr.functions=function(t){return null==t?[]:Zr(t,rs(t))},hr.functionsIn=function(t){return null==t?[]:Zr(t,is(t))},hr.groupBy=Ga,hr.initial=function(t){return null!=t&&t.length?Pi(t,0,-1):[]},hr.intersection=_a,hr.intersectionBy=ga,hr.intersectionWith=wa,hr.invert=ts,hr.invertBy=es,hr.invokeMap=Ha,hr.iteratee=Ps,hr.keyBy=Qa,hr.keys=rs,hr.keysIn=is,hr.map=Za,hr.mapKeys=function(t,e){var n={};return e=zo(e,3),Hr(t,function(t,r,i){Ir(n,e(t,r,i),t)}),n},hr.mapValues=function(t,e){var n={};return e=zo(e,3),Hr(t,function(t,r,i){Ir(n,r,e(t,r,i))}),n},hr.matches=function(t){return hi(kr(t,p))},hr.matchesProperty=function(t,e){return di(t,kr(e,p))},hr.memoize=au,hr.merge=os,hr.mergeWith=as,hr.method=js,hr.methodOf=Is,hr.mixin=Fs,hr.negate=uu,hr.nthArg=function(t){return t=Du(t),Ti(function(e){return vi(e,t)})},hr.omit=us,hr.omitBy=function(t,e){return cs(t,uu(zo(e)))},hr.once=function(t){return tu(2,t)},hr.orderBy=function(t,e,n,r){return null==t?[]:(vu(e)||(e=null==e?[]:[e]),vu(n=r?o:n)||(n=null==n?[]:[n]),mi(t,e,n))},hr.over=ks,hr.overArgs=su,hr.overEvery=zs,hr.overSome=Vs,hr.partial=cu,hr.partialRight=lu,hr.partition=Ka,hr.pick=ss,hr.pickBy=cs,hr.property=Ls,hr.propertyOf=function(t){return function(e){return null==t?o:Kr(t,e)}},hr.pull=Ta,hr.pullAll=xa,hr.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?_i(t,e,zo(n,2)):t},hr.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?_i(t,e,o,n):t},hr.pullAt=Ea,hr.range=Bs,hr.rangeRight=Ds,hr.rearg=fu,hr.reject=function(t,e){return(vu(t)?Ke:Wr)(t,uu(zo(e,3)))},hr.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=zo(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}return gi(t,i),n},hr.rest=function(t,e){if("function"!=typeof t)throw new re(s);return Ti(t,e=e===o?e:Du(e))},hr.reverse=Aa,hr.sampleSize=function(t,e,n){return e=(n?Ho(t,e,n):e===o)?1:Du(e),(vu(t)?Er:Ei)(t,e)},hr.set=function(t,e,n){return null==t?t:Ai(t,e,n)},hr.setWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:Ai(t,e,n,r)},hr.shuffle=function(t){return(vu(t)?Ar:Si)(t)},hr.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&Ho(t,e,n)?(e=0,n=r):(e=null==e?0:Du(e),n=n===o?r:Du(n)),Pi(t,e,n)):[]},hr.sortBy=Ya,hr.sortedUniq=function(t){return t&&t.length?Ni(t):[]},hr.sortedUniqBy=function(t,e){return t&&t.length?Ni(t,zo(e,2)):[]},hr.split=function(t,e,n){return n&&"number"!=typeof n&&Ho(t,e,n)&&(e=n=o),(n=n===o?V:n>>>0)?(t=qu(t))&&("string"==typeof e||null!=e&&!ju(e))&&!(e=zi(e))&&En(t)?Qi(Fn(t),0,n):t.split(e,n):[]},hr.spread=function(t,e){if("function"!=typeof t)throw new re(s);return e=null==e?0:$n(Du(e),0),Ti(function(n){var r=n[e],i=Qi(n,0,e);return r&&tn(i,r),$e(t,this,i)})},hr.tail=function(t){var e=null==t?0:t.length;return e?Pi(t,1,e):[]},hr.take=function(t,e,n){return t&&t.length?Pi(t,0,(e=n||e===o?1:Du(e))<0?0:e):[]},hr.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Pi(t,(e=r-(e=n||e===o?1:Du(e)))<0?0:e,r):[]},hr.takeRightWhile=function(t,e){return t&&t.length?Di(t,zo(e,3),!1,!0):[]},hr.takeWhile=function(t,e){return t&&t.length?Di(t,zo(e,3)):[]},hr.tap=function(t,e){return e(t),t},hr.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new re(s);return Au(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),ru(t,e,{leading:r,maxWait:e,trailing:i})},hr.thru=Ba,hr.toArray=Lu,hr.toPairs=ls,hr.toPairsIn=fs,hr.toPath=function(t){return vu(t)?Je(t,ca):Nu(t)?[t]:no(sa(qu(t)))},hr.toPlainObject=Wu,hr.transform=function(t,e,n){var r=vu(t),i=r||gu(t)||ku(t);if(e=zo(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:Au(t)&&Tu(o)?dr(Oe(t)):{}}return(i?He:Hr)(t,function(t,r,i){return e(n,t,r,i)}),n},hr.unary=function(t){return Ja(t,1)},hr.union=Ca,hr.unionBy=Oa,hr.unionWith=Sa,hr.uniq=function(t){return t&&t.length?Vi(t):[]},hr.uniqBy=function(t,e){return t&&t.length?Vi(t,zo(e,2)):[]},hr.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?Vi(t,o,e):[]},hr.unset=function(t,e){return null==t||Li(t,e)},hr.unzip=Pa,hr.unzipWith=ja,hr.update=function(t,e,n){return null==t?t:Bi(t,e,$i(n))},hr.updateWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:Bi(t,e,$i(n),r)},hr.values=ps,hr.valuesIn=function(t){return null==t?[]:bn(t,is(t))},hr.without=Ia,hr.words=Ts,hr.wrap=function(t,e){return cu($i(e),t)},hr.xor=Fa,hr.xorBy=Na,hr.xorWith=ka,hr.zip=za,hr.zipObject=function(t,e){return Wi(t||[],e||[],Or)},hr.zipObjectDeep=function(t,e){return Wi(t||[],e||[],Ai)},hr.zipWith=Va,hr.entries=ls,hr.entriesIn=fs,hr.extend=Gu,hr.extendWith=Hu,Fs(hr,hr),hr.add=Ws,hr.attempt=xs,hr.camelCase=hs,hr.capitalize=ds,hr.ceil=qs,hr.clamp=function(t,e,n){return n===o&&(n=e,e=o),n!==o&&(n=(n=Uu(n))==n?n:0),e!==o&&(e=(e=Uu(e))==e?e:0),Nr(Uu(t),e,n)},hr.clone=function(t){return kr(t,d)},hr.cloneDeep=function(t){return kr(t,p|d)},hr.cloneDeepWith=function(t,e){return kr(t,p|d,e="function"==typeof e?e:o)},hr.cloneWith=function(t,e){return kr(t,d,e="function"==typeof e?e:o)},hr.conformsTo=function(t,e){return null==e||zr(t,e,rs(e))},hr.deburr=ys,hr.defaultTo=function(t,e){return null==t||t!=t?e:t},hr.divide=$s,hr.endsWith=function(t,e,n){t=qu(t),e=zi(e);var r=t.length,i=n=n===o?r:Nr(Du(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},hr.eq=pu,hr.escape=function(t){return(t=qu(t))&&Et.test(t)?t.replace(Tt,Tn):t},hr.escapeRegExp=function(t){return(t=qu(t))&&Ft.test(t)?t.replace(It,"\\$&"):t},hr.every=function(t,e,n){var r=vu(t)?Ze:Mr;return n&&Ho(t,e,n)&&(e=o),r(t,zo(e,3))},hr.find=Ua,hr.findIndex=ya,hr.findKey=function(t,e){return an(t,zo(e,3),Hr)},hr.findLast=Wa,hr.findLastIndex=va,hr.findLastKey=function(t,e){return an(t,zo(e,3),Qr)},hr.floor=Gs,hr.forEach=qa,hr.forEachRight=$a,hr.forIn=function(t,e){return null==t?t:$r(t,zo(e,3),is)},hr.forInRight=function(t,e){return null==t?t:Gr(t,zo(e,3),is)},hr.forOwn=function(t,e){return t&&Hr(t,zo(e,3))},hr.forOwnRight=function(t,e){return t&&Qr(t,zo(e,3))},hr.get=Xu,hr.gt=hu,hr.gte=du,hr.has=function(t,e){return null!=t&&Wo(t,e,ti)},hr.hasIn=Ju,hr.head=ba,hr.identity=Ss,hr.includes=function(t,e,n,r){t=bu(t)?t:ps(t),n=n&&!r?Du(n):0;var i=t.length;return n<0&&(n=$n(i+n,0)),Fu(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&sn(t,e,n)>-1},hr.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Du(n);return i<0&&(i=$n(r+i,0)),sn(t,e,i)},hr.inRange=function(t,e,n){return e=Bu(e),n===o?(n=e,e=0):n=Bu(n),function(t,e,n){return t>=Gn(e,n)&&t<$n(e,n)}(t=Uu(t),e,n)},hr.invoke=ns,hr.isArguments=yu,hr.isArray=vu,hr.isArrayBuffer=mu,hr.isArrayLike=bu,hr.isArrayLikeObject=_u,hr.isBoolean=function(t){return!0===t||!1===t||Cu(t)&&Xr(t)==q},hr.isBuffer=gu,hr.isDate=wu,hr.isElement=function(t){return Cu(t)&&1===t.nodeType&&!Pu(t)},hr.isEmpty=function(t){if(null==t)return!0;if(bu(t)&&(vu(t)||"string"==typeof t||"function"==typeof t.splice||gu(t)||ku(t)||yu(t)))return!t.length;var e=Uo(t);if(e==K||e==nt)return!t.size;if(Yo(t))return!ci(t).length;for(var n in t)if(ce.call(t,n))return!1;return!0},hr.isEqual=function(t,e){return oi(t,e)},hr.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:o)?n(t,e):o;return r===o?oi(t,e,o,n):!!r},hr.isError=Ru,hr.isFinite=function(t){return"number"==typeof t&&Un(t)},hr.isFunction=Tu,hr.isInteger=xu,hr.isLength=Eu,hr.isMap=Ou,hr.isMatch=function(t,e){return t===e||ai(t,e,Lo(e))},hr.isMatchWith=function(t,e,n){return n="function"==typeof n?n:o,ai(t,e,Lo(e),n)},hr.isNaN=function(t){return Su(t)&&t!=+t},hr.isNative=function(t){if(Ko(t))throw new i(u);return ui(t)},hr.isNil=function(t){return null==t},hr.isNull=function(t){return null===t},hr.isNumber=Su,hr.isObject=Au,hr.isObjectLike=Cu,hr.isPlainObject=Pu,hr.isRegExp=ju,hr.isSafeInteger=function(t){return xu(t)&&t>=-N&&t<=N},hr.isSet=Iu,hr.isString=Fu,hr.isSymbol=Nu,hr.isTypedArray=ku,hr.isUndefined=function(t){return t===o},hr.isWeakMap=function(t){return Cu(t)&&Uo(t)==at},hr.isWeakSet=function(t){return Cu(t)&&Xr(t)==ut},hr.join=function(t,e){return null==t?"":Wn.call(t,e)},hr.kebabCase=vs,hr.last=Ra,hr.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=Du(n))<0?$n(r+i,0):Gn(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):un(t,ln,i,!0)},hr.lowerCase=ms,hr.lowerFirst=bs,hr.lt=zu,hr.lte=Vu,hr.max=function(t){return t&&t.length?Ur(t,Ss,Jr):o},hr.maxBy=function(t,e){return t&&t.length?Ur(t,zo(e,2),Jr):o},hr.mean=function(t){return fn(t,Ss)},hr.meanBy=function(t,e){return fn(t,zo(e,2))},hr.min=function(t){return t&&t.length?Ur(t,Ss,fi):o},hr.minBy=function(t,e){return t&&t.length?Ur(t,zo(e,2),fi):o},hr.stubArray=Ms,hr.stubFalse=Us,hr.stubObject=function(){return{}},hr.stubString=function(){return""},hr.stubTrue=function(){return!0},hr.multiply=Hs,hr.nth=function(t,e){return t&&t.length?vi(t,Du(e)):o},hr.noConflict=function(){return Fe._===this&&(Fe._=de),this},hr.noop=Ns,hr.now=Xa,hr.pad=function(t,e,n){t=qu(t);var r=(e=Du(e))?In(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return bo(Bn(i),n)+t+bo(Ln(i),n)},hr.padEnd=function(t,e,n){t=qu(t);var r=(e=Du(e))?In(t):0;return e&&r<e?t+bo(e-r,n):t},hr.padStart=function(t,e,n){t=qu(t);var r=(e=Du(e))?In(t):0;return e&&r<e?bo(e-r,n)+t:t},hr.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),Qn(qu(t).replace(kt,""),e||0)},hr.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Ho(t,e,n)&&(e=n=o),n===o&&("boolean"==typeof e?(n=e,e=o):"boolean"==typeof t&&(n=t,t=o)),t===o&&e===o?(t=0,e=1):(t=Bu(t),e===o?(e=t,t=0):e=Bu(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=Zn();return Gn(t+i*(e-t+Se("1e-"+((i+"").length-1))),e)}return wi(t,e)},hr.reduce=function(t,e,n){var r=vu(t)?en:dn,i=arguments.length<3;return r(t,zo(e,4),n,i,Br)},hr.reduceRight=function(t,e,n){var r=vu(t)?nn:dn,i=arguments.length<3;return r(t,zo(e,4),n,i,Dr)},hr.repeat=function(t,e,n){return e=(n?Ho(t,e,n):e===o)?1:Du(e),Ri(qu(t),e)},hr.replace=function(){var t=arguments,e=qu(t[0]);return t.length<3?e:e.replace(t[1],t[2])},hr.result=function(t,e,n){var r=-1,i=(e=Gi(e,t)).length;for(i||(i=1,t=o);++r<i;){var a=null==t?o:t[ca(e[r])];a===o&&(r=i,a=n),t=Tu(a)?a.call(t):a}return t},hr.round=Qs,hr.runInContext=t,hr.sample=function(t){return(vu(t)?xr:xi)(t)},hr.size=function(t){if(null==t)return 0;if(bu(t))return Fu(t)?In(t):t.length;var e=Uo(t);return e==K||e==nt?t.size:ci(t).length},hr.snakeCase=_s,hr.some=function(t,e,n){var r=vu(t)?rn:ji;return n&&Ho(t,e,n)&&(e=o),r(t,zo(e,3))},hr.sortedIndex=function(t,e){return Ii(t,e)},hr.sortedIndexBy=function(t,e,n){return Fi(t,e,zo(n,2))},hr.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Ii(t,e);if(r<n&&pu(t[r],e))return r}return-1},hr.sortedLastIndex=function(t,e){return Ii(t,e,!0)},hr.sortedLastIndexBy=function(t,e,n){return Fi(t,e,zo(n,2),!0)},hr.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=Ii(t,e,!0)-1;if(pu(t[n],e))return n}return-1},hr.startCase=gs,hr.startsWith=function(t,e,n){return t=qu(t),n=null==n?0:Nr(Du(n),0,t.length),e=zi(e),t.slice(n,n+e.length)==e},hr.subtract=Zs,hr.sum=function(t){return t&&t.length?yn(t,Ss):0},hr.sumBy=function(t,e){return t&&t.length?yn(t,zo(e,2)):0},hr.template=function(t,e,n){var r=hr.templateSettings;n&&Ho(t,e,n)&&(e=o),t=qu(t),e=Hu({},e,r,Ao);var i,a,u=Hu({},e.imports,r.imports,Ao),s=rs(u),c=bn(u,s),l=0,f=e.interpolate||Kt,p="__p += '",h=ee((e.escape||Kt).source+"|"+f.source+"|"+(f===Ot?Ut:Kt).source+"|"+(e.evaluate||Kt).source+"|$","g"),d="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++Ee+"]")+"\n";t.replace(h,function(e,n,r,o,u,s){return r||(r=o),p+=t.slice(l,s).replace(Yt,xn),n&&(i=!0,p+="' +\n__e("+n+") +\n'"),u&&(a=!0,p+="';\n"+u+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=s+e.length,e}),p+="';\n";var y=e.variable;y||(p="with (obj) {\n"+p+"\n}\n"),p=(a?p.replace(_t,""):p).replace(gt,"$1").replace(wt,"$1;"),p="function("+(y||"obj")+") {\n"+(y?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var v=xs(function(){return Xt(s,d+"return "+p).apply(o,c)});if(v.source=p,Ru(v))throw v;return v},hr.times=function(t,e){if((t=Du(t))<1||t>N)return[];var n=V,r=Gn(t,V);e=zo(e),t-=V;for(var i=vn(r,e);++n<t;)e(n);return i},hr.toFinite=Bu,hr.toInteger=Du,hr.toLength=Mu,hr.toLower=function(t){return qu(t).toLowerCase()},hr.toNumber=Uu,hr.toSafeInteger=function(t){return t?Nr(Du(t),-N,N):0===t?t:0},hr.toString=qu,hr.toUpper=function(t){return qu(t).toUpperCase()},hr.trim=function(t,e,n){if((t=qu(t))&&(n||e===o))return t.replace(Nt,"");if(!t||!(e=zi(e)))return t;var r=Fn(t),i=Fn(e);return Qi(r,gn(r,i),wn(r,i)+1).join("")},hr.trimEnd=function(t,e,n){if((t=qu(t))&&(n||e===o))return t.replace(zt,"");if(!t||!(e=zi(e)))return t;var r=Fn(t);return Qi(r,0,wn(r,Fn(e))+1).join("")},hr.trimStart=function(t,e,n){if((t=qu(t))&&(n||e===o))return t.replace(kt,"");if(!t||!(e=zi(e)))return t;var r=Fn(t);return Qi(r,gn(r,Fn(e))).join("")},hr.truncate=function(t,e){var n=C,r=O;if(Au(e)){var i="separator"in e?e.separator:i;n="length"in e?Du(e.length):n,r="omission"in e?zi(e.omission):r}var a=(t=qu(t)).length;if(En(t)){var u=Fn(t);a=u.length}if(n>=a)return t;var s=n-In(r);if(s<1)return r;var c=u?Qi(u,0,s).join(""):t.slice(0,s);if(i===o)return c+r;if(u&&(s+=c.length-s),ju(i)){if(t.slice(s).search(i)){var l,f=c;for(i.global||(i=ee(i.source,qu(Wt.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var p=l.index;c=c.slice(0,p===o?s:p)}}else if(t.indexOf(zi(i),s)!=s){var h=c.lastIndexOf(i);h>-1&&(c=c.slice(0,h))}return c+r},hr.unescape=function(t){return(t=qu(t))&&xt.test(t)?t.replace(Rt,Nn):t},hr.uniqueId=function(t){var e=++le;return qu(t)+e},hr.upperCase=ws,hr.upperFirst=Rs,hr.each=qa,hr.eachRight=$a,hr.first=ba,Fs(hr,function(){var t={};return Hr(hr,function(e,n){ce.call(hr.prototype,n)||(t[n]=e)}),t}(),{chain:!1}),hr.VERSION="4.17.10",He(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){hr[t].placeholder=hr}),He(["drop","take"],function(t,e){mr.prototype[t]=function(n){n=n===o?1:$n(Du(n),0);var r=this.__filtered__&&!e?new mr(this):this.clone();return r.__filtered__?r.__takeCount__=Gn(n,r.__takeCount__):r.__views__.push({size:Gn(n,V),type:t+(r.__dir__<0?"Right":"")}),r},mr.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),He(["filter","map","takeWhile"],function(t,e){var n=e+1,r=n==j||3==n;mr.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:zo(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),He(["head","last"],function(t,e){var n="take"+(e?"Right":"");mr.prototype[t]=function(){return this[n](1).value()[0]}}),He(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");mr.prototype[t]=function(){return this.__filtered__?new mr(this):this[n](1)}}),mr.prototype.compact=function(){return this.filter(Ss)},mr.prototype.find=function(t){return this.filter(t).head()},mr.prototype.findLast=function(t){return this.reverse().find(t)},mr.prototype.invokeMap=Ti(function(t,e){return"function"==typeof t?new mr(this):this.map(function(n){return ri(n,t,e)})}),mr.prototype.reject=function(t){return this.filter(uu(zo(t)))},mr.prototype.slice=function(t,e){t=Du(t);var n=this;return n.__filtered__&&(t>0||e<0)?new mr(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==o&&(n=(e=Du(e))<0?n.dropRight(-e):n.take(e-t)),n)},mr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},mr.prototype.toArray=function(){return this.take(V)},Hr(mr.prototype,function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=hr[r?"take"+("last"==e?"Right":""):e],a=r||/^find/.test(e);i&&(hr.prototype[e]=function(){var e=this.__wrapped__,u=r?[1]:arguments,s=e instanceof mr,c=u[0],l=s||vu(e),f=function(t){var e=i.apply(hr,tn([t],u));return r&&p?e[0]:e};l&&n&&"function"==typeof c&&1!=c.length&&(s=l=!1);var p=this.__chain__,h=!!this.__actions__.length,d=a&&!p,y=s&&!h;if(!a&&l){e=y?e:new mr(this);var v=t.apply(e,u);return v.__actions__.push({func:Ba,args:[f],thisArg:o}),new vr(v,p)}return d&&y?t.apply(this,u):(v=this.thru(f),d?r?v.value()[0]:v.value():v)})}),He(["pop","push","shift","sort","splice","unshift"],function(t){var e=ie[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);hr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(vu(i)?i:[],t)}return this[n](function(n){return e.apply(vu(n)?n:[],t)})}}),Hr(mr.prototype,function(t,e){var n=hr[e];if(n){var r=n.name+"";(ir[r]||(ir[r]=[])).push({name:e,func:n})}}),ir[ho(o,b).name]=[{name:"wrapper",func:o}],mr.prototype.clone=function(){var t=new mr(this.__wrapped__);return t.__actions__=no(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=no(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=no(this.__views__),t},mr.prototype.reverse=function(){if(this.__filtered__){var t=new mr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},mr.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=vu(t),r=e<0,i=n?t.length:0,o=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=Gn(e,t+a);break;case"takeRight":t=$n(t,e-a)}}return{start:t,end:e}}(0,i,this.__views__),a=o.start,u=o.end,s=u-a,c=r?u:a-1,l=this.__iteratees__,f=l.length,p=0,h=Gn(s,this.__takeCount__);if(!n||!r&&i==s&&h==s)return Mi(t,this.__actions__);var d=[];t:for(;s--&&p<h;){for(var y=-1,v=t[c+=e];++y<f;){var m=l[y],b=m.iteratee,_=m.type,g=b(v);if(_==I)v=g;else if(!g){if(_==j)continue t;break t}}d[p++]=v}return d},hr.prototype.at=Da,hr.prototype.chain=function(){return La(this)},hr.prototype.commit=function(){return new vr(this.value(),this.__chain__)},hr.prototype.next=function(){this.__values__===o&&(this.__values__=Lu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},hr.prototype.plant=function(t){for(var e,n=this;n instanceof yr;){var r=fa(n);r.__index__=0,r.__values__=o,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},hr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof mr){var e=t;return this.__actions__.length&&(e=new mr(this)),(e=e.reverse()).__actions__.push({func:Ba,args:[Aa],thisArg:o}),new vr(e,this.__chain__)}return this.thru(Aa)},hr.prototype.toJSON=hr.prototype.valueOf=hr.prototype.value=function(){return Mi(this.__wrapped__,this.__actions__)},hr.prototype.first=hr.prototype.head,Ve&&(hr.prototype[Ve]=function(){return this}),hr}();Fe._=kn,(i=function(){return kn}.call(e,n,e,r))===o||(r.exports=i)}).call(this)}).call(this,n(15),n(20)(t))},function(t,e){t.exports=function(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(5),i=n(7),o=n(0),a=n(9),u=n(6),s=n(1);!function(t){t.UNDEFINED_BEHAVIOR="undefined_behavior",t.UNSPECIFIED_BEHAVIOR="unspecified_behavior",t.IMPLEMENTATION_DEFINED_BEHAVIOR="implementation_defined_behavior",t.MEMORY_LEAK="memory_leak",t.ASSERTION_FAILURE="assertion_failure",t.CRASH="crash"}(e.SimulationEvent||(e.SimulationEvent={}));var c=function(){function t(t){this.observable=new r.Observable(this),this.random=new o.CPPRandom,this.alertsOff=!1,this._eventsOccurred={undefined_behavior:[],unspecified_behavior:[],implementation_defined_behavior:[],memory_leak:[],assertion_failure:[],crash:[]},this.eventsOccurred=this._eventsOccurred,this.isPaused=!0,this.program=t,this.memory=new i.Memory,this.execStack=this._execStack=[],this.pendingNews=[],this.leakCheckIndex=0,this.isPaused=!0,this.stepsTaken=0,this.atEnd=!1,this.start()}return t.prototype.start=function(){this.allocateStringLiterals(),this.callMain(),this.push(this.program.globalObjectAllocator.createRuntimeConstruct(this)),this.observable.send("started"),this.upNext()},t.prototype.callMain=function(){this.mainReturnObject=new a.MainReturnObject(this.memory),this.mainFunction=new u.RuntimeFunction(this.program.mainFunction,this),this.mainFunction.setReturnObject(this.mainReturnObject),this.mainFunction.pushStackFrame(),this.push(this.mainFunction),this.mainFunction.gainControl()},t.prototype.push=function(t){this._execStack.push(t),t.pushed(),this.observable.send("pushed",t)},t.prototype.top=function(){if(this.execStack.length>0)return this.execStack[this.execStack.length-1]},t.prototype.pop=function(){return this._execStack.pop()},t.prototype.popUntil=function(t){for(;this._execStack.length>0&&this._execStack[this._execStack.length-1]!==t;)this.pop()},t.prototype.topFunction=function(){for(var t=this.execStack.length-1;t>=0;--t){var e=this.execStack[t];if(e instanceof u.RuntimeFunction)return e}},t.prototype.allocateStringLiterals=function(){var t=this,e=this.program.translationUnits;for(var n in e)e[n].stringLiterals.forEach(function(e){t.memory.allocateStringLiteral(e)})},t.prototype.stepForward=function(t){void 0===t&&(t=1);for(var e=0;!this.atEnd&&e<t;++e)this._stepForward();this.observable.send("afterFullStep",this.execStack.length>0&&this.execStack[this.execStack.length-1])},t.prototype._stepForward=function(){var t=this.top();t&&(this.observable.send("beforeStepForward",{rt:t}),t.stepForward(),this.observable.send("afterStepForward",{rt:t}),++this.stepsTaken,this.upNext())},t.prototype.upNext=function(){for(;;){var t=this.top();if(!t)return this.atEnd=!0,void this.observable.send("atEnded");if(this.observable.send("beforeUpNext",{rt:t}),t.upNext(),this.observable.send("afterUpNext",{inst:t}),t===this.top())break}},t.prototype.stepToEnd=function(){for(;!this.atEnd;)this.stepForward()},t.prototype.cout=function(t){var e="";if(t.type instanceof s.PointerType&&t.type.ptrTo instanceof s.Char)for(var n=t.rawValue,r=this.memory.getByte(n);!s.Char.isNullChar(r);)e+=t.type.ptrTo.valueToOstreamString(r),r=this.memory.getByte(++n);else e=o.escapeString(t.valueToOstreamString());console.log("cout: "+e)},t.prototype.eventOccurred=function(t,e,n){this._eventsOccurred[t].push(e),n&&this.alert(e)},t.prototype.hasEventOccurred=function(t){return this.eventsOccurred[t].length>0},t.prototype.alert=function(t){this.alertsOff||this.observable.send("alert",t)},t}();e.Simulation=c},function(t,e){t.exports=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e){t.exports=function(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}},function(t,e){t.exports=function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}},function(t,e){t.exports=function(t){return t!=t}},function(t,e){t.exports=function(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}},function(t,e,n){var r=n(29),i=n(28),o=n(27);t.exports=function(t,e,n){return e==e?o(t,e,n):r(t,i,n)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}},function(t,e,n){var r=n(31),i=n(30),o=n(26),a=n(25),u=n(24),s=Array.prototype.splice;t.exports=function(t,e,n,c){var l=c?o:i,f=-1,p=e.length,h=t;for(t===e&&(e=u(e)),n&&(h=r(t,a(n)));++f<p;)for(var d=0,y=e[f],v=n?n(y):y;(d=l(h,v,d,c))>-1;)h!==t&&s.call(h,d,1),s.call(t,d,1);return t}},function(t,e,n){var r=n(32);t.exports=function(t,e){return t&&t.length&&e&&e.length?r(t,e):t}},function(t,e){var n=800,r=16,i=Date.now;t.exports=function(t){var e=0,o=0;return function(){var a=i(),u=r-(a-o);if(o=a,u>0){if(++e>=n)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(16)["__core-js_shared__"];t.exports=r},function(t,e,n){var r=n(37),i=function(){var t=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}();t.exports=function(t){return!!i&&i in t}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r=n(17),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,u=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var i=a.call(t);return r&&(e?t[u]=n:delete t[u]),i}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(15))},function(t,e,n){var r=n(17),i=n(40),o=n(39),a="[object Null]",u="[object Undefined]",s=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?u:a:s&&s in Object(t)?i(t):o(t)}},function(t,e,n){var r=n(42),i=n(14),o="[object AsyncFunction]",a="[object Function]",u="[object GeneratorFunction]",s="[object Proxy]";t.exports=function(t){if(!i(t))return!1;var e=r(t);return e==a||e==u||e==o||e==s}},function(t,e,n){var r=n(43),i=n(38),o=n(14),a=n(36),u=/^\[object .+?Constructor\]$/,s=Function.prototype,c=Object.prototype,l=s.toString,f=c.hasOwnProperty,p=RegExp("^"+l.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||i(t))&&(r(t)?p:u).test(a(t))}},function(t,e,n){var r=n(44),i=n(35);t.exports=function(t,e){var n=i(t,e);return r(n)?n:void 0}},function(t,e,n){var r=n(45),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},function(t,e){t.exports=function(t){return function(){return t}}},function(t,e,n){var r=n(47),i=n(46),o=n(18),a=i?function(t,e){return i(t,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;t.exports=a},function(t,e,n){var r=n(48),i=n(34)(r);t.exports=i},function(t,e){t.exports=function(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}},function(t,e,n){var r=n(50),i=Math.max;t.exports=function(t,e,n){return e=i(void 0===e?t.length-1:e,0),function(){for(var o=arguments,a=-1,u=i(o.length-e,0),s=Array(u);++a<u;)s[a]=o[e+a];a=-1;for(var c=Array(e+1);++a<e;)c[a]=o[a];return c[e]=n(s),r(t,this,c)}}},function(t,e,n){var r=n(18),i=n(51),o=n(49);t.exports=function(t,e){return o(i(t,e,r),t+"")}},function(t,e,n){var r=n(52)(n(33));t.exports=r},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(n,r,i,o){var a=t.call(this)||this;return a.message=n,a.expected=r,a.found=i,a.location=o,a.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(a,e),a}return r(e,t),e.buildMessage=function(t,e){function n(t){return t.charCodeAt(0).toString(16).toUpperCase()}function r(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}function i(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}function o(t){switch(t.type){case"literal":return'"'+r(t.text)+'"';case"class":var e=t.parts.map(function(t){return Array.isArray(t)?i(t[0])+"-"+i(t[1]):i(t)});return"["+(t.inverted?"^":"")+e+"]";case"any":return"any character";case"end":return"end of input";case"other":return t.description}}return"Expected "+function(t){var e,n,r=t.map(o);if(r.sort(),r.length>0){for(e=1,n=1;e<r.length;e++)r[e-1]!==r[e]&&(r[n]=r[e],n++);r.length=n}switch(r.length){case 1:return r[0];case 2:return r[0]+" or "+r[1];default:return r.slice(0,-1).join(", ")+", or "+r[r.length-1]}}(t)+" but "+function(t){return t?'"'+r(t)+'"':"end of input"}(e)+" found."},e}(Error);e.SyntaxError=i,e.parse=function(t,e){e=void 0!==e?e:{};var n,r={},o={start:ns},a=ns,u=function(t){return t},s=function(t){return t.filter(function(t){return"comment"!==t})},c=function(){return"comment"},l="//",f=Zu("//",!1),p=/^[^\n]/,h=Ku(["\n"],!0,!1),d="\n",y=Zu("\n",!1),v="/*",m=Zu("/*",!1),b="*/",_=Zu("*/",!1),g={type:"any"},w=function(t){return Rc(t,Qu(),Hu())},R=function(t){return wc({construct_type:"labeled_statement"},t)},T=":",x=Zu(":",!1),E=function(t,e){return{construct_type:"labeled_statement",label:t,statement:e}},A="case",C=Zu("case",!1),O=function(t,e){return{construct_type:"labeled_statement",case:t,statement:e}},S="default",P=Zu("default",!1),j=function(t){return{construct_type:"labeled_statement",default:!0,stmt:t}},I=";",F=Zu(";",!1),N=function(t){return{construct_type:"expression_statement",expression:t}},k=function(){return{construct_type:"null_statement"}},z="{",V=Zu("{",!1),L=function(t){return t},B="}",D=Zu("}",!1),M=function(t){return{construct_type:"block",statements:t}},U="if",W=Zu("if",!1),q="(",$=Zu("(",!1),G=")",H=Zu(")",!1),Q="else",Z=Zu("else",!1),K=function(t,e,n){return{construct_type:"selection_statement",condition:t,then:e,otherwise:n}},Y=function(t,e){return{construct_type:"selection_statement",condition:t,then:e}},X="while",J=Zu("while",!1),tt=function(t,e){return{construct_type:"while_statement",condition:t,body:e}},et="do",nt=Zu("do",!1),rt=function(t,e){return{construct_type:"dowhile_statement",condition:e,body:t}},it="for",ot=Zu("for",!1),at=function(t,e,n,r){return{construct_type:"for_statement",condition:e,initial:t,post:n,body:r}},ut=function(t){return Rc(t,Qu(),Hu())},st="break",ct=Zu("break",!1),lt=function(){return{construct_type:"break_statement"}},ft="continue",pt=Zu("continue",!1),ht=function(){return{construct_type:"continue_statement"}},dt="return",yt=Zu("return",!1),vt=function(t){return{construct_type:"return_statement",expression:t}},mt=function(t){return{construct_type:"declaration_statement",declaration:t}},bt=function(t,e){return Rc({construct_type:"simple_declaration",specs:t,declarators:e},Qu(),Hu())},_t=",",gt=Zu(",",!1),wt=function(t,e){return e},Rt=function(t,e){return e.unshift(t),e},Tt=function(t){return Rc(wc({construct_type:"class_declaration"},t),Qu(),Hu())},xt=function(t,e,n){return Rc({construct_type:"function_definition",specs:t,declarator:e,body:n},Qu(),Hu())},Et=function(t,e,n){return null},At=function(t,e,n,r){return Rc({construct_type:"constructor_definition",name:t,body:r,initializer:n,args:e},Qu(),Hu())},Ct="~",Ot=Zu("~",!1),St=function(t){return null},Pt=function(t,e){return Rc({construct_type:"destructor_definition",name:{identifier:"~"+t.identifier},body:e},Qu(),Hu())},jt="virtual",It=Zu("virtual",!1),Ft=function(t,e){return Rc({construct_type:"destructor_definition",name:{identifier:"~"+t.identifier},body:e,virtual:!0},Qu(),Hu())},Nt=function(t,e){return e},kt=function(t,e){return e.unshift(t),e},zt=function(t,e){return Rc({construct_type:"member_initializer",member:t,args:e||[]},Qu(),Hu())},Vt=function(t){return t},Lt=function(t,e,n){return n},Bt=function(t,e,n){t.push({typeSpec:e});for(var r=t.concat(n),i={typeSpecs:[],storageSpecs:[]},o=0;o<r.length;++o){var a=r[o];a.typeSpec?i.typeSpecs.push(a.typeSpec):a.storageSpec?i.storageSpecs.push(a.storageSpec):"friend"===a?i.friend=!0:"typedef"===a?i.typedef=!0:"inline"===a?i.inline=!0:"explicit"===a?i.explicit=!0:"virtual"===a&&(i.virtual=!0)}return Rc(i,Qu(),Hu())},Dt=function(t){return{typeSpec:t}},Mt=function(t){return{storageSpec:t}},Ut="typedef",Wt=Zu("typedef",!1),qt="friend",$t=Zu("friend",!1),Gt=function(t,e,n){return t.push(e),Rc(t=t.concat(n),Qu(),Hu())},Ht="const",Qt=Zu("const",!1),Zt="volatile",Kt=Zu("volatile",!1),Yt="register",Xt=Zu("register",!1),Jt="static",te=Zu("static",!1),ee="thread_local",ne=Zu("thread_local",!1),re="extern",ie=Zu("extern",!1),oe="mutable",ae=Zu("mutable",!1),ue="inline",se=Zu("inline",!1),ce="explicit",le=Zu("explicit",!1),fe=Yu("simple type name"),pe=function(t){return t},he="char",de=Zu("char",!1),ye="short",ve=Zu("short",!1),me="int",be=Zu("int",!1),_e="bool",ge=Zu("bool",!1),we="long",Re=Zu("long",!1),Te="signed",xe=Zu("signed",!1),Ee="unsigned",Ae=Zu("unsigned",!1),Ce="float",Oe=Zu("float",!1),Se="double",Pe=Zu("double",!1),je="void",Ie=Zu("void",!1),Fe=function(t){return function(t){return xc()[t]}(t.identifier)},Ne=function(t){return t.identifier},ke="enum",ze=Zu("enum",!1),Ve=function(t,e,n){return n},Le=function(t,e,n){return"enum"},Be="=",De=Zu("=",!1),Me=function(t,e){return e},Ue=function(t,e){return{name:t,value:e}},We="@library_unsupported@",qe=Zu("@library_unsupported@",!1),$e=function(t){return Rc(wc(t,{library_unsupported:!0}),Qu(),Hu())},Ge=function(t,e){return Rc(wc(t,{initializer:e}),Qu(),Hu())},He=function(t){return{construct_type:"direct_initializer",args:t}},Qe=function(t){return{construct_type:"copy_initializer",args:[t]}},Ze=function(t){return t},Ke=function(t,e,n){return n},Ye=function(t,e){return e.unshift(t),Rc({construct_type:"initializer_list",args:e},Qu(),Hu())},Xe=function(t){return Rc(wc({construct_type:"declarator"},t),Qu(),Hu())},Je=function(t){return Rc(wc({construct_type:"declarator",abstract:!0},t),Qu(),Hu())},tn="*",en=Zu("*",!1),nn=function(t,e){return wc({pointer:e},t)},rn="&",on=Zu("&",!1),an=function(t,e){return wc({reference:e},t)},un=function(t,e){return wc(t,{postfixes:e})},sn=function(t){return t},cn=function(t,e){return wc({kind:"function",args:t},e)},ln="[",fn=Zu("[",!1),pn="]",hn=Zu("]",!1),dn=function(t){return{kind:"array",size:t}},yn=function(t){return{name:t}},vn=function(t){return{sub:t}},mn="",bn=function(){return{}},_n=function(t,e){return Rc({specs:t,declarator:e},Qu(),Hu())},gn=function(){return{const:!0,volatile:!0}},wn=function(){return{const:!0}},Rn=function(){return{volatile:!0}},Tn=function(t,e){return e},xn=function(t,e){return e.unshift(t),e},En=function(){return[]},An=function(t,e,n){return{construct_type:"parameter_declaration",declarator:e,specs:t,initializer:n}},Cn=function(t,e){return Rc({construct_type:"parameter_declaration",specs:t,declarator:e},Qu(),Hu())},On=function(t,e,n){return[e,n]},Sn=function(t,e){return Rc(gc(t,e,"left","comma_expression"),Qu(),Hu())},Pn=function(t,e,n){return Rc({construct_type:"assignment_expression",lhs:t,operator:e,rhs:n},Qu(),Hu())},jn=function(t,e,n){return Rc({construct_type:"compound_assignment",lhs:t,operator:e,rhs:n},Qu(),Hu())},In="*=",Fn=Zu("*=",!1),Nn="/=",kn=Zu("/=",!1),zn="%=",Vn=Zu("%=",!1),Ln="+=",Bn=Zu("+=",!1),Dn="-=",Mn=Zu("-=",!1),Un=">>=",Wn=Zu(">>=",!1),qn="<<=",$n=Zu("<<=",!1),Gn="&=",Hn=Zu("&=",!1),Qn="and_eq",Zn=Zu("and_eq",!1),Kn=function(){return"&="},Yn="^=",Xn=Zu("^=",!1),Jn="xor_eq",tr=Zu("xor_eq",!1),er=function(){return"^="},nr="|=",rr=Zu("|=",!1),ir="or_eq",or=Zu("or_eq",!1),ar=function(){return"|="},ur=function(t){return t.constant=!0,t},sr="?",cr=Zu("?",!1),lr=function(t,e,n){return Rc({construct_type:"ternary_expression",condition:t,then:e,otherwise:n},Qu(),Hu())},fr="||",pr=Zu("||",!1),hr="or",dr=Zu("or",!1),yr=function(t,e,n){return["||",n]},vr=function(t,e){return Rc(gc(t,e,"left","logical_binary_operator_expression"),Qu(),Hu())},mr="&&",br=Zu("&&",!1),_r="and",gr=Zu("and",!1),wr=function(t,e,n){return["&&",n]},Rr="|",Tr=Zu("|",!1),xr="bitor",Er=Zu("bitor",!1),Ar=function(t,e,n){return["|",n]},Cr=function(t,e){return Rc(gc(t,e,"left","arithmetic_binary_operator_expression"),Qu(),Hu())},Or="^",Sr=Zu("^",!1),Pr="xor",jr=Zu("xor",!1),Ir=function(t,e,n){return["^",n]},Fr="bitand",Nr=Zu("bitand",!1),kr=function(t,e,n){return["&",n]},zr="==",Vr=Zu("==",!1),Lr="!=",Br=Zu("!=",!1),Dr="not_eq",Mr=Zu("not_eq",!1),Ur=function(t){return"!="},Wr=function(t,e){return Rc(gc(t,e,"left","relational_binary_operator_expression"),Qu(),Hu())},qr="<=",$r=Zu("<=",!1),Gr=">=",Hr=Zu(">=",!1),Qr="<",Zr=Zu("<",!1),Kr=">",Yr=Zu(">",!1),Xr="<<",Jr=Zu("<<",!1),ti=">>",ei=Zu(">>",!1),ni="+",ri=Zu("+",!1),ii="-",oi=Zu("-",!1),ai="/",ui=Zu("/",!1),si="%",ci=Zu("%",!1),li=function(t,e){return Rc(gc(t,e,"left","pointer_to_member_expression"),Qu(),Hu())},fi=".*",pi=Zu(".*",!1),hi="->*",di=Zu("->*",!1),yi=function(t,e){return Rc({construct_type:"c_style_cast_expression",type:t,operand:e},Qu(),Hu())},vi="++",mi=Zu("++",!1),bi=function(t,e){return Rc({construct_type:"prefix_increment_expression",operator:t,operand:e},Qu(),Hu())},_i="--",gi=Zu("--",!1),wi=function(t,e){return Rc({construct_type:"prefix_decrement_expression",operator:t,operand:e},Qu(),Hu())},Ri=function(t,e){return Rc(wc({operand:e},t),Qu(),Hu())},Ti="sizeof",xi=Zu("sizeof",!1),Ei=function(t,e){return Rc({construct_type:"sizeof_expression",operator:"sizeof",operand:e},Qu(),Hu())},Ai=function(t,e){return Rc({construct_type:"sizeof_type_expression",operator:"sizeof",operand:e},Qu(),Hu())},Ci=function(){return{construct_type:"dereference_expression",operator:"*"}},Oi=function(){return{construct_type:"address_of_expression",operator:"&"}},Si=function(){return{construct_type:"unary_plus_expression",operator:"+"}},Pi=function(){return{construct_type:"unary_minus_expression",operator:"-"}},ji="!",Ii=Zu("!",!1),Fi=function(){return{construct_type:"logical_not_expression",operator:"!"}},Ni="not",ki=Zu("not",!1),zi=function(){return{construct_type:"bitwise_not_expression",operator:"~"}},Vi="compl",Li=Zu("compl",!1),Bi="new",Di=Zu("new",!1),Mi=function(t,e){return Rc(wc({construct_type:"new_expression",initializer:e},t),Qu(),Hu())},Ui=function(t,e){return Rc(wc({construct_type:"new_expression",initializer:e},t),Qu(),Hu())},Wi=function(t,e){return e},qi=function(t,e){return Rc({specs:t,declarator:e},Qu(),Hu())},$i=function(t){return Rc(wc({construct_type:"declarator"},t),Qu(),Hu())},Gi=function(t){return{postfixes:t}},Hi=function(t){return t},Qi=function(t){return{type:"array",size:t}},Zi=function(t){return{args:t||[]}},Ki="delete",Yi=Zu("delete",!1),Xi=function(t){return Rc({construct_type:"delete_expression",operand:t},Qu(),Hu())},Ji=function(t){return Rc({construct_type:"delete_array_expression",operand:t},Qu(),Hu())},to="static_cast",eo=Zu("static_cast",!1),no=function(t,e){return Rc({construct_type:"static_cast_expression",type:t,operand:e},Qu(),Hu())},ro="dynamic_cast",io=Zu("dynamic_cast",!1),oo=function(t,e){return Rc({construct_type:"dynamic_cast_expression",type:t,operand:e},Qu(),Hu())},ao="reinterpret_cast",uo=Zu("reinterpret_cast",!1),so=function(t,e){return Rc({construct_type:"reinterpret_cast_expression",type:t,operand:e},Qu(),Hu())},co="const_cast",lo=Zu("const_cast",!1),fo=function(t,e){return Rc({construct_type:"const_cast_expression",type:t,operand:e},Qu(),Hu())},po=function(t,e){return e},ho=function(t,e){return e.length>0?Rc(function t(e,n){if(0==e.length)return n;var r=e.pop();return r.operand=t(e,n),r}(e,t),Qu(),Hu()):t},yo=function(t){return Rc({construct_type:"subscript_expression",arg:t},Qu(),Hu())},vo=function(t){return Rc({construct_type:"function_call_expression",args:t||[]},Qu(),Hu())},mo=".",bo=Zu(".",!1),_o=function(t){return Rc({construct_type:"dot_expression",member:t},Qu(),Hu())},go="->",wo=Zu("->",!1),Ro=function(t){return Rc({construct_type:"arrow_expression",member:t},Qu(),Hu())},To=function(){return Rc({construct_type:"postfix_increment_expression"},Qu(),Hu())},xo=function(){return Rc({construct_type:"postfix_decrement_expression"},Qu(),Hu())},Eo=function(t,e){return Rc({construct_type:"construct_expression",type:t,args:e||[]},Qu(),Hu())},Ao=function(t,e){return e},Co=function(t){return Rc({construct_type:"parentheses_expression",subexpression:t},Qu(),Hu())},Oo="this",So=Zu("this",!1),Po=function(){return Rc({construct_type:"this_expression"},Qu(),Hu())},jo=function(t){return Rc(wc({construct_type:"identifier_expression"},t),Qu(),Hu())},Io=function(t,e){return t.push(e),{identifier:t}},Fo="::",No=Zu("::",!1),ko=function(t){return t},zo=function(){return[]},Vo=function(t){return Rc({identifier:t},Qu(),Hu())},Lo="operator",Bo=Zu("operator",!1),Do=function(t){return Rc({identifier:"operator"+t,operator:t},Qu(),Hu())},Mo="new[]",Uo=Zu("new[]",!1),Wo="delete[]",qo=Zu("delete[]",!1),$o="()",Go=Zu("()",!1),Ho="[]",Qo=Zu("[]",!1),Zo=(Zu("?:",!1),function(t){return Rc({construct_type:"numeric_literal",type:"float",value:t},Qu(),Hu())}),Ko=function(t){return Rc({construct_type:"numeric_literal",type:"int",value:t},Qu(),Hu())},Yo=function(t){return Rc({construct_type:"numeric_literal",type:"char",value:t},Qu(),Hu())},Xo=function(t){return Rc({construct_type:"string_literal",type:"string",value:t},Qu(),Hu())},Jo=function(t){return Rc({construct_type:"numeric_literal",type:"bool",value:t},Qu(),Hu())},ta=/^[0-9]/,ea=Ku([["0","9"]],!1,!1),na=function(t,e){return parseInt((t||"")+e.join(""))},ra=/^[0-9.]/,ia=Ku([["0","9"],"."],!1,!1),oa=function(t,e){return e.indexOf(".")==e.lastIndexOf(".")&&-1!=e.indexOf(".")},aa=function(t,e){return parseFloat((t||"")+e.join(""))},ua="'",sa=Zu("'",!1),ca=/^[^'\\\n]/,la=Ku(["'","\\","\n"],!0,!1),fa=function(t){return t},pa='"',ha=Zu('"',!1),da=/^[^"\\\n]/,ya=Ku(['"',"\\","\n"],!0,!1),va=function(t){return t.join("")},ma="true",ba=Zu("true",!1),_a=function(){return!0},ga="false",wa=Zu("false",!1),Ra=function(){return!1},Ta='\\"',xa=Zu('\\"',!1),Ea="\\'",Aa=Zu("\\'",!1),Ca="\\?",Oa=Zu("\\?",!1),Sa="\\\\",Pa=Zu("\\\\",!1),ja="\\a",Ia=Zu("\\a",!1),Fa="\\b",Na=Zu("\\b",!1),ka="\\f",za=Zu("\\f",!1),Va="\\n",La=Zu("\\n",!1),Ba="\\r",Da=Zu("\\r",!1),Ma="\\t",Ua=Zu("\\t",!1),Wa="\\v",qa=Zu("\\v",!1),$a="\\0",Ga=Zu("\\0",!1),Ha=/^[0-8]/,Qa=Ku([["0","8"]],!1,!1),Za=Yu("identifier"),Ka=function(t,e){return Rc({identifier:t+e.join("")},Qu(),Hu())},Ya=/^[a-zA-Z0-9_]/,Xa=Ku([["a","z"],["A","Z"],["0","9"],"_"],!1,!1),Ja=/^[a-zA-Z_]/,tu=Ku([["a","z"],["A","Z"],"_"],!1,!1),eu=Yu("optional whitespace"),nu=/^[ \t\n\r]/,ru=Ku([" ","\t","\n","\r"],!1,!1),iu=Yu("whitespace"),ou=function(t){xc()[t.name.identifier]=!0},au=function(t,e){return Rc({head:t,member_specs:e},Qu(),Hu())},uu=function(t,e,n){return n},su=function(t,e,n){return Rc({key:t,name:e,bases:n},Qu(),Hu())},cu="class",lu=Zu("class",!1),fu="struct",pu=Zu("struct",!1),hu="union",du=Zu("union",!1),yu=function(t){return t},vu=function(t){return{members:t}},mu=function(t,e){return e},bu=function(t,e){return{members:e,access:t}},_u="private",gu=Zu("private",!1),wu="protected",Ru=Zu("protected",!1),Tu="public",xu=Zu("public",!1),Eu=function(t,e){return Rc({construct_type:"member_declaration",specs:t,declarators:e},Qu(),Hu())},Au=function(t){return t},Cu=function(t){return t},Ou=function(t){return t},Su="0",Pu=Zu("0",!1),ju=function(t){return t.pureVirtual=!0,t},Iu=function(t){return t.library_unsupported=!0,t},Fu=function(t,e){return t.init=e,t},Nu=function(t){return t},ku=function(t,e){return e},zu=function(t){return t},Vu=function(t,e){return{name:e,virtual:!0,access:t}},Lu=function(t,e){return{name:e,access:t}},Bu=function(t){return{name:t}},Du=function(t,e){return t.push(e),t},Mu=0,Uu=0,Wu=[{line:1,column:1}],qu=0,$u=[],Gu=0;if(void 0!==e.startRule){if(!(e.startRule in o))throw new Error("Can't start parsing from rule \""+e.startRule+'".');a=o[e.startRule]}function Hu(){return t.substring(Uu,Mu)}function Qu(){return Ju(Uu,Mu)}function Zu(t,e){return{type:"literal",text:t,ignoreCase:e}}function Ku(t,e,n){return{type:"class",parts:t,inverted:e,ignoreCase:n}}function Yu(t){return{type:"other",description:t}}function Xu(e){var n,r=Wu[e];if(r)return r;for(n=e-1;!Wu[n];)n--;for(r={line:(r=Wu[n]).line,column:r.column};n<e;)10===t.charCodeAt(n)?(r.line++,r.column=1):r.column++,n++;return Wu[e]=r,r}function Ju(t,e){var n=Xu(t),r=Xu(e);return{start:{offset:t,line:n.line,column:n.column},end:{offset:e,line:r.line,column:r.column}}}function ts(t){Mu<qu||(Mu>qu&&(qu=Mu,$u=[]),$u.push(t))}function es(t,e,n){return new i(i.buildMessage(t,e),t,e,n)}function ns(){var t,e,n,i;if(t=Mu,pc()!==r){for(e=[],n=Mu,(i=rs())!==r&&pc()!==r?(Uu=n,n=i=u(i)):(Mu=n,n=r);n!==r;)e.push(n),n=Mu,(i=rs())!==r&&pc()!==r?(Uu=n,n=i=u(i)):(Mu=n,n=r);e!==r?(Uu=t,t=s(e)):(Mu=t,t=r)}else Mu=t,t=r;return t}function rs(){var t,e;return t=Mu,(e=is())!==r&&(Uu=t,e=c()),(t=e)===r&&(t=ls()),t}function is(){var e,n,i,o,a,u;if(e=Mu,t.substr(Mu,2)===l?(n=l,Mu+=2):(n=r,0===Gu&&ts(f)),n!==r){for(i=[],p.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(h));o!==r;)i.push(o),p.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(h));i!==r?(10===t.charCodeAt(Mu)?(o=d,Mu++):(o=r,0===Gu&&ts(y)),o!==r?e=n=[n,i,o]:(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;if(e===r)if(e=Mu,t.substr(Mu,2)===v?(n=v,Mu+=2):(n=r,0===Gu&&ts(m)),n!==r){for(i=[],o=Mu,a=Mu,Gu++,t.substr(Mu,2)===b?(u=b,Mu+=2):(u=r,0===Gu&&ts(_)),Gu--,u===r?a=void 0:(Mu=a,a=r),a!==r?(t.length>Mu?(u=t.charAt(Mu),Mu++):(u=r,0===Gu&&ts(g)),u!==r?o=a=[a,u]:(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,a=Mu,Gu++,t.substr(Mu,2)===b?(u=b,Mu+=2):(u=r,0===Gu&&ts(_)),Gu--,u===r?a=void 0:(Mu=a,a=r),a!==r?(t.length>Mu?(u=t.charAt(Mu),Mu++):(u=r,0===Gu&&ts(g)),u!==r?o=a=[a,u]:(Mu=o,o=r)):(Mu=o,o=r);i!==r?(t.substr(Mu,2)===b?(o=b,Mu+=2):(o=r,0===Gu&&ts(_)),o!==r?e=n=[n,i,o]:(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;return e}function os(){var e,n;return e=Mu,(n=function(){var e,n;return e=Mu,(n=function(){var e,n,i,o,a;return e=Mu,(n=lc())!==r&&pc()!==r?(58===t.charCodeAt(Mu)?(i=T,Mu++):(i=r,0===Gu&&ts(x)),i!==r&&pc()!==r&&(o=os())!==r?(Uu=e,n=E(n,o),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,4)===A?(n=A,Mu+=4):(n=r,0===Gu&&ts(C)),n!==r&&hc()!==r&&(i=zs())!==r&&pc()!==r?(58===t.charCodeAt(Mu)?(o=T,Mu++):(o=r,0===Gu&&ts(x)),o!==r&&pc()!==r&&(a=os())!==r?(Uu=e,n=O(i,a),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,7)===S?(n=S,Mu+=7):(n=r,0===Gu&&ts(P)),n!==r&&pc()!==r?(58===t.charCodeAt(Mu)?(i=T,Mu++):(i=r,0===Gu&&ts(x)),i!==r&&pc()!==r&&(o=os())!==r?(Uu=e,n=j(o),e=n):(Mu=e,e=r)):(Mu=e,e=r))),e}())!==r&&(Uu=e,n=R(n)),(e=n)===r&&(e=ss())===r&&(e=function(){var e,n,i,o,a,u,s,c;return e=Mu,t.substr(Mu,2)===U?(n=U,Mu+=2):(n=r,0===Gu&&ts(W)),n!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r&&(o=Ns())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r&&pc()!==r&&(u=os())!==r&&pc()!==r?(t.substr(Mu,4)===Q?(s=Q,Mu+=4):(s=r,0===Gu&&ts(Z)),s!==r&&pc()!==r&&(c=os())!==r?(Uu=e,n=K(o,u,c),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,2)===U?(n=U,Mu+=2):(n=r,0===Gu&&ts(W)),n!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r&&(o=Ns())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r&&pc()!==r&&(u=os())!==r?(Uu=e,n=Y(o,u),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}())===r&&(e=function(){var e,n,i,o,a,u,s,c,l,f,p,h,d,y,v,m;return e=Mu,t.substr(Mu,5)===X?(n=X,Mu+=5):(n=r,0===Gu&&ts(J)),n!==r&&(i=pc())!==r?(40===t.charCodeAt(Mu)?(o=q,Mu++):(o=r,0===Gu&&ts($)),o!==r&&(a=pc())!==r&&(u=Ns())!==r&&(s=pc())!==r?(41===t.charCodeAt(Mu)?(c=G,Mu++):(c=r,0===Gu&&ts(H)),c!==r&&(l=pc())!==r&&(f=os())!==r?(Uu=e,n=tt(u,f),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,2)===et?(n=et,Mu+=2):(n=r,0===Gu&&ts(nt)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r&&(a=os())!==r&&(u=pc())!==r?(t.substr(Mu,5)===X?(s=X,Mu+=5):(s=r,0===Gu&&ts(J)),s!==r&&(c=pc())!==r?(40===t.charCodeAt(Mu)?(l=q,Mu++):(l=r,0===Gu&&ts($)),l!==r&&(f=pc())!==r&&(p=Ns())!==r&&(h=pc())!==r?(41===t.charCodeAt(Mu)?(d=G,Mu++):(d=r,0===Gu&&ts(H)),d!==r&&(y=pc())!==r?(59===t.charCodeAt(Mu)?(v=I,Mu++):(v=r,0===Gu&&ts(F)),v!==r?(Uu=e,n=rt(a,p),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,3)===it?(n=it,Mu+=3):(n=r,0===Gu&&ts(ot)),n!==r&&(i=pc())!==r?(40===t.charCodeAt(Mu)?(o=q,Mu++):(o=r,0===Gu&&ts($)),o!==r&&(a=pc())!==r&&(u=function(){var t,e;return(t=as())===r&&(t=us())===r&&(t=Mu,(e=cs())!==r&&(Uu=t,e=ut(e)),t=e),t}())!==r&&(s=pc())!==r&&(c=Ns())!==r&&(l=pc())!==r?(59===t.charCodeAt(Mu)?(f=I,Mu++):(f=r,0===Gu&&ts(F)),f!==r&&(p=pc())!==r&&(h=Ns())!==r&&(d=pc())!==r?(41===t.charCodeAt(Mu)?(y=G,Mu++):(y=r,0===Gu&&ts(H)),y!==r&&(v=pc())!==r&&(m=os())!==r?(Uu=e,n=at(u,c,h,m),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r))),e}())===r&&(e=function(){var e,n,i,o,a,u;return e=Mu,t.substr(Mu,5)===st?(n=st,Mu+=5):(n=r,0===Gu&&ts(ct)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r?(59===t.charCodeAt(Mu)?(a=I,Mu++):(a=r,0===Gu&&ts(F)),a!==r?(Uu=e,n=lt(),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,8)===ft?(n=ft,Mu+=8):(n=r,0===Gu&&ts(pt)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r?(59===t.charCodeAt(Mu)?(a=I,Mu++):(a=r,0===Gu&&ts(F)),a!==r?(Uu=e,n=ht(),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,6)===dt?(n=dt,Mu+=6):(n=r,0===Gu&&ts(yt)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r?((a=Ns())===r&&(a=null),a!==r&&pc()!==r?(59===t.charCodeAt(Mu)?(u=I,Mu++):(u=r,0===Gu&&ts(F)),u!==r?(Uu=e,n=vt(a),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r))),e}())===r&&(e=cs())===r&&(e=as())===r&&(e=us()),e}())!==r&&(Uu=e,n=w(n)),e=n}function as(){var e,n,i;return e=Mu,(n=Ns())!==r&&pc()!==r?(59===t.charCodeAt(Mu)?(i=I,Mu++):(i=r,0===Gu&&ts(F)),i!==r?(Uu=e,e=n=N(n)):(Mu=e,e=r)):(Mu=e,e=r),e}function us(){var e,n;return e=Mu,pc()!==r?(59===t.charCodeAt(Mu)?(n=I,Mu++):(n=r,0===Gu&&ts(F)),n!==r?(Uu=e,e=k()):(Mu=e,e=r)):(Mu=e,e=r),e}function ss(){var e,n,i,o,a;if(e=Mu,123===t.charCodeAt(Mu)?(n=z,Mu++):(n=r,0===Gu&&ts(V)),n!==r)if(pc()!==r){for(i=[],o=Mu,(a=os())!==r&&pc()!==r?(Uu=o,o=a=L(a)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=os())!==r&&pc()!==r?(Uu=o,o=a=L(a)):(Mu=o,o=r);i!==r?(125===t.charCodeAt(Mu)?(o=B,Mu++):(o=r,0===Gu&&ts(D)),o!==r?(Uu=e,e=n=M(i)):(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;else Mu=e,e=r;return e}function cs(){var t,e;return t=Mu,(e=ls())!==r&&(Uu=t,e=mt(e)),t=e}function ls(){var e;return(e=function(){var e,n,i,o,a,u;return e=Mu,(n=ds())!==r?(i=Mu,Gu++,o=lc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r&&(a=function(){var e,n,i,o,a,u,s;if(e=Mu,(n=gs())!==r){for(i=[],o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=gs())!==r?(Uu=o,a=wt(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=gs())!==r?(Uu=o,a=wt(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,n=Rt(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&pc()!==r?(59===t.charCodeAt(Mu)?(u=I,Mu++):(u=r,0===Gu&&ts(F)),u!==r?(Uu=e,n=bt(n,a),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}())===r&&(e=function(){var e,n,i;return e=Mu,(n=function(){var e,n,i,o,a,u;if(e=Mu,(n=function(){var e,n,i,o,a,u;return e=Mu,(n=function(){var e;return t.substr(Mu,5)===cu?(e=cu,Mu+=5):(e=r,0===Gu&&ts(lu)),e===r&&(t.substr(Mu,6)===fu?(e=fu,Mu+=6):(e=r,0===Gu&&ts(pu)),e===r&&(t.substr(Mu,5)===hu?(e=hu,Mu+=5):(e=r,0===Gu&&ts(du)))),e}())!==r&&hc()!==r&&(i=lc())!==r?(o=Mu,(a=hc())!==r&&(u=function(){var e,n,i;return e=Mu,58===t.charCodeAt(Mu)?(n=T,Mu++):(n=r,0===Gu&&ts(x)),n!==r&&pc()!==r&&(i=function(){var e,n,i,o,a,u,s;if(e=Mu,(n=bc())!==r){for(i=[],o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=bc())!==r?(Uu=o,a=ku(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=bc())!==r?(Uu=o,a=ku(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,n=Rt(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r?(Uu=e,n=Nu(i),e=n):(Mu=e,e=r),e}())!==r?(Uu=o,a=uu(n,i,u),o=a):(Mu=o,o=r),o===r&&(o=null),o!==r?(Uu=e,n=su(n,i,o),e=n):(Mu=e,e=r)):(Mu=e,e=r),e}())!==r)if(Uu=Mu,(ou(n)?r:void 0)!==r)if(pc()!==r)if(123===t.charCodeAt(Mu)?(i=z,Mu++):(i=r,0===Gu&&ts(V)),i!==r)if(pc()!==r){for(o=[],a=dc();a!==r;)o.push(a),a=dc();o!==r&&(a=pc())!==r?(125===t.charCodeAt(Mu)?(u=B,Mu++):(u=r,0===Gu&&ts(D)),u!==r?(Uu=e,n=au(n,o),e=n):(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;return e}())!==r&&pc()!==r?(59===t.charCodeAt(Mu)?(i=I,Mu++):(i=r,0===Gu&&ts(F)),i!==r?(Uu=e,n=Tt(n),e=n):(Mu=e,e=r)):(Mu=e,e=r),e}())===r&&(e=fs()),e}function fs(){var t,e,n,i,o,a;return t=Mu,(e=ds())!==r?(n=Mu,Gu++,i=lc(),Gu--,i===r?n=void 0:(Mu=n,n=r),n!==r&&(i=pc())!==r&&(o=Rs())!==r&&pc()!==r&&(a=ss())!==r?(Uu=t,t=e=xt(e,o,a)):(Mu=t,t=r)):(Mu=t,t=r),t}function ps(){var e,n,i,o,a,u,s,c;return e=Mu,(n=lc())!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r&&(o=Is())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r&&pc()!==r?((u=function(){var e,n,i,o,a,u,s,c;if(e=Mu,58===t.charCodeAt(Mu)?(n=T,Mu++):(n=r,0===Gu&&ts(x)),n!==r)if(pc()!==r)if((i=hs())!==r){for(o=[],a=Mu,(u=pc())!==r?(44===t.charCodeAt(Mu)?(s=_t,Mu++):(s=r,0===Gu&&ts(gt)),s!==r&&pc()!==r&&(c=hs())!==r?(Uu=a,u=Nt(i,c),a=u):(Mu=a,a=r)):(Mu=a,a=r);a!==r;)o.push(a),a=Mu,(u=pc())!==r?(44===t.charCodeAt(Mu)?(s=_t,Mu++):(s=r,0===Gu&&ts(gt)),s!==r&&pc()!==r&&(c=hs())!==r?(Uu=a,u=Nt(i,c),a=u):(Mu=a,a=r)):(Mu=a,a=r);o!==r?(Uu=e,n=kt(i,o),e=n):(Mu=e,e=r)}else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;return e}())===r&&(u=null),u!==r&&pc()!==r?((s=ss())===r&&(s=Mu,59===t.charCodeAt(Mu)?(c=I,Mu++):(c=r,0===Gu&&ts(F)),c!==r&&(Uu=s,c=Et(n,o,u)),s=c),s!==r?(Uu=e,e=n=At(n,o,u,s)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}function hs(){var e,n,i,o,a;return e=Mu,(n=lc())!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r?((o=oc())===r&&(o=null),o!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r?(Uu=e,e=n=zt(n,o)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}function ds(){var t,e,n,i,o,a;for(t=Mu,e=[],n=Mu,(i=ys())!==r&&(o=hc())!==r?(Uu=n,n=i=Vt(i)):(Mu=n,n=r);n!==r;)e.push(n),n=Mu,(i=ys())!==r&&(o=hc())!==r?(Uu=n,n=i=Vt(i)):(Mu=n,n=r);if(e!==r)if((n=bs())!==r){for(i=[],o=Mu,hc()!==r&&(a=ys())!==r?(Uu=o,o=Lt(e,n,a)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,hc()!==r&&(a=ys())!==r?(Uu=o,o=Lt(e,n,a)):(Mu=o,o=r);i!==r?(Uu=t,t=e=Bt(e,n,i)):(Mu=t,t=r)}else Mu=t,t=r;else Mu=t,t=r;return t}function ys(){var e,n;return e=Mu,(n=ms())!==r&&(Uu=e,n=Dt(n)),(e=n)===r&&(e=Mu,(n=function(){var e;return t.substr(Mu,8)===Yt?(e=Yt,Mu+=8):(e=r,0===Gu&&ts(Xt)),e===r&&(t.substr(Mu,6)===Jt?(e=Jt,Mu+=6):(e=r,0===Gu&&ts(te)),e===r&&(t.substr(Mu,12)===ee?(e=ee,Mu+=12):(e=r,0===Gu&&ts(ne)),e===r&&(t.substr(Mu,6)===re?(e=re,Mu+=6):(e=r,0===Gu&&ts(ie)),e===r&&(t.substr(Mu,7)===oe?(e=oe,Mu+=7):(e=r,0===Gu&&ts(ae)))))),e}())!==r&&(Uu=e,n=Mt(n)),(e=n)===r&&(e=function(){var e;return t.substr(Mu,6)===ue?(e=ue,Mu+=6):(e=r,0===Gu&&ts(se)),e===r&&(t.substr(Mu,8)===ce?(e=ce,Mu+=8):(e=r,0===Gu&&ts(le)),e===r&&(t.substr(Mu,7)===jt?(e=jt,Mu+=7):(e=r,0===Gu&&ts(It)))),e}())===r&&(t.substr(Mu,7)===Ut?(e=Ut,Mu+=7):(e=r,0===Gu&&ts(Wt)),e===r&&(t.substr(Mu,6)===qt?(e=qt,Mu+=6):(e=r,0===Gu&&ts($t))))),e}function vs(){var t,e,n,i,o,a;for(t=Mu,e=[],n=Mu,(i=ms())!==r&&(o=hc())!==r?(Uu=n,n=i=Vt(i)):(Mu=n,n=r);n!==r;)e.push(n),n=Mu,(i=ms())!==r&&(o=hc())!==r?(Uu=n,n=i=Vt(i)):(Mu=n,n=r);if(e!==r)if((n=bs())!==r){for(i=[],o=Mu,hc()!==r&&(a=ms())!==r?(Uu=o,o=Lt(e,n,a)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,hc()!==r&&(a=ms())!==r?(Uu=o,o=Lt(e,n,a)):(Mu=o,o=r);i!==r?(Uu=t,t=e=Gt(e,n,i)):(Mu=t,t=r)}else Mu=t,t=r;else Mu=t,t=r;return t}function ms(){var e;return(e=function(){var e,n,i,o,a,u,s,c,l,f;if(e=Mu,t.substr(Mu,4)===ke?(n=ke,Mu+=4):(n=r,0===Gu&&ts(ze)),n!==r)if(hc()!==r)if((i=lc())===r&&(i=null),i!==r)if(pc()!==r)if(123===t.charCodeAt(Mu)?(o=z,Mu++):(o=r,0===Gu&&ts(V)),o!==r)if((a=_s())!==r){for(u=[],s=Mu,(c=pc())!==r?(44===t.charCodeAt(Mu)?(l=_t,Mu++):(l=r,0===Gu&&ts(gt)),l!==r&&pc()!==r&&(f=_s())!==r?(Uu=s,c=Ve(i,a,f),s=c):(Mu=s,s=r)):(Mu=s,s=r);s!==r;)u.push(s),s=Mu,(c=pc())!==r?(44===t.charCodeAt(Mu)?(l=_t,Mu++):(l=r,0===Gu&&ts(gt)),l!==r&&pc()!==r&&(f=_s())!==r?(Uu=s,c=Ve(i,a,f),s=c):(Mu=s,s=r)):(Mu=s,s=r);u!==r&&(s=pc())!==r?(125===t.charCodeAt(Mu)?(c=B,Mu++):(c=r,0===Gu&&ts(D)),c!==r?(Uu=e,n=Le(i,a,u),e=n):(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;return e}())===r&&(t.substr(Mu,5)===Ht?(e=Ht,Mu+=5):(e=r,0===Gu&&ts(Qt)),e===r&&(t.substr(Mu,8)===Zt?(e=Zt,Mu+=8):(e=r,0===Gu&&ts(Kt)))),e}function bs(){var e,n,i,o;return Gu++,e=Mu,(n=function(){var e,n;return t.substr(Mu,4)===he?(e=he,Mu+=4):(e=r,0===Gu&&ts(de)),e===r&&(t.substr(Mu,5)===ye?(e=ye,Mu+=5):(e=r,0===Gu&&ts(ve)),e===r&&(t.substr(Mu,3)===me?(e=me,Mu+=3):(e=r,0===Gu&&ts(be)),e===r&&(t.substr(Mu,4)===_e?(e=_e,Mu+=4):(e=r,0===Gu&&ts(ge)),e===r&&(t.substr(Mu,4)===we?(e=we,Mu+=4):(e=r,0===Gu&&ts(Re)),e===r&&(t.substr(Mu,6)===Te?(e=Te,Mu+=6):(e=r,0===Gu&&ts(xe)),e===r&&(t.substr(Mu,8)===Ee?(e=Ee,Mu+=8):(e=r,0===Gu&&ts(Ae)),e===r&&(t.substr(Mu,5)===Ce?(e=Ce,Mu+=5):(e=r,0===Gu&&ts(Oe)),e===r&&(t.substr(Mu,6)===Se?(e=Se,Mu+=6):(e=r,0===Gu&&ts(Pe)),e===r&&(t.substr(Mu,4)===je?(e=je,Mu+=4):(e=r,0===Gu&&ts(Ie)),e===r&&(e=Mu,(n=lc())!==r?(Uu=Mu,(Fe(n)?void 0:r)!==r?(Uu=e,n=Ne(n),e=n):(Mu=e,e=r)):(Mu=e,e=r))))))))))),e}())!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,e=n=pe(n)):(Mu=e,e=r)):(Mu=e,e=r),Gu--,e===r&&(n=r,0===Gu&&ts(fe)),e}function _s(){var e,n,i,o,a;return e=Mu,(n=lc())!==r?(i=Mu,pc()!==r?(61===t.charCodeAt(Mu)?(o=Be,Mu++):(o=r,0===Gu&&ts(De)),o!==r&&pc()!==r&&(a=zs())!==r?(Uu=i,i=Me(n,a)):(Mu=i,i=r)):(Mu=i,i=r),i!==r?(Uu=e,e=n=Ue(n,i)):(Mu=e,e=r)):(Mu=e,e=r),e}function gs(){var e,n,i,o;return e=Mu,(n=Rs())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(i=Be,Mu++):(i=r,0===Gu&&ts(De)),i!==r&&pc()!==r?(t.substr(Mu,21)===We?(o=We,Mu+=21):(o=r,0===Gu&&ts(qe)),o!==r?(Uu=e,e=n=$e(n)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=Rs())!==r&&pc()!==r?((i=function(){var e,n,i,o;return(e=ws())===r&&(e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r?((i=oc())===r&&(i=null),i!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r?(Uu=e,n=He(i),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}())===r&&(i=null),i!==r?(Uu=e,e=n=Ge(n,i)):(Mu=e,e=r)):(Mu=e,e=r)),e}function ws(){var e,n,i,o,a;return e=Mu,61===t.charCodeAt(Mu)?(n=Be,Mu++):(n=r,0===Gu&&ts(De)),n!==r&&pc()!==r&&(i=ks())!==r?(Uu=e,e=n=Qe(i)):(Mu=e,e=r),e===r&&(e=Mu,61===t.charCodeAt(Mu)?(n=Be,Mu++):(n=r,0===Gu&&ts(De)),n!==r&&pc()!==r?(123===t.charCodeAt(Mu)?(i=z,Mu++):(i=r,0===Gu&&ts(V)),i!==r&&pc()!==r&&(o=function(){var e,n,i,o,a,u,s;if(e=Mu,(n=ks())!==r){for(i=[],o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=ks())!==r?(Uu=o,a=Ke(n,u,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=ks())!==r?(Uu=o,a=Ke(n,u,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,n=Ye(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&pc()!==r?(125===t.charCodeAt(Mu)?(a=B,Mu++):(a=r,0===Gu&&ts(D)),a!==r?(Uu=e,e=n=Ze(o)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}function Rs(){var t,e;return t=Mu,(e=xs())!==r&&(Uu=t,e=Xe(e)),t=e}function Ts(){var t,e;return t=Mu,(e=Es())!==r&&(Uu=t,e=Je(e)),t=e}function xs(){var e,n,i,o,a;return e=Mu,42===t.charCodeAt(Mu)?(n=tn,Mu++):(n=r,0===Gu&&ts(en)),n!==r&&(i=pc())!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r&&(a=xs())!==r?(Uu=e,e=n=nn(o,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,38===t.charCodeAt(Mu)?(n=rn,Mu++):(n=r,0===Gu&&ts(on)),n!==r&&(i=pc())!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r&&(a=xs())!==r?(Uu=e,e=n=an(o,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=Os())!==r&&(i=As())!==r?(Uu=e,e=n=un(n,i)):(Mu=e,e=r),e===r&&(e=Os()))),e}function Es(){var e,n,i,o,a;return e=Mu,42===t.charCodeAt(Mu)?(n=tn,Mu++):(n=r,0===Gu&&ts(en)),n!==r&&(i=pc())!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r&&(a=Es())!==r?(Uu=e,e=n=nn(o,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,38===t.charCodeAt(Mu)?(n=rn,Mu++):(n=r,0===Gu&&ts(on)),n!==r&&(i=pc())!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r&&(a=Es())!==r?(Uu=e,e=n=an(o,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=Ss())!==r&&(i=As())!==r?(Uu=e,e=n=un(n,i)):(Mu=e,e=r),e===r&&(e=Ss()))),e}function As(){var t,e,n;if(t=[],e=Mu,pc()!==r&&(n=Cs())!==r?(Uu=e,e=sn(n)):(Mu=e,e=r),e!==r)for(;e!==r;)t.push(e),e=Mu,pc()!==r&&(n=Cs())!==r?(Uu=e,e=sn(n)):(Mu=e,e=r);else t=r;return t}function Cs(){var e,n,i,o,a;return e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r&&(i=Is())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r&&pc()!==r?((a=js())===r&&(a=null),a!==r?(Uu=e,e=n=cn(i,a)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,91===t.charCodeAt(Mu)?(n=ln,Mu++):(n=r,0===Gu&&ts(fn)),n!==r&&pc()!==r?((i=zs())===r&&(i=null),i!==r&&pc()!==r?(93===t.charCodeAt(Mu)?(o=pn,Mu++):(o=r,0===Gu&&ts(hn)),o!==r?(Uu=e,e=n=dn(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}function Os(){var e,n,i,o;return e=Mu,(n=sc())!==r&&(Uu=e,n=yn(n)),(e=n)===r&&(e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r?((i=xs())===r&&(i=null),i!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r?(Uu=e,e=n=vn(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}function Ss(){var e,n,i,o;return e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r?((i=Es())===r&&(i=null),i!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r?(Uu=e,e=n=vn(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=mn)!==r&&(Uu=e,n=bn()),e=n),e}function Ps(){var t,e,n;return t=Mu,(e=vs())!==r&&pc()!==r&&(n=Ts())!==r?(Uu=t,t=e=_n(e,n)):(Mu=t,t=r),t}function js(){var e,n,i;return e=Mu,t.substr(Mu,5)===Ht?(n=Ht,Mu+=5):(n=r,0===Gu&&ts(Qt)),n!==r&&hc()!==r?(t.substr(Mu,8)===Zt?(i=Zt,Mu+=8):(i=r,0===Gu&&ts(Kt)),i!==r?(Uu=e,e=n=gn()):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,8)===Zt?(n=Zt,Mu+=8):(n=r,0===Gu&&ts(Kt)),n!==r&&hc()!==r?(t.substr(Mu,5)===Ht?(i=Ht,Mu+=5):(i=r,0===Gu&&ts(Qt)),i!==r?(Uu=e,e=n=gn()):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,5)===Ht?(n=Ht,Mu+=5):(n=r,0===Gu&&ts(Qt)),n!==r&&(Uu=e,n=wn()),(e=n)===r&&(e=Mu,t.substr(Mu,8)===Zt?(n=Zt,Mu+=8):(n=r,0===Gu&&ts(Kt)),n!==r&&(Uu=e,n=Rn()),e=n))),e}function Is(){var e,n,i,o,a,u;if(e=Mu,(n=Fs())!==r){for(i=[],o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=Fs())!==r?(Uu=o,o=Tn(n,u)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=Fs())!==r?(Uu=o,o=Tn(n,u)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=xn(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e===r&&(e=Mu,(n=mn)!==r&&(Uu=e,n=En()),e=n),e}function Fs(){var e,n,i,o,a;return e=Mu,(n=ds())!==r&&pc()!==r&&(i=Rs())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(o=Be,Mu++):(o=r,0===Gu&&ts(De)),o!==r&&pc()!==r&&(a=ks())!==r?(Uu=e,e=n=An(n,i,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=ds())!==r&&pc()!==r&&(i=Rs())!==r?(Uu=e,e=n=Cn(n,i)):(Mu=e,e=r),e===r&&(e=Mu,(n=ds())!==r&&pc()!==r&&(i=Ts())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(o=Be,Mu++):(o=r,0===Gu&&ts(De)),o!==r&&pc()!==r&&(a=ks())!==r?(Uu=e,e=n=An(n,i,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=ds())!==r&&pc()!==r&&(i=Ts())!==r?(Uu=e,e=n=Cn(n,i)):(Mu=e,e=r)))),e}function Ns(){var e,n,i,o,a,u;if(e=Mu,(n=ks())!==r){for(i=[],o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=ks())!==r?(Uu=o,o=On(n,a,u)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=ks())!==r?(Uu=o,o=On(n,a,u)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=Sn(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e===r&&(e=ks()),e}function ks(){var e,n,i,o;return e=Mu,(n=ec())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(i=Be,Mu++):(i=r,0===Gu&&ts(De)),i!==r&&pc()!==r&&(o=ks())!==r?(Uu=e,e=n=Pn(n,i,o)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=ec())!==r&&pc()!==r&&(i=function(){var e,n,i,o;return t.substr(Mu,2)===In?(e=In,Mu+=2):(e=r,0===Gu&&ts(Fn)),e===r&&(t.substr(Mu,2)===Nn?(e=Nn,Mu+=2):(e=r,0===Gu&&ts(kn)),e===r&&(t.substr(Mu,2)===zn?(e=zn,Mu+=2):(e=r,0===Gu&&ts(Vn)),e===r&&(t.substr(Mu,2)===Ln?(e=Ln,Mu+=2):(e=r,0===Gu&&ts(Bn)),e===r&&(t.substr(Mu,2)===Dn?(e=Dn,Mu+=2):(e=r,0===Gu&&ts(Mn)),e===r&&(t.substr(Mu,3)===Un?(e=Un,Mu+=3):(e=r,0===Gu&&ts(Wn)),e===r&&(t.substr(Mu,3)===qn?(e=qn,Mu+=3):(e=r,0===Gu&&ts($n)),e===r&&(t.substr(Mu,2)===Gn?(e=Gn,Mu+=2):(e=r,0===Gu&&ts(Hn)),e===r&&(e=Mu,t.substr(Mu,6)===Qn?(n=Qn,Mu+=6):(n=r,0===Gu&&ts(Zn)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=Kn(),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(t.substr(Mu,2)===Yn?(e=Yn,Mu+=2):(e=r,0===Gu&&ts(Xn)),e===r&&(e=Mu,t.substr(Mu,6)===Jn?(n=Jn,Mu+=6):(n=r,0===Gu&&ts(tr)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=er(),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(t.substr(Mu,2)===nr?(e=nr,Mu+=2):(e=r,0===Gu&&ts(rr)),e===r&&(e=Mu,t.substr(Mu,5)===ir?(n=ir,Mu+=5):(n=r,0===Gu&&ts(or)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=ar(),e=n):(Mu=e,e=r)):(Mu=e,e=r))))))))))))),e}())!==r&&pc()!==r&&(o=ks())!==r?(Uu=e,e=n=jn(n,i,o)):(Mu=e,e=r),e===r&&(e=Vs())),e}function zs(){var t,e;return t=Mu,(e=Vs())!==r&&(Uu=t,e=ur(e)),t=e}function Vs(){var e,n,i,o,a,u;return e=Mu,(n=Ls())!==r&&pc()!==r?(63===t.charCodeAt(Mu)?(i=sr,Mu++):(i=r,0===Gu&&ts(cr)),i!==r&&pc()!==r&&(o=Ns())!==r&&pc()!==r?(58===t.charCodeAt(Mu)?(a=T,Mu++):(a=r,0===Gu&&ts(x)),a!==r&&pc()!==r&&(u=ks())!==r?(Uu=e,e=n=lr(n,o,u)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Ls()),e}function Ls(){var e,n,i,o,a,u,s,c;if(e=Mu,(n=Bs())!==r){for(i=[],o=Mu,pc()!==r?(t.substr(Mu,2)===fr?(a=fr,Mu+=2):(a=r,0===Gu&&ts(pr)),a===r&&(a=Mu,t.substr(Mu,2)===hr?(u=hr,Mu+=2):(u=r,0===Gu&&ts(dr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Bs())!==r?(Uu=o,o=yr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(t.substr(Mu,2)===fr?(a=fr,Mu+=2):(a=r,0===Gu&&ts(pr)),a===r&&(a=Mu,t.substr(Mu,2)===hr?(u=hr,Mu+=2):(u=r,0===Gu&&ts(dr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Bs())!==r?(Uu=o,o=yr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=vr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function Bs(){var e,n,i,o,a,u,s,c;if(e=Mu,(n=Ds())!==r){for(i=[],o=Mu,pc()!==r?(t.substr(Mu,2)===mr?(a=mr,Mu+=2):(a=r,0===Gu&&ts(br)),a===r&&(a=Mu,t.substr(Mu,3)===_r?(u=_r,Mu+=3):(u=r,0===Gu&&ts(gr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ds())!==r?(Uu=o,o=wr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(t.substr(Mu,2)===mr?(a=mr,Mu+=2):(a=r,0===Gu&&ts(br)),a===r&&(a=Mu,t.substr(Mu,3)===_r?(u=_r,Mu+=3):(u=r,0===Gu&&ts(gr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ds())!==r?(Uu=o,o=wr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=vr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function Ds(){var e,n,i,o,a,u,s,c;if(e=Mu,(n=Ms())!==r){for(i=[],o=Mu,pc()!==r?(124===t.charCodeAt(Mu)?(a=Rr,Mu++):(a=r,0===Gu&&ts(Tr)),a===r&&(a=Mu,t.substr(Mu,5)===xr?(u=xr,Mu+=5):(u=r,0===Gu&&ts(Er)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ms())!==r?(Uu=o,o=Ar(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(124===t.charCodeAt(Mu)?(a=Rr,Mu++):(a=r,0===Gu&&ts(Tr)),a===r&&(a=Mu,t.substr(Mu,5)===xr?(u=xr,Mu+=5):(u=r,0===Gu&&ts(Er)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ms())!==r?(Uu=o,o=Ar(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=Cr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function Ms(){var e,n,i,o,a,u;if(e=Mu,(n=Us())!==r){for(i=[],o=Mu,pc()!==r?(94===t.charCodeAt(Mu)?(a=Or,Mu++):(a=r,0===Gu&&ts(Sr)),a===r&&(t.substr(Mu,3)===Pr?(a=Pr,Mu+=3):(a=r,0===Gu&&ts(jr))),a!==r&&pc()!==r&&(u=Us())!==r?(Uu=o,o=Ir(n,a,u)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(94===t.charCodeAt(Mu)?(a=Or,Mu++):(a=r,0===Gu&&ts(Sr)),a===r&&(t.substr(Mu,3)===Pr?(a=Pr,Mu+=3):(a=r,0===Gu&&ts(jr))),a!==r&&pc()!==r&&(u=Us())!==r?(Uu=o,o=Ir(n,a,u)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=Cr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function Us(){var e,n,i,o,a,u,s,c;if(e=Mu,(n=Ws())!==r){for(i=[],o=Mu,pc()!==r?(a=Mu,38===t.charCodeAt(Mu)?(u=rn,Mu++):(u=r,0===Gu&&ts(on)),u!==r?(s=Mu,Gu++,38===t.charCodeAt(Mu)?(c=rn,Mu++):(c=r,0===Gu&&ts(on)),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r),a===r&&(a=Mu,t.substr(Mu,6)===Fr?(u=Fr,Mu+=6):(u=r,0===Gu&&ts(Nr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ws())!==r?(Uu=o,o=kr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(a=Mu,38===t.charCodeAt(Mu)?(u=rn,Mu++):(u=r,0===Gu&&ts(on)),u!==r?(s=Mu,Gu++,38===t.charCodeAt(Mu)?(c=rn,Mu++):(c=r,0===Gu&&ts(on)),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r),a===r&&(a=Mu,t.substr(Mu,6)===Fr?(u=Fr,Mu+=6):(u=r,0===Gu&&ts(Nr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?a=u=[u,s]:(Mu=a,a=r)):(Mu=a,a=r)),a!==r&&(u=pc())!==r&&(s=Ws())!==r?(Uu=o,o=kr(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=Cr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function Ws(){var e,n,i,o,a,u,s,c;if(e=Mu,(n=qs())!==r){for(i=[],o=Mu,pc()!==r?(t.substr(Mu,2)===zr?(a=zr,Mu+=2):(a=r,0===Gu&&ts(Vr)),a===r&&(t.substr(Mu,2)===Lr?(a=Lr,Mu+=2):(a=r,0===Gu&&ts(Br)),a===r&&(a=Mu,t.substr(Mu,6)===Dr?(u=Dr,Mu+=6):(u=r,0===Gu&&ts(Mr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?(Uu=a,a=u=Ur(n)):(Mu=a,a=r)):(Mu=a,a=r))),a!==r&&(u=pc())!==r&&(s=qs())!==r?(Uu=o,o=On(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(t.substr(Mu,2)===zr?(a=zr,Mu+=2):(a=r,0===Gu&&ts(Vr)),a===r&&(t.substr(Mu,2)===Lr?(a=Lr,Mu+=2):(a=r,0===Gu&&ts(Br)),a===r&&(a=Mu,t.substr(Mu,6)===Dr?(u=Dr,Mu+=6):(u=r,0===Gu&&ts(Mr)),u!==r?(s=Mu,Gu++,c=fc(),Gu--,c===r?s=void 0:(Mu=s,s=r),s!==r?(Uu=a,a=u=Ur(n)):(Mu=a,a=r)):(Mu=a,a=r))),a!==r&&(u=pc())!==r&&(s=qs())!==r?(Uu=o,o=On(n,a,s)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=Wr(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function qs(){var t,e,n,i,o,a;if(t=Mu,(e=Gs())!==r){for(n=[],i=Mu,pc()!==r&&(o=$s())!==r&&pc()!==r&&(a=Gs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);i!==r;)n.push(i),i=Mu,pc()!==r&&(o=$s())!==r&&pc()!==r&&(a=Gs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);n!==r?(Uu=t,t=e=Wr(e,n)):(Mu=t,t=r)}else Mu=t,t=r;return t}function $s(){var e;return t.substr(Mu,2)===qr?(e=qr,Mu+=2):(e=r,0===Gu&&ts($r)),e===r&&(t.substr(Mu,2)===Gr?(e=Gr,Mu+=2):(e=r,0===Gu&&ts(Hr)),e===r&&(60===t.charCodeAt(Mu)?(e=Qr,Mu++):(e=r,0===Gu&&ts(Zr)),e===r&&(62===t.charCodeAt(Mu)?(e=Kr,Mu++):(e=r,0===Gu&&ts(Yr))))),e}function Gs(){var t,e,n,i,o,a;if(t=Mu,(e=Qs())!==r){for(n=[],i=Mu,pc()!==r&&(o=Hs())!==r&&pc()!==r&&(a=Qs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);i!==r;)n.push(i),i=Mu,pc()!==r&&(o=Hs())!==r&&pc()!==r&&(a=Qs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);n!==r?(Uu=t,t=e=Cr(e,n)):(Mu=t,t=r)}else Mu=t,t=r;return t}function Hs(){var e;return t.substr(Mu,2)===Xr?(e=Xr,Mu+=2):(e=r,0===Gu&&ts(Jr)),e===r&&(t.substr(Mu,2)===ti?(e=ti,Mu+=2):(e=r,0===Gu&&ts(ei))),e}function Qs(){var t,e,n,i,o,a;if(t=Mu,(e=Ks())!==r){for(n=[],i=Mu,pc()!==r&&(o=Zs())!==r&&pc()!==r&&(a=Ks())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);i!==r;)n.push(i),i=Mu,pc()!==r&&(o=Zs())!==r&&pc()!==r&&(a=Ks())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);n!==r?(Uu=t,t=e=Cr(e,n)):(Mu=t,t=r)}else Mu=t,t=r;return t}function Zs(){var e;return 43===t.charCodeAt(Mu)?(e=ni,Mu++):(e=r,0===Gu&&ts(ri)),e===r&&(45===t.charCodeAt(Mu)?(e=ii,Mu++):(e=r,0===Gu&&ts(oi))),e}function Ks(){var t,e,n,i,o,a;if(t=Mu,(e=Xs())!==r){for(n=[],i=Mu,pc()!==r&&(o=Ys())!==r&&pc()!==r&&(a=Xs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);i!==r;)n.push(i),i=Mu,pc()!==r&&(o=Ys())!==r&&pc()!==r&&(a=Xs())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);n!==r?(Uu=t,t=e=Cr(e,n)):(Mu=t,t=r)}else Mu=t,t=r;return t}function Ys(){var e;return 42===t.charCodeAt(Mu)?(e=tn,Mu++):(e=r,0===Gu&&ts(en)),e===r&&(47===t.charCodeAt(Mu)?(e=ai,Mu++):(e=r,0===Gu&&ts(ui)),e===r&&(37===t.charCodeAt(Mu)?(e=si,Mu++):(e=r,0===Gu&&ts(ci)))),e}function Xs(){var t,e,n,i,o,a;if(t=Mu,(e=tc())!==r){for(n=[],i=Mu,pc()!==r&&(o=Js())!==r&&pc()!==r&&(a=tc())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);i!==r;)n.push(i),i=Mu,pc()!==r&&(o=Js())!==r&&pc()!==r&&(a=tc())!==r?(Uu=i,i=On(e,o,a)):(Mu=i,i=r);n!==r?(Uu=t,t=e=li(e,n)):(Mu=t,t=r)}else Mu=t,t=r;return t}function Js(){var e;return t.substr(Mu,2)===fi?(e=fi,Mu+=2):(e=r,0===Gu&&ts(pi)),e===r&&(t.substr(Mu,3)===hi?(e=hi,Mu+=3):(e=r,0===Gu&&ts(di))),e}function tc(){var e,n,i,o,a;return e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r&&(i=Ps())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r&&pc()!==r&&(a=tc())!==r?(Uu=e,e=n=yi(i,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=ec()),e}function ec(){var e,n,i,o,a;return e=Mu,t.substr(Mu,2)===vi?(n=vi,Mu+=2):(n=r,0===Gu&&ts(mi)),n!==r&&pc()!==r&&(i=ec())!==r?(Uu=e,e=n=bi(n,i)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,2)===_i?(n=_i,Mu+=2):(n=r,0===Gu&&ts(gi)),n!==r&&pc()!==r&&(i=ec())!==r?(Uu=e,e=n=wi(n,i)):(Mu=e,e=r),e===r&&(e=Mu,(n=function(){var e,n,i,o;return e=Mu,42===t.charCodeAt(Mu)?(n=tn,Mu++):(n=r,0===Gu&&ts(en)),n!==r&&(Uu=e,n=Ci()),(e=n)===r&&(e=Mu,38===t.charCodeAt(Mu)?(n=rn,Mu++):(n=r,0===Gu&&ts(on)),n!==r&&(Uu=e,n=Oi()),(e=n)===r&&(e=Mu,43===t.charCodeAt(Mu)?(n=ni,Mu++):(n=r,0===Gu&&ts(ri)),n!==r&&(Uu=e,n=Si()),(e=n)===r&&(e=Mu,45===t.charCodeAt(Mu)?(n=ii,Mu++):(n=r,0===Gu&&ts(oi)),n!==r&&(Uu=e,n=Pi()),(e=n)===r&&(e=Mu,33===t.charCodeAt(Mu)?(n=ji,Mu++):(n=r,0===Gu&&ts(Ii)),n!==r&&(Uu=e,n=Fi()),(e=n)===r&&(e=Mu,t.substr(Mu,3)===Ni?(n=Ni,Mu+=3):(n=r,0===Gu&&ts(ki)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=Fi(),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,126===t.charCodeAt(Mu)?(n=Ct,Mu++):(n=r,0===Gu&&ts(Ot)),n!==r&&(Uu=e,n=zi()),(e=n)===r&&(e=Mu,t.substr(Mu,5)===Vi?(n=Vi,Mu+=5):(n=r,0===Gu&&ts(Li)),n!==r&&(Uu=e,n=zi()),e=n))))))),e}())!==r&&pc()!==r&&(i=tc())!==r?(Uu=e,e=n=Ri(n,i)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,6)===Ti?(n=Ti,Mu+=6):(n=r,0===Gu&&ts(xi)),n!==r&&pc()!==r&&(i=ec())!==r?(Uu=e,e=n=Ei(n,i)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,6)===Ti?(n=Ti,Mu+=6):(n=r,0===Gu&&ts(xi)),n!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r&&(o=bs())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r?(Uu=e,e=n=Ai(n,o)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=function(){var e,n,i,o,a,u;return e=Mu,t.substr(Mu,3)===Bi?(n=Bi,Mu+=3):(n=r,0===Gu&&ts(Di)),n!==r&&hc()!==r&&(i=function(){var e,n,i,o,a;return e=Mu,(n=vs())!==r?(i=Mu,(o=pc())!==r&&(a=function(){var e,n;return e=Mu,(n=function e(){var n,i,o,a;return n=Mu,42===t.charCodeAt(Mu)?(i=tn,Mu++):(i=r,0===Gu&&ts(en)),i!==r&&pc()!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r?((a=e())===r&&(a=null),a!==r?(Uu=n,i=nn(o,a),n=i):(Mu=n,n=r)):(Mu=n,n=r)):(Mu=n,n=r),n===r&&(n=Mu,38===t.charCodeAt(Mu)?(i=rn,Mu++):(i=r,0===Gu&&ts(on)),i!==r&&pc()!==r?((o=js())===r&&(o=null),o!==r&&pc()!==r?((a=e())===r&&(a=null),a!==r?(Uu=n,i=an(o,a),n=i):(Mu=n,n=r)):(Mu=n,n=r)):(Mu=n,n=r),n===r&&(n=Mu,(i=function(){var t,e,n,i;if(t=[],e=Mu,(n=pc())!==r&&(i=nc())!==r?(Uu=e,n=Hi(i),e=n):(Mu=e,e=r),e!==r)for(;e!==r;)t.push(e),e=Mu,(n=pc())!==r&&(i=nc())!==r?(Uu=e,n=Hi(i),e=n):(Mu=e,e=r);else t=r;return t}())!==r&&(Uu=n,i=Gi(i)),n=i)),n}())!==r&&(Uu=e,n=$i(n)),e=n}())!==r?(Uu=i,o=Wi(n,a),i=o):(Mu=i,i=r),i===r&&(i=null),i!==r?(Uu=e,n=qi(n,i),e=n):(Mu=e,e=r)):(Mu=e,e=r),e}())!==r&&pc()!==r?((o=rc())===r&&(o=null),o!==r?(Uu=e,n=Mi(i,o),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,3)===Bi?(n=Bi,Mu+=3):(n=r,0===Gu&&ts(Di)),n!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r&&(o=Ps())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r&&pc()!==r?((u=rc())===r&&(u=null),u!==r?(Uu=e,n=Ui(o,u),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}())===r&&(e=function(){var e,n,i,o,a;return e=Mu,t.substr(Mu,6)===Ki?(n=Ki,Mu+=6):(n=r,0===Gu&&ts(Yi)),n!==r&&hc()!==r&&(i=tc())!==r?(Uu=e,n=Xi(i),e=n):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,6)===Ki?(n=Ki,Mu+=6):(n=r,0===Gu&&ts(Yi)),n!==r&&pc()!==r?(91===t.charCodeAt(Mu)?(i=ln,Mu++):(i=r,0===Gu&&ts(fn)),i!==r&&pc()!==r?(93===t.charCodeAt(Mu)?(o=pn,Mu++):(o=r,0===Gu&&ts(hn)),o!==r&&hc()!==r&&(a=tc())!==r?(Uu=e,n=Ji(a),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=function(){var e,n,i,o,a,u,s,c,l,f;if(e=Mu,t.substr(Mu,11)===to?(n=to,Mu+=11):(n=r,0===Gu&&ts(eo)),n!==r&&(i=pc())!==r?(60===t.charCodeAt(Mu)?(o=Qr,Mu++):(o=r,0===Gu&&ts(Zr)),o!==r&&(a=pc())!==r&&(u=bs())!==r&&pc()!==r?(62===t.charCodeAt(Mu)?(s=Kr,Mu++):(s=r,0===Gu&&ts(Yr)),s!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(c=q,Mu++):(c=r,0===Gu&&ts($)),c!==r&&pc()!==r&&(l=tc())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(f=G,Mu++):(f=r,0===Gu&&ts(H)),f!==r?(Uu=e,n=no(u,l),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,12)===ro?(n=ro,Mu+=12):(n=r,0===Gu&&ts(io)),n!==r&&(i=pc())!==r?(60===t.charCodeAt(Mu)?(o=Qr,Mu++):(o=r,0===Gu&&ts(Zr)),o!==r&&(a=pc())!==r&&(u=bs())!==r&&pc()!==r?(62===t.charCodeAt(Mu)?(s=Kr,Mu++):(s=r,0===Gu&&ts(Yr)),s!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(c=q,Mu++):(c=r,0===Gu&&ts($)),c!==r&&pc()!==r&&(l=tc())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(f=G,Mu++):(f=r,0===Gu&&ts(H)),f!==r?(Uu=e,n=oo(u,l),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,16)===ao?(n=ao,Mu+=16):(n=r,0===Gu&&ts(uo)),n!==r&&(i=pc())!==r?(60===t.charCodeAt(Mu)?(o=Qr,Mu++):(o=r,0===Gu&&ts(Zr)),o!==r&&(a=pc())!==r&&(u=bs())!==r&&pc()!==r?(62===t.charCodeAt(Mu)?(s=Kr,Mu++):(s=r,0===Gu&&ts(Yr)),s!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(c=q,Mu++):(c=r,0===Gu&&ts($)),c!==r&&pc()!==r&&(l=tc())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(f=G,Mu++):(f=r,0===Gu&&ts(H)),f!==r?(Uu=e,n=so(u,l),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,10)===co?(n=co,Mu+=10):(n=r,0===Gu&&ts(lo)),n!==r&&(i=pc())!==r?(60===t.charCodeAt(Mu)?(o=Qr,Mu++):(o=r,0===Gu&&ts(Zr)),o!==r&&(a=pc())!==r&&(u=bs())!==r&&pc()!==r?(62===t.charCodeAt(Mu)?(s=Kr,Mu++):(s=r,0===Gu&&ts(Yr)),s!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(c=q,Mu++):(c=r,0===Gu&&ts($)),c!==r&&pc()!==r&&(l=tc())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(f=G,Mu++):(f=r,0===Gu&&ts(H)),f!==r?(Uu=e,n=fo(u,l),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r))))if(e=Mu,(n=function(){var e,n,i,o,a;return e=Mu,(n=bs())!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(i=q,Mu++):(i=r,0===Gu&&ts($)),i!==r&&pc()!==r?((o=oc())===r&&(o=null),o!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r?(Uu=e,n=Eo(n,o),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}())===r&&(n=function(){var e,n,i,o,a;return e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&(i=pc())!==r&&(o=Ns())!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(a=G,Mu++):(a=r,0===Gu&&ts(H)),a!==r?(Uu=e,n=Co(o),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=function(){var e,n;return e=Mu,(n=function(){var e,n,i,o;if(e=Mu,45===t.charCodeAt(Mu)?(n=ii,Mu++):(n=r,0===Gu&&ts(oi)),n===r&&(n=null),n!==r){if(i=[],ra.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ia)),o!==r)for(;o!==r;)i.push(o),ra.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ia));else i=r;i!==r?(Uu=Mu,(o=(o=oa(n,i))?void 0:r)!==r?(Uu=e,n=aa(n,i),e=n):(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&(Uu=e,n=Zo(n)),(e=n)===r&&(e=Mu,(n=function(){var e,n,i,o;if(e=Mu,45===t.charCodeAt(Mu)?(n=ii,Mu++):(n=r,0===Gu&&ts(oi)),n===r&&(n=null),n!==r){if(i=[],ta.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ea)),o!==r)for(;o!==r;)i.push(o),ta.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ea));else i=r;i!==r?(Uu=e,n=na(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&(Uu=e,n=Ko(n)),(e=n)===r&&(e=Mu,(n=function(){var e,n,i,o;return e=Mu,39===t.charCodeAt(Mu)?(n=ua,Mu++):(n=r,0===Gu&&ts(sa)),n!==r?(ca.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(la)),i===r&&(i=cc()),i!==r?(39===t.charCodeAt(Mu)?(o=ua,Mu++):(o=r,0===Gu&&ts(sa)),o!==r?(Uu=e,n=fa(i),e=n):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}())!==r&&(Uu=e,n=Yo(n)),(e=n)===r&&(e=Mu,(n=function(){var e,n,i,o;if(e=Mu,34===t.charCodeAt(Mu)?(n=pa,Mu++):(n=r,0===Gu&&ts(ha)),n!==r){for(i=[],da.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ya)),o===r&&(o=cc());o!==r;)i.push(o),da.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(ya)),o===r&&(o=cc());i!==r?(34===t.charCodeAt(Mu)?(o=pa,Mu++):(o=r,0===Gu&&ts(ha)),o!==r?(Uu=e,n=va(i),e=n):(Mu=e,e=r)):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&(Uu=e,n=Xo(n)),(e=n)===r&&(e=Mu,(n=function(){var e,n,i,o;return e=Mu,t.substr(Mu,4)===ma?(n=ma,Mu+=4):(n=r,0===Gu&&ts(ba)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=_a(),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,5)===ga?(n=ga,Mu+=5):(n=r,0===Gu&&ts(wa)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=Ra(),e=n):(Mu=e,e=r)):(Mu=e,e=r)),e}())!==r&&(Uu=e,n=Jo(n)),e=n)))),e}())===r&&(e=Mu,t.substr(Mu,4)===Oo?(n=Oo,Mu+=4):(n=r,0===Gu&&ts(So)),n!==r?(i=Mu,Gu++,o=fc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r?(Uu=e,n=Po(),e=n):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=function(){var t,e;return t=Mu,(e=function(){var t,e,n;return t=Mu,(e=ac())!==r&&pc()!==r&&(n=sc())!==r?(Uu=t,e=Io(e,n),t=e):(Mu=t,t=r),t}())===r&&(e=sc()),e!==r&&(Uu=t,e=jo(e)),t=e}())),e}()),n!==r){for(i=[],o=Mu,(a=pc())!==r&&(u=ic())!==r?(Uu=o,a=po(n,u),o=a):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=pc())!==r&&(u=ic())!==r?(Uu=o,a=po(n,u),o=a):(Mu=o,o=r);i!==r?(Uu=e,n=ho(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())),e}()))))),e}function nc(){var e,n,i,o;return e=Mu,91===t.charCodeAt(Mu)?(n=ln,Mu++):(n=r,0===Gu&&ts(fn)),n!==r&&pc()!==r?((i=ks())===r&&(i=null),i!==r&&pc()!==r?(93===t.charCodeAt(Mu)?(o=pn,Mu++):(o=r,0===Gu&&ts(hn)),o!==r?(Uu=e,e=n=Qi(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}function rc(){var e,n,i,o;return e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r?((i=oc())===r&&(i=null),i!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r?(Uu=e,e=n=Zi(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e}function ic(){var e,n,i,o;return e=Mu,91===t.charCodeAt(Mu)?(n=ln,Mu++):(n=r,0===Gu&&ts(fn)),n!==r&&pc()!==r&&(i=Ns())!==r&&pc()!==r?(93===t.charCodeAt(Mu)?(o=pn,Mu++):(o=r,0===Gu&&ts(hn)),o!==r?(Uu=e,e=n=yo(i)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,40===t.charCodeAt(Mu)?(n=q,Mu++):(n=r,0===Gu&&ts($)),n!==r&&pc()!==r?((i=oc())===r&&(i=null),i!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(o=G,Mu++):(o=r,0===Gu&&ts(H)),o!==r?(Uu=e,e=n=vo(i)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,46===t.charCodeAt(Mu)?(n=mo,Mu++):(n=r,0===Gu&&ts(bo)),n!==r&&pc()!==r&&(i=sc())!==r?(Uu=e,e=n=_o(i)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,2)===go?(n=go,Mu+=2):(n=r,0===Gu&&ts(wo)),n!==r&&pc()!==r&&(i=sc())!==r?(Uu=e,e=n=Ro(i)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,2)===vi?(n=vi,Mu+=2):(n=r,0===Gu&&ts(mi)),n!==r&&(Uu=e,n=To()),(e=n)===r&&(e=Mu,t.substr(Mu,2)===_i?(n=_i,Mu+=2):(n=r,0===Gu&&ts(gi)),n!==r&&(Uu=e,n=xo()),e=n))))),e}function oc(){var e,n,i,o,a,u;if(e=Mu,(n=ks())!==r){for(i=[],o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=ks())!==r?(Uu=o,o=Ao(n,u)):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,pc()!==r?(44===t.charCodeAt(Mu)?(a=_t,Mu++):(a=r,0===Gu&&ts(gt)),a!==r&&pc()!==r&&(u=ks())!==r?(Uu=o,o=Ao(n,u)):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,e=n=xn(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return e}function ac(){var e,n,i,o;if(e=[],n=Mu,(i=uc())===r&&(i=lc()),i!==r&&pc()!==r?(t.substr(Mu,2)===Fo?(o=Fo,Mu+=2):(o=r,0===Gu&&ts(No)),o!==r&&pc()!==r?(Uu=n,n=i=ko(i)):(Mu=n,n=r)):(Mu=n,n=r),n!==r)for(;n!==r;)e.push(n),n=Mu,(i=uc())===r&&(i=lc()),i!==r&&pc()!==r?(t.substr(Mu,2)===Fo?(o=Fo,Mu+=2):(o=r,0===Gu&&ts(No)),o!==r&&pc()!==r?(Uu=n,n=i=ko(i)):(Mu=n,n=r)):(Mu=n,n=r);else e=r;return e===r&&(e=Mu,t.substr(Mu,2)===Fo?(n=Fo,Mu+=2):(n=r,0===Gu&&ts(No)),n!==r&&(i=pc())!==r?(Uu=e,e=n=zo()):(Mu=e,e=r)),e}function uc(){var t,e;return t=Mu,(e=bs())!==r&&(Uu=t,e=Vo(e)),t=e}function sc(){var e;return(e=function(){var e,n,i;return e=Mu,t.substr(Mu,8)===Lo?(n=Lo,Mu+=8):(n=r,0===Gu&&ts(Bo)),n!==r&&pc()!==r&&(i=function(){var e;return t.substr(Mu,5)===Mo?(e=Mo,Mu+=5):(e=r,0===Gu&&ts(Uo)),e===r&&(t.substr(Mu,8)===Wo?(e=Wo,Mu+=8):(e=r,0===Gu&&ts(qo)),e===r&&(t.substr(Mu,3)===Bi?(e=Bi,Mu+=3):(e=r,0===Gu&&ts(Di)),e===r&&(t.substr(Mu,6)===Ki?(e=Ki,Mu+=6):(e=r,0===Gu&&ts(Yi)),e===r&&(t.substr(Mu,3)===hi?(e=hi,Mu+=3):(e=r,0===Gu&&ts(di)),e===r&&(t.substr(Mu,3)===Un?(e=Un,Mu+=3):(e=r,0===Gu&&ts(Wn)),e===r&&(t.substr(Mu,3)===qn?(e=qn,Mu+=3):(e=r,0===Gu&&ts($n)),e===r&&(t.substr(Mu,2)===Ln?(e=Ln,Mu+=2):(e=r,0===Gu&&ts(Bn)),e===r&&(t.substr(Mu,2)===Dn?(e=Dn,Mu+=2):(e=r,0===Gu&&ts(Mn)),e===r&&(t.substr(Mu,2)===In?(e=In,Mu+=2):(e=r,0===Gu&&ts(Fn)),e===r&&(t.substr(Mu,2)===Nn?(e=Nn,Mu+=2):(e=r,0===Gu&&ts(kn)),e===r&&(t.substr(Mu,2)===zn?(e=zn,Mu+=2):(e=r,0===Gu&&ts(Vn)),e===r&&(t.substr(Mu,2)===Yn?(e=Yn,Mu+=2):(e=r,0===Gu&&ts(Xn)),e===r&&(t.substr(Mu,2)===Gn?(e=Gn,Mu+=2):(e=r,0===Gu&&ts(Hn)),e===r&&(t.substr(Mu,2)===nr?(e=nr,Mu+=2):(e=r,0===Gu&&ts(rr)),e===r&&(t.substr(Mu,2)===Xr?(e=Xr,Mu+=2):(e=r,0===Gu&&ts(Jr)),e===r&&(t.substr(Mu,2)===ti?(e=ti,Mu+=2):(e=r,0===Gu&&ts(ei)),e===r&&(t.substr(Mu,2)===zr?(e=zr,Mu+=2):(e=r,0===Gu&&ts(Vr)),e===r&&(t.substr(Mu,2)===Lr?(e=Lr,Mu+=2):(e=r,0===Gu&&ts(Br)),e===r&&(t.substr(Mu,2)===qr?(e=qr,Mu+=2):(e=r,0===Gu&&ts($r)),e===r&&(t.substr(Mu,2)===Gr?(e=Gr,Mu+=2):(e=r,0===Gu&&ts(Hr)),e===r&&(t.substr(Mu,2)===mr?(e=mr,Mu+=2):(e=r,0===Gu&&ts(br)),e===r&&(t.substr(Mu,2)===fr?(e=fr,Mu+=2):(e=r,0===Gu&&ts(pr)),e===r&&(t.substr(Mu,2)===vi?(e=vi,Mu+=2):(e=r,0===Gu&&ts(mi)),e===r&&(t.substr(Mu,2)===_i?(e=_i,Mu+=2):(e=r,0===Gu&&ts(gi)),e===r&&(t.substr(Mu,2)===go?(e=go,Mu+=2):(e=r,0===Gu&&ts(wo)),e===r&&(t.substr(Mu,2)===$o?(e=$o,Mu+=2):(e=r,0===Gu&&ts(Go)),e===r&&(t.substr(Mu,2)===Ho?(e=Ho,Mu+=2):(e=r,0===Gu&&ts(Qo)),e===r&&(43===t.charCodeAt(Mu)?(e=ni,Mu++):(e=r,0===Gu&&ts(ri)),e===r&&(45===t.charCodeAt(Mu)?(e=ii,Mu++):(e=r,0===Gu&&ts(oi)),e===r&&(42===t.charCodeAt(Mu)?(e=tn,Mu++):(e=r,0===Gu&&ts(en)),e===r&&(47===t.charCodeAt(Mu)?(e=ai,Mu++):(e=r,0===Gu&&ts(ui)),e===r&&(37===t.charCodeAt(Mu)?(e=si,Mu++):(e=r,0===Gu&&ts(ci)),e===r&&(94===t.charCodeAt(Mu)?(e=Or,Mu++):(e=r,0===Gu&&ts(Sr)),e===r&&(38===t.charCodeAt(Mu)?(e=rn,Mu++):(e=r,0===Gu&&ts(on)),e===r&&(124===t.charCodeAt(Mu)?(e=Rr,Mu++):(e=r,0===Gu&&ts(Tr)),e===r&&(126===t.charCodeAt(Mu)?(e=Ct,Mu++):(e=r,0===Gu&&ts(Ot)),e===r&&(33===t.charCodeAt(Mu)?(e=ji,Mu++):(e=r,0===Gu&&ts(Ii)),e===r&&(61===t.charCodeAt(Mu)?(e=Be,Mu++):(e=r,0===Gu&&ts(De)),e===r&&(60===t.charCodeAt(Mu)?(e=Qr,Mu++):(e=r,0===Gu&&ts(Zr)),e===r&&(62===t.charCodeAt(Mu)?(e=Kr,Mu++):(e=r,0===Gu&&ts(Yr)),e===r&&(44===t.charCodeAt(Mu)?(e=_t,Mu++):(e=r,0===Gu&&ts(gt))))))))))))))))))))))))))))))))))))))))))),e}())!==r?(Uu=e,n=Do(i),e=n):(Mu=e,e=r),e}())===r&&(e=lc()),e}function cc(){var e;return(e=function(){var e;return t.substr(Mu,2)===Ta?(e=Ta,Mu+=2):(e=r,0===Gu&&ts(xa)),e===r&&(t.substr(Mu,2)===Ea?(e=Ea,Mu+=2):(e=r,0===Gu&&ts(Aa)),e===r&&(t.substr(Mu,2)===Ca?(e=Ca,Mu+=2):(e=r,0===Gu&&ts(Oa)),e===r&&(t.substr(Mu,2)===Sa?(e=Sa,Mu+=2):(e=r,0===Gu&&ts(Pa)),e===r&&(t.substr(Mu,2)===ja?(e=ja,Mu+=2):(e=r,0===Gu&&ts(Ia)),e===r&&(t.substr(Mu,2)===Fa?(e=Fa,Mu+=2):(e=r,0===Gu&&ts(Na)),e===r&&(t.substr(Mu,2)===ka?(e=ka,Mu+=2):(e=r,0===Gu&&ts(za)),e===r&&(t.substr(Mu,2)===Va?(e=Va,Mu+=2):(e=r,0===Gu&&ts(La)),e===r&&(t.substr(Mu,2)===Ba?(e=Ba,Mu+=2):(e=r,0===Gu&&ts(Da)),e===r&&(t.substr(Mu,2)===Ma?(e=Ma,Mu+=2):(e=r,0===Gu&&ts(Ua)),e===r&&(t.substr(Mu,2)===Wa?(e=Wa,Mu+=2):(e=r,0===Gu&&ts(qa)),e===r&&(t.substr(Mu,2)===$a?(e=$a,Mu+=2):(e=r,0===Gu&&ts(Ga))))))))))))),e}())===r&&(e=function(){var e,n,i,o;return Ha.test(t.charAt(Mu))?(e=t.charAt(Mu),Mu++):(e=r,0===Gu&&ts(Qa)),e===r&&(e=Mu,Ha.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(Qa)),n!==r?(Ha.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(Qa)),i!==r?e=n=[n,i]:(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,Ha.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(Qa)),n!==r?(Ha.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(Qa)),i!==r?(Ha.test(t.charAt(Mu))?(o=t.charAt(Mu),Mu++):(o=r,0===Gu&&ts(Qa)),o!==r?e=n=[n,i,o]:(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r))),e}()),e}function lc(){var e,n,i,o;if(Gu++,e=Mu,(n=function(){var e;return Ja.test(t.charAt(Mu))?(e=t.charAt(Mu),Mu++):(e=r,0===Gu&&ts(tu)),e}())!==r){for(i=[],o=fc();o!==r;)i.push(o),o=fc();i!==r?(Uu=e,e=n=Ka(n,i)):(Mu=e,e=r)}else Mu=e,e=r;return Gu--,e===r&&(n=r,0===Gu&&ts(Za)),e}function fc(){var e;return Ya.test(t.charAt(Mu))?(e=t.charAt(Mu),Mu++):(e=r,0===Gu&&ts(Xa)),e}function pc(){var e,n,i,o;for(Gu++,e=Mu,n=[],nu.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(ru));i!==r;)n.push(i),nu.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(ru));if(n!==r&&(i=is())!==r&&(o=pc())!==r?e=n=[n,i,o]:(Mu=e,e=r),e===r)for(e=[],nu.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(ru));n!==r;)e.push(n),nu.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(ru));return Gu--,e===r&&(n=r,0===Gu&&ts(eu)),e}function hc(){var e,n,i,o;if(Gu++,e=Mu,(n=is())!==r&&(i=hc())!==r?e=n=[n,i]:(Mu=e,e=r),e===r){if(e=Mu,n=[],nu.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(ru)),i!==r)for(;i!==r;)n.push(i),nu.test(t.charAt(Mu))?(i=t.charAt(Mu),Mu++):(i=r,0===Gu&&ts(ru));else n=r;if(n!==r&&(i=is())!==r&&(o=pc())!==r?e=n=[n,i,o]:(Mu=e,e=r),e===r)if(e=[],nu.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(ru)),n!==r)for(;n!==r;)e.push(n),nu.test(t.charAt(Mu))?(n=t.charAt(Mu),Mu++):(n=r,0===Gu&&ts(ru));else e=r}return Gu--,e===r&&(n=r,0===Gu&&ts(iu)),e}function dc(){var e,n,i,o,a,u,s;if(e=Mu,n=[],i=Mu,(o=vc())!==r&&pc()!==r?(Uu=i,i=o=yu(o)):(Mu=i,i=r),i!==r)for(;i!==r;)n.push(i),i=Mu,(o=vc())!==r&&pc()!==r?(Uu=i,i=o=yu(o)):(Mu=i,i=r);else n=r;if(n!==r&&(Uu=e,n=vu(n)),(e=n)===r)if(e=Mu,(n=yc())!==r)if((i=pc())!==r)if(58===t.charCodeAt(Mu)?(o=T,Mu++):(o=r,0===Gu&&ts(x)),o!==r)if(pc()!==r){for(a=[],u=Mu,(s=vc())!==r&&pc()!==r?(Uu=u,u=s=mu(n,s)):(Mu=u,u=r);u!==r;)a.push(u),u=Mu,(s=vc())!==r&&pc()!==r?(Uu=u,u=s=mu(n,s)):(Mu=u,u=r);a!==r?(Uu=e,e=n=bu(n,a)):(Mu=e,e=r)}else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;else Mu=e,e=r;return e}function yc(){var e;return t.substr(Mu,7)===_u?(e=_u,Mu+=7):(e=r,0===Gu&&ts(gu)),e===r&&(t.substr(Mu,9)===wu?(e=wu,Mu+=9):(e=r,0===Gu&&ts(Ru)),e===r&&(t.substr(Mu,6)===Tu?(e=Tu,Mu+=6):(e=r,0===Gu&&ts(xu)))),e}function vc(){var e,n,i,o,a,u;return e=Mu,(n=ds())!==r?(i=Mu,Gu++,o=lc(),Gu--,o===r?i=void 0:(Mu=i,i=r),i!==r&&(o=pc())!==r&&(a=function(){var e,n,i,o,a,u,s;if(e=Mu,(n=mc())!==r){for(i=[],o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=mc())!==r?(Uu=o,a=wt(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);o!==r;)i.push(o),o=Mu,(a=pc())!==r?(44===t.charCodeAt(Mu)?(u=_t,Mu++):(u=r,0===Gu&&ts(gt)),u!==r&&pc()!==r&&(s=mc())!==r?(Uu=o,a=wt(n,s),o=a):(Mu=o,o=r)):(Mu=o,o=r);i!==r?(Uu=e,n=Rt(n,i),e=n):(Mu=e,e=r)}else Mu=e,e=r;return e}())!==r&&pc()!==r?(59===t.charCodeAt(Mu)?(u=I,Mu++):(u=r,0===Gu&&ts(F)),u!==r?(Uu=e,e=n=Eu(n,a)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=ps())!==r&&(i=pc())!==r?(59===t.charCodeAt(Mu)?(o=I,Mu++):(o=r,0===Gu&&ts(F)),o===r&&(o=null),o!==r?(Uu=e,e=n=Au(n)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=function(){var e,n,i,o,a,u,s,c,l,f;return e=Mu,126===t.charCodeAt(Mu)?(n=Ct,Mu++):(n=r,0===Gu&&ts(Ot)),n!==r&&(i=lc())!==r&&(o=pc())!==r?(40===t.charCodeAt(Mu)?(a=q,Mu++):(a=r,0===Gu&&ts($)),a!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(u=G,Mu++):(u=r,0===Gu&&ts(H)),u!==r&&pc()!==r?((s=ss())===r&&(s=Mu,59===t.charCodeAt(Mu)?(c=I,Mu++):(c=r,0===Gu&&ts(F)),c!==r&&(Uu=s,c=St(i)),s=c),s!==r?(Uu=e,e=n=Pt(i,s)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,t.substr(Mu,7)===jt?(n=jt,Mu+=7):(n=r,0===Gu&&ts(It)),n!==r&&(i=hc())!==r?(126===t.charCodeAt(Mu)?(o=Ct,Mu++):(o=r,0===Gu&&ts(Ot)),o!==r&&(a=lc())!==r&&pc()!==r?(40===t.charCodeAt(Mu)?(u=q,Mu++):(u=r,0===Gu&&ts($)),u!==r&&pc()!==r?(41===t.charCodeAt(Mu)?(s=G,Mu++):(s=r,0===Gu&&ts(H)),s!==r&&(c=pc())!==r?((l=ss())===r&&(l=Mu,59===t.charCodeAt(Mu)?(f=I,Mu++):(f=r,0===Gu&&ts(F)),f!==r&&(Uu=l,f=St(a)),l=f),l!==r?(Uu=e,e=n=Ft(a,l)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r)),e}())!==r&&(i=pc())!==r?(59===t.charCodeAt(Mu)?(o=I,Mu++):(o=r,0===Gu&&ts(F)),o===r&&(o=null),o!==r?(Uu=e,e=n=Cu(n)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=fs())!==r&&(i=pc())!==r?(59===t.charCodeAt(Mu)?(o=I,Mu++):(o=r,0===Gu&&ts(F)),o===r&&(o=null),o!==r?(Uu=e,e=n=Ou(n)):(Mu=e,e=r)):(Mu=e,e=r)))),e}function mc(){var e,n,i,o;return e=Mu,(n=Rs())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(i=Be,Mu++):(i=r,0===Gu&&ts(De)),i!==r&&pc()!==r?(48===t.charCodeAt(Mu)?(o=Su,Mu++):(o=r,0===Gu&&ts(Pu)),o!==r?(Uu=e,e=n=ju(n)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=Rs())!==r&&pc()!==r?(61===t.charCodeAt(Mu)?(i=Be,Mu++):(i=r,0===Gu&&ts(De)),i!==r&&pc()!==r?(t.substr(Mu,21)===We?(o=We,Mu+=21):(o=r,0===Gu&&ts(qe)),o!==r?(Uu=e,e=n=Iu(n)):(Mu=e,e=r)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=Rs())!==r&&pc()!==r&&(i=ws())!==r?(Uu=e,e=n=Fu(n,i)):(Mu=e,e=r),e===r&&(e=Rs()))),e}function bc(){var e,n,i,o,a;return e=Mu,t.substr(Mu,7)===jt?(n=jt,Mu+=7):(n=r,0===Gu&&ts(It)),n!==r&&(i=hc())!==r?(o=Mu,(a=yc())!==r&&hc()!==r?(Uu=o,o=a=zu(a)):(Mu=o,o=r),o!==r&&(a=_c())!==r?(Uu=e,e=n=Vu(o,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,n=Mu,(i=yc())!==r&&(o=hc())!==r?(Uu=n,n=i=zu(i)):(Mu=n,n=r),n!==r?(t.substr(Mu,7)===jt?(i=jt,Mu+=7):(i=r,0===Gu&&ts(It)),i!==r&&(o=hc())!==r&&(a=_c())!==r?(Uu=e,e=n=Vu(n,a)):(Mu=e,e=r)):(Mu=e,e=r),e===r&&(e=Mu,(n=yc())!==r&&(i=hc())!==r&&(o=_c())!==r?(Uu=e,e=n=Lu(n,o)):(Mu=e,e=r),e===r&&(e=Mu,(n=_c())!==r&&(Uu=e,n=Bu(n)),e=n))),e}function _c(){var t,e,n;return t=Mu,(e=ac())!==r&&pc()!==r&&(n=lc())!==r?(Uu=t,t=e=Du(e,n)):(Mu=t,t=r),t===r&&(t=lc()),t}function gc(t,e,n,r){if(!e||0===e.length)return t;if("left"===n){var i=e.pop();return{construct_type:r,operator:i[0],left:gc(t,e,n,r),right:i[1],associativity:n}}var o=e.shift();return{construct_type:r,operator:o[0],left:t,right:gc(o[1],e,n,r),associativity:n}}function wc(t,e){if(!e)return t;for(var n in e)"start"!=n&&"end"!=n&&(t[n]=e[n]);return t}function Rc(t,e,n){return t.source={location:e,start:e.start.offset,text:n,line:e.start.line,column:e.start.column,end:e.start.offset+n.length},t}var Tc={};function xc(){return Tc}if((n=a())!==r&&Mu===t.length)return n;throw n!==r&&Mu<t.length&&ts({type:"end"}),es($u,qu<t.length?t.charAt(qu):null,qu<t.length?Ju(qu,qu+1):Ju(qu,qu))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(54),i=n(4),o=n(0),a=n(12),u=n(2),s=n(5),c=n(3),l=function(){function t(){this._allNotes=[],this.allNotes=this._allNotes,this.hasErrors=!1,this.hasSyntaxErrors=!1,this.hasWarnings=!1}return t.prototype.addNote=function(t){this._allNotes.push(t);t.kind===i.NoteKind.ERROR?(this.hasErrors=!0,t instanceof i.SyntaxNote&&(this.hasSyntaxErrors=!0)):t.kind===i.NoteKind.WARNING&&(this.hasWarnings=!0)},t.prototype.addNotes=function(t){var e=this;t.forEach(function(t){return e.addNote(t)})},t.prototype.clearNotes=function(){this._allNotes.length=0;this.hasErrors=!1,this.hasSyntaxErrors=!1,this.hasWarnings=!1},t}();e.NoteRecorder=l;var f=function(){function t(t,e){var n=this;for(var r in this.context={program:this},this.isCompilationUpToDate=!0,this.sourceFiles={},this.translationUnits={},this.globalObjects=[],this.functionCalls=[],this.definitions={},this.linkedEntities=[],this.notes=new l,t.forEach(function(t){n.sourceFiles[t.name]=t}),e.forEach(function(t){o.assert(!!n.sourceFiles[t],"Source file "+t+" not found."),n.translationUnits[t]=new y(n,new d(n.sourceFiles[t],n.sourceFiles))}),this.translationUnits){var i=this.translationUnits[r];this.notes.addNotes(i.notes.allNotes)}this.notes.hasSyntaxErrors||this.link(),this.isCompilationUpToDate=!0}return t.prototype.link=function(){var t=this;this.defineIntrinsics(),this.linkedEntities.forEach(function(e){return e.link(t.definitions[e.qualifiedName])});var e=this.definitions["::main"];e instanceof a.FunctionDefinition&&(this.mainFunction=e),this.globalObjectAllocator=new c.GlobalObjectAllocator(this.context,this.globalObjects)},t.prototype.defineIntrinsics=function(){},t.prototype.registerLinkedEntity=function(t){o.asMutable(this.linkedEntities).push(t)},t.prototype.registerGlobalObjectDefinition=function(t,e){this.definitions[t]?this.notes.addNote(i.CPPError.link.multiple_def(e,t)):(this.definitions[t]=e,o.asMutable(this.globalObjects).push(e))},t.prototype.registerFunctionDefinition=function(t,e){var n=this.definitions[t];if(n)if(Array.isArray(n)){a.selectOverloadedDefinition(n,e.declaration.type)?this.notes.addNote(i.CPPError.link.multiple_def(e,t)):n.push(e)}else this.notes.addNote(i.CPPError.link.multiple_def(e,t));else this.definitions[t]=[e]},t}();e.Program=f;var p=function(){return function(t,e){this.observable=new s.Observable(this),this.name=t,this.text=e}}();e.SourceFile=p;var h=function(){function t(t,e,n,r,i){this._includes=[],this.includes=this._includes,this.sourceFile=t,this.line=e,this.column=n,this.start=r,this.end=i}return t.createIncluded=function(e,n,r){var i=new t(r.sourceFile,r.line,r.column,r.start,r.end);return i._includes.push({sourceFile:e,lineIncluded:n}),r.includes.forEach(function(t){return i._includes.push(t)}),i},Object.defineProperty(t.prototype,"isIncluded",{get:function(){return this.includes.length>0},enumerable:!0,configurable:!0}),t}();e.SourceReference=h;var d=function(){function t(e,n,r){var o=this;void 0===r&&(r={}),this.notes=new l,this._includes=[],this.includes=this._includes,this.includedSourceFiles={},this.primarySourceFile=e,this.name=e.name,this.availableToInclude=n,r[this.primarySourceFile.name]=!0;var a=e.text;a=this.filterSourceCode(a);var u=0,s=1,c=1;this.includedSourceFiles[this.primarySourceFile.name]=this.primarySourceFile,this.preprocessedText=a.replace(/#include[^\S\n]+"(.*)"/g,function(n,a,l,f){for(var p={},d=u;d<l;++d)"\n"===f[d]&&(++s,++c);if(p.startLine=s,p.startOffset=l,u=l+n.length,r[a])return o.notes.addNote(i.CPPError.preprocess.recursiveInclude(new h(e,s,0,l,u))),Array(n.length+1).join(" ");var y=new t(o.availableToInclude[a],o.availableToInclude,Object.assign({},r));return Object.assign(o.includedSourceFiles,y.includedSourceFiles),p.numLines=y.numLines,p.endLine=p.startLine+y.numLines,p.lineDelta=y.numLines-1,p.lengthDelta=y.length-n.length,s+=y.numLines-1,p.included=y,p.lineIncluded=c,o._includes.push(p),y.preprocessedText});for(var f=u;f<a.length;++f)"\n"===a[f]&&++s;this.numLines=s,this.length=this.preprocessedText.length}return t.prototype.filterSourceCode=function(t){return(t=t.replace(/\r/g,"")).includes("#ifndef")&&(t=t.replace(/#ifndef.*/g,function(t){return Array(t.length+1).join(" ")})),t.includes("#define")&&(t=t.replace(/#define.*/g,function(t){return Array(t.length+1).join(" ")})),t.includes("#endif")&&(t=t.replace(/#endif.*/g,function(t){return Array(t.length+1).join(" ")})),(t=t.replace(/#include.*<.*>/g,function(t){return Array(t.length+1).join(" ")})).includes("using namespace")&&(t=t.replace(/using namespace.*/g,function(t){return Array(t.length+1).join(" ")})),t.includes("using std::")&&(t=t.replace(/using std::.*/g,function(t){return Array(t.length+1).join(" ")})),t},t.prototype.getSourceReference=function(t,e,n,r){for(var i=0,o=1,a=0;a<this.includes.length;++a){var u=this.includes[a];if(t<u.startLine)return new h(this.primarySourceFile,t-o+1,e,n&&n-i,r&&r-i);if(u.startLine<=t&&t<u.endLine)return h.createIncluded(this.primarySourceFile,u.lineIncluded,u.included.getSourceReference(t-u.startLine+1,e,n&&n-u.startOffset,r&&r-u.startOffset));i+=u.lengthDelta,o+=u.lineDelta}return new h(this.primarySourceFile,t-o+1,e,n&&n-i,r&&r-i)},t}(),y=function(){function t(t,e){this.notes=new l,this.topLevelDeclarations=[],this.staticEntities=[],this.stringLiterals=[],this.functionCalls=[],this.program=t,this.source=e,this.globalScope=new u.NamespaceScope(e.primarySourceFile.name+"_GLOBAL_SCOPE"),this.name=e.name,this.context=c.createTranslationUnitContext(t.context,this,this.globalScope);try{var n=r.parse(this.source.preprocessedText);this.parsedAST=n,this.createBuiltInGlobals(),this.compileTopLevelDeclarations(this.parsedAST)}catch(t){if("SyntaxError"!=t.name)throw console.log(t.stack),t;this.notes.addNote(new i.SyntaxNote(this.getSourceReference(t.location.start.line,t.location.start.column,t.location.start.offset,t.location.start.offset+1),i.NoteKind.ERROR,"syntax",t.message))}}return t.prototype.createBuiltInGlobals=function(){},t.prototype.compileTopLevelDeclarations=function(t){var e=this;t.declarations.forEach(function(t){var n=a.createDeclarationFromAST(t,e.context);Array.isArray(n)?n.forEach(function(t){return o.asMutable(e.topLevelDeclarations).push(t)}):o.asMutable(e.topLevelDeclarations).push(n)})},t.prototype.addStringLiteral=function(t){o.asMutable(this.stringLiterals).push(t)},t.prototype.registerFunctionCall=function(t){o.asMutable(this.functionCalls).push(t)},t.prototype.getNearestSourceReferenceForConstruct=function(t){for(;!t.ast&&t.parent;)t=t.parent;if(!t.ast)return o.assertFalse("Can't find source reference for construct");var e=t.ast.source;return this.getSourceReference(e.line,e.column,e.start,e.end)},t.prototype.getSourceReference=function(t,e,n,r){return this.source.getSourceReference(t,e,n,r)},t}();e.TranslationUnit=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(55);console.log("hello");var i=new r.SourceFile("test.cpp","int main() {int x = 2;}");console.log(i)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9CdW5kbGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vc3JjL2pzL3V0aWwvdXRpbC50cyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9zcmMvanMvY29yZS90eXBlcy50cyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9zcmMvanMvY29yZS9lbnRpdGllcy50cyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9zcmMvanMvY29yZS9jb25zdHJ1Y3RzLnRzIiwid2VicGFjazovL0J1bmRsZS8uL3NyYy9qcy9jb3JlL2Vycm9ycy50cyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9zcmMvanMvdXRpbC9vYnNlcnZlLnRzIiwid2VicGFjazovL0J1bmRsZS8uL3NyYy9qcy9jb3JlL2Z1bmN0aW9ucy50cyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9zcmMvanMvY29yZS9ydW50aW1lRW52aXJvbm1lbnQudHMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vc3JjL2pzL2NvcmUvZXhwcmVzc2lvbnMudHMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vc3JjL2pzL2NvcmUvb2JqZWN0cy50cyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9zcmMvanMvY29yZS9zdGFuZGFyZENvbnZlcnNpb25zLnRzIiwid2VicGFjazovL0J1bmRsZS8uL3NyYy9qcy9jb3JlL2luaXRpYWxpemVycy50cyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9zcmMvanMvY29yZS9kZWNsYXJhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vc3JjL2pzL2NvcmUvbGV4aWNhbC50cyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovL0J1bmRsZS8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9zcmMvanMvY29yZS9zdGF0ZW1lbnRzLnRzIiwid2VicGFjazovL0J1bmRsZS8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sYXN0LmpzIiwid2VicGFjazovL0J1bmRsZS8uL3NyYy9qcy9jb3JlL1NpbXVsYXRpb24udHMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weUFycmF5LmpzIiwid2VicGFjazovL0J1bmRsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSW5kZXhPZldpdGguanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaWN0SW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYU4uanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHVsbEFsbC5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3B1bGxBbGwuanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2hvcnRPdXQuanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29yZUpzRGF0YS5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovL0J1bmRsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovL0J1bmRsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL0J1bmRsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vQnVuZGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNldFRvU3RyaW5nLmpzIiwid2VicGFjazovL0J1bmRsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvU3RyaW5nLmpzIiwid2VicGFjazovL0J1bmRsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FwcGx5LmpzIiwid2VicGFjazovL0J1bmRsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJSZXN0LmpzIiwid2VicGFjazovL0J1bmRsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VSZXN0LmpzIiwid2VicGFjazovL0J1bmRsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHVsbC5qcyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9zcmMvanMvcGFyc2UvY3BwX3BhcnNlci50cyIsIndlYnBhY2s6Ly9CdW5kbGUvLi9zcmMvanMvY29yZS9Qcm9ncmFtLnRzIiwid2VicGFjazovL0J1bmRsZS8uL3NyYy9qcy9tYWluLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYXNNdXRhYmxlIiwib2JqIiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIkVycm9yIiwiYXNzZXJ0RmFsc2UiLCJjcmVhdGVNZXRob2RNaXhpbiIsIm1peCIsInRhcmdldFByb3RvIiwiaHRtbERlY29yYXRlZFR5cGUiLCJ0eXBlU3RyaW5nIiwiZXNjYXBlcyIsImVzY2FwZWQiLCJlc2NhcGVTdHJpbmciLCJ0ZXh0IiwibGVuZ3RoIiwicmVwbGFjZSIsInVuZXNjYXBlU3RyaW5nIiwibmV3U3RyIiwiaiIsIkNQUFJhbmRvbSIsInRoaXMiLCJzZWVkIiwic2V0UmFuZG9tU2VlZCIsIm5ld1NlZWQiLCJyYW5kb20iLCJtaW4iLCJtYXgiLCJzZWVkZWRSYW5kb20iLCJybmQiLCJNYXRoIiwidXRpbF8xIiwidm93ZWxzIiwic2FtZVR5cGUiLCJ0eXBlMSIsInR5cGUyIiwic2ltaWxhclR5cGUiLCJzdWJUeXBlIiwiQ2xhc3NUeXBlIiwiaXNEZXJpdmVkRnJvbSIsImlzVHlwZSIsInR5cGUiLCJjdG9yIiwiY292YXJpYW50VHlwZSIsImRlcml2ZWQiLCJiYXNlIiwiZGMiLCJiYyIsIlBvaW50ZXJUeXBlIiwicHRyVG8iLCJSZWZlcmVuY2VUeXBlIiwicmVmVG8iLCJpc0NvbnN0IiwiaXNWb2xhdGlsZSIsInJlZmVyZW5jZUNvbXBhdGlibGUiLCJmcm9tIiwidG8iLCJpc1JlZmVyZW5jZUNvbXBhdGlibGUiLCJpc0N2Q29udmVydGlibGUiLCJmcm9tVHlwZSIsInRvVHlwZSIsImdldENvbXBvdW5kTmV4dCIsInQyQWxsQ29uc3QiLCJUeXBlQmFzZSIsImdldENWU3RyaW5nIiwidG9TdHJpbmciLCJpc09iamVjdFR5cGUiLCJPYmplY3RUeXBlIiwiaXNBdG9taWNUeXBlIiwiQXRvbWljVHlwZSIsImlzQXJpdGhtZXRpY1R5cGUiLCJBcml0aG1ldGljVHlwZSIsImlzSW50ZWdyYWxUeXBlIiwiSW50ZWdyYWxUeXBlIiwiaXNGbG9hdGluZ1BvaW50VHlwZSIsIkZsb2F0aW5nUG9pbnRUeXBlIiwiaXNQb2ludGVyVHlwZSIsImlzUmVmZXJlbmNlVHlwZSIsImlzQ2xhc3NUeXBlIiwiaXNCb3VuZGVkQXJyYXlUeXBlIiwiQm91bmRlZEFycmF5VHlwZSIsImlzQXJyYXlPZlVua25vd25Cb3VuZFR5cGUiLCJBcnJheU9mVW5rbm93bkJvdW5kVHlwZSIsImlzR2VuZXJpY0FycmF5VHlwZSIsImlzRnVuY3Rpb25UeXBlIiwiRnVuY3Rpb25UeXBlIiwiaXNBcnJheUVsZW1UeXBlIiwiaXNWb2lkVHlwZSIsIlZvaWRUeXBlIiwiaXNQb3RlbnRpYWxSZXR1cm5UeXBlIiwiaXNQb3RlbnRpYWxQYXJhbWV0ZXJUeXBlIiwiaXNSZWZlcmVuY2VSZWxhdGVkIiwib3RoZXIiLCJjdlVucXVhbGlmaWVkIiwiZGVjbGFyYXRvclN0cmluZyIsInZhcm5hbWUiLCJwYXJlbnRoZXNpemUiLCJvdXRzaWRlIiwic3RyIiwicHJlY2VkZW5jZSIsImRlc2NyaWJlIiwiaXNDVlF1YWxpZmllZCIsImN2UXVhbGlmaWVkIiwiY3ZRdWFsaWZpZWRJbXBsIiwiX25hbWUiLCJfc3VwZXIiLCJfdGhpcyIsImFwcGx5IiwiYXJndW1lbnRzIiwiaXNDb21wbGV0ZSIsIl9fZXh0ZW5kcyIsImV4Y2x1ZGVCYXNlIiwiZGVjb3JhdGVkIiwiZW5nbGlzaFN0cmluZyIsInBsdXJhbCIsIlZPSUQiLCJpc0F0b21pYyIsIlZhbHVlVHlwZSIsImJ5dGVzVG9WYWx1ZSIsImJ5dGVzIiwidmFsdWVUb0J5dGVzIiwic2l6ZSIsInB1c2giLCJ2YWx1ZVRvT3N0cmVhbVN0cmluZyIsInZhbHVlVG9TdHJpbmciLCJTaW1wbGVUeXBlIiwic2ltcGxlVHlwZSIsIndvcmQiLCJpbmRleE9mIiwiaXNWb3dlbCIsImNoYXJBdCIsImlzVmFsdWVWYWxpZCIsIkNoYXIiLCJpc051bGxDaGFyIiwiTlVMTF9DSEFSIiwianNTdHJpbmdUb051bGxUZXJtaW5hdGVkQ2hhckFycmF5IiwiY2hhcnMiLCJzcGxpdCIsIm1hcCIsImNoYXJDb2RlQXQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJDSEFSIiwiSW50IiwiSU5UIiwiU2l6ZV90IiwiQm9vbCIsIkJPT0wiLCJGbG9hdCIsIkZMT0FUIiwiRG91YmxlIiwiRE9VQkxFIiwiaXNOdWxsIiwiaXNOZWdhdGl2ZSIsImlzT2JqZWN0UG9pbnRlciIsImlzVmFsdWVEZXJlZmVyZW5jZWFibGUiLCJBcnJheVBvaW50ZXIiLCJhcnJheU9iamVjdCIsImVsZW1UeXBlIiwiYWRkcmVzcyIsIm9uZVBhc3QiLCJpc0FsaXZlIiwidG9JbmRleCIsImFkZHIiLCJ0cnVuYyIsIk9iamVjdFBvaW50ZXIiLCJwb2ludGVkT2JqZWN0IiwiZ2V0UG9pbnRlZE9iamVjdCIsIm5vUmVmIiwiYWRqdXN0VG9Qb2ludGVyVHlwZSIsInNpemVFeHByZXNzaW9uQVNUIiwiY2xhc3NOYW1lIiwicmV0dXJuVHlwZSIsInBhcmFtVHlwZXMiLCJyZWNlaXZlclR5cGUiLCJwdHlwZSIsInBhcmFtU3RyVHlwZSIsInBhcmFtU3RyRW5nbGlzaCIsInNhbWVSZXR1cm5UeXBlIiwic2FtZVBhcmFtVHlwZXMiLCJvdGhlclBhcmFtVHlwZXMiLCJzYW1lUmVjZWl2ZXJUeXBlIiwic2FtZVNpZ25hdHVyZSIsImlzUG90ZW50aWFsT3ZlcnJpZGVyT2YiLCJidWlsdEluVHlwZU5hbWVzIiwiU2V0IiwiaXNCdWlsdEluVHlwZU5hbWUiLCJoYXMiLCJidWlsdEluVHlwZXMiLCJjaGFyIiwiaW50IiwiYm9vbCIsImZsb2F0IiwiZG91YmxlIiwidm9pZCIsInR5cGVzXzEiLCJlcnJvcnNfMSIsIm9ic2VydmVfMSIsImNvbnN0cnVjdHNfMSIsImRlY2xhcmF0aW9uc18xIiwib2JqZWN0c18xIiwiZXhwcmVzc2lvbnNfMSIsInN0YW5kYXJkQ29udmVyc2lvbnNfMSIsIlNjb3BlIiwicGFyZW50IiwiZW50aXRpZXMiLCJhZGREZWNsYXJlZEVudGl0eSIsIm5ld0VudGl0eSIsImV4aXN0aW5nRW50aXR5IiwibWVyZ2VJbnRvIiwiRnVuY3Rpb25FbnRpdHkiLCJsb29rdXAiLCJvcHRpb25zIiwia2luZCIsImluY2x1ZGVzIiwiZW50Iiwib3duIiwiQXJyYXkiLCJpc0FycmF5IiwidmlhYmxlIiwicGFyYW1UeXBlc18xIiwicmVjZWl2ZXJUeXBlXzEiLCJmaWx0ZXIiLCJjYW5kIiwiQmxvY2tTY29wZSIsIk5hbWVzcGFjZVNjb3BlIiwiY2hpbGRyZW4iLCJhZGRDaGlsZCIsImNoaWxkIiwiQ1BQRW50aXR5Iiwib2JzZXJ2YWJsZSIsIk9ic2VydmFibGUiLCJlbnRpdHlJZCIsIl9uZXh0RW50aXR5SWQiLCJOYW1lZEVudGl0eSIsIkRlY2xhcmVkRW50aXR5QmFzZSIsImRlY2wiLCJkZWNsYXJhdGlvbiIsIkRlY2xhcmVkT2JqZWN0RW50aXR5IiwiQ1BQRXJyb3IiLCJ0eXBlX21pc21hdGNoIiwiQXV0b0VudGl0eSIsImRlZiIsImlzUGFyYW1ldGVyIiwiZGVmaW5pdGlvbiIsInByZXZfbG9jYWwiLCJydW50aW1lTG9va3VwIiwicnRDb25zdHJ1Y3QiLCJjb250YWluaW5nUnVudGltZUZ1bmN0aW9uIiwic3RhY2tGcmFtZSIsImdldExvY2FsT2JqZWN0IiwiTG9jYWxSZWZlcmVuY2VFbnRpdHkiLCJiaW5kVG8iLCJiaW5kUmVmZXJlbmNlIiwicmVmZXJlbmNlTG9va3VwIiwiU3RhdGljRW50aXR5IiwicXVhbGlmaWVkTmFtZSIsImxpbmsiLCJHbG9iYWxPYmplY3REZWZpbml0aW9uIiwiYWRkTm90ZSIsImRlZl9ub3RfZm91bmQiLCJzaW0iLCJtZW1vcnkiLCJzdGF0aWNMb29rdXAiLCJSZXR1cm5PYmplY3RFbnRpdHkiLCJyZXR1cm5PYmplY3QiLCJSZXR1cm5CeVJlZmVyZW5jZUVudGl0eSIsInNldFJldHVybk9iamVjdCIsIlN0cmluZ0xpdGVyYWxFbnRpdHkiLCJvYmplY3RJbnN0YW5jZSIsIlN0cmluZ0xpdGVyYWxPYmplY3QiLCJnZXRTdHJpbmdMaXRlcmFsIiwiUGFzc0J5VmFsdWVQYXJhbWV0ZXJFbnRpdHkiLCJjYWxsZWRGdW5jdGlvbiIsIm51bSIsImZ1bmMiLCJ0b3BGdW5jdGlvbiIsInBhcmFtIiwibW9kZWwiLCJwYXJhbWV0ZXJzIiwiZGVjbGFyZWRFbnRpdHkiLCJwYXJhbU9iaiIsIlBhc3NCeVJlZmVyZW5jZVBhcmFtZXRlckVudGl0eSIsIkFycmF5U3Vib2JqZWN0RW50aXR5IiwiYXJyYXlFbnRpdHkiLCJpbmRleCIsImdldEFycmF5RWxlbVN1Ym9iamVjdCIsImFyckRlc2MiLCJkZXNjIiwiVGVtcG9yYXJ5T2JqZWN0RW50aXR5IiwiY3JlYXRvciIsIm93bmVyIiwiZGVzY3JpcHRpb24iLCJzZXRPd25lciIsIm5ld093bmVyIiwiY3JlYXRvclJ0Iiwib2JqSW5zdCIsImFsbG9jYXRlVGVtcG9yYXJ5T2JqZWN0IiwiY29udGFpbmluZ0Z1bGxFeHByZXNzaW9uIiwidGVtcG9yYXJ5T2JqZWN0cyIsIlJ1bnRpbWVQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbiIsImlzU3RhdGljYWxseUJvdW5kIiwibmFtZVN0cmluZyIsIm1hdGNoaW5nRnVuY3Rpb24iLCJzZWxlY3RPdmVybG9hZGVkRW50aXR5IiwicmV0dXJuVHlwZXNNYXRjaCIsIm92ZXJsb2FkIiwic2VsZWN0T3ZlcmxvYWRlZERlZmluaXRpb24iLCJub19tYXRjaGluZ19vdmVybG9hZCIsImlzTWFpbiIsIm92ZXJsb2FkR3JvdXAiLCJmaW5kIiwib3ZlcmxvYWRSZXNvbHV0aW9uIiwiY2FuZGlkYXRlcyIsImFyZ1R5cGVzIiwicmVzdWx0Q2FuZGlkYXRlcyIsImNhbmRpZGF0ZSIsIm5vdGVzIiwiY2FuZGlkYXRlUGFyYW1UeXBlcyIsIm51bVBhcmFtcyIsImZvckVhY2giLCJhcmdUeXBlIiwiY2FuZGlkYXRlUGFyYW1UeXBlIiwicGFyYW1SZWZlcmVuY2VUeXBlIiwiYXV4QXJnIiwiQXV4aWxpYXJ5RXhwcmVzc2lvbiIsImNvbnZlcnRlZEFyZyIsInN0YW5kYXJkQ29udmVyc2lvbiIsInBhcmFtVHlwZSIsInNlbGVjdGVkIiwidW5kZWZpbmVkIiwiZW50aXRpZXNfMSIsImNyZWF0ZVRyYW5zbGF0aW9uVW5pdENvbnRleHQiLCJjb250ZXh0IiwidHJhbnNsYXRpb25Vbml0IiwiY29udGV4dHVhbFNjb3BlIiwiYXNzaWduIiwiQ1BQQ29uc3RydWN0IiwiaGFzRXJyb3JzIiwiaWQiLCJORVhUX0lEIiwiYXR0YWNoIiwib25BdHRhY2giLCJhdHRhY2hBbGwiLCJzZXRBU1QiLCJhc3QiLCJzb3VyY2UiLCJzb3VyY2VSZWZlcmVuY2UiLCJnZXRTb3VyY2VSZWZlcmVuY2UiLCJsaW5lIiwiY29sdW1uIiwic3RhcnQiLCJlbmQiLCJleHBsYWluIiwiaWdub3JlIiwibm90ZSIsIk5vdGVLaW5kIiwiRVJST1IiLCJnZXROZWFyZXN0U291cmNlUmVmZXJlbmNlIiwiY29uc3RydWN0IiwiUnVudGltZUNvbnN0cnVjdCIsInN0YWNrVHlwZSIsInBhcmVudE9yU2ltIiwicHVzaGVkQ2hpbGRyZW4iLCJpc0FjdGl2ZSIsImlzRG9uZSIsInBhdXNlcyIsInN0ZXBzVGFrZW5BdFN0YXJ0Iiwic3RlcHNUYWtlbiIsInN0ZXBGb3J3YXJkIiwic2VuZCIsInN0ZXBGb3J3YXJkSW1wbCIsInVwTmV4dCIsInVwTmV4dEltcGwiLCJkb25lIiwic2V0UGF1c2VXaGVuVXBOZXh0IiwicGF1c2VXaGVuVXBOZXh0Iiwid2FpdCIsInB1c2hlZCIsInBvcHBlZCIsImZpbmRQYXJlbnRCeU1vZGVsIiwiQmFzaWNDUFBDb25zdHJ1Y3QiLCJJbnZhbGlkQ29uc3RydWN0IiwiZXJyb3JGbiIsIlBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIiwiaXNGdWxsRXhwcmVzc2lvbiIsImZlXzEiLCJmaW5kRnVsbEV4cHJlc3Npb24iLCJ0ZW1wRW50IiwiYWRkVGVtcG9yYXJ5T2JqZWN0IiwidGVtcG9yYXJ5RGVhbGxvY2F0b3IiLCJUZW1wb3JhcnlEZWFsbG9jYXRvciIsInRlbXBPYmpFbnQiLCJjcmVhdGVUZW1wb3JhcnlPYmplY3QiLCJmZSIsImNyZWF0ZVJ1bnRpbWVDb25zdHJ1Y3QiLCJydCIsIlJ1bnRpbWVUZW1wb3JhcnlEZWFsbG9jYXRvciIsImp1c3REZXN0cnVjdGVkIiwiZHRvcnMiLCJkZWFsbG9jYXRlVGVtcG9yYXJ5T2JqZWN0IiwicG9wIiwiVW5zdXBwb3J0ZWRDb25zdHJ1Y3QiLCJ1bnN1cHBvcnRlZE5hbWUiLCJsb2JzdGVyIiwidW5zdXBwb3J0ZWRfZmVhdHVyZSIsIkdsb2JhbE9iamVjdEFsbG9jYXRvciIsImdsb2JhbE9iamVjdHMiLCJSdW50aW1lR2xvYmFsT2JqZWN0QWxsb2NhdG9yIiwib2JqRGVmIiwiYWxsb2NhdGVTdGF0aWMiLCJpbml0aWFsaXplciIsImNyZWF0ZVJ1bnRpbWVJbml0aWFsaXplciIsIk5vdGUiLCJCYXNpY05vdGVCYXNlIiwic291cmNlUmVmIiwicHJpbWFyeVNvdXJjZVJlZmVyZW5jZSIsImFsbFNvdXJjZVJlZmVyZW5jZXMiLCJQcmVwcm9jZXNzb3JOb3RlIiwiU3ludGF4Tm90ZSIsIkNvbnN0cnVjdE5vdGVCYXNlIiwiY29uc3RydWN0cyIsInByaW1hcnlDb25zdHJ1Y3QiLCJDb21waWxlck5vdGUiLCJMaW5rZXJOb3RlIiwiY2luX25vdF9zdXBwb3J0ZWQiLCJjbGFzc19kZWYiLCJwcmV2X2RlZiIsInByZXYiLCJiYXNlX2NsYXNzX3R5cGUiLCJiaWdfdGhyZWUiLCJiaWdUaHJlZVllcyIsImJpZ1RocmVlTm8iLCJ5U3RyIiwiam9pbiIsIm5TdHIiLCJXQVJOSU5HIiwibXVsdGlwbGVfaW5oZXJpdGFuY2UiLCJ2aXJ0dWFsX2luaGVyaXRhbmNlIiwiY3Rvcl9kZWYiLCJkdG9yX2RlZiIsImNvcHkiLCJwYXNzX2J5X3ZhbHVlIiwiY29uc3RSZWYiLCJpbml0Iiwibm9fc3VjaF9tZW1iZXIiLCJjbGFzc1R5cGUiLCJpbXByb3Blcl9tZW1iZXIiLCJkZWxlZ2F0aW5nX29ubHkiLCJtdWx0aXBsZV9iYXNlX2luaXRzIiwiZHRvciIsIm5vX2Rlc3RydWN0b3JfYXV0byIsImVudGl0eSIsIm5vX2Rlc3RydWN0b3JfdGVtcG9yYXJ5IiwicmV0dXJuX2FycmF5IiwicmV0dXJuX2Z1bmMiLCJpbnZhbGlkX3JldHVybl90eXBlIiwic29tZV9pbnZhbGlkX3BhcmFtZXRlcl90eXBlcyIsImFycmF5Iiwidm9pZF9wYXJhbSIsIm9wX21lbWJlciIsIm9wX3N1YnNjcmlwdF9vbmVfcGFyYW0iLCJkZWNsYXJhdGlvbnMiLCJtYWluUGFyYW1zIiwibm9fcmV0dXJuX3R5cGUiLCJub25Db3ZhcmlhbnRSZXR1cm5UeXBlIiwiZGVmaW5pdGlvbl9ub25fZnVuY3Rpb25fdHlwZSIsInBvaW50ZXIiLCJyZWZlcmVuY2UiLCJpbnZhbGlkX3BvaW50ZWRfdHlwZSIsInJlZiIsImludmFsaWRfcmVmZXJyZWRfdHlwZSIsIm1lbWJlck5vdFN1cHBvcnRlZCIsImxlbmd0aF9yZXF1aXJlZCIsInplcm9fbGVuZ3RoIiwibXVsdGlkaW1lbnNpb25hbF9hcnJheXNfdW5zdXBwb3J0ZWQiLCJpbnZhbGlkX2VsZW1lbnRfdHlwZSIsInNjYWxhcl9hcmdzIiwiZGVjbFR5cGUiLCJhcnJheV9zdHJpbmdfbGl0ZXJhbCIsInRhcmdldFR5cGUiLCJjb252ZXJ0IiwiaW5pdFR5cGUiLCJsaXN0X25hcnJvd2luZyIsImxpc3RfYXJyYXkiLCJsaXN0X2xlbmd0aCIsIm1hdGNoaW5nX2NvbnN0cnVjdG9yIiwibm9fZGVmYXVsdF9jb25zdHJ1Y3RvciIsInJlZmVyZW5jZVBydmFsdWVDb25zdCIsInJlZmVyZW5jZVR5cGUiLCJyZWZlcmVuY2VCaW5kIiwicmVmZXJlbmNlQmluZE11bHRpcGxlIiwic3RyaW5nTGl0ZXJhbExlbmd0aCIsInN0cmluZ1NpemUiLCJhcnJTaXplIiwidW5pbml0aWFsaXplZCIsImFycmF5X2RlZmF1bHRfaW5pdCIsImFycmF5X2RpcmVjdF9pbml0IiwiT1RIRVIiLCJzdG9yYWdlIiwib25jZSIsInNwZWMiLCJpbmNvbXBhdGlibGUiLCJzcGVjcyIsInR5cGVTcGVjaWZpZXIiLCJvbmVfdHlwZSIsInR5cGVOYW1lcyIsInNpZ25lZF91bnNpZ25lZCIsImZyaWVuZCIsIm91dHNpZGVfY2xhc3MiLCJ2aXJ0dWFsX3Byb2hpYml0ZWQiLCJwYXJhbWV0ZXIiLCJzdG9yYWdlX3Byb2hpYml0ZWQiLCJ1bmtub3duX3R5cGUiLCJ2b2lkX3Byb2hpYml0ZWQiLCJkZWNsYXJhdG9yIiwidW5zaWduZWRfbm90X3N1cHBvcnRlZCIsInR5cGVOb3RGb3VuZCIsInR5cGVOYW1lIiwiZXhwciIsImFycmF5X29wZXJhbmQiLCJhcnJheV9vZmZzZXQiLCJhc3NpZ25tZW50IiwibGhzX2x2YWx1ZSIsImxoc19jb25zdCIsImxocyIsInJocyIsInNlbGYiLCJiaW5hcnkiLCJhcml0aG1ldGljX29wZXJhbmRzIiwib3BlcmF0b3IiLCJsZWZ0IiwicmlnaHQiLCJpbnRlZ3JhbF9vcGVyYW5kcyIsImJvb2xlYW5fb3BlcmFuZCIsIm9wZXJhbmQiLCJhcml0aG1ldGljX2NvbW1vbl90eXBlIiwidW5hcnkiLCJkZWxldGUiLCJub19kZXN0cnVjdG9yIiwicG9pbnRlclRvT2JqZWN0VHlwZSIsImRlcmVmZXJlbmNlIiwiZG90IiwiY2xhc3NfdHlwZSIsIm1lbWJlckxvb2t1cCIsImFycm93IiwiY2xhc3NfcG9pbnRlcl90eXBlIiwiaW52YWxpZF9vcGVyYW5kIiwibHZhbHVlX29wZXJhbmQiLCJpbnZhbGlkX2JpbmFyeV9vcGVyYW5kcyIsImxvZ2ljYWxOb3QiLCJvcGVyYW5kX2Jvb2wiLCJhZGRyZXNzT2YiLCJsdmFsdWVfcmVxdWlyZWQiLCJ0ZXJuYXJ5IiwiY29uZGl0aW9uX2Jvb2wiLCJzYW1lVmFsdWVDYXRlZ29yeSIsInVuYXJ5UGx1cyIsInVuYXJ5TWludXMiLCJmdW5jdGlvbkNhbGwiLCJtYWluIiwiaW52YWxpZF9vcGVyYW5kX2V4cHJlc3Npb24iLCJwYXJhbVJlZmVyZW5jZUx2YWx1ZSIsIm5vdF9kZWZpbmVkIiwicHQiLCJ0aGlzRXhwciIsIm1lbWJlckZ1bmMiLCJpZGVuIiwiYW1iaWd1b3VzIiwibm9fbWF0Y2giLCJrZXl3b3JkIiwiYWx0X29wIiwidGhpc0NvbnN0Iiwic3RtdCIsImZ1bmN0aW9uX2RlZmluaXRpb25fcHJvaGliaXRlZCIsInNlbGVjdGlvbiIsIml0ZXJhdGlvbiIsImJyZWFrU3RhdGVtZW50IiwibG9jYXRpb24iLCJyZXR1cm5TdGF0ZW1lbnQiLCJlbXB0eSIsImV4cHJWb2lkIiwibGlicmFyeV91bnN1cHBvcnRlZCIsIm11bHRpcGxlX2RlZiIsImVudDEiLCJlbnQyIiwiY2xhc3Nfc2FtZV90b2tlbnMiLCJwcmVwcm9jZXNzIiwicmVjdXJzaXZlSW5jbHVkZSIsImZlYXR1cmUiLCJyZWZlcmVuY2VQcnZhbHVlIiwidGVybmFyeVNhbWVUeXBlIiwidGVybmFyeU5vVm9pZCIsInB1bGxfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlY2VpdmVNZXNzYWdlIiwib2JzZXJ2ZXIiLCJtc2ciLCJjYXRBY3QiLCJfYWN0IiwiY2F0ZWdvcnkiLCJfZGVmYXVsdCIsImFkZExpc3RlbmVyIiwib2JqV2l0aE9ic2VydmFibGUiLCJsaXN0ZW5lciIsIm1lc3NhZ2VSZXNwb25zZSIsIm1lc3NhZ2VDYXRlZ29yeSIsInRhcmdldCIsInByb3BlcnR5S2V5IiwiZGVzY3JpcHRvciIsInVuaXZlcnNhbE9ic2VydmVycyIsIm9ic2VydmVycyIsImRhdGEiLCJzaWxlbnQiLCJsaXN0ZW5lckFkZGVkIiwicmVtb3ZlTGlzdGVuZXIiLCJkZWZhdWx0IiwibGlzdGVuZXJSZW1vdmVkIiwiY2F0IiwiaW5pdGlhbGl6ZXJzXzEiLCJsb2Rhc2hfMSIsImNyZWF0ZUZ1bmN0aW9uQ29udGV4dCIsImNvbnRhaW5pbmdGdW5jdGlvbiIsImZ1bmN0aW9uTG9jYWxzIiwiRnVuY3Rpb25Mb2NhbHMiLCJSdW50aW1lRnVuY3Rpb25JbmRpY2VzIiwibG9jYWxPYmplY3RzIiwibG9jYWxSZWZlcmVuY2VzIiwibG9jYWxWYXJpYWJsZXNCeUVudGl0eUlkIiwicmVnaXN0ZXJMb2NhbFZhcmlhYmxlIiwibG9jYWwiLCJSdW50aW1lRnVuY3Rpb24iLCJyZWNlaXZlciIsImhhc0NvbnRyb2wiLCJSdW50aW1lRnVuY3Rpb25DYWxsIiwiY2FsbGVyIiwiYm9keSIsImNyZWF0ZVJ1bnRpbWVTdGF0ZW1lbnQiLCJwdXNoU3RhY2tGcmFtZSIsInN0YWNrIiwicHVzaEZyYW1lIiwiZ2FpbkNvbnRyb2wiLCJsb3NlQ29udHJvbCIsIkZ1bmN0aW9uQ2FsbCIsImFyZ3MiLCJjbG9uZSIsImFyZ0luaXRpYWxpemVycyIsImFyZyIsIkNvcHlJbml0aWFsaXplciIsInJldHVybkJ5VmFsdWVUYXJnZXQiLCJyZWdpc3RlckZ1bmN0aW9uQ2FsbCIsImNyZWF0ZVJ1bnRpbWVGdW5jdGlvbkNhbGwiLCJJTkRFWF9GVU5DVElPTl9DQUxMX1BVU0giLCJJTkRFWF9GVU5DVElPTl9DQUxMX0NBTEwiLCJmdW5jdGlvbkRlZiIsImFJbml0IiwiY3JlYXRlUnVudGltZUZ1bmN0aW9uIiwiY2FsbFJlY2VpdmVkIiwibGFzdF8xIiwiVmFsdWUiLCJyYXdWYWx1ZSIsImlzVmFsaWQiLCJfaXNWYWxpZCIsInZhbHVlVG9DbG9uZSIsImludmFsaWRhdGVkIiwiZXF1YWxzIiwib3RoZXJWYWx1ZSIsInJhd0VxdWFscyIsIm90aGVyUmF3VmFsdWUiLCJjb21iaW5lIiwiY29tYmluZXIiLCJwb2ludGVyT2Zmc2V0Iiwib2Zmc2V0VmFsdWUiLCJzdWJ0cmFjdCIsInBvaW50ZXJEaWZmZXJlbmNlIiwiY29tcGFyZSIsImNvbXBhcmVyIiwibW9kaWZ5IiwibW9kaWZpZXIiLCJ2YWx1ZVN0cmluZyIsInNldFJhd1ZhbHVlIiwiTWVtb3J5IiwiY2FwYWNpdHkiLCJzdGF0aWNDYXBhY2l0eSIsInN0YWNrQ2FwYWNpdHkiLCJmbG9vciIsImhlYXBDYXBhY2l0eSIsInN0YXRpY1N0YXJ0Iiwic3RhdGljRW5kIiwic3RhY2tTdGFydCIsInN0YWNrRW5kIiwiaGVhcFN0YXJ0IiwiaGVhcEVuZCIsInRlbXBvcmFyeVN0YXJ0IiwidGVtcG9yYXJ5Q2FwYWNpdHkiLCJ0ZW1wb3JhcnlFbmQiLCJyZXNldCIsIm9iamVjdHMiLCJzdHJpbmdMaXRlcmFsTWFwIiwic3RhdGljVG9wIiwic3RhdGljT2JqZWN0cyIsInRlbXBvcmFyeUJvdHRvbSIsIk1lbW9yeVN0YWNrIiwiaGVhcCIsIk1lbW9yeUhlYXAiLCJnZXRCeXRlIiwicmVhZEJ5dGUiLCJnZXRCeXRlcyIsInNsaWNlIiwicmVhZEJ5dGVzIiwic2V0Qnl0ZSIsIndyaXRlQnl0ZSIsInNldEJ5dGVzIiwidmFsdWVzIiwid3JpdGVCeXRlcyIsInB0ciIsImdldEFycmF5RWxlbVN1Ym9iamVjdEJ5QWRkcmVzcyIsIkludmFsaWRPYmplY3QiLCJhbGxvY2F0ZU9iamVjdCIsImtpbGxPYmplY3QiLCJraWxsZXIiLCJraWxsIiwiYWxsb2NhdGVTdHJpbmdMaXRlcmFsIiwic3RyaW5nTGl0ZXJhbEVudGl0eSIsInNldFZhbHVlIiwiU3RhdGljT2JqZWN0Iiwic3RhdGljRW50aXR5IiwidGVtcEVudGl0eSIsIlRlbXBvcmFyeU9iamVjdCIsInRvcCIsImZyYW1lcyIsInRvcEZyYW1lIiwicnRGdW5jIiwiZnJhbWUiLCJNZW1vcnlGcmFtZSIsInBvcEZyYW1lIiwiYm90dG9tIiwib2JqZWN0TWFwIiwibG9jYWxPYmplY3RzQnlFbnRpdHlJZCIsImxvY2FsUmVmZXJlbmNlc0J5RW50aXR5SWQiLCJvYmpFbnRpdHkiLCJBdXRvT2JqZWN0IiwiU2ltdWxhdGlvbl8xIiwicnVudGltZUVudmlyb25tZW50XzEiLCJmdW5jdGlvbnNfMSIsImxleGljYWxfMSIsInJlYWRWYWx1ZVdpdGhBbGVydCIsInJlYWRWYWx1ZSIsIm9iakRlc2MiLCJldmVudE9jY3VycmVkIiwiU2ltdWxhdGlvbkV2ZW50IiwiVU5ERUZJTkVEX0JFSEFWSU9SIiwiRXhwcmVzc2lvbkNvbnN0cnVjdHNNYXAiLCJjb21tYV9leHByZXNzaW9uIiwiQ29tbWFFeHByZXNzaW9uIiwiY3JlYXRlRnJvbUFTVCIsInRlcm5hcnlfZXhwcmVzc2lvbiIsIlRlcm5hcnlFeHByZXNzaW9uIiwiYXNzaWdubWVudF9leHByZXNzaW9uIiwiQXNzaWdubWVudEV4cHJlc3Npb24iLCJjb21wb3VuZF9hc3NpZ25tZW50X2V4cHJlc3Npb24iLCJVbnN1cHBvcnRlZEV4cHJlc3Npb24iLCJhcml0aG1ldGljX2JpbmFyeV9vcGVyYXRvcl9leHByZXNzaW9uIiwiQXJpdGhtZXRpY0JpbmFyeU9wZXJhdG9yRXhwcmVzc2lvbiIsInJlbGF0aW9uYWxfYmluYXJ5X29wZXJhdG9yX2V4cHJlc3Npb24iLCJSZWxhdGlvbmFsQmluYXJ5T3BlcmF0b3IiLCJsb2dpY2FsX2JpbmFyeV9vcGVyYXRvcl9leHByZXNzaW9uIiwiTG9naWNhbEJpbmFyeU9wZXJhdG9yIiwicG9pbnRlcl90b19tZW1iZXJfZXhwcmVzc2lvbiIsImNfc3R5bGVfY2FzdF9leHByZXNzaW9uIiwicHJlZml4X2luY3JlbWVudF9leHByZXNzaW9uIiwicHJlZml4X2RlY3JlbWVudF9leHByZXNzaW9uIiwiZGVyZWZlcmVuY2VfZXhwcmVzc2lvbiIsImFkZHJlc3Nfb2ZfZXhwcmVzc2lvbiIsInVuYXJ5X3BsdXNfZXhwcmVzc2lvbiIsInVuYXJ5X21pbnVzX2V4cHJlc3Npb24iLCJsb2dpY2FsX25vdF9leHByZXNzaW9uIiwiYml0d2lzZV9ub3RfZXhwcmVzc2lvbiIsInNpemVvZl9leHByZXNzaW9uIiwic2l6ZW9mX3R5cGVfZXhwcmVzc2lvbiIsIm5ld19leHByZXNzaW9uIiwiZGVsZXRlX2V4cHJlc3Npb24iLCJkZWxldGVfYXJyYXlfZXhwcmVzc2lvbiIsInN0YXRpY19jYXN0X2V4cHJlc3Npb24iLCJkeW5hbWljX2Nhc3RfZXhwcmVzc2lvbiIsInJlaW50ZXJwcmV0X2Nhc3RfZXhwcmVzc2lvbiIsImNvbnN0X2Nhc3RfZXhwcmVzc2lvbiIsInN1YnNjcmlwdF9leHByZXNzaW9uIiwiZnVuY3Rpb25fY2FsbF9leHByZXNzaW9uIiwiRnVuY3Rpb25DYWxsRXhwcmVzc2lvbiIsImRvdF9leHByZXNzaW9uIiwiYXJyb3dfZXhwcmVzc2lvbiIsInBvc3RmaXhfaW5jcmVtZW50X2V4cHJlc3Npb24iLCJwb3N0Zml4X2RlY3JlbWVudF9leHByZXNzaW9uIiwiY29uc3RydWN0X2V4cHJlc3Npb24iLCJpZGVudGlmaWVyX2V4cHJlc3Npb24iLCJJZGVudGlmaWVyRXhwcmVzc2lvbiIsInRoaXNfZXhwcmVzc2lvbiIsIm51bWVyaWNfbGl0ZXJhbCIsIk51bWVyaWNMaXRlcmFsIiwiY3JlYXRlRXhwcmVzc2lvbkZyb21BU1QiLCJjb25zdHJ1Y3RfdHlwZSIsImNyZWF0ZUV4cHJlc3Npb25Db250ZXh0IiwiY29udGV4dHVhbFBhcmFtZXRlclR5cGVzIiwiRXhwcmVzc2lvbiIsImNvbnZlcnNpb25MZW5ndGgiLCJpc1dlbGxUeXBlZCIsInZhbHVlQ2F0ZWdvcnkiLCJpc1R5cGVkIiwiaXNPYmplY3RUeXBlZCIsImlzQXRvbWljVHlwZWQiLCJpc0FyaXRobWV0aWNUeXBlZCIsImlzSW50ZWdyYWxUeXBlZCIsImlzRmxvYXRpbmdQb2ludFR5cGVkIiwiaXNQb2ludGVyVHlwZWQiLCJpc1JlZmVyZW5jZVR5cGVkIiwiaXNDbGFzc1R5cGVkIiwiaXNCb3VuZGVkQXJyYXlUeXBlZCIsImlzQXJyYXlPZlVua25vd25Cb3VuZFR5cGVkIiwiaXNHZW5lcmljQXJyYXlUeXBlZCIsImlzUHJ2YWx1ZSIsImlzTHZhbHVlIiwiaXNUYWlsQ2hpbGQiLCJpc1RhaWwiLCJhbGxXZWxsVHlwZWQiLCJleHByZXNzaW9ucyIsImV2ZXJ5IiwiYWxsT2JqZWN0VHlwZWQiLCJSdW50aW1lRXhwcmVzc2lvbiIsInNldEV2YWxSZXN1bHQiLCJldmFsUmVzdWx0IiwiY3JlYXRlUnVudGltZUV4cHJlc3Npb24iLCJkZXNjcmliZUV2YWxSZXN1bHQiLCJkZXB0aCIsIlNpbXBsZVJ1bnRpbWVFeHByZXNzaW9uIiwic3ViZXhwcmVzc2lvbnMiLCJzZXRTdWJleHByZXNzaW9ucyIsIm9wZXJhdGUiLCJSdW50aW1lQ29tbWEiLCJjb25zdHJ1Y3RLaW5kIiwidGhlbiIsIm90aGVyd2lzZSIsImNvbXBpbGVDb25kaXRpb24iLCJfYSIsImNvbXBpbGVDb25zZXF1ZW5jZXMiLCJjb252ZXJ0VG9QUlZhbHVlIiwiUnVudGltZVRlcm5hcnkiLCJSdW50aW1lQXNzaWdubWVudCIsInJlYXNvbiIsIm90aGVycyIsIndyaXRlVmFsdWUiLCJhZGQiLCJzdWIiLCJtdWx0IiwiaW50RGl2IiwiZmxvYXREaXYiLCJtb2QiLCJsdCIsImd0IiwibHRlIiwiZ3RlIiwiZXEiLCJuZSIsImJpdEFuZCIsImJpdFhvciIsImJpdE9yIiwiYml0U2hpZnRMZWZ0IiwiYml0U2hpZnRSaWdodCIsIkJpbmFyeU9wZXJhdG9yIiwiUnVudGltZUJpbmFyeU9wZXJhdG9yIiwiQVJJVEhNRVRJQ19CSU5BUllfT1BFUkFUSU9OUyIsIisiLCItIiwiKiIsIi8iLCIlIiwiJiIsIl4iLCJ8IiwiPDwiLCI+PiIsInVzdWFsQXJpdGhtZXRpY0NvbnZlcnNpb25zIiwiY29udmVydGVkTGVmdCIsImNvbnZlcnRlZFJpZ2h0Iiwib3AiLCJQb2ludGVyRGlmZmVyZW5jZSIsIlBvaW50ZXJPZmZzZXQiLCJSdW50aW1lQXJpdGhtZXRpY0JpbmFyeU9wZXJhdG9yIiwiUnVudGltZVBvaW50ZXJEaWZmZXJlbmNlIiwicmVzdWx0IiwibGVmdEFyciIsInJpZ2h0QXJyIiwicG9pbnRlck9uTGVmdCIsIm9mZnNldCIsIlJ1bnRpbWVQb2ludGVyT2Zmc2V0IiwicmVzdWx0VHlwZSIsIlJFTEFUSU9OQUxfQklOQVJZX09QRVJBVElPTlMiLCI8IiwiPiIsIjw9IiwiPj0iLCI9PSIsIiE9IiwiUnVudGltZVJlbGF0aW9uYWxCaW5hcnlPcGVyYXRvciIsImNvbXBpbGVMb2dpY2FsU3ViZXhwcmVzc2lvbiIsInN1YmV4cHIiLCJSdW50aW1lTG9naWNhbEJpbmFyeU9wZXJhdG9yIiwic2hvcnRDaXJjdWl0UmVzbHQiLCJoYXNTaG9ydENpcmN1aXRlZCIsImEiLCJiIiwiY29udGV4dHVhbFBhcmFtVHlwZXMiLCJSdW50aW1lRnVuY3Rpb25DYWxsRXhwcmVzc2lvbiIsIklOREVYX0ZVTkNUSU9OX0NBTExfRVhQUkVTU0lPTl9PUEVSQU5EIiwicmV0T2JqIiwiZ2V0VmFsdWUiLCJjaGVja0lkZW50aWZpZXIiLCJsb29rdXBSZXN1bHQiLCJvdmVybG9hZFJlc3VsdCIsImNvbnRleHR1YWxSZWNlaXZlclR5cGUiLCJpZGVudGlmaWVyIiwiUnVudGltZUZ1bmN0aW9uSWRlbnRpZmllciIsIlJ1bnRpbWVPYmplY3RJZGVudGlmaWVyIiwibGl0ZXJhbEpTUGFyc2UiLCJwYXJzZUludCIsInBhcnNlRmxvYXQiLCJsaXRWYWx1ZSIsImxpdGVyYWxUeXBlcyIsInBhcnNlTnVtZXJpY0xpdGVyYWxWYWx1ZUZyb21BU1QiLCJSdW50aW1lTnVtZXJpY0xpdGVyYWwiLCJQYXJlbnRoZXNlcyIsInN1YmV4cHJlc3Npb24iLCJSdW50aW1lUGFyZW50aGVzZXMiLCJJTkRFWF9QQVJFTlRIRVNFU19TVUJFWFBSRVNTSU9OUyIsIkFVWElMSUFSWV9FWFBSRVNTSU9OX0NPTlRFWFQiLCJwcm9ncmFtIiwiT2JqZWN0RGF0YSIsIkF0b21pY09iamVjdERhdGEiLCJuZXdWYWx1ZSIsIndyaXRlIiwiQXJyYXlPYmplY3REYXRhIiwic3ViQWRkciIsImVsZW1PYmplY3RzIiwiQXJyYXlTdWJvYmplY3QiLCJDbGFzc09iamVjdERhdGEiLCJDUFBPYmplY3QiLCJzdWJvYmplY3RWYWx1ZVdyaXR0ZW4iLCJkZWFsbG9jYXRlZEJ5IiwiZ2V0UG9pbnRlclRvIiwicmVhZCIsInZhbCIsImdldFJhd1ZhbHVlIiwib25WYWx1ZVNldCIsImNhbGxFbmRlZCIsInNldFZhbGlkaXR5IiwidmFsaWQiLCJNYWluUmV0dXJuT2JqZWN0IiwiRHluYW1pY09iamVjdCIsIlRoaXNPYmplY3QiLCJTdWJvYmplY3QiLCJjb250YWluaW5nT2JqZWN0IiwiYXJyT2JqIiwiQmFzZVN1Ym9iamVjdCIsIk1lbWJlclN1Ym9iamVjdCIsInBhcmVudERlc2MiLCJJbXBsaWNpdENvbnZlcnNpb24iLCJSdW50aW1lSW1wbGljaXRDb252ZXJzaW9uIiwiTFZhbHVlVG9SVmFsdWUiLCJmcm9tRXZhbFJlc3VsdCIsIkFycmF5VG9Qb2ludGVyIiwiVHlwZUNvbnZlcnNpb24iLCJOb09wVHlwZUNvbnZlcnNpb24iLCJOdWxsUG9pbnRlckNvbnZlcnNpb24iLCJQb2ludGVyQ29udmVyc2lvbiIsIlBvaW50ZXJUb0Jvb2xlYW5Db252ZXJzaW9uIiwiSW50ZWdyYWxQcm9tb3Rpb24iLCJJbnRlZ3JhbENvbnZlcnNpb24iLCJGbG9hdGluZ1BvaW50UHJvbW90aW9uIiwiRmxvYXRpbmdQb2ludENvbnZlcnNpb24iLCJJbnRlZ3JhbFRvRmxvYXRpbmdDb252ZXJzaW9uIiwiRmxvYXRpbmdUb0ludGVncmFsQ29udmVyc2lvbiIsIlF1YWxpZmljYXRpb25Db252ZXJzaW9uIiwidHlwZUNvbnZlcnNpb24iLCJxdWFsaWZpY2F0aW9uQ29udmVyc2lvbiIsImludGVncmFsUHJvbW90aW9uIiwic3VwcHJlc3NMVFIiLCJmcm9tUHJ2YWx1ZSIsImxlZnRPcmlnIiwicmlnaHRPcmlnIiwiSW5pdGlhbGl6ZXIiLCJSdW50aW1lSW5pdGlhbGl6ZXIiLCJEZWZhdWx0SW5pdGlhbGl6ZXIiLCJSZWZlcmVuY2VEZWZhdWx0SW5pdGlhbGl6ZXIiLCJBdG9taWNEZWZhdWx0SW5pdGlhbGl6ZXIiLCJBcnJheURlZmF1bHRJbml0aWFsaXplciIsIlJ1bnRpbWVEZWZhdWx0SW5pdGlhbGl6ZXIiLCJSdW50aW1lQXRvbWljRGVmYXVsdEluaXRpYWxpemVyIiwidGFyZ2V0RGVzYyIsImVsZW1lbnRJbml0aWFsaXplcnMiLCJlbGVtSW5pdCIsIlJ1bnRpbWVBcnJheURlZmF1bHRJbml0aWFsaXplciIsIkRpcmVjdEluaXRpYWxpemVyIiwiUmVmZXJlbmNlRGlyZWN0SW5pdGlhbGl6ZXIiLCJBdG9taWNEaXJlY3RJbml0aWFsaXplciIsIlJ1bnRpbWVEaXJlY3RJbml0aWFsaXplciIsIlJ1bnRpbWVSZWZlcmVuY2VEaXJlY3RJbml0aWFsaXplciIsInJoc0Rlc2MiLCJhbHJlYWR5UHVzaGVkIiwicnRSZWYiLCJ0eXBlZEFyZyIsIlJ1bnRpbWVBdG9taWNEaXJlY3RJbml0aWFsaXplciIsIlJ1bnRpbWVDb3B5SW5pdGlhbGl6ZXIiLCJSZWZlcmVuY2VDb3B5SW5pdGlhbGl6ZXIiLCJSdW50aW1lUmVmZXJlbmNlQ29weUluaXRpYWxpemVyIiwiQXRvbWljQ29weUluaXRpYWxpemVyIiwiUnVudGltZUF0b21pY0NvcHlJbml0aWFsaXplciIsInN0YXRlbWVudHNfMSIsIlN0b3JhZ2VTcGVjaWZpZXIiLCJudW1TcGVjcyIsInN0YXRpYyIsImV4dGVybiIsInRocmVhZF9sb2NhbCIsInJlZ2lzdGVyIiwibXV0YWJsZSIsImlzRW1wdHkiLCJUeXBlU3BlY2lmaWVyIiwiZW51bSIsIm1hdGNoZWRTcGVjIiwidW5zaWduZWQiLCJzaWduZWQiLCJjb25zdCIsInZvbGF0aWxlIiwiY3JlYXRlU2ltcGxlRGVjbGFyYXRpb25Gcm9tQVNUIiwidHlwZVNwZWMiLCJ0eXBlU3BlY3MiLCJiYXNlVHlwZSIsInN0b3JhZ2VTcGVjIiwic3RvcmFnZVNwZWNzIiwiZGVjbGFyYXRvcnMiLCJkZWNsQVNUIiwiRGVjbGFyYXRvciIsImRlY2xhcmVkVHlwZSIsIkZyaWVuZERlY2xhcmF0aW9uIiwidHlwZWRlZiIsIlR5cGVkZWZEZWNsYXJhdGlvbiIsIlZvaWREZWNsYXJhdGlvbiIsIkZ1bmN0aW9uRGVjbGFyYXRpb24iLCJVbmtub3duQm91bmRBcnJheURlY2xhcmF0aW9uIiwiaXNCbG9ja0NvbnRleHQiLCJMb2NhbFZhcmlhYmxlRGVmaW5pdGlvbiIsInNldERpcmVjdEluaXRpYWxpemVyIiwic2V0Q29weUluaXRpYWxpemVyIiwic2V0RGVmYXVsdEluaXRpYWxpemVyIiwiVW5rbm93blR5cGVEZWNsYXJhdGlvbiIsImNyZWF0ZURlY2xhcmF0aW9uRnJvbUFTVCIsIkZ1bmN0aW9uRGVmaW5pdGlvbiIsIlNpbXBsZURlY2xhcmF0aW9uIiwib3RoZXJTcGVjcyIsInN0b3JhZ2VTcGVjaWZpZXIiLCJvdGhlclNwZWNpZmllcnMiLCJ2aXJ0dWFsIiwiaW5pdGlhbGl6ZXJBbGxvd2VkIiwiaXNEZWZpbml0aW9uIiwicGFyYW1ldGVyRGVjbGFyYXRvcnMiLCJlIiwicmVnaXN0ZXJMaW5rZWRFbnRpdHkiLCJWYXJpYWJsZURlZmluaXRpb24iLCJzZXRJbml0aWFsaXplciIsInNldEluaXRpYWxpemVyTGlzdCIsInJlZ2lzdGVyR2xvYmFsT2JqZWN0RGVmaW5pdGlvbiIsIlBhcmFtZXRlckRlZmluaXRpb24iLCJwdXJlVmlydHVhbCIsImlzUHVyZVZpcnR1YWwiLCJkZXRlcm1pbmVOYW1lQW5kVHlwZSIsInRlbXBEZWNsIiwiaXNJbm5lcm1vc3QiLCJwb3N0Zml4ZXMiLCJhcmVQb3N0Zml4ZXNJbm5lcm1vc3QiLCJwb3N0Zml4IiwicGFyYW1EZWNsYXJhdG9ycyIsImFyZ0FTVCIsImNvbnRhaW5pbmdDbGFzcyIsIk9WRVJMT0FEQUJMRV9PUFMiLCJyZWdpc3RlckZ1bmN0aW9uRGVmaW5pdGlvbiIsImZ1bmN0aW9uQ29udGV4dCIsIkJsb2NrIiwiYm9keUNvbnRleHQiLCJibG9ja0NvbnRleHQiLCJwYXJhbURlY2xhcmF0b3IiLCJzdGF0ZW1lbnRzIiwic05vZGUiLCJhZGRTdGF0ZW1lbnQiLCJjcmVhdGVTdGF0ZW1lbnRGcm9tQVNUIiwiS0VZV09SRFMiLCJBTFRfT1BTIiwic3JjIiwibm90ZUhhbmRsZXIiLCJlbGVtIiwiY3JlYXRlRnVsbHlRdWFsaWZpZWROYW1lIiwibmFtZXMiLCJfaSIsImZ1bGx5UXVhbGlmaWVkTmFtZVRvVW5xdWFsaWZpZWQiLCJmcW5hbWUiLCJsYXN0SW5kZXhPZiIsImciLCJGdW5jdGlvbiIsImV2YWwiLCJ3aW5kb3ciLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJyb290IiwiU3RhdGVtZW50Q29uc3RydWN0c01hcCIsImxhYmVsZWRfc3RhdGVtZW50IiwiVW5zdXBwb3J0ZWRTdGF0ZW1lbnQiLCJjb21wb3VuZF9zdGF0ZW1lbnQiLCJzZWxlY3Rpb25fc3RhdGVtZW50Iiwid2hpbGVfc3RhdGVtZW50IiwiZG93aGlsZV9zdGF0ZW1lbnQiLCJmb3Jfc3RhdGVtZW50IiwiYnJlYWtfc3RhdGVtZW50IiwiY29udGludWVfc3RhdGVtZW50IiwicmV0dXJuX3N0YXRlbWVudCIsIlJldHVyblN0YXRlbWVudCIsImRlY2xhcmF0aW9uX3N0YXRlbWVudCIsIkRlY2xhcmF0aW9uU3RhdGVtZW50IiwiZXhwcmVzc2lvbl9zdGF0ZW1lbnQiLCJFeHByZXNzaW9uU3RhdGVtZW50IiwibnVsbF9zdGF0ZW1lbnQiLCJOdWxsU3RhdGVtZW50IiwiU3RhdGVtZW50IiwiUnVudGltZVN0YXRlbWVudCIsImV4cHJlc3Npb24iLCJSdW50aW1lRXhwcmVzc2lvblN0YXRlbWVudCIsIlJ1bnRpbWVOdWxsU3RhdGVtZW50IiwiUnVudGltZURlY2xhcmF0aW9uU3RhdGVtZW50IiwiaW5pdGlhbGl6ZXJzIiwicnVudGltZUluaXQiLCJSdW50aW1lUmV0dXJuU3RhdGVtZW50SW5kaWNlcyIsInJldHVybkluaXRpYWxpemVyIiwiUnVudGltZVJldHVyblN0YXRlbWVudCIsIlBVU0hfSU5JVElBTElaRVIiLCJSRVRVUk4iLCJwb3BVbnRpbCIsImNyZWF0ZUJsb2NrQ29udGV4dCIsImJsb2NrIiwic3RtdEFzdCIsInN0YXRlbWVudCIsIlJ1bnRpbWVCbG9jayIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJMQVJHRV9BUlJBWV9TSVpFIiwiQ09SRV9FUlJPUl9URVhUIiwiRlVOQ19FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJNQVhfTUVNT0laRV9TSVpFIiwiUExBQ0VIT0xERVIiLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIkNPTVBBUkVfVU5PUkRFUkVEX0ZMQUciLCJXUkFQX0JJTkRfRkxBRyIsIldSQVBfQklORF9LRVlfRkxBRyIsIldSQVBfQ1VSUllfQk9VTkRfRkxBRyIsIldSQVBfQ1VSUllfRkxBRyIsIldSQVBfQ1VSUllfUklHSFRfRkxBRyIsIldSQVBfUEFSVElBTF9GTEFHIiwiV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUciLCJXUkFQX0FSWV9GTEFHIiwiV1JBUF9SRUFSR19GTEFHIiwiV1JBUF9GTElQX0ZMQUciLCJERUZBVUxUX1RSVU5DX0xFTkdUSCIsIkRFRkFVTFRfVFJVTkNfT01JU1NJT04iLCJIT1RfQ09VTlQiLCJIT1RfU1BBTiIsIkxBWllfRklMVEVSX0ZMQUciLCJMQVpZX01BUF9GTEFHIiwiSU5GSU5JVFkiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUFYX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwiTUFYX0FSUkFZX0lOREVYIiwiSEFMRl9NQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYXN5bmNUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImRvbUV4Y1RhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm51bGxUYWciLCJvYmplY3RUYWciLCJwcm94eVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsInVuZGVmaW5lZFRhZyIsIndlYWtNYXBUYWciLCJ3ZWFrU2V0VGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc0VzY2FwZWRIdG1sIiwiUmVnRXhwIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwicmVJbnRlcnBvbGF0ZSIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZVByb3BOYW1lIiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwicmVUcmltIiwicmVUcmltU3RhcnQiLCJyZVRyaW1FbmQiLCJyZVdyYXBDb21tZW50IiwicmVXcmFwRGV0YWlscyIsInJlU3BsaXREZXRhaWxzIiwicmVBc2NpaVdvcmQiLCJyZUVzY2FwZUNoYXIiLCJyZUVzVGVtcGxhdGUiLCJyZUZsYWdzIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzSG9zdEN0b3IiLCJyZUlzT2N0YWwiLCJyZUlzVWludCIsInJlTGF0aW4iLCJyZU5vTWF0Y2giLCJyZVVuZXNjYXBlZFN0cmluZyIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyZU9wdE1vZCIsInJzU2VxIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJcXCIsIiciLCJcbiIsIlxyIiwi4oCoIiwi4oCpIiwiZnJlZVBhcnNlRmxvYXQiLCJmcmVlUGFyc2VJbnQiLCJnbG9iYWwiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsInRoaXNBcmciLCJhcnJheUFnZ3JlZ2F0b3IiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImN1cnJlbnQiLCJiYXNlVGltZXMiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwicHJvcHMiLCJjYWNoZUhhcyIsImNhY2hlIiwiY2hhcnNTdGFydEluZGV4Iiwic3RyU3ltYm9scyIsImNoclN5bWJvbHMiLCJjaGFyc0VuZEluZGV4IiwiZGVidXJyTGV0dGVyIiwiw4AiLCLDgSIsIsOCIiwiw4MiLCLDhCIsIsOFIiwiw6AiLCLDoSIsIsOiIiwiw6MiLCLDpCIsIsOlIiwiw4ciLCLDpyIsIsOQIiwiw7AiLCLDiCIsIsOJIiwiw4oiLCLDiyIsIsOoIiwiw6kiLCLDqiIsIsOrIiwiw4wiLCLDjSIsIsOOIiwiw48iLCLDrCIsIsOtIiwiw64iLCLDryIsIsORIiwiw7EiLCLDkiIsIsOTIiwiw5QiLCLDlSIsIsOWIiwiw5giLCLDsiIsIsOzIiwiw7QiLCLDtSIsIsO2Iiwiw7giLCLDmSIsIsOaIiwiw5siLCLDnCIsIsO5Iiwiw7oiLCLDuyIsIsO8Iiwiw50iLCLDvSIsIsO/Iiwiw4YiLCLDpiIsIsOeIiwiw74iLCLDnyIsIsSAIiwixIIiLCLEhCIsIsSBIiwixIMiLCLEhSIsIsSGIiwixIgiLCLEiiIsIsSMIiwixIciLCLEiSIsIsSLIiwixI0iLCLEjiIsIsSQIiwixI8iLCLEkSIsIsSSIiwixJQiLCLEliIsIsSYIiwixJoiLCLEkyIsIsSVIiwixJciLCLEmSIsIsSbIiwixJwiLCLEniIsIsSgIiwixKIiLCLEnSIsIsSfIiwixKEiLCLEoyIsIsSkIiwixKYiLCLEpSIsIsSnIiwixKgiLCLEqiIsIsSsIiwixK4iLCLEsCIsIsSpIiwixKsiLCLErSIsIsSvIiwixLEiLCLEtCIsIsS1IiwixLYiLCLEtyIsIsS4IiwixLkiLCLEuyIsIsS9IiwixL8iLCLFgSIsIsS6IiwixLwiLCLEviIsIsWAIiwixYIiLCLFgyIsIsWFIiwixYciLCLFiiIsIsWEIiwixYYiLCLFiCIsIsWLIiwixYwiLCLFjiIsIsWQIiwixY0iLCLFjyIsIsWRIiwixZQiLCLFliIsIsWYIiwixZUiLCLFlyIsIsWZIiwixZoiLCLFnCIsIsWeIiwixaAiLCLFmyIsIsWdIiwixZ8iLCLFoSIsIsWiIiwixaQiLCLFpiIsIsWjIiwixaUiLCLFpyIsIsWoIiwixaoiLCLFrCIsIsWuIiwixbAiLCLFsiIsIsWpIiwixasiLCLFrSIsIsWvIiwixbEiLCLFsyIsIsW0IiwixbUiLCLFtiIsIsW3IiwixbgiLCLFuSIsIsW7Iiwixb0iLCLFuiIsIsW8Iiwixb4iLCLEsiIsIsSzIiwixZIiLCLFkyIsIsWJIiwixb8iLCJlc2NhcGVIdG1sQ2hhciIsIlwiIiwiZXNjYXBlU3RyaW5nQ2hhciIsImNociIsImhhc1VuaWNvZGUiLCJzdHJpbmciLCJ0ZXN0IiwibWFwVG9BcnJheSIsIm92ZXJBcmciLCJ0cmFuc2Zvcm0iLCJyZXBsYWNlSG9sZGVycyIsInBsYWNlaG9sZGVyIiwic2FmZUdldCIsInNldFRvQXJyYXkiLCJzZXQiLCJzZXRUb1BhaXJzIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwibWF0Y2giLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInVuZXNjYXBlSHRtbENoYXIiLCImYW1wOyIsIiZsdDsiLCImZ3Q7IiwiJnF1b3Q7IiwiJiMzOTsiLCJfIiwicnVuSW5Db250ZXh0IiwiZGVmYXVsdHMiLCJwaWNrIiwiRGF0ZSIsIlR5cGVFcnJvciIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwidWlkIiwiZXhlYyIsImtleXMiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9sZERhc2giLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiVWludDhBcnJheSIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RDcmVhdGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNwbGljZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsIml0ZXJhdG9yIiwic3ltVG9TdHJpbmdUYWciLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJub3ciLCJjdHhTZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJjZWlsIiwibmF0aXZlRmxvb3IiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJpc0J1ZmZlciIsIm5hdGl2ZUlzRmluaXRlIiwiaXNGaW5pdGUiLCJuYXRpdmVKb2luIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsIm5hdGl2ZU5vdyIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsInJldmVyc2UiLCJEYXRhVmlldyIsIk1hcCIsIlByb21pc2UiLCJXZWFrTWFwIiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInN5bWJvbFRvU3RyaW5nIiwibG9kYXNoIiwiaXNPYmplY3RMaWtlIiwiTGF6eVdyYXBwZXIiLCJMb2Rhc2hXcmFwcGVyIiwid3JhcHBlckNsb25lIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiaXNPYmplY3QiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJlbnRyaWVzIiwiY2xlYXIiLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsIlN0YWNrIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImJhc2VBdCIsInNraXAiLCJudW1iZXIiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJpc0RlZXAiLCJpc0ZsYXQiLCJpc0Z1bGwiLCJjb25zdHJ1Y3RvciIsImlucHV0IiwiaW5pdENsb25lQXJyYXkiLCJ0YWciLCJnZXRUYWciLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJzeW1ib2wiLCJjbG9uZVN5bWJvbCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5IiwiYmFzZURpZmZlcmVuY2UiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJlc2NhcGUiLCJldmFsdWF0ZSIsImludGVycG9sYXRlIiwidmFyaWFibGUiLCJpbXBvcnRzIiwiaGFzaCIsImdldE1hcERhdGEiLCJwYWlycyIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImlzU3RyaWN0IiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImlzRnVuY3Rpb24iLCJiYXNlR2V0IiwicGF0aCIsImNhc3RQYXRoIiwidG9LZXkiLCJiYXNlR2V0QWxsS2V5cyIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiYmFzZUd0IiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsIkluZmluaXR5Iiwic2VlbiIsImJhc2VJbnZva2UiLCJsYXN0IiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiYmFzZUlzTmF0aXZlIiwiaXNNYXNrZWQiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwiaXNBcnJheUxpa2VPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwidG9QbGFpbk9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlTnRoIiwiYmFzZU9yZGVyQnkiLCJpdGVyYXRlZXMiLCJvcmRlcnMiLCJnZXRJdGVyYXRlZSIsInNvcnQiLCJiYXNlU29ydEJ5IiwiY3JpdGVyaWEiLCJvYmpDcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwiY29tcGFyZUFzY2VuZGluZyIsIm9yZGVyIiwiY29tcGFyZU11bHRpcGxlIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwicHJldmlvdXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYWN0aW9uIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsImNhbGxiYWNrIiwid29yZHMiLCJkZWJ1cnIiLCJjcmVhdGVDdG9yIiwidGhpc0JpbmRpbmciLCJjcmVhdGVGaW5kIiwiZmluZEluZGV4RnVuYyIsImNyZWF0ZUZsb3ciLCJmbGF0UmVzdCIsImZ1bmNzIiwicHJlcmVxIiwidGhydSIsIndyYXBwZXIiLCJnZXRGdW5jTmFtZSIsImZ1bmNOYW1lIiwiZ2V0RGF0YSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQXJ5IiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwiaXNGbGlwIiwiZ2V0SG9sZGVyIiwiaG9sZGVyc0NvdW50IiwiY291bnRIb2xkZXJzIiwibmV3SG9sZGVycyIsImNyZWF0ZVJlY3VycnkiLCJmbiIsImFyckxlbmd0aCIsIm9sZEFycmF5IiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJkZWZhdWx0VmFsdWUiLCJjcmVhdGVPdmVyIiwiYXJyYXlGdW5jIiwiY3JlYXRlUGFkZGluZyIsImNoYXJzTGVuZ3RoIiwiY3JlYXRlUmFuZ2UiLCJzdGVwIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwicHJlY2lzaW9uIiwidG9JbnRlZ2VyIiwicGFpciIsIm5vb3AiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJpc0NvbWJvIiwibWVyZ2VEYXRhIiwiY3JlYXRlQ3VycnkiLCJjcmVhdGVQYXJ0aWFsIiwiY3JlYXRlQmluZCIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyVmFsdWUiLCJmbGF0dGVuIiwib3RoZXJGdW5jIiwiaXNLZXlhYmxlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwic2hvcnRPdXQiLCJkZXRhaWxzIiwiaW5zZXJ0V3JhcERldGFpbHMiLCJ1cGRhdGVXcmFwRGV0YWlscyIsImdldFdyYXBEZXRhaWxzIiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJxdW90ZSIsInN1YlN0cmluZyIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsImdyb3VwIiwidW56aXBXaXRoIiwid2l0aG91dCIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcFdpdGgiLCJjaGFpbiIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmRMYXN0IiwiZm9yRWFjaFJpZ2h0IiwiZ3JvdXBCeSIsImludm9rZU1hcCIsImtleUJ5IiwicGFydGl0aW9uIiwic29ydEJ5IiwiYmVmb3JlIiwiYmluZEtleSIsImRlYm91bmNlIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRpbWVyRXhwaXJlZCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImNhbmNlbCIsImZsdXNoIiwiZGVmZXIiLCJkZWxheSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiaXNFcnJvciIsImlzSW50ZWdlciIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJ0b0FycmF5IiwibmV4dCIsIml0ZXJhdG9yVG9BcnJheSIsInJlbWFpbmRlciIsInRvTGVuZ3RoIiwiaXNCaW5hcnkiLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJhdCIsInByb3BzSW5kZXgiLCJwcm9wc0xlbmd0aCIsImRlZmF1bHRzRGVlcCIsIm1lcmdlV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlIiwibWVyZ2UiLCJvbWl0IiwiYmFzZVBpY2siLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsInRvTG93ZXJDYXNlIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwidG9VcHBlckNhc2UiLCJwYXR0ZXJuIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2QiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInJvdW5kIiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJhZnRlciIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmNhdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJmaWxsIiwiYmFzZUZpbGwiLCJmbGF0TWFwIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmcm9tUGFpcnMiLCJmdW5jdGlvbnMiLCJmdW5jdGlvbnNJbiIsImluaXRpYWwiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlcyIsIm1hdGNoZXNQcm9wZXJ0eSIsIm50aEFyZyIsIm9taXRCeSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZWplY3QiLCJyZW1vdmUiLCJyZXN0Iiwic2FtcGxlU2l6ZSIsInNldFdpdGgiLCJzaHVmZmxlIiwic29ydGVkVW5pcSIsInNvcnRlZFVuaXFCeSIsInNlcGFyYXRvciIsImxpbWl0Iiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGUiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3cmFwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZCIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJwb3NpdGlvbiIsImVzY2FwZVJlZ0V4cCIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYU4iLCJpc05hdGl2ZSIsImlzTmlsIiwiaXNTYWZlSW50ZWdlciIsImlzVW5kZWZpbmVkIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0Iiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZSIsInJlZHVjZVJpZ2h0IiwicmVwZWF0Iiwic2FtcGxlIiwic29tZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJyZURlbGltaXRlcnMiLCJzb3VyY2VVUkwiLCJlc2NhcGVWYWx1ZSIsImludGVycG9sYXRlVmFsdWUiLCJlc1RlbXBsYXRlVmFsdWUiLCJldmFsdWF0ZVZhbHVlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJuZXdFbmQiLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwicHJlZml4IiwiZWFjaCIsImVhY2hSaWdodCIsImZpcnN0IiwiVkVSU0lPTiIsImlzRmlsdGVyIiwidGFrZU5hbWUiLCJkcm9wTmFtZSIsImNoZWNrSXRlcmF0ZWUiLCJpc1Rha2VyIiwibG9kYXNoRnVuYyIsInJldFVud3JhcHBlZCIsImlzTGF6eSIsInVzZUxhenkiLCJpc0h5YnJpZCIsImlzVW53cmFwcGVkIiwib25seUxhenkiLCJjaGFpbk5hbWUiLCJkaXIiLCJpc1JpZ2h0IiwidmlldyIsImdldFZpZXciLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwiaXRlckluZGV4IiwiY29tbWl0Iiwid3JhcHBlZCIsInRvSlNPTiIsIlNpbXVsYXRpb24iLCJhbGVydHNPZmYiLCJfZXZlbnRzT2NjdXJyZWQiLCJ1bmRlZmluZWRfYmVoYXZpb3IiLCJ1bnNwZWNpZmllZF9iZWhhdmlvciIsImltcGxlbWVudGF0aW9uX2RlZmluZWRfYmVoYXZpb3IiLCJtZW1vcnlfbGVhayIsImFzc2VydGlvbl9mYWlsdXJlIiwiY3Jhc2giLCJldmVudHNPY2N1cnJlZCIsImlzUGF1c2VkIiwiZXhlY1N0YWNrIiwiX2V4ZWNTdGFjayIsInBlbmRpbmdOZXdzIiwibGVha0NoZWNrSW5kZXgiLCJhdEVuZCIsImFsbG9jYXRlU3RyaW5nTGl0ZXJhbHMiLCJjYWxsTWFpbiIsImdsb2JhbE9iamVjdEFsbG9jYXRvciIsIm1haW5SZXR1cm5PYmplY3QiLCJtYWluRnVuY3Rpb24iLCJydW50aW1lQ29uc3RydWN0IiwidHVzIiwidHJhbnNsYXRpb25Vbml0cyIsInR1TmFtZSIsInN0cmluZ0xpdGVyYWxzIiwibGl0IiwiX3N0ZXBGb3J3YXJkIiwiaW5zdCIsInN0ZXBUb0VuZCIsImNvdXQiLCJjb25zb2xlIiwibG9nIiwiZXZlbnQiLCJzaG93QWxlcnQiLCJhbGVydCIsImhhc0V2ZW50T2NjdXJyZWQiLCJTeW50YXhFcnJvciIsImV4cGVjdGVkIiwiZm91bmQiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImJ1aWxkTWVzc2FnZSIsImhleCIsImNoIiwibGl0ZXJhbEVzY2FwZSIsImNsYXNzRXNjYXBlIiwiZGVzY3JpYmVFeHBlY3RhdGlvbiIsImV4cGVjdGF0aW9uIiwiZXNjYXBlZFBhcnRzIiwicGFydHMiLCJwYXJ0IiwiaW52ZXJ0ZWQiLCJleHBlY3RlZDEiLCJkZXNjcmlwdGlvbnMiLCJkZXNjcmliZUV4cGVjdGVkIiwiZm91bmQxIiwiZGVzY3JpYmVGb3VuZCIsInBhcnNlIiwicGVnJHJlc3VsdCIsInBlZyRGQUlMRUQiLCJwZWckc3RhcnRSdWxlRnVuY3Rpb25zIiwicGVnJHBhcnNlc3RhcnQiLCJwZWckc3RhcnRSdWxlRnVuY3Rpb24iLCJwZWckYzAiLCJwZWckYzEiLCJkZWNscyIsInBlZyRjMiIsInBlZyRjMyIsInBlZyRjNCIsInBlZyRsaXRlcmFsRXhwZWN0YXRpb24iLCJwZWckYzUiLCJwZWckYzYiLCJwZWckY2xhc3NFeHBlY3RhdGlvbiIsInBlZyRjNyIsInBlZyRjOCIsInBlZyRjOSIsInBlZyRjMTAiLCJwZWckYzExIiwicGVnJGMxMiIsInBlZyRjMTMiLCJwZWckYzE0IiwidHJhY2siLCJwZWckYzE1IiwiYWJzb3JiIiwicGVnJGMxNiIsInBlZyRjMTciLCJwZWckYzE4IiwibGFiZWwiLCJwZWckYzE5IiwicGVnJGMyMCIsInBlZyRjMjEiLCJjYXNlIiwicGVnJGMyMiIsInBlZyRjMjMiLCJwZWckYzI0IiwicGVnJGMyNSIsInBlZyRjMjYiLCJwZWckYzI3IiwicGVnJGMyOCIsInBlZyRjMjkiLCJwZWckYzMwIiwicGVnJGMzMSIsInBlZyRjMzIiLCJwZWckYzMzIiwicGVnJGMzNCIsInN0bXRzIiwicGVnJGMzNSIsInBlZyRjMzYiLCJwZWckYzM3IiwicGVnJGMzOCIsInBlZyRjMzkiLCJwZWckYzQwIiwicGVnJGM0MSIsInBlZyRjNDIiLCJwZWckYzQzIiwicGVnJGM0NCIsInBlZyRjNDUiLCJwZWckYzQ2IiwicGVnJGM0NyIsInBlZyRjNDgiLCJwZWckYzQ5IiwicGVnJGM1MCIsInBlZyRjNTEiLCJwZWckYzUyIiwicGVnJGM1MyIsInBvc3QiLCJwZWckYzU0IiwicGVnJGM1NSIsInBlZyRjNTYiLCJwZWckYzU3IiwicGVnJGM1OCIsInBlZyRjNTkiLCJwZWckYzYwIiwicGVnJGM2MSIsInBlZyRjNjIiLCJwZWckYzYzIiwicmV0IiwicGVnJGM2NCIsInBlZyRjNjUiLCJwZWckYzY2IiwicGVnJGM2NyIsInBlZyRjNjgiLCJwZWckYzY5IiwidW5zaGlmdCIsInBlZyRjNzAiLCJwZWckYzcxIiwicGVnJGM3MiIsInBlZyRjNzMiLCJwZWckYzc0IiwicGVnJGM3NSIsInBlZyRjNzYiLCJwZWckYzc3IiwicGVnJGM3OCIsInBlZyRjNzkiLCJwZWckYzgwIiwicGVnJGM4MSIsInBlZyRjODIiLCJwZWckYzgzIiwibWVtYmVyIiwicGVnJGM4NCIsInBlZyRjODUiLCJwZWckYzg2IiwiZGVjbFNwZWNzIiwiaW5saW5lIiwiZXhwbGljaXQiLCJwZWckYzg3IiwicGVnJGM4OCIsInBlZyRjODkiLCJwZWckYzkwIiwicGVnJGM5MSIsInBlZyRjOTIiLCJwZWckYzkzIiwicGVnJGM5NCIsInBlZyRjOTUiLCJwZWckYzk2IiwicGVnJGM5NyIsInBlZyRjOTgiLCJwZWckYzk5IiwicGVnJGMxMDAiLCJwZWckYzEwMSIsInBlZyRjMTAyIiwicGVnJGMxMDMiLCJwZWckYzEwNCIsInBlZyRjMTA1IiwicGVnJGMxMDYiLCJwZWckYzEwNyIsInBlZyRjMTA4IiwicGVnJGMxMDkiLCJwZWckYzExMCIsInBlZyRjMTExIiwicGVnJGMxMTIiLCJwZWckb3RoZXJFeHBlY3RhdGlvbiIsInBlZyRjMTEzIiwicGVnJGMxMTQiLCJwZWckYzExNSIsInBlZyRjMTE2IiwicGVnJGMxMTciLCJwZWckYzExOCIsInBlZyRjMTE5IiwicGVnJGMxMjAiLCJwZWckYzEyMSIsInBlZyRjMTIyIiwicGVnJGMxMjMiLCJwZWckYzEyNCIsInBlZyRjMTI1IiwicGVnJGMxMjYiLCJwZWckYzEyNyIsInBlZyRjMTI4IiwicGVnJGMxMjkiLCJwZWckYzEzMCIsInBlZyRjMTMxIiwicGVnJGMxMzIiLCJwZWckYzEzMyIsInBlZyRjMTM0IiwiZ2V0VXNlclR5cGVOYW1lcyIsImlzVXNlclR5cGVOYW1lIiwicGVnJGMxMzUiLCJwZWckYzEzNiIsInBlZyRjMTM3IiwicGVnJGMxMzgiLCJwZWckYzEzOSIsInBlZyRjMTQwIiwicGVnJGMxNDEiLCJwZWckYzE0MiIsInBlZyRjMTQzIiwicGVnJGMxNDQiLCJwZWckYzE0NSIsInBlZyRjMTQ2IiwicGVnJGMxNDciLCJwZWckYzE0OCIsInBlZyRjMTQ5IiwicGVnJGMxNTAiLCJwZWckYzE1MSIsInBlZyRjMTUyIiwicGVnJGMxNTMiLCJwZWckYzE1NCIsImFic3RyYWN0IiwicGVnJGMxNTUiLCJwZWckYzE1NiIsInBlZyRjMTU3IiwiY3YiLCJwZWckYzE1OCIsInBlZyRjMTU5IiwicGVnJGMxNjAiLCJwZWckYzE2MSIsInBlZyRjMTYyIiwicGVnJGMxNjMiLCJwZWckYzE2NCIsInBlZyRjMTY1IiwicGVnJGMxNjYiLCJwZWckYzE2NyIsInBlZyRjMTY4IiwicGVnJGMxNjkiLCJwZWckYzE3MCIsInBlZyRjMTcxIiwicGVnJGMxNzIiLCJwZWckYzE3MyIsInBlZyRjMTc0IiwicGVnJGMxNzUiLCJwZWckYzE3NiIsInBlZyRjMTc3IiwicGVnJGMxNzgiLCJwZWckYzE3OSIsInBlZyRjMTgwIiwicGVnJGMxODEiLCJwZWckYzE4MiIsInBlZyRjMTgzIiwiY29tcG9zZUJpbmFyeU9wIiwicGVnJGMxODQiLCJwZWckYzE4NSIsInBlZyRjMTg2IiwicGVnJGMxODciLCJwZWckYzE4OCIsInBlZyRjMTg5IiwicGVnJGMxOTAiLCJwZWckYzE5MSIsInBlZyRjMTkyIiwicGVnJGMxOTMiLCJwZWckYzE5NCIsInBlZyRjMTk1IiwicGVnJGMxOTYiLCJwZWckYzE5NyIsInBlZyRjMTk4IiwicGVnJGMxOTkiLCJwZWckYzIwMCIsInBlZyRjMjAxIiwicGVnJGMyMDIiLCJwZWckYzIwMyIsInBlZyRjMjA0IiwicGVnJGMyMDUiLCJwZWckYzIwNiIsInBlZyRjMjA3IiwicGVnJGMyMDgiLCJwZWckYzIwOSIsInBlZyRjMjEwIiwicGVnJGMyMTEiLCJwZWckYzIxMiIsInBlZyRjMjEzIiwicGVnJGMyMTQiLCJwZWckYzIxNSIsInBlZyRjMjE2IiwicGVnJGMyMTciLCJwZWckYzIxOCIsInBlZyRjMjE5IiwicGVnJGMyMjAiLCJwZWckYzIyMSIsInBlZyRjMjIyIiwicGVnJGMyMjMiLCJwZWckYzIyNCIsInBlZyRjMjI1IiwicGVnJGMyMjYiLCJwZWckYzIyNyIsInBlZyRjMjI4IiwicGVnJGMyMjkiLCJwZWckYzIzMCIsInBlZyRjMjMxIiwicGVnJGMyMzIiLCJwZWckYzIzMyIsInBlZyRjMjM0IiwicGVnJGMyMzUiLCJwZWckYzIzNiIsInBlZyRjMjM3IiwicGVnJGMyMzgiLCJwZWckYzIzOSIsInBlZyRjMjQwIiwicGVnJGMyNDEiLCJwZWckYzI0MiIsInBlZyRjMjQzIiwicGVnJGMyNDQiLCJwZWckYzI0NSIsInBlZyRjMjQ2IiwicGVnJGMyNDciLCJwZWckYzI0OCIsInBlZyRjMjQ5IiwicGVnJGMyNTAiLCJwZWckYzI1MSIsInBlZyRjMjUyIiwicGVnJGMyNTMiLCJwZWckYzI1NCIsInBlZyRjMjU1IiwicGVnJGMyNTYiLCJwZWckYzI1NyIsInBlZyRjMjU4IiwicGVnJGMyNTkiLCJwZWckYzI2MCIsInBlZyRjMjYxIiwicGVnJGMyNjIiLCJwZWckYzI2MyIsInBlZyRjMjY0IiwicGVnJGMyNjUiLCJwZWckYzI2NiIsInBlZyRjMjY3IiwicGVnJGMyNjgiLCJwZWckYzI2OSIsInBlZyRjMjcwIiwicGVnJGMyNzEiLCJwZWckYzI3MiIsInBlZyRjMjczIiwicGVnJGMyNzQiLCJwZWckYzI3NSIsInBlZyRjMjc2IiwicGVnJGMyNzciLCJwZWckYzI3OCIsInBlZyRjMjc5IiwicGVnJGMyODAiLCJwZWckYzI4MSIsInBlZyRjMjgyIiwicGVnJGMyODMiLCJwZWckYzI4NCIsInBlZyRjMjg1IiwicGVnJGMyODYiLCJwZWckYzI4NyIsInBlZyRjMjg4IiwicGVnJGMyODkiLCJwZWckYzI5MCIsInBlZyRjMjkxIiwicGVnJGMyOTIiLCJwZWckYzI5MyIsInBlZyRjMjk0IiwicGVnJGMyOTUiLCJwZWckYzI5NiIsInBlZyRjMjk3IiwicGVnJGMyOTgiLCJwZWckYzI5OSIsInBlZyRjMzAwIiwicGVnJGMzMDEiLCJwZWckYzMwMiIsInBlZyRjMzAzIiwicGVnJGMzMDQiLCJwZWckYzMwNSIsInBlZyRjMzA2IiwicGVnJGMzMDciLCJwZWckYzMwOCIsInBlZyRjMzA5IiwicGVnJGMzMTAiLCJwZWckYzMxMSIsInBlZyRjMzEyIiwicGVnJGMzMTMiLCJwZWckYzMxNCIsInBlZyRjMzE1IiwicGVnJGMzMTYiLCJwZWckYzMxNyIsInBlZyRjMzE4IiwicGVnJGMzMTkiLCJwZWckYzMyMCIsInBlZyRjMzIxIiwicGVnJGMzMjIiLCJwZWckYzMyMyIsInBlZyRjMzI0IiwicGVnJGMzMjUiLCJwZWckYzMyNiIsInBlZyRjMzI3IiwicGVnJGMzMjgiLCJwZWckYzMyOSIsIm9wcyIsInBvc3RmaXhFeHAiLCJwZWckYzMzMCIsInBlZyRjMzMxIiwicGVnJGMzMzIiLCJwZWckYzMzMyIsInBlZyRjMzM0IiwicGVnJGMzMzUiLCJwZWckYzMzNiIsInBlZyRjMzM3IiwicGVnJGMzMzgiLCJwZWckYzMzOSIsInBlZyRjMzQwIiwicGVnJGMzNDEiLCJwZWckYzM0MiIsInBlZyRjMzQzIiwicGVnJGMzNDQiLCJwZWckYzM0NSIsInBlZyRjMzQ2IiwicGVnJGMzNDciLCJ1IiwicGVnJGMzNDgiLCJwZWckYzM0OSIsInBlZyRjMzUwIiwicGVnJGMzNTEiLCJwZWckYzM1MiIsInBlZyRjMzUzIiwicGVnJGMzNTQiLCJwZWckYzM1NSIsInBlZyRjMzU2IiwicGVnJGMzNTciLCJwZWckYzM1OCIsInBlZyRjMzU5IiwicGVnJGMzNjAiLCJwZWckYzM2MSIsInBlZyRjMzYyIiwicGVnJGMzNjMiLCJwZWckYzM2NiIsInBlZyRjMzY3IiwicGVnJGMzNjgiLCJwZWckYzM2OSIsInBlZyRjMzcwIiwicGVnJGMzNzEiLCJwZWckYzM3MiIsInBlZyRjMzczIiwibmVnIiwiZGlnaXRzIiwicGVnJGMzNzQiLCJwZWckYzM3NSIsInBlZyRjMzc2IiwicGVnJGMzNzciLCJwZWckYzM3OCIsInBlZyRjMzc5IiwicGVnJGMzODAiLCJwZWckYzM4MSIsInBlZyRjMzgyIiwicGVnJGMzODMiLCJwZWckYzM4NCIsInBlZyRjMzg1IiwicGVnJGMzODYiLCJwZWckYzM4NyIsInBlZyRjMzg4IiwicGVnJGMzODkiLCJwZWckYzM5MCIsInBlZyRjMzkxIiwicGVnJGMzOTIiLCJwZWckYzM5MyIsInBlZyRjMzk0IiwicGVnJGMzOTUiLCJwZWckYzM5NiIsInBlZyRjMzk3IiwicGVnJGMzOTgiLCJwZWckYzM5OSIsInBlZyRjNDAwIiwicGVnJGM0MDEiLCJwZWckYzQwMiIsInBlZyRjNDAzIiwicGVnJGM0MDQiLCJwZWckYzQwNSIsInBlZyRjNDA2IiwicGVnJGM0MDciLCJwZWckYzQwOCIsInBlZyRjNDA5IiwicGVnJGM0MTAiLCJwZWckYzQxMSIsInBlZyRjNDEyIiwicGVnJGM0MTMiLCJwZWckYzQxNCIsInBlZyRjNDE1IiwicGVnJGM0MTYiLCJwZWckYzQxNyIsInBlZyRjNDE4IiwicGVnJGM0MTkiLCJwZWckYzQyMCIsInBlZyRjNDIxIiwicGVnJGM0MjIiLCJwZWckYzQyMyIsInBlZyRjNDI0IiwicGVnJGM0MjUiLCJwZWckYzQyNiIsInBlZyRjNDI3IiwicGVnJGM0MjgiLCJwZWckYzQyOSIsInBlZyRjNDMwIiwicGVnJGM0MzEiLCJtZW1zIiwibWVtYmVyX3NwZWNzIiwicGVnJGM0MzIiLCJwZWckYzQzMyIsImJhc2VzIiwicGVnJGM0MzQiLCJwZWckYzQzNSIsInBlZyRjNDM2IiwicGVnJGM0MzciLCJwZWckYzQzOCIsInBlZyRjNDM5IiwicGVnJGM0NDAiLCJwZWckYzQ0MSIsIm1lbWJlcnMiLCJwZWckYzQ0MiIsImFjY2VzcyIsInBlZyRjNDQzIiwicGVnJGM0NDQiLCJwZWckYzQ0NSIsInBlZyRjNDQ2IiwicGVnJGM0NDciLCJwZWckYzQ0OCIsInBlZyRjNDQ5IiwicGVnJGM0NTAiLCJwZWckYzQ1MSIsInBlZyRjNDUyIiwicGVnJGM0NTMiLCJmIiwicGVnJGM0NTQiLCJwZWckYzQ1NSIsInBlZyRjNDU2IiwicGVnJGM0NTciLCJwZWckYzQ1OCIsInBlZyRjNDU5IiwicGVnJGM0NjAiLCJwZWckYzQ2MSIsInBlZyRjNDYyIiwicGVnJGM0NjMiLCJwZWckYzQ2NCIsInBlZyRjNDY1IiwicGVnJGN1cnJQb3MiLCJwZWckc2F2ZWRQb3MiLCJwZWckcG9zRGV0YWlsc0NhY2hlIiwicGVnJG1heEZhaWxQb3MiLCJwZWckbWF4RmFpbEV4cGVjdGVkIiwicGVnJHNpbGVudEZhaWxzIiwic3RhcnRSdWxlIiwicGVnJGNvbXB1dGVMb2NhdGlvbiIsInRleHQxIiwiaWdub3JlQ2FzZSIsInBlZyRjb21wdXRlUG9zRGV0YWlscyIsInBvcyIsInN0YXJ0UG9zIiwiZW5kUG9zIiwic3RhcnRQb3NEZXRhaWxzIiwiZW5kUG9zRGV0YWlscyIsInBlZyRmYWlsIiwicGVnJGJ1aWxkU3RydWN0dXJlZEVycm9yIiwibG9jYXRpb24xIiwiczAiLCJzMiIsInMzIiwiczQiLCJwZWckcGFyc2V3cyIsInBlZyRwYXJzZWRlY2xfb3JfY29tbWVudCIsInMxIiwicGVnJHBhcnNlY29tbWVudCIsInBlZyRwYXJzZWRlY2xhcmF0aW9uIiwiczUiLCJzdWJzdHIiLCJwZWckcGFyc2VzdGF0ZW1lbnQiLCJzNyIsInBlZyRwYXJzZWlkZW50aWZpZXIiLCJwZWckcGFyc2VXUyIsInBlZyRwYXJzZWV4cF9jb25zdCIsInBlZyRwYXJzZWxhYmVsZWRfc3RhdGVtZW50IiwicGVnJHBhcnNlYmxvY2siLCJzOSIsInMxMSIsInMxMyIsInBlZyRwYXJzZWV4cHJlc3Npb24iLCJwZWckcGFyc2VzZWxlY3Rpb25fc3RhdGVtZW50IiwiczYiLCJzOCIsInMxMCIsInMxMiIsInMxNCIsInMxNSIsInBlZyRwYXJzZWlkZW50aWZpZXJDaGFyIiwicGVnJHBhcnNlZXhwcmVzc2lvbl9zdGF0ZW1lbnQiLCJwZWckcGFyc2VudWxsX3N0YXRlbWVudCIsInBlZyRwYXJzZWRlY2xhcmF0aW9uX3N0YXRlbWVudCIsInBlZyRwYXJzZWZvcl9pbml0X3N0YXRlbWVudCIsInBlZyRwYXJzZWl0ZXJhdGlvbl9zdGF0ZW1lbnQiLCJwZWckcGFyc2VqdW1wX3N0YXRlbWVudCIsInBlZyRwYXJzZXN0YXRlbWVudF90cmFja2VkIiwicGVnJHBhcnNlZGVjbF9zcGVjaWZpZXJzIiwicGVnJHBhcnNlZGVjbGFyYXRvcl9pbml0IiwicGVnJHBhcnNlZGVjbGFyYXRvcl9saXN0IiwicGVnJHBhcnNlc2ltcGxlX2RlY2xhcmF0aW9uIiwicGVnJHBhcnNlY2xhc3Nfa2V5IiwicGVnJHBhcnNlYmFzZV9zcGVjaWZpZXIiLCJwZWckcGFyc2ViYXNlX3NwZWNpZmllcl9saXN0IiwicGVnJHBhcnNlYmFzZV9jbGF1c2UiLCJwZWckcGFyc2VjbGFzc19oZWFkIiwicGVnJHBhcnNlbWVtYmVyX3NwZWNpZmljYXRpb24iLCJwZWckcGFyc2VjbGFzc19zcGVjaWZpZXIiLCJwZWckcGFyc2VjbGFzc19kZWNsYXJhdGlvbiIsInBlZyRwYXJzZWZ1bmN0aW9uX2RlZmluaXRpb24iLCJwZWckcGFyc2VkZWNsYXJhdG9yIiwicGVnJHBhcnNlY29uc3RydWN0b3JfZGVmaW5pdGlvbiIsInBlZyRwYXJzZWFyZ3VtZW50X2RlY2xhcmF0aW9uX2xpc3QiLCJwZWckcGFyc2VtZW1faW5pdGlhbGl6ZXIiLCJwZWckcGFyc2VjdG9yX2luaXRpYWxpemVyIiwicGVnJHBhcnNlZXhwX2xpc3QiLCJwZWckcGFyc2VkZWNsX3NwZWNpZmllciIsInBlZyRwYXJzZXNpbXBsZV90eXBlX25hbWUiLCJwZWckcGFyc2V0eXBlX3NwZWNpZmllciIsInBlZyRwYXJzZXN0b3JhZ2VfY2xhc3Nfc3BlY2lmaWVyIiwicGVnJHBhcnNlZnVuY3Rpb25fc3BlY2lmaWVyIiwicGVnJHBhcnNldHlwZV9zcGVjaWZpZXJzIiwicGVnJHBhcnNlZW51bWVyYXRvciIsInBlZyRwYXJzZWVudW1fc3BlY2lmaWVyIiwicGVnJHBhcnNlX3NpbXBsZV90eXBlX25hbWUiLCJwZWckcGFyc2VicmFjZV9vcl9lcXVhbF9pbml0aWFsaXplciIsInBlZyRwYXJzZWluaXRpYWxpemVyIiwicGVnJHBhcnNlZXhwX2Fzc24iLCJwZWckcGFyc2Vpbml0aWFsaXplcl9saXN0IiwicGVnJHBhcnNlX2RlY2xhcmF0b3IiLCJwZWckcGFyc2VhYnN0cmFjdF9kZWNsYXJhdG9yIiwicGVnJHBhcnNlX2Fic19kZWNsYXJhdG9yIiwicGVnJHBhcnNlY3ZfcXVhbGlmaWVyIiwicGVnJHBhcnNlZGVjbGFyYXRvcl9zaW1wbGUiLCJwZWckcGFyc2VkZWNsYXJhdG9yX3Bvc3RmaXhlcyIsInBlZyRwYXJzZWFic19kZWNsYXJhdG9yX3NpbXBsZSIsInBlZyRwYXJzZWRlY2xhcmF0b3JfcG9zdGZpeCIsInBlZyRwYXJzZW5hbWUiLCJwZWckcGFyc2V0eXBlX2lkIiwicGVnJHBhcnNlYXJndW1lbnRfZGVjbGFyYXRpb24iLCJwZWckcGFyc2VleHBfdW5hcnkiLCJwZWckcGFyc2VvcF9jb21wX2Fzc24iLCJwZWckcGFyc2VleHBfY29uZCIsInBlZyRwYXJzZWV4cF9vciIsInBlZyRwYXJzZWV4cF9hbmQiLCJwZWckcGFyc2VleHBfb3JfYml0IiwicGVnJHBhcnNlZXhwX3hvcl9iaXQiLCJwZWckcGFyc2VleHBfYW5kX2JpdCIsInBlZyRwYXJzZWV4cF9lcSIsInBlZyRwYXJzZWV4cF9yZWwiLCJwZWckcGFyc2VleHBfc2hpZnQiLCJwZWckcGFyc2VvcF9yZWwiLCJwZWckcGFyc2VleHBfYWRkIiwicGVnJHBhcnNlb3Bfc2hpZnQiLCJwZWckcGFyc2VleHBfbXVsdCIsInBlZyRwYXJzZW9wX2FkZCIsInBlZyRwYXJzZWV4cF9wbSIsInBlZyRwYXJzZW9wX211bHQiLCJwZWckcGFyc2VleHBfY2FzdCIsInBlZyRwYXJzZW9wX3BtIiwicGVnJHBhcnNlb3BfdW5hcnkiLCJwZWckcGFyc2VfbmV3X2RlY2xhcmF0b3IiLCJwZWckcGFyc2VuZXdfZGVjbGFyYXRvcl9wb3N0Zml4IiwicGVnJHBhcnNlbmV3X2RlY2xhcmF0b3JfcG9zdGZpeGVzIiwicGVnJHBhcnNlbmV3X2RlY2xhcmF0b3IiLCJwZWckcGFyc2VuZXdfdHlwZV9pZCIsInBlZyRwYXJzZW5ld19pbml0aWFsaXplciIsInBlZyRwYXJzZWV4cF9uZXciLCJwZWckcGFyc2VleHBfY29uc3RydWN0IiwicGVnJHBhcnNlbGl0ZXJhbF9mbG9hdCIsInBlZyRwYXJzZWxpdGVyYWxfaW50IiwicGVnJHBhcnNlZXNjYXBlIiwicGVnJHBhcnNlbGl0ZXJhbF9jaGFyIiwicGVnJHBhcnNlbGl0ZXJhbF9zdHJpbmciLCJwZWckcGFyc2VsaXRlcmFsX2Jvb2xlYW4iLCJwZWckcGFyc2VsaXRlcmFsIiwicGVnJHBhcnNlbmVzdGVkX25hbWVfc3BlY2lmaWVyIiwicGVnJHBhcnNlcXVhbGlmaWVkX2lkIiwicGVnJHBhcnNlZXhwX2lkIiwicGVnJHBhcnNlZXhwX3ByaW1hcnkiLCJwZWckcGFyc2VvcF9wb3N0Zml4IiwicGVnJHBhcnNlZXhwX3Bvc3RmaXgiLCJwZWckcGFyc2VleHBfZGVsZXRlIiwicGVnJHBhcnNldHlwZV9uYW1lX2lkIiwicGVnJHBhcnNlb3ZlcmxvYWRhYmxlX29wIiwicGVnJHBhcnNlb3BlcmF0b3JfZnVuY3Rpb25faWQiLCJwZWckcGFyc2VzaW1wbGVfZXNjYXBlIiwicGVnJHBhcnNlb2N0YWxfZXNjYXBlIiwicGVnJHBhcnNlaWRlbnRpZmllckZpcnN0Q2hhciIsInBlZyRwYXJzZW1lbWJlcl9kZWNsYXJhdGlvbiIsInBlZyRwYXJzZWFjY2Vzc19zcGVjaWZpZXIiLCJwZWckcGFyc2VtZW1iZXJfZGVjbGFyYXRvciIsInBlZyRwYXJzZW1lbWJlcl9kZWNsYXJhdG9yX2xpc3QiLCJwZWckcGFyc2VkZXN0cnVjdG9yX2RlZmluaXRpb24iLCJwZWckcGFyc2VxdWFsaWZpZWRfY2xhc3NfbmFtZSIsImFzc29jIiwiZXhwclR5cGUiLCJhc3NvY2lhdGl2aXR5Iiwic2hpZnQiLCJlYXRlciIsImVhdGVuIiwiYXR0ciIsIl91c2VyVHlwZU5hbWVzIiwiY3BwX3BhcnNlcl8xIiwiTm90ZVJlY29yZGVyIiwiX2FsbE5vdGVzIiwiYWxsTm90ZXMiLCJoYXNTeW50YXhFcnJvcnMiLCJoYXNXYXJuaW5ncyIsImFkZE5vdGVzIiwiX3RoaXNfMSIsImNsZWFyTm90ZXMiLCJQcm9ncmFtIiwic291cmNlRmlsZXMiLCJpc0NvbXBpbGF0aW9uVXBUb0RhdGUiLCJmdW5jdGlvbkNhbGxzIiwiZGVmaW5pdGlvbnMiLCJsaW5rZWRFbnRpdGllcyIsImZpbGUiLCJUcmFuc2xhdGlvblVuaXQiLCJQcmVwcm9jZXNzZWRTb3VyY2UiLCJ0dSIsImRlZmluZUludHJpbnNpY3MiLCJsZSIsInByZXZEZWYiLCJTb3VyY2VGaWxlIiwiU291cmNlUmVmZXJlbmNlIiwic291cmNlRmlsZSIsIl9pbmNsdWRlcyIsImNyZWF0ZUluY2x1ZGVkIiwibGluZUluY2x1ZGVkIiwib3JpZ2luYWxSZWZlcmVuY2UiLCJpbmMiLCJhdmFpbGFibGVUb0luY2x1ZGUiLCJhbHJlYWR5SW5jbHVkZWQiLCJpbmNsdWRlZFNvdXJjZUZpbGVzIiwicHJpbWFyeVNvdXJjZUZpbGUiLCJjb2RlU3RyIiwiZmlsdGVyU291cmNlQ29kZSIsImN1cnJlbnRJbmNsdWRlT2Zmc2V0IiwiY3VycmVudEluY2x1ZGVMaW5lTnVtYmVyIiwib3JpZ2luYWxJbmNsdWRlTGluZU51bWJlciIsInByZXByb2Nlc3NlZFRleHQiLCJpbmNsdWRlTGluZSIsImZpbGVuYW1lIiwib3JpZ2luYWwiLCJtYXBwaW5nIiwiaV8xIiwic3RhcnRMaW5lIiwic3RhcnRPZmZzZXQiLCJpbmNsdWRlZCIsIm51bUxpbmVzIiwiZW5kTGluZSIsImxpbmVEZWx0YSIsImxlbmd0aERlbHRhIiwibGluZU9mZnNldCIsInByZXByb2Nlc3NlZFNvdXJjZSIsInRvcExldmVsRGVjbGFyYXRpb25zIiwic3RhdGljRW50aXRpZXMiLCJnbG9iYWxTY29wZSIsInBhcnNlZEFTVCIsImNyZWF0ZUJ1aWx0SW5HbG9iYWxzIiwiY29tcGlsZVRvcExldmVsRGVjbGFyYXRpb25zIiwiZXJyIiwiZGVjbHNPckZ1bmNEZWYiLCJhZGRTdHJpbmdMaXRlcmFsIiwibGl0ZXJhbCIsImdldE5lYXJlc3RTb3VyY2VSZWZlcmVuY2VGb3JDb25zdHJ1Y3QiLCJQcm9ncmFtXzEiLCJmaWxlMSJdLCJtYXBwaW5ncyI6InVCQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFB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SUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLEtBQUFDLElBQUEsS0FDQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ0FDLElBQUEsS0FFQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJ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eWpHLEVBQUsrQyxzQkFBc0I3K0YsS0FBS28vRixNQUsvQzdDLEVBQUF0a0csVUFBQW9uRyxpQkFBUCxTQUF3QkMsR0FDcEJqbEcsRUFBQWhDLFVBQVVzQixLQUFLbzJFLGdCQUFnQi92RSxLQUFLcy9GLElBR2pDL0MsRUFBQXRrRyxVQUFBK29CLHFCQUFQLFNBQTRCeHFCLEdBQ3hCNkQsRUFBQWhDLFVBQVVzQixLQUFLd2lHLGVBQWVuOEYsS0FBS3hKLElBR2hDK2xHLEVBQUF0a0csVUFBQXNuRyxzQ0FBUCxTQUE2QzF3RixHQUN6QyxNQUFRQSxFQUFVZCxLQUFPYyxFQUFVM0osUUFDL0IySixFQUFZQSxFQUFVM0osT0FFMUIsSUFBSzJKLEVBQVVkLElBQ1gsT0FBTzFULEVBQUExQixZQUFZLDZDQUV2QixJQUFJa2tDLEVBQU1odUIsRUFBVWQsSUFBSUMsT0FDeEIsT0FBT3JVLEtBQUt1VSxtQkFBbUIydUIsRUFBSTF1QixLQUFNMHVCLEVBQUl6dUIsT0FBUXl1QixFQUFJeHVCLE1BQU93dUIsRUFBSXZ1QixNQUdqRWl1RixFQUFBdGtHLFVBQUFpVyxtQkFBUCxTQUEwQkMsRUFBY0MsRUFBZ0JDLEVBQWVDLEdBQ25FLE9BQU8zVSxLQUFLcVUsT0FBT0UsbUJBQW1CQyxFQUFNQyxFQUFRQyxFQUFPQyxJQUVuRWl1RixFQWhKQSxHQUFhcG1HLEVBQUFvbUcsaUdDdm1CYixJQUFBaUQsRUFBQXZwRyxFQUFBLElBRUFvNkUsUUFBUUMsSUFBSSxTQUlaLElBQUltdkIsRUFBUSxJQUFJRCxFQUFBM0MsV0FBVyxXQUFZLDJCQUV2Q3hzQixRQUFRQyxJQUFJbXZCIiwiZmlsZSI6Im1haW4uYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDU2KTtcbiIsImltcG9ydCBhc3NpZ24gZnJvbSBcImxvZGFzaC9hc3NpZ25cIjtcclxuXHJcbmV4cG9ydCB0eXBlIE11dGFibGU8VD4gPSB7IC1yZWFkb25seSBbUCBpbiBrZXlvZiBUXTogVFtQXSB9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFzTXV0YWJsZTxUPihvYmo6IFQpIDogTXV0YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gPE11dGFibGU8VD4+b2JqO1xyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uOiBib29sZWFuLCBtZXNzYWdlOiBzdHJpbmcgPSBcIlwiKSB7XHJcbiAgICBpZiAoIWNvbmRpdGlvbilcclxuICAgICAgICB0aHJvdyBFcnJvcihcIkFzc2VydCBmYWlsZWQ6IFwiICsgbWVzc2FnZSk7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RmFsc2UobWVzc2FnZTogc3RyaW5nID0gXCJcIikgOiBuZXZlciB7XHJcbiAgICB0aHJvdyBFcnJvcihcIkFzc2VydCBmYWlsZWQ6IFwiICsgbWVzc2FnZSk7XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1ldGhvZE1peGluPFRhcmdldFR5cGUsIE1ldGhvZE5hbWUgZXh0ZW5kcyBrZXlvZiBUYXJnZXRUeXBlPihtaXg6IFRhcmdldFR5cGVbTWV0aG9kTmFtZV0pIHtcclxuICAgIHJldHVybiAodGFyZ2V0UHJvdG86IFRhcmdldFR5cGUsIG5hbWU6IE1ldGhvZE5hbWUpID0+IHtcclxuICAgICAgICB0YXJnZXRQcm90b1tuYW1lXSA9IG1peDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQ29uc3RydWN0b3I8VD4gPSBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBUO1xyXG5cclxuZXhwb3J0IHR5cGUgT3ZlcndyaXRlPFQxLCBUMj4gPSBQaWNrPFQxLCBFeGNsdWRlPGtleW9mIFQxLCBrZXlvZiBUMj4+ICYgVDI7XHJcblxyXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81MDEyNTg5My90eXBlc2NyaXB0LWRlcml2ZS1tYXAtZnJvbS1kaXNjcmltaW5hdGVkLXVuaW9uXHJcbmV4cG9ydCB0eXBlIERpc2NyaW1pbmF0ZVVuaW9uPFQsIEsgZXh0ZW5kcyBrZXlvZiBULCBWIGV4dGVuZHMgVFtLXT4gPSBcclxuICAgIFQgZXh0ZW5kcyBSZWNvcmQ8SywgVj4gPyBUIDogbmV2ZXI7XHJcbmV4cG9ydCB0eXBlIE1hcERpc2NyaW1pbmF0ZWRVbmlvbjxUIGV4dGVuZHMgUmVjb3JkPEssIHN0cmluZz4sIEsgZXh0ZW5kcyBrZXlvZiBUPiA9XHJcbiAgeyBbViBpbiBUW0tdXTogRGlzY3JpbWluYXRlVW5pb248VCwgSywgVj4gfTtcclxuXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBodG1sRGVjb3JhdGVkT3BlcmF0b3Iob3BlcmF0b3IsIGNzc0NsYXNzKXtcclxuLy8gICAgIHJldHVybiBcIjxzcGFuIGNsYXNzPSdjb2RlSW5zdGFuY2UgXCIgKyAoY3NzQ2xhc3MgfHwgXCJcIikgKyBcIic+XCIgKyBvcGVyYXRvciArIFwiPHNwYW4gY2xhc3M9J2hpZ2hsaWdodCc+PC9zcGFuPjwvc3Bhbj5cIjtcclxuLy8gfTtcclxuXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBodG1sRGVjb3JhdGVkS2V5d29yZChrZXl3b3JkKXtcclxuLy8gICAgIHJldHVybiAnPHNwYW4gY2xhc3M9XCJjb2RlLWtleXdvcmRcIj4nICsga2V5d29yZCArICc8L3NwYW4+JztcclxuLy8gfTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBodG1sRGVjb3JhdGVkVHlwZSh0eXBlU3RyaW5nOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiAnPHNwYW4gY2xhc3M9XCJjb2RlLXR5cGVcIj4nICsgdHlwZVN0cmluZyArICc8L3NwYW4+JztcclxufTtcclxuXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBodG1sRGVjb3JhdGVkTmFtZShuYW1lLCB0eXBlKXtcclxuLy8gICAgIHJldHVybiAnPHNwYW4gY2xhc3M9XCJjb2RlLW5hbWVcIj48c3BhbiBjbGFzcyA9IFwiaGlnaGxpZ2h0XCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwidHlwZVwiPicgKyB0eXBlLmVuZ2xpc2hTdHJpbmcoKSArICc8L3NwYW4+JyArIG5hbWUgKyAnPC9zcGFuPic7XHJcbi8vIH07XHJcblxyXG4vLyBleHBvcnQgZnVuY3Rpb24gaHRtbERlY29yYXRlZFZhbHVlKHZhbHVlKXtcclxuLy8gICAgIHJldHVybiAnPHNwYW4gY2xhc3M9XCJjb2RlLWxpdGVyYWxcIj4nICsgdmFsdWUgKyAnPC9zcGFuPic7XHJcbi8vIH07XHJcblxyXG5cclxudmFyIGVzY2FwZXMgPSBbXCJcXFxcXFxcIlwiLCBcIlxcXFwnXCIsIFwiXFxcXD9cIiwgXCJcXFxcXFxcXFwiLCBcIlxcXFxhXCIsIFwiXFxcXGJcIiwgXCJcXFxcZlwiLCBcIlxcXFxuXCIsIFwiXFxcXHJcIiwgXCJcXFxcdFwiLCBcIlxcXFx2XCIsIFwiXFxcXDBcIl07XHJcbnZhciBlc2NhcGVkID0gW1wiXFxcIlwiLCBcIlxcJ1wiLCBcIlwiLCBcIlxcXFxcIiwgXCJcIiwgXCJcXGJcIiwgXCJcXGZcIiwgXCJcXG5cIiwgXCJcXHJcIiwgXCJcXHRcIiwgXCJcXHZcIiwgXCJcXDBcIl07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlU3RyaW5nKHRleHQ6IHN0cmluZykge1xyXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGVzY2FwZXMubGVuZ3RoOyArK2kpe1xyXG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoZXNjYXBlc1tpXSwgZXNjYXBlZFtpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGV4dDtcclxufTtcclxuZXhwb3J0IGZ1bmN0aW9uIHVuZXNjYXBlU3RyaW5nKHRleHQ6IHN0cmluZyl7XHJcbiAgICB2YXIgbmV3U3RyID0gXCJcIjtcclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgKytpKXtcclxuICAgICAgICB2YXIgYyA9IHRleHRbaV07XHJcbiAgICAgICAgZm9yKHZhciBqID0gMDsgaiA8IGVzY2FwZWQubGVuZ3RoOyArK2ope1xyXG4gICAgICAgICAgICBpZiAoYyA9PT0gZXNjYXBlZFtqXSl7XHJcbiAgICAgICAgICAgICAgICBjID0gZXNjYXBlc1tqXTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5ld1N0ciArPSBjO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld1N0cjtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDUFBSYW5kb20ge1xyXG5cclxuICAgIHByaXZhdGUgc2VlZCA9IDA7XHJcblxyXG4gICAgcHVibGljIHNldFJhbmRvbVNlZWQobmV3U2VlZDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zZWVkID0gbmV3U2VlZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmFuZG9tKG1pbjogbnVtYmVyID0gMCwgbWF4OiBudW1iZXIgPSAxKSB7XHJcbiAgICAgICAgdGhpcy5zZWVkID0gKHRoaXMuc2VlZCAqIDkzMDEgKyA0OTI5NykgJSAyMzMyODA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VlZGVkUmFuZG9tKHRoaXMuc2VlZCwgbWluLCBtYXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZWVkZWRSYW5kb20oc2VlZDogbnVtYmVyLCBtaW46IG51bWJlciA9IDAsIG1heDogbnVtYmVyID0gMSkge1xyXG4gICAgICAgIHZhciBybmQgPSBzZWVkICUgMjMzMjgwIC8gMjMzMjgwO1xyXG4gICAgXHJcbiAgICAgICAgcm5kID0gbWluICsgcm5kICogKG1heCAtIG1pbik7XHJcbiAgICAgICAgcm5kID0gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHJuZCkpO1xyXG4gICAgICAgIHJldHVybiBybmQ7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDb25zdHJ1Y3RvciwgaHRtbERlY29yYXRlZFR5cGUsIHVuZXNjYXBlU3RyaW5nIH0gZnJvbSBcIi4uL3V0aWwvdXRpbFwiO1xyXG5pbXBvcnQgeyBieXRlLCBSYXdWYWx1ZVR5cGUgfSBmcm9tIFwiLi9ydW50aW1lRW52aXJvbm1lbnRcIjtcclxuaW1wb3J0IHsgQ1BQT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0c1wiO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uQVNUTm9kZSB9IGZyb20gXCIuL2V4cHJlc3Npb25zXCI7XHJcbmltcG9ydCB7IERlc2NyaXB0aW9uIH0gZnJvbSBcIi4vY29uc3RydWN0c1wiO1xyXG5cclxuXHJcbnZhciB2b3dlbHMgPSBbXCJhXCIsIFwiZVwiLCBcImlcIiwgXCJvXCIsIFwidVwiXTtcclxuZnVuY3Rpb24gaXNWb3dlbChjOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB2b3dlbHMuaW5kZXhPZihjKSAhPSAtMTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8gbGV0IFVTRVJfVFlQRV9OQU1FUyA9IHt9O1xyXG4vLyBleHBvcnQgZnVuY3Rpb24gcmVzZXRVc2VyVHlwZU5hbWVzKCkge1xyXG4vLyAgICAgVVNFUl9UWVBFX05BTUVTID0ge307XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBsZXQgZGVmYXVsdFVzZXJUeXBlTmFtZXMgPSB7XHJcbi8vICAgICBvc3RyZWFtIDogdHJ1ZSxcclxuLy8gICAgIGlzdHJlYW0gOiB0cnVlLFxyXG4vLyAgICAgc2l6ZV90IDogdHJ1ZVxyXG4vLyB9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZTxUIGV4dGVuZHMgVHlwZT4odHlwZTogVHlwZSwgY3RvcjogQ29uc3RydWN0b3I8VD4pIDogdHlwZSBpcyBJbnN0YW5jZVR5cGU8dHlwZW9mIGN0b3I+IHtcclxuICAgIHJldHVybiB0eXBlLmlzVHlwZShjdG9yKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzYW1lVHlwZSh0eXBlMTogVHlwZSwgdHlwZTI6IFR5cGUpIHtcclxuICAgIHJldHVybiB0eXBlMS5zYW1lVHlwZSh0eXBlMik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2ltaWxhclR5cGUodHlwZTE6IFR5cGUsIHR5cGUyOiBUeXBlKSB7XHJcbiAgICByZXR1cm4gdHlwZTEuc2ltaWxhclR5cGUodHlwZTIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN1YlR5cGUodHlwZTE6IFR5cGUsIHR5cGUyOiBUeXBlKSB7XHJcbiAgICByZXR1cm4gdHlwZTEgaW5zdGFuY2VvZiBDbGFzc1R5cGUgJiYgdHlwZTIgaW5zdGFuY2VvZiBDbGFzc1R5cGUgJiYgdHlwZTEuaXNEZXJpdmVkRnJvbSh0eXBlMik7XHJcbn07XHJcblxyXG5leHBvcnQgdmFyIGNvdmFyaWFudFR5cGUgPSBmdW5jdGlvbihkZXJpdmVkOiBUeXBlLCBiYXNlOiBUeXBlKXtcclxuICAgIGlmIChzYW1lVHlwZShkZXJpdmVkLCBiYXNlKSl7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGRjO1xyXG4gICAgdmFyIGJjO1xyXG4gICAgaWYgKGRlcml2ZWQgaW5zdGFuY2VvZiBQb2ludGVyVHlwZSAmJiBiYXNlIGluc3RhbmNlb2YgUG9pbnRlclR5cGUpe1xyXG4gICAgICAgIGRjID0gZGVyaXZlZC5wdHJUbztcclxuICAgICAgICBiYyA9IGJhc2UucHRyVG87XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChkZXJpdmVkIGluc3RhbmNlb2YgUmVmZXJlbmNlVHlwZSAmJiBiYXNlIGluc3RhbmNlb2YgUmVmZXJlbmNlVHlwZSl7XHJcbiAgICAgICAgZGMgPSBkZXJpdmVkLnJlZlRvO1xyXG4gICAgICAgIGJjID0gYmFzZS5yZWZUbztcclxuICAgIH1cclxuICAgIGVsc2V7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBub3QgYm90aCBwb2ludGVycyBvciBib3RoIHJlZmVyZW5jZXNcclxuICAgIH1cclxuXHJcbiAgICAvLyBNdXN0IGJlIHBvaW50ZXJzIG9yIHJlZmVyZW5jZXMgdG8gY2xhc3MgdHlwZVxyXG4gICAgaWYgKCEoZGMgaW5zdGFuY2VvZiBDbGFzc1R5cGUpIHx8ICEoYmMgaW5zdGFuY2VvZiBDbGFzc1R5cGUpKXtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZGMgbXVzdCBiZSBkZXJpdmVkIGZyb20gYmNcclxuICAgIGlmICghZGMuaXNEZXJpdmVkRnJvbShiYykpe1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQb2ludGVycy9SZWZlcmVuY2VzIG11c3QgaGF2ZSB0aGUgc2FtZSBjdi1xdWFsaWZpY2F0aW9uXHJcbiAgICBpZiAoZGVyaXZlZC5pc0NvbnN0ICE9IGJhc2UuaXNDb25zdCB8fCBkZXJpdmVkLmlzVm9sYXRpbGUgIT0gYmFzZS5pc1ZvbGF0aWxlKXtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZGMgbXVzdCBoYXZlIHNhbWUgb3IgbGVzcyBjdi1xdWFsaWZpY2F0aW9uIGFzIGJjXHJcbiAgICBpZiAoZGMuaXNDb25zdCAmJiAhYmMuaXNDb25zdCB8fCBkYy5pc1ZvbGF0aWxlICYmICFiYy5pc1ZvbGF0aWxlKXtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gWWF5IHdlIG1hZGUgaXQhXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWZlcmVuY2VDb21wYXRpYmxlKGZyb206IFR5cGUsIHRvOiBUeXBlKXtcclxuICAgIHJldHVybiBmcm9tICYmIHRvICYmIGZyb20uaXNSZWZlcmVuY2VDb21wYXRpYmxlKHRvKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0N2Q29udmVydGlibGUoZnJvbVR5cGU6IFR5cGUgfCBudWxsLCB0b1R5cGU6IFR5cGUgfCBudWxsKSB7XHJcblxyXG4gICAgaWYgKGZyb21UeXBlID09PSBudWxsIHx8IHRvVHlwZSA9PT0gbnVsbCkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHJcbiAgICAvLyB0MSBhbmQgdDIgbXVzdCBiZSBzaW1pbGFyXHJcbiAgICBpZiAoIXNpbWlsYXJUeXBlKGZyb21UeXBlLHRvVHlwZSkpIHsgcmV0dXJuIGZhbHNlOyB9XHJcblxyXG4gICAgLy8gRGlzY2FyZCAwdGggbGV2ZWwgb2YgY3YtcXVhbGlmaWNhdGlvbiBzaWduYXR1cmVzLCB3ZSBkb24ndCBjYXJlIGFib3V0IHRoZW0uXHJcbiAgICAvLyAoSXQncyBlc3NlbnRpYWxseSBhIHZhbHVlIHNlbWFudGljcyB0aGluZywgd2UncmUgbWFraW5nIGEgY29weSBzbyB0b3AgbGV2ZWwgY29uc3QgZG9lc24ndCBtYXR0ZXIuKVxyXG4gICAgZnJvbVR5cGUgPSBmcm9tVHlwZS5nZXRDb21wb3VuZE5leHQoKTtcclxuICAgIHRvVHlwZSA9IHRvVHlwZS5nZXRDb21wb3VuZE5leHQoKTtcclxuXHJcbiAgICAvLyBjaGVjayB0aGF0IHQyIGhhcyBjb25zdCBldmVyeXdoZXJlIHRoYXQgdDEgZG9lc1xyXG4gICAgLy8gYWxzbyBpZiB3ZSBldmVyIGZpbmQgYSBkaWZmZXJlbmNlLCB0MiBuZWVkcyBjb25zdCBldmVyeXdoZXJlIGxlYWRpbmdcclxuICAgIC8vIHVwIHRvIGl0IChidXQgbm90IGluY2x1ZGluZykgKGFuZCBub3QgaW5jbHVkaW5nIGRpc2NhcmRlZCAwdGggbGV2ZWwpLlxyXG4gICAgbGV0IHQyQWxsQ29uc3QgPSB0cnVlO1xyXG4gICAgd2hpbGUoZnJvbVR5cGUgJiYgdG9UeXBlKXsgLy9zaW1pbGFyIHNvIHRoZXkgc2hvdWxkIHJ1biBvdXQgYXQgc2FtZSB0aW1lXHJcbiAgICAgICAgaWYgKGZyb21UeXBlLmlzQ29uc3QgJiYgIXRvVHlwZS5pc0NvbnN0KXtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghZnJvbVR5cGUuaXNDb25zdCAmJiB0b1R5cGUuaXNDb25zdCAmJiAhdDJBbGxDb25zdCl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBhbGxDb25zdFxyXG4gICAgICAgIHQyQWxsQ29uc3QgPSB0MkFsbENvbnN0ICYmIHRvVHlwZS5pc0NvbnN0O1xyXG4gICAgICAgIGZyb21UeXBlID0gZnJvbVR5cGUuZ2V0Q29tcG91bmROZXh0KCk7XHJcbiAgICAgICAgdG9UeXBlID0gdG9UeXBlLmdldENvbXBvdW5kTmV4dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIG5vIHZpb2xhdGlvbnMsIHQxIGlzIGNvbnZlcnRhYmxlIHRvIHQyXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmFic3RyYWN0IGNsYXNzIFR5cGVCYXNlIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgX25hbWUgPSBcIlR5cGVcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgaW4gcGFyZW50aGVzaXphdGlvbiBvZiBzdHJpbmcgcmVwcmVzZW50YXRpb25zIG9mIHR5cGVzLlxyXG4gICAgICogZS5nLiBBcnJheSB0eXBlcyBoYXZlIHByZWNlZGVuY2UgMiwgd2hlcmVhcyBQb2ludGVyIHR5cGVzIGhhdmUgcHJlY2VkZW5jZSAxLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgcHJlY2VkZW5jZTogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBpc0NvbXBsZXRlOiBib29sZWFuO1xyXG5cclxuICAgIC8vIHJlZ3VsYXIgbWVtYmVyIHByb3BlcnRpZXNcclxuICAgIHB1YmxpYyByZWFkb25seSBpc0NvbnN0OiBib29sZWFuO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGlzVm9sYXRpbGU6IGJvb2xlYW47XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGlzQ29uc3Q6IGJvb2xlYW4gPSBmYWxzZSwgaXNWb2xhdGlsZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5pc0NvbnN0ID0gaXNDb25zdDtcclxuICAgICAgICAvLyBUT0RPIGlnbm9yZSB2b2xhdGlsZSBjb21wbGV0ZWx5PyBmb3Igbm93IChhbmQgcGVyaGFwcyBmb3JldmVyIGxvbClcclxuICAgICAgICB0aGlzLmlzVm9sYXRpbGUgPSBpc1ZvbGF0aWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDVlN0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuaXNDb25zdCA/IFwiY29uc3QgXCIgOiBcIlwiKSArICh0aGlzLmlzVm9sYXRpbGUgPyBcInZvbGF0aWxlIFwiIDogXCJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGVTdHJpbmcoZmFsc2UsIFwiXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgdHlwZSBvYmplY3QgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIGdpdmVuIFR5cGUgY2xhc3NcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzVHlwZTxUIGV4dGVuZHMgVHlwZT4oY3RvcjogQ29uc3RydWN0b3I8VD4pIDogdGhpcyBpcyBJbnN0YW5jZVR5cGU8dHlwZW9mIGN0b3I+IHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGN0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzT2JqZWN0VHlwZSgpIDogdGhpcyBpcyBPYmplY3RUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIE9iamVjdFR5cGU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBpc0F0b21pY1R5cGUoKSA6IHRoaXMgaXMgQXRvbWljVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBBdG9taWNUeXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc0FyaXRobWV0aWNUeXBlKCkgOiB0aGlzIGlzIEFyaXRobWV0aWNUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEFyaXRobWV0aWNUeXBlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgaXNJbnRlZ3JhbFR5cGUoKSA6IHRoaXMgaXMgSW50ZWdyYWxUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEludGVncmFsVHlwZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGlzRmxvYXRpbmdQb2ludFR5cGUoKSA6IHRoaXMgaXMgRmxvYXRpbmdQb2ludFR5cGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgRmxvYXRpbmdQb2ludFR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzUG9pbnRlclR5cGUoKSA6IHRoaXMgaXMgUG9pbnRlclR5cGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgUG9pbnRlclR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzUmVmZXJlbmNlVHlwZSgpIDogdGhpcyBpcyBSZWZlcmVuY2VUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIFJlZmVyZW5jZVR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzQ2xhc3NUeXBlKCkgOiB0aGlzIGlzIENsYXNzVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBDbGFzc1R5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzQm91bmRlZEFycmF5VHlwZSgpIDogdGhpcyBpcyBCb3VuZGVkQXJyYXlUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEJvdW5kZWRBcnJheVR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzQXJyYXlPZlVua25vd25Cb3VuZFR5cGUoKSA6IHRoaXMgaXMgQXJyYXlPZlVua25vd25Cb3VuZFR5cGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgQXJyYXlPZlVua25vd25Cb3VuZFR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzR2VuZXJpY0FycmF5VHlwZSgpIDogdGhpcyBpcyBCb3VuZGVkQXJyYXlUeXBlIHwgQXJyYXlPZlVua25vd25Cb3VuZFR5cGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgQm91bmRlZEFycmF5VHlwZSB8fCB0aGlzIGluc3RhbmNlb2YgQXJyYXlPZlVua25vd25Cb3VuZFR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzRnVuY3Rpb25UeXBlKCkgOiB0aGlzIGlzIEZ1bmN0aW9uVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBGdW5jdGlvblR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzQXJyYXlFbGVtVHlwZSgpIDogdGhpcyBpcyBBcnJheUVsZW1UeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEF0b21pY1R5cGUgfHwgdGhpcyBpbnN0YW5jZW9mIENsYXNzVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNWb2lkVHlwZSgpIDogdGhpcyBpcyBWb2lkVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBWb2lkVHlwZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGlzUG90ZW50aWFsUmV0dXJuVHlwZSgpIDogdGhpcyBpcyBQb3RlbnRpYWxSZXR1cm5UeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIE9iamVjdFR5cGUgfHwgdGhpcyBpbnN0YW5jZW9mIFJlZmVyZW5jZVR5cGUgfHwgdGhpcyBpbnN0YW5jZW9mIFZvaWRUeXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc1BvdGVudGlhbFBhcmFtZXRlclR5cGUoKSA6IHRoaXMgaXMgUG90ZW50aWFsUGFyYW1ldGVyVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBPYmplY3RUeXBlIHx8IHRoaXMgaW5zdGFuY2VvZiBSZWZlcmVuY2VUeXBlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIG90aGVyIHJlcHJlc2VudHMgZXhhY3RseSB0aGUgc2FtZSB0eXBlIGFzIHRoaXMsIGluY2x1ZGluZyBjdi1xdWFsaWZpY2F0aW9ucy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IHNhbWVUeXBlPFQgZXh0ZW5kcyBUeXBlPihvdGhlcjogVCkgOiB0aGlzIGlzIFQ7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3Qgc2FtZVR5cGUob3RoZXI6IFR5cGUpIDogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBvdGhlciByZXByZXNlbnRzIHRoZSBzYW1lIHR5cGUgYXMgdGhpcywgaWdub3JpbmcgY3YtcXVhbGlmaWNhdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBzaW1pbGFyVHlwZTxUIGV4dGVuZHMgVHlwZT4ob3RoZXI6IFQpIDogdGhpcyBpcyBUO1xyXG4gICAgcHVibGljIGFic3RyYWN0IHNpbWlsYXJUeXBlKG90aGVyOiBUeXBlKSA6IGJvb2xlYW47XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgdHlwZSBpcyByZWZlcmVuY2UtcmVsYXRlZCAoc2VlIEMrKyBzdGFuZGFyZCkgdG8gdGhlIHR5cGUgb3RoZXIuXHJcbiAgICAgKiBAcGFyYW0gb3RoZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzUmVmZXJlbmNlUmVsYXRlZCh0aGlzOiBUeXBlLCBvdGhlcjogVHlwZSkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gc2FtZVR5cGUodGhpcy5jdlVucXVhbGlmaWVkKCksIG90aGVyLmN2VW5xdWFsaWZpZWQoKSkgfHxcclxuICAgICAgICAgICAgc3ViVHlwZSh0aGlzLmN2VW5xdWFsaWZpZWQoKSwgb3RoZXIuY3ZVbnF1YWxpZmllZCgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHR5cGUgaXMgcmVmZXJlbmNlLWNvbXBhdGlibGUgKHNlZSBDKysgc3RhbmRhcmQpIHRvIHRoZSB0eXBlIG90aGVyLlxyXG4gICAgICogQHBhcmFtIHtUeXBlfSBvdGhlclxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc1JlZmVyZW5jZUNvbXBhdGlibGUodGhpczogVHlwZSwgb3RoZXI6IFR5cGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc1JlZmVyZW5jZVJlbGF0ZWQob3RoZXIpICYmIChvdGhlci5pc0NvbnN0IHx8ICF0aGlzLmlzQ29uc3QpICYmIChvdGhlci5pc1ZvbGF0aWxlIHx8ICF0aGlzLmlzVm9sYXRpbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIEMrKyBzdHlsZWQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdHlwZS5cclxuICAgICAqIEBwYXJhbSBleGNsdWRlQmFzZSBJZiB0cnVlLCBleGNsdWRlIHRoZSBiYXNlIHR5cGUuXHJcbiAgICAgKiBAcGFyYW0gdmFybmFtZSBUaGUgbmFtZSBvZiB0aGUgdmFyaWFibGUuIE1heSBiZSB0aGUgZW1wdHkgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIGRlY29yYXRlZCBJZiB0cnVlLCBodG1sIHRhZ3Mgd2lsbCBiZSBhZGRlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IHR5cGVTdHJpbmcoZXhjbHVkZUJhc2U6IGJvb2xlYW4sIHZhcm5hbWU6IHN0cmluZywgZGVjb3JhdGVkPzogYm9vbGVhbikgOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgQysrIHN0eWxlZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB0eXBlLCB3aXRoIHRoZSBiYXNlIHR5cGUgZXhjbHVkZWQgYXNcclxuICAgICAqIHdvdWxkIGJlIHN1aXRhYmxlIGZvciBvbmx5IHByaW50aW5nIHRoZSBkZWNsYXJhdG9yIHBhcnQgb2YgYSBkZWNsYXJhdGlvbi5cclxuICAgICAqIEBwYXJhbSB2YXJuYW1lIFRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZS4gTWF5IGJlIHRoZSBlbXB0eSBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkZWNsYXJhdG9yU3RyaW5nKHZhcm5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGVTdHJpbmcodHJ1ZSwgdmFybmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhIHR5cGUgYXMgaXQgbWlnaHQgYmUgcmVhZCB2ZXJiYWxseSBpbiBlbmdsaXNoLlxyXG4gICAgICogZS5nLiBpbnQgY29uc3QgKiB2YXJbNV0gLS0+IFwiYW4gYXJyYXkgb2YgNSBwb2ludGVycyB0byBjb25zdCBpbnRcIlxyXG4gICAgICogQHBhcmFtIHBsdXJhbCBXaGV0aGVyIHRoZSByZXR1cm5lZCBzdHJpbmcgc2hvdWxkIGJlIHBsdXJhbC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IGVuZ2xpc2hTdHJpbmcocGx1cmFsOiBib29sZWFuKSA6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgZnVuY3Rpb25zIHRoYXQgY3JlYXRlIHN0cmluZyByZXByZXNlbnRhdGlvbnMgb2YgdHlwZXMuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBwYXJlbnRoZXNpemUob3V0c2lkZTogVHlwZSwgc3RyOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcmVjZWRlbmNlIDwgb3V0c2lkZS5wcmVjZWRlbmNlID8gXCIoXCIgKyBzdHIgKyBcIilcIiA6IHN0cjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEJvdGggdGhlIG5hbWUgYW5kIG1lc3NhZ2UgYXJlIGp1c3QgYSBDKysgc3R5bGVkIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdHlwZS5cclxuICAgICAqIEByZXR1cm5zIHt7bmFtZToge1N0cmluZ30sIG1lc3NhZ2U6IHtTdHJpbmd9fX1cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRlc2NyaWJlKCkgOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgdmFyIHN0ciA9IHRoaXMudHlwZVN0cmluZyhmYWxzZSwgXCJcIik7XHJcbiAgICAgICAgcmV0dXJuIHtuYW1lOiBzdHIsIG1lc3NhZ2U6IHN0cn07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0aGlzIGlzIGEgY29tcG91bmQgdHlwZSwgcmV0dXJucyB0aGUgXCJuZXh0XCIgdHlwZS5cclxuICAgICAqIGUuZy4gaWYgdGhpcyBpcyBhIHBvaW50ZXItdG8taW50LCByZXR1cm5zIGludFxyXG4gICAgICogZS5nLiBpZiB0aGlzIGlhIGEgcmVmZXJlbmNlIHRvIHBvaW50ZXItdG8taW50LCByZXR1cm5zIGludFxyXG4gICAgICogZS5nLiBpZiB0aGlzIGlzIGFuIGFycmF5IG9mIGJvb2wsIHJldHVybnMgYm9vbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Q29tcG91bmROZXh0KCkgOiBUeXBlIHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyB0eXBlIGlzIGVpdGhlciBjb25zdCBvciB2b2xhdGlsZSAob3IgYm90aClcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNDVlF1YWxpZmllZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0NvbnN0IHx8IHRoaXMuaXNWb2xhdGlsZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPOiBwZXJoYXBzIG1ha2UgYSB3YXkgdG8gY2xvbmUgYSB0eXBlIHdpdGggYSBwYXJ0aWN1bGFyIGN2IHF1YWxpZmljYXRpb24gcmF0aGVyIHRoYW4gdGhlIHByb3h5IGFwcHJvYWNoLCB3aGljaCBzZWVtcyBtb3JlIGZyYWdpbGVcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBjdi11bnF1YWxpZmllZCBjb3B5IG9mIHRoaXMgdHlwZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGN2VW5xdWFsaWZpZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3ZRdWFsaWZpZWQoZmFsc2UsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoaXMgdHlwZSB3aXRoIHRoZSBzcGVjaWZpZWQgY3YtcXVhbGlmaWNhdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjdlF1YWxpZmllZChpc0NvbnN0OiBib29sZWFuLCBpc1ZvbGF0aWxlOiBib29sZWFuID0gZmFsc2UpOiB0aGlzIHtcclxuICAgICAgICByZXR1cm4gPHRoaXM+dGhpcy5jdlF1YWxpZmllZEltcGwoaXNDb25zdCwgaXNWb2xhdGlsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGN2UXVhbGlmaWVkSW1wbChpc0NvbnN0OiBib29sZWFuLCBpc1ZvbGF0aWxlOiBib29sZWFuKTogVHlwZUJhc2U7XHJcbn07XHJcblxyXG4vLyAvKipcclxuLy8gICogVXNlZCB3aGVuIGEgY29tcGlsYXRpb24gZXJyb3IgY2F1c2VzIGFuIHVua25vd24gdHlwZS5cclxuLy8gICovXHJcbi8vIGV4cG9ydCBjbGFzcyBVbmtub3duIGV4dGVuZHMgVHlwZSB7XHJcblxyXG5cclxuLy8gICAgIHB1YmxpYyBzYW1lVHlwZShvdGhlcjogVHlwZSkgOiBib29sZWFuIHtcclxuLy8gICAgICAgICByZXR1cm4gZmFsc2U7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIHNpbWlsYXJUeXBlKG90aGVyOiBUeXBlKSA6IGJvb2xlYW57XHJcbi8vICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gXHRwdWJsaWMgdHlwZVN0cmluZyhleGNsdWRlQmFzZTogYm9vbGVhbiwgdmFybmFtZTogc3RyaW5nLCBkZWNvcmF0ZWQ6IGJvb2xlYW4pIHtcclxuLy8gICAgICAgICByZXR1cm4gXCI8dW5rbm93bj5cIjtcclxuLy8gICAgIH1cclxuICAgIFxyXG4vLyBcdHB1YmxpYyBlbmdsaXNoU3RyaW5nKHBsdXJhbDogYm9vbGVhbikge1xyXG4vLyBcdFx0cmV0dXJuIFwiYW4gdW5rbm93biB0eXBlXCI7XHJcbi8vICAgICB9XHJcbiAgICBcclxuLy8gXHRwdWJsaWMgdmFsdWVUb1N0cmluZyh2YWx1ZTogUmF3VmFsdWVUeXBlKSB7XHJcbi8vICAgICAgICAgVXRpbC5hc3NlcnQoZmFsc2UpO1xyXG4vLyAgICAgICAgIHJldHVybiBcIlwiO1xyXG4vLyAgICAgfVxyXG4gICAgXHJcbi8vICAgICBwdWJsaWMgaXNWYWx1ZVZhbGlkKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuLy8gICAgICAgICByZXR1cm4gZmFsc2U7XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBsZXQgVU5LTk9XTl9UWVBFID0gbmV3IFVua25vd24oKTtcclxuXHJcbmV4cG9ydCB0eXBlIFR5cGUgPSBWb2lkVHlwZSB8IE9iamVjdFR5cGUgfCBGdW5jdGlvblR5cGUgfCBSZWZlcmVuY2VUeXBlIHwgQXJyYXlPZlVua25vd25Cb3VuZFR5cGU7XHJcblxyXG5leHBvcnQgY2xhc3MgVm9pZFR5cGUgZXh0ZW5kcyBUeXBlQmFzZSB7XHJcbiAgICBcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVk9JRCA9IG5ldyBWb2lkVHlwZSgpO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBpc0NvbXBsZXRlID0gdHJ1ZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJlY2VkZW5jZSA9IDA7XHJcblxyXG4gICAgcHVibGljIHNhbWVUeXBlKG90aGVyOiBUeXBlKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFZvaWRUeXBlXHJcbiAgICAgICAgICAgICYmIG90aGVyLmlzQ29uc3QgPT09IHRoaXMuaXNDb25zdFxyXG4gICAgICAgICAgICAmJiBvdGhlci5pc1ZvbGF0aWxlID09PSB0aGlzLmlzVm9sYXRpbGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNpbWlsYXJUeXBlKG90aGVyOiBUeXBlKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFZvaWRUeXBlO1xyXG4gICAgfVxyXG5cclxuXHRwdWJsaWMgdHlwZVN0cmluZyhleGNsdWRlQmFzZTogYm9vbGVhbiwgdmFybmFtZTogc3RyaW5nLCBkZWNvcmF0ZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICByZXR1cm4gXCJ2b2lkXCI7XHJcbiAgICB9XHJcbiAgICBcclxuXHRwdWJsaWMgZW5nbGlzaFN0cmluZyhwbHVyYWw6IGJvb2xlYW4pIHtcclxuXHRcdHJldHVybiBcInZvaWRcIjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIGN2UXVhbGlmaWVkSW1wbChpc0NvbnN0OiBib29sZWFuLCBpc1ZvbGF0aWxlOiBib29sZWFuKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWb2lkVHlwZShpc0NvbnN0LCBpc1ZvbGF0aWxlKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYSB0eXBlIGZvciBhbiBvYmplY3QgdGhhdCBleGlzdHMgaW4gbWVtb3J5IGFuZCB0YWtlcyB1cCBzb21lIHNwYWNlLlxyXG4gKiBIYXMgYSBzaXplIHByb3BlcnR5LCBidXQgTk9UIG5lY2Vzc2FyaWx5IGEgdmFsdWUuIChlLmcuIGFuIGFycmF5KS5cclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBPYmplY3RUeXBlIGV4dGVuZHMgVHlwZUJhc2Uge1xyXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHNpemU6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUG90ZW50aWFsUmV0dXJuVHlwZSA9IE9iamVjdFR5cGUgfCBSZWZlcmVuY2VUeXBlIHwgVm9pZFR5cGU7XHJcblxyXG5leHBvcnQgdHlwZSBQb3RlbnRpYWxQYXJhbWV0ZXJUeXBlID0gQXRvbWljVHlwZSB8IENsYXNzVHlwZSB8IFJlZmVyZW5jZVR5cGU7IC8vIERvZXMgbm90IGluY2x1ZGUgYXJyYXlzXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhIHR5cGUgZm9yIGFuIG9iamVjdCB0aGF0IGhhcyBhIHZhbHVlLlxyXG4gKi9cclxuYWJzdHJhY3QgY2xhc3MgVmFsdWVUeXBlIGV4dGVuZHMgT2JqZWN0VHlwZSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyBhIHNlcXVlbmNlIG9mIGJ5dGVzIChpLmUuIHRoZSBDKysgb2JqZWN0IHJlcHJlc2VudGF0aW9uKSBvZiBhIHZhbHVlIG9mXHJcbiAgICAgKiB0aGlzIHR5cGUgaW50byB0aGUgcmF3IHZhbHVlIHVzZWQgdG8gcmVwcmVzZW50IGl0IGludGVybmFsbHkgaW4gTG9ic3RlciAoaS5lLiBhIGphdmFzY3JpcHQgdmFsdWUpLlxyXG4gICAgICogQHBhcmFtIGJ5dGVzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBieXRlc1RvVmFsdWUoYnl0ZXM6IGJ5dGVbXSkgOiBSYXdWYWx1ZVR5cGUge1xyXG4gICAgICAgIC8vIEhBQ0s6IHRoZSB3aG9sZSB2YWx1ZSBpcyBzdG9yZWQgaW4gdGhlIGZpcnN0IGJ5dGVcclxuICAgICAgICByZXR1cm4gYnl0ZXNbMF07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb252ZXJ0cyBhIHJhdyB2YWx1ZSByZXByZXNlbnRpbmcgYSB2YWx1ZSBvZiB0aGlzIHR5cGUgdG8gYSBzZXF1ZW5jZSBvZiBieXRlc1xyXG4gICAgICogKGkuZS4gdGhlIEMrKyBvYmplY3QgcmVwcmVzZW50YXRpb24pXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHZhbHVlVG9CeXRlcyh2YWx1ZTogUmF3VmFsdWVUeXBlKSB7XHJcbiAgICAgICAgdmFyIGJ5dGVzID0gW107XHJcbiAgICAgICAgLy8gSEFDSzogc3RvcmUgdGhlIHdob2xlIHZhbHVlIGluIHRoZSBmaXJzdCBieXRlIGFuZCB6ZXJvIG91dCB0aGUgcmVzdC4gdGhhbmtzIGphdmFzY3JpcHQgOilcclxuICAgICAgICBieXRlc1swXSA9IHZhbHVlO1xyXG4gICAgICAgIGZvcih2YXIgaSA9IDE7IGkgPCB0aGlzLnNpemUtMTsgKytpKXtcclxuICAgICAgICAgICAgYnl0ZXMucHVzaCgwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDxieXRlW10+Ynl0ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgYSBnaXZlbiByYXcgdmFsdWUgZm9yIHRoaXMgdHlwZSBpcyB2YWxpZC4gRm9yIGV4YW1wbGUsIGEgcG9pbnRlciB0eXBlIG1heSB0cmFjayBydW50aW1lXHJcbiAgICAgKiB0eXBlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBhcnJheSBmcm9tIHdoaWNoIGl0IHdhcyBvcmlnaW5hbGx5IGRlcml2ZWQuIElmIHRoZSBwb2ludGVyIHZhbHVlIGluY3JlYXNlcyBzdWNoXHJcbiAgICAgKiB0aGF0IGl0IHdhbmRlcnMgb3ZlciB0aGUgZW5kIG9mIHRoYXQgYXJyYXksIGl0cyB2YWx1ZSBiZWNvbWVzIGludmFsaWQuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IGlzVmFsdWVWYWxpZCh2YWx1ZTogUmF3VmFsdWVUeXBlKSA6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgaHVtYW4tcmVhZGFibGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiByYXcgdmFsdWUgZm9yIHRoaXMgVHlwZS5cclxuICAgICAqIFRoaXMgaXMgdGhlIHJlcHJlc2VudGF0aW9uIHRoYXQgbWlnaHQgYmUgZGlzcGxheWVkIHRvIHRoZSB1c2VyIHdoZW4gaW5zcGVjdGluZyB0aGVcclxuICAgICAqIHZhbHVlIG9mIGFuIG9iamVjdC5cclxuICAgICAqIE5vdGUgdGhhdCB0aGUgdmFsdWUgcmVwcmVzZW50YXRpb24gZm9yIHRoZSB0eXBlIGluIExvYnN0ZXIgaXMganVzdCBhIGphdmFzY3JpcHRcclxuICAgICAqIHZhbHVlLiBJdCBpcyBub3QgdGhlIEMrKyB2YWx1ZSByZXByZXNlbnRhdGlvbiBmb3IgdGhlIHR5cGUuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IHZhbHVlVG9TdHJpbmcodmFsdWU6IFJhd1ZhbHVlVHlwZSkgOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHJhdyB2YWx1ZSBmb3IgdGhpcyBUeXBlIHRoYXQgd291bGQgYmVcclxuICAgICAqIHByaW50ZWQgdG8gYW4gb3N0cmVhbS5cclxuICAgICAqIE5vdGUgdGhhdCB0aGUgcmF3IHZhbHVlIHJlcHJlc2VudGF0aW9uIGZvciB0aGUgdHlwZSBpbiBMb2JzdGVyIGlzIGp1c3QgYSBqYXZhc2NyaXB0XHJcbiAgICAgKiB2YWx1ZS4gSXQgaXMgbm90IHRoZSBDKysgdmFsdWUgcmVwcmVzZW50YXRpb24gZm9yIHRoZSB0eXBlLlxyXG4gICAgICogVE9ETzogVGhpcyBpcyBhIGhhY2sgdGhhdCBtYXkgZXZlbnR1YWxseSBiZSByZW1vdmVkIHNpbmNlIHByaW50aW5nIHRvIGEgc3RyZWFtIHNob3VsZFxyXG4gICAgICogcmVhbGx5IGJlIGhhbmRsZWQgYnkgb3ZlcmxvYWRlZCA8PCBvcGVyYXRvciBmdW5jdGlvbnMuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHZhbHVlVG9Pc3RyZWFtU3RyaW5nKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVRvU3RyaW5nKHZhbHVlKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXRvbWljVHlwZSBleHRlbmRzIFZhbHVlVHlwZSB7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNBdG9taWMgPSB0cnVlO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNpbXBsZVR5cGUgZXh0ZW5kcyBBdG9taWNUeXBlIHtcclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50IGEgY29uY3JldGUgdHlwZSBwcm9wZXJ0eSB0aGF0IHNob3VsZCBiZSBhXHJcbiAgICAgKiBzdHJpbmcgaW5kaWNhdGluZyB0aGUga2luZCBvZiB0eXBlIGUuZy4gXCJpbnRcIiwgXCJkb3VibGVcIiwgXCJib29sXCIsIGV0Yy5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHNpbXBsZVR5cGU6IHN0cmluZztcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNDb21wbGV0ZSA9IHRydWU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJlY2VkZW5jZSA9IDA7XHJcblxyXG4gICAgcHVibGljIHNhbWVUeXBlKG90aGVyOiBUeXBlKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFNpbXBsZVR5cGVcclxuICAgICAgICAgICAgJiYgb3RoZXIuc2ltcGxlVHlwZSA9PT0gdGhpcy5zaW1wbGVUeXBlXHJcbiAgICAgICAgICAgICYmIG90aGVyLmlzQ29uc3QgPT09IHRoaXMuaXNDb25zdFxyXG4gICAgICAgICAgICAmJiBvdGhlci5pc1ZvbGF0aWxlID09PSB0aGlzLmlzVm9sYXRpbGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNpbWlsYXJUeXBlKG90aGVyOiBUeXBlKSA6IGJvb2xlYW57XHJcbiAgICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgU2ltcGxlVHlwZVxyXG4gICAgICAgICAgICAmJiBvdGhlci5zaW1wbGVUeXBlID09PSB0aGlzLnNpbXBsZVR5cGU7XHJcbiAgICB9XHJcblxyXG5cdHB1YmxpYyB0eXBlU3RyaW5nKGV4Y2x1ZGVCYXNlOiBib29sZWFuLCB2YXJuYW1lOiBzdHJpbmcsIGRlY29yYXRlZDogYm9vbGVhbikge1xyXG4gICAgICAgIGlmIChleGNsdWRlQmFzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFybmFtZSA/IHZhcm5hbWUgOiBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDVlN0cmluZygpICsgKGRlY29yYXRlZCA/IGh0bWxEZWNvcmF0ZWRUeXBlKHRoaXMuc2ltcGxlVHlwZS50b1N0cmluZygpKSA6IHRoaXMuc2ltcGxlVHlwZSkgKyAodmFybmFtZSA/IFwiIFwiICsgdmFybmFtZSA6IFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG5cdHB1YmxpYyBlbmdsaXNoU3RyaW5nKHBsdXJhbDogYm9vbGVhbikge1xyXG5cdFx0Ly8gbm8gcmVjdXJzaXZlIGNhbGxzIHRvIHRoaXMuc2ltcGxlVHlwZS5lbmdsaXNoU3RyaW5nKCkgaGVyZVxyXG5cdFx0Ly8gYmVjYXVzZSB0aGlzLnNpbXBsZVR5cGUgaXMganVzdCBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHR5cGVcclxuICAgICAgICB2YXIgd29yZCA9IHRoaXMuZ2V0Q1ZTdHJpbmcoKSArIHRoaXMuc2ltcGxlVHlwZTtcclxuXHRcdHJldHVybiAocGx1cmFsID8gdGhpcy5zaW1wbGVUeXBlK1wic1wiIDogKGlzVm93ZWwod29yZC5jaGFyQXQoMCkpID8gXCJhbiBcIiA6IFwiYSBcIikgKyB3b3JkKTtcclxuICAgIH1cclxuICAgIFxyXG5cdHB1YmxpYyB2YWx1ZVRvU3RyaW5nKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuXHRcdHJldHVybiBcIlwiK3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgaXNWYWx1ZVZhbGlkKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBcml0aG1ldGljVHlwZSBleHRlbmRzIFNpbXBsZVR5cGUge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEludGVncmFsVHlwZSBleHRlbmRzIEFyaXRobWV0aWNUeXBlIHtcclxuICAgIFxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENoYXIgZXh0ZW5kcyBJbnRlZ3JhbFR5cGUge1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBDSEFSID0gbmV3IENoYXIoKTtcclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHNpbXBsZVR5cGUgPSBcImNoYXJcIjtcclxuICAgIHB1YmxpYyByZWFkb25seSBzaXplID0gMTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE5VTExfQ0hBUiA9IDA7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBpc051bGxDaGFyKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHRoaXMuTlVMTF9DSEFSO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMganNTdHJpbmdUb051bGxUZXJtaW5hdGVkQ2hhckFycmF5KHN0cjogc3RyaW5nKSB7XHJcbiAgICAgICAgdmFyIGNoYXJzID0gc3RyLnNwbGl0KFwiXCIpLm1hcChmdW5jdGlvbihjKXtcclxuICAgICAgICAgICAgcmV0dXJuIGMuY2hhckNvZGVBdCgwKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjaGFycy5wdXNoKENoYXIuTlVMTF9DSEFSKTtcclxuICAgICAgICByZXR1cm4gY2hhcnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHZhbHVlVG9TdHJpbmcodmFsdWU6IFJhd1ZhbHVlVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBcIidcIiArIHVuZXNjYXBlU3RyaW5nKFN0cmluZy5mcm9tQ2hhckNvZGUodmFsdWUpKSArIFwiJ1wiO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHZhbHVlVG9Pc3RyZWFtU3RyaW5nKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICAvLyB1c2UgPG51bWJlcj4gYXNzZXJ0aW9uIGJhc2VkIG9uIHRoZSBhc3N1bXB0aW9uIHRoaXMgd2lsbCBvbmx5IGJlIHVzZWQgd2l0aCBwcm9wZXIgcmF3IHZhbHVlcyB0aGF0IGFyZSBudW1iZXJzXHJcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoPG51bWJlcj52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBjdlF1YWxpZmllZEltcGwoaXNDb25zdDogYm9vbGVhbiwgaXNWb2xhdGlsZTogYm9vbGVhbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ2hhcihpc0NvbnN0LCBpc1ZvbGF0aWxlKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEludCBleHRlbmRzIEludGVncmFsVHlwZSB7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IElOVCA9IG5ldyBJbnQoKTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgc2ltcGxlVHlwZSA9IFwiaW50XCI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2l6ZSA9IDQ7XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBjdlF1YWxpZmllZEltcGwoaXNDb25zdDogYm9vbGVhbiwgaXNWb2xhdGlsZTogYm9vbGVhbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgSW50KGlzQ29uc3QsIGlzVm9sYXRpbGUpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIFNpemVfdCBleHRlbmRzIEludGVncmFsVHlwZSB7XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgc2ltcGxlVHlwZSA9IFwic2l6ZV90XCI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2l6ZSA9IDg7XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBjdlF1YWxpZmllZEltcGwoaXNDb25zdDogYm9vbGVhbiwgaXNWb2xhdGlsZTogYm9vbGVhbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgU2l6ZV90KGlzQ29uc3QsIGlzVm9sYXRpbGUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQm9vbCBleHRlbmRzIEludGVncmFsVHlwZSB7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEJPT0wgPSBuZXcgQm9vbCgpO1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBzaW1wbGVUeXBlID0gXCJib29sXCI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2l6ZSA9IDE7XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBjdlF1YWxpZmllZEltcGwoaXNDb25zdDogYm9vbGVhbiwgaXNWb2xhdGlsZTogYm9vbGVhbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgQm9vbChpc0NvbnN0LCBpc1ZvbGF0aWxlKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gVE9ETzogYWRkIHN1cHBvcnQgZm9yIEVudW1zXHJcblxyXG5cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGbG9hdGluZ1BvaW50VHlwZSBleHRlbmRzIEFyaXRobWV0aWNUeXBlIHtcclxuXHJcbiAgICBwdWJsaWMgdmFsdWVUb1N0cmluZyh2YWx1ZTogUmF3VmFsdWVUeXBlKSB7XHJcbiAgICAgICAgLy8gdXNlIDxudW1iZXI+IGFzc2VydGlvbiBiYXNlZCBvbiB0aGUgYXNzdW1wdGlvbiB0aGlzIHdpbGwgb25seSBiZSB1c2VkIHdpdGggcHJvcGVyIHJhdyB2YWx1ZXMgdGhhdCBhcmUgbnVtYmVyc1xyXG4gICAgICAgIHZhciBzdHIgPSBcIlwiKzxudW1iZXI+dmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHN0ci5pbmRleE9mKFwiLlwiKSAhPSAtMSA/IHN0ciA6IHN0ciArIFwiLlwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRmxvYXQgZXh0ZW5kcyBGbG9hdGluZ1BvaW50VHlwZSB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBGTE9BVCA9IG5ldyBGbG9hdCgpO1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBzaW1wbGVUeXBlID0gXCJmbG9hdFwiO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHNpemUgPSA0O1xyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgY3ZRdWFsaWZpZWRJbXBsKGlzQ29uc3Q6IGJvb2xlYW4sIGlzVm9sYXRpbGU6IGJvb2xlYW4pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0KGlzQ29uc3QsIGlzVm9sYXRpbGUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRG91YmxlIGV4dGVuZHMgRmxvYXRpbmdQb2ludFR5cGUge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRE9VQkxFID0gbmV3IERvdWJsZSgpO1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBzaW1wbGVUeXBlID0gXCJkb3VibGVcIjtcclxuICAgIHB1YmxpYyByZWFkb25seSBzaXplID0gODtcclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIGN2UXVhbGlmaWVkSW1wbChpc0NvbnN0OiBib29sZWFuLCBpc1ZvbGF0aWxlOiBib29sZWFuKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb3VibGUoaXNDb25zdCwgaXNWb2xhdGlsZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFRPRE86IE9TdHJlYW0gc2hvdWxkbid0IGJlIGEgcHJpbWl0aXZlIHR5cGUsIHNob3VsZCBiZSBhbiBpbnN0cmluc2ljIGNsYXNzXHJcbi8vIGV4cG9ydCBjbGFzcyBPU3RyZWFtIGV4dGVuZHMgU2ltcGxlVHlwZSB7XHJcbi8vICAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgc2ltcGxlVHlwZSA9IFwib3N0cmVhbVwiO1xyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IHNpemUgPSA0O1xyXG5cclxuLy8gfVxyXG5cclxuLy8gVE9ETzogYWRkIHN1cHBvcnQgZm9yIGlzdHJlYW1cclxuLy8gZXhwb3J0IGNsYXNzIElTdHJlYW0gPSBTaW1wbGVUeXBlLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZTogXCJJU3RyZWFtXCIsXHJcbi8vICAgICBzaW1wbGVUeXBlOiBcImlzdHJlYW1cIixcclxuLy8gICAgIHNpemU6IDQsXHJcblxyXG4vLyAgICAgdmFsdWVUb1N0cmluZyA6IGZ1bmN0aW9uKHZhbHVlKXtcclxuLy8gICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG5cclxuXHJcbi8vVE9ETzogY3JlYXRlIHNlcGFyYXRlIGZ1bmN0aW9uIHBvaW50ZXIgdHlwZT8/P1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvaW50ZXJUeXBlPFB0clRvIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgQXRvbWljVHlwZSB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHNpemUgPSA4O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHByZWNlZGVuY2UgPSAxO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGlzQ29tcGxldGUgPSB0cnVlO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNOdWxsKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICByZXR1cm4gPG51bWJlcj52YWx1ZSA9PT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzTmVnYXRpdmUodmFsdWU6IFJhd1ZhbHVlVHlwZSkge1xyXG4gICAgICAgIHJldHVybiA8bnVtYmVyPnZhbHVlIDwgMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHRyVG86IFB0clRvOyAvLyBUT0RPOiBhZGQgfCBWb2lkVHlwZSBmb3Igdm9pZCBwb2ludGVycz8gb3IganVzdCBtYWtlIHRoYXQgYSB3aG9sZSBzZXBhcmF0ZSBWb2lkUG9pbnRlciBjbGFzcz9cclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHRyVG86IFB0clRvLCBpc0NvbnN0PzogYm9vbGVhbiwgaXNWb2xhdGlsZT86IGJvb2xlYW4pIHtcclxuICAgICAgICBzdXBlcihpc0NvbnN0LCBpc1ZvbGF0aWxlKTtcclxuICAgICAgICB0aGlzLnB0clRvID0gcHRyVG87XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENvbXBvdW5kTmV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wdHJUbztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2FtZVR5cGUob3RoZXI6IFR5cGUpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgUG9pbnRlclR5cGVcclxuICAgICAgICAgICAgJiYgdGhpcy5wdHJUby5zYW1lVHlwZShvdGhlci5wdHJUbylcclxuICAgICAgICAgICAgJiYgb3RoZXIuaXNDb25zdCA9PT0gdGhpcy5pc0NvbnN0XHJcbiAgICAgICAgICAgICYmIG90aGVyLmlzVm9sYXRpbGUgPT09IHRoaXMuaXNWb2xhdGlsZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2ltaWxhclR5cGUob3RoZXI6IFR5cGUpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgUG9pbnRlclR5cGVcclxuICAgICAgICAgICAgJiYgdGhpcy5wdHJUby5zaW1pbGFyVHlwZShvdGhlci5wdHJUbyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHR5cGVTdHJpbmcoZXhjbHVkZUJhc2U6IGJvb2xlYW4sIHZhcm5hbWU6IHN0cmluZywgZGVjb3JhdGVkOiBib29sZWFuKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHRyVG8udHlwZVN0cmluZyhleGNsdWRlQmFzZSwgdGhpcy5wYXJlbnRoZXNpemUodGhpcy5wdHJUbywgdGhpcy5nZXRDVlN0cmluZygpICsgXCIqXCIgKyB2YXJuYW1lKSwgZGVjb3JhdGVkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5nbGlzaFN0cmluZyhwbHVyYWw6IGJvb2xlYW4pIHtcclxuICAgICAgICByZXR1cm4gKHBsdXJhbCA/IHRoaXMuZ2V0Q1ZTdHJpbmcoKStcInBvaW50ZXJzIHRvXCIgOiBcImEgXCIgK3RoaXMuZ2V0Q1ZTdHJpbmcoKStcInBvaW50ZXIgdG9cIikgKyBcIiBcIiArIHRoaXMucHRyVG8uZW5nbGlzaFN0cmluZyhmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHZhbHVlVG9TdHJpbmcodmFsdWU6IFJhd1ZhbHVlVHlwZSkge1xyXG4gICAgICAgIC8vIFRPRE86IGNsZWFuIHVwIHdoZW4gZnVuY3Rpb24gcG9pbnRlcnMgYXJlIHJlaW1wbGVtZW50ZWRcclxuICAgICAgICAvLyBpZiAodGhpcy5wdHJUbyBpbnN0YW5jZW9mIEZ1bmN0aW9uVHlwZSAmJiB2YWx1ZSkge1xyXG4gICAgICAgIC8vICAgICByZXR1cm4gdmFsdWUubmFtZTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuIFwiMHhcIiArIHZhbHVlO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNPYmplY3RQb2ludGVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnB0clRvLmlzT2JqZWN0VHlwZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgZ2l2ZW4gcmF3IHZhbHVlIGZvciB0aGlzIHR5cGUgaXMgZGVyZWZlcmVuY2VhYmxlLiBGb3IgcG9pbnRlciB0eXBlcywgdGhlIGdpdmVuIHJhdyB2YWx1ZSBpcyBkZXJlZmVyZW5jZWFibGVcclxuICAgICAqIGlmIHRoZSByZXN1bHQgb2YgdGhlIGRlcmVmZXJlbmNlIHdpbGwgYmUgYSBsaXZlIG9iamVjdC4gQW4gZXhhbXBsZSBvZiB0aGUgZGlzdGluY3Rpb24gYmV0d2VlbiB2YWxpZGl0eSBhbmRcclxuICAgICAqIGRlcmVmZXJlbmNlYWJpbGl0eSBmb3IgcG9pbnRlciB0eXBlcyB3b3VsZCBiZSBhbiBhcnJheSBwb2ludGVyLiBUaGUgcG9pbnRlciB2YWx1ZSAoYW4gYWRkcmVzcykgaXMgZGVyZWZlcmVuY2VhYmxlXHJcbiAgICAgKiBpZiBpdCBpcyB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGUgYXJyYXkuIEl0IGlzIHZhbGlkIGluIHRob3NlIHNhbWUgbG9jYXRpb25zIHBsdXMgYWxzbyB0aGUgbG9jYXRpb24gb25lIHNwYWNlXHJcbiAgICAgKiBwYXN0IHRoZSBlbmQgKGJ1dCBub3QgZGVyZWZlcmVuY2VhYmxlIHRoZXJlKS4gQWxsIG90aGVyIGFkZHJlc3MgdmFsdWVzIGFyZSBpbnZhbGlkLlxyXG4gICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc1ZhbHVlRGVyZWZlcmVuY2VhYmxlKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbHVlVmFsaWQodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc1ZhbHVlVmFsaWQodmFsdWU6IFJhd1ZhbHVlVHlwZSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgY3ZRdWFsaWZpZWRJbXBsKGlzQ29uc3Q6IGJvb2xlYW4sIGlzVm9sYXRpbGU6IGJvb2xlYW4pIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvaW50ZXJUeXBlKHRoaXMucHRyVG8sIGlzQ29uc3QsIGlzVm9sYXRpbGUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQXJyYXlQb2ludGVyIGV4dGVuZHMgUG9pbnRlclR5cGUge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBhcnJheU9iamVjdDogQ1BQT2JqZWN0PEJvdW5kZWRBcnJheVR5cGU+O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihhcnJheU9iamVjdDogQ1BQT2JqZWN0PEJvdW5kZWRBcnJheVR5cGU+LCBpc0NvbnN0PzogYm9vbGVhbiwgaXNWb2xhdGlsZT86IGJvb2xlYW4pIHtcclxuICAgICAgICBzdXBlcihhcnJheU9iamVjdC50eXBlLmVsZW1UeXBlLCBpc0NvbnN0LCBpc1ZvbGF0aWxlKTtcclxuICAgICAgICB0aGlzLmFycmF5T2JqZWN0ID0gYXJyYXlPYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1pbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcnJheU9iamVjdC5hZGRyZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbmVQYXN0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5T2JqZWN0LmFkZHJlc3MgKyB0aGlzLmFycmF5T2JqZWN0LnR5cGUuc2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNWYWx1ZVZhbGlkKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYXJyYXlPYmplY3QuaXNBbGl2ZSl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFycmF5T2JqZWN0ID0gdGhpcy5hcnJheU9iamVjdDtcclxuICAgICAgICByZXR1cm4gYXJyYXlPYmplY3QuYWRkcmVzcyA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBhcnJheU9iamVjdC5hZGRyZXNzICsgYXJyYXlPYmplY3QudHlwZS5zaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc1ZhbHVlRGVyZWZlcmVuY2VhYmxlKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbHVlVmFsaWQodmFsdWUpICYmIHZhbHVlICE9PSB0aGlzLm9uZVBhc3QoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9JbmRleChhZGRyOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC50cnVuYygoYWRkciAtIHRoaXMuYXJyYXlPYmplY3QuYWRkcmVzcykgLyAgdGhpcy5hcnJheU9iamVjdC50eXBlLmVsZW1UeXBlLnNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBjdlF1YWxpZmllZEltcGwoaXNDb25zdDogYm9vbGVhbiwgaXNWb2xhdGlsZTogYm9vbGVhbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlQb2ludGVyKHRoaXMuYXJyYXlPYmplY3QsIGlzQ29uc3QsIGlzVm9sYXRpbGUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT2JqZWN0UG9pbnRlciBleHRlbmRzIFBvaW50ZXJUeXBlIHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcG9pbnRlZE9iamVjdDogQ1BQT2JqZWN0PE9iamVjdFR5cGU+O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihvYmo6IENQUE9iamVjdDxPYmplY3RUeXBlPiwgaXNDb25zdD86IGJvb2xlYW4sIGlzVm9sYXRpbGU/OiBib29sZWFuKSB7XHJcbiAgICAgICAgc3VwZXIob2JqLnR5cGUsIGlzQ29uc3QsIGlzVm9sYXRpbGUpO1xyXG4gICAgICAgIHRoaXMucG9pbnRlZE9iamVjdCA9IG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UG9pbnRlZE9iamVjdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wb2ludGVkT2JqZWN0O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgaXNWYWx1ZVZhbGlkKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wb2ludGVkT2JqZWN0LmlzQWxpdmUgJiYgdGhpcy5wb2ludGVkT2JqZWN0LmFkZHJlc3MgPT09IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBjdlF1YWxpZmllZEltcGwoaXNDb25zdDogYm9vbGVhbiwgaXNWb2xhdGlsZTogYm9vbGVhbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgT2JqZWN0UG9pbnRlcih0aGlzLnBvaW50ZWRPYmplY3QsIGlzQ29uc3QsIGlzVm9sYXRpbGUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJlZmVyZW5jZVR5cGU8UmVmVG8gZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZT4gZXh0ZW5kcyBUeXBlQmFzZSB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHByZWNlZGVuY2UgPSAxO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGlzQ29tcGxldGUgPSB0cnVlO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSByZWZUbzogUmVmVG87XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJlZlRvOiBSZWZUbywgaXNDb25zdD86IGJvb2xlYW4sIGlzVm9sYXRpbGU/OiBib29sZWFuKSB7XHJcbiAgICAgICAgLy8gUmVmZXJlbmNlcyBoYXZlIG5vIG5vdGlvbiBvZiBjb25zdCAodGhleSBjYW4ndCBiZSByZS1ib3VuZCBhbnl3YXkpXHJcbiAgICAgICAgc3VwZXIoZmFsc2UsIGlzVm9sYXRpbGUpO1xyXG4gICAgICAgIHRoaXMucmVmVG8gPSByZWZUbztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29tcG91bmROZXh0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZlRvO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzYW1lVHlwZShvdGhlcjogVHlwZSkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBSZWZlcmVuY2VUeXBlICYmIHRoaXMucmVmVG8uc2FtZVR5cGUob3RoZXIucmVmVG8pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vTm90ZTogSSBkb24ndCB0aGluayBzaW1pbGFyIHR5cGVzIGV2ZW4gbWFrZSBzZW5zZSB3aXRoIHJlZmVyZW5jZXMuIFNlZSBzdGFuZGFyZCA0LjRcclxuICAgIHB1YmxpYyBzaW1pbGFyVHlwZShvdGhlcjogVHlwZSkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBSZWZlcmVuY2VUeXBlICYmIHRoaXMucmVmVG8uc2ltaWxhclR5cGUob3RoZXIucmVmVG8pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0eXBlU3RyaW5nKGV4Y2x1ZGVCYXNlOiBib29sZWFuLCB2YXJuYW1lOiBzdHJpbmcsIGRlY29yYXRlZDogYm9vbGVhbikge1xyXG5cdFx0cmV0dXJuIHRoaXMucmVmVG8udHlwZVN0cmluZyhleGNsdWRlQmFzZSwgdGhpcy5wYXJlbnRoZXNpemUodGhpcy5yZWZUbywgdGhpcy5nZXRDVlN0cmluZygpICsgXCImXCIgKyB2YXJuYW1lKSwgZGVjb3JhdGVkKTtcclxuICAgIH1cclxuICAgIFxyXG5cdHB1YmxpYyBlbmdsaXNoU3RyaW5nKHBsdXJhbDogYm9vbGVhbikge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q1ZTdHJpbmcoKSArIChwbHVyYWwgPyBcInJlZmVyZW5jZXMgdG9cIiA6IFwiYSByZWZlcmVuY2UgdG9cIikgKyBcIiBcIiArIHRoaXMucmVmVG8uZW5nbGlzaFN0cmluZyhmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBcclxuXHRwdWJsaWMgdmFsdWVUb1N0cmluZyh2YWx1ZTogUmF3VmFsdWVUeXBlKXtcclxuXHRcdHJldHVybiBcIlwiK3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgY3ZRdWFsaWZpZWRJbXBsKGlzQ29uc3Q6IGJvb2xlYW4sIGlzVm9sYXRpbGU6IGJvb2xlYW4pIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJlZmVyZW5jZVR5cGUodGhpcy5yZWZUbywgaXNDb25zdCwgaXNWb2xhdGlsZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIE5vUmVmVHlwZTxUIGV4dGVuZHMgT2JqZWN0VHlwZSB8IFJlZmVyZW5jZVR5cGUgfCBWb2lkVHlwZT4gPSBUIGV4dGVuZHMgUmVmZXJlbmNlVHlwZTxpbmZlciBSZWZUbz4gPyBSZWZUbyA6IFQ7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbm9SZWY8VCBleHRlbmRzIE9iamVjdFR5cGUgfCBSZWZlcmVuY2VUeXBlIHwgVm9pZFR5cGU+KHR5cGUgOiBUKSA6IE5vUmVmVHlwZTxUPiB7XHJcbiAgICBpZih0eXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlVHlwZSkge1xyXG4gICAgICAgIHJldHVybiB0eXBlLnJlZlRvO1xyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICByZXR1cm4gPE5vUmVmVHlwZTxUPj50eXBlOyAvLyB3aWxsIGVpdGhlciBiZSBhbiBvYmplY3QgdHlwZSBvciB2b2lkIHR5cGVcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEFycmF5RWxlbVR5cGUgPSBBdG9taWNUeXBlIHwgQ2xhc3NUeXBlO1xyXG5cclxuLy8gUmVwcmVzZW50cyB0aGUgdHlwZSBvZiBhbiBhcnJheS4gVGhpcyBpcyBub3QgYW4gT2JqZWN0VHlwZSBiZWNhdXNlIGFuIGFycmF5IGRvZXNcclxuLy8gbm90IGhhdmUgYSB2YWx1ZSB0aGF0IGNhbiBiZSByZWFkL3dyaXR0ZW4uIFRoZSBFbGVtX3R5cGUgdHlwZSBwYXJhbWV0ZXIgbXVzdCBiZVxyXG4vLyBhbiBBdG9taWNUeXBlIG9yIENsYXNzVHlwZS4gKE5vdGUgdGhhdCB0aGlzIHJ1bGVzIG91dCBhcnJheXMgb2YgYXJyYXlzLCB3aGljaCBhcmUgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQuKVxyXG5leHBvcnQgY2xhc3MgQm91bmRlZEFycmF5VHlwZTxFbGVtX3R5cGUgZXh0ZW5kcyBBcnJheUVsZW1UeXBlID0gQXJyYXlFbGVtVHlwZT4gZXh0ZW5kcyBPYmplY3RUeXBlIHtcclxuICAgIFxyXG4gICAgcHVibGljIHJlYWRvbmx5IHNpemU6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJlY2VkZW5jZSA9IDI7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGVsZW1UeXBlOiBFbGVtX3R5cGU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbGVuZ3RoOiBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGVsZW1UeXBlOiBFbGVtX3R5cGUsIGxlbmd0aDogbnVtYmVyKSB7XHJcblxyXG4gICAgICAgIC8vIFRPRE86IHNhbml0eSBjaGVjayB0aGUgc2VtYW50aWNzIGhlcmUsIGJ1dCBJIGRvbid0IHRoaW5rIGl0IG1ha2VzIHNlbnNlIGZvciBhbiBhcnJheSBpdHNlbGYgdG8gYmUgdm9sYXRpbGVcclxuICAgICAgICBzdXBlcihmYWxzZSwgZmFsc2UpO1xyXG5cclxuICAgICAgICB0aGlzLmVsZW1UeXBlID0gZWxlbVR5cGU7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XHJcbiAgICAgICAgdGhpcy5zaXplID0gZWxlbVR5cGUuc2l6ZSAqIGxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGlzQ29tcGxldGUoKSB7XHJcbiAgICAgICAgLy8gTm90ZTogdGhpcyBjbGFzcyBkb2VzIG5vdCBjdXJyZW50bHkgcmVwcmVzZW50IFwiYXJyYXkgb2YgdW5rbm93biBib3VuZFwiIHR5cGVzLlxyXG4gICAgICAgIC8vIFNob3VsZCB0aGF0IGNoYW5nZSwgYWRkaXRpb25hbCBsb2dpYyB3b3VsZCBiZSBuZWVkZWQgaGVyZSBzaW5jZSB0aG9zZSBhcmUgY29uc2lkZXJlZFxyXG4gICAgICAgIC8vIGluY29tcGxldGUgdHlwZXMuXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ29tcGxldGVuZXNzIG1heSBjaGFuZ2UgaWYgZWxlbVR5cGUgY29tcGxldGVuZXNzIGNoYW5nZXNcclxuICAgICAgICAvLyAoZS5nLiBhcnJheSBvZiBwb3RlbnRpYWxseSAoaW4pY29tcGxldGUgY2xhc3MgdHlwZSBvYmplY3RzKVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1UeXBlLmlzQ29tcGxldGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENvbXBvdW5kTmV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbGVtVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2FtZVR5cGUob3RoZXI6IFR5cGUpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgQm91bmRlZEFycmF5VHlwZSAmJiB0aGlzLmVsZW1UeXBlLnNhbWVUeXBlKG90aGVyLmVsZW1UeXBlKSAmJiB0aGlzLmxlbmd0aCA9PT0gb3RoZXIubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaW1pbGFyVHlwZShvdGhlcjogVHlwZSkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBCb3VuZGVkQXJyYXlUeXBlICYmIHRoaXMuZWxlbVR5cGUuc2ltaWxhclR5cGUob3RoZXIuZWxlbVR5cGUpICYmIHRoaXMubGVuZ3RoID09PSBvdGhlci5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHR5cGVTdHJpbmcoZXhjbHVkZUJhc2U6IGJvb2xlYW4sIHZhcm5hbWU6IHN0cmluZywgZGVjb3JhdGVkOiBib29sZWFuKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lbGVtVHlwZS50eXBlU3RyaW5nKGV4Y2x1ZGVCYXNlLCB2YXJuYW1lICsgIFwiW1wiK3RoaXMubGVuZ3RoK1wiXVwiLCBkZWNvcmF0ZWQpO1xyXG4gICAgfVxyXG4gICAgXHJcblx0cHVibGljIGVuZ2xpc2hTdHJpbmcocGx1cmFsOiBib29sZWFuKSB7XHJcbiAgICAgICAgcmV0dXJuIChwbHVyYWwgPyBcImFycmF5cyBvZiBcIiA6IFwiYW4gYXJyYXkgb2YgXCIpICsgdGhpcy5sZW5ndGggKyBcIiBcIiArIHRoaXMuZWxlbVR5cGUuZW5nbGlzaFN0cmluZyh0aGlzLmxlbmd0aCA+IDEpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgY3ZRdWFsaWZpZWRJbXBsKGlzQ29uc3Q6IGJvb2xlYW4sIGlzVm9sYXRpbGU6IGJvb2xlYW4pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJvdW5kZWRBcnJheVR5cGUodGhpcy5lbGVtVHlwZSwgdGhpcy5sZW5ndGgpOyAvLyBOb3RlIGFycmF5cyBkb24ndCBoYXZlIGN2IHF1YWxpZmljYXRpb25zIHNvIHRoZXkgYXJlIGlnbm9yZWQgaGVyZVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgYWRqdXN0VG9Qb2ludGVyVHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvaW50ZXJUeXBlKHRoaXMuZWxlbVR5cGUsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG5cdC8vIHB1YmxpYyB2YWx1ZVRvU3RyaW5nKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuXHQvLyBcdHJldHVybiBcIlwiK3ZhbHVlO1xyXG4gICAgLy8gfVxyXG4gICAgXHJcbiAgICAvLyBwdWJsaWMgYnl0ZXNUb1ZhbHVlKGJ5dGVzOiBieXRlW10pIDogbmV2ZXIge1xyXG4gICAgLy8gICAgIHJldHVybiBVdGlsLmFzc2VydEZhbHNlKCk7IC8vIFRPRE86IGFjdHVhbGx5IGNoYW5nZSB0eXBlIGhpZXJhcmNoeSBzbyBBcnJheVR5cGVzIGRvIG5vdCBzdXBwb3J0IGEgbWVjaGFuaXNtIGZvciByZWFkaW5nL3dyaXRpbmcgdGhlaXIgdmFsdWVcclxuICAgIC8vICAgICAvLyB2YXIgYXJyID0gW107XHJcbiAgICAvLyAgICAgLy8gdmFyIGVsZW1TaXplID0gdGhpcy5lbGVtVHlwZS5zaXplO1xyXG4gICAgLy8gICAgIC8vIGZvcih2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gZWxlbVNpemUpe1xyXG4gICAgLy8gICAgIC8vICAgICBhcnIucHVzaCh0aGlzLmVsZW1UeXBlLmJ5dGVzVG9WYWx1ZShieXRlcy5zbGljZShpLCBpICsgZWxlbVNpemUpKSk7XHJcbiAgICAvLyAgICAgLy8gfVxyXG4gICAgLy8gICAgIC8vIHJldHVybiBhcnI7XHJcbiAgICAvLyB9XHJcbiAgICAvLyBwdWJsaWMgdmFsdWVUb0J5dGVzKHZhbHVlOiBSYXdWYWx1ZVR5cGUpIDogbmV2ZXIge1xyXG4gICAgLy8gICAgIHJldHVybiBVdGlsLmFzc2VydEZhbHNlKCk7IC8vIFRPRE86IGFjdHVhbGx5IGNoYW5nZSB0eXBlIGhpZXJhcmNoeSBzbyBBcnJheVR5cGVzIGRvIG5vdCBzdXBwb3J0IGEgbWVjaGFuaXNtIGZvciByZWFkaW5nL3dyaXRpbmcgdGhlaXIgdmFsdWVcclxuICAgIC8vICAgICAvLyByZXR1cm4gZmxhdHRlbih2YWx1ZS5tYXAoXHJcbiAgICAvLyAgICAgLy8gICAgIChlbGVtOiBSYXdWYWx1ZVR5cGUpID0+IHsgcmV0dXJuIHRoaXMuZWxlbVR5cGUudmFsdWVUb0J5dGVzKGVsZW0pOyB9XHJcbiAgICAvLyAgICAgLy8gKSk7XHJcbiAgICAvLyB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQXJyYXlPZlVua25vd25Cb3VuZFR5cGU8RWxlbV90eXBlIGV4dGVuZHMgQXJyYXlFbGVtVHlwZSA9IEFycmF5RWxlbVR5cGU+IGV4dGVuZHMgVHlwZUJhc2Uge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBwcmVjZWRlbmNlID0gMjtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZWxlbVR5cGU6IEVsZW1fdHlwZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNDb21wbGV0ZSA9IGZhbHNlO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBzaXplRXhwcmVzc2lvbkFTVD86IEV4cHJlc3Npb25BU1ROb2RlO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihlbGVtVHlwZTogRWxlbV90eXBlLCBzaXplRXhwcmVzc2lvbkFTVD86IEV4cHJlc3Npb25BU1ROb2RlKSB7XHJcbiAgICAgICAgc3VwZXIoZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmVsZW1UeXBlID0gZWxlbVR5cGU7XHJcbiAgICAgICAgdGhpcy5zaXplRXhwcmVzc2lvbkFTVCA9IHNpemVFeHByZXNzaW9uQVNUO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb21wb3VuZE5leHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbVR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNhbWVUeXBlKG90aGVyOiBUeXBlKSA6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIEFycmF5T2ZVbmtub3duQm91bmRUeXBlICYmIHRoaXMuZWxlbVR5cGUuc2FtZVR5cGUob3RoZXIuZWxlbVR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaW1pbGFyVHlwZShvdGhlcjogVHlwZSkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBBcnJheU9mVW5rbm93bkJvdW5kVHlwZSAmJiB0aGlzLmVsZW1UeXBlLnNpbWlsYXJUeXBlKG90aGVyLmVsZW1UeXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdHlwZVN0cmluZyhleGNsdWRlQmFzZTogYm9vbGVhbiwgdmFybmFtZTogc3RyaW5nLCBkZWNvcmF0ZWQ6IGJvb2xlYW4pIHtcclxuXHRcdHJldHVybiB0aGlzLmVsZW1UeXBlLnR5cGVTdHJpbmcoZXhjbHVkZUJhc2UsIHZhcm5hbWUgKyAgXCJbXVwiLCBkZWNvcmF0ZWQpO1xyXG4gICAgfVxyXG4gICAgXHJcblx0cHVibGljIGVuZ2xpc2hTdHJpbmcocGx1cmFsOiBib29sZWFuKSB7XHJcbiAgICAgICAgcmV0dXJuIChwbHVyYWwgPyBcImFycmF5cyBvZiB1bmtub3duIGJvdW5kIG9mIFwiIDogXCJhbiBhcnJheSBvZiB1bmtub3duIGJvdW5kIG9mIFwiKSArIHRoaXMuZWxlbVR5cGUuZW5nbGlzaFN0cmluZyh0cnVlKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIGN2UXVhbGlmaWVkSW1wbChpc0NvbnN0OiBib29sZWFuLCBpc1ZvbGF0aWxlOiBib29sZWFuKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheU9mVW5rbm93bkJvdW5kVHlwZSh0aGlzLmVsZW1UeXBlLCB0aGlzLnNpemVFeHByZXNzaW9uQVNUKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRqdXN0VG9Qb2ludGVyVHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvaW50ZXJUeXBlKHRoaXMuZWxlbVR5cGUsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFRPRE86IEFkZCBhIHR5cGUgZm9yIGFuIGluY29tcGxldGUgY2xhc3NcclxuXHJcbi8vIFRPRE86IGdldCByaWQgb2Ygb3IgbW92ZSB0aGlzIGNvbW1lbnQgc29tZXdoZXJlIGFwcHJvcHJpYXRlXHJcbi8qKlxyXG4gKiBtZW1iZXJFbnRpdGllcyAtIGFuIGFycmF5IG9mIGFsbCBtZW1iZXIgZW50aXRpZXMuIGRvZXMgbm90IGlubGN1ZGUgY29uc3RydWN0b3JzLCBkZXN0cnVjdG9yLCBvciBiYXNlIGNsYXNzIHN1Ym9iamVjdCBlbnRpdGllc1xyXG4gKiBzdWJvYmplY3RFbnRpdGllcyAtIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIHN1Ym9iamVjdCBlbnRpdGllcywgaW5jbHVkZSBiYXNlIGNsYXNzIHN1Ym9iamVjdHMgYW5kIG1lbWJlciBzdWJvYmplY3RzXHJcbiAqIGJhc2VDbGFzc0VudGl0aWVzIC0gYW4gYXJyYXkgY29udGFpbmluZyBlbnRpdGllcyBmb3IgYW55IGJhc2UgY2xhc3Mgc3Vib2JqZWN0c1xyXG4gKiBtZW1iZXJTdWJvYmplY3RFbnRpdGllcyAtIGFuIGFycmF5IGNvbnRhaW5pbmcgZW50aXRpZXMgZm9yIG1lbWJlciBzdWJvYmplY3RzIChkb2VzIG5vdCBjb250YWluIGJhc2UgY2xhc3Mgc3Vib2JqZWN0cylcclxuICogY29uc3RydWN0b3JzIC0gYW4gYXJyYXkgb2YgdGhlIGNvbnN0cnVjdG9yIGVudGl0aWVzIGZvciB0aGlzIGNsYXNzLiBtYXkgYmUgZW1wdHkgaWYgbm8gY29uc3RydWN0b3JzXHJcbiAqIGRlc3RydWN0b3IgLSB0aGUgZGVzdHJ1Y3RvciBlbnRpdHkgZm9yIHRoaXMgY2xhc3MuIG1pZ2h0IGJlIG51bGwgaWYgZG9lc24ndCBoYXZlIGEgZGVzdHJ1Y3RvclxyXG4gKi9cclxuXHJcblxyXG5cclxuICAgIC8vIFRPRE86IEhBQ0sgdG8gbWFrZSBDbGFzc1R5cGUgZXhpc3QgYnV0IGRvIG5vdGhpbmcgZm9yIG5vd1xyXG5leHBvcnQgY2xhc3MgQ2xhc3NUeXBlIGV4dGVuZHMgT2JqZWN0VHlwZSB7XHJcbiAgICBwdWJsaWMgc2l6ZTogbnVtYmVyPSAwO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHByZWNlZGVuY2U6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNDb21wbGV0ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGNsYXNzTmFtZTogc3RyaW5nID0gXCJcIjtcclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIHB1YmxpYyBzYW1lVHlwZShvdGhlcjogVHlwZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNpbWlsYXJUeXBlKG90aGVyOiBUeXBlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzRGVyaXZlZEZyb20ob3RoZXI6IFR5cGUpOiBib29sZWFuIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdHlwZVN0cmluZyhleGNsdWRlQmFzZTogYm9vbGVhbiwgdmFybmFtZTogc3RyaW5nLCBkZWNvcmF0ZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBlbmdsaXNoU3RyaW5nKHBsdXJhbDogYm9vbGVhbik6IHN0cmluZyB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBjdlF1YWxpZmllZEltcGwoaXNDb25zdDogYm9vbGVhbiwgaXNWb2xhdGlsZTogYm9vbGVhbikge1xyXG4gICAgICAgIC8vIFRPRE9cclxuICAgICAgICByZXR1cm4gbmV3IENsYXNzVHlwZShpc0NvbnN0LCBpc1ZvbGF0aWxlKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIENsYXNzVHlwZSBleHRlbmRzIE9iamVjdFR5cGUge1xyXG4vLyAgICAgcHVibGljIGlzVmFsdWVWYWxpZCh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbi8vICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbi8vICAgICB9XHJcbi8vICAgICBwdWJsaWMgdmFsdWVUb1N0cmluZyh2YWx1ZTogbnVtYmVyKTogc3RyaW5nIHtcclxuLy8gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZW5nbGlzaFN0cmluZyhwbHVyYWw6IGJvb2xlYW4pOiBzdHJpbmcge1xyXG4vLyAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4vLyAgICAgfVxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IHByZWNlZGVuY2UgPSAwO1xyXG5cclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBjcHBDbGFzczogQ1BQQ2xhc3M7XHJcblxyXG4vLyAgICAgcHVibGljIGNvbnN0cnVjdG9yKGNwcENsYXNzOiBDUFBDbGFzcywgaXNDb25zdD86IGJvb2xlYW4sIGlzVm9sYXRpbGU/OiBib29sZWFuKSB7XHJcbi8vICAgICAgICAgc3VwZXIoaXNDb25zdCwgaXNWb2xhdGlsZSk7XHJcblxyXG4vLyAgICAgICAgIHRoaXMuY3BwQ2xhc3MgPSBjcHBDbGFzcztcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZ2V0IGlzQ29tcGxldGUoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXMuY3BwQ2xhc3MuaXNDb21wbGV0ZTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZ2V0IHNpemUoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXMuY3BwQ2xhc3Muc2l6ZTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgc2FtZVR5cGUob3RoZXI6IFR5cGUpIHtcclxuLy8gICAgICAgICAvL2FsZXJ0KG90aGVyLmlzQSh0aGlzLl9jbGFzcykpO1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLnNpbWlsYXJUeXBlKG90aGVyKVxyXG4vLyAgICAgICAgICAgICAmJiBvdGhlci5pc0NvbnN0ID09PSB0aGlzLmlzQ29uc3RcclxuLy8gICAgICAgICAgICAgJiYgb3RoZXIuaXNWb2xhdGlsZSA9PT0gdGhpcy5pc1ZvbGF0aWxlO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBzaW1pbGFyVHlwZShvdGhlcjogVHlwZSkge1xyXG4vLyAgICAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIENsYXNzVHlwZSAmJiBvdGhlci5jcHBDbGFzcy5mdWxseVF1YWxpZmllZE5hbWUgPT09IHRoaXMuY3BwQ2xhc3MuZnVsbHlRdWFsaWZpZWROYW1lO1xyXG4vLyAgICAgfVxyXG4vLyAgICAgdHlwZVN0cmluZyA6IGZ1bmN0aW9uKGV4Y2x1ZGVCYXNlLCB2YXJuYW1lLCBkZWNvcmF0ZWQpe1xyXG4vLyAgICAgICAgIGlmIChleGNsdWRlQmFzZSkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gdmFybmFtZSA/IHZhcm5hbWUgOiBcIlwiO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDVlN0cmluZygpICsgKGRlY29yYXRlZCA/IFV0aWwuaHRtbERlY29yYXRlZFR5cGUodGhpcy5jbGFzc05hbWUpIDogdGhpcy5jbGFzc05hbWUpICsgKHZhcm5hbWUgPyBcIiBcIiArIHZhcm5hbWUgOiBcIlwiKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG4vLyAgICAgZW5nbGlzaFN0cmluZyA6IGZ1bmN0aW9uKHBsdXJhbCl7XHJcbi8vICAgICAgICAgLy8gbm8gcmVjdXJzaXZlIGNhbGxzIHRvIHRoaXMudHlwZS5lbmdsaXNoU3RyaW5nKCkgaGVyZVxyXG4vLyAgICAgICAgIC8vIGJlY2F1c2UgdGhpcy50eXBlIGlzIGp1c3QgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB0eXBlXHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q1ZTdHJpbmcoKSArIChwbHVyYWwgPyB0aGlzLmNsYXNzTmFtZStcInNcIiA6IChpc1Zvd2VsKHRoaXMuY2xhc3NOYW1lLmNoYXJBdCgwKSkgPyBcImFuIFwiIDogXCJhIFwiKSArIHRoaXMuY2xhc3NOYW1lKTtcclxuLy8gICAgIH0sXHJcbi8vICAgICB2YWx1ZVRvU3RyaW5nIDogZnVuY3Rpb24odmFsdWUpe1xyXG4vLyAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgbnVsbCwgMik7XHJcbi8vICAgICB9LFxyXG4vLyAgICAgYnl0ZXNUb1ZhbHVlIDogZnVuY3Rpb24oYnl0ZXMpe1xyXG4vLyAgICAgICAgIHZhciB2YWwgPSB7fTtcclxuLy8gICAgICAgICB2YXIgYiA9IDA7XHJcbi8vICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMubWVtYmVyU3Vib2JqZWN0RW50aXRpZXMubGVuZ3RoOyArK2kpIHtcclxuLy8gICAgICAgICAgICAgdmFyIG1lbSA9IHRoaXMubWVtYmVyU3Vib2JqZWN0RW50aXRpZXNbaV07XHJcbi8vICAgICAgICAgICAgIHZhbFttZW0ubmFtZV0gPSBtZW0udHlwZS5ieXRlc1RvVmFsdWUoYnl0ZXMuc2xpY2UoYiwgYiArIG1lbS50eXBlLnNpemUpKTtcclxuLy8gICAgICAgICAgICAgYiArPSBtZW0udHlwZS5zaXplO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICByZXR1cm4gdmFsO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIHZhbHVlVG9CeXRlcyA6IGZ1bmN0aW9uKHZhbHVlKXtcclxuLy8gICAgICAgICB2YXIgYnl0ZXMgPSBbXTtcclxuLy8gICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5tZW1iZXJTdWJvYmplY3RFbnRpdGllcy5sZW5ndGg7ICsraSkge1xyXG4vLyAgICAgICAgICAgICB2YXIgbWVtID0gdGhpcy5tZW1iZXJTdWJvYmplY3RFbnRpdGllc1tpXTtcclxuLy8gICAgICAgICAgICAgYnl0ZXMucHVzaEFsbChtZW0udHlwZS52YWx1ZVRvQnl0ZXModmFsdWVbbWVtLm5hbWVdKSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIHJldHVybiBieXRlcztcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIENQUENsYXNzIHtcclxuXHJcbi8vICAgICBwcml2YXRlIHN0YXRpYyBuZXh0Q2xhc3NJZCA9IDA7XHJcblxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBmdWxseVF1YWxpZmllZE5hbWU6IHN0cmluZztcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBzaXplOiBudW1iZXIgPSAxO1xyXG4vLyAgICAgcHJpdmF0ZSBhY3R1YWxseVplcm9TaXplID0gdHJ1ZTtcclxuXHJcbi8vICAgICAvLyBUT0RPOiB0aGVyZSBpc24ndCByZWFsbHkgYSBuZWVkIHRvIHN0b3JlIGVudGl0aWVzIGluIGhlcmUuIGp1c3QgdGhlIHR5cGVzIHdvdWxkIGJlIGZpbmUgYW5kIGVudGl0aWVzIGZvciB0aGUgbmFtZWRcclxuLy8gICAgIC8vIG1lbWJlcnMgd291bGQgc3RpbGwgZ28gaW4gdGhlIGNsYXNzIHNjb3BlLiBCYXNlIGNsYXNzIGVudGl0aWVzIGFyZW4ndCByZWFsbHkgbmVlZGVkIGF0IGFsbC5cclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBzY29wZTogQ2xhc3NTY29wZTtcclxuLy8gICAgIHByaXZhdGUgbWVtYmVyRW50aXRpZXMgOiBNZW1iZXJWYXJpYWJsZUVudGl0eVtdID0gW107XHJcbi8vICAgICBwcml2YXRlIHN1Ym9iamVjdEVudGl0aWVzOiAoTWVtYmVyVmFyaWFibGVFbnRpdHkgfCBCYXNlQ2xhc3NFbnRpdHkpW10gPSBbXTtcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBiYXNlQ2xhc3NFbnRpdGllczogQmFzZUNsYXNzRW50aXR5W10gPSBbXTtcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBtZW1iZXJTdWJvYmplY3RFbnRpdGllczogTWVtYmVyVmFyaWFibGVFbnRpdHlbXSA9IFtdO1xyXG4vLyAgICAgcHVibGljIGN0b3JzOiBDb25zdHJ1Y3RvckVudGl0eVtdID0gW107XHJcbi8vICAgICBwdWJsaWMgZGVzdHJ1Y3Rvcj86IERlc3RydWN0b3JFbnRpdHk7XHJcblxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IGlzQ29tcGxldGU6IGJvb2xlYW47XHJcbiAgICBcclxuLy8gICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihmdWxseVF1YWxpZmllZE5hbWU6IHN0cmluZywgcGFyZW50U2NvcGU6IFNjb3BlLCBiYXNlQ2xhc3M6IENsYXNzRW50aXR5KSB7XHJcbi8vICAgICAgICAgdGhpcy5mdWxseVF1YWxpZmllZE5hbWUgPSBmdWxseVF1YWxpZmllZE5hbWU7XHJcbi8vICAgICAgICAgdGhpcy5uYW1lID0gZnVsbHlRdWFsaWZpZWROYW1lVG9VbnF1YWxpZmllZChmdWxseVF1YWxpZmllZE5hbWUpO1xyXG4vLyAgICAgICAgIHRoaXMuc2NvcGUgPSBDbGFzc1Njb3BlLmluc3RhbmNlKG5hbWUsIHBhcmVudFNjb3BlLCBiYXNlQ2xhc3MpO1xyXG5cclxuLy8gICAgICAgICBpZiAoYmFzZUNsYXNzKSB7XHJcbi8vICAgICAgICAgICAgIGxldCBiYXNlRW50aXR5ID0gbmV3IEJhc2VDbGFzc0VudGl0eShiYXNlQ2xhc3MsIHRoaXMsIFwicHVibGljXCIpO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmJhc2VDbGFzc0VudGl0aWVzLnB1c2goYmFzZUVudGl0eSk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuc3Vib2JqZWN0RW50aXRpZXMucHVzaChiYXNlRW50aXR5KTtcclxuLy8gICAgICAgICAgICAgdGhpcy5zaXplICs9IGJhc2UudHlwZS5zaXplO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgdGhpcy5pc0NvbXBsZXRlID0gZmFsc2U7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIGdldEJhc2VDbGFzcygpIHtcclxuLy8gICAgICAgICBpZiAodGhpcy5iYXNlQ2xhc3NFbnRpdGllcy5sZW5ndGggPiAwKSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB0aGlzLmJhc2VDbGFzc0VudGl0aWVzWzBdO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBtZW1iZXJMb29rdXAobWVtYmVyTmFtZTogc3RyaW5nLCBvcHRpb25zOiBOYW1lTG9va3VwT3B0aW9ucykge1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLnNjb3BlLm1lbWJlckxvb2t1cChtZW1iZXJOYW1lLCBvcHRpb25zKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgcmVxdWlyZWRNZW1iZXJMb29rdXAobWVtYmVyTmFtZTogc3RyaW5nLCBvcHRpb25zOiBOYW1lTG9va3VwT3B0aW9ucykge1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLnNjb3BlLnJlcXVpcmVkTWVtYmVyTG9va3VwKG1lbWJlck5hbWUsIG9wdGlvbnMpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBoYXNNZW1iZXIobWVtYmVyTmFtZTogc3RyaW5nLCBvcHRpb25zOiBOYW1lTG9va3VwT3B0aW9ucykge1xyXG4vLyAgICAgICAgIHJldHVybiAhIXRoaXMubWVtYmVyTG9va3VwKG1lbWJlck5hbWUsIG9wdGlvbnMpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBhZGRNZW1iZXIobWVtOiBDUFBFbnRpdHkpIHtcclxuLy8gICAgICAgICBVdGlsLmFzc2VydCghdGhpcy5pc0NvbXBsZXRlLCBcIk1heSBub3QgbW9kaWZ5IGEgY2xhc3MgZGVmaW5pdGlvbiBvbmNlIGl0IGhhcyBiZWVuIGNvbXBsZXRlZC5cIik7XHJcbi8vICAgICAgICAgdGhpcy5zY29wZS5hZGREZWNsYXJlZEVudGl0eShtZW0pO1xyXG4vLyAgICAgICAgIHRoaXMubWVtYmVyRW50aXRpZXMucHVzaChtZW0pO1xyXG4vLyAgICAgICAgIGlmKG1lbS50eXBlLmlzT2JqZWN0VHlwZSgpKXtcclxuLy8gICAgICAgICAgICAgaWYgKHRoaXMuYWN0dWFsbHlaZXJvU2l6ZSl7XHJcbi8vICAgICAgICAgICAgICAgICAoPG51bWJlcj50aGlzLnNpemUpID0gMDtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuYWN0dWFsbHlaZXJvU2l6ZSA9IGZhbHNlO1xyXG4vLyAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4vLyAgICAgICAgICAgICB0aGlzLm1lbWJlclN1Ym9iamVjdEVudGl0aWVzLnB1c2gobWVtKTtcclxuLy8gICAgICAgICAgICAgdGhpcy5zdWJvYmplY3RFbnRpdGllcy5wdXNoKG1lbSk7XHJcbi8vICAgICAgICAgICAgICg8bnVtYmVyPnRoaXMuc2l6ZSkgKz0gbWVtLnR5cGUuc2l6ZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIGFkZENvbnN0cnVjdG9yKGNvbnN0cnVjdG9yOiBDb25zdHJ1Y3RvckVudGl0eSkge1xyXG4vLyAgICAgICAgIFV0aWwuYXNzZXJ0KCF0aGlzLmlzQ29tcGxldGUsIFwiTWF5IG5vdCBtb2RpZnkgYSBjbGFzcyBkZWZpbml0aW9uIG9uY2UgaXQgaGFzIGJlZW4gY29tcGxldGVkLlwiKTtcclxuLy8gICAgICAgICB0aGlzLmN0b3JzLnB1c2goY29uc3RydWN0b3IpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBhZGREZXN0cnVjdG9yKGRlc3RydWN0b3I6IERlc3RydWN0b3JFbnRpdHkpIHtcclxuLy8gICAgICAgICBVdGlsLmFzc2VydCghdGhpcy5pc0NvbXBsZXRlLCBcIk1heSBub3QgbW9kaWZ5IGEgY2xhc3MgZGVmaW5pdGlvbiBvbmNlIGl0IGhhcyBiZWVuIGNvbXBsZXRlZC5cIik7XHJcbi8vICAgICAgICAgdGhpcy5kZXN0cnVjdG9yID0gZGVzdHJ1Y3RvcjtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZ2V0RGVmYXVsdENvbnN0cnVjdG9yKCkge1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLnNjb3BlLnNpbmdsZUxvb2t1cCh0aGlzLm5hbWUrXCJcXDBcIiwge1xyXG4vLyAgICAgICAgICAgICBvd246dHJ1ZSwgbm9CYXNlOnRydWUsIGV4YWN0TWF0Y2g6dHJ1ZSxcclxuLy8gICAgICAgICAgICAgcGFyYW1UeXBlczpbXX0pO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBnZXRDb3B5Q29uc3RydWN0b3IocmVxdWlyZUNvbnN0OiBib29sZWFuKXtcclxuLy8gICAgICAgICByZXR1cm4gdGhpcy5zY29wZS5zaW5nbGVMb29rdXAodGhpcy5uYW1lK1wiXFwwXCIsIHtcclxuLy8gICAgICAgICAgICAgICAgIG93bjp0cnVlLCBub0Jhc2U6dHJ1ZSwgZXhhY3RNYXRjaDp0cnVlLFxyXG4vLyAgICAgICAgICAgICAgICAgcGFyYW1UeXBlczpbbmV3IFJlZmVyZW5jZShuZXcgQ2xhc3NUeXBlKHRoaXMsIHRydWUpKV19KSB8fFxyXG4vLyAgICAgICAgICAgICAhcmVxdWlyZUNvbnN0ICYmXHJcbi8vICAgICAgICAgICAgIHRoaXMuc2NvcGUuc2luZ2xlTG9va3VwKHRoaXMubmFtZStcIlxcMFwiLCB7XHJcbi8vICAgICAgICAgICAgICAgICBvd246dHJ1ZSwgbm9CYXNlOnRydWUsIGV4YWN0TWF0Y2g6dHJ1ZSxcclxuLy8gICAgICAgICAgICAgICAgIHBhcmFtVHlwZXM6W25ldyBSZWZlcmVuY2UobmV3IENsYXNzVHlwZSh0aGlzKSldfSk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIGdldEFzc2lnbm1lbnRPcGVyYXRvcihyZXF1aXJlQ29uc3Q6IGJvb2xlYW4sIGlzVGhpc0NvbnN0OiBib29sZWFuKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGUuc2luZ2xlTG9va3VwKFwib3BlcmF0b3I9XCIsIHtcclxuLy8gICAgICAgICAgICAgICAgIG93bjp0cnVlLCBub0Jhc2U6dHJ1ZSwgZXhhY3RNYXRjaDp0cnVlLFxyXG4vLyAgICAgICAgICAgICAgICAgcGFyYW1UeXBlczpbbmV3IENsYXNzVHlwZSh0aGlzKV19KSB8fFxyXG4vLyAgICAgICAgICAgICB0aGlzLnNjb3BlLnNpbmdsZUxvb2t1cChcIm9wZXJhdG9yPVwiLCB7XHJcbi8vICAgICAgICAgICAgICAgICBvd246dHJ1ZSwgbm9CYXNlOnRydWUsIGV4YWN0TWF0Y2g6dHJ1ZSxcclxuLy8gICAgICAgICAgICAgICAgIHBhcmFtVHlwZXM6W25ldyBSZWZlcmVuY2UobmV3IENsYXNzVHlwZSh0aGlzLCB0cnVlKSldfSkgfHxcclxuLy8gICAgICAgICAgICAgIXJlcXVpcmVDb25zdCAmJlxyXG4vLyAgICAgICAgICAgICB0aGlzLnNjb3BlLnNpbmdsZUxvb2t1cChcIm9wZXJhdG9yPVwiLCB7XHJcbi8vICAgICAgICAgICAgICAgICBvd246dHJ1ZSwgbm9CYXNlOnRydWUsIGV4YWN0TWF0Y2g6dHJ1ZSxcclxuLy8gICAgICAgICAgICAgICAgIHBhcmFtVHlwZXM6W25ldyBSZWZlcmVuY2UobmV3IENsYXNzVHlwZSh0aGlzKSldfSlcclxuXHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIG1ha2VDb21wbGV0ZSgpIHtcclxuLy8gICAgICAgICAoPGJvb2xlYW4+dGhpcy5pc0NvbXBsZXRlKSA9IHRydWU7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgLy8gVE9ETzogdGhpbmsgYWJvdXQgd2hldGhlciB0aGlzIGlzIG5lY2Vzc2FyeSAoaXQgcHJvYmFibHkgaXMsIG9yIG1heWJlIGp1c3QgdGhlIGNsYXNzIHNjb3BlcyB3b3VsZCBuZWVkIHRvIGJlIG1lcmdlZD8pXHJcbi8vICAgICAvLyBtZXJnZSA6IGZ1bmN0aW9uKGNsYXNzMSwgY2xhc3MyKSB7XHJcbi8vICAgICAvLyAgICAgY2xhc3MxLmlfY2xhc3NJZCA9IGNsYXNzMi5pX2NsYXNzSWQgPSBNYXRoLm1pbihjbGFzczEuaV9jbGFzc0lkLCBjbGFzczIuaV9jbGFzc0lkKTtcclxuLy8gICAgIC8vIH0sXHJcblxyXG4vLyAgICAgcHVibGljIGlzRGVyaXZlZEZyb20ocG90ZW50aWFsQmFzZTogQ2xhc3NFbnRpdHkpIHtcclxuLy8gICAgICAgICB2YXIgYiA9IHRoaXMuZ2V0QmFzZUNsYXNzKCk7XHJcbi8vICAgICAgICAgd2hpbGUoYikge1xyXG4vLyAgICAgICAgICAgICBpZiAoc2ltaWxhclR5cGUocG90ZW50aWFsQmFzZS50eXBlLCBiLnR5cGUpKSB7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBiID0gYi5iYXNlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICByZXR1cm4gZmFsc2U7XHJcbi8vICAgICB9XHJcblxyXG5cclxuXHJcbi8vIH1cclxuLy8gZXhwb3J0IHtDbGFzc1R5cGUgYXMgQ2xhc3N9O1xyXG5cclxuXHJcblxyXG4vLyBSRVFVSVJFUzogcmV0dXJuVHlwZSBtdXN0IGJlIGEgdHlwZVxyXG4vLyAgICAgICAgICAgYXJnVHlwZXMgbXVzdCBiZSBhbiBhcnJheSBvZiB0eXBlc1xyXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25UeXBlIGV4dGVuZHMgVHlwZUJhc2Uge1xyXG4gICAgcHVibGljIGlzQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJlY2VkZW5jZSA9IDI7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHJldHVyblR5cGU6IFBvdGVudGlhbFJldHVyblR5cGU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyYW1UeXBlczogcmVhZG9ubHkgUG90ZW50aWFsUGFyYW1ldGVyVHlwZVtdO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHJlY2VpdmVyVHlwZT86IENsYXNzVHlwZTtcclxuXHJcbiAgICBwcml2YXRlIHBhcmFtU3RyVHlwZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBwYXJhbVN0ckVuZ2xpc2g6IHN0cmluZztcclxuICAgIFxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJldHVyblR5cGU6IFBvdGVudGlhbFJldHVyblR5cGUsIHBhcmFtVHlwZXM6IHJlYWRvbmx5IFBvdGVudGlhbFBhcmFtZXRlclR5cGVbXSwgaXNDb25zdD86IGJvb2xlYW4sIGlzVm9sYXRpbGU/OiBib29sZWFuLCByZWNlaXZlclR5cGU/OiBDbGFzc1R5cGUpIHtcclxuICAgICAgICBzdXBlcihpc0NvbnN0LCBpc1ZvbGF0aWxlKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWNlaXZlclR5cGUgPSByZWNlaXZlclR5cGU7XHJcblxyXG4gICAgICAgIC8vIFRvcC1sZXZlbCBjb25zdCBvbiByZXR1cm4gdHlwZSBpcyBpZ25vcmVkIGZvciBub24tY2xhc3MgdHlwZXNcclxuICAgICAgICAvLyAoSXQncyBhIHZhbHVlIHNlbWFudGljcyB0aGluZy4pXHJcbiAgICAgICAgaWYoIShyZXR1cm5UeXBlIGluc3RhbmNlb2YgQ2xhc3NUeXBlIHx8IHJldHVyblR5cGUgaW5zdGFuY2VvZiBQb2ludGVyVHlwZSB8fCByZXR1cm5UeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlVHlwZSkpe1xyXG4gICAgICAgICAgICB0aGlzLnJldHVyblR5cGUgPSByZXR1cm5UeXBlLmN2VW5xdWFsaWZpZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5yZXR1cm5UeXBlID0gcmV0dXJuVHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRvcC1sZXZlbCBjb25zdCBvbiBwYXJhbWV0ZXIgdHlwZXMgaXMgaWdub3JlZCBmb3Igbm9uLWNsYXNzIHR5cGVzXHJcbiAgICAgICAgdGhpcy5wYXJhbVR5cGVzID0gcGFyYW1UeXBlcy5tYXAoKHB0eXBlKSA9PiBwdHlwZSBpbnN0YW5jZW9mIENsYXNzVHlwZSA/IHB0eXBlIDogcHR5cGUuY3ZVbnF1YWxpZmllZCgpKTtcclxuXHJcbiAgICAgICAgdGhpcy5wYXJhbVN0clR5cGUgPSBcIihcIjtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtVHlwZXMubGVuZ3RoOyArK2kpe1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtU3RyVHlwZSArPSAoaSA9PSAwID8gXCJcIiA6IFwiLFwiKSArIHBhcmFtVHlwZXNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFyYW1TdHJUeXBlICs9IFwiKVwiO1xyXG5cclxuICAgICAgICB0aGlzLnBhcmFtU3RyRW5nbGlzaCA9IFwiKFwiO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1UeXBlcy5sZW5ndGg7ICsraSl7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1TdHJFbmdsaXNoICs9IChpID09IDAgPyBcIlwiIDogXCIsIFwiKSArIHBhcmFtVHlwZXNbaV0uZW5nbGlzaFN0cmluZyhmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFyYW1TdHJFbmdsaXNoICs9IFwiKVwiO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgY3ZRdWFsaWZpZWRJbXBsKGlzQ29uc3Q6IGJvb2xlYW4sIGlzVm9sYXRpbGU6IGJvb2xlYW4pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uVHlwZSh0aGlzLnJldHVyblR5cGUsIHRoaXMucGFyYW1UeXBlcywgaXNDb25zdCwgaXNWb2xhdGlsZSwgdGhpcy5yZWNlaXZlclR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzYW1lVHlwZShvdGhlcjogVHlwZSkge1xyXG4gICAgICAgIGlmICghb3RoZXIpe1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgRnVuY3Rpb25UeXBlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5zYW1lUmV0dXJuVHlwZShvdGhlcikpe1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5zYW1lUGFyYW1UeXBlcyhvdGhlcikpe1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRPRE86IHNob3VsZCB0aGlzIGJlIGhlcmU/XHJcbiAgICAgICAgLy8gaWYgKCF0aGlzLnNhbWVSZWNlaXZlclR5cGUob3RoZXIpKSB7XHJcbiAgICAgICAgLy8gICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVE9ETzogQ2hlY2sgZGVmaW5pdGlvbiBvZiBzaW1pbGFyIHR5cGVzIGZvciBmdW5jdGlvbnNcclxuICAgIHB1YmxpYyBzaW1pbGFyVHlwZShvdGhlcjogVHlwZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNhbWVUeXBlKG90aGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2FtZVBhcmFtVHlwZXMob3RoZXI6IEZ1bmN0aW9uVHlwZSB8IHJlYWRvbmx5IFR5cGVbXSkge1xyXG4gICAgICAgIGxldCBvdGhlclBhcmFtVHlwZXMgPSBvdGhlciBpbnN0YW5jZW9mIEZ1bmN0aW9uVHlwZSA/IG90aGVyLnBhcmFtVHlwZXMgOiBvdGhlcjtcclxuICAgICAgICBpZiAodGhpcy5wYXJhbVR5cGVzLmxlbmd0aCAhPT0gb3RoZXJQYXJhbVR5cGVzLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMucGFyYW1UeXBlcy5sZW5ndGg7ICsraSl7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXJhbVR5cGVzW2ldLnNhbWVUeXBlKG90aGVyUGFyYW1UeXBlc1tpXSkpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzYW1lUmV0dXJuVHlwZShvdGhlcjogRnVuY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmV0dXJuVHlwZS5zYW1lVHlwZShvdGhlci5yZXR1cm5UeXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2FtZVJlY2VpdmVyVHlwZShvdGhlcjogRnVuY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJlY2VpdmVyVHlwZSB8fCAhb3RoZXIucmVjZWl2ZXJUeXBlKSB7XHJcbiAgICAgICAgICAgIC8vIElmIGVpdGhlciBkb2VzIG5vdCBoYXZlIGEgcmVjZWl2ZXIsIHJldHVybiB0cnVlIG9ubHkgaWYgbmVpdGhlciBoYXMgYSByZWNlaXZlclxyXG4gICAgICAgICAgICByZXR1cm4gIXRoaXMucmVjZWl2ZXJUeXBlICYmICFvdGhlci5yZWNlaXZlclR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5yZWNlaXZlclR5cGUuc2FtZVR5cGUob3RoZXIucmVjZWl2ZXJUeXBlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2FtZVNpZ25hdHVyZShvdGhlcjogRnVuY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FtZVJlY2VpdmVyVHlwZShvdGhlcikgJiYgdGhpcy5zYW1lUGFyYW1UeXBlcyhvdGhlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzUG90ZW50aWFsT3ZlcnJpZGVyT2Yob3RoZXI6IEZ1bmN0aW9uVHlwZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNhbWVQYXJhbVR5cGVzKG90aGVyKSAmJiB0aGlzLmlzQ29uc3QgPT09IG90aGVyLmlzQ29uc3QgJiYgdGhpcy5pc1ZvbGF0aWxlID09IG90aGVyLmlzVm9sYXRpbGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHR5cGVTdHJpbmcoZXhjbHVkZUJhc2U6IGJvb2xlYW4sIHZhcm5hbWU6IHN0cmluZywgZGVjb3JhdGVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXR1cm5UeXBlLnR5cGVTdHJpbmcoZXhjbHVkZUJhc2UsIHZhcm5hbWUgKyB0aGlzLnBhcmFtU3RyVHlwZSwgZGVjb3JhdGVkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5nbGlzaFN0cmluZyhwbHVyYWw6IGJvb2xlYW4pIHtcclxuICAgICAgICByZXR1cm4gKHBsdXJhbCA/IFwiZnVuY3Rpb25zIHRoYXQgdGFrZSBcIiA6IFwiYSBmdW5jdGlvbiB0aGF0IHRha2VzIFwiKSArIHRoaXMucGFyYW1TdHJFbmdsaXNoICsgXCIgXCIgK1xyXG4gICAgICAgICAgICAgICAocGx1cmFsID8gXCJhbmQgcmV0dXJuIFwiIDogXCJhbmQgcmV0dXJucyBcIikgKyB0aGlzLnJldHVyblR5cGUuZW5nbGlzaFN0cmluZyhmYWxzZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGJ1aWx0SW5UeXBlTmFtZXMgPSBuZXcgU2V0KFtcImNoYXJcIiwgXCJpbnRcIiwgXCJib29sXCIsIFwiZmxvYXRcIiwgXCJkb3VibGVcIiwgXCJ2b2lkXCJdKTtcclxuZXhwb3J0IGZ1bmN0aW9uIGlzQnVpbHRJblR5cGVOYW1lKG5hbWU6IHN0cmluZykgOiBuYW1lIGlzIFwiY2hhclwiIHwgXCJpbnRcIiB8IFwiYm9vbFwiIHwgXCJmbG9hdFwiIHwgXCJkb3VibGVcIiB8IFwidm9pZFwiIHtcclxuICAgIHJldHVybiBidWlsdEluVHlwZU5hbWVzLmhhcyhuYW1lKTtcclxufVxyXG5leHBvcnQgY29uc3QgYnVpbHRJblR5cGVzID0ge1xyXG4gICAgXCJjaGFyXCI6IENoYXIsXHJcbiAgICBcImludFwiOiBJbnQsXHJcbiAgICBcImJvb2xcIjogQm9vbCxcclxuICAgIFwiZmxvYXRcIjogRmxvYXQsXHJcbiAgICBcImRvdWJsZVwiOiBEb3VibGUsXHJcbiAgICBcInZvaWRcIjogVm9pZFR5cGVcclxufTsiLCJpbXBvcnQgeyBQb3RlbnRpYWxQYXJhbWV0ZXJUeXBlLCBDbGFzc1R5cGUsIFR5cGUsIHNhbWVUeXBlLCBPYmplY3RUeXBlLCBCb3VuZGVkQXJyYXlUeXBlLCBDaGFyLCBBcnJheUVsZW1UeXBlLCBGdW5jdGlvblR5cGUsIHJlZmVyZW5jZUNvbXBhdGlibGUsIFJlZmVyZW5jZVR5cGUgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBDUFBFcnJvciwgTm90ZSB9IGZyb20gXCIuL2Vycm9yc1wiO1xyXG5pbXBvcnQgeyBhc3NlcnQsIE11dGFibGUsIGFzc2VydEZhbHNlLCB1bmVzY2FwZVN0cmluZyB9IGZyb20gXCIuLi91dGlsL3V0aWxcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuLi91dGlsL29ic2VydmVcIjtcclxuaW1wb3J0IHsgRGVzY3JpcHRpb24sIFJ1bnRpbWVDb25zdHJ1Y3QsIFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uLCBSdW50aW1lUG90ZW50aWFsRnVsbEV4cHJlc3Npb24gfSBmcm9tIFwiLi9jb25zdHJ1Y3RzXCI7XHJcbmltcG9ydCB7IFNpbXBsZURlY2xhcmF0aW9uLCBGdW5jdGlvbkRlZmluaXRpb24sIEdsb2JhbE9iamVjdERlZmluaXRpb24sIExvY2FsVmFyaWFibGVEZWZpbml0aW9uLCBQYXJhbWV0ZXJEZWZpbml0aW9uLCBzZWxlY3RPdmVybG9hZGVkRGVmaW5pdGlvbiwgTGlua2VkRGVmaW5pdGlvbiB9IGZyb20gXCIuL2RlY2xhcmF0aW9uc1wiO1xyXG5pbXBvcnQgeyBDUFBPYmplY3QsIEF1dG9PYmplY3QsIFN0YXRpY09iamVjdCwgU3RyaW5nTGl0ZXJhbE9iamVjdCwgVGVtcG9yYXJ5T2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0c1wiO1xyXG5pbXBvcnQgeyBNZW1vcnkgfSBmcm9tIFwiLi9ydW50aW1lRW52aXJvbm1lbnRcIjtcclxuaW1wb3J0IHsgRXhwcmVzc2lvbiwgQXV4aWxpYXJ5RXhwcmVzc2lvbiwgRXhwcmVzc2lvbkNvbnRleHQgfSBmcm9tIFwiLi9leHByZXNzaW9uc1wiO1xyXG5pbXBvcnQgeyBSdW50aW1lRnVuY3Rpb24gfSBmcm9tIFwiLi9mdW5jdGlvbnNcIjtcclxuaW1wb3J0IHsgc3RhbmRhcmRDb252ZXJzaW9uIH0gZnJvbSBcIi4vc3RhbmRhcmRDb252ZXJzaW9uc1wiO1xyXG5cclxuXHJcbmludGVyZmFjZSBOb3JtYWxMb29rdXBPcHRpb25zIHtcclxuICAgIHJlYWRvbmx5IGtpbmQ6IFwibm9ybWFsXCI7XHJcbiAgICByZWFkb25seSBvd24/OiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgbm9CYXNlPzogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIEV4YWN0TG9va3VwT3B0aW9ucyB7XHJcbiAgICByZWFkb25seSBraW5kOiBcImV4YWN0XCI7XHJcbiAgICByZWFkb25seSBvd24/OiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgbm9CYXNlPzogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IHBhcmFtVHlwZXM6IHJlYWRvbmx5IFBvdGVudGlhbFBhcmFtZXRlclR5cGVbXVxyXG4gICAgcmVhZG9ubHkgcmVjZWl2ZXJUeXBlPzogQ2xhc3NUeXBlO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBOYW1lTG9va3VwT3B0aW9ucyA9IE5vcm1hbExvb2t1cE9wdGlvbnMgfCBFeGFjdExvb2t1cE9wdGlvbnM7XHJcblxyXG5leHBvcnQgY2xhc3MgU2NvcGUge1xyXG5cclxuICAgIC8vIHByaXZhdGUgc3RhdGljIEhJRERFTiA9IFN5bWJvbChcIkhJRERFTlwiKTtcclxuICAgIC8vIHByaXZhdGUgc3RhdGljIE5PX01BVENIID0gU3ltYm9sKFwiTk9fTUFUQ0hcIik7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbnRpdGllczoge1tpbmRleDpzdHJpbmddOiBEZWNsYXJlZE9iamVjdEVudGl0eSB8IEZ1bmN0aW9uRW50aXR5W10gfCB1bmRlZmluZWR9O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHBhcmVudD86IFNjb3BlO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwYXJlbnQ/OiBTY29wZSkge1xyXG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSB7fTtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgbGV0IHN0ciA9IFwiXCI7XHJcbiAgICAgICAgZm9yKGxldCBrZXkgaW4gdGhpcy5lbnRpdGllcykge1xyXG4gICAgICAgICAgICBzdHIgKz0gdGhpcy5lbnRpdGllc1trZXldICsgXCJcXG5cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgYWxsRW50aXRpZXMoKSB7XHJcbiAgICAvLyAgICAgdmFyIGVudHMgPSBbXTtcclxuICAgIC8vICAgICBmb3IodmFyIG5hbWUgaW4gdGhpcy5lbnRpdGllcykge1xyXG4gICAgLy8gICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmVudGl0aWVzW25hbWVdKSkge1xyXG4gICAgLy8gICAgICAgICAgICAgdmFyIGUgPSA8Q1BQRW50aXR5W10+dGhpcy5lbnRpdGllc1tuYW1lXTtcclxuICAgIC8vICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgZW50cy5wdXNoKGVbaV0pO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgICAgICBlbnRzLnB1c2godGhpcy5lbnRpdGllc1tuYW1lXSk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgcmV0dXJuIGVudHM7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gVE9ETyBORVc6IHRoaXMgZG9jdW1lbnRhdGlvbiBpcyBraW5kIG9mIG1lc3N5IChidXQgaGV5LCBhdCBsZWFzdCBpdCBleGlzdHMhKVxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRlbXB0cyB0byBhZGQgYSBuZXcgZW50aXR5IHRvIHRoaXMgc2NvcGUuXHJcbiAgICAgKiBAcGFyYW0ge0RlY2xhcmVkRW50aXR5fSBuZXdFbnRpdHkgLSBUaGUgZW50aXR5IHRvIGF0dGVtcHQgdG8gYWRkLlxyXG4gICAgICogQHJldHVybnMge0RlY2xhcmVkRW50aXR5fSBFaXRoZXIgdGhlIGVudGl0eSB0aGF0IHdhcyBhZGRlZCwgb3IgYW4gZXhpc3Rpbmcgb25lIGFscmVhZHkgdGhlcmUsIGFzc3VtaW5nIGl0IHdhcyBjb21wYXRpYmxlLlxyXG4gICAgICogQHRocm93cyAge1NlbWFudGljRXhjZXB0aW9ufSBJZiBhbiBlcnJvciBwcmV2ZW50cyB0aGUgZW50aXR5IGJlaW5nIGFkZGVkIHN1Y2Nlc3NmdWxseS4gKGUuZy4gRnVuY3Rpb24gZGVjbGFyYXRpb25zIHdpdGhcclxuICAgICAqIHRoZSBzYW1lIHNpZ25hdHVyZSBidXQgYSBtaXNtYXRjaCBvZiByZXR1cm4gdHlwZXMpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGREZWNsYXJlZEVudGl0eShuZXdFbnRpdHk6IERlY2xhcmVkRW50aXR5KSB7XHJcbiAgICAgICAgbGV0IGV4aXN0aW5nRW50aXR5ID0gdGhpcy5lbnRpdGllc1tuZXdFbnRpdHkubmFtZV07XHJcblxyXG4gICAgICAgIGlmICghZXhpc3RpbmdFbnRpdHkpIHsgLy8gTm8gcHJldmlvdXMgZW50aXR5IHdpdGggdGhpcyBuYW1lLCBzbyBqdXN0IGFkZCBpdFxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdGllc1tuZXdFbnRpdHkubmFtZV0gPSBuZXdFbnRpdHkgaW5zdGFuY2VvZiBGdW5jdGlvbkVudGl0eSA/IFtuZXdFbnRpdHldIDogbmV3RW50aXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gbmV3RW50aXR5Lm1lcmdlSW50byhleGlzdGluZ0VudGl0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHJvdGVjdGVkIGRlY2xhcmVkRW50aXR5QWRkZWQoZW50OiBEZWNsYXJlZEVudGl0eSkge1xyXG4gICAgICAgIFxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHB1YmxpYyBzaW5nbGVMb29rdXAobmFtZTogc3RyaW5nLCBvcHRpb25zOiBOYW1lTG9va3VwT3B0aW9ucykge1xyXG4gICAgLy8gICAgIHZhciByZXN1bHQgPSB0aGlzLmxvb2t1cChuYW1lLCBvcHRpb25zKTtcclxuICAgIC8vICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKXtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHJlc3VsdFswXTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gcHVibGljIHJlcXVpcmVkTG9va3VwKG5hbWUsIG9wdGlvbnMpe1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmlfcmVxdWlyZWRMb29rdXBJbXBsKHRoaXMubG9va3VwKG5hbWUsIG9wdGlvbnMpLCBuYW1lLCBvcHRpb25zKTtcclxuICAgIC8vIH1cclxuICAgIC8vIHByaXZhdGUgaV9yZXF1aXJlZExvb2t1cEltcGwocmVzLCBuYW1lLCBvcHRpb25zKSB7XHJcbiAgICAvLyAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICAvLyAgICAgaWYgKCFyZXMpe1xyXG4gICAgLy8gICAgICAgICBpZiAob3B0aW9ucy5wYXJhbVR5cGVzIHx8IG9wdGlvbnMucGFyYW1zKXtcclxuICAgIC8vICAgICAgICAgICAgIHRocm93IFNlbWFudGljRXhjZXB0aW9ucy5Ob01hdGNoLmluc3RhbmNlKHRoaXMsIG5hbWUsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgb3B0aW9ucy5wYXJhbVR5cGVzIHx8IG9wdGlvbnMucGFyYW1zICYmIG9wdGlvbnMucGFyYW1zLm1hcChmdW5jdGlvbihwKXtyZXR1cm4gcC50eXBlO30pLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIG9wdGlvbnMuaXNUaGlzQ29uc3RcclxuICAgIC8vICAgICAgICAgICAgICk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgICAgIHRocm93IFNlbWFudGljRXhjZXB0aW9ucy5Ob3RGb3VuZC5pbnN0YW5jZSh0aGlzLCBuYW1lKTtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBlbHNlIGlmKEFycmF5LmlzQXJyYXkocmVzKSl7XHJcbiAgICAvLyAgICAgICAgIGlmIChyZXMgPT09IFNjb3BlLkhJRERFTil7XHJcbiAgICAvLyAgICAgICAgICAgICB0aHJvdyBTZW1hbnRpY0V4Y2VwdGlvbnMuSGlkZGVuLmluc3RhbmNlKHRoaXMsIG5hbWUsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgb3B0aW9ucy5wYXJhbVR5cGVzIHx8IG9wdGlvbnMucGFyYW1zICYmIG9wdGlvbnMucGFyYW1zLm1hcChmdW5jdGlvbihwKXtyZXR1cm4gcC50eXBlO30pLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIG9wdGlvbnMuaXNUaGlzQ29uc3QpO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGlmIChyZXMubGVuZ3RoID09PSAwKXtcclxuICAgIC8vICAgICAgICAgICAgIHRocm93IFNlbWFudGljRXhjZXB0aW9ucy5Ob01hdGNoLmluc3RhbmNlKHRoaXMsIG5hbWUsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgb3B0aW9ucy5wYXJhbVR5cGVzIHx8IG9wdGlvbnMucGFyYW1zICYmIG9wdGlvbnMucGFyYW1zLm1hcChmdW5jdGlvbihwKXtyZXR1cm4gcC50eXBlO30pLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIG9wdGlvbnMuaXNUaGlzQ29uc3RcclxuICAgIC8vICAgICAgICAgICAgICk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAxKXtcclxuICAgIC8vICAgICAgICAgICAgIHRocm93IFNlbWFudGljRXhjZXB0aW9ucy5BbWJpZ3VpdHkuaW5zdGFuY2UodGhpcywgbmFtZSk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgcmV0dXJuIHJlc1swXTtcclxuICAgIC8vICAgICB9XHJcblxyXG4gICAgLy8gICAgIHJldHVybiByZXM7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gLy8gVE9ETzogdGhpcyBzaG91bGQgYmUgYSBtZW1iZXIgZnVuY3Rpb24gb2YgdGhlIFByb2dyYW0gY2xhc3NcclxuICAgIC8vIHB1YmxpYyBxdWFsaWZpZWRMb29rdXAobmFtZXMsIG9wdGlvbnMpe1xyXG4gICAgLy8gICAgIGFzc2VydChBcnJheS5pc0FycmF5KG5hbWVzKSAmJiBuYW1lcy5sZW5ndGggPiAwKTtcclxuICAgIC8vICAgICB2YXIgc2NvcGUgPSB0aGlzLnNpbS5nZXRHbG9iYWxTY29wZSgpO1xyXG4gICAgLy8gICAgIGZvcih2YXIgaSA9IDA7IHNjb3BlICYmIGkgPCBuYW1lcy5sZW5ndGggLSAxOyArK2kpe1xyXG4gICAgLy8gICAgICAgICBzY29wZSA9IHNjb3BlLmNoaWxkcmVuW25hbWVzW2ldLmlkZW50aWZpZXJdO1xyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgaWYgKCFzY29wZSl7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgdmFyIG5hbWUgPSBuYW1lcy5sYXN0KCkuaWRlbnRpZmllcjtcclxuICAgIC8vICAgICB2YXIgcmVzdWx0ID0gc2NvcGUubG9va3VwKG5hbWUsIGNvcHlNaXhpbihvcHRpb25zLCB7cXVhbGlmaWVkOnRydWV9KSk7XHJcblxyXG4gICAgLy8gICAgIC8vIFF1YWxpZmllZCBsb29rdXAgc3VwcHJlc3NlcyB2aXJ0dWFsIGZ1bmN0aW9uIGNhbGwgbWVjaGFuaXNtLCBzbyBpZiB3ZVxyXG4gICAgLy8gICAgIC8vIGp1c3QgbG9va2VkIHVwIGEgTWVtYmVyRnVuY3Rpb25FbnRpdHksIHdlIGNyZWF0ZSBhIHByb3h5IHRvIGRvIHRoYXQuXHJcbiAgICAvLyAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSl7XHJcbiAgICAvLyAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5tYXAoZnVuY3Rpb24oZWxlbSl7XHJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm4gZWxlbSBpbnN0YW5jZW9mIE1lbWJlckZ1bmN0aW9uRW50aXR5ID8gZWxlbS5zdXBwcmVzc2VkVmlydHVhbFByb3h5KCkgOiBlbGVtO1xyXG4gICAgLy8gICAgICAgICB9KTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIC8vIH1cclxuXHJcbiAgICBwdWJsaWMgbG9va3VwKG5hbWU6IHN0cmluZywgb3B0aW9uczogTmFtZUxvb2t1cE9wdGlvbnMgPSB7a2luZDpcIm5vcm1hbFwifSkgOiBEZWNsYXJlZE9iamVjdEVudGl0eSB8IEZ1bmN0aW9uRW50aXR5W10gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAgICAgICBhc3NlcnQoIW5hbWUuaW5jbHVkZXMoXCI6OlwiKSwgXCJRdWFsaWZpZWQgbmFtZSB1c2VkIHdpdGggdW5xdWFsaWZpZWQgbG9vb2t1cCBmdW5jdGlvbi5cIik7XHJcblxyXG4gICAgICAgIGxldCBlbnQgPSB0aGlzLmVudGl0aWVzW25hbWVdO1xyXG5cclxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGFuIGVudGl0eSBpbiB0aGlzIHNjb3BlIGFuZCB3ZSBkaWRuJ3Qgc3BlY2lmeSB3ZVxyXG4gICAgICAgIC8vIHdhbnRlZCBhbiBvd24gZW50aXR5LCBsb29rIGluIHBhcmVudCBzY29wZSAoaWYgdGhlcmUgaXMgb25lKVxyXG4gICAgICAgIGlmICghZW50ICYmICFvcHRpb25zLm93biAmJiB0aGlzLnBhcmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQubG9va3VwKG5hbWUsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgd2UgZGlkbid0IGZpbmQgYW55dGhpbmcsIHJldHVybiBudWxsXHJcbiAgICAgICAgaWYgKCFlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnQpKSB7XHJcbiAgICAgICAgICAgIC8vIElmIGl0J3Mgbm90IGFuIGFycmF5LCBpdCdzIGEgc2luZ2xlIGVudGl0eSBzbyByZXR1cm4gaXRcclxuICAgICAgICAgICAgcmV0dXJuIGVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB2aWFibGUgPSBlbnQ7IC8vIGEgc2V0IG9mIHBvdGVudGlhbGx5IHZpYWJsZSBmdW5jdGlvbiBvdmVybG9hZHNcclxuXHJcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIGxvb2tpbmcgZm9yIGFuIGV4YWN0IG1hdGNoIG9mIHBhcmFtZXRlciB0eXBlc1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5raW5kID09PSBcImV4YWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtVHlwZXMgPSBvcHRpb25zLnBhcmFtVHlwZXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWNlaXZlclR5cGUgPSBvcHRpb25zLnJlY2VpdmVyVHlwZTtcclxuICAgICAgICAgICAgICAgIHZpYWJsZSA9IGVudC5maWx0ZXIoKGNhbmQpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCBwYXJhbWV0ZXIgdHlwZXMgbWF0Y2hcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbmQudHlwZS5zYW1lUGFyYW1UeXBlcyhwYXJhbVR5cGVzKSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY2VpdmVyVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByZWNlaXZlciB0eXBlIGlzIGRlZmluZWQsIGNhbmRpZGF0ZSBtdXN0IGFsc28gaGF2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIHJlY2VpdmVyIGFuZCB0aGUgcHJlc2VuY2UvYWJzZW5jZSBvZiBjb25zdCBtdXN0IG1hdGNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IHRoZSBhY3R1YWwgcmVjZWl2ZXIgdHlwZSBkb2VzIG5vdCBuZWVkIHRvIG1hdGNoLCBqdXN0IHRoZSBjb25zdG5lc3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbmQudHlwZS5yZWNlaXZlclR5cGUgJiYgcmVjZWl2ZXJUeXBlLmlzQ29uc3QgPT09IGNhbmQudHlwZS5pc0NvbnN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbm8gcmVjZWl2ZXIgdHlwZSBpcyBkZWZpbmVkLCBjYW5kaWRhdGUgbXVzdCBub3QgaGF2ZSBhIHJlY2VpdmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhY2FuZC50eXBlLnJlY2VpdmVyVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbmQudHlwZS5zYW1lUGFyYW1UeXBlcyhwYXJhbVR5cGVzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB2aWFibGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIC8vIElmIHdlJ3JlIGxvb2tpbmcgZm9yIHNvbWV0aGluZyB0aGF0IGNvdWxkIGJlIGNhbGxlZCB3aXRoIGdpdmVuIHBhcmFtZXRlciB0eXBlcywgaW5jbHVkaW5nIGNvbnZlcnNpb25zXHJcbiAgICAgICAgICAgIC8vIGVsc2UgaWYgKG9wdGlvbnMucGFyYW1UeXBlcykge1xyXG4gICAgICAgICAgICAvLyAgICAgLy8gdmFyIHBhcmFtcyA9IG9wdGlvbnMucGFyYW1zIHx8IG9wdGlvbnMucGFyYW1UeXBlcyAmJiBmYWtlRXhwcmVzc2lvbnNGcm9tVHlwZXMob3B0aW9ucy5wYXJhbVR5cGVzKTtcclxuICAgICAgICAgICAgLy8gICAgIHZpYWJsZSA9IG92ZXJsb2FkUmVzb2x1dGlvbihlbnQsIG9wdGlvbnMucGFyYW1UeXBlcywgb3B0aW9ucy5yZWNlaXZlclR5cGUpLnZpYWJsZSB8fCBbXTtcclxuICAgICAgICAgICAgLy8gICAgIHJldHVybiB2aWFibGVbMF07XHJcbiAgICAgICAgICAgIC8vICAgICAvLyBUT0RPIC0gc2hvdWxkIGdpdmUgZXJyb3IgaWYgdGhlcmUncyBtdWx0aXBsZSBlbGVtZW50cyBpLmUuIGFuIGFtYmlndWl0eVxyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdmlhYmxlO1xyXG5cclxuICAgICAgICAgICAgLy8gLy8gSWYgdmlhYmxlIGlzIGVtcHR5LCBub3QgZm91bmQuXHJcbiAgICAgICAgICAgIC8vIGlmICh2aWFibGUgJiYgdmlhYmxlLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgICAgICAgIC8vICAgICAvLyBDaGVjayB0byBzZWUgaWYgd2UgY291bGQgaGF2ZSBmb3VuZCBpdCBleGNlcHQgZm9yIG5hbWUgaGlkaW5nXHJcbiAgICAgICAgICAgIC8vICAgICBpZiAoIW9wdGlvbnMub3duICYmIHRoaXMucGFyZW50KXtcclxuICAgICAgICAgICAgLy8gICAgICAgICB2YXIgY291bGRIYXZlID0gdGhpcy5wYXJlbnQubG9va3VwKG5hbWUsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIGlmIChjb3VsZEhhdmUgJiYgKCFBcnJheS5pc0FycmF5KGNvdWxkSGF2ZSkgfHwgY291bGRIYXZlLmxlbmd0aCA9PT0gMSB8fCBjb3VsZEhhdmUgPT09IFNjb3BlLkhJRERFTikpe1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBpZiAob3B0aW9ucy5ub05hbWVIaWRpbmcpe1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdWxkSGF2ZTtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIFNjb3BlLkhJRERFTjtcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgLy8gICAgIHJldHVybiBTY29wZS5OT19NQVRDSDtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAvLyBlbHNle1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIHZpYWJsZTtcclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCbG9ja1Njb3BlIGV4dGVuZHMgU2NvcGUge1xyXG5cclxuICAgIC8vIHByb3RlY3RlZCBkZWNsYXJlZEVudGl0eUFkZGVkKGVudDogRGVjbGFyZWRFbnRpdHkpIHtcclxuICAgIC8vICAgICBpZiAoZW50IGluc3RhbmNlb2YgQXV0b0VudGl0eSkge1xyXG4gICAgICAgICAgICBcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gcHJpdmF0ZSBhZGRBdXRvbWF0aWNFbnRpdHkgOiBmdW5jdGlvbihvYmope1xyXG4gICAgLy8gICAgIGFzc2VydCh0aGlzLnBhcmVudCwgXCJPYmplY3RzIHdpdGggYXV0b21hdGljIHN0b3JhZ2UgZHVyYXRpb24gc2hvdWxkIGFsd2F5cyBiZSBpbnNpZGUgc29tZSBibG9jayBzY29wZSBpbnNpZGUgYSBmdW5jdGlvbi5cIik7XHJcbiAgICAvLyAgICAgdGhpcy5wYXJlbnQuYWRkQXV0b21hdGljRW50aXR5KG9iaik7XHJcbiAgICAvLyB9LFxyXG4gICAgLy8gcHJpdmF0ZSBhZGRSZWZlcmVuY2VFbnRpdHkgOiBmdW5jdGlvbihvYmope1xyXG4gICAgLy8gICAgIGFzc2VydCh0aGlzLnBhcmVudCk7XHJcbiAgICAvLyAgICAgdGhpcy5wYXJlbnQuYWRkUmVmZXJlbmNlRW50aXR5KG9iaik7XHJcbiAgICAvLyB9LFxyXG4gICAgLy8gcHJpdmF0ZSBhZGRTdGF0aWNFbnRpdHkgOiBmdW5jdGlvbihlbnQpIHtcclxuICAgIC8vICAgICB0aGlzLnNpbS5hZGRTdGF0aWNFbnRpdHkoZW50KTtcclxuICAgIC8vIH0sXHJcbiAgICAvLyBtZXJnZSA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIE5vdGhpbmcgaW4gaGVyZSBzaG91bGQgaGF2ZSBsaW5rYWdlLCByaWdodD9cclxuICAgICAgICAvLyBVbmxlc3MgSSBhbGxvdyBmdW5jdGlvbi9jbGFzcyBkZWNsYXJhdGlvbnMsIGV0Yy4gaW5zaWRlIGJsb2Nrcywgd2hpY2ggSSBjdXJyZW50bHkgZG9uJ3RcclxuICAgIC8vIH1cclxuXHJcblxyXG59XHJcblxyXG4vLyBleHBvcnQgY2xhc3MgRnVuY3Rpb25CbG9ja1Njb3BlIGV4dGVuZHMgQmxvY2tTY29wZSB7XHJcbi8vICAgICBfbmFtZTogXCJGdW5jdGlvbkJsb2NrU2NvcGVcIixcclxuLy8gICAgIGluaXQ6IGZ1bmN0aW9uKHBhcmVudCwgc2ltKXtcclxuLy8gICAgICAgICB0aGlzLmluaXRQYXJlbnQocGFyZW50LCBzaW0pO1xyXG4vLyAgICAgICAgIHRoaXMuYXV0b21hdGljT2JqZWN0cyA9IFtdO1xyXG4vLyAgICAgICAgIHRoaXMucmVmZXJlbmNlT2JqZWN0cyA9IFtdO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIGFkZEF1dG9tYXRpY0VudGl0eSA6IGZ1bmN0aW9uKG9iail7XHJcbi8vICAgICAgICAgdGhpcy5hdXRvbWF0aWNPYmplY3RzLnB1c2gob2JqKTtcclxuLy8gICAgIH0sXHJcbi8vICAgICBhZGRSZWZlcmVuY2VFbnRpdHkgOiBmdW5jdGlvbihvYmope1xyXG4vLyAgICAgICAgIHRoaXMucmVmZXJlbmNlT2JqZWN0cy5wdXNoKG9iaik7XHJcbi8vICAgICB9LFxyXG4vLyAgICAgYWRkU3RhdGljRW50aXR5IDogZnVuY3Rpb24oZW50KSB7XHJcbi8vICAgICAgICAgdGhpcy5zaW0uYWRkU3RhdGljRW50aXR5KGVudCk7XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbmV4cG9ydCBjbGFzcyBOYW1lc3BhY2VTY29wZSBleHRlbmRzIFNjb3BlIHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjaGlsZHJlbjoge1tpbmRleDpzdHJpbmddOiBOYW1lc3BhY2VTY29wZSB8IHVuZGVmaW5lZH07XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgcGFyZW50PzogTmFtZXNwYWNlU2NvcGUpIHtcclxuICAgICAgICBzdXBlcihwYXJlbnQpO1xyXG4gICAgICAgIGFzc2VydCghcGFyZW50IHx8IHBhcmVudCBpbnN0YW5jZW9mIE5hbWVzcGFjZVNjb3BlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSB7fTtcclxuICAgICAgICBpZihwYXJlbnQpIHtcclxuICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFkZENoaWxkKGNoaWxkOiBOYW1lc3BhY2VTY29wZSkge1xyXG4gICAgICAgIGlmKGNoaWxkLm5hbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltjaGlsZC5uYW1lXSA9IGNoaWxkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGFkZEF1dG9tYXRpY0VudGl0eSA6IGZ1bmN0aW9uKG9iail7XHJcbiAgICAvLyAgICAgYXNzZXJ0KGZhbHNlLCBcIkNhbid0IGFkZCBhbiBhdXRvbWF0aWMgZW50aXR5IHRvIGEgbmFtZXNwYWNlIHNjb3BlLlwiKTtcclxuICAgIC8vIH0sXHJcbiAgICAvLyBhZGRSZWZlcmVuY2VFbnRpdHkgOiBmdW5jdGlvbihvYmope1xyXG4gICAgLy8gICAgIGFzc2VydChmYWxzZSwgXCJUT0RPXCIpO1xyXG4gICAgLy8gfSxcclxuICAgIC8vIGFkZFN0YXRpY0VudGl0eSA6IGZ1bmN0aW9uKGVudCkge1xyXG4gICAgLy8gICAgIHRoaXMuc2ltLmFkZFN0YXRpY0VudGl0eShlbnQpO1xyXG4gICAgLy8gfSxcclxuXHJcbiAgICAvLyBtZXJnZSA6IGZ1bmN0aW9uIChvdGhlclNjb3BlLCBvbkVycikge1xyXG4gICAgLy8gICAgIGZvcih2YXIgbmFtZSBpbiBvdGhlclNjb3BlLmVudGl0aWVzKXtcclxuICAgIC8vICAgICAgICAgdmFyIG90aGVyRW50aXR5ID0gb3RoZXJTY29wZS5lbnRpdGllc1tuYW1lXTtcclxuICAgIC8vICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3RoZXJFbnRpdHkpKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgb3RoZXJFbnRpdHkubGVuZ3RoOyArK2kpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZERlY2xhcmVkRW50aXR5KG90aGVyRW50aXR5W2ldKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgb25FcnIoZSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgICAgICB0cnkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHRoaXMuYWRkRGVjbGFyZWRFbnRpdHkob3RoZXJFbnRpdHkpO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBvbkVycihlKTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgLy8gTWVyZ2UgaW4gYWxsIGNoaWxkIHNjb3BlcyBmcm9tIHRoZSBvdGhlclxyXG4gICAgLy8gICAgIGZvcih2YXIgY2hpbGROYW1lIGluIG90aGVyU2NvcGUuY2hpbGRyZW4pIHtcclxuICAgIC8vICAgICAgICAgaWYgKCF0aGlzLmNoaWxkcmVuW2NoaWxkTmFtZV0pIHtcclxuICAgIC8vICAgICAgICAgICAgIC8vIElmIGEgbWF0Y2hpbmcgY2hpbGQgc2NvcGUgZG9lc24ndCBhbHJlYWR5IGV4aXN0LCBjcmVhdGUgaXRcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5bY2hpbGROYW1lXSA9IE5hbWVzcGFjZVNjb3BlLmluc3RhbmNlKGNoaWxkTmFtZSwgdGhpcywgdGhpcy5zaW0pO1xyXG4gICAgLy8gICAgICAgICB9XHJcblxyXG4gICAgLy8gICAgICAgICB0aGlzLmNoaWxkcmVuW2NoaWxkTmFtZV0ubWVyZ2Uob3RoZXJTY29wZS5jaGlsZHJlbltjaGlsZE5hbWVdLCBvbkVycik7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG59XHJcblxyXG5cclxuLy8gZXhwb3J0IHZhciBDbGFzc1Njb3BlID0gTmFtZXNwYWNlU2NvcGUuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkNsYXNzU2NvcGVcIixcclxuXHJcbi8vICAgICBpbml0OiBmdW5jdGlvbihuYW1lLCBwYXJlbnQsIGJhc2UsIHNpbSl7XHJcbi8vICAgICAgICAgdGhpcy5pbml0UGFyZW50KG5hbWUsIHBhcmVudCwgc2ltKTtcclxuLy8gICAgICAgICBpZihiYXNlKXtcclxuLy8gICAgICAgICAgICAgYXNzZXJ0KGJhc2UgaW5zdGFuY2VvZiBDbGFzc1Njb3BlKTtcclxuLy8gICAgICAgICAgICAgdGhpcy5iYXNlID0gYmFzZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGxvb2t1cCA6IGZ1bmN0aW9uKG5hbWUsIG9wdGlvbnMpe1xyXG4vLyAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4vLyAgICAgICAgIC8vIElmIHNwZWNpZmllZCwgd2lsbCBub3QgbG9vayB1cCBpbiBiYXNlIGNsYXNzIHNjb3Blc1xyXG4vLyAgICAgICAgIGlmIChvcHRpb25zLm5vQmFzZSl7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBTY29wZS5sb29rdXAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLm1lbWJlckxvb2t1cChuYW1lLCBvcHRpb25zKSB8fCBTY29wZS5sb29rdXAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgcmVxdWlyZWRNZW1iZXJMb29rdXAgOiBmdW5jdGlvbihuYW1lLCBvcHRpb25zKXtcclxuLy8gICAgICAgICByZXR1cm4gdGhpcy5pX3JlcXVpcmVkTG9va3VwSW1wbCh0aGlzLm1lbWJlckxvb2t1cChuYW1lLCBvcHRpb25zKSwgbmFtZSwgb3B0aW9ucyk7XHJcbi8vICAgICB9LFxyXG4vLyAgICAgbWVtYmVyTG9va3VwIDogZnVuY3Rpb24obmFtZSwgb3B0aW9ucyl7XHJcbi8vICAgICAgICAgdmFyIG93biA9IFNjb3BlLmxvb2t1cC5jYWxsKHRoaXMsIG5hbWUsIGNvcHlNaXhpbihvcHRpb25zLCB7b3duOnRydWV9KSk7XHJcbi8vICAgICAgICAgaWYgKCFvd24pe1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gIW9wdGlvbnMubm9CYXNlICYmIHRoaXMuYmFzZSAmJiB0aGlzLmJhc2UubWVtYmVyTG9va3VwKG5hbWUsIG9wdGlvbnMpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvd24pICYmIG93bi5sZW5ndGggPT09IDApe1xyXG4vLyAgICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgd2UgY291bGQgaGF2ZSBmb3VuZCBpdCBleGNlcHQgZm9yIG5hbWUgaGlkaW5nXHJcbi8vICAgICAgICAgICAgIC8vIChJZiB3ZSBldmVyIGdvdCBhbiBhcnJheSwgcmF0aGVyIHRoYW4ganVzdCBudWxsLCBpdCBtZWFucyB3ZSBmb3VuZCBhIG1hdGNoXHJcbi8vICAgICAgICAgICAgIC8vIHdpdGggdGhlIG5hbWUgZm9yIGEgc2V0IG9mIG92ZXJsb2FkZWQgZnVuY3Rpb25zLCBidXQgbm9uZSB3ZXJlIHZpYWJsZSlcclxuLy8gICAgICAgICAgICAgaWYgKCFvcHRpb25zLm5vQmFzZSAmJiB0aGlzLmJhc2Upe1xyXG4vLyAgICAgICAgICAgICAgICAgdmFyIGNvdWxkSGF2ZSA9IHRoaXMuYmFzZS5tZW1iZXJMb29rdXAobmFtZSwgb3B0aW9ucyk7XHJcbi8vICAgICAgICAgICAgICAgICBpZiAoY291bGRIYXZlICYmICghQXJyYXkuaXNBcnJheShjb3VsZEhhdmUpIHx8IGNvdWxkSGF2ZS5sZW5ndGggPT09IDEgfHwgY291bGRIYXZlID09PSBTY29wZS5ISURERU4pKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5ub05hbWVIaWRpbmcpe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY291bGRIYXZlO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2NvcGUuSElEREVOO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICByZXR1cm4gU2NvcGUuTk9fTUFUQ0g7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIHJldHVybiBvd247XHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG5cclxuZXhwb3J0IHR5cGUgRW50aXR5SUQgPSBudW1iZXI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ1BQRW50aXR5PFQgZXh0ZW5kcyBUeXBlID0gVHlwZT4ge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX25leHRFbnRpdHlJZCA9IDA7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSh0aGlzKTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZW50aXR5SWQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlOiBUO1xyXG5cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBNb3N0IGVudGl0aWVzIHdpbGwgaGF2ZSBhIG5hdHVyYWwgdHlwZSwgYnV0IGEgZmV3IHdpbGwgbm90IChlLmcuIG5hbWVzcGFjZXMpLiBJbiB0aGlzIGNhc2UsXHJcbiAgICAgKiB0aGUgdHlwZSB3aWxsIGJlIG51bGwuXHJcbiAgICAgKiBUT0RPOiBmaXggdGhpcyAtIHRoZXJlIHNob3VsZCBwcm9iYWJseSBiZSBhIHN1YnR5cGUgb3IgaW50ZXJmYWNlIGZvciBhIFR5cGVkRW50aXR5IG9yIE9iamVjdEVudGl0eVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodHlwZTogVCkge1xyXG4gICAgICAgIHRoaXMuZW50aXR5SWQgPSBDUFBFbnRpdHkuX25leHRFbnRpdHlJZCsrO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IGRlc2NyaWJlKCkgOiBEZXNjcmlwdGlvbjtcclxuXHJcbiAgICAvLyAvLyBUT0RPOiBkb2VzIHRoaXMgYmVsb25nIGhlcmU/XHJcbiAgICAvLyBwdWJsaWMgaXNMaWJyYXJ5Q29uc3RydWN0KCkge1xyXG4gICAgLy8gICAgIHJldHVybiBmYWxzZVxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIC8vIFRPRE86IGRvZXMgdGhpcyBiZWxvbmcgaGVyZT9cclxuICAgIC8vIHB1YmxpYyBpc0xpYnJhcnlVbnN1cHBvcnRlZCgpIHtcclxuICAgIC8vICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy9UT0RPOiBmdW5jdGlvbiBmb3IgaXNPZHJVc2VkKCk/XHJcbn07XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTmFtZWRFbnRpdHk8VCBleHRlbmRzIFR5cGUgPSBUeXBlPiBleHRlbmRzIENQUEVudGl0eTxUPiB7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGwgTmFtZWRFbnRpdHlzIHdpbGwgaGF2ZSBhIG5hbWUsIGJ1dCBpbiBzb21lIGNhc2VzIHRoaXMgbWlnaHQgYmUgXCJcIi4gZS5nLiBhbiB1bm5hbWVkIG5hbWVzcGFjZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHR5cGU6IFQsIG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKHR5cGUpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEZWNsYXJlZEVudGl0eUJhc2U8VCBleHRlbmRzIFR5cGUgPSBUeXBlPiBleHRlbmRzIE5hbWVkRW50aXR5PFQ+IHtcclxuXHJcbiAgICAvLyAvKipcclxuICAgIC8vICAqIElmIG5laXRoZXIgZW50aXR5IGlzIGRlZmluZWQsIGRvZXMgbm90aGluZy5cclxuICAgIC8vICAqIElmIGV4YWN0bHkgb25lIGVudGl0eSBpcyBkZWZpbmVkLCBnaXZlcyB0aGF0IGRlZmluaXRpb24gdG8gdGhlIG90aGVyIG9uZSBhcyB3ZWxsLlxyXG4gICAgLy8gICogSWYgYm90aCBlbnRpdGllcyBhcmUgZGVmaW5lZCwgdGhyb3dzIGFuIGV4Y2VwdGlvbi4gSWYgdGhlIGVudGl0aWVzIGFyZSBmdW5jdGlvbnMgd2l0aFxyXG4gICAgLy8gICogdGhlIHNhbWUgc2lnbmF0dXJlIGFuZCBkaWZmZXJlbnQgcmV0dXJuIHR5cGVzLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxyXG4gICAgLy8gICogUkVRVUlSRVM6IEJvdGggZW50aXRpZXMgc2hvdWxkIGhhdmUgdGhlIHNhbWUgdHlwZS4gKGZvciBmdW5jdGlvbnMsIHRoZSBzYW1lIHNpZ25hdHVyZSlcclxuICAgIC8vICAqIEBwYXJhbSBlbnRpdHkxIC0gQW4gZW50aXR5IGFscmVhZHkgcHJlc2VudCBpbiBhIHNjb3BlLlxyXG4gICAgLy8gICogQHBhcmFtIGVudGl0eTIgLSBBIG5ldyBlbnRpdHkgbWF0Y2hpbmcgdGhlIG9yaWdpbmFsIG9uZS5cclxuICAgIC8vICAqIEB0aHJvd3Mge05vdGV9XHJcbiAgICAvLyAgKi9cclxuICAgIC8vIHB1YmxpYyBzdGF0aWMgbWVyZ2UoZW50aXR5MTogRGVjbGFyZWRFbnRpdHksIGVudGl0eTI6IERlY2xhcmVkRW50aXR5KSB7XHJcblxyXG4gICAgLy8gICAgIC8vIFRPRE86IEFkZCBzdXBwb3J0IGZvciBcImZvcndhcmQgZGVjbGFyYXRpb25zXCIgb2YgYSBjbGFzcy9zdHJ1Y3RcclxuXHJcbiAgICAvLyAgICAgLy8gU3BlY2lhbCBjYXNlOiBpZ25vcmUgbWFnaWMgZnVuY3Rpb25zXHJcbiAgICAvLyAgICAgaWYgKGVudGl0eTEgaW5zdGFuY2VvZiBNYWdpY0Z1bmN0aW9uRW50aXR5IHx8IGVudGl0eTIgaW5zdGFuY2VvZiBNYWdpY0Z1bmN0aW9uRW50aXR5KSB7XHJcbiAgICAvLyAgICAgICAgIHJldHVybjtcclxuICAgIC8vICAgICB9XHJcblxyXG4gICAgLy8gICAgIC8vIFNwZWNpYWwgY2FzZTogaWYgYm90aCBhcmUgZGVmaW5pdGlvbnMgZm9yIHRoZSBzYW1lIGNsYXNzLCBpdCdzIG9rIE9OTFkgaWYgdGhleSBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgdG9rZW5zXHJcbiAgICAvLyAgICAgaWYgKGVudGl0eTEuZGVjbCBpbnN0YW5jZW9mIENsYXNzRGVjbGFyYXRpb24gJiYgZW50aXR5Mi5kZWNsIGluc3RhbmNlb2YgQ2xhc3NEZWNsYXJhdGlvblxyXG4gICAgLy8gICAgICAgICAmJiBlbnRpdHkxLnR5cGUuY2xhc3NOYW1lID09PSBlbnRpdHkyLnR5cGUuY2xhc3NOYW1lKSB7XHJcbiAgICAvLyAgICAgICAgIGlmIChlbnRpdHkxLmRlY2wuaXNMaWJyYXJ5Q29uc3RydWN0KCkgJiYgZW50aXR5Mi5kZWNsLmlzTGlicmFyeUNvbnN0cnVjdCgpICE9PSB1bmRlZmluZWRcclxuICAgIC8vICAgICAgICAgICAgICYmIGVudGl0eTEuZGVjbC5nZXRMaWJyYXJ5SWQoKSA9PT0gZW50aXR5Mi5kZWNsLmdldExpYnJhcnlJZCgpIHx8XHJcbiAgICAvLyAgICAgICAgICAgICBlbnRpdHkxLmRlY2wuaGFzU291cmNlQ29kZSgpICYmIGVudGl0eTIuZGVjbC5oYXNTb3VyY2VDb2RlKCkgJiZcclxuICAgIC8vICAgICAgICAgICAgIGVudGl0eTEuZGVjbC5nZXRTb3VyY2VUZXh0KCkucmVwbGFjZSgvXFxzL2csJycpID09PSBlbnRpdHkyLmRlY2wuZ2V0U291cmNlVGV4dCgpLnJlcGxhY2UoL1xccy9nLCcnKSkge1xyXG4gICAgLy8gICAgICAgICAgICAgLy8gZXhhY3RseSBzYW1lIHRva2Vucywgc28gaXQncyBmaW5lXHJcblxyXG4gICAgLy8gICAgICAgICAgICAgLy8gbWVyZ2UgdGhlIHR5cGVzIHRvbywgc28gdGhhdCB0aGUgdHlwZSBzeXN0ZW0gcmVjb2duaXplcyB0aGVtIGFzIHRoZSBzYW1lXHJcbiAgICAvLyAgICAgICAgICAgICBUeXBlcy5DbGFzcy5tZXJnZShlbnRpdHkxLnR5cGUsIGVudGl0eTIudHlwZSk7XHJcblxyXG4gICAgLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICAgdGhyb3cgQ1BQRXJyb3IubGluay5jbGFzc19zYW1lX3Rva2VucyhbZW50aXR5MS5kZWNsLCBlbnRpdHkyLmRlY2xdLCBlbnRpdHkxLCBlbnRpdHkyKTtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgLy8gSWYgdGhleSdyZSBub3QgdGhlIHNhbWUgdHlwZSwgdGhhdCdzIGEgcHJvYmxlbVxyXG4gICAgLy8gICAgIGlmICghc2FtZVR5cGUoZW50aXR5MS50eXBlLCBlbnRpdHkyLnR5cGUpKSB7XHJcbiAgICAvLyAgICAgICAgIHRocm93IENQUEVycm9yLmxpbmsudHlwZV9taXNtYXRjaChlbnRpdHkxLmRlY2wsIGVudGl0eTEsIGVudGl0eTIpO1xyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgLy8gU3BlY2lhbCBjYXNlOiBpZiBib3RoIGFyZSBkZWZpbml0aW9ucyBvZiBhIG1lbWJlciBpbnNpZGUgdGhlIHNhbWUgY2xhc3MsIGlnbm9yZSB0aGVtLiAoVGhlIGNsYXNzIGRlZmluaXRpb25zXHJcbiAgICAvLyAgICAgLy8gaGF2ZSBhbHJlYWR5IGJlZW4gY2hlY2tlZCBhYm92ZSBhbmQgbXVzdCBiZSB0aGUgc2FtZSBhdCB0aGlzIHBvaW50LCBzbyBpdCdzIHBvaW50bGVzcyBhbmQgd2lsbCBjYXVzZSBlcnJvcnNcclxuICAgIC8vICAgICAvLyB0byB0cnkgdG8gbWVyZ2UgdGhlbS4pXHJcbiAgICAvLyAgICAgaWYgKGVudGl0eTEuZGVjbCBpbnN0YW5jZW9mIE1lbWJlckRlY2xhcmF0aW9uKSB7XHJcbiAgICAvLyAgICAgICAgIHJldHVybjtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgaWYgKGVudGl0eTEuZGVjbCBpbnN0YW5jZW9mIEZ1bmN0aW9uRGVmaW5pdGlvbiAmJiBlbnRpdHkxLmRlY2wuaXNJbmxpbmVNZW1iZXJGdW5jdGlvbikge1xyXG4gICAgLy8gICAgICAgICByZXR1cm47IC8vIFRPRE86IFNob3VsZCB3ZSBiZSBjaGVja2luZyB0aGlzP1xyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgLy8gQXR0ZW1wdCB0byBtZXJnZSB0aGUgdHdvXHJcbiAgICAvLyAgICAgaWYgKCFlbnRpdHkyLmlzRGVmaW5lZCgpICYmICFlbnRpdHkxLmlzRGVmaW5lZCgpKSB7XHJcbiAgICAvLyAgICAgICAgIC8vIElmIGJvdGggYXJlIGRlY2xhcmF0aW9ucywganVzdCBrZWVwIHRoZSBvbGQgb25lXHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2UgaWYgKGVudGl0eTIuaXNEZWZpbmVkKCkgJiYgZW50aXR5MS5pc0RlZmluZWQoKSkge1xyXG4gICAgLy8gICAgICAgICAvLyBJZiBib3RoIGFyZSBkZWZpbml0aW9ucywgdGhhdCdzIGEgcHJvYmxlbS5cclxuICAgIC8vICAgICAgICAgdGhyb3cgQ1BQRXJyb3IubGluay5tdWx0aXBsZV9kZWYoW2VudGl0eTEuZGVjbCwgZW50aXR5Mi5kZWNsXSwgZW50aXR5MS5uYW1lKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZSB7IC8vIG9uZSBvZiB0aGVtIGlzIGRlZmluZWQgYW5kIG9uZSBpcyB1bmRlZmluZWRcclxuICAgIC8vICAgICAgICAgdmFyIHVuZGVmaW5lZEVudGl0eSA9IGVudGl0eTE7XHJcbiAgICAvLyAgICAgICAgIHZhciBkZWZpbmVkRW50aXR5ID0gZW50aXR5MjtcclxuICAgIC8vICAgICAgICAgaWYgKGVudGl0eTEuaXNEZWZpbmVkKCkpIHtcclxuICAgIC8vICAgICAgICAgICAgIHVuZGVmaW5lZEVudGl0eSA9IGVudGl0eTI7XHJcbiAgICAvLyAgICAgICAgICAgICBkZWZpbmVkRW50aXR5ID0gZW50aXR5MTtcclxuICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgLy8gQ2hlY2sgcmV0dXJuIHR5cGVzIGZvciBmdW5jdGlvbnNcclxuICAgIC8vICAgICAgICAgaWYgKGVudGl0eTEgaW5zdGFuY2VvZiBGdW5jdGlvbkVudGl0eSkge1xyXG4gICAgLy8gICAgICAgICAgICAgLy8gSWYgdGhleSBoYXZlIG1pc21hdGNoZWQgcmV0dXJuIHR5cGVzLCB0aGF0J3MgYSBwcm9ibGVtLlxyXG4gICAgLy8gICAgICAgICAgICAgaWYgKCFlbnRpdHkxLnR5cGUuc2FtZVJldHVyblR5cGUoZW50aXR5Mi50eXBlKSl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdGhyb3cgQ1BQRXJyb3IubGluay5mdW5jLnJldHVyblR5cGVzTWF0Y2goW2VudGl0eTEuZGVjbCwgZW50aXR5Mi5kZWNsXSwgZW50aXR5MS5uYW1lKTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgLy8gSWYgYSBwcmV2aW91cyBkZWNsYXJhdGlvbiwgYW5kIG5vdyBhIG5ldyBkZWZpbml0aW9uLCBtZXJnZVxyXG4gICAgLy8gICAgICAgICB1bmRlZmluZWRFbnRpdHkuc2V0RGVmaW5pdGlvbihkZWZpbmVkRW50aXR5LmRlZmluaXRpb24pO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZGVjbGFyYXRpb246IFNpbXBsZURlY2xhcmF0aW9uO1xyXG4gICAgLy8gcHVibGljIHJlYWRvbmx5IGRlZmluaXRpb24/OiBTaW1wbGVEZWNsYXJhdGlvbjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodHlwZTogVCwgZGVjbDogU2ltcGxlRGVjbGFyYXRpb24pIHtcclxuICAgICAgICBzdXBlcih0eXBlLCBkZWNsLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuZGVjbGFyYXRpb24gPSBkZWNsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBzZXREZWZpbml0aW9uKGRlZmluaXRpb246IFNpbXBsZURlY2xhcmF0aW9uKSB7XHJcbiAgICAvLyAgICAgKDxTaW1wbGVEZWNsYXJhdGlvbj50aGlzLmRlZmluaXRpb24pID0gZGVmaW5pdGlvbjtcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgaXNEZWZpbmVkKCkge1xyXG4gICAgLy8gICAgIHJldHVybiAhIXRoaXMuZGVmaW5pdGlvbjtcclxuICAgIC8vIH1cclxuXHJcblxyXG4gICAgLy8gcHVibGljIGlzTGlicmFyeUNvbnN0cnVjdCgpIHtcclxuICAgIC8vICAgICByZXR1cm4gdGhpcy5kZWNsLmlzTGlicmFyeUNvbnN0cnVjdCgpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHB1YmxpYyBpc0xpYnJhcnlVbnN1cHBvcnRlZCgpIHtcclxuICAgIC8vICAgICByZXR1cm4gdGhpcy5kZWNsLmlzTGlicmFyeVVuc3VwcG9ydGVkKCk7XHJcbiAgICAvLyB9XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBEZWNsYXJlZEVudGl0eSA9IERlY2xhcmVkT2JqZWN0RW50aXR5IHwgRnVuY3Rpb25FbnRpdHk7XHJcblxyXG5cclxuZXhwb3J0IHR5cGUgTGlua2VkRW50aXR5ID0gU3RhdGljRW50aXR5IHwgRnVuY3Rpb25FbnRpdHk7XHJcblxyXG4vLyBhYnN0cmFjdCBjbGFzcyBMaW5rZWRFbnRpdHk8VCBleHRlbmRzIFR5cGUgPSBUeXBlPiBleHRlbmRzIERlY2xhcmVkRW50aXR5PFQ+IHtcclxuXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgcXVhbGlmaWVkTmFtZTogc3RyaW5nO1xyXG5cclxuLy8gICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0eXBlOiBULCBkZWNsOiBTaW1wbGVEZWNsYXJhdGlvbikge1xyXG4vLyAgICAgICAgIHN1cGVyKHR5cGUsIGRlY2wpO1xyXG4vLyAgICAgICAgIHRoaXMucXVhbGlmaWVkTmFtZSA9IFwiOjpcIiArIHRoaXMubmFtZTsgLy8gVE9ETzogd2hlbiBuYW1lc3BhY2VzIGFyZSBpbXBsZW1lbnRlZCwgZml4IHRoaXMgdG8gYWN0dWFsbHkgZG8gc29tZXRoaW5nXHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIGFic3RyYWN0IGxpbmsoZGVmOiBHbG9iYWxPYmplY3REZWZpbml0aW9uIHwgRnVuY3Rpb25EZWZpbml0aW9uKSA6IHZvaWQ7XHJcblxyXG4vLyAgICAgLy8gcHVibGljIGlzRGVmaW5lZCgpIHtcclxuLy8gICAgIC8vICAgICByZXR1cm4gISF0aGlzLmRlZmluaXRpb247XHJcbi8vICAgICAvLyB9XHJcblxyXG5cclxuLy8gICAgIC8vIHB1YmxpYyBpc0xpYnJhcnlDb25zdHJ1Y3QoKSB7XHJcbi8vICAgICAvLyAgICAgcmV0dXJuIHRoaXMuZGVjbC5pc0xpYnJhcnlDb25zdHJ1Y3QoKTtcclxuLy8gICAgIC8vIH1cclxuXHJcbi8vICAgICAvLyBwdWJsaWMgaXNMaWJyYXJ5VW5zdXBwb3J0ZWQoKSB7XHJcbi8vICAgICAvLyAgICAgcmV0dXJuIHRoaXMuZGVjbC5pc0xpYnJhcnlVbnN1cHBvcnRlZCgpO1xyXG4vLyAgICAgLy8gfVxyXG4vLyB9XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE9iamVjdEVudGl0eTxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgQ1BQRW50aXR5PFQ+IHtcclxuICAgIHJ1bnRpbWVMb29rdXAocnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogQ1BQT2JqZWN0PFQ+O1xyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGVjbGFyZWRPYmplY3RFbnRpdHk8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIERlY2xhcmVkRW50aXR5QmFzZTxUPiBpbXBsZW1lbnRzIE9iamVjdEVudGl0eTxUPiB7XHJcbiAgICBcclxuICAgIHB1YmxpYyBhYnN0cmFjdCBydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSA6IENQUE9iamVjdDxUPjtcclxuICAgIFxyXG4gICAgcHVibGljIG1lcmdlSW50byhleGlzdGluZ0VudGl0eTogRGVjbGFyZWRPYmplY3RFbnRpdHkgfCBGdW5jdGlvbkVudGl0eVtdKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXhpc3RpbmdFbnRpdHkpKSB7IC8vIGFuIGFycmF5IGluZGljYXRlcyBhIGZ1bmN0aW9uIG92ZXJsb2FkIGdyb3VwIHdhcyBmb3VuZFxyXG4gICAgICAgICAgICB0aHJvdyBDUFBFcnJvci5kZWNsYXJhdGlvbi50eXBlX21pc21hdGNoKHRoaXMuZGVjbGFyYXRpb24sIHRoaXMsIGV4aXN0aW5nRW50aXR5WzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGJvdGggYXJlIG5vbi1mdW5jdGlvbnMsIHNvIGNoZWNrIHRoYXQgdGhlIHR5cGVzIGFyZSB0aGUgc2FtZVxyXG4gICAgICAgICAgICBpZiAoIXNhbWVUeXBlKHRoaXMudHlwZSwgZXhpc3RpbmdFbnRpdHkudHlwZSkpIHsgLy8gYW4gYXJyYXkgaW5kaWNhdGVzIGEgZnVuY3Rpb24gb3ZlcmxvYWQgZ3JvdXAgd2FzIGZvdW5kXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBDUFBFcnJvci5kZWNsYXJhdGlvbi50eXBlX21pc21hdGNoKHRoaXMuZGVjbGFyYXRpb24sIHRoaXMsIGV4aXN0aW5nRW50aXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdFbnRpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQXV0b0VudGl0eTxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgRGVjbGFyZWRPYmplY3RFbnRpdHk8VD4ge1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNQYXJhbWV0ZXI6IGJvb2xlYW47XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGRlZmluaXRpb246IExvY2FsVmFyaWFibGVEZWZpbml0aW9uIHwgUGFyYW1ldGVyRGVmaW5pdGlvbjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodHlwZTogVCwgZGVmOiBMb2NhbFZhcmlhYmxlRGVmaW5pdGlvbiB8IFBhcmFtZXRlckRlZmluaXRpb24sIGlzUGFyYW1ldGVyPzogYm9vbGVhbikge1xyXG4gICAgICAgIHN1cGVyKHR5cGUsIGRlZik7XHJcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gZGVmO1xyXG4gICAgICAgIHRoaXMuaXNQYXJhbWV0ZXIgPSAhIWlzUGFyYW1ldGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCIgKFwiICsgdGhpcy50eXBlICsgXCIpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1lcmdlSW50byhleGlzdGluZ0VudGl0eTogRGVjbGFyZWRPYmplY3RFbnRpdHkgfCBGdW5jdGlvbkVudGl0eVtdKSA6IG5ldmVyIHtcclxuICAgICAgICAvLyBSZWRlY2xhcmF0aW9uIG9mIGxvY2FsIGlzIG5ldmVyIG9rXHJcbiAgICAgICAgdGhyb3cgQ1BQRXJyb3IuZGVjbGFyYXRpb24ucHJldl9sb2NhbCh0aGlzLmRlY2xhcmF0aW9uLCB0aGlzLm5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSA6IEF1dG9PYmplY3Q8VD4ge1xyXG4gICAgICAgIC8vIFRPRE86IHJldmlzaXQgdGhlIG5vbi1udWxsIGFzc2VydGlvbiBiZWxvd1xyXG4gICAgICAgIHJldHVybiBydENvbnN0cnVjdC5jb250YWluaW5nUnVudGltZUZ1bmN0aW9uLnN0YWNrRnJhbWUhLmdldExvY2FsT2JqZWN0KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZSgpIHtcclxuICAgICAgICByZXR1cm4ge21lc3NhZ2U6IGB0aGUgJHt0aGlzLmlzUGFyYW1ldGVyID8gXCJwYXJhbWV0ZXJcIiA6IFwibG9jYWwgdmFyaWFibGVcIn0gJHt0aGlzLm5hbWV9YH07XHJcbiAgICB9XHJcbn07XHJcblxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQm91bmRSZWZlcmVuY2VFbnRpdHk8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIENQUEVudGl0eTxUPiwgT2JqZWN0RW50aXR5PFQ+IHtcclxuICAgIHJ1bnRpbWVMb29rdXAocnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogQ1BQT2JqZWN0PFQ+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVuYm91bmRSZWZlcmVuY2VFbnRpdHk8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIENQUEVudGl0eTxUPiB7XHJcbiAgICBiaW5kVG8ocnRDb25zdHJ1Y3QgOiBSdW50aW1lQ29uc3RydWN0LCBvYmo6IENQUE9iamVjdDxUPikgOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9jYWxSZWZlcmVuY2VFbnRpdHk8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIERlY2xhcmVkT2JqZWN0RW50aXR5PFQ+IGltcGxlbWVudHMgQm91bmRSZWZlcmVuY2VFbnRpdHk8VD4sIFVuYm91bmRSZWZlcmVuY2VFbnRpdHk8VD4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBpc1BhcmFtZXRlcjogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodHlwZTogVCwgZGVjbDogU2ltcGxlRGVjbGFyYXRpb24sIGlzUGFyYW1ldGVyOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBzdXBlcih0eXBlLCBkZWNsKTtcclxuICAgICAgICB0aGlzLmlzUGFyYW1ldGVyID0gaXNQYXJhbWV0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1lcmdlSW50byhleGlzdGluZ0VudGl0eTogRGVjbGFyZWRPYmplY3RFbnRpdHkgfCBGdW5jdGlvbkVudGl0eVtdKSA6IG5ldmVyIHtcclxuICAgICAgICAvLyBSZWRlY2xhcmF0aW9uIG9mIGxvY2FsIGlzIG5ldmVyIG9rXHJcbiAgICAgICAgdGhyb3cgQ1BQRXJyb3IuZGVjbGFyYXRpb24ucHJldl9sb2NhbCh0aGlzLmRlY2xhcmF0aW9uLCB0aGlzLm5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiaW5kVG8ocnRDb25zdHJ1Y3QgOiBSdW50aW1lQ29uc3RydWN0LCBvYmo6IENQUE9iamVjdDxUPikge1xyXG4gICAgICAgIHJ0Q29uc3RydWN0LmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb24uc3RhY2tGcmFtZSEuYmluZFJlZmVyZW5jZSh0aGlzLCBvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSA6IENQUE9iamVjdDxUPiB7XHJcbiAgICAgICAgLy8gVE9ETzogcmV2aXNpdCB0aGUgbm9uLW51bGwgYXNzZXJ0aW9ucyBiZWxvd1xyXG4gICAgICAgIHJldHVybiBydENvbnN0cnVjdC5jb250YWluaW5nUnVudGltZUZ1bmN0aW9uLnN0YWNrRnJhbWUhLnJlZmVyZW5jZUxvb2t1cCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGVzY3JpYmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBgdGhlICR7dGhpcy5pc1BhcmFtZXRlciA/IFwicmVmZXJlbmNlIHBhcmFtZXRlclwiIDogXCJyZWZlcmVuY2VcIn0gJHt0aGlzLm5hbWV9YH07XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBMb2NhbFZhcmlhYmxlRW50aXR5PFQgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZT4gPSBBdXRvRW50aXR5PFQ+IHwgTG9jYWxSZWZlcmVuY2VFbnRpdHk8VD47XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhdGljRW50aXR5PFQgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZT4gZXh0ZW5kcyBEZWNsYXJlZE9iamVjdEVudGl0eTxUPiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHF1YWxpZmllZE5hbWU6IHN0cmluZztcclxuICAgIHB1YmxpYyByZWFkb25seSBkZWZpbml0aW9uPzogR2xvYmFsT2JqZWN0RGVmaW5pdGlvbjtcclxuICAgIFxyXG4gICAgLy8gc3RvcmFnZTogXCJzdGF0aWNcIixcclxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IFQsIGRlY2w6IFNpbXBsZURlY2xhcmF0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIodHlwZSwgZGVjbCk7XHJcbiAgICAgICAgdGhpcy5xdWFsaWZpZWROYW1lID0gXCI6OlwiICsgdGhpcy5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCIgKFwiICsgdGhpcy50eXBlICsgXCIpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxpbmsoZGVmOiBMaW5rZWREZWZpbml0aW9uIHwgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKCFkZWYgfHwgIShkZWYgaW5zdGFuY2VvZiBHbG9iYWxPYmplY3REZWZpbml0aW9uKSkge1xyXG4gICAgICAgICAgICAvLyBFaXRoZXIgdW5kZWZpbmVkLCBvciBsaW5rZWQgYWdhaW5zdCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhIGZ1bmN0aW9uIG92ZXJsb2FkIGdyb3VwXHJcbiAgICAgICAgICAgIHRoaXMuZGVjbGFyYXRpb24uYWRkTm90ZShDUFBFcnJvci5saW5rLmRlZl9ub3RfZm91bmQodGhpcy5kZWNsYXJhdGlvbiwgdGhpcykpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICg8TXV0YWJsZTx0aGlzPj50aGlzKS5kZWZpbml0aW9uID0gZGVmO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSA6IFN0YXRpY09iamVjdDxUPiB7XHJcbiAgICAgICAgcmV0dXJuIHJ0Q29uc3RydWN0LnNpbS5tZW1vcnkuc3RhdGljTG9va3VwKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgZGVzY3JpYmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtuYW1lOiB0aGlzLm5hbWUsIG1lc3NhZ2U6IFwidGhlIHZhcmlhYmxlIFwiICsgdGhpcy5uYW1lfTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFZhcmlhYmxlRW50aXR5PFQgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZT4gPSBMb2NhbFZhcmlhYmxlRW50aXR5PFQ+IHwgU3RhdGljRW50aXR5PFQ+O1xyXG5cclxuLy8gVE9ETzogaW1wbGVtZW50IGdsb2JhbCByZWZlcmVuY2VzXHJcbi8vIGV4cG9ydCBjbGFzcyBHbG9iYWxSZWZlcmVuY2VFbnRpdHk8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIERlY2xhcmVkRW50aXR5PFQ+IGltcGxlbWVudHMgQm91bmRSZWZlcmVuY2VFbnRpdHk8VD4sIFVuYm91bmRSZWZlcmVuY2VFbnRpdHk8VD4ge1xyXG5cclxuLy8gICAgIHB1YmxpYyBiaW5kVG8ocnRDb25zdHJ1Y3QgOiBSdW50aW1lQ29uc3RydWN0LCBvYmo6IENQUE9iamVjdDxUPikge1xyXG4vLyAgICAgICAgIHJ0Q29uc3RydWN0LmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb24uc3RhY2tGcmFtZSEuYmluZFJlZmVyZW5jZSh0aGlzLCBvYmopO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSA6IENQUE9iamVjdDxUPiB7XHJcbi8vICAgICAgICAgLy8gVE9ETzogcmV2aXNpdCB0aGUgbm9uLW51bGwgYXNzZXJ0aW9uIGJlbG93XHJcbi8vICAgICAgICAgcmV0dXJuIHJ0Q29uc3RydWN0LmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb24uc3RhY2tGcmFtZSEucmVmZXJlbmNlTG9va3VwKHRoaXMpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBkZXNjcmliZSgpIHtcclxuLy8gICAgICAgICBpZiAodGhpcy5kZWNsIGluc3RhbmNlb2YgRGVjbGFyYXRpb25zLlBhcmFtZXRlcil7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJ0aGUgcmVmZXJlbmNlIHBhcmFtZXRlciBcIiArIHRoaXMubmFtZX07XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJ0aGUgcmVmZXJlbmNlIFwiICsgdGhpcy5uYW1lfTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcbi8vIH07XHJcblxyXG4vKipcclxuICogTG9va2luZyB0aGlzIGVudGl0eSB1cCBhdCBydW50aW1lIHlpZWxkcyB0aGUgcmV0dXJuIG9iamVjdCBvZiB0aGUgY29udGFpbmluZyBydW50aW1lIGZ1bmN0aW9uLlxyXG4gKiBOb3RlIHRoaXMgaXMgZ2VuZXJhbGx5IG9ubHkgc29tZXRoaW5nIHlvdSB3b3VsZCB3YW50IGluIHRoZSBjb250ZXh0IG9mIGEgcmV0dXJuLWJ5LXZhbHVlXHJcbiAqIGZ1bmN0aW9uLCBpbiB3aGljaCBjYXNlIHRoZSByZXR1cm4gb2JqZWN0IGlzIGEgdGVtcG9yYXJ5IG9iamVjdCBjcmVhdGVkIHRvIGV2ZW50dWFsbHkgYmUgaW5pdGlhbGl6ZWRcclxuICogd2l0aCB0aGUgcmV0dXJuZWQgdmFsdWUuIEluIGEgcGFzcy1ieS1yZWZlcmVuY2UgZnVuY3Rpb24sIHRoZSByZXR1cm4gb2JqZWN0IHdpbGwgb25seSBleGlzdCBvbmNlIHRoZVxyXG4gKiByZXR1cm4gaGFzIGJlZW4gcHJvY2Vzc2VkIGFuZCBpdCBpcyBzZXQgdG8gdGhlIHJldHVybmVkIG9iamVjdC4gSW4gdm9pZCBmdW5jdGlvbiwgdGhlcmUgaXMgbm8gcmV0dXJuXHJcbiAqIG9iamVjdC5cclxuICogQHRocm93cyBUaHJvd3MgYW4gZXhjZXB0aW9uIGlmIHRoZSByZXR1cm4gb2JqZWN0IGRvZXMgbm90IGV4aXN0LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJldHVybk9iamVjdEVudGl0eSBleHRlbmRzIENQUEVudGl0eTxPYmplY3RUeXBlPiBpbXBsZW1lbnRzIE9iamVjdEVudGl0eTxPYmplY3RUeXBlPiB7XHJcbiAgICBcclxuICAgIHB1YmxpYyBydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSA6IENQUE9iamVjdDxPYmplY3RUeXBlPiB7XHJcbiAgICAgICAgbGV0IHJldHVybk9iamVjdCA9IHJ0Q29uc3RydWN0LmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb24ucmV0dXJuT2JqZWN0O1xyXG4gICAgICAgIGlmICghcmV0dXJuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRocm93IFwiRXJyb3I6IFJ1bnRpbWUgbG9va3VwIHBlcmZvcm1lZCBmb3IgdGhlIHJldHVybiBvYmplY3Qgb2YgYSBmdW5jdGlvbiwgYnV0IHRoZSByZXR1cm4gb2JqZWN0IGRvZXMgbm90IGN1cnJlbnRseSBleGlzdC5cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJldHVybk9iamVjdDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGRlc2NyaWJlKCkge1xyXG4gICAgICAgIC8vIFRPRE86IGFkZCBpbmZvIGFib3V0IHdoaWNoIGZ1bmN0aW9uPyB3b3VsZCBuZWVkIHRvIGJlIHNwZWNpZmllZCB3aGVuIHRoZSByZXR1cm4gdmFsdWUgaXMgY3JlYXRlZFxyXG4gICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJ0aGUgcmV0dXJuIG9iamVjdFwifTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBSZXR1cm5CeVJlZmVyZW5jZUVudGl0eTxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgQ1BQRW50aXR5PFQ+IGltcGxlbWVudHMgVW5ib3VuZFJlZmVyZW5jZUVudGl0eTxUPiB7XHJcbiAgICBcclxuICAgIHB1YmxpYyBiaW5kVG8ocnRDb25zdHJ1Y3QgOiBSdW50aW1lQ29uc3RydWN0LCBvYmo6IENQUE9iamVjdDxUPikge1xyXG4gICAgICAgIC8vIEFzc3VtZSBhIFJldHVybkJ5UmVmZXJlbmNlRW50aXR5IHdpbGwgb25seSBiZSBib3VuZCBpbiB0aGUgY29udGV4dCBvZiBhIHJldHVyblxyXG4gICAgICAgIC8vIGZvciBhIHJldHVybi1ieS1yZWZlcmVuY2UgZnVuY3Rpb24sIHRodXMgdGhlIGNhc3RcclxuICAgICAgICBsZXQgZnVuYyA9IDxSdW50aW1lRnVuY3Rpb248UmVmZXJlbmNlVHlwZTxUPj4+cnRDb25zdHJ1Y3QuY29udGFpbmluZ1J1bnRpbWVGdW5jdGlvbjtcclxuICAgICAgICBmdW5jLnNldFJldHVybk9iamVjdChvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZSgpIHtcclxuICAgICAgICAvLyBUT0RPOiBhZGQgaW5mbyBhYm91dCB3aGljaCBmdW5jdGlvbj8gd291bGQgbmVlZCB0byBiZSBzcGVjaWZpZWQgd2hlbiB0aGUgcmV0dXJuIHZhbHVlIGlzIGNyZWF0ZWRcclxuICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwidGhlIG9iamVjdCByZXR1cm5lZCBieSByZWZlcmVuY2VcIn07XHJcbiAgICB9XHJcbn07XHJcblxyXG4vLyBUT0RPOiBkZXRlcm1pbmUgd2hhdCBzaG91bGQgYWN0dWFsbHkgYmUgdGhlIGJhc2UgY2xhc3MgaGVyZVxyXG4vLyBUT0RPOiBJIHRoaW5rIHRoaXMgc2hvdWxkIGJlIGFuIG9iamVjdD9cclxuLy8gVE9ETzogSSBkb24ndCB0aGluayB0aGlzIHNob3VsZCBiZSBhbiBvYmplY3QhIE1vdmUgdG8gcnVudGltZUVudmlyb25tZW50LnRzP1xyXG4vLyBUT0RPOiBJcyB0aGlzIG5lZWRlZD8gQ2FuIHdoZXJldmVyIHVzZXMgaXQganVzdCBrZWVwIHRyYWNrIG9mIHRoZSBhY3R1YWwgb2JqZWN0cz9cclxuLy8gZXhwb3J0IGNsYXNzIFJ1bnRpbWVSZWZlcmVuY2U8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiB7XHJcblxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSh0aGlzKTtcclxuXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgZW50aXR5OiBCb3VuZFJlZmVyZW5jZUVudGl0eTxUPjtcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSByZWZlcnNUbzogQ1BQT2JqZWN0PFQ+O1xyXG5cclxuLy8gICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihlbnRpdHk6IEJvdW5kUmVmZXJlbmNlRW50aXR5PFQ+LCByZWZlcnNUbzogQ1BQT2JqZWN0PFQ+KSB7XHJcbi8vICAgICAgICAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XHJcbiAgICAgICAgXHJcblxyXG4vLyAgICAgICAgIHRoaXMucmVmZXJzVG8gPSByZWZlcnNUbztcclxuLy8gICAgICAgICAvLyBJbml0aWFsbHkgcmVmZXJzIHRvIGEgZGVhZCBvYmplY3QgYXQgYWRkcmVzcyAwXHJcbi8vICAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGJhZCBpZGVhLCBzbyBJIHJlbW92ZWQgaXRcclxuLy8gICAgICAgICAvLyB0aGlzLnJlZmVyc1RvID0gbmV3IEFub255bW91c09iamVjdCh0aGlzLmVudGl0eS50eXBlLCBtZW1vcnksIDApO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIC8vIHB1YmxpYyBiaW5kVG8ocmVmZXJzVG86IENQUE9iamVjdCkge1xyXG4vLyAgICAgLy8gICAgICg8dHlwZW9mIFJ1bnRpbWVSZWZlcmVuY2UucHJvdG90eXBlLnJlZmVyc1RvPnRoaXMucmVmZXJzVG8pID0gcmVmZXJzVG87XHJcbi8vICAgICAvLyAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJib3VuZFwiKTtcclxuLy8gICAgIC8vIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZGVzY3JpYmUoKSB7XHJcbi8vICAgICAgICAgaWYgKHRoaXMucmVmZXJzVG8pIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcInRoZSByZWZlcmVuY2UgXCIgKyB0aGlzLmVudGl0eS5uYW1lICsgXCIgKHdoaWNoIGlzIGJvdW5kIHRvIFwiICsgdGhpcy5yZWZlcnNUby5kZXNjcmliZSgpLm1lc3NhZ2UgKyBcIilcIn07XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2Uge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwidGhlIHJlZmVyZW5jZSBcIiArIHRoaXMuZW50aXR5Lm5hbWUgKyBcIiAod2hpY2ggaGFzIG5vdCB5ZXQgYmVlbiBib3VuZCB0byBhbiBvYmplY3QpXCJ9O1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdHJpbmdMaXRlcmFsRW50aXR5IGV4dGVuZHMgQ1BQRW50aXR5PEJvdW5kZWRBcnJheVR5cGU+IGltcGxlbWVudHMgT2JqZWN0RW50aXR5PEJvdW5kZWRBcnJheVR5cGU+IHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RyOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZSE6IEJvdW5kZWRBcnJheVR5cGU8Q2hhcj47IC8vIGhhbmRsZWQgYnkgcGFyZW50XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHN0cjogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmV3IEJvdW5kZWRBcnJheVR5cGUobmV3IENoYXIodHJ1ZSksIHN0ci5sZW5ndGggKyAxKSk7IC8vICsgMSBmb3IgbnVsbCBjaGFyXHJcbiAgICAgICAgdGhpcy5zdHIgPSBzdHI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9iamVjdEluc3RhbmNlKG1lbW9yeTogTWVtb3J5LCBhZGRyZXNzOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFN0cmluZ0xpdGVyYWxPYmplY3QodGhpcy50eXBlLCBtZW1vcnksIGFkZHJlc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gXCJzdHJpbmcgbGl0ZXJhbCBcXFwiXCIgKyB1bmVzY2FwZVN0cmluZyh0aGlzLnN0cikgKyBcIlxcXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcnVudGltZUxvb2t1cChydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIHJldHVybiBydENvbnN0cnVjdC5zaW0ubWVtb3J5LmdldFN0cmluZ0xpdGVyYWwodGhpcy5zdHIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZSgpIHtcclxuICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwidGhlIHN0cmluZyBsaXRlcmFsIFxcXCJcIiArIHVuZXNjYXBlU3RyaW5nKHRoaXMuc3RyKSArIFwiXFxcIlwifTtcclxuICAgIH1cclxufTtcclxuXHJcbi8vIFRPRE86IHdpbGwgbmVlZCB0byBhZGQgYSBjbGFzcyBmb3IgUmVmZXJlbmNlUGFyYW1ldGVyRW50aXR5XHJcbmV4cG9ydCBjbGFzcyBQYXNzQnlWYWx1ZVBhcmFtZXRlckVudGl0eTxUIGV4dGVuZHMgT2JqZWN0VHlwZT4gZXh0ZW5kcyBDUFBFbnRpdHk8VD4gaW1wbGVtZW50cyBPYmplY3RFbnRpdHk8VD4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBjYWxsZWRGdW5jdGlvbjogRnVuY3Rpb25FbnRpdHk7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogVDtcclxuICAgIHB1YmxpYyByZWFkb25seSBudW06IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY2FsbGVkRnVuY3Rpb246IEZ1bmN0aW9uRW50aXR5LCB0eXBlOiBULCBudW06IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKHR5cGUpO1xyXG4gICAgICAgIHRoaXMuY2FsbGVkRnVuY3Rpb24gPSBjYWxsZWRGdW5jdGlvbjtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMubnVtID0gbnVtO1xyXG4gICAgICAgIGFzc2VydChzYW1lVHlwZShjYWxsZWRGdW5jdGlvbi50eXBlLnBhcmFtVHlwZXNbbnVtXSwgdHlwZSksIFwiSW5jb25zaXN0ZW50IHR5cGUgZm9yIHBhcmFtZXRlciBlbnRpdHkuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgLy8gR2V0dGluZyB0aGUgZnVuY3Rpb24gYXQgcnVudGltZSBhbHJlYWR5IHRha2VzIGNhcmUgb2YgcG9seW1vcnBoaXNtIGZvciB2aXJ0dWFsIGZ1bmN0aW9uc1xyXG4gICAgICAgIC8vIE5vdGU6IHJ0Q29uc3RydWN0LmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb24gaXMgbm90IGNvcnJlY3QgaGVyZSBzaW5jZSB0aGUgbG9va3VwIHdvdWxkIG9jY3VyXHJcbiAgICAgICAgLy8gaW4gdGhlIGNvbnRleHQgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24sIHJhdGhlciB0aGFuIHRoZSBjYWxsZWQgZnVuY3Rpb24uXHJcbiAgICAgICAgdmFyIGZ1bmMgPSBydENvbnN0cnVjdC5zaW0udG9wRnVuY3Rpb24oKSE7XHJcblxyXG4gICAgICAgIC8vIExvb2sgdXAgdGhlIHBhcmFtZXRlciAoYXMgYSBsb2NhbCB2YXJpYWJsZSkgaW4gdGhlIGNvbnRleHQgb2YgdGhlIHRvcCBmdW5jdGlvbiBvbiB0aGUgc3RhY2suXHJcbiAgICAgICAgbGV0IHBhcmFtID0gZnVuYy5tb2RlbC5wYXJhbWV0ZXJzW3RoaXMubnVtXS5kZWNsYXJlZEVudGl0eTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIShwYXJhbSBpbnN0YW5jZW9mIEF1dG9FbnRpdHkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRGYWxzZShcIlBhc3MgYnkgdmFsdWUgdXNlZCB3aXRoIHJlZmVyZW5jZSBwYXJhbWV0ZXIuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHBhcmFtT2JqID0gcGFyYW0ucnVudGltZUxvb2t1cChmdW5jKTtcclxuICAgICAgICBcclxuICAgICAgICBhc3NlcnQoc2FtZVR5cGUocGFyYW1PYmoudHlwZSwgdGhpcy50eXBlKSk7XHJcbiAgICAgICAgcmV0dXJuIDxBdXRvT2JqZWN0PFQ+PnBhcmFtT2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZSgpIHtcclxuICAgICAgICBsZXQgZGVmaW5pdGlvbiA9IHRoaXMuY2FsbGVkRnVuY3Rpb24uZGVmaW5pdGlvbjtcclxuICAgICAgICBpZiAoZGVmaW5pdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmaW5pdGlvbi5wYXJhbWV0ZXJzW3RoaXMubnVtXS5kZWNsYXJlZEVudGl0eS5kZXNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBgUGFyYW1ldGVyICMke3RoaXMubnVtKzF9IG9mIHRoZSBjYWxsZWQgZnVuY3Rpb25gfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhc3NCeVJlZmVyZW5jZVBhcmFtZXRlckVudGl0eTxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgQ1BQRW50aXR5PFQ+IGltcGxlbWVudHMgVW5ib3VuZFJlZmVyZW5jZUVudGl0eTxUPiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGNhbGxlZEZ1bmN0aW9uOiBGdW5jdGlvbkVudGl0eTtcclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlOiBUO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG51bTogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihjYWxsZWRGdW5jdGlvbjogRnVuY3Rpb25FbnRpdHksIHR5cGU6IFQsIG51bTogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIodHlwZSk7XHJcbiAgICAgICAgdGhpcy5jYWxsZWRGdW5jdGlvbiA9IGNhbGxlZEZ1bmN0aW9uO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5udW0gPSBudW07XHJcbiAgICAgICAgYXNzZXJ0KHNhbWVUeXBlKGNhbGxlZEZ1bmN0aW9uLnR5cGUucGFyYW1UeXBlc1tudW1dLCB0eXBlKSwgXCJJbmNvbnNpc3RlbnQgdHlwZSBmb3IgcGFyYW1ldGVyIGVudGl0eS5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJpbmRUbyhydENvbnN0cnVjdCA6IFJ1bnRpbWVDb25zdHJ1Y3QsIG9iajogQ1BQT2JqZWN0PFQ+KSB7XHJcbiAgICAgICAgLy8gR2V0dGluZyB0aGUgZnVuY3Rpb24gYXQgcnVudGltZSBhbHJlYWR5IHRha2VzIGNhcmUgb2YgcG9seW1vcnBoaXNtIGZvciB2aXJ0dWFsIGZ1bmN0aW9uc1xyXG4gICAgICAgIC8vIE5vdGU6IHJ0Q29uc3RydWN0LmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb24gaXMgbm90IGNvcnJlY3QgaGVyZSBzaW5jZSB0aGUgbG9va3VwIHdvdWxkIG9jY3VyXHJcbiAgICAgICAgLy8gaW4gdGhlIGNvbnRleHQgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24sIHJhdGhlciB0aGFuIHRoZSBjYWxsZWQgZnVuY3Rpb24uXHJcbiAgICAgICAgdmFyIGZ1bmMgPSBydENvbnN0cnVjdC5zaW0udG9wRnVuY3Rpb24oKSE7XHJcblxyXG4gICAgICAgIC8vIExvb2sgdXAgdGhlIHBhcmFtZXRlciAoYXMgYSBsb2NhbCB2YXJpYWJsZSkgaW4gdGhlIGNvbnRleHQgb2YgdGhlIHRvcCBmdW5jdGlvbiBvbiB0aGUgc3RhY2suXHJcbiAgICAgICAgbGV0IHBhcmFtID0gZnVuYy5tb2RlbC5wYXJhbWV0ZXJzW3RoaXMubnVtXS5kZWNsYXJlZEVudGl0eTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIShwYXJhbSBpbnN0YW5jZW9mIExvY2FsUmVmZXJlbmNlRW50aXR5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0RmFsc2UoXCJQYXNzIGJ5IHJlZmVyZW5jZSB1c2VkIHdpdGggbm9uLXJlZmVyZW5jZSBwYXJhbWV0ZXIuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGFyYW0uYmluZFRvKGZ1bmMsIG9iaik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZGVzY3JpYmUoKSB7XHJcbiAgICAgICAgbGV0IGRlZmluaXRpb24gPSB0aGlzLmNhbGxlZEZ1bmN0aW9uLmRlZmluaXRpb247XHJcbiAgICAgICAgaWYgKGRlZmluaXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRlZmluaXRpb24ucGFyYW1ldGVyc1t0aGlzLm51bV0uZGVjbGFyZWRFbnRpdHkuZGVzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7bWVzc2FnZTogYFBhcmFtZXRlciAjJHt0aGlzLm51bSsxfSBvZiB0aGUgY2FsbGVkIGZ1bmN0aW9uYH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuLy8gZXhwb3J0IGNsYXNzIFJlY2VpdmVyRW50aXR5IGV4dGVuZHMgQ1BQRW50aXR5PENsYXNzVHlwZT4gaW1wbGVtZW50cyBPYmplY3RFbnRpdHk8Q2xhc3NUeXBlPiB7XHJcbi8vICAgICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9uYW1lOiBcIlJlY2VpdmVyRW50aXR5XCI7XHJcblxyXG4vLyAgICAgLy8gc3RvcmFnZTogXCJhdXRvbWF0aWNcIixcclxuICAgIFxyXG4vLyAgICAgY29uc3RydWN0b3IodHlwZTogVCkge1xyXG4vLyAgICAgICAgIHN1cGVyKHR5cGUpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyB0b1N0cmluZygpIHtcclxuLy8gICAgICAgICByZXR1cm4gXCJmdW5jdGlvbiByZWNlaXZlciAoXCIgKyB0aGlzLnR5cGUgKyBcIilcIjtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgcnVudGltZUxvb2t1cChydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4vLyAgICAgICAgIHJldHVybiBydENvbnN0cnVjdC5jb250ZXh0dWFsUmVjZWl2ZXIoKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZGVzY3JpYmUoKSB7XHJcbi8vICAgICAgICAgLy8gaWYgKHJ0Q29uc3RydWN0KXtcclxuLy8gICAgICAgICAvLyAgICAgcmV0dXJuIHttZXNzYWdlOiBcInRoZSByZWNlaXZlciBvZiB0aGlzIGNhbGwgdG8gXCIgKyBydENvbnN0cnVjdC5jb250YWluaW5nUnVudGltZUZ1bmN0aW9uKCkuZGVzY3JpYmUoKS5tZXNzYWdlICsgXCIgKGkuZS4gKnRoaXMpIFwifTtcclxuLy8gICAgICAgICAvLyB9XHJcbi8vICAgICAgICAgLy8gZWxzZSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJ0aGUgcmVjZWl2ZXIgb2YgdGhpcyBjYWxsIChpLmUuICp0aGlzKVwifTtcclxuLy8gICAgICAgICAvLyB9XHJcbi8vICAgICB9XHJcbi8vIH07XHJcblxyXG5cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBOZXdPYmplY3RFbnRpdHk8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIENQUEVudGl0eTxUPiBpbXBsZW1lbnRzIE9iamVjdEVudGl0eTxUPiB7XHJcbi8vICAgICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IF9uYW1lID0gXCJOZXdPYmplY3RFbnRpdHlcIjtcclxuXHJcbi8vICAgICAvLyBzdG9yYWdlOiBcImF1dG9tYXRpY1wiLFxyXG4gICAgXHJcbi8vICAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIFwib2JqZWN0IChcIiArIHRoaXMudHlwZSArIFwiKVwiO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbi8vICAgICAgICAgLy8gbm8gYWRkaXRpb25hbCBydW50aW1lTG9va3VwKCkgbmVlZGVkIG9uIHRoZSBvYmplY3Qgc2luY2UgaXQgd2lsbCBuZXZlciBiZSBhIHJlZmVyZW5jZVxyXG4vLyAgICAgICAgIHJldHVybiBydENvbnN0cnVjdC5nZXRBbGxvY2F0ZWRPYmplY3QoKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZGVzY3JpYmUoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcInRoZSBkeW5hbWljYWxseSBhbGxvY2F0ZWQgb2JqZWN0IChvZiB0eXBlIFwiK3RoaXMudHlwZStcIikgY3JlYXRlZCBieSBuZXdcIn07XHJcbi8vICAgICB9XHJcblxyXG4vLyB9O1xyXG5cclxuZXhwb3J0IGNsYXNzIEFycmF5U3Vib2JqZWN0RW50aXR5PFQgZXh0ZW5kcyBBcnJheUVsZW1UeXBlID0gQXJyYXlFbGVtVHlwZT4gZXh0ZW5kcyBDUFBFbnRpdHk8VD4gaW1wbGVtZW50cyBPYmplY3RFbnRpdHk8VD4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBhcnJheUVudGl0eTogT2JqZWN0RW50aXR5PEJvdW5kZWRBcnJheVR5cGU8VD4+O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGluZGV4OiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXJyYXlFbnRpdHk6IE9iamVjdEVudGl0eTxCb3VuZGVkQXJyYXlUeXBlPFQ+PiwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKGFycmF5RW50aXR5LnR5cGUuZWxlbVR5cGUpO1xyXG4gICAgICAgIHRoaXMuYXJyYXlFbnRpdHkgPSBhcnJheUVudGl0eTtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJ1bnRpbWVMb29rdXAocnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcnJheUVudGl0eS5ydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0KS5nZXRBcnJheUVsZW1TdWJvYmplY3QodGhpcy5pbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlKCkge1xyXG4gICAgICAgIGxldCBhcnJEZXNjID0gdGhpcy5hcnJheUVudGl0eS5kZXNjcmliZSgpO1xyXG4gICAgICAgIGxldCBkZXNjIDogRGVzY3JpcHRpb24gPSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiZWxlbWVudCBcIiArIHRoaXMuaW5kZXggKyBcIiBvZiBcIiArIGFyckRlc2MubWVzc2FnZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGFyckRlc2MubmFtZSl7XHJcbiAgICAgICAgICAgIGRlc2MubmFtZSA9IGFyckRlc2MubmFtZSArIFwiW1wiICsgdGhpcy5pbmRleCArIFwiXVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVzYztcclxuICAgIH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIEJhc2VTdWJvYmplY3RFbnRpdHkgZXh0ZW5kcyBDUFBFbnRpdHk8Q2xhc3NUeXBlPiBpbXBsZW1lbnRzIE9iamVjdEVudGl0eTxDbGFzc1R5cGU+IHtcclxuXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgY29udGFpbmluZ0VudGl0eTogT2JqZWN0RW50aXR5PENsYXNzVHlwZT47XHJcblxyXG4vLyAgICAgY29uc3RydWN0b3IoY29udGFpbmluZ0VudGl0eTogT2JqZWN0RW50aXR5PENsYXNzVHlwZT4sIHR5cGU6IENsYXNzVHlwZSkge1xyXG4vLyAgICAgICAgIHN1cGVyKHR5cGUpO1xyXG4vLyAgICAgICAgIHRoaXMuY29udGFpbmluZ0VudGl0eSA9IGNvbnRhaW5pbmdFbnRpdHk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIHJ1bnRpbWVMb29rdXAocnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuLy8gICAgICAgICAvLyBUT0RPOiBjaGVjayBvbiBub24tbnVsbCBhc3NlcnRpb24gYmVsb3dcclxuLy8gICAgICAgICByZXR1cm4gdGhpcy5jb250YWluaW5nRW50aXR5LnJ1bnRpbWVMb29rdXAocnRDb25zdHJ1Y3QpLmdldEJhc2VTdWJvYmplY3QoKSE7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIGRlc2NyaWJlKCkge1xyXG4vLyAgICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJ0aGUgXCIgKyB0aGlzLnR5cGUuY3BwQ2xhc3MubmFtZSArIFwiIGJhc2UgY2xhc3Mgc3Vib2JqZWN0IG9mIFwiICsgdGhpcy5jb250YWluaW5nRW50aXR5LmRlc2NyaWJlKCl9O1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG5cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBNZW1iZXJTdWJvYmplY3RFbnRpdHk8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIENQUEVudGl0eTxUPiBpbXBsZW1lbnRzIE9iamVjdEVudGl0eTxUPiB7XHJcblxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IGNvbnRhaW5pbmdFbnRpdHk6IE9iamVjdEVudGl0eTxDbGFzc1R5cGU+O1xyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuXHJcbi8vICAgICBjb25zdHJ1Y3Rvcihjb250YWluaW5nRW50aXR5OiBPYmplY3RFbnRpdHk8Q2xhc3NUeXBlPiwgdHlwZTogVCwgbmFtZTogc3RyaW5nKSB7XHJcbi8vICAgICAgICAgc3VwZXIodHlwZSk7XHJcbi8vICAgICAgICAgdGhpcy5jb250YWluaW5nRW50aXR5ID0gY29udGFpbmluZ0VudGl0eTtcclxuLy8gICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbi8vICAgICAgICAgLy8gVE9ETzogY2hlY2sgb24gY2FzdCBiZWxvd1xyXG4vLyAgICAgICAgIHJldHVybiA8TWVtYmVyU3Vib2JqZWN0PFQ+PnRoaXMuY29udGFpbmluZ0VudGl0eS5ydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0KS5nZXRNZW1iZXJTdWJvYmplY3QodGhpcy5uYW1lKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZGVzY3JpYmUoKSB7XHJcbi8vICAgICAgICAgbGV0IGNvbnRhaW5pbmdPYmplY3REZXNjID0gdGhpcy5jb250YWluaW5nRW50aXR5LmRlc2NyaWJlKCk7XHJcbi8vICAgICAgICAgbGV0IGRlc2MgOiBEZXNjcmlwdGlvbiA9IHtcclxuLy8gICAgICAgICAgICAgbWVzc2FnZTogXCJ0aGUgXCIgKyB0aGlzLm5hbWUgKyBcIiBtZW1iZXIgb2YgXCIgKyBjb250YWluaW5nT2JqZWN0RGVzYy5tZXNzYWdlXHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGlmIChjb250YWluaW5nT2JqZWN0RGVzYy5uYW1lKSB7XHJcbi8vICAgICAgICAgICAgIGRlc2MubmFtZSA9IGNvbnRhaW5pbmdPYmplY3REZXNjLm5hbWUgKyBcIi5cIiArIHRoaXMubmFtZVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICByZXR1cm4gZGVzYztcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIEJhc2VDbGFzc0VudGl0eSBleHRlbmRzIENQUEVudGl0eTxDbGFzc1R5cGU+IGltcGxlbWVudHMgT2JqZWN0RW50aXR5PENsYXNzVHlwZT4ge1xyXG4vLyAgICAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfbmFtZSA9IFwiQmFzZUNsYXNzRW50aXR5XCI7XHJcbi8vICAgICAvLyBzdG9yYWdlOiBcIm5vbmVcIixcclxuXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgYWNjZXNzOiBzdHJpbmc7XHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgbWVtYmVyT2ZUeXBlOiBDbGFzc1R5cGU7XHJcblxyXG4vLyAgICAgY29uc3RydWN0b3IodHlwZTogQ2xhc3NUeXBlLCBtZW1iZXJPZlR5cGU6IENsYXNzVHlwZSwgYWNjZXNzOiBzdHJpbmcpIHtcclxuLy8gICAgICAgICBzdXBlcih0eXBlKTtcclxuLy8gICAgICAgICB0aGlzLm1lbWJlck9mVHlwZSA9IG1lbWJlck9mVHlwZTtcclxuLy8gICAgICAgICB0aGlzLmFjY2VzcyA9IGFjY2VzcztcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIFwidGhlIFwiICsgdGhpcy50eXBlLmNsYXNzTmFtZSArIFwiIGJhc2Ugb2JqZWN0IG9mIFwiICsgdGhpcy5tZW1iZXJPZlR5cGUuY2xhc3NOYW1lO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBydW50aW1lTG9va3VwKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbi8vICAgICAgICAgdmFyIHJlY09iaiA9IHJ0Q29uc3RydWN0LmNvbnRleHR1YWxSZWNlaXZlcigpO1xyXG5cclxuLy8gICAgICAgICB3aGlsZShyZWNPYmogJiYgIShyZWNPYmoudHlwZSBpbnN0YW5jZW9mIHRoaXMudHlwZSkpeyAvLyBUT0RPOiB0aGlzIGlzQSBzaG91bGQgcHJvYmFibHkgYmUgY2hhbmdlZCB0byBhIHR5cGUgZnVuY3Rpb25cclxuLy8gICAgICAgICAgICAgcmVjT2JqID0gcmVjT2JqLnR5cGUuZ2V0QmFzZUNsYXNzKCkgJiYgcmVjT2JqLmlfYmFzZVN1Ym9iamVjdHNbMF07XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIFV0aWwuYXNzZXJ0KHJlY09iaiwgXCJJbnRlcm5hbCBsb29rdXAgZmFpbGVkIHRvIGZpbmQgc3Vib2JqZWN0IGluIGNsYXNzIG9yIGJhc2UgY2xhc3Nlcy5cIik7XHJcblxyXG4vLyAgICAgICAgIHJldHVybiByZWNPYmo7XHJcbi8vICAgICB9XHJcbiAgICBcclxuLy8gICAgIHB1YmxpYyBvYmplY3RJbnN0YW5jZShwYXJlbnRPYmo6IENQUE9iamVjdDxDbGFzc1R5cGU+LCBtZW1vcnk6IE1lbW9yeSwgYWRkcmVzczogbnVtYmVyKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIG5ldyBCYXNlU3Vib2JqZWN0KHBhcmVudE9iaiwgdGhpcy50eXBlLCBtZW1vcnksIGFkZHJlc3MpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBkZXNjcmliZSgpIHtcclxuLy8gICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwidGhlIFwiICsgdGhpcy50eXBlLmNsYXNzTmFtZSArIFwiIGJhc2Ugb2JqZWN0IG9mIFwiICsgdGhpcy5tZW1iZXJPZlR5cGUuY2xhc3NOYW1lfTtcclxuLy8gICAgIH1cclxuLy8gfTtcclxuXHJcbi8vIC8vIFRPRE86IG5lZWQgY2xhc3MgZm9yIHJlZmVyZW5jZSBtZW1iZXJzXHJcbi8vIGV4cG9ydCBjbGFzcyBNZW1iZXJWYXJpYWJsZUVudGl0eTxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgRGVjbGFyZWRFbnRpdHk8VD4gaW1wbGVtZW50cyBPYmplY3RFbnRpdHk8VD4ge1xyXG4vLyAgICAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfbmFtZSA9IFwiTWVtYmVyVmFyaWFibGVFbnRpdHlcIjtcclxuLy8gICAgIC8vIHN0b3JhZ2U6IFwibm9uZVwiLFxyXG5cclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBhY2Nlc3M6IHN0cmluZztcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBtZW1iZXJPZlR5cGU6IFR5cGVzLkNsYXNzO1xyXG5cclxuLy8gICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihkZWNsOiBTaW1wbGVEZWNsYXJhdGlvbiwgbWVtYmVyT2ZUeXBlOiBUeXBlcy5DbGFzcykge1xyXG4vLyAgICAgICAgIHN1cGVyKGRlY2wpO1xyXG4vLyAgICAgICAgIHRoaXMubWVtYmVyT2ZUeXBlID0gbWVtYmVyT2ZUeXBlO1xyXG4vLyAgICAgICAgIHRoaXMuYWNjZXNzID0gZGVjbC5hY2Nlc3M7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIHRvU3RyaW5nKCkge1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyBcIiAoXCIgKyB0aGlzLnR5cGUgKyBcIilcIjtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgcnVudGltZUxvb2t1cChydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4vLyAgICAgICAgIHZhciByZWNPYmogPSBydENvbnN0cnVjdC5jb250ZXh0dWFsUmVjZWl2ZXIoKTtcclxuXHJcbi8vICAgICAgICAgd2hpbGUocmVjT2JqICYmICFyZWNPYmoudHlwZS5zaW1pbGFyVHlwZSh0aGlzLm1lbWJlck9mVHlwZSkpIHtcclxuLy8gICAgICAgICAgICAgcmVjT2JqID0gcmVjT2JqLnR5cGUuZ2V0QmFzZUNsYXNzKCkgJiYgcmVjT2JqLmlfYmFzZVN1Ym9iamVjdHNbMF07XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICBhc3NlcnQocmVjT2JqLCBcIkludGVybmFsIGxvb2t1cCBmYWlsZWQgdG8gZmluZCBzdWJvYmplY3QgaW4gY2xhc3Mgb3IgYmFzZSBjbGFzc3Nlcy5cIik7XHJcblxyXG4vLyAgICAgICAgIHJldHVybiByZWNPYmouZ2V0TWVtYmVyU3Vib2JqZWN0KHRoaXMubmFtZSk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIG9iamVjdEluc3RhbmNlKHBhcmVudE9iajogQ1BQT2JqZWN0PENsYXNzVHlwZT4sIG1lbW9yeTogTWVtb3J5LCBhZGRyZXNzOiBudW1iZXIpIHtcclxuLy8gICAgICAgICByZXR1cm4gbmV3IE1lbWJlclN1Ym9iamVjdChwYXJlbnRPYmosIHRoaXMudHlwZSwgdGhpcy5uYW1lLCBtZW1vcnksIGFkZHJlc3MpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBkZXNjcmliZSgpIHtcclxuLy8gICAgICAgICBpZiAocnRDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgICAgICB2YXIgcmVjT2JqID0gcnRDb25zdHJ1Y3QuY29udGV4dHVhbFJlY2VpdmVyKCk7XHJcbi8vICAgICAgICAgICAgIGlmIChyZWNPYmoubmFtZSl7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IHJlY09iai5uYW1lICsgXCIuXCIgKyB0aGlzLm5hbWV9O1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwidGhlIG1lbWJlciBcIiArIHRoaXMubmFtZSArIFwiIG9mIFwiICsgcmVjT2JqLmRlc2NyaWJlKCkubWVzc2FnZX07XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHtcclxuLy8gICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubWVtYmVyT2ZUeXBlLmNsYXNzTmFtZSArIFwiLlwiICsgdGhpcy5uYW1lLFxyXG4vLyAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJ0aGUgXCIgKyB0aGlzLm5hbWUgKyBcIiBtZW1iZXIgb2YgdGhlIFwiICsgdGhpcy5tZW1iZXJPZlR5cGUuY2xhc3NOYW1lICsgXCIgY2xhc3NcIlxyXG4vLyAgICAgICAgICAgICB9O1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuZXhwb3J0IGNsYXNzIFRlbXBvcmFyeU9iamVjdEVudGl0eTxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgQ1BQRW50aXR5PFQ+IGltcGxlbWVudHMgT2JqZWN0RW50aXR5PFQ+IHtcclxuICAgIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX25hbWUgPSBcIlRlbXBvcmFyeU9iamVjdEVudGl0eVwiO1xyXG4gICAgLy8gc3RvcmFnZTogXCJ0ZW1wXCIsXHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGNyZWF0b3I6IFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG93bmVyOiBQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbjtcclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IodHlwZTogVCwgY3JlYXRvcjogUG90ZW50aWFsRnVsbEV4cHJlc3Npb24sIG93bmVyOiBQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbiwgZGVzY3JpcHRpb246IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKHR5cGUpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRvciA9IGNyZWF0b3I7XHJcbiAgICAgICAgdGhpcy5vd25lciA9IG93bmVyO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7IC8vIFRPRE86IGNoYW5nZSB3aGVuIEkgY2hlY2sgb3ZlciB1c2FnZXMgb2YgLm5hbWUgYW5kIHJlcGxhY2Ugd2l0aCBkZXNjcmlwdGlvbiBvciBzb21ldGhpbmdcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0T3duZXIobmV3T3duZXI6IFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgKDxNdXRhYmxlPHRoaXM+PnRoaXMpLm93bmVyID0gbmV3T3duZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9iamVjdEluc3RhbmNlKGNyZWF0b3JSdDogUnVudGltZVBvdGVudGlhbEZ1bGxFeHByZXNzaW9uKSB7XHJcblxyXG4gICAgICAgIGxldCBvYmpJbnN0IDogVGVtcG9yYXJ5T2JqZWN0PFQ+ID0gY3JlYXRvclJ0LnNpbS5tZW1vcnkuYWxsb2NhdGVUZW1wb3JhcnlPYmplY3QodGhpcyk7XHJcblxyXG4gICAgICAgIGxldCBvd25lciA9IGNyZWF0b3JSdC5jb250YWluaW5nRnVsbEV4cHJlc3Npb247XHJcbiAgICAgICAgb3duZXIudGVtcG9yYXJ5T2JqZWN0c1t0aGlzLmVudGl0eUlkXSA9IG9iakluc3Q7XHJcbiAgICAgICAgcmV0dXJuIG9iakluc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJ1bnRpbWVMb29rdXAocnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICAvLyBTb21lIGhhY2t5IGNhc3RzIGFuZCBhc3NlcnRpb25zIGluIHRoaXMgaW1wbGVtZW50YXRpb25cclxuICAgICAgICBpZiAoIShydENvbnN0cnVjdCBpbnN0YW5jZW9mIFJ1bnRpbWVQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFzc2VydEZhbHNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiA8VGVtcG9yYXJ5T2JqZWN0PFQ+PnJ0Q29uc3RydWN0LmNvbnRhaW5pbmdGdWxsRXhwcmVzc2lvbi50ZW1wb3JhcnlPYmplY3RzW3RoaXMuZW50aXR5SWRdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZSgpIHtcclxuICAgICAgICByZXR1cm4ge21lc3NhZ2U6IHRoaXMubmFtZX07IC8vIFRPT0Q6IGV2ZW50dWFsbHkgY2hhbmdlIGltcGxlbWVudGF0aW9uIHdoZW4gSSByZW1vdmUgbmFtZVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25FbnRpdHkgZXh0ZW5kcyBEZWNsYXJlZEVudGl0eUJhc2U8RnVuY3Rpb25UeXBlPiB7XHJcblxyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcXVhbGlmaWVkTmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGRlZmluaXRpb24/OiBGdW5jdGlvbkRlZmluaXRpb247XHJcbiAgICBcclxuICAgIC8vIHN0b3JhZ2U6IFwic3RhdGljXCIsXHJcbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBGdW5jdGlvblR5cGUsIGRlY2w6IFNpbXBsZURlY2xhcmF0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIodHlwZSwgZGVjbCk7XHJcbiAgICAgICAgdGhpcy5xdWFsaWZpZWROYW1lID0gXCI6OlwiICsgdGhpcy5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc1N0YXRpY2FsbHlCb3VuZCgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGlzVmlydHVhbCgpIHsvLyBUT0RPOiB3aHkgZG8gd2UgaGF2ZSB0aGlzIGZvciBub24tbWVtYmVyIGZ1bmN0aW9ucyBhcyB3ZWxsP1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmFtZVN0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgbWVyZ2VJbnRvKGV4aXN0aW5nRW50aXR5OiBEZWNsYXJlZE9iamVjdEVudGl0eSB8IEZ1bmN0aW9uRW50aXR5W10pIHtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhpc3RpbmdFbnRpdHkpKSB7IC8vIEl0J3Mgbm90IGEgZnVuY3Rpb24gb3ZlcmxvYWQgZ3JvdXBcclxuICAgICAgICAgICAgdGhyb3cgQ1BQRXJyb3IuZGVjbGFyYXRpb24udHlwZV9taXNtYXRjaCh0aGlzLmRlY2xhcmF0aW9uLCB0aGlzLCBleGlzdGluZ0VudGl0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgeyAvLyBJdCBpcyBhIGZ1bmN0aW9uIG92ZXJsb2FkIGdyb3VwLCBjaGVjayBlYWNoIG90aGVyIGZ1bmN0aW9uIGZvdW5kXHJcbiAgICAgICAgICAgIGxldCBtYXRjaGluZ0Z1bmN0aW9uID0gc2VsZWN0T3ZlcmxvYWRlZEVudGl0eShleGlzdGluZ0VudGl0eSwgdGhpcy50eXBlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICghbWF0Y2hpbmdGdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgbm9uZSB3ZXJlIGZvdW5kIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlLCB0aGlzIGlzIGEgbmV3IG92ZXJsb2FkLCBzbyBnbyBhaGVhZCBhbmQgYWRkIGl0XHJcbiAgICAgICAgICAgICAgICBleGlzdGluZ0VudGl0eS5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHRoZXkgaGF2ZSBtaXNtYXRjaGVkIHJldHVybiB0eXBlcywgdGhhdCdzIGEgcHJvYmxlbS5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnR5cGUuc2FtZVJldHVyblR5cGUobWF0Y2hpbmdGdW5jdGlvbi50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgQ1BQRXJyb3IuZGVjbGFyYXRpb24uZnVuYy5yZXR1cm5UeXBlc01hdGNoKFt0aGlzLmRlY2xhcmF0aW9uLCBtYXRjaGluZ0Z1bmN0aW9uLmRlY2xhcmF0aW9uXSwgdGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQXMgYSBzYW5pdHkgY2hlY2ssIG1ha2Ugc3VyZSB0aGV5J3JlIHRoZSBzYW1lIHR5cGUuXHJcbiAgICAgICAgICAgIC8vIEJ1dCB0aGlzIHNob3VsZCBhbHJlYWR5IGJlIHRydWUsIGdpdmVuIHRoYXQgdGhleSBoYXZlIHRoZSBzYW1lIHNpZ25hdHVyZSBhbmQgcmV0dXJuIHR5cGUuXHJcbiAgICAgICAgICAgIGlmICghc2FtZVR5cGUodGhpcy50eXBlLCBtYXRjaGluZ0Z1bmN0aW9uLnR5cGUpKSB7IC8vIGFuIGFycmF5IGluZGljYXRlcyBhIGZ1bmN0aW9uIG92ZXJsb2FkIGdyb3VwIHdhcyBmb3VuZFxyXG4gICAgICAgICAgICAgICAgdGhyb3cgQ1BQRXJyb3IuZGVjbGFyYXRpb24udHlwZV9taXNtYXRjaCh0aGlzLmRlY2xhcmF0aW9uLCB0aGlzLCBtYXRjaGluZ0Z1bmN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoaW5nRnVuY3Rpb247XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxpbmsoZGVmOiBMaW5rZWREZWZpbml0aW9uIHwgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKCFkZWYgfHwgIUFycmF5LmlzQXJyYXkoZGVmKSkge1xyXG4gICAgICAgICAgICAvLyBFaXRoZXIgdW5kZWZpbmVkLCBvciBsaW5rZWQgYWdhaW5zdCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhIGZ1bmN0aW9uIG92ZXJsb2FkIGdyb3VwXHJcbiAgICAgICAgICAgIHRoaXMuZGVjbGFyYXRpb24uYWRkTm90ZShDUFBFcnJvci5saW5rLmZ1bmMuZGVmX25vdF9mb3VuZCh0aGlzLmRlY2xhcmF0aW9uLCB0aGlzKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gZm91bmQgYW4gb3ZlcmxvYWQgZ3JvdXAgb2YgZnVuY3Rpb24gZGVmaW5pdGlvbnMsIGNoZWNrIGZvciBvbmVcclxuICAgICAgICAvLyB3aXRoIG1hdGNoaW5nIHNpZ25hdHVyZSB0byB0aGUgZ2l2ZW4gbGlua2VkIGVudGl0eVxyXG4gICAgICAgIGxldCBvdmVybG9hZCA9IHNlbGVjdE92ZXJsb2FkZWREZWZpbml0aW9uKGRlZiwgdGhpcy50eXBlKTtcclxuICAgICAgICBpZiAoIW92ZXJsb2FkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVjbGFyYXRpb24uYWRkTm90ZShDUFBFcnJvci5saW5rLmZ1bmMubm9fbWF0Y2hpbmdfb3ZlcmxvYWQodGhpcy5kZWNsYXJhdGlvbiwgdGhpcykpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjaGVjayByZXR1cm4gdHlwZVxyXG4gICAgICAgIGlmICghdGhpcy50eXBlLnNhbWVSZXR1cm5UeXBlKG92ZXJsb2FkLmRlY2xhcmF0aW9uLnR5cGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVjbGFyYXRpb24uYWRkTm90ZShDUFBFcnJvci5saW5rLmZ1bmMucmV0dXJuVHlwZXNNYXRjaCh0aGlzLmRlY2xhcmF0aW9uLCB0aGlzKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgKDxNdXRhYmxlPHRoaXM+PnRoaXMpLmRlZmluaXRpb24gPSBvdmVybG9hZDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPOiBjaGVjayBvbiB3aGF0IHRoaXMgaXMgaGVyZSBmb3JcclxuICAgIC8vIHB1YmxpYyBnZXRQb2ludGVyVG8oKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIG5ldyBWYWx1ZSh0aGlzLCB0aGlzLnR5cGUpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHB1YmxpYyBpc01haW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucXVhbGlmaWVkTmFtZSA9PT0gXCI6Om1haW5cIjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGVzY3JpYmUoKTogRGVzY3JpcHRpb24ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBleHBvcnQgY2xhc3MgTWFnaWNGdW5jdGlvbkVudGl0eSBleHRlbmRzIEZ1bmN0aW9uRW50aXR5IHtcclxuLy8gICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihkZWNsOiBTaW1wbGVEZWNsYXJhdGlvbikge1xyXG4vLyAgICAgICAgIHN1cGVyKGRlY2wpO1xyXG4vLyAgICAgICAgIHRoaXMuc2V0RGVmaW5pdGlvbihkZWNsKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZGVzY3JpYmUoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcIm5vIGRlc2NyaXB0aW9uIGF2YWlsYWJsZVwifTtcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBNZW1iZXJGdW5jdGlvbkVudGl0eSBleHRlbmRzIEZ1bmN0aW9uRW50aXR5IHtcclxuXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgY29udGFpbmluZ0NsYXNzOiBUeXBlcy5DbGFzcztcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBpc1ZpcnR1YWw6IGJvb2xlYW47XHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgcHVyZVZpcnR1YWw6IGJvb2xlYW47XHJcblxyXG4vLyAgICAgY29uc3RydWN0b3IoZGVjbDogU2ltcGxlRGVjbGFyYXRpb24sIGNvbnRhaW5pbmdDbGFzczogVHlwZXMuQ2xhc3MsIGlzVmlydHVhbDogYm9vbGVhbikge1xyXG4vLyAgICAgICAgIHN1cGVyKGRlY2wpO1xyXG4vLyAgICAgICAgIHRoaXMuY29udGFpbmluZ0NsYXNzID0gY29udGFpbmluZ0NsYXNzO1xyXG4vLyAgICAgICAgIHRoaXMuaXNWaXJ0dWFsID0gaXNWaXJ0dWFsO1xyXG4vLyAgICAgICAgIHRoaXMucHVyZVZpcnR1YWwgPSBkZWNsLnB1cmVWaXJ0dWFsO1xyXG4vLyAgICAgICAgIC8vIE1heSBhbHNvIGJlIHNldCB0byB2aXJ0dWFsIGxhdGVyIGlmIGl0J3MgZGlzY292ZXJlZCB0byBiZSBhbiBvdmVycmlkZXJcclxuLy8gICAgICAgICAvLyBmb3IgYSB2aXJ0dWFsIGZ1bmN0aW9uIGluIGEgYmFzZSBjbGFzc1xyXG5cclxuLy8gICAgICAgICB0aGlzLmNoZWNrRm9yT3ZlcnJpZGUoKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwcml2YXRlIGNoZWNrRm9yT3ZlcnJpZGUoKSB7XHJcbi8vICAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5pbmdDbGFzcy5nZXRCYXNlQ2xhc3MoKSkge1xyXG4vLyAgICAgICAgICAgICByZXR1cm47XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAvLyBGaW5kIHRoZSBuZWFyZXN0IG92ZXJyaWRlciBvZiBhIGh5cG90aGV0aWNhbCB2aXJ0dWFsIGZ1bmN0aW9uLlxyXG4vLyAgICAgICAgIC8vIElmIGFueSBhcmUgdmlydHVhbCwgdGhpcyBvbmUgd291bGQgaGF2ZSBhbHJlYWR5IGJlZW4gc2V0IHRvIGJlXHJcbi8vICAgICAgICAgLy8gYWxzbyB2aXJ0dWFsIGJ5IHRoaXMgc2FtZSBwcm9jZWR1cmUsIHNvIGNoZWNraW5nIHRoaXMgb25lIGlzIHN1ZmZpY2llbnQuXHJcbi8vICAgICAgICAgLy8gSWYgd2Ugb3ZlcnJpZGUgYW55IHZpcnR1YWwgZnVuY3Rpb24sIHRoaXMgb25lIGlzIHRvby5cclxuLy8gICAgICAgICB2YXIgb3ZlcnJpZGRlbiA9IHRoaXMuY29udGFpbmluZ0NsYXNzLmdldEJhc2VDbGFzcygpLmNsYXNzU2NvcGUuc2luZ2xlTG9va3VwKHRoaXMubmFtZSwge1xyXG4vLyAgICAgICAgICAgICBwYXJhbVR5cGVzOiB0aGlzLnR5cGUucGFyYW1UeXBlcywgaXNUaGlzQ29uc3Q6IHRoaXMudHlwZS5pc1RoaXNDb25zdCxcclxuLy8gICAgICAgICAgICAgZXhhY3RNYXRjaDp0cnVlLCBvd246dHJ1ZSwgbm9OYW1lSGlkaW5nOnRydWV9KTtcclxuXHJcbi8vICAgICAgICAgaWYgKG92ZXJyaWRkZW4gJiYgb3ZlcnJpZGRlbiBpbnN0YW5jZW9mIEZ1bmN0aW9uRW50aXR5ICYmIG92ZXJyaWRkZW4uaXNWaXJ0dWFsKXtcclxuLy8gICAgICAgICAgICAgKDxib29sZWFuPnRoaXMuaXNWaXJ0dWFsKSA9IHRydWU7XHJcbi8vICAgICAgICAgICAgIC8vIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSByZXR1cm4gdHlwZXMgYXJlIGNvdmFyaWFudFxyXG4vLyAgICAgICAgICAgICBpZiAoIWNvdmFyaWFudFR5cGUodGhpcy50eXBlLnJldHVyblR5cGUsIG92ZXJyaWRkZW4udHlwZS5yZXR1cm5UeXBlKSl7XHJcbi8vICAgICAgICAgICAgICAgICB0aHJvdyBTZW1hbnRpY0V4Y2VwdGlvbnMuTm9uQ292YXJpYW50UmV0dXJuVHlwZXMuaW5zdGFuY2UodGhpcywgb3ZlcnJpZGRlbik7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIGlzU3RhdGljYWxseUJvdW5kKCkge1xyXG4vLyAgICAgICAgIHJldHVybiAhdGhpcy5pc1ZpcnR1YWw7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIGlzTGlua2VkKCkge1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLnZpcnR1YWwgJiYgdGhpcy5wdXJlVmlydHVhbCB8fCB0aGlzLmlzRGVmaW5lZCgpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBydW50aW1lTG9va3VwKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuLy8gICAgICAgICBpZiAodGhpcy5pc1ZpcnR1YWwpe1xyXG4vLyAgICAgICAgICAgICAvLyBJZiBpdCdzIGEgdmlydHVhbCBmdW5jdGlvbiBzdGFydCBmcm9tIHRoZSBjbGFzcyBzY29wZSBvZiB0aGUgZHluYW1pYyB0eXBlXHJcbi8vICAgICAgICAgICAgIHZhciByZWNlaXZlciA9IHJ0Q29uc3RydWN0LmNvbnRleHR1YWxSZWNlaXZlcigpO1xyXG4vLyAgICAgICAgICAgICBVdGlsLmFzc2VydChyZWNlaXZlciwgXCJkeW5hbWljIGZ1bmN0aW9uIGxvb2t1cCByZXF1aXJlcyByZWNlaXZlclwiKTtcclxuLy8gICAgICAgICAgICAgdmFyIGR5bmFtaWNUeXBlID0gcmVjZWl2ZXIudHlwZTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIFNvcnJ5IHRoaXMgaXMgaGFja3kgOihcclxuLy8gICAgICAgICAgICAgLy8gSWYgaXQncyBhIGRlc3RydWN0b3IsIHdlIGxvb2sgaW5zdGVhZCBmb3IgdGhlIGRlc3RydWN0b3Igb2YgdGhlIGR5bmFtaWMgdHlwZVxyXG4vLyAgICAgICAgICAgICB2YXIgZnVuYztcclxuLy8gICAgICAgICAgICAgaWYgKHRoaXMuZGVmaW5pdGlvbiBpbnN0YW5jZW9mIERlc3RydWN0b3JEZWZpbml0aW9uKSB7XHJcbi8vICAgICAgICAgICAgICAgICBmdW5jID0gZHluYW1pY1R5cGUuZGVzdHJ1Y3RvcjtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgZnVuYyA9IGR5bmFtaWNUeXBlLmNsYXNzU2NvcGUuc2luZ2xlTG9va3VwKHRoaXMubmFtZSwge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHBhcmFtVHlwZXM6IHRoaXMudHlwZS5wYXJhbVR5cGVzLCBpc1RoaXNDb25zdDogdGhpcy50eXBlLmlzVGhpc0NvbnN0LFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIGV4YWN0TWF0Y2g6dHJ1ZSwgb3duOnRydWUsIG5vTmFtZUhpZGluZzp0cnVlfSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgVXRpbC5hc3NlcnQoZnVuYywgXCJGYWlsZWQgdG8gZmluZCB2aXJ0dWFsIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9uIGR1cmluZyBsb29rdXAuXCIpO1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gZnVuYztcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBzdXBwcmVzc2VkVmlydHVhbFByb3h5KCkgOiBNZW1iZXJGdW5jdGlvbkVudGl0eSB7XHJcbi8vICAgICAgICAgdmFyIHByb3h5ID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcclxuLy8gICAgICAgICBwcm94eS5pc1ZpcnR1YWwgPSBmYWxzZTtcclxuLy8gICAgICAgICByZXR1cm4gcHJveHk7XHJcbi8vICAgICB9XHJcblxyXG4vLyB9O1xyXG5cclxuLy8gZXhwb3J0IGNsYXNzIENvbnN0cnVjdG9yRW50aXR5IGV4dGVuZHMgTWVtYmVyRnVuY3Rpb25FbnRpdHkge1xyXG5cclxuLy8gfVxyXG5cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBQb2ludGVkRnVuY3Rpb25FbnRpdHkgZXh0ZW5kcyBDUFBFbnRpdHkge1xyXG4vLyAgICAgcHJvdGVjdGVkIHN0YXRpYyByZWFkb25seSBfbmFtZSA9IFwiRnVuY3Rpb25FbnRpdHlcIjtcclxuXHJcbi8vICAgICBwcml2YXRlIHJlYWRvbmx5IGRlc2M6IHN0cmluZztcclxuXHJcbi8vICAgICBjb25zdHJ1Y3Rvcih0eXBlOiBUeXBlKSB7XHJcbi8vICAgICAgICAgc3VwZXIodHlwZSk7XHJcbi8vICAgICAgICAgdGhpcy5kZXNjID0gXCJVbmtub3duIGZ1bmN0aW9uIG9mIHR5cGUgXCIgKyB0eXBlO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBpc1N0YXRpY2FsbHlCb3VuZCgpIHtcclxuLy8gICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXMuZGVzYztcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgcnVudGltZUxvb2t1cChzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHJ0Q29uc3RydWN0LnBvaW50ZWRGdW5jdGlvbi5ydW50aW1lTG9va3VwKHNpbSwgcnRDb25zdHJ1Y3QpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBpc0xpbmtlZCgpIHtcclxuLy8gICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZGVzY3JpYmUoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcIm5vIGRlc2NyaXB0aW9uIGF2YWlsYWJsZVwifTtcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuXHJcblxyXG4vLyBleHBvcnQgY2xhc3MgVHlwZUVudGl0eSBleHRlbmRzIERlY2xhcmVkRW50aXR5IHtcclxuLy8gICAgIHByb3RlY3RlZCBzdGF0aWMgcmVhZG9ubHkgX25hbWUgPSBcIlR5cGVFbnRpdHlcIjtcclxuXHJcbi8vICAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIFwiVHlwZUVudGl0eTogXCIgKyB0aGlzLnR5cGUuaW5zdGFuY2VTdHJpbmcoKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZGVzY3JpYmUoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5kZXNjcmliZSgpO1xyXG4vLyAgICAgfVxyXG4vLyB9O1xyXG5cclxuXHJcbmZ1bmN0aW9uIGNvbnZMZW4oYXJnczogcmVhZG9ubHkgRXhwcmVzc2lvbltdKSB7XHJcbiAgICByZXR1cm4gYXJncy5yZWR1Y2UoKHJlcywgZXhwKSA9PiByZXMgKyBleHAuY29udmVyc2lvbkxlbmd0aCwgMCk7XHJcbn07XHJcblxyXG4vLyBTZWxlY3RzIGZyb20gY2FuZGlkYXRlcyB0aGUgZnVuY3Rpb24gdGhhdCBpcyB0aGUgYmVzdCBtYXRjaFxyXG4vLyBmb3IgdGhlIGFyZ3VtZW50cyBpbiB0aGUgYXJncyBhcnJheS4gQWxzbyBtb2RpZmllcyBhcmdzIHNvXHJcbi8vIHRoYXQgZWFjaCBhcmd1bWVudCBpcyBhbWVuZGVkIHdpdGggYW55IGltcGxpY2l0IGNvbnZlcnNpb25zXHJcbi8vIG5lY2Vzc2FyeSBmb3IgdGhlIG1hdGNoLlxyXG4vLyBPcHRpb25zOlxyXG4vLyAgIHByb2JsZW1zIC0gYW4gYXJyYXkgdGhhdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGFuIGVudHJ5IGZvciBlYWNoIGNhbmRpZGF0ZVxyXG4vLyAgICAgICAgICAgICAgY29uc2lzdGluZyBvZiBhbiBhcnJheSBvZiBhbnkgc2VtYW50aWMgcHJvYmxlbXMgdGhhdCBwcmV2ZW50IGl0XHJcbi8vICAgICAgICAgICAgICBmcm9tIGJlaW5nIGNob3Nlbi5cclxuXHJcblxyXG4vLyBUT0RPOiBVcGRhdGUgdGhpcyBzbyBpdCBkb2VzIG5vdCBtb2RpZnkgdGhlIGFyZ3VtZW50cyBwYXNzZWQgaW4uIFRoaXMgaXMgZXNzZW50aWFsLlxyXG5cclxuaW50ZXJmYWNlIE92ZXJsb2FkQ2FuZGlkYXRlUmVzdWx0IHtcclxuICAgIHJlYWRvbmx5IGNhbmRpZGF0ZTogRnVuY3Rpb25FbnRpdHk7XHJcbiAgICByZWFkb25seSBub3RlczogcmVhZG9ubHkgTm90ZVtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsb2FkUmVzb2x1dGlvblJlc3VsdCB7XHJcbiAgICByZWFkb25seSBjYW5kaWRhdGVzOiByZWFkb25seSBPdmVybG9hZENhbmRpZGF0ZVJlc3VsdFtdO1xyXG4gICAgcmVhZG9ubHkgdmlhYmxlOiBGdW5jdGlvbkVudGl0eVtdO1xyXG4gICAgcmVhZG9ubHkgc2VsZWN0ZWQ/OiBGdW5jdGlvbkVudGl0eTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG92ZXJsb2FkUmVzb2x1dGlvbihjYW5kaWRhdGVzOiByZWFkb25seSBGdW5jdGlvbkVudGl0eVtdLCBhcmdUeXBlczogcmVhZG9ubHkgKFR5cGV8dW5kZWZpbmVkKVtdLCByZWNlaXZlclR5cGU/OiBDbGFzc1R5cGUpIDogT3ZlcmxvYWRSZXNvbHV0aW9uUmVzdWx0IHtcclxuXHJcbiAgICAvLyBUT0RPOiBhZGQgdGhlc2UgY2hlY2tzLCBhbmQgc2VuZCBlcnJvcnMgYmFjayB0byBjb25zdHJ1Y3QgdGhhdCBjYWxscyB0aGlzIGlmIHRoZXkgYXJlbid0IG1ldFxyXG4gICAgLy8gU2hvdWxkIHJldHVybiB0aGUgZnVuY3Rpb24gc2VsZWN0ZWQgYXMgd2VsbCBhcyBhbiBhcnJheSBvZiBvYmplY3QtdHlwZWQgcGFyYW1zIHRoYXQgY29udGFpblxyXG4gICAgLy8gYW55IGltcGxpY2l0IGNvbnZlcnNpb25zIG5lY2Vzc2FyeS5cclxuICAgIFxyXG4gICAgLy8gaWYgKCFhbGxXZWxsVHlwZWQoYXJncykpIHtcclxuICAgIC8vICAgICAvLyBJZiBhcmd1bWVudHMgYXJlIG5vdCB3ZWxsLXR5cGVkLCB3ZSBjYW4ndCBjb250aW51ZSBvbndhcmQgdG8gc2VsZWN0IGEgZnVuY3Rpb25cclxuICAgIC8vICAgICAvLyBhbmQgY3JlYXRlIGEgZnVuY3Rpb24gY2FsbCwgc28gaW5zdGVhZCBqdXN0IGdpdmUgdXAgYXR0YWNoIGFyZ3VtZW50cyBoZXJlLlxyXG4gICAgLy8gICAgIHRoaXMuYXR0YWNoQWxsKGFyZ3MpO1xyXG4gICAgLy8gICAgIHJldHVybjtcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBpZiAoIWFsbE9iamVjdFR5cGVkKGFyZ3MpKSB7XHJcbiAgICAvLyAgICAgLy8gT25seSBvYmplY3QgdHlwZXMgbWF5IGJlIHBhc3NlZCBhcyBhcmd1bWVudHMgdG8gZnVuY3Rpb25zLlxyXG4gICAgLy8gICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5pbml0Lm5vX2RlZmF1bHRfY29uc3RydWN0b3IodGhpcywgdGhpcy50YXJnZXQpKTsgLy8gVE9ETzogZml4XHJcbiAgICAvLyAgICAgdGhpcy5hdHRhY2hBbGwoYXJncyk7XHJcbiAgICAvLyAgICAgcmV0dXJuO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIEZpbmQgdGhlIGNvbnN0cnVjdG9yXHJcbiAgICBsZXQgdmlhYmxlOiBGdW5jdGlvbkVudGl0eVtdID0gW107XHJcbiAgICBsZXQgcmVzdWx0Q2FuZGlkYXRlcyA6IHJlYWRvbmx5IE92ZXJsb2FkQ2FuZGlkYXRlUmVzdWx0W10gPSBjYW5kaWRhdGVzLm1hcCgoY2FuZGlkYXRlKSA9PiB7XHJcblxyXG4gICAgICAgIGxldCB0ZW1wQXJncyA9IFtdO1xyXG4gICAgICAgIHZhciBub3RlczogTm90ZVtdID0gW107XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGFyZ3VtZW50IHR5cGVzIGFnYWluc3QgcGFyYW1ldGVyIHR5cGVzXHJcbiAgICAgICAgbGV0IGNhbmRpZGF0ZVBhcmFtVHlwZXMgPSBjYW5kaWRhdGUudHlwZS5wYXJhbVR5cGVzO1xyXG4gICAgICAgIGlmIChhcmdUeXBlcy5sZW5ndGggIT09IGNhbmRpZGF0ZVBhcmFtVHlwZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG5vdGVzLnB1c2goQ1BQRXJyb3IucGFyYW0ubnVtUGFyYW1zKGNhbmRpZGF0ZS5kZWNsYXJhdGlvbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPOiBhZGQgYmFjayBpbiB3aXRoIG1lbWJlciBmdW5jdGlvbnNcclxuICAgICAgICAvLyBlbHNlIGlmIChyZWNlaXZlclR5cGUuaXNDb25zdCAmJiBjYW5kIGluc3RhbmNlb2YgTWVtYmVyRnVuY3Rpb25FbnRpdHkgJiYgIWNhbmQudHlwZS5pc1RoaXNDb25zdCl7XHJcbiAgICAgICAgLy8gICAgIHByb2JsZW1zLnB1c2goQ1BQRXJyb3IucGFyYW0udGhpc0NvbnN0KGNhbmQuZGVjbGFyYXRpb24pKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgYXJnVHlwZXMuZm9yRWFjaCgoYXJnVHlwZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhcmdUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBpZ25vcmUgdW5kZWZpbmVkIGFyZ1R5cGUsIGFzc3VtZSBpdCBcIndvcmtzXCIgc2luY2UgdGhlcmUgd2lsbCBiZSBhbiBlcnJvciBlbHNld2hlcmUgYWxyZWFkeVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGNhbmRpZGF0ZVBhcmFtVHlwZSA9IGNhbmRpZGF0ZVBhcmFtVHlwZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FuZGlkYXRlUGFyYW1UeXBlLmlzUmVmZXJlbmNlVHlwZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGVtcEFyZ3MucHVzaChhcmdzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBpZighcmVmZXJlbmNlQ29tcGF0aWJsZShhcmdUeXBlLCBjYW5kaWRhdGVQYXJhbVR5cGUucmVmVG8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzLnB1c2goQ1BQRXJyb3IucGFyYW0ucGFyYW1SZWZlcmVuY2VUeXBlKGNhbmRpZGF0ZS5kZWNsYXJhdGlvbiwgYXJnVHlwZSwgY2FuZGlkYXRlUGFyYW1UeXBlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vZWxzZSBpZiAoYXJnc1tpXS52YWx1ZUNhdGVnb3J5ICE9PSBcImx2YWx1ZVwiKXtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICBwcm9ibGVtcy5wdXNoKENQUEVycm9yLnBhcmFtLnBhcmFtUmVmZXJlbmNlTHZhbHVlKGFyZ3NbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRlbXBBcmdzLnB1c2goc3RhbmRhcmRDb252ZXJzaW9uKGFyZ3NbaV0sIGFyZ1R5cGVzW2ldKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgc3RhbmRhcmQgY29udmVyc2lvbiBvZiBhbiBhdXhpbGlhcnkgZXhwcmVzc2lvbiBvZiB0aGUgYXJndW1lbnQncyB0eXBlIHRvIHRoZSBwYXJhbSB0eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF1eEFyZyA9IG5ldyBBdXhpbGlhcnlFeHByZXNzaW9uKGFyZ1R5cGUsIFwicHJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29udmVydGVkQXJnID0gc3RhbmRhcmRDb252ZXJzaW9uKGF1eEFyZywgY2FuZGlkYXRlUGFyYW1UeXBlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIXNhbWVUeXBlKGNvbnZlcnRlZEFyZy50eXBlLCBjYW5kaWRhdGVQYXJhbVR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzLnB1c2goQ1BQRXJyb3IucGFyYW0ucGFyYW1UeXBlKGNhbmRpZGF0ZS5kZWNsYXJhdGlvbiwgYXJnVHlwZSwgY2FuZGlkYXRlUGFyYW1UeXBlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobm90ZXMubGVuZ3RoID09IDApIHsgLy8gQWxsIG5vdGVzIGluIHRoaXMgZnVuY3Rpb24gYXJlIGVycm9ycywgc28gaWYgdGhlcmUgYXJlIGFueSBpdCdzIG5vdCB2aWFibGVcclxuICAgICAgICAgICAgdmlhYmxlLnB1c2goY2FuZGlkYXRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7Y2FuZGlkYXRlOiBjYW5kaWRhdGUsIG5vdGVzOiBub3Rlc307XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBUT0RPOiBuZWVkIHRvIGRldGVybWluZSB3aGljaCBvZiBzZXZlcmFsIHZpYWJsZSBvdmVybG9hZHMgaXMgdGhlIGJlc3Qgb3B0aW9uXHJcbiAgICAvLyBUT0RPOiBuZWVkIHRvIGRldGVjdCB3aGVuIG11bHRpcGxlIHZpYWJsZSBvdmVybG9hZHMgaGF2ZSB0aGUgc2FtZSB0b3RhbCBjb252ZXJzaW9uIGxlbmd0aCwgd2hpY2ggcmVzdWx0cyBpbiBhbiBhbWJpZ3VpdHlcclxuICAgIC8vIGxldCBzZWxlY3RlZCA9IHZpYWJsZS5yZWR1Y2UoKGJlc3QsIGN1cnJlbnQpID0+IHtcclxuICAgIC8vICAgICBpZiAoY29udkxlbihjdXJyZW50LnR5cGUucGFyYW1UeXBlcykgPCBjb252TGVuKGJlc3QudHlwZS5wYXJhbVR5cGVzKSkge1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gY3VycmVudDtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZSB7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBiZXN0O1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH0pO1xyXG4gICAgbGV0IHNlbGVjdGVkID0gdmlhYmxlWzBdID8gdmlhYmxlWzBdIDogdW5kZWZpbmVkO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY2FuZGlkYXRlczogcmVzdWx0Q2FuZGlkYXRlcyxcclxuICAgICAgICB2aWFibGU6IHZpYWJsZSxcclxuICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWRcclxuICAgIH1cclxufTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFNlbGVjdHMgYSBmdW5jdGlvbiBmcm9tIHRoZSBnaXZlbiBvdmVybG9hZCBncm91cCBiYXNlZCBvbiB0aGUgc2lnbmF0dXJlIG9mXHJcbiAqIHRoZSBwcm92aWRlZCBmdW5jdGlvbiB0eXBlLiAoTm90ZSB0aGVyZSdzIG5vIGNvbnNpZGVyYXRpb24gb2YgZnVuY3Rpb24gbmFtZXMgaGVyZS4pXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0T3ZlcmxvYWRlZEVudGl0eShvdmVybG9hZEdyb3VwOiByZWFkb25seSBGdW5jdGlvbkVudGl0eVtdLCB0eXBlOiBGdW5jdGlvblR5cGUpIHtcclxuICAgIHJldHVybiBvdmVybG9hZEdyb3VwLmZpbmQoZnVuYyA9PiB0eXBlLnNhbWVTaWduYXR1cmUoZnVuYy50eXBlKSk7XHJcbn0iLCJpbXBvcnQgeyBQcm9ncmFtLCBUcmFuc2xhdGlvblVuaXQsIFNvdXJjZVJlZmVyZW5jZSB9IGZyb20gXCIuL1Byb2dyYW1cIjtcclxuaW1wb3J0IHsgU2NvcGUsIFRlbXBvcmFyeU9iamVjdEVudGl0eSB9IGZyb20gXCIuL2VudGl0aWVzXCI7XHJcbmltcG9ydCB7IE5vdGUsIE5vdGVLaW5kLCBDUFBFcnJvciB9IGZyb20gXCIuL2Vycm9yc1wiO1xyXG5pbXBvcnQgeyBhc011dGFibGUsIE11dGFibGUsIGFzc2VydEZhbHNlLCBhc3NlcnQgfSBmcm9tIFwiLi4vdXRpbC91dGlsXCI7XHJcbmltcG9ydCB7IFNpbXVsYXRpb24gfSBmcm9tIFwiLi9TaW11bGF0aW9uXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi4vdXRpbC9vYnNlcnZlXCI7XHJcbmltcG9ydCB7IE9iamVjdFR5cGUsIENsYXNzVHlwZSB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IFRlbXBvcmFyeU9iamVjdCB9IGZyb20gXCIuL29iamVjdHNcIjtcclxuaW1wb3J0IHsgR2xvYmFsT2JqZWN0RGVmaW5pdGlvbiwgQ29tcGlsZWRHbG9iYWxPYmplY3REZWZpbml0aW9uIH0gZnJvbSBcIi4vZGVjbGFyYXRpb25zXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGVzY3JpcHRpb24ge1xyXG4gICAgbmFtZT86IHN0cmluZztcclxuICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgIGlnbm9yZT86IGJvb2xlYW47IC8vIFRPRE86IGNoZWNrIHdoYXQgdGhpcyBpcyB1c2VkIGZvclxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEV4cGxhbmF0aW9uIHtcclxuICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgIGlnbm9yZT86IGJvb2xlYW47IC8vIFRPRE86IGNoZWNrIHdoYXQgdGhpcyBpcyB1c2VkIGZvclxyXG59XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBU1ROb2RlIHtcclxuICAgIC8vIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBzdHJpbmc7XHJcbiAgICByZWFkb25seSBzb3VyY2U6IHtcclxuICAgICAgICByZWFkb25seSBzdGFydCA6IG51bWJlcjtcclxuICAgICAgICByZWFkb25seSBlbmQgOiBudW1iZXI7XHJcbiAgICAgICAgcmVhZG9ubHkgdGV4dCA6IHN0cmluZztcclxuICAgICAgICByZWFkb25seSBsaW5lIDogbnVtYmVyO1xyXG4gICAgICAgIHJlYWRvbmx5IGNvbHVtbiA6IG51bWJlcjtcclxuICAgIH07XHJcbiAgICByZWFkb25seSBsaWJyYXJ5X2lkPzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgbGlicmFyeV91bnN1cHBvcnRlZD86IGJvb2xlYW47XHJcbn07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByb2dyYW1Db250ZXh0IHtcclxuICAgIHJlYWRvbmx5IHByb2dyYW06IFByb2dyYW07XHJcbiAgICByZWFkb25seSBpbXBsaWNpdD86IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBsaWJyYXJ5SWQ/OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBsaWJyYXJ5VW5zdXBwb3J0ZWQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zbGF0aW9uVW5pdENvbnRleHQgZXh0ZW5kcyBQcm9ncmFtQ29udGV4dCB7XHJcbiAgICByZWFkb25seSB0cmFuc2xhdGlvblVuaXQ6IFRyYW5zbGF0aW9uVW5pdDtcclxuICAgIHJlYWRvbmx5IGNvbnRleHR1YWxTY29wZTogU2NvcGU7XHJcbiAgICByZWFkb25seSBjb250YWluaW5nQ2xhc3M/OiBDbGFzc1R5cGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcmFuc2xhdGlvblVuaXRDb250ZXh0KGNvbnRleHQ6IFByb2dyYW1Db250ZXh0LCB0cmFuc2xhdGlvblVuaXQ6IFRyYW5zbGF0aW9uVW5pdCwgY29udGV4dHVhbFNjb3BlOiBTY29wZSkgOiBUcmFuc2xhdGlvblVuaXRDb250ZXh0IHtcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0LCB7dHJhbnNsYXRpb25Vbml0OiB0cmFuc2xhdGlvblVuaXQsIGNvbnRleHR1YWxTY29wZTogY29udGV4dHVhbFNjb3BlIH0pO1xyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ1BQQ29uc3RydWN0PENvbnRleHRUeXBlIGV4dGVuZHMgUHJvZ3JhbUNvbnRleHQgPSBQcm9ncmFtQ29udGV4dCwgQVNUVHlwZSBleHRlbmRzIEFTVE5vZGUgPSBBU1ROb2RlPiB7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgTkVYVF9JRCA9IDA7XHJcbiAgICAvLyBpbml0SW5kZXg6IFwicHVzaENoaWxkcmVuXCIsXHJcblxyXG4gICAgLy8gaV9jaGlsZHJlblRvQ3JlYXRlIDogW10sXHJcbiAgICAvLyBpX2NoaWxkcmVuVG9Db252ZXJ0IDoge30sXHJcbiAgICAvLyBpX2NoaWxkcmVuVG9FeGVjdXRlIDogW10sXHJcbiAgICAvL1xyXG4gICAgLy8gY3JlYXRlV2l0aENoaWxkcmVuIDogZnVuY3Rpb24oY2hpbGRyZW4sIGNvbnRleHQpIHtcclxuICAgIC8vICAgICB2YXIgY29uc3RydWN0ID0gdGhpcy5pbnN0YW5jZShjb250ZXh0KTtcclxuICAgIC8vICAgICB0aGlzLmlfY3JlYXRlV2l0aENoaWxkcmVuSW1wbChjb25zdHJ1Y3QsIGNoaWxkcmVuLCBjb250ZXh0KTtcclxuICAgIC8vXHJcbiAgICAvLyAgICAgcmV0dXJuIGNvbnN0cnVjdDtcclxuICAgIC8vIH0sXHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSBpZDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBub3RlczogTm90ZVtdID0gW107IFxyXG4gICAgcHVibGljIHJlYWRvbmx5IGhhc0Vycm9yczogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBjb250ZXh0OiBDb250ZXh0VHlwZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgYXN0PzogQVNUVHlwZTtcclxuICAgIHB1YmxpYyByZWFkb25seSBzb3VyY2VSZWZlcmVuY2U/OiBTb3VyY2VSZWZlcmVuY2U7XHJcblxyXG4gICAgLy8gcHVibGljIHJlYWRvbmx5IGxpYnJhcnlJZD86IG51bWJlcjtcclxuICAgIC8vIHB1YmxpYyByZWFkb25seSBpc0xpYnJhcnlVbnN1cHBvcnRlZD86IGJvb2xlYW47XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHBhcmVudD86IENQUENvbnN0cnVjdDtcclxuICAgIHB1YmxpYyByZWFkb25seSBjaGlsZHJlbjogcmVhZG9ubHkgQ1BQQ29uc3RydWN0W10gPSBbXTtcclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHRUeXBlKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IENQUENvbnN0cnVjdC5ORVhUX0lEKys7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcblxyXG4gICAgICAgIC8vIFRPRE86IGZpZ3VyZSBvdXQgbGlicmFyeSBzdHVmZlxyXG4gICAgICAgIC8vIGlmIChjb250ZXh0LmxpYnJhcnlJZCkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmxpYnJhcnlJZCA9IGNvbnRleHQubGlicmFyeUlkO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBpZiAoY29udGV4dC5saWJyYXJ5VW5zdXBwb3J0ZWQpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5pc0xpYnJhcnlVbnN1cHBvcnRlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBcclxuICAgICAgICAvLyBUT0RPOiBmaWd1cmUgb3V0IGxpYnJhcnkgc3R1ZmZcclxuICAgICAgICAvLyBJZiB0aGUgcGFyZW50IGlzIGFuIHVzdXBwb3J0ZWQgbGlicmFyeSBjb25zdHJ1Y3QsIHNvIGFyZSBpdHMgY2hpbGRyZW4gKGluY2x1ZGluZyB0aGlzIG9uZSlcclxuICAgICAgICAvLyBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQubGlicmFyeV91bnN1cHBvcnRlZCkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmlfbGlicmFyeV91bnN1cHBvcnRlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyBJZiB0aGlzIGNvbnRydWN0IGlzIE5PVCBhdXhpbGlhcnkgV0lUSCBSRVNQRUNUIFRPIElUUyBQQVJFTlQgKGFzIGluZGljYXRlZCBieSBjb250ZXh0LmF1eGlsaWFyeSksIHRoZW4gd2Ugc2hvdWxkXHJcbiAgICAgICAgLy8gYWRkIGl0IGFzIGEgY2hpbGQuIE90aGVyd2lzZSwgaWYgdGhpcyBjb25zdHJ1Y3QgaXMgYXV4aWxpYXJ5IGluIHRoYXQgc2Vuc2Ugd2UgZG9uJ3QuXHJcbiAgICAgICAgLy8gaWYgKGNvbnRleHQucGFyZW50KSB7XHJcbiAgICAgICAgLy8gICAgIC8vIFRoaXMgY2FzdCBoZXJlIGlzIGEgaGFjayB0byBnZXQgYXJvdW5kIHRoZSB0eXBlIHN5c3RlbSBub3QgbGlraW5nXHJcbiAgICAgICAgLy8gICAgIC8vIHRoZSBmYWN0IHRoYXQgYWRkQ2hpbGQgaXMgcHVibGljIGluIEdsb2JhbFByb2dyYW1Db25zdHJ1Y3QgYnV0IHByaXZhdGUgaW4gQ1BQQ29uc3RydWN0XHJcbiAgICAgICAgLy8gICAgIC8vICh0aGUgdW5pb24gdHlwZSBvbmx5IGNvbnRhaW5zIHRoZSBwdWJsaWMgbWV0aG9kcylcclxuICAgICAgICAvLyAgICAgKDxDUFBDb25zdHJ1Y3Q+dGhpcy5wYXJlbnQpLmFkZENoaWxkKHRoaXMpO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXR0YWNoKGNoaWxkOiBDUFBDb25zdHJ1Y3QpIHtcclxuICAgICAgICBhc011dGFibGUodGhpcy5jaGlsZHJlbikucHVzaChjaGlsZCk7XHJcbiAgICAgICAgY2hpbGQub25BdHRhY2godGhpcyk7XHJcbiAgICAgICAgLy8gVE9ETzogYWRkIG5vdGVzIGZyb20gY2hpbGQ/XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGF0dGFjaEFsbChjaGlsZHJlbjogcmVhZG9ubHkgQ1BQQ29uc3RydWN0W10pIHtcclxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4gdGhpcy5hdHRhY2goY2hpbGQpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3Qgb25BdHRhY2gocGFyZW50OiB0aGlzW1wicGFyZW50XCJdKSA6IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIGJ5IFwiY3JlYXRlRnJvbUFTVFwiIHN0YXRpYyBcIm5hbWVkIGNvbnN0cnVjdG9yXCIgZnVuY3Rpb25zIGluIGRlcml2ZWQgY2xhc3Nlc1xyXG4gICAgICogdG8gc2V0IHRoZSBBU1QgZnJvbSB3aGljaCBhIGNvbnN0cnVjdCB3YXMgY3JlYXRlZC4gUmV0dXJucyBgdGhpc2AgZm9yIGNvbnZlbmllbmNlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0QVNUKHRoaXM6IENQUENvbnN0cnVjdDxUcmFuc2xhdGlvblVuaXRDb250ZXh0PiwgYXN0OiBBU1RUeXBlKSA6IHRoaXMgJiB7YXN0OiBBU1RUeXBlfSB7XHJcbiAgICAgICAgYXNNdXRhYmxlKHRoaXMpLmFzdCA9IGFzdDtcclxuICAgICAgICBpZiAoIWFzdC5zb3VyY2UpIHtcclxuICAgICAgICAgICAgYXNzZXJ0RmFsc2UoXCJBU1Qgc291cmNlIGlzIHVuZGVmaW5lZC4gQSB0cmFjaygpIGNhbGwgaXMgbGlrZWx5IG1pc3NpbmcgaW4gdGhlIGdyYW1tYXIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhc011dGFibGUodGhpcykuc291cmNlUmVmZXJlbmNlID0gdGhpcy5jb250ZXh0LnRyYW5zbGF0aW9uVW5pdC5nZXRTb3VyY2VSZWZlcmVuY2UoYXN0LnNvdXJjZS5saW5lLCBhc3Quc291cmNlLmNvbHVtbiwgYXN0LnNvdXJjZS5zdGFydCwgYXN0LnNvdXJjZS5lbmQpO1xyXG4gICAgICAgIHJldHVybiA8dGhpcyAmIHthc3Q6IEFTVFR5cGV9Pjxhbnk+dGhpczsgLy8gVE9ETzogdGhpcyB3aG9sZSBmdW5jdGlvbiBpcyBnb2luZyB0byBnbyBhd2F5LCBzbyB0aGlzIHVnbHkgY2FzdCB3aWxsIHRvb1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBnZXRTb3VyY2VUZXh0KCkge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmFzdC5jb2RlID8gdGhpcy5hc3QuY29kZS50ZXh0IDogXCJhbiBleHByZXNzaW9uXCI7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gcHVibGljIGlzTGlicmFyeUNvbnN0cnVjdCgpIHtcclxuICAgIC8vICAgICByZXR1cm4gdGhpcy5saWJyYXJ5SWQgIT09IHVuZGVmaW5lZDtcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgZ2V0TGlicmFyeUlkKCkge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmxpYnJhcnlJZDtcclxuICAgIC8vIH1cclxuXHJcbiAgICBwdWJsaWMgZXhwbGFpbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSA6IEV4cGxhbmF0aW9uIHtcclxuICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwiW05vIGV4cGxhbmF0aW9uIGF2YWlsYWJsZS5dXCIsIGlnbm9yZTogdHJ1ZX07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogRGVzY3JpcHRpb24ge1xyXG4gICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJbTm8gZGVzY3JpcHRpb24gYXZhaWxhYmxlLl1cIiwgaWdub3JlOiBmYWxzZX07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZE5vdGUobm90ZTogTm90ZSkge1xyXG4gICAgICAgIHRoaXMubm90ZXMucHVzaChub3RlKTtcclxuICAgICAgICBpZiAobm90ZS5raW5kID09PSBOb3RlS2luZC5FUlJPUikge1xyXG4gICAgICAgICAgICAoPE11dGFibGU8dGhpcz4+dGhpcykuaGFzRXJyb3JzID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgKHRoaXMucGFyZW50ICYmIHRoaXMuaV9hdXhpbGlhcnlMZXZlbCA9PT0gdGhpcy5wYXJlbnQuaV9hdXhpbGlhcnlMZXZlbCkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLnBhcmVudC5hZGROb3RlKG5vdGUpO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXROb3RlcyA6IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmlfbm90ZXM7XHJcbiAgICAvLyB9LFxyXG4gICAgcHVibGljIGdldE5lYXJlc3RTb3VyY2VSZWZlcmVuY2UodGhpczogQ1BQQ29uc3RydWN0PFRyYW5zbGF0aW9uVW5pdENvbnRleHQ+KSB7XHJcbiAgICAgICAgbGV0IGNvbnN0cnVjdCA6IENQUENvbnN0cnVjdCA9IHRoaXM7XHJcbiAgICAgICAgd2hpbGUgKCFjb25zdHJ1Y3Quc291cmNlUmVmZXJlbmNlICYmIGNvbnN0cnVjdC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgY29uc3RydWN0ID0gY29uc3RydWN0LnBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdC5zb3VyY2VSZWZlcmVuY2UgfHwgdGhpcy5jb250ZXh0LnRyYW5zbGF0aW9uVW5pdC5nZXRTb3VyY2VSZWZlcmVuY2UoMCwwLDAsMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdDxBU1RUeXBlIGV4dGVuZHMgQVNUTm9kZSA9IEFTVE5vZGU+ID0gQ1BQQ29uc3RydWN0PFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIEFTVFR5cGU+O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcbiAgICBcclxuICAgIC8vIF90X2lzQ29tcGlsZWQgaXMgaGVyZSB0byBwcmV2ZW50IChvdGhlcndpc2UpIHN0cnVjdHVyYWxseSBlcXVpdmFsZW50IG5vbi1jb21waWxlZCBjb25zdHJ1Y3RzXHJcbiAgICAvLyBmcm9tIGJlaW5nIGFzc2lnbmFibGUgdG8gYSBjb21waWxlZCBleHByZXNzaW9uIHR5cGVcclxuICAgIC8vIFRPRE86IG1heWJlIGJldHRlciB0byB1c2UgYSBzeW1ib2wgaGVyZT9cclxuICAgIHJlYWRvbmx5IF90X2lzQ29tcGlsZWQ6IG5ldmVyO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZENvbnN0cnVjdCBleHRlbmRzIENQUENvbnN0cnVjdCwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU3RhY2tUeXBlID0gXCJzdGF0ZW1lbnRcIiB8IFwiZXhwcmVzc2lvblwiIHwgIFwiZnVuY3Rpb25cIiB8IFwiaW5pdGlhbGl6ZXJcIiB8XCJjYWxsXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUnVudGltZUNvbnN0cnVjdDxDIGV4dGVuZHMgQ29tcGlsZWRDb25zdHJ1Y3QgPSBDb21waWxlZENvbnN0cnVjdD4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUodGhpcyk7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHNpbTogU2ltdWxhdGlvbjtcclxuICAgIHB1YmxpYyByZWFkb25seSBtb2RlbDogQztcclxuICAgIHB1YmxpYyByZWFkb25seSBzdGFja1R5cGU6IFN0YWNrVHlwZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHVzaGVkQ2hpbGRyZW46IHtbaW5kZXg6IHN0cmluZ106IFJ1bnRpbWVDb25zdHJ1Y3R9ID0ge307IC8vIFRPRE86IGNoYW5nZSBuYW1lICh0aGUgY2hpbGRyZW4gYXJlIG5vdCBuZWNlc3NhcmlseSBwdXNoZWQpXHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHBhcmVudD86IFJ1bnRpbWVDb25zdHJ1Y3Q7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXQVJOSU5HOiBUaGUgY29udGFpbmluZ1J1bnRpbWVGdW5jdGlvbiBwcm9wZXJ0eSBtYXkgYmUgdW5kZWZpbmVkLCBldmVuIHRob3VnaCBpdCdzIHR5cGUgc3VnZ2VzdHMgaXQgd2lsbCBhbHdheXNcclxuICAgICAqIGJlIGRlZmluZWQuIEluIG1vc3QgcGxhY2VzIHdoZXJlIGl0IGlzIGFjY2Vzc2VkLCB0aGVyZSBpcyBhbiBpbXBsaWNpdCBhc3N1bXB0aW9uIHRoYXQgYSBydW50aW1lIGNvbnN0cnVjdFxyXG4gICAgICogc2l0dWF0ZWQgaW5zaWRlIGEgZnVuY3Rpb24gaXMgYmVpbmcgdXNlZCAoZS5nLiBsb29raW5nIHVwIGFuIGVudGl0eSB0aGF0IGRlcGVuZHMgb24gYSBsb2NhbCBmdW5jdGlvbikgYW5kIHRoZVxyXG4gICAgICogY2xpZW50IGNvZGUgd291bGQgZW5kIHVwIG5lZWRpbmcgYSBub24tbnVsbCBhc3NlcnRpb24gYW55d2F5LiBUaG9zZSBub24tbnVsbCBhc3NlcnRpb25zIGFyZSBhbm5veWluZywgc29cclxuICAgICAqIGluc3RlYWQgd2UgdHJpY2sgdGhlIHR5cGUgc3lzdGVtIGFuZCB0cnVzdCB0aGF0IHRoaXMgcHJvcGVydHkgd2lsbCBiZSB1c2VkIGFwcHJvcHJpYXRlbHkgYnkgdGhlIHByb2dyYW1tZXIuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSBjb250YWluaW5nUnVudGltZUZ1bmN0aW9uITogYW55O1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBzdGVwc1Rha2VuQXRTdGFydDogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGlzQWN0aXZlOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHVibGljIGlzRG9uZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8vIFRPRE86IHJlZmFjdG9yIHBhdXNlcy4gbWF5YmUgbW92ZSB0aGVtIHRvIHRoZSBpbXBsZW1lbnRhdGlvblxyXG4gICAgcHJpdmF0ZSBwYXVzZXM6IHtbaW5kZXg6c3RyaW5nXTogYW55fSA9IHt9OyAvLyBUT0RPOiByZW1vdmUgYW55IHR5cGVcclxuICAgIFxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQywgc3RhY2tUeXBlOiBTdGFja1R5cGUsIHBhcmVudE9yU2ltOiBSdW50aW1lQ29uc3RydWN0IHwgU2ltdWxhdGlvbikge1xyXG4gICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuICAgICAgICB0aGlzLnN0YWNrVHlwZSA9IHN0YWNrVHlwZTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAocGFyZW50T3JTaW0gaW5zdGFuY2VvZiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgIGFzc2VydCh0aGlzLnBhcmVudCAhPT0gdGhpcywgXCJDb2RlIGluc3RhbmNlIG1heSBub3QgYmUgaXRzIG93biBwYXJlbnRcIik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNpbSA9IHBhcmVudE9yU2ltLnNpbTtcclxuICAgICAgICAgICAgYXNzZXJ0KHBhcmVudE9yU2ltLnNpbSA9PT0gdGhpcy5zaW0sIFwiUnVudGltZSBjb25zdHJ1Y3QgbWF5IG5vdCBiZWxvbmcgdG8gYSBkaWZmZXJlbnQgc2ltdWxhdGlvbiB0aGFuIGl0cyBwYXJlbnQuXCIpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudE9yU2ltO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5hZGRDaGlsZCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwYXJlbnRPclNpbS5jb250YWluaW5nUnVudGltZUZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb24gPSBwYXJlbnRPclNpbS5jb250YWluaW5nUnVudGltZUZ1bmN0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNpbSA9IHBhcmVudE9yU2ltO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zdGVwc1Rha2VuQXRTdGFydCA9IHRoaXMuc2ltLnN0ZXBzVGFrZW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSRVFVSVJFUzogdGhpcyBpbnN0YW5jZSBpcyBvbiB0aGUgdG9wIG9mIHRoZSBleGVjdXRpb24gc3RhY2tcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0ZXBGb3J3YXJkKCkge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwic3RlcEZvcndhcmRcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcEZvcndhcmRJbXBsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHN0ZXBGb3J3YXJkSW1wbCgpIDogdm9pZDtcclxuXHJcbiAgICBwdWJsaWMgdXBOZXh0KCkge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwidXBOZXh0XCIpO1xyXG5cclxuICAgICAgICAvLyBmb3IodmFyIGtleSBpbiB0aGlzLnBhdXNlcyl7XHJcbiAgICAgICAgLy8gICAgIHZhciBwID0gdGhpcy5wYXVzZXNba2V5XTtcclxuICAgICAgICAvLyAgICAgaWYgKHAucGF1c2VXaGVuVXBOZXh0IC8vfHxcclxuICAgICAgICAvLyAgICAgICAgIC8vIHAucGF1c2VBdEluZGV4ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5pbmRleCA9PSBwLnBhdXNlQXRJbmRleCl7XHJcbiAgICAgICAgLy8gICAgICl7XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLnNpbS5wYXVzZSgpO1xyXG4gICAgICAgIC8vICAgICAgICAgcC5jYWxsYmFjayAmJiBwLmNhbGxiYWNrKCk7XHJcbiAgICAgICAgLy8gICAgICAgICBkZWxldGUgdGhpcy5wYXVzZXNba2V5XTtcclxuICAgICAgICAvLyAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy51cE5leHRJbXBsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHVwTmV4dEltcGwoKSA6IHZvaWQ7XHJcblxyXG4gICAgcHJvdGVjdGVkIGRvbmUoKSB7XHJcbiAgICAgICAgdGhpcy5pc0RvbmUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRQYXVzZVdoZW5VcE5leHQoKSB7XHJcbiAgICAgICAgdGhpcy5wYXVzZXNbXCJ1cE5leHRcIl0gPSB7cGF1c2VXaGVuVXBOZXh0OiB0cnVlfTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgd2FpdCgpIHtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcIndhaXRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHB1c2hlZCgpIHtcclxuICAgICAgICAoPGJvb2xlYW4+dGhpcy5pc0FjdGl2ZSkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwicHVzaGVkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwb3BwZWQoKSB7XHJcbiAgICAgICAgKDxib29sZWFuPnRoaXMuaXNBY3RpdmUpID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJwb3BwZWRcIiwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRDaGlsZChjaGlsZDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIHRoaXMucHVzaGVkQ2hpbGRyZW5bY2hpbGQubW9kZWwuaWRdID0gY2hpbGQ7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJjaGlsZFB1c2hlZFwiLCBjaGlsZCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIGZpbmRQYXJlbnQgOiBmdW5jdGlvbihzdGFja1R5cGUpe1xyXG4gICAgLy8gICAgIGlmIChzdGFja1R5cGUpe1xyXG4gICAgLy8gICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XHJcbiAgICAvLyAgICAgICAgIHdoaWxlKHBhcmVudCAmJiBwYXJlbnQuc3RhY2tUeXBlICE9IHN0YWNrVHlwZSl7XHJcbiAgICAvLyAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBwYXJlbnQ7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIHB1YmxpYyBmaW5kUGFyZW50QnlNb2RlbChtb2RlbDogQ1BQQ29uc3RydWN0KSB7XHJcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xyXG4gICAgICAgIHdoaWxlKHBhcmVudCAmJiBwYXJlbnQubW9kZWwuaWQgIT0gbW9kZWwuaWQpe1xyXG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBleHBsYWluKCkgOiBFeHBsYW5hdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZXhwbGFpbih0aGlzLnNpbSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlKCkgOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZGVzY3JpYmUodGhpcy5zaW0sIHRoaXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEJhc2ljQ1BQQ29uc3RydWN0PENvbnRleHRUeXBlIGV4dGVuZHMgVHJhbnNsYXRpb25Vbml0Q29udGV4dCA9IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIEFTVFR5cGUgZXh0ZW5kcyBBU1ROb2RlID0gQVNUTm9kZT4gZXh0ZW5kcyBDUFBDb25zdHJ1Y3Q8Q29udGV4dFR5cGUsIEFTVFR5cGU+IHtcclxuXHJcbiAgICBwdWJsaWMgcGFyZW50PzogQ1BQQ29uc3RydWN0O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0VHlwZSkge1xyXG4gICAgICAgIHN1cGVyKGNvbnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbkF0dGFjaChwYXJlbnQ6IENQUENvbnN0cnVjdCkge1xyXG4gICAgICAgICg8TXV0YWJsZTx0aGlzPj50aGlzKS5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBJbnZhbGlkQ29uc3RydWN0IGV4dGVuZHMgQmFzaWNDUFBDb25zdHJ1Y3Qge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBub3RlOiBOb3RlO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCBlcnJvckZuOiAoY29uc3RydWN0OiBDUFBDb25zdHJ1Y3QpID0+IE5vdGUpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgICAgICB0aGlzLmFkZE5vdGUodGhpcy5ub3RlID0gZXJyb3JGbih0aGlzKSk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG90ZW50aWFsRnVsbEV4cHJlc3Npb248Q29udGV4dFR5cGUgZXh0ZW5kcyBUcmFuc2xhdGlvblVuaXRDb250ZXh0ID0gVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgQVNUVHlwZSBleHRlbmRzIEFTVE5vZGUgPSBBU1ROb2RlPiBleHRlbmRzIEJhc2ljQ1BQQ29uc3RydWN0PENvbnRleHRUeXBlLCBBU1RUeXBlPiB7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSBwYXJlbnQ/OiBCYXNpY0NQUENvbnN0cnVjdDsgLy8gTmFycm93cyB0eXBlIG9mIHBhcmVudCBwcm9wZXJ0eSBvZiBDUFBDb25zdHJ1Y3RcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGVtcG9yYXJ5T2JqZWN0czogVGVtcG9yYXJ5T2JqZWN0RW50aXR5W10gPSBbXTtcclxuICAgIHB1YmxpYyByZWFkb25seSB0ZW1wb3JhcnlEZWFsbG9jYXRvcj86IFRlbXBvcmFyeURlYWxsb2NhdG9yO1xyXG5cclxuXHJcbiAgICBwdWJsaWMgb25BdHRhY2gocGFyZW50OiBCYXNpY0NQUENvbnN0cnVjdCkge1xyXG5cclxuICAgICAgICAoPE11dGFibGU8dGhpcz4+dGhpcykucGFyZW50ID0gcGFyZW50O1xyXG5cclxuICAgICAgICAvLyBUaGlzIG1heSBubyBsb25nZXIgYmUgYSBmdWxsIGV4cHJlc3Npb24uIElmIHNvLCBtb3ZlIHRlbXBvcmFyeSBlbnRpdGllcyB0b1xyXG4gICAgICAgIC8vIHRoZWlyIG5ldyBmdWxsIGV4cHJlc3Npb24uXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRnVsbEV4cHJlc3Npb24oKSkge1xyXG4gICAgICAgICAgICBsZXQgZmUgPSB0aGlzLmZpbmRGdWxsRXhwcmVzc2lvbigpO1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBvcmFyeU9iamVjdHMuZm9yRWFjaCgodGVtcEVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZmUuYWRkVGVtcG9yYXJ5T2JqZWN0KHRlbXBFbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy50ZW1wb3JhcnlPYmplY3RzLmxlbmd0aCA9IDA7IC8vIGNsZWFyIGFycmF5XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOb3cgdGhhdCB3ZSBhcmUgYXR0YWNoZWQsIHRoZSBhc3N1bXB0aW9uIGlzIG5vIG1vcmUgdGVtcG9yYXJ5IGVudGl0aWVzXHJcbiAgICAgICAgLy8gd2lsbCBiZSBhZGRlZCB0byB0aGlzIGNvbnN0cnVjdCBvciBpdHMgYXR0YWNoZWQgY2hpbGRyZW4uIChUaGVyZSdzIGFuXHJcbiAgICAgICAgLy8gYXNzZXJ0IGluIGFkZFRlbXBvcmFyeU9iamVjdCgpIHRvIHByZXZlbnQgdGhpcy4pIFRoYXQgbWVhbnMgaXQgaXMgbm93XHJcbiAgICAgICAgLy8gc2FmZSB0byBjb21waWxlIGFuZCBhZGQgdGhlIHRlbXBvcmFyeSBkZWFsbG9jYXRvciBjb25zdHJ1Y3QgYXMgYSBjaGlsZC5cclxuICAgICAgICBpZih0aGlzLnRlbXBvcmFyeU9iamVjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAoPFRlbXBvcmFyeURlYWxsb2NhdG9yPnRoaXMudGVtcG9yYXJ5RGVhbGxvY2F0b3IpID0gbmV3IFRlbXBvcmFyeURlYWxsb2NhdG9yKHRoaXMuY29udGV4dCwgdGhpcy50ZW1wb3JhcnlPYmplY3RzKTtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2godGhpcy50ZW1wb3JhcnlEZWFsbG9jYXRvciEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNGdWxsRXhwcmVzc2lvbigpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhcmVudCB8fCAhKHRoaXMucGFyZW50IGluc3RhbmNlb2YgUG90ZW50aWFsRnVsbEV4cHJlc3Npb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnBhcmVudC5pc0Z1bGxFeHByZXNzaW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVE9ETzogdGhpcyBmdW5jdGlvbiBjYW4gcHJvYmFibHkgYmUgY2xlYW5lZCB1cCBzbyB0aGF0IGl0IGRvZXNuJ3QgcmVxdWlyZSB0aGVzZSB1Z2x5IHJ1bnRpbWUgY2hlY2tzXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG5lYXJlc3QgZnVsbCBleHByZXNzaW9uIGNvbnRhaW5pbmcgdGhpcyBleHByZXNzaW9uIChwb3NzaWJseSBpdHNlbGYpLlxyXG4gICAgICogQHBhcmFtIGluc3RcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpbmRGdWxsRXhwcmVzc2lvbigpIDogUG90ZW50aWFsRnVsbEV4cHJlc3Npb24ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRnVsbEV4cHJlc3Npb24oKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5wYXJlbnQgfHwgISh0aGlzLnBhcmVudCBpbnN0YW5jZW9mIFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0RmFsc2UoXCJmYWlsZWQgdG8gZmluZCBmdWxsIGV4cHJlc3Npb24gZm9yIFwiICsgdGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZmluZEZ1bGxFeHByZXNzaW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRUZW1wb3JhcnlPYmplY3QodGVtcE9iakVudDogVGVtcG9yYXJ5T2JqZWN0RW50aXR5KSB7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLnBhcmVudCwgXCJUZW1wb3Jhcnkgb2JqZWN0cyBtYXkgbm90IGJlIGFkZGVkIHRvIGEgZnVsbCBleHByZXNzaW9uIGFmdGVyIGl0IGhhcyBiZWVuIGF0dGFjaGVkLlwiKVxyXG4gICAgICAgIHRoaXMudGVtcG9yYXJ5T2JqZWN0cy5wdXNoKHRlbXBPYmpFbnQpO1xyXG4gICAgICAgIHRlbXBPYmpFbnQuc2V0T3duZXIodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVRlbXBvcmFyeU9iamVjdDxUIGV4dGVuZHMgT2JqZWN0VHlwZT4odHlwZTogVCwgZGVzY3JpcHRpb246IHN0cmluZykgOiBUZW1wb3JhcnlPYmplY3RFbnRpdHk8VD57XHJcbiAgICAgICAgbGV0IGZlID0gdGhpcy5maW5kRnVsbEV4cHJlc3Npb24oKTtcclxuICAgICAgICB2YXIgdGVtcE9iakVudCA9IG5ldyBUZW1wb3JhcnlPYmplY3RFbnRpdHkodHlwZSwgdGhpcywgZmUsIGRlc2NyaXB0aW9uKTtcclxuICAgICAgICB0aGlzLnRlbXBvcmFyeU9iamVjdHNbdGVtcE9iakVudC5lbnRpdHlJZF0gPSB0ZW1wT2JqRW50O1xyXG4gICAgICAgIHJldHVybiB0ZW1wT2JqRW50O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkUG90ZW50aWFsRnVsbEV4cHJlc3Npb24gZXh0ZW5kcyBQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbiwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yO1xyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUnVudGltZVBvdGVudGlhbEZ1bGxFeHByZXNzaW9uPEMgZXh0ZW5kcyBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uID0gQ29tcGlsZWRQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbj4gZXh0ZW5kcyBSdW50aW1lQ29uc3RydWN0PEM+IHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBSdW50aW1lVGVtcG9yYXJ5RGVhbGxvY2F0b3I7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGVtcG9yYXJ5T2JqZWN0czoge1tpbmRleDogbnVtYmVyXTogVGVtcG9yYXJ5T2JqZWN0IHwgdW5kZWZpbmVkfSA9IHt9O1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBjb250YWluaW5nRnVsbEV4cHJlc3Npb24gOiBSdW50aW1lUG90ZW50aWFsRnVsbEV4cHJlc3Npb247XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG1vZGVsOiBDLCBzdGFja1R5cGU6IFN0YWNrVHlwZSwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHN0YWNrVHlwZSwgcGFyZW50KTtcclxuICAgICAgICBpZiAodGhpcy5tb2RlbC50ZW1wb3JhcnlEZWFsbG9jYXRvcikge1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBvcmFyeURlYWxsb2NhdG9yID0gdGhpcy5tb2RlbC50ZW1wb3JhcnlEZWFsbG9jYXRvci5jcmVhdGVSdW50aW1lQ29uc3RydWN0KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRhaW5pbmdGdWxsRXhwcmVzc2lvbiA9IHRoaXMuZmluZEZ1bGxFeHByZXNzaW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmaW5kRnVsbEV4cHJlc3Npb24oKSA6IFJ1bnRpbWVQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbiB7XHJcblxyXG4gICAgICAgIGxldCBydCA6IFJ1bnRpbWVDb25zdHJ1Y3QgPSB0aGlzO1xyXG4gICAgICAgIHdoaWxlIChydCBpbnN0YW5jZW9mIFJ1bnRpbWVQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbiAmJiAhcnQubW9kZWwuaXNGdWxsRXhwcmVzc2lvbigpICYmIHJ0LnBhcmVudCkge1xyXG4gICAgICAgICAgICBydCA9IHJ0LnBhcmVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChydCBpbnN0YW5jZW9mIFJ1bnRpbWVQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gcnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0RmFsc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGRvbmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGVtcG9yYXJ5RGVhbGxvY2F0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5zaW0ucHVzaCh0aGlzLnRlbXBvcmFyeURlYWxsb2NhdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIuZG9uZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUZW1wb3JhcnlEZWFsbG9jYXRvciBleHRlbmRzIEJhc2ljQ1BQQ29uc3RydWN0IHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyZW50PzogUG90ZW50aWFsRnVsbEV4cHJlc3Npb247XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGVtcG9yYXJ5T2JqZWN0czogVGVtcG9yYXJ5T2JqZWN0RW50aXR5W107XHJcblxyXG4gICAgLy8gcHVibGljIHJlYWRvbmx5IGR0b3JzOiAoTWVtYmVyRnVuY3Rpb25DYWxsIHwgbnVsbClbXTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgdGVtcG9yYXJ5T2JqZWN0czogVGVtcG9yYXJ5T2JqZWN0RW50aXR5W10gKSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcbiAgICAgICAgdGhpcy50ZW1wb3JhcnlPYmplY3RzID0gdGVtcG9yYXJ5T2JqZWN0cztcclxuXHJcbiAgICAgICAgLy8gVE9ETyBDTEFTU0VTOiBhZGQgYmFjayBpbiBkZXN0cnVjdG9yIGNhbGxzIGFuZCBkdG9ycyBtZW1iZXIgZnVuY3Rpb24gYWJvdmVcclxuICAgICAgICAvLyB0aGlzLmR0b3JzID0gdGVtcG9yYXJ5T2JqZWN0cy5tYXAoKHRlbXBFbnQpID0+IHtcclxuICAgICAgICAvLyAgICAgaWYgKHRlbXBFbnQudHlwZSBpbnN0YW5jZW9mIENsYXNzVHlwZSkge1xyXG4gICAgICAgIC8vICAgICAgICAgdmFyIGR0b3IgPSB0ZW1wRW50LnR5cGUuY3BwQ2xhc3MuZGVzdHJ1Y3RvcjtcclxuICAgICAgICAvLyAgICAgICAgIGlmIChkdG9yKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgLy9NZW1iZXJGdW5jdGlvbkNhbGwgYXJncyBhcmU6IGNvbnRleHQsIGZ1bmN0aW9uIHRvIGNhbGwsIGVtcHR5IGFyZ3MsIHJlY2VpdmVyXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgbGV0IGR0b3JDYWxsID0gbmV3IE1lbWJlckZ1bmN0aW9uQ2FsbChjb250ZXh0LCBkdG9yLCBbXSwgPFRlbXBvcmFyeU9iamVjdEVudGl0eTxDbGFzc1R5cGU+PnRlbXBFbnQpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuYXR0YWNoKGR0b3JDYWxsKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm4gZHRvckNhbGw7XHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgICBlbHNle1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5kdG9yLm5vX2Rlc3RydWN0b3JfdGVtcG9yYXJ5KHRlbXBFbnQuY3JlYXRvciwgdGVtcEVudCkpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVDb25zdHJ1Y3QodGhpczogQ29tcGlsZWRUZW1wb3JhcnlEZWFsbG9jYXRvciwgcGFyZW50OiBSdW50aW1lUG90ZW50aWFsRnVsbEV4cHJlc3Npb24pIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVUZW1wb3JhcnlEZWFsbG9jYXRvcih0aGlzLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBpc1RhaWxDaGlsZChjaGlsZDogRXhlY3V0YWJsZUNvbnN0cnVjdCkge1xyXG4gICAgLy8gICAgIHJldHVybiB7aXNUYWlsOiB0cnVlfTtcclxuICAgIC8vIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yIGV4dGVuZHMgVGVtcG9yYXJ5RGVhbGxvY2F0b3IsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuXHJcbiAgICAvLyByZWFkb25seSBkdG9yczogKENvbXBpbGVkTWVtYmVyRnVuY3Rpb25DYWxsIHwgbnVsbClbXTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lVGVtcG9yYXJ5RGVhbGxvY2F0b3IgZXh0ZW5kcyBSdW50aW1lQ29uc3RydWN0PENvbXBpbGVkVGVtcG9yYXJ5RGVhbGxvY2F0b3I+IHtcclxuXHJcbiAgICBwcml2YXRlIGluZGV4ID0gMDtcclxuICAgIHByaXZhdGUganVzdERlc3RydWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yLCBwYXJlbnQ6IFJ1bnRpbWVQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbikge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsLCBcImV4cHJlc3Npb25cIiwgcGFyZW50KTtcclxuICAgIH1cclxuXHRcclxuICAgIHByb3RlY3RlZCB1cE5leHRJbXBsKCkge1xyXG5cclxuICAgICAgICAvLyBmb3IgKHZhciBrZXkgaW4gdGhpcy50ZW1wb3Jhcmllcyl7XHJcbiAgICAgICAgLy8gICAgIHZhciB0ZW1wT2JqSW5zdCA9IHRoaXMudGVtcG9yYXJpZXNba2V5XS5ydW50aW1lTG9va3VwKHNpbSwgaW5zdC5wYXJlbnQpO1xyXG4gICAgICAgIC8vICAgICBpZiAodGVtcE9iakluc3QpIHtcclxuICAgICAgICAvLyAgICAgICAgIHNpbS5tZW1vcnkuZGVhbGxvY2F0ZVRlbXBvcmFyeU9iamVjdCh0ZW1wT2JqSW5zdCwgaW5zdCk7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbiAgICAgICAgLy8gcmV0dXJuIHRydWU7XHJcblxyXG5cclxuICAgICAgICAvLyBsZXQgZHRvcnMgPSB0aGlzLm1vZGVsLmR0b3JzO1xyXG4gICAgICAgIGxldCBkdG9ycyA6IHJlYWRvbmx5IG51bGxbXSA9IHRoaXMubW9kZWwudGVtcG9yYXJ5T2JqZWN0cy5tYXAodCA9PiBudWxsKTsgLy8gVE9ETyBDTEFTU0VTOiByZXBsYWNlIHRoaXMgaGFjayB3aXRoIGFib3ZlXHJcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPCBkdG9ycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gbGV0IGR0b3IgPSBkdG9yc1t0aGlzLmluZGV4XTtcclxuICAgICAgICAgICAgLy8gaWYgKCF0aGlzLmp1c3REZXN0cnVjdGVkICYmIGR0b3IpIHtcclxuICAgICAgICAgICAgLy8gICAgIGR0b3IuY3JlYXRlUnVudGltZUNvbnN0cnVjdCh0aGlzKTtcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMuc2ltLnB1c2goZHRvcik7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmp1c3REZXN0cnVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAvLyBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2ltLm1lbW9yeS5kZWFsbG9jYXRlVGVtcG9yYXJ5T2JqZWN0KHRoaXMubW9kZWwudGVtcG9yYXJ5T2JqZWN0c1t0aGlzLmluZGV4XS5ydW50aW1lTG9va3VwKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuanVzdERlc3RydWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLnNpbS5wb3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0ZXBGb3J3YXJkSW1wbCgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFRPRE86IEZha2VDb25zdHJ1Y3QgYW5kIEZha2VEZWNsYXJhdGlvbiBhcmUgbmV2ZXIgdXNlZFxyXG4vLyB2YXIgRmFrZUNvbnN0cnVjdCA9IENsYXNzLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZSA6IFwiRmFrZUNvbnN0cnVjdFwiLFxyXG5cclxuLy8gICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcbi8vICAgICAgICAgdGhpcy5pZCA9IENQUENvbnN0cnVjdC5fbmV4dElkKys7XHJcbi8vICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xyXG5cclxuLy8gICAgICAgICAvLyB0aGlzLmlfbm90ZXMgPSBbXTtcclxuLy8gICAgICAgICAvLyB0aGlzLmlfaGFzRXJyb3JzID0gZmFsc2U7XHJcblxyXG4vLyAgICAgICAgIC8vIHRoaXMuaV9zZXRDb250ZXh0KGNvbnRleHQpO1xyXG4vLyAgICAgfSxcclxuXHJcblxyXG4vLyAgICAgZ2V0U291cmNlUmVmZXJlbmNlIDogZnVuY3Rpb24oKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIG51bGw7XHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG5cclxuLy8gdmFyIEZha2VEZWNsYXJhdGlvbiA9IEZha2VDb25zdHJ1Y3QuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lIDogRmFrZURlY2xhcmF0aW9uLFxyXG5cclxuLy8gICAgIGluaXQgOiBmdW5jdGlvbihuYW1lLCB0eXBlKSB7XHJcbi8vICAgICAgICAgdGhpcy5pbml0UGFyZW50KCk7XHJcbi8vICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuLy8gICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWRDb25zdHJ1Y3QgZXh0ZW5kcyBCYXNpY0NQUENvbnN0cnVjdCB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgdW5zdXBwb3J0ZWROYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IubG9ic3Rlci51bnN1cHBvcnRlZF9mZWF0dXJlKHRoaXMsIHVuc3VwcG9ydGVkTmFtZSkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8vIFRPRE86IHRoaXMgaXMganVzdCB0aGUgc2FtZSBhcyBSdW50aW1lQ29uc3RydWN0IHJpZ2h0IG5vd1xyXG4vLyBleHBvcnQgdHlwZSBFeGVjdXRhYmxlUnVudGltZUNvbnN0cnVjdCA9IFJ1bnRpbWVDb25zdHJ1Y3Q7IC8vIFJ1bnRpbWVGdW5jdGlvbiB8IFJ1bnRpbWVJbnN0cnVjdGlvbjtcclxuLy8gZXhwb3J0IGludGVyZmFjZSBFeGVjdXRhYmxlUnVudGltZUNvbnN0cnVjdCBleHRlbmRzIFJ1bnRpbWVDb25zdHJ1Y3Qge1xyXG4vLyAgICAgLy8gcmVhZG9ubHkgY29udGFpbmluZ1J1bnRpbWVGdW5jdGlvbiA6IFJ1bnRpbWVGdW5jdGlvbjtcclxuLy8gfVxyXG4vLyBleHBvcnQgYWJzdHJhY3QgY2xhc3MgUnVudGltZUluc3RydWN0aW9uPEMgZXh0ZW5kcyBDb21waWxlZEluc3RydWN0aW9uQ29uc3RydWN0ID0gQ29tcGlsZWRJbnN0cnVjdGlvbkNvbnN0cnVjdD4gZXh0ZW5kcyBSdW50aW1lQ29uc3RydWN0PEM+IHtcclxuXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgY29udGFpbmluZ1J1bnRpbWVGdW5jdGlvbjogUnVudGltZUZ1bmN0aW9uO1xyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IHBhcmVudCE6IEV4ZWN1dGFibGVSdW50aW1lQ29uc3RydWN0OyAvLyBuYXJyb3dzIHR5cGUgZnJvbSBiYXNlIGNsYXNzIHRvIGJlIGZvciBzdXJlIGRlZmluZWRcclxuXHJcbi8vICAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDLCBzdGFja1R5cGU6IFN0YWNrVHlwZSwgcGFyZW50OiBFeGVjdXRhYmxlUnVudGltZUNvbnN0cnVjdCkge1xyXG4vLyAgICAgICAgIHN1cGVyKG1vZGVsLCBzdGFja1R5cGUsIHBhcmVudCk7XHJcbi8vICAgICAgICAgdGhpcy5jb250YWluaW5nUnVudGltZUZ1bmN0aW9uID0gcGFyZW50LmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb247XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBpbnRlcmZhY2UgXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vLyAvKipcclxuLy8gICogUmVwcmVzZW50cyBlaXRoZXIgYSBkb3Qgb3IgYXJyb3cgb3BlcmF0b3IgYXQgcnVudGltZS5cclxuLy8gICogUHJvdmlkZXMgYSBjb250ZXh0IHRoYXQgbWF5IGNoYW5nZSBob3cgZW50aXRpZXMgYXJlIGxvb2tlZCB1cCBiYXNlZFxyXG4vLyAgKiBvbiB0aGUgb2JqZWN0IHRoZSBtZW1iZXIgaXMgYmVpbmcgYWNjZXNzZWQgZnJvbS4gZS5nLiBBIHZpcnR1YWwgbWVtYmVyXHJcbi8vICAqIGZ1bmN0aW9uIGxvb2t1cCBkZXBlbmRzIG9uIHRoZSBhY3R1YWwgKGkuZS4gZHluYW1pYykgdHlwZSBvZiB0aGUgb2JqZWN0XHJcbi8vICAqIG9uIHdoaWNoIGl0IHdhcyBjYWxsZWQuXHJcbi8vICAqL1xyXG4vLyBleHBvcnQgdmFyIFJ1bnRpbWVNZW1iZXJBY2Nlc3MgPSBSdW50aW1lQ29uc3RydWN0LmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZSA6IFwiUnVudGltZU1lbWJlckFjY2Vzc1wiLFxyXG5cclxuLy8gICAgIHNldE9iamVjdEFjY2Vzc2VkRnJvbSA6IGZ1bmN0aW9uKG9iaikge1xyXG4vLyAgICAgICAgIHRoaXMuaV9vYmplY3RBY2Nlc3NlZEZyb20gPSBvYmo7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGNvbnRleHR1YWxSZWNlaXZlciA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXMuaV9vYmplY3RBY2Nlc3NlZEZyb207XHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG5cclxuLy8gZXhwb3J0IHZhciBSdW50aW1lTmV3SW5pdGlhbGl6ZXIgPSBSdW50aW1lQ29uc3RydWN0LmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZSA6IFwiUnVudGltZU5ld0luaXRpYWxpemVyXCIsXHJcblxyXG4vLyAgICAgc2V0QWxsb2NhdGVkT2JqZWN0IDogZnVuY3Rpb24ob2JqKSB7XHJcbi8vICAgICAgICAgdGhpcy5pX2FsbG9jYXRlZE9iamVjdCA9IG9iajtcclxuLy8gICAgIH0sXHJcbi8vICAgICBnZXRBbGxvY2F0ZWRPYmplY3QgOiBmdW5jdGlvbigpIHtcclxuLy8gICAgICAgICByZXR1cm4gdGhpcy5pX2FsbG9jYXRlZE9iamVjdDtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgR2xvYmFsT2JqZWN0QWxsb2NhdG9yIGV4dGVuZHMgQ1BQQ29uc3RydWN0IHtcclxuICAgIFxyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBwYXJlbnQ/OiB1bmRlZmluZWQ7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZ2xvYmFsT2JqZWN0czogcmVhZG9ubHkgR2xvYmFsT2JqZWN0RGVmaW5pdGlvbltdO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBQcm9ncmFtQ29udGV4dCwgZ2xvYmFsT2JqZWN0czogcmVhZG9ubHkgR2xvYmFsT2JqZWN0RGVmaW5pdGlvbltdICkge1xyXG4gICAgICAgIHN1cGVyKGNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMuZ2xvYmFsT2JqZWN0cyA9IGdsb2JhbE9iamVjdHM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBvbkF0dGFjaChwYXJlbnQ6IHRoaXNbXCJwYXJlbnRcIl0pOiB2b2lkIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUNvbnN0cnVjdCh0aGlzOiBDb21waWxlZEdsb2JhbE9iamVjdEFsbG9jYXRvciwgc2ltOiBTaW11bGF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSdW50aW1lR2xvYmFsT2JqZWN0QWxsb2NhdG9yKHRoaXMsIHNpbSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHVibGljIGlzVGFpbENoaWxkKGNoaWxkOiBFeGVjdXRhYmxlQ29uc3RydWN0KSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHtpc1RhaWw6IHRydWV9O1xyXG4gICAgLy8gfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkR2xvYmFsT2JqZWN0QWxsb2NhdG9yIGV4dGVuZHMgR2xvYmFsT2JqZWN0QWxsb2NhdG9yLCBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcbiAgICByZWFkb25seSBnbG9iYWxPYmplY3RzOiByZWFkb25seSBDb21waWxlZEdsb2JhbE9iamVjdERlZmluaXRpb25bXTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVHbG9iYWxPYmplY3RBbGxvY2F0b3IgZXh0ZW5kcyBSdW50aW1lQ29uc3RydWN0PENvbXBpbGVkR2xvYmFsT2JqZWN0QWxsb2NhdG9yPiB7XHJcblxyXG4gICAgcHJpdmF0ZSBpbmRleCA9IDA7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRHbG9iYWxPYmplY3RBbGxvY2F0b3IsIHNpbTogU2ltdWxhdGlvbikge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsLCBcInN0YXRlbWVudFwiLCBzaW0pOyAvLyBUT0RPOiBpcyBcInN0YXRlbWVudFwiIHRoZSByaWdodCBzdGFjayB0eXBlIGhlcmU/IHNob3VsZCBJIG1ha2UgYSBuZXcgb25lP1xyXG4gICAgfVxyXG5cdFxyXG4gICAgcHJvdGVjdGVkIHVwTmV4dEltcGwoKSB7XHJcblxyXG4gICAgICAgIC8vIGxldCBkdG9ycyA9IHRoaXMubW9kZWwuZHRvcnM7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPCB0aGlzLm1vZGVsLmdsb2JhbE9iamVjdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCBvYmpEZWYgPSB0aGlzLm1vZGVsLmdsb2JhbE9iamVjdHNbdGhpcy5pbmRleF07XHJcbiAgICAgICAgICAgIHRoaXMuc2ltLm1lbW9yeS5hbGxvY2F0ZVN0YXRpYyhvYmpEZWYpO1xyXG4gICAgICAgICAgICBpZiAob2JqRGVmLmluaXRpYWxpemVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpbS5wdXNoKG9iakRlZi5pbml0aWFsaXplci5jcmVhdGVSdW50aW1lSW5pdGlhbGl6ZXIodGhpcykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICsrdGhpcy5pbmRleDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5zaW0ucG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGVwRm9yd2FyZEltcGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgQ1BQQ29uc3RydWN0IH0gZnJvbSBcIi4vY29uc3RydWN0c1wiO1xyXG5pbXBvcnQgeyBTb3VyY2VSZWZlcmVuY2UgfSBmcm9tIFwiLi9Qcm9ncmFtXCI7XHJcbmltcG9ydCB7IFJlZmVyZW5jZVR5cGUsIE9iamVjdFR5cGUsIENsYXNzVHlwZSwgVHlwZSwgQm91bmRlZEFycmF5VHlwZSwgQXJyYXlPZlVua25vd25Cb3VuZFR5cGUsIEF0b21pY1R5cGUsIHNhbWVUeXBlLCBQb3RlbnRpYWxQYXJhbWV0ZXJUeXBlIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgQ1BQRW50aXR5LCBEZWNsYXJlZEVudGl0eSwgT2JqZWN0RW50aXR5LCBBdXRvRW50aXR5LCBUZW1wb3JhcnlPYmplY3RFbnRpdHksIEZ1bmN0aW9uRW50aXR5LCBTdGF0aWNFbnRpdHkgfSBmcm9tIFwiLi9lbnRpdGllc1wiO1xyXG5pbXBvcnQgeyBWb2lkRGVjbGFyYXRpb24sIFN0b3JhZ2VTcGVjaWZpZXJLZXksIFR5cGVTcGVjaWZpZXJLZXksIFNpbXBsZVR5cGVOYW1lLCBTaW1wbGVEZWNsYXJhdGlvbiB9IGZyb20gXCIuL2RlY2xhcmF0aW9uc1wiO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uLCBUeXBlZEV4cHJlc3Npb24gfSBmcm9tIFwiLi9leHByZXNzaW9uc1wiO1xyXG5cclxuZXhwb3J0IGVudW0gTm90ZUtpbmQge1xyXG4gICAgRVJST1IgPSBcImVycm9yXCIsXHJcbiAgICBXQVJOSU5HID0gXCJ3YXJuaW5nXCIsXHJcbiAgICBTVFlMRSA9IFwic3R5bGVcIixcclxuICAgIE9USEVSID0gXCJvdGhlclwiXHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBOb3RlIHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkga2luZDogTm90ZUtpbmQ7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaWQ6IHN0cmluZztcclxuICAgIHB1YmxpYyByZWFkb25seSBtZXNzYWdlOiBzdHJpbmc7IFxyXG4gICAgXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioa2luZDogTm90ZUtpbmQsIGlkOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMua2luZCA9IGtpbmQ7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcHJpbWFyeSBzb3VyY2UgcmVmZXJlbmNlIGZvciB0aGlzIG5vdGUsIGFsdGhvdWdoIG1vcmUgdGhhbiBvbmUgbWF5IGV4aXN0LlxyXG4gICAgICogVXNlIHRoZSBhbGxTb3VyY2VSZWZlcmVuY2VzIHByb3BlcnR5IHRvIHJldHJpZXZlIGFuIGFycmF5IG9mIGFsbCBzb3VyY2UgcmVmZXJlbmNlcy5cclxuICAgICAqIE1heSBiZSB1bmRlZmluZWQgaWYgdGhlIG5vdGUgZG9lc24ndCBjb25jZXJuIGFueSBwYXJ0aWN1bGFyIHBhcnQgb2YgdGhlIHNvdXJjZS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHByaW1hcnlTb3VyY2VSZWZlcmVuY2U/OiBTb3VyY2VSZWZlcmVuY2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBhcnJheSBvZiBhbGwgc291cmNlIHJlZmVyZW5jZXMgZm9yIHRoaXMgbm90ZS5cclxuICAgICAqIE1heSBiZSBlbXB0eSBpZiB0aGUgbm90ZSBkb2Vzbid0IGNvbmNlcm4gYW55IHBhcnRpY3VsYXIgcGFydCBvZiB0aGUgc291cmNlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgYWxsU291cmNlUmVmZXJlbmNlczogcmVhZG9ubHkgU291cmNlUmVmZXJlbmNlW107XHJcblxyXG5cclxufVxyXG5cclxuXHJcblxyXG5hYnN0cmFjdCBjbGFzcyBCYXNpY05vdGVCYXNlIGV4dGVuZHMgTm90ZSB7XHJcblxyXG4gICAgcHVibGljIHByaW1hcnlTb3VyY2VSZWZlcmVuY2U6IFNvdXJjZVJlZmVyZW5jZTtcclxuICAgIHB1YmxpYyBhbGxTb3VyY2VSZWZlcmVuY2VzOiByZWFkb25seSBTb3VyY2VSZWZlcmVuY2VbXTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioc291cmNlUmVmOiBTb3VyY2VSZWZlcmVuY2UsIGtpbmQ6IE5vdGVLaW5kLCBpZDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihraW5kLCBpZCwgbWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5wcmltYXJ5U291cmNlUmVmZXJlbmNlID0gc291cmNlUmVmO1xyXG4gICAgICAgIHRoaXMuYWxsU291cmNlUmVmZXJlbmNlcyA9IFtzb3VyY2VSZWZdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUHJlcHJvY2Vzc29yTm90ZSBleHRlbmRzIEJhc2ljTm90ZUJhc2Uge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN5bnRheE5vdGUgZXh0ZW5kcyBCYXNpY05vdGVCYXNlIHtcclxuXHJcbn1cclxuXHJcbmNsYXNzIENvbnN0cnVjdE5vdGVCYXNlIGV4dGVuZHMgTm90ZSB7XHJcblxyXG4gICAgcHVibGljIHByaW1hcnlDb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdDtcclxuICAgIHB1YmxpYyByZWFkb25seSBjb25zdHJ1Y3RzOiByZWFkb25seSBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3RbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIGEgbm90ZSBhc3NvY2lhdGVkIHdpdGggdGhlIHByb3ZpZGVkIGNvbnN0cnVjdHMuXHJcbiAgICAgKiBAcGFyYW0gY29uc3RydWN0cyBBIHNpbmdsZSBjb2RlIGNvbnN0cnVjdCBvciBhcnJheSBvZiBjb25zdHJ1Y3RzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29uc3RydWN0czogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0IHwgcmVhZG9ubHkgVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0W10sIGtpbmQ6IE5vdGVLaW5kLCBpZDogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihraW5kLCBpZCwgbWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RzID0gY29uc3RydWN0cyBpbnN0YW5jZW9mIENQUENvbnN0cnVjdCA/IFtjb25zdHJ1Y3RzXSA6IGNvbnN0cnVjdHM7XHJcbiAgICAgICAgdGhpcy5wcmltYXJ5Q29uc3RydWN0ID0gdGhpcy5jb25zdHJ1Y3RzWzBdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgZ2V0IHByaW1hcnlTb3VyY2VSZWZlcmVuY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpbWFyeUNvbnN0cnVjdC5nZXROZWFyZXN0U291cmNlUmVmZXJlbmNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBhbGxTb3VyY2VSZWZlcmVuY2VzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdHMubWFwKGMgPT4gYy5nZXROZWFyZXN0U291cmNlUmVmZXJlbmNlKCkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tcGlsZXJOb3RlIGV4dGVuZHMgQ29uc3RydWN0Tm90ZUJhc2Uge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpbmtlck5vdGUgZXh0ZW5kcyBDb25zdHJ1Y3ROb3RlQmFzZSB7XHJcblxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQ1BQRXJyb3IgPSB7XHJcblx0Ly8gYXR0cmlidXRlRW1wdHlUbyA6IGZ1bmN0aW9uKHByb2JsZW1zLCBjb2RlKSB7XHJcblx0Ly8gXHRmb3IodmFyIGtleSBpbiBwcm9ibGVtcykge1xyXG5cdC8vIFx0XHR2YXIgcHJvYiA9IHByb2JsZW1zW2tleV07XHJcblx0Ly8gXHRcdHByb2IuY29kZSA9IHByb2IuY29kZSB8fCBjb2RlO1xyXG5cdC8vIFx0fVxyXG5cdC8vIH0sXHJcblx0Ly8gc3VtbWFyeSA6IGZ1bmN0aW9uKHByb2JsZW1zKSB7XHJcblx0Ly8gXHR2YXIgc3RyID0gXCJcIjtcclxuXHQvLyBcdGZvcih2YXIgaSA9IDA7IGkgPCBwcm9ibGVtcy5sZW5ndGg7ICsraSkge1xyXG5cdC8vIFx0XHR2YXIgcHJvYiA9IHByb2JsZW1zW2ldO1xyXG5cdC8vIFx0XHRzdHIgKz0gXCI8c3BhbiBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjpcIitwcm9iLmNvbG9yK1wiXFxcIj5cIitwcm9iLnNlbnRlbmNlICsgXCI8L3NwYW4+PGJyIC8+XCI7XHJcblx0Ly8gXHR9XHJcblx0Ly8gXHRyZXR1cm4gc3RyO1xyXG5cdC8vIH0sXHJcbiAgICBvdGhlciA6IHtcclxuXHQgICAgY2luX25vdF9zdXBwb3J0ZWQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcIm90aGVyLmNpbl9ub3Rfc3VwcG9ydGVkXCIsIFwiU29ycnksIDxzcGFuIGNsYXNzPSdjb2RlJz5jaW48L3NwYW4+IGlzIG5vdCBzdXBwb3J0ZWQgeWV0IDooLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY2xhc3NfZGVmIDoge1xyXG4gICAgICAgIHByZXZfZGVmIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIG5hbWU6IHN0cmluZywgcHJldjogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiY2xhc3NfZGVmLnByZXZfZGVmXCIsIG5hbWUgKyBcIiBjYW5ub3QgYmUgZGVmaW5lZCBtb3JlIHRoYW4gb25jZS4gTm90ZSB0aGF0IExvYnN0ZXIganVzdCBwdXRzIGFsbCBjbGFzcyBuYW1lcyAoaS5lLiB0eXBlcykgaW4gb25lIGdsb2JhbCBzb3J0IG9mIG5hbWVzcGFjZSwgc28geW91IGNhbid0IGV2ZXIgaGF2ZSB0d28gY2xhc3NlcyBvZiB0aGUgc2FtZSBuYW1lLlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJhc2VfY2xhc3NfdHlwZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJjbGFzc19kZWYuYmFzZV9jbGFzc190eXBlXCIsIFwiSSBjYW5ub3QgZmluZCBhIHN1aXRhYmxlIGNsYXNzIGNhbGxlZCBcXFwiXCIrIG5hbWUgKyBcIlxcXCIgdG8gdXNlIGFzIGEgYmFzZS5cIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBiaWdfdGhyZWUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgYmlnVGhyZWVZZXM6IHJlYWRvbmx5IHN0cmluZ1tdLCBiaWdUaHJlZU5vOiByZWFkb25seSBzdHJpbmdbXSkge1xyXG4gICAgICAgICAgICB2YXIgeVN0ciA9IGJpZ1RocmVlWWVzLmpvaW4oXCIgYW5kIFwiKTtcclxuICAgICAgICAgICAgdmFyIG5TdHIgPSBiaWdUaHJlZU5vLmpvaW4oXCIgYW5kIFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5XQVJOSU5HLCBcImNsYXNzX2RlZi5iaWdfdGhyZWVcIiwgXCJUaGlzIGNsYXNzIGRvZXMgbm90IGZvbGxvdyB0aGUgcnVsZSBvZiB0aGUgQmlnIFRocmVlLiBJdCBoYXMgYSBjdXN0b20gaW1wbGVtZW50YXRpb24gZm9yIHRoZSBcIiArIHlTdHIgKyBcIiBidXQgbm90IGZvciB0aGUgXCIgKyBuU3RyICsgXCIuIFRoZSBjb21waWxlciB3aWxsIHByb3ZpZGUgaW1wbGljaXQgdmVyc2lvbnMgb2YgdGhlIG1pc3Npbmcgb25lcywgYnV0IHRoZXkgd2lsbCBhbG1vc3QgY2VydGFpbmx5IHdvcmsgXFxcImluY29ycmVjdGx5XFxcIiAoZS5nLiBtYWtlIHNoYWxsb3cgY29waWVzIG9yIG5lZ2xlY3QgdG8gZGVsZXRlIGR5bmFtaWMgbWVtb3J5KS5cIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtdWx0aXBsZV9pbmhlcml0YW5jZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiY2xhc3NfZGVmLm11bHRpcGxlX2luaGVyaXRhbmNlXCIsIFwiU29ycnksIGJ1dCBMb2JzdGVyIGRvZXMgbm90IHN1cHBvcnQgbXVsdGlwbGUgaW5oZXJpdGFuY2UuXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmlydHVhbF9pbmhlcml0YW5jZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiY2xhc3NfZGVmLnZpcnR1YWxfaW5oZXJpdGFuY2VcIiwgXCJTb3JyeSwgYnV0IExvYnN0ZXIgZG9lcyBub3Qgc3VwcG9ydCB2aXJ0dWFsIGluaGVyaXRhbmNlLlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGN0b3JfZGVmIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJjbGFzc19kZWYuY3Rvcl9kZWZcIiwgXCJTb3JyeSwgYnV0IGZvciBub3cgTG9ic3RlciBvbmx5IHN1cHBvcnRzIGNvbnN0cnVjdG9ycyB0aGF0IGFyZSBkZWZpbmVkIGlubGluZS4gKGkuZS4gWW91IG5lZWQgYSBib2R5LilcIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkdG9yX2RlZiA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiY2xhc3NfZGVmLmR0b3JfZGVmXCIsIFwiU29ycnksIGJ1dCBmb3Igbm93IExvYnN0ZXIgb25seSBzdXBwb3J0cyBkZXN0cnVjdG9ycyB0aGF0IGFyZSBkZWZpbmVkIGlubGluZS4gKGkuZS4gWW91IG5lZWQgYSBib2R5LilcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHRkZWNsYXJhdGlvbiA6IHtcclxuICAgICAgICBjdG9yIDoge1xyXG4gICAgICAgICAgICBjb3B5IDoge1xyXG4gICAgICAgICAgICAgICAgcGFzc19ieV92YWx1ZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCB0eXBlOiBPYmplY3RUeXBlLCBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29uc3RSZWYgPSBuZXcgUmVmZXJlbmNlVHlwZSh0eXBlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmN0b3IuY29weS5wYXNzX2J5X3ZhbHVlXCIsIFwiQSBjb3B5IGNvbnN0cnVjdG9yIGNhbm5vdCB0YWtlIGl0cyBwYXJhbWV0ZXIgYnkgdmFsdWUuIEJlY2F1c2UgcGFzcy1ieS12YWx1ZSBpdHNlbGYgdXNlcyB0aGUgY29weSBjb25zdHJ1Y3RvciwgdGhpcyB3b3VsZCBjYXVzZSBpbmZpbml0ZSByZWN1cnNpb24gaWYgaXQgd2VyZSBhbGxvd2VkLiBUcnkgcGFzc2luZyBieSBjb25zdCByZWZlcmVuY2UgaW5zdGVhZCEgKGkuZS4gXCIgKyBjb25zdFJlZi50eXBlU3RyaW5nKGZhbHNlLCBuYW1lLCBmYWxzZSkgKyBcIilcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXQgOiB7XHJcbiAgICAgICAgICAgICAgICBub19zdWNoX21lbWJlciA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBjbGFzc1R5cGU6IENsYXNzVHlwZSwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5jdG9yLmluaXQubm9fc3VjaF9tZW1iZXJcIiwgXCJDbGFzcyBcIiArIGNsYXNzVHlwZS50b1N0cmluZygpICsgXCIgaGFzIG5vIG1lbWJlciBuYW1lZCBcIiArIG5hbWUgKyBcIi5cIik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaW1wcm9wZXJfbWVtYmVyIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGNsYXNzVHlwZTogQ2xhc3NUeXBlLCBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmN0b3IuaW5pdC5pbXByb3Blcl9tZW1iZXJcIiwgXCJBIG1lbWJlciBpbml0aWFsaXplciBjYW4gb25seSBiZSB1c2VkIGZvciBub24tc3RhdGljIGRhdGEgbWVtYmVycy4gVGhlcmUgaXMgbm8gc3VjaCBtZW1iZXIgbmFtZWQgXCIgKyBuYW1lICsgXCIgaW4gdGhlIFwiICsgY2xhc3NUeXBlLmNsYXNzTmFtZSArIFwiIGNsYXNzLlwiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxlZ2F0aW5nX29ubHkgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgY2xhc3NUeXBlOiBDbGFzc1R5cGUsIG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uY3Rvci5pbml0LmRlbGVnYXRpbmdfb25seVwiLCBcIklmIGEgY29uc3RydWN0b3IncyBpbml0aWFsaXplciBsaXN0IGRlbGVnYXRlcyB0byBhbm90aGVyIGNvbnN0cnVjdG9yIGZyb20gdGhlIHNhbWUgY2xhc3MsIHRoYXQgbXVzdCBiZSB0aGUgb25seSB0aGluZyBpdCBkb2VzLlwiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtdWx0aXBsZV9iYXNlX2luaXRzIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGNsYXNzVHlwZTogQ2xhc3NUeXBlLCBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmN0b3IuaW5pdC5tdWx0aXBsZV9iYXNlX2luaXRzXCIsIFwiQSBjb25zdHJ1Y3RvcidzIGluaXRpYWxpemVyIGxpc3QgY2Fubm90IHNwZWNpZnkgbW9yZSB0aGFuIG9uZSBiYXNlIGNsYXNzIGNvbnN0cnVjdG9yIHRvIHVzZS5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGR0b3IgOiB7XHJcbiAgICAgICAgICAgIG5vX2Rlc3RydWN0b3JfYXV0byA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBlbnRpdHk6IEF1dG9FbnRpdHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uZHRvci5ub19kZXN0cnVjdG9yX2F1dG9cIiwgXCJUaGUgbG9jYWwgdmFyaWFibGUgXCIgKyBlbnRpdHkubmFtZSArIFwiIG5lZWRzIHRvIGJlIGRlc3Ryb3llZCB3aGVuIGl0IFxcXCJnb2VzIG91dCBvZiBzY29wZVxcXCIsIGJ1dCBJIGNhbid0IGZpbmQgYSBkZXN0cnVjdG9yIGZvciB0aGUgXCIgKyBlbnRpdHkudHlwZSArIFwiIGNsYXNzLiBUaGUgY29tcGlsZXIgc29tZXRpbWVzIHByb3ZpZGVzIG9uZSBpbXBsaWNpdGx5IGZvciB5b3UsIGJ1dCBub3QgaWYgb25lIG9mIGl0cyBtZW1iZXJzIG9yIGl0cyBiYXNlIGNsYXNzIGFyZSBtaXNzaW5nIGEgZGVzdHJ1Y3Rvci4gKE9yLCBpZiB5b3UndmUgdmlvbGF0ZWQgdGhlIHJ1bGUgb2YgdGhlIEJpZyBUaHJlZS4pXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBub19kZXN0cnVjdG9yX21lbWJlciA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBlbnRpdHk6IE9iamVjdEVudGl0eSwgY29udGFpbmluZ0NsYXNzKSB7XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmR0b3Iubm9fZGVzdHJ1Y3Rvcl9tZW1iZXJcIiwgXCJUaGUgbWVtYmVyIHZhcmlhYmxlIFwiICsgZW50aXR5Lm5hbWUgKyBcIiBuZWVkcyB0byBiZSBkZXN0cm95ZWQgYXMgcGFydCBvZiB0aGUgXCIgKyBjb250YWluaW5nQ2xhc3MuY2xhc3NOYW1lICsgXCIgZGVzdHJ1Y3RvciwgYnV0IEkgY2FuJ3QgZmluZCBhIGRlc3RydWN0b3IgZm9yIHRoZSBcIiArIGVudGl0eS50eXBlICsgXCIgY2xhc3MuIFRoZSBjb21waWxlciBzb21ldGltZXMgcHJvdmlkZXMgb25lIGltcGxpY2l0bHkgZm9yIHlvdSwgYnV0IG5vdCBpZiBvbmUgb2YgaXRzIG1lbWJlcnMgb3IgaXRzIGJhc2UgY2xhc3MgYXJlIG1pc3NpbmcgYSBkZXN0cnVjdG9yLiAoT3IsIGlmIHlvdSd2ZSB2aW9sYXRlZCB0aGUgcnVsZSBvZiB0aGUgQmlnIFRocmVlLilcIik7XHJcbiAgICAgICAgICAgIC8vIH0sXHJcbiAgICAgICAgICAgIC8vIG5vX2Rlc3RydWN0b3JfYmFzZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBlbnRpdHksIGNvbnRhaW5pbmdDbGFzcykge1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5kdG9yLm5vX2Rlc3RydWN0b3JfYmFzZVwiLCBcIlRoZSBiYXNlIGNsYXNzIFwiICsgZW50aXR5Lm5hbWUgKyBcIiBuZWVkcyB0byBiZSBkZXN0cm95ZWQgYXMgcGFydCBvZiB0aGUgXCIgKyBjb250YWluaW5nQ2xhc3MuY2xhc3NOYW1lICsgXCIgZGVzdHJ1Y3RvciwgYnV0IEkgY2FuJ3QgZmluZCBhIGRlc3RydWN0b3IgZm9yIHRoZSBcIiArIGVudGl0eS50eXBlICsgXCIgY2xhc3MuIFRoZSBjb21waWxlciBzb21ldGltZXMgcHJvdmlkZXMgb25lIGltcGxpY2l0bHkgZm9yIHlvdSwgYnV0IG5vdCBpZiBvbmUgb2YgaXRzIG1lbWJlcnMgb3IgaXRzIGJhc2UgY2xhc3MgYXJlIG1pc3NpbmcgYSBkZXN0cnVjdG9yLiAoT3IsIGlmIHlvdSd2ZSB2aW9sYXRlZCB0aGUgcnVsZSBvZiB0aGUgQmlnIFRocmVlLilcIik7XHJcbiAgICAgICAgICAgIC8vIH0sXHJcbiAgICAgICAgICAgIG5vX2Rlc3RydWN0b3JfdGVtcG9yYXJ5IDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGVudGl0eTogVGVtcG9yYXJ5T2JqZWN0RW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmR0b3Iubm9fZGVzdHJ1Y3Rvcl90ZW1wb3JhcnlcIiwgXCJUaGlzIGV4cHJlc3Npb24gY3JlYXRlcyBhIHRlbXBvcmFyeSBvYmplY3Qgb2YgdHlwZSBcIiArIGVudGl0eS50eXBlICsgXCIgdGhhdCBuZWVkcyB0byBiZSBkZXN0cm95ZWQsIGJ1dCBJIGNhbid0IGZpbmQgYSBkZXN0cnVjdG9yIGZvciB0aGUgXCIgKyBlbnRpdHkudHlwZSArIFwiIGNsYXNzLiBUaGUgY29tcGlsZXIgc29tZXRpbWVzIHByb3ZpZGVzIG9uZSBpbXBsaWNpdGx5IGZvciB5b3UsIGJ1dCBub3QgaWYgb25lIG9mIGl0cyBtZW1iZXJzIG9yIGl0cyBiYXNlIGNsYXNzIGFyZSBtaXNzaW5nIGEgZGVzdHJ1Y3Rvci4gKE9yLCBpZiB5b3UndmUgdmlvbGF0ZWQgdGhlIHJ1bGUgb2YgdGhlIEJpZyBUaHJlZS4pXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFRPRE8gQWRkIHdhcm5pbmcgZm9yIG5vbi12aXJ0dWFsIGRlc3RydWN0b3IgaWYgZGVyaXZlZCBjbGFzc2VzIGV4aXN0XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBub190eXBlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAvLyAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5ub190eXBlXCIsIFwiSVNPIEMrKyBmb3JiaWRzIGRlY2xhcmF0aW9uIHdpdGggbm8gdHlwZS5cIik7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyBwcmV2X2RlY2wgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgbmFtZSwgcHJldikge1xyXG4gICAgICAgIC8vICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLnByZXZfZGVjbFwiLCBuYW1lICsgXCIgY2Fubm90IGJlIGRlY2xhcmVkIG1vcmUgdGhhbiBvbmNlIGluIHRoaXMgc2NvcGUuXCIpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgcHJldl9kZWYgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24ucHJldl9kZWZcIiwgbmFtZSArIFwiIGNhbm5vdCBiZSBkZWZpbmVkIG1vcmUgdGhhbiBvbmNlIGluIHRoaXMgc2NvcGUuXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJldl9sb2NhbCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5wcmV2X2xvY2FsXCIsIGBUaGlzIGRlY2xhcmF0aW9uIG9mIGEgbG9jYWwgdmFyaWFibGUgJHtuYW1lfSArIFwiIGNvbmZsaWN0cyB3aXRoIGFuIGVhcmxpZXIgZGVjbGFyYXRpb24gb2YgJHtuYW1lfSBpbiB0aGUgc2FtZSBzY29wZS5gKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIHByZXZfbWFpbiA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBuYW1lLCBwcmV2KSB7XHJcbiAgICAgICAgLy8gICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24ucHJldl9tYWluXCIsIG5hbWUgKyBcIiBjYW5ub3QgYmUgZGVmaW5lZCBtb3JlIHRoYW4gb25jZSBpbiB0aGlzIHNjb3BlLlwiKTtcclxuICAgICAgICAvLyB9LFxyXG5cdFx0ZnVuYyA6IHtcclxuXHRcdFx0cmV0dXJuX2FycmF5IDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuXHRcdFx0XHRyZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmZ1bmMucmV0dXJuX2FycmF5XCIsIFwiQ2Fubm90IGRlY2xhcmUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gYXJyYXkuXCIpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRyZXR1cm5fZnVuYyA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcblx0XHRcdFx0cmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5mdW5jLnJldHVybl9mdW5jXCIsIFwiQ2Fubm90IGRlY2xhcmUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBmdW5jdGlvbi4gVHJ5IHJldHVybmluZyBhIGZ1bmN0aW9uIHBvaW50ZXI/XCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnZhbGlkX3JldHVybl90eXBlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIHR5cGU6IFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uZnVuYy5pbnZhbGlkX3JldHVybl90eXBlXCIsIGBUaGUgdHlwZSAke3R5cGUudG9TdHJpbmcoKX0gaXMgbm90IGFsbG93ZWQgYXMgYSByZXR1cm4gdHlwZS5gKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc29tZV9pbnZhbGlkX3BhcmFtZXRlcl90eXBlcyA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmZ1bmMuc29tZV9pbnZhbGlkX3BhcmFtZXRlcl90eXBlc1wiLCBgVGhpcyBmdW5jdGlvbiB0eXBlIGNvbnRhaW5zIHNvbWUgaW52YWxpZCBwYXJhbWV0ZXIgdHlwZXMuYCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFycmF5IDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uZnVuYy5hcnJheVwiLCBcIkNhbm5vdCBkZWNsYXJlIGFuIGFycmF5IG9mIGZ1bmN0aW9ucy5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHZvaWRfcGFyYW0gOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5mdW5jLnZvaWRfcGFyYW1cIiwgXCJGdW5jdGlvbiBwYXJhbWV0ZXJzIG1heSBub3QgaGF2ZSB2b2lkIHR5cGUuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvcF9tZW1iZXIgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5mdW5jLm9wX21lbWJlclwiLCBcIlRoaXMgb3BlcmF0b3IgbXVzdCBiZSBvdmVybG9hZGVkIGFzIGEgbm9uLXN0YXRpYyBtZW1iZXIgZnVuY3Rpb24uXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvcF9zdWJzY3JpcHRfb25lX3BhcmFtIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uZnVuYy5vcF9zdWJzY3JpcHRfb25lX3BhcmFtXCIsIFwiQW4gb3ZlcmxvYWRlZCBzdWJzY3JpcHQgKFtdKSBvcGVyYXRvciBtdXN0IHRha2UgZXhhY3RseSBvbmUgcGFyYW1ldGVyLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmV0dXJuVHlwZXNNYXRjaCA6IGZ1bmN0aW9uKGRlY2xhcmF0aW9uczogU2ltcGxlRGVjbGFyYXRpb25bXSwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShkZWNsYXJhdGlvbnMsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmZ1bmMucmV0dXJuVHlwZXNNYXRjaFwiLCBcIkNhbm5vdCByZWRlY2xhcmUgZnVuY3Rpb24gXCIgKyBuYW1lICsgXCIgd2l0aCB0aGUgc2FtZSBwYXJhbWV0ZXIgdHlwZXMgYnV0IGEgZGlmZmVyZW50IHJldHVybiB0eXBlLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWFpblBhcmFtcyA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmZ1bmMubWFpblBhcmFtc1wiLCBcIlNvcnJ5LCBidXQgZm9yIG5vdyBjb21tYW5kIGxpbmUgYXJndW1lbnRzIChhbmQgdGh1cyBwYXJhbWV0ZXJzIGZvciBtYWluKSBhcmUgbm90IHN1cHBvcnRlZCBpbiBMb2JzdGVyLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbm9fcmV0dXJuX3R5cGUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5mdW5jLm5vX3JldHVybl90eXBlXCIsIFwiWW91IG11c3Qgc3BlY2lmeSBhIHJldHVybiB0eXBlIGZvciB0aGlzIGZ1bmN0aW9uLiAoT3IgaWYgeW91IG1lYW50IGl0IHRvIGJlIGEgY29uc3RydWN0b3IsIGRpZCB5b3UgbWlzc3BlbGwgdGhlIG5hbWU/KVwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbm9uQ292YXJpYW50UmV0dXJuVHlwZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBkZXJpdmVkOiBUeXBlLCBiYXNlOiBUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmZ1bmMubm9uQ292YXJpYW50UmV0dXJuVHlwZVwiLCBcIlJldHVybiB0eXBlcyBpbiBvdmVycmlkZGVuIHZpcnR1YWwgZnVuY3Rpb25zIG11c3QgZWl0aGVyIGJlIHRoZSBzYW1lIG9yIGNvdmFyaWFudCAoaS5lLiBmb2xsb3cgdGhlIExpc2tvdiBTdWJzdGl0dXRpb24gUHJpbmNpcGxlKS4gQm90aCByZXR1cm4gdHlwZXMgbXVzdCBiZSBwb2ludGVycy9yZWZlcmVuY2VzIHRvIGNsYXNzIHR5cGVzLCBhbmQgdGhlIGNsYXNzIHR5cGUgaW4gdGhlIG92ZXJyaWRpbmcgZnVuY3Rpb24gbXVzdCBiZSB0aGUgc2FtZSBvciBhIGRlcml2ZWQgdHlwZS4gVGhlcmUgYXJlIGFsc28gcmVzdHJpY3Rpb25zIG9uIHRoZSBjdi1xdWFsaWZpY2F0aW9ucyBvZiB0aGUgcmV0dXJuIHR5cGVzLiBJbiB0aGlzIGNhc2UsIHJldHVybmluZyBhIFwiICsgZGVyaXZlZCArIFwiIGluIHBsYWNlIG9mIGEgXCIgKyBiYXNlICsgXCIgdmlvbGF0ZXMgY292YXJpYW5jZS5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmluaXRpb25fbm9uX2Z1bmN0aW9uX3R5cGUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5mdW5jLmRlZmluaXRpb25fbm9uX2Z1bmN0aW9uX3R5cGVcIiwgXCJUaGlzIGFwcGVhcnMgdG8gYmUgYSBmdW5jdGlvbiBkZWZpbml0aW9uLCBidXQgdGhlIGRlY2xhcmF0b3IgZG9lcyBub3QgaW5kaWNhdGUgYSBmdW5jdGlvbiB0eXBlLiBNYXliZSB5b3UgZm9yZ3QgdGhlIHBhcmVudGhlc2VzP1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcG9pbnRlcjoge1xyXG4gICAgICAgICAgICByZWZlcmVuY2UgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5wb2ludGVyLnJlZmVyZW5jZVwiLCBcIkNhbm5vdCBkZWNsYXJlIGEgcG9pbnRlciB0byBhIHJlZmVyZW5jZS5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHZvaWQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5wb2ludGVyLnZvaWRcIiwgXCJTb3JyeSwgTG9ic3RlciBkb2VzIG5vdCBzdXBwb3J0IHZvaWQgcG9pbnRlcnMuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnZhbGlkX3BvaW50ZWRfdHlwZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCB0eXBlOiBUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLnBvaW50ZXIuaW52YWxpZF9wb2ludGVkX3R5cGVcIiwgYEEgcG9pbnRlciB0byB0eXBlICR7dHlwZS50b1N0cmluZygpfSBpcyBub3QgYWxsb3dlZC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblx0XHRyZWYgOiB7XHJcblx0XHRcdHJlZiA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcblx0XHRcdFx0cmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5yZWYucmVmXCIsIFwiQSByZWZlcmVuY2UgdG8gYSByZWZlcmVuY2UgaXMgbm90IGFsbG93ZWQuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgdG8gYXJyYXkgc2VjdGlvbiBpbnN0ZWFkXHJcbiAgICAgICAgICAgIGFycmF5IDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24ucmVmLmFycmF5XCIsIFwiQ2Fubm90IGRlY2xhcmUgYW4gYXJyYXkgb2YgcmVmZXJlbmNlcy5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGludmFsaWRfcmVmZXJyZWRfdHlwZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCB0eXBlOiBUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLnJlZi5pbnZhbGlkX3JlZmVycmVkX3R5cGVcIiwgYEEgcmVmZXJlbmNlIHRvIHR5cGUgJHt0eXBlLnRvU3RyaW5nKCl9IGlzIG5vdCBhbGxvd2VkLmApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtZW1iZXJOb3RTdXBwb3J0ZWQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5yZWYubWVtYmVyTm90U3VwcG9ydGVkXCIsIFwiU29ycnksIHJlZmVyZW5jZSBtZW1iZXJzIGFyZSBub3Qgc3VwcG9ydGVkIGF0IHRoZSBtb21lbnQuXCIpO1xyXG4gICAgICAgICAgICB9XHJcblx0XHR9LFxyXG4gICAgICAgIGFycmF5IDoge1xyXG4gICAgICAgICAgICBsZW5ndGhfcmVxdWlyZWQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5hcnJheS5sZW5ndGhfcmVxdWlyZWRcIiwgXCJNdXN0IHNwZWNpZnkgbGVuZ3RoIGFzIGFuIGludGVnZXIgbGl0ZXJhbCB3aGVuIGRlY2xhcmluZyBhbiBhcnJheS4gKFNvcnJ5LCBidXQgTG9ic3RlciByZXF1aXJlcyB0aGlzIGZvciBub3cgZXZlbiBpZiBpdCBjb3VsZCBoeXBvdGhldGljYWxseSBiZSBkZWR1Y2VkIGZyb20gdGhlIGluaXRpYWxpemVyLilcIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHplcm9fbGVuZ3RoIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uYXJyYXkuemVyb19sZW5ndGhcIiwgXCJBbHRob3VnaCB0ZWNobmljYWxseSBhbGxvd2VkIGluIEMrKywgYXJyYXlzIHdpdGggemVybyBsZW5ndGggYXJlIHByb2hpYml0ZWQgaW4gTG9ic3Rlci5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG11bHRpZGltZW5zaW9uYWxfYXJyYXlzX3Vuc3VwcG9ydGVkIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uYXJyYXkubXVsdGlkaW1lbnNpb25hbF9hcnJheXNfdW5zdXBwb3J0ZWRcIiwgXCJTb3JyeSwgTG9ic3RlciBjdXJyZW50bHkgZG9lc24ndCBzdXBwb3J0IG11bHRpZGltZW5zaW9uYWwgYXJyYXlzLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW52YWxpZF9lbGVtZW50X3R5cGUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgdHlwZTogVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5hcnJheS5pbnZhbGlkX2VsZW1lbnRfdHlwZVwiLCBgVGhlIHR5cGUgJHt0eXBlLnRvU3RyaW5nKCl9IGlzIG5vdCBhbGxvd2VkIGFzIGFuIGFycmF5IHBhcmFtZXRlci5gICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGluaXQgOiB7XHJcbiAgICAgICAgICAgIHNjYWxhcl9hcmdzIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGRlY2xUeXBlOiBBdG9taWNUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmluaXQuc2NhbGFyX2FyZ3NcIiwgXCJJbnZhbGlkIGluaXRpYWxpemF0aW9uIG9mIHNjYWxhciB0eXBlIFwiICsgZGVjbFR5cGUgKyBcIiBmcm9tIG11bHRpcGxlIHZhbHVlcy5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFycmF5X3N0cmluZ19saXRlcmFsIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIHRhcmdldFR5cGU6IEJvdW5kZWRBcnJheVR5cGUgfCBBcnJheU9mVW5rbm93bkJvdW5kVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5pbml0LmFycmF5X3N0cmluZ19saXRlcmFsXCIsIFwiQ2Fubm90IGRpcmVjdC9jb3B5IGluaXRpYWxpemUgYW4gYXJyYXkgb2YgdHlwZSBcIiArIHRhcmdldFR5cGUgKyBcIi4gVGhlIG9ubHkgYWxsb3dlZCBkaXJlY3QvY29weSBpbml0aWFsaXphdGlvbiBvZiBhbiBhcnJheSBpcyB0byBpbml0aWFsaXplIGFuIGFycmF5IG9mIGNoYXIgZnJvbSBhIHN0cmluZyBsaXRlcmFsLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29udmVydCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBpbml0VHlwZTogVHlwZSwgZGVjbFR5cGU6IFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uaW5pdC5jb252ZXJ0XCIsIFwiSW52YWxpZCBjb252ZXJzaW9uIGZyb20gXCIgKyBpbml0VHlwZSArIFwiIHRvIFwiICsgZGVjbFR5cGUgKyBcIi5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxpc3RfbmFycm93aW5nIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGluaXRUeXBlOiBUeXBlLCBkZWNsVHlwZTogVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5pbml0Lmxpc3RfbmFycm93aW5nXCIsIFwiSW1wbGljaXQgbmFycm93aW5nIGNvbnZlcnNpb24gZnJvbSBcIiArIGluaXRUeXBlICsgXCIgdG8gXCIgKyBkZWNsVHlwZSArIFwiIGlzIG5vdCBhbGxvd2VkIGluIGluaXRpYWxpemVyIGxpc3QuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsaXN0X2FycmF5IDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uaW5pdC5saXN0X2FycmF5XCIsIFwiSW5pdGlhbGl6ZXIgbGlzdCBzeW50YXggb25seSBzdXBwb3J0ZWQgZm9yIGFycmF5cy5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxpc3RfbGVuZ3RoIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGxlbmd0aDogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmluaXQubGlzdF9sZW5ndGhcIiwgXCJMZW5ndGggb2YgaW5pdGlhbGl6ZXIgbGlzdCBtdXN0IG1hdGNoIGxlbmd0aCBvZiBhcnJheSAoXCIgKyBsZW5ndGggKyBcIikuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtYXRjaGluZ19jb25zdHJ1Y3RvciA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBlbnRpdHk6IE9iamVjdEVudGl0eTxDbGFzc1R5cGU+LCBhcmdUeXBlczogcmVhZG9ubHkgVHlwZVtdKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVzYyA9IGVudGl0eS5kZXNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5pbml0Lm1hdGNoaW5nX2NvbnN0cnVjdG9yXCIsIFwiVHJ5aW5nIHRvIGluaXRpYWxpemUgXCIgKyAoZGVzYy5uYW1lIHx8IGRlc2MubWVzc2FnZSkgKyBcIiwgYnV0IHVuYWJsZSB0byBmaW5kIGEgbWF0Y2hpbmcgY29uc3RydWN0b3IgZGVmaW5pdGlvbiBmb3IgdGhlIFwiICsgZW50aXR5LnR5cGUuY2xhc3NOYW1lICsgXCIgY2xhc3MgdXNpbmcgdGhlIGdpdmVuIGFyZ3VtZW50cyAoXCIgKyBhcmdUeXBlcy5qb2luKFwiLCBcIikgKyBcIikuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBub19kZWZhdWx0X2NvbnN0cnVjdG9yIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGVudGl0eTogT2JqZWN0RW50aXR5PENsYXNzVHlwZT4pIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZXNjID0gZW50aXR5LmRlc2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmluaXQubm9fZGVmYXVsdF9jb25zdHJ1Y3RvclwiLCBcIlRoaXMgY2FsbHMgZm9yIHRoZSBkZWZhdWx0IGluaXRpYWxpemF0aW9uIG9mIFwiICsgKGRlc2MubmFtZSB8fCBkZXNjLm1lc3NhZ2UpICsgXCIsIGJ1dCBJIGNhbid0IGZpbmQgYSBkZWZhdWx0IGNvbnN0cnVjdG9yIChpLmUuIHRha2luZyBubyBhcmd1bWVudHMpIGZvciB0aGUgXCIgKyBlbnRpdHkudHlwZS5jbGFzc05hbWUgKyBcIiBjbGFzcy4gVGhlIGNvbXBpbGVyIHVzdWFsbHkgcHJvdmlkZXMgYW4gaW1wbGljaXQgb25lIGZvciB5b3UsIGJ1dCBub3QgaWYgeW91IGhhdmUgZGVjbGFyZWQgb3RoZXIgY29uc3RydWN0b3JzICh1bmRlciB0aGUgYXNzdW1wdGlvbiB5b3Ugd291bGQgd2FudCB0byB1c2Ugb25lIG9mIHRob3NlKS5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlZmVyZW5jZVBydmFsdWVDb25zdCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmluaXQucmVmZXJlbmNlUHJ2YWx1ZUNvbnN0XCIsIFwiWW91IGNhbm5vdCBiaW5kIGEgbm9uLWNvbnN0IHJlZmVyZW5jZSB0byBhIHBydmFsdWUgKGUuZy4gYSB0ZW1wb3Jhcnkgb2JqZWN0KS5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlZmVyZW5jZVR5cGUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgZnJvbTogVHlwZSwgdG86IE9iamVjdFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uaW5pdC5yZWZlcmVuY2VUeXBlXCIsIFwiQSByZWZlcmVuY2UgKG9mIHR5cGUgXCIgKyB0byArIFwiKSBjYW5ub3QgYmUgYm91bmQgdG8gYW4gb2JqZWN0IG9mIGEgZGlmZmVyZW50IHR5cGUgKFwiICsgZnJvbSArIFwiKS5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlZmVyZW5jZUJpbmQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5pbml0LnJlZmVyZW5jZUJpbmRcIiwgXCJSZWZlcmVuY2VzIG11c3QgYmUgYm91bmQgdG8gc29tZXRoaW5nIHdoZW4gdGhleSBhcmUgZGVjbGFyZWQuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWZlcmVuY2VCaW5kTXVsdGlwbGUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5pbml0LnJlZmVyZW5jZUJpbmRNdWx0aXBsZVwiLCBcIlJlZmVyZW5jZXMgY2Fubm90IGJlIGJvdW5kIHRvIG11bHRpcGxlIG9iamVjdHMuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJpbmdMaXRlcmFsTGVuZ3RoIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIHN0cmluZ1NpemU6IG51bWJlciwgYXJyU2l6ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyU2l6ZSA9PT0gc3RyaW5nU2l6ZSAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmluaXQuc3RyaW5nTGl0ZXJhbExlbmd0aFwiLCBcIllvdXIgYXJyYXkgaXMgb25lIGVsZW1lbnQgdG9vIHNob3J0LiBSZW1lbWJlciwgd2hlbiBpbml0aWFsaXppbmcgYSBjaGFyYWN0ZXIgYXJyYXkgKGkuZS4gYSBjLXN0cmluZykgd2l0aCBhIHN0cmluZyBsaXRlcmFsLCBhbiBleHRyYSBcXFxcMCAobnVsbCBjaGFyYWN0ZXIpIGlzIGF1dG9tYXRpY2FsbHkgYXBwZW5kZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJyU2l6ZSA+IHN0cmluZ1NpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLldBUk5JTkcsIFwiZGVjbGFyYXRpb24uaW5pdC5zdHJpbmdMaXRlcmFsTGVuZ3RoXCIsIFwiWW91ciBhcnJheSAobGVuZ3RoIFwiICsgYXJyU2l6ZSArXCIpIGlzIGxvbmdlciB0aGFuIGl0IG5lZWRzIHRvIGJlIHRvIGhvbGQgdGhlIHN0cmluZyBsaXRlcmFsIChsZW5ndGggXCIgKyBzdHJpbmdTaXplICsgXCIpLiBUaGUgcmVtYWluaW5nIGNoYXJhY3RlciBlbGVtZW50cyB3aWxsIGJlIHplcm8taW5pdGlhbGl6ZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmluaXQuc3RyaW5nTGl0ZXJhbExlbmd0aFwiLCBcIlRoZSBzdHJpbmcgbGl0ZXJhbCB1c2VkIGZvciBpbml0aWFsaXphdGlvbiAobGVuZ3RoIFwiICsgc3RyaW5nU2l6ZSArIFwiKSBjYW5ub3QgZml0IGluIHRoZSBkZWNsYXJlZCBhcnJheSAobGVuZ3RoIFwiICsgYXJyU2l6ZSArXCIpLlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5pbml0aWFsaXplZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBlbnQ6IE9iamVjdEVudGl0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5XQVJOSU5HLCBcImRlY2xhcmF0aW9uLmluaXQudW5pbml0aWFsaXplZFwiLCAoZW50LmRlc2NyaWJlKCkubmFtZSB8fCBlbnQuZGVzY3JpYmUoKS5tZXNzYWdlKSArIFwiIGlzIHVuaW5pdGlhbGl6ZWQsIHNvIGl0IHdpbGwgc3RhcnQgd2l0aCB3aGF0ZXZlciB2YWx1ZSBoYXBwZW5zIHRvIGJlIGluIG1lbW9yeSAoaS5lLiBtZW1vcnkganVuaykuIElmIHlvdSB0cnkgdG8gdXNlIHRoaXMgdmFyaWFibGUgYmVmb3JlIGluaXRpYWxpemluZyBpdCwgd2hvIGtub3dzIHdoYXQgd2lsbCBoYXBwZW4hXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhcnJheV9kZWZhdWx0X2luaXQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5XQVJOSU5HLCBcImRlY2xhcmF0aW9uLmluaXQuYXJyYXlfZGVmYXVsdF9pbml0XCIsIFwiTm90ZTogRGVmYXVsdCBpbml0aWFsaXphdGlvbiBvZiBhbiBhcnJheSByZXF1aXJlcyBkZWZhdWx0IGluaXRpYWxpemF0aW9uIG9mIGVhY2ggb2YgaXRzIGVsZW1lbnRzLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYXJyYXlfZGlyZWN0X2luaXQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5PVEhFUiwgXCJkZWNsYXJhdGlvbi5pbml0LmFycmF5X2RpcmVjdF9pbml0XCIsIFwiTm90ZTogaW5pdGlhbGl6YXRpb24gb2YgYW4gYXJyYXkgcmVxdWlyZXMgaW5pdGlhbGl6YXRpb24gb2YgZWFjaCBvZiBpdHMgZWxlbWVudHMuXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3RvcmFnZSA6IHtcclxuICAgICAgICAgICAgb25jZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBzcGVjOiBTdG9yYWdlU3BlY2lmaWVyS2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLnN0b3JhZ2Uub25jZVwiLCBcIlN0b3JhZ2Ugc3BlY2lmaWVyIChcIiArIHNwZWMgKyBcIikgbWF5IG9ubHkgYmUgdXNlZCBvbmNlLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5jb21wYXRpYmxlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIHNwZWNzOiByZWFkb25seSBTdG9yYWdlU3BlY2lmaWVyS2V5W10pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24uc3RvcmFnZS5pbmNvbXBhdGlibGVcIiwgXCJTdG9yYWdlIHNwZWNpZmllcnMgKCBcIiArIHNwZWNzLmpvaW4oXCIgXCIpICsgXCIpIGFyZSBpbmNvbXBhdGlibGUgd2l0aCBlYWNoIG90aGVyLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gdHlwZWRlZiA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBzcGVjcykge1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5zdG9yYWdlLnR5cGVkZWZcIiwgXCJTdG9yYWdlIHNwZWNpZmllcnMgbWF5IG5vdCBiZSB1c2VkIGluIGEgdHlwZWRlZi4gKFwiICsgc3BlY3MgKyBcIiB3ZXJlIGZvdW5kLilcIik7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHR5cGVTcGVjaWZpZXIgOiB7XHJcbiAgICAgICAgICAgIG9uY2UgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgc3BlYzogVHlwZVNwZWNpZmllcktleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi50eXBlU3BlY2lmaWVyLm9uY2VcIiwgXCJUeXBlIHNwZWNpZmllciAoXCIgKyBzcGVjICsgXCIpIG1heSBvbmx5IGJlIHVzZWQgb25jZS5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uZV90eXBlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIHR5cGVOYW1lczogcmVhZG9ubHkgU2ltcGxlVHlwZU5hbWVbXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi50eXBlU3BlY2lmaWVyLm9uZV90eXBlXCIsIGBUeXBlIHNwZWNpZmllciBtdXN0IG9ubHkgc3BlY2lmeSBvbmUgdHlwZS4gRm91bmQ6ICR7dHlwZU5hbWVzfS5gKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2lnbmVkX3Vuc2lnbmVkIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwidHlwZS5zaWduZWRfdW5zaWduZWRcIiwgXCJUeXBlIHNwZWNpZmllciBtYXkgbm90IGluZGljYXRlIGJvdGggc2lnbmVkIGFuZCB1bnNpZ25lZC5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmcmllbmQgOiB7XHJcbiAgICAgICAgICAgIG91dHNpZGVfY2xhc3MgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5mcmllbmQub3V0c2lkZV9jbGFzc1wiLCBcIkZyaWVuZCBkZWNsYXJhdGlvbnMgYXJlIG5vdCBhbGxvd2VkIGhlcmUuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB2aXJ0dWFsX3Byb2hpYml0ZWQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi5mcmllbmQudmlydHVhbF9wcm9oaWJpdGVkXCIsIFwiQSB2aXJ0dWFsIGZ1bmN0aW9uIG1heSBub3QgYmUgZGVjbGFyZWQgYXMgYSBmcmllbmQuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYXJhbWV0ZXIgOiB7XHJcbiAgICAgICAgICAgIHN0b3JhZ2VfcHJvaGliaXRlZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLnBhcmFtZXRlci5zdG9yYWdlX3Byb2hpYml0ZWRcIiwgXCJTdG9yYWdlIHNwZWNpZmllcnMgYXJlIG5vdCBwZXJtaXR0ZWQgaW4gcGFyYW1ldGVyIGRlY2xhcmF0aW9ucy5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHZpcnR1YWxfcHJvaGliaXRlZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImRlY2xhcmF0aW9uLmZyaWVuZC52aXJ0dWFsX3Byb2hpYml0ZWRcIiwgXCJBIHZpcnR1YWwgZnVuY3Rpb24gbWF5IG5vdCBiZSBkZWNsYXJlZCBhcyBhIGZyaWVuZC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHVua25vd25fdHlwZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24udW5rbm93bl90eXBlXCIsIFwiVW5hYmxlIHRvIGRldGVybWluZSB0aGUgdHlwZSBkZWNsYXJlZCBoZXJlLlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZvaWRfcHJvaGliaXRlZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVm9pZERlY2xhcmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24udm9pZF9wcm9oaWJpdGVkXCIsIGBUaGUgdmFyaWFibGUgJHtjb25zdHJ1Y3QuZGVjbGFyYXRvci5uYW1lIHx8IFwiaGVyZVwifSBtYXkgbm90IGJlIGRlY2xhcmVkIGFzIHR5cGUgdm9pZC5gKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZpcnR1YWxfcHJvaGliaXRlZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZGVjbGFyYXRpb24udmlydHVhbF9wcm9oaWJpdGVkXCIsIFwiVGhlIHZpcnR1YWwga2V5d29yZCBtYXkgb25seSBiZSB1c2VkIGluIG1lbWJlciBmdW5jdGlvbiBkZWNsYXJhdGlvbnMuXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHlwZV9taXNtYXRjaCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBuZXdFbnRpdHk6IERlY2xhcmVkRW50aXR5LCBleGlzdGluZ0VudGl0eTogRGVjbGFyZWRFbnRpdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJkZWNsYXJhdGlvbi50eXBlX21pc21hdGNoXCIsIGBUeXBlIG1pc21hdGNoLiBUaGlzIGRlY2xhcmF0aW9uIGZvciAke25ld0VudGl0eS5uYW1lfSBoYXMgdHlwZSAke25ld0VudGl0eS50eXBlfSwgYnV0IGEgcHJldmlvdXMgZGVjbGFyYXRpb24gb2YgJHtleGlzdGluZ0VudGl0eS5uYW1lfSBoYXMgdHlwZSAke2V4aXN0aW5nRW50aXR5LnR5cGV9YCk7XHJcbiAgICAgICAgfSxcclxuXHR9LFxyXG5cdHR5cGUgOiB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdW5zaWduZWRfbm90X3N1cHBvcnRlZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuV0FSTklORywgXCJ0eXBlLnVuc2lnbmVkX25vdF9zdXBwb3J0ZWRcIiwgXCJTb3JyeSwgdW5zaWduZWQgaW50ZWdyYWwgdHlwZXMgYXJlIG5vdCBzdXBwb3J0ZWQgeWV0LiBJdCB3aWxsIGp1c3QgYmUgdHJlYXRlZCBsaWtlIGEgbm9ybWFsIGludC5cIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdG9yYWdlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5XQVJOSU5HLCBcInR5cGUuc3RvcmFnZVwiLCBcIkJlY2F1c2Ugb2YgdGhlIHdheSBMb2JzdGVyIHdvcmtzLCBzdG9yYWdlIGNsYXNzIHNwZWNpZmllcnMgKGUuZy4gc3RhdGljKSBoYXZlIG5vIGVmZmVjdC5cIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0eXBlTm90Rm91bmQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgdHlwZU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcInR5cGUudHlwZU5vdEZvdW5kXCIsIFwiT29wcywgdGhpcyBpcyBlbWJhcmFzc2luZy4uLiBJIGZlZWwgbGlrZSBcIiArIHR5cGVOYW1lICsgXCIgc2hvdWxkIGJlIGEgdHlwZSwgYnV0IEkgY2FuJ3QgZmlndXJlIG91dCB3aGF0IGl0IGlzLlwiKTtcclxuICAgICAgICB9XHJcblx0fSxcclxuICAgIGV4cHIgOiB7XHJcbiAgICAgICAgLy8gb3ZlcmxvYWRMb29rdXAgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgb3ApIHtcclxuICAgICAgICAvLyAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLm92ZXJsb2FkTG9va3VwXCIsIFwiVHJ5aW5nIHRvIGZpbmQgYSBmdW5jdGlvbiBpbXBsZW1lbnRpbmcgYW4gb3ZlcmxvYWRlZCBcIiArIG9wICsgXCIgb3BlcmF0b3IuLi5cIik7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICBhcnJheV9vcGVyYW5kIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIHR5cGU6IFR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmFycmF5X29wZXJhbmRcIiwgXCJUeXBlIFwiICsgdHlwZSArIFwiIGNhbm5vdCBiZSBzdWJzY3JpcHRlZC5cIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhcnJheV9vZmZzZXQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgdHlwZTogVHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuYXJyYXlfb2Zmc2V0XCIsIFwiSW52YWxpZCB0eXBlIChcIiArIHR5cGUgKyBcIikgZm9yIGFycmF5IHN1YnNjcmlwdCBvZmZzZXQuXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXNzaWdubWVudCA6IHtcclxuICAgICAgICAgICAgbGhzX2x2YWx1ZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuYXNzaWdubWVudC5saHNfbHZhbHVlXCIsIFwiTHZhbHVlIHJlcXVpcmVkIGFzIGxlZnQgb3BlcmFuZCBvZiBhc3NpZ25tZW50LlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGhzX2NvbnN0IDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5hc3NpZ25tZW50Lmxoc19jb25zdFwiLCBcIkxlZnQgaGFuZCBzaWRlIG9mIGFzc2lnbm1lbnQgaXMgbm90IG1vZGlmaWFibGUuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb252ZXJ0IDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGxoczogVHlwZWRFeHByZXNzaW9uLCByaHM6IFR5cGVkRXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmFzc2lnbm1lbnQuY29udmVydFwiLCBcIkNhbm5vdCBjb252ZXJ0IFwiICsgcmhzLnR5cGUgKyBcIiB0byBcIiArIGxocy50eXBlICsgXCIgaW4gYXNzaWdubWVudC5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlbGYgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgZW50aXR5OiBPYmplY3RFbnRpdHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuV0FSTklORywgXCJleHByLmFzc2lnbm1lbnQuc2VsZlwiLCBcIlNlbGYgYXNzaWdubWVudCBmcm9tIFwiICsgKGVudGl0eS5kZXNjcmliZSgpLm5hbWUgfHwgZW50aXR5LmRlc2NyaWJlKCkubWVzc2FnZSkgKyBcIiB0byBpdHNlbGYuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIG5vdF9kZWZpbmVkIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIHR5cGUpIHtcclxuICAgICAgICAgICAgLy8gICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5hc3NpZ25tZW50Lm5vdF9kZWZpbmVkXCIsIFwiQW4gYXNzaWdubWVudCBvcGVyYXRvciBmb3IgdGhlIHR5cGUgXCIgKyB0eXBlICsgXCIgY2Fubm90IGJlIGZvdW5kLlwiKTtcclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIGJpbmFyeSA6IHtcclxuICAgICAgICAgICAgLy8gb3ZlcmxvYWRfbm90X2ZvdW5kIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIG9wLCBvcGVyYW5kcykge1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmJpbmFyeS5vdmVybG9hZF9ub3RfZm91bmRcIiwgXCJBbiBvdmVybG9hZGVkIFwiICsgb3AgKyBcIiBvcGVyYXRvciBmb3IgdGhlIHR5cGVzIChcIiArIG9wZXJhbmRzLm1hcCgob3ApPT57cmV0dXJuIG9wLnR5cGU7fSkuam9pbihcIiwgXCIpICsgXCIpIGNhbm5vdCBiZSBmb3VuZC5cIik7XHJcbiAgICAgICAgICAgIC8vIH0sXHJcbiAgICAgICAgICAgIGFyaXRobWV0aWNfb3BlcmFuZHMgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgb3BlcmF0b3I6IHN0cmluZywgbGVmdDogVHlwZWRFeHByZXNzaW9uLCByaWdodDogVHlwZWRFeHByZXNzaW9uKSB7ICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmJpbmFyeS5hcml0aG1ldGljX29wZXJhbmRzXCIsIFwiSW52YWxpZCBvcGVyYW5kIHR5cGVzIChcIiArIGxlZnQudHlwZSArIFwiLCBcIiArIHJpZ2h0LnR5cGUgKyBcIikgZm9yIG9wZXJhdG9yIFwiICsgb3BlcmF0b3IgKyBcIiwgd2hpY2ggcmVxdWlyZXMgb3BlcmFuZHMgb2YgYXJpdGhtZXRpYyB0eXBlLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW50ZWdyYWxfb3BlcmFuZHMgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgb3BlcmF0b3I6IHN0cmluZywgbGVmdDogVHlwZWRFeHByZXNzaW9uLCByaWdodDogVHlwZWRFeHByZXNzaW9uKSB7ICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmJpbmFyeS5pbnRlZ3JhbF9vcGVyYW5kc1wiLCBcIkludmFsaWQgb3BlcmFuZCB0eXBlcyAoXCIgKyBsZWZ0LnR5cGUgKyBcIiwgXCIgKyByaWdodC50eXBlICsgXCIpIGZvciBvcGVyYXRvciBcIiArIG9wZXJhdG9yICsgXCIsIHdoaWNoIHJlcXVpcmVzIG9wZXJhbmRzIG9mIGludGVncmFsIHR5cGUuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib29sZWFuX29wZXJhbmQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgb3BlcmF0b3I6IHN0cmluZywgb3BlcmFuZDogVHlwZWRFeHByZXNzaW9uKSB7ICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmJpbmFyeS5ib29sZWFuX29wZXJhbmRcIiwgXCJJbnZhbGlkIG9wZXJhbmQgdHlwZSAoXCIgKyBvcGVyYW5kLnR5cGUgKyBcIikgZm9yIG9wZXJhdG9yIFwiICsgb3BlcmF0b3IgKyBcIiwgd2hpY2ggcmVxdWlyZXMgb3BlcmFuZHMgdGhhdCBtYXkgYmUgY29udmVydGVkIHRvIGJvb2xlYW4gdHlwZS5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFyaXRobWV0aWNfY29tbW9uX3R5cGUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgb3BlcmF0b3I6IHN0cmluZywgbGVmdDogVHlwZWRFeHByZXNzaW9uLCByaWdodDogVHlwZWRFeHByZXNzaW9uKSB7ICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmJpbmFyeS5hcml0aG1ldGljX2NvbW1vbl90eXBlXCIsIFwiUGVyZm9ybWluZyB0aGUgdXN1YWwgYXJpdGhtZXRpYyBjb252ZXJzaW9ucyB5aWVsZGVkIG9wZXJhbmRzIG9mIHR5cGVzIChcIiArIGxlZnQudHlwZSArIFwiLCBcIiArIHJpZ2h0LnR5cGUgKyBcIikgZm9yIG9wZXJhdG9yIFwiICsgb3BlcmF0b3IgKyBcIiwgYnV0IGEgY29tbW9uIGFyaXRobWV0aWMgdHlwZSBjb3VsZCBub3QgYmUgZm91bmQuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bmFyeSA6IHtcclxuICAgICAgICAgICAgLy8gb3ZlcmxvYWRfbm90X2ZvdW5kIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIG9wLCB0eXBlKSB7XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIudW5hcnkub3ZlcmxvYWRfbm90X2ZvdW5kXCIsIFwiQW4gb3ZlcmxvYWRlZCBcIiArIG9wICsgXCIgb3BlcmF0b3IgZm9yIHRoZSB0eXBlIFwiICsgdHlwZSArIFwiIGNhbm5vdCBiZSBmb3VuZC5cIik7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlbGV0ZSA6IHtcclxuICAgICAgICAgICAgbm9fZGVzdHJ1Y3RvciA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCB0eXBlOiBDbGFzc1R5cGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5kZWxldGUubm9fZGVzdHJ1Y3RvclwiLCBcIkkgY2FuJ3QgZmluZCBhIGRlc3RydWN0b3IgZm9yIHRoZSBcIiArIHR5cGUgKyBcIiBjbGFzcy4gVGhlIGNvbXBpbGVyIHNvbWV0aW1lcyBwcm92aWRlcyBvbmUgaW1wbGljaXRseSBmb3IgeW91LCBidXQgbm90IGlmIG9uZSBvZiBpdHMgbWVtYmVycyBvciBpdHMgYmFzZSBjbGFzcyBhcmUgbWlzc2luZyBhIGRlc3RydWN0b3IuIChPciwgaWYgeW91J3ZlIHZpb2xhdGVkIHRoZSBydWxlIG9mIHRoZSBCaWcgVGhyZWUuKVwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcG9pbnRlciA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCB0eXBlOiBUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuZGVsZXRlLnBvaW50ZXJcIiwgXCJUaGUgZGVsZXRlIG9wZXJhdG9yIHJlcXVpcmVzIGFuIG9wZXJhbmQgb2YgcG9pbnRlciB0eXBlLiAoQ3VycmVudCBvcGVyYW5kIGlzIFwiICsgdHlwZSArIFwiICkuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwb2ludGVyVG9PYmplY3RUeXBlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIHR5cGU6IFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5kZWxldGUucG9pbnRlclRvT2JqZWN0VHlwZVwiLCBcIlRoZSBkZWxldGUgb3BlcmF0b3IgY2Fubm90IGJlIHVzZWQgd2l0aCBhIHBvaW50ZXIgdG8gYSBub24tb2JqZWN0IHR5cGUgKGUuZy4gdm9pZCBwb2ludGVycywgZnVuY3Rpb24gcG9pbnRlcnMpLiAoQ3VycmVudCBvcGVyYW5kIGlzIFwiICsgdHlwZSArIFwiICkuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXJlZmVyZW5jZSA6IHtcclxuICAgICAgICAgICAgcG9pbnRlciA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCB0eXBlOiBUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuZGVyZWZlcmVuY2UucG9pbnRlclwiLCBcIlRoZSBkZXJlZmVyZW5jZSBvcGVyYXRvciAoKikgcmVxdWlyZXMgYW4gb3BlcmFuZCBvZiBwb2ludGVyIHR5cGUuIChDdXJyZW50IG9wZXJhbmQgaXMgXCIgKyB0eXBlICsgXCIgKS5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBvaW50ZXJUb09iamVjdFR5cGUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgdHlwZTogVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmRlcmVmZXJlbmNlLnBvaW50ZXJUb09iamVjdFR5cGVcIiwgXCJQb2ludGVycyB0byBhIG5vbi1vYmplY3QsIG5vbi1mdW5jdGlvbiB0eXBlIChlLmcuIHZvaWQgcG9pbnRlcnMpIGNhbm5vdCBiZSBkZXJlZmVyZW5jZWQuIChDdXJyZW50IG9wZXJhbmQgaXMgXCIgKyB0eXBlICsgXCIgKS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRvdCA6IHtcclxuICAgICAgICAgICAgY2xhc3NfdHlwZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuZG90LmNsYXNzX3R5cGVcIiwgXCJUaGUgZG90IG9wZXJhdG9yIGNhbiBvbmx5IGJlIHVzZWQgdG8gYWNjZXNzIG1lbWJlcnMgb2YgYW4gb3BlcmFuZCB3aXRoIGNsYXNzIHR5cGUuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBub19zdWNoX21lbWJlciA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBjbGFzc1R5cGU6IENsYXNzVHlwZSwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuZG90Lm5vX3N1Y2hfbWVtYmVyXCIsIFwiT3BlcmFuZCBvZiB0eXBlIFwiICsgY2xhc3NUeXBlICsgXCIgaGFzIG5vIG1lbWJlciBuYW1lZCBcIiArIG5hbWUgKyBcIi5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1lbWJlckxvb2t1cCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBjbGFzc1R5cGU6IENsYXNzVHlwZSwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuZG90Lm1lbWJlckxvb2t1cFwiLCBcIk1lbWJlciBsb29rdXAgZm9yIFwiICsgbmFtZSArIFwiIGluIGNsYXNzIFwiICsgY2xhc3NUeXBlICsgXCIgZmFpbGVkLi4uXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhcnJvdyA6IHtcclxuICAgICAgICAgICAgY2xhc3NfcG9pbnRlcl90eXBlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5hcnJvdy5jbGFzc19wb2ludGVyX3R5cGVcIiwgXCJUaGUgYXJyb3cgb3BlcmF0b3IgY2FuIG9ubHkgYmUgdXNlZCB0byBhY2Nlc3MgbWVtYmVycyBvZiBhbiBvcGVyYW5kIHdpdGggcG9pbnRlci10by1jbGFzcyB0eXBlLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbm9fc3VjaF9tZW1iZXIgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgY2xhc3NUeXBlOiBDbGFzc1R5cGUsIG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmFycm93Lm5vX3N1Y2hfbWVtYmVyXCIsIFwiT3BlcmFuZCBvZiB0eXBlIFwiICsgY2xhc3NUeXBlICsgXCIgaGFzIG5vIG1lbWJlciBuYW1lZCBcIiArIG5hbWUgKyBcIi5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1lbWJlckxvb2t1cCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBjbGFzc1R5cGU6IENsYXNzVHlwZSwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuYXJyb3cubWVtYmVyTG9va3VwXCIsIFwiTWVtYmVyIGxvb2t1cCBmb3IgXCIgKyBuYW1lICsgXCIgaW4gY2xhc3MgXCIgKyBjbGFzc1R5cGUgKyBcIiBmYWlsZWQuLi5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGludmFsaWRfb3BlcmFuZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBvcGVyYXRvcjogc3RyaW5nLCBvcGVyYW5kOiBUeXBlZEV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmludmFsaWRfb3BlcmFuZFwiLCBcIkludmFsaWQgb3BlcmFuZCB0eXBlIChcIiArIG9wZXJhbmQudHlwZSArIFwiKSBmb3Igb3BlcmF0b3IgXCIgKyBvcGVyYXRvciArIFwiLlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGx2YWx1ZV9vcGVyYW5kIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIG9wZXJhdG9yOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmx2YWx1ZV9vcGVyYW5kXCIsIFwiVGhlIFwiICsgb3BlcmF0b3IgKyBcIiBvcGVyYXRvciByZXF1aXJlcyBhbiBsdmFsdWUgb3BlcmFuZC5cIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbnZhbGlkX2JpbmFyeV9vcGVyYW5kcyA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBvcGVyYXRvcjogc3RyaW5nLCBsZWZ0OiBUeXBlZEV4cHJlc3Npb24sIHJpZ2h0OiBUeXBlZEV4cHJlc3Npb24pIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChsZWZ0LnR5cGUuaXNQb2ludGVyVHlwZSgpICYmIHNhbWVUeXBlKGxlZnQudHlwZS5wdHJUbywgcmlnaHQudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5pbnZhbGlkX2JpbmFyeV9vcGVyYW5kc1wiLCBcIlRoZSB0eXBlcyBvZiB0aGUgb3BlcmFuZHMgdXNlZCBmb3IgdGhlIFwiICsgb3BlcmF0b3IgKyBcIiBvcGVyYXRvciBcIiArXHJcbiAgICAgICAgICAgICAgICBcImFyZW4ndCBxdWl0ZSBjb21wYXRpYmxlLiBUaGUgb25lIG9uIHRoZSByaWdodCBpcyBcIiArIHJpZ2h0LnR5cGUuZW5nbGlzaFN0cmluZyhmYWxzZSkgKyBcIiwgYnV0IHRoZSBsZWZ0IGlzIGEgcG9pbnRlciB0byB0aGF0IHR5cGUuIFRoaW5rIGFib3V0IHdoZXRoZXIgeW91IHdhbnQgdG8gY29tcGFyZSBwb2ludGVycyAoYWRkcmVzc2VzKSBvciB0aGUgb2JqZWN0cyB0aGV5IHBvaW50IHRvLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChyaWdodC50eXBlLmlzUG9pbnRlclR5cGUoKSAmJiBzYW1lVHlwZShyaWdodC50eXBlLnB0clRvLCBsZWZ0LnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuaW52YWxpZF9iaW5hcnlfb3BlcmFuZHNcIiwgXCJUaGUgdHlwZXMgb2YgdGhlIG9wZXJhbmRzIHVzZWQgZm9yIHRoZSBcIiArIG9wZXJhdG9yICsgXCIgb3BlcmF0b3IgXCIgK1xyXG4gICAgICAgICAgICAgICAgXCJhcmVuJ3QgcXVpdGUgY29tcGF0aWJsZS4gVGhlIG9uZSBvbiB0aGUgbGVmdCBpcyBcIiArIGxlZnQudHlwZS5lbmdsaXNoU3RyaW5nKGZhbHNlKSArIFwiLCBidXQgdGhlIHJpZ2h0IGlzIGEgcG9pbnRlciB0byB0aGF0IHR5cGUuICBUaGluayBhYm91dCB3aGV0aGVyIHlvdSB3YW50IHRvIGNvbXBhcmUgcG9pbnRlcnMgKGFkZHJlc3Nlcykgb3IgdGhlIG9iamVjdHMgdGhleSBwb2ludCB0by5cIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5pbnZhbGlkX2JpbmFyeV9vcGVyYW5kc1wiLCBcIkludmFsaWQgb3BlcmFuZCB0eXBlcyAoXCIgKyBsZWZ0LnR5cGUgKyBcIiwgXCIgKyByaWdodC50eXBlICsgXCIpIGZvciBvcGVyYXRvciBcIiArIG9wZXJhdG9yICsgXCIuXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG9naWNhbE5vdCA6IHtcclxuICAgICAgICAgICAgb3BlcmFuZF9ib29sIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIG9wZXJhbmQ6IFR5cGVkRXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmxvZ2ljYWxOb3Qub3BlcmFuZF9ib29sXCIsIFwiRXhwcmVzc2lvbiBvZiB0eXBlIChcIiArIG9wZXJhbmQudHlwZSArIFwiKSBjYW5ub3QgYmUgY29udmVydGVkIHRvIGJvb2xlYW4gKGFzIHJlcXVpcmVkIGZvciB0aGUgb3BlcmFuZCBvZiBsb2dpY2FsIG5vdCkuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGRyZXNzT2YgOiB7XHJcbiAgICAgICAgICAgIGx2YWx1ZV9yZXF1aXJlZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuYWRkcmVzc09mLmx2YWx1ZV9yZXF1aXJlZFwiLCBcIk9wZXJhbmQgZm9yIGFkZHJlc3Mtb2Ygb3BlcmF0b3IgKCYpIG11c3QgYmUgYW4gbHZhbHVlLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGVybmFyeSA6IHtcclxuICAgICAgICAgICAgY29uZGl0aW9uX2Jvb2wgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgdHlwZTogVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLnRlcm5hcnkuY29uZGl0aW9uX2Jvb2xcIiwgXCJFeHByZXNzaW9uIG9mIHR5cGUgKFwiICsgdHlwZSArIFwiKSBjYW5ub3QgYmUgY29udmVydGVkIHRvIGJvb2xlYW4gY29uZGl0aW9uLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2FtZVZhbHVlQ2F0ZWdvcnkgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLnRlcm5hcnkuc2FtZVZhbHVlQ2F0ZWdvcnlcIiwgXCJUaGUgc2Vjb25kIGFuZCB0aGlyZCBvcGVyYW5kcyBvZiB0aGUgdGVybmFyeSBvcGVyYXRvciBtdXN0IHlpZWxkIGEgY29tbW9uIHZhbHVlIGNhdGVnb3J5LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5hcnlQbHVzIDoge1xyXG4gICAgICAgICAgICBvcGVyYW5kIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci51bmFyeVBsdXMub3BlcmFuZFwiLCBcIlRoZSB1bmFyeSBwbHVzIG9wZXJhdG9yICgrKSByZXF1aXJlcyBhbiBvcGVyYW5kIG9mIGFyaXRobWV0aWMgb3IgcG9pbnRlciB0eXBlLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5hcnlNaW51cyA6IHtcclxuICAgICAgICAgICAgb3BlcmFuZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIudW5hcnlNaW51cy5vcGVyYW5kXCIsIFwiVGhlIHVuYXJ5IG1pbnVzIG9wZXJhdG9yICgtKSByZXF1aXJlcyBhbiBvcGVyYW5kIG9mIGFyaXRobWV0aWMgdHlwZS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bmN0aW9uQ2FsbCA6IHtcclxuICAgICAgICAgICAgbWFpbiA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuZnVuY3Rpb25DYWxsLm1haW5cIiwgXCJZb3UgY2FuJ3QgZXhwbGljaXRseSBjYWxsIG1haW4uXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBudW1QYXJhbXMgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmZ1bmN0aW9uQ2FsbC5udW1QYXJhbXNcIiwgXCJJbXByb3BlciBudW1iZXIgb2YgYXJndW1lbnRzIGZvciB0aGlzIGZ1bmN0aW9uIGNhbGwuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnZhbGlkX29wZXJhbmRfZXhwcmVzc2lvbiA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBvcGVyYW5kOiBFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImV4cHIuZnVuY3Rpb25DYWxsLmludmFsaWRfb3BlcmFuZF9leHByZXNzaW9uXCIsIFwiVGhlIGV4cHJlc3Npb24gXCIgKyBvcGVyYW5kICsgXCIgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3BlcmFuZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBvcGVyYW5kOiBDUFBFbnRpdHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5mdW5jdGlvbkNhbGwub3BlcmFuZFwiLCBcIk9wZXJhbmQgb2YgdHlwZSBcIiArIG9wZXJhbmQudHlwZSArIFwiIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBhcmFtVHlwZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBmcm9tOiBUeXBlLCB0bzogVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLmZ1bmN0aW9uQ2FsbC5wYXJhbVR5cGVcIiwgXCJDYW5ub3QgY29udmVydCBcIiArIGZyb20gKyBcIiB0byBcIiArIHRvICsgXCIgaW4gZnVuY3Rpb24gY2FsbCBwYXJhbWV0ZXIuXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwYXJhbVJlZmVyZW5jZVR5cGUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgZnJvbTogVHlwZSwgdG86IFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5mdW5jdGlvbkNhbGwucGFyYW1SZWZlcmVuY2VUeXBlXCIsIFwiVGhlIGdpdmVuIGFyZ3VtZW50IChvZiB0eXBlIFwiICsgZnJvbSArIFwiKSBjYW5ub3QgYmUgYm91bmQgdG8gYSByZWZlcmVuY2UgcGFyYW1ldGVyIG9mIGEgZGlmZmVyZW50IHR5cGUgKFwiKyB0byArIFwiKS5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBhcmFtUmVmZXJlbmNlTHZhbHVlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5mdW5jdGlvbkNhbGwucGFyYW1SZWZlcmVuY2VMdmFsdWVcIiwgXCJGb3Igbm93LCB5b3UgY2Fubm90IGJpbmQgYSBub24tbHZhbHVlIGFzIGEgcmVmZXJlbmNlIHBhcmFtZXRlciBpbiBMb2JzdGVyLiAoaS5lLiB5b3UgaGF2ZSB0byBiaW5kIGEgdmFyaWFibGUpXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBub3RfZGVmaW5lZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCB0eXBlOiBUeXBlLCBwYXJhbVR5cGVzOiByZWFkb25seSBQb3RlbnRpYWxQYXJhbWV0ZXJUeXBlW10pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiZXhwci5mdW5jdGlvbkNhbGwubm90X2RlZmluZWRcIiwgXCJBIGZ1bmN0aW9uIGNhbGwgb3BlcmF0b3Igd2l0aCBwYXJhbWV0ZXJzIG9mIHR5cGVzIChcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1UeXBlcy5tYXAoZnVuY3Rpb24ocHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB0LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuam9pbihcIiwgXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgKyBcIikgZm9yIHRoZSBjbGFzcyB0eXBlIFwiICsgdHlwZSArIFwiIGhhcyBub3QgYmVlbiBkZWZpbmVkLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyxcclxuICAgICAgICAgICAgLy90YWlsX3JlY3Vyc2l2ZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCByZWFzb24pIHtcclxuICAgICAgICAgICAgLy8gICAgcmV0dXJuIFdpZGdldEFubm90YXRpb24uaW5zdGFuY2Uoc3JjLCBcInRhaWxSZWN1cnNpdmVcIiwgXCJUaGlzIGZ1bmN0aW9uIGNhbGwgaXMgdGFpbCByZWN1cnNpdmUhXCIgKyAocmVhc29uID8gXCIgXCIrcmVhc29uIDogXCJcIikpO1xyXG4gICAgICAgICAgICAvL30sXHJcbiAgICAgICAgICAgIC8vbm90X3RhaWxfcmVjdXJzaXZlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIHJlYXNvbikge1xyXG4gICAgICAgICAgICAvLyAgICByZXR1cm4gV2lkZ2V0QW5ub3RhdGlvbi5pbnN0YW5jZShzcmMsIFwicmVjdXJzaXZlXCIsIFwiVGhpcyBmdW5jdGlvbiBjYWxsIGlzIHJlY3Vyc2l2ZSwgYnV0IE5PVCB0YWlsIHJlY3Vyc2l2ZSFcIiArIChyZWFzb24gPyBcIiBcIityZWFzb24gOiBcIlwiKSk7XHJcbiAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRoaXNFeHByOiB7XHJcbiAgICAgICAgICAgIG1lbWJlckZ1bmMgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJleHByLnRoaXNFeHByLm1lbWJlckZ1bmNcIiwgXCJZb3UgbWF5IG9ubHkgdXNlIHRoZSA8L3NwYW4gY2xhc3M9J2NvZGUnPnRoaXM8L3NwYW4+IGtleXdvcmQgaW4gbm9uLXN0YXRpYyBtZW1iZXIgZnVuY3Rpb25zLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfSxcclxuXHRpZGVuIDoge1xyXG4gICAgICAgIGFtYmlndW91cyA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJpZGVuLmFtYmlndW91c1wiLCBcIlxcXCJcIituYW1lK1wiXFxcIiBpcyBhbWJpZ3VvdXMuIChUaGVyZSBpcyBub3QgZW5vdWdoIGNvbnRleHR1YWwgdHlwZSBpbmZvcm1hdGlvbiBmb3IgbmFtZSBsb29rdXAgdG8gZmlndXJlIG91dCB3aGljaCBlbnRpdHkgdGhpcyBpZGVudGlmaWVyIHJlZmVycyB0by4pXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbm9fbWF0Y2ggOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwiaWRlbi5ub19tYXRjaFwiLCBcIk5vIG1hdGNoaW5nIGZ1bmN0aW9uIGZvdW5kIGZvciBjYWxsIHRvIFxcXCJcIituYW1lK1wiXFxcIiB3aXRoIHRoZXNlIHBhcmFtZXRlciB0eXBlcy5cIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBub3RfZGVjbGFyZWQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgbmFtZSkge1xyXG4gICAgICAgIC8vICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImlkZW4ubm90X2RlY2xhcmVkXCIsIFwiXFxcIlwiK25hbWUrXCJcXFwiIHdhcyBub3QgZGVjbGFyZWQgaW4gdGhpcyBzY29wZS5cIik7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICBrZXl3b3JkIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImlkZW4ua2V5d29yZFwiLCBcIlxcXCJcIituYW1lK1wiXFxcIiBpcyBhIEMrKyBrZXl3b3JkIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBhbiBpZGVudGlmaWVyLlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFsdF9vcCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJpZGVuLmFsdF9vcFwiLCBcIlxcXCJcIituYW1lK1wiXFxcIiBpcyBhIEMrKyBvcGVyYXRvciBhbmQgY2Fubm90IGJlIHVzZWQgYXMgYW4gaWRlbnRpZmllci5cIik7XHJcbiAgICAgICAgfVxyXG5cdH0sXHJcbiAgICBwYXJhbSA6IHtcclxuICAgICAgICBudW1QYXJhbXMgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcInBhcmFtLm51bVBhcmFtc1wiLCBcIkltcHJvcGVyIG51bWJlciBvZiBhcmd1bWVudHMuXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGFyYW1UeXBlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGZyb206IFR5cGUsIHRvOiBUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwicGFyYW0ucGFyYW1UeXBlXCIsIFwiQ2Fubm90IGNvbnZlcnQgXCIgKyBmcm9tICsgXCIgdG8gYSBwYXJhbWV0ZXIgb2YgdHlwZSBcIiArIHRvICsgXCIuXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGFyYW1SZWZlcmVuY2VUeXBlIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGZyb206IFR5cGUsIHRvOiBUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwicGFyYW0ucGFyYW1SZWZlcmVuY2VUeXBlXCIsIFwiVGhlIGdpdmVuIGFyZ3VtZW50IChvZiB0eXBlIFwiICsgZnJvbSArIFwiKSBjYW5ub3QgYmUgYm91bmQgdG8gYSByZWZlcmVuY2UgcGFyYW1ldGVyIG9mIGEgZGlmZmVyZW50IHR5cGUgKFwiKyB0byArIFwiKS5cIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYXJhbVJlZmVyZW5jZUx2YWx1ZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwicGFyYW0ucGFyYW1SZWZlcmVuY2VMdmFsdWVcIiwgXCJGb3Igbm93LCB5b3UgY2Fubm90IGJpbmQgYSBub24tbHZhbHVlIGFzIGEgcmVmZXJlbmNlIHBhcmFtZXRlciBpbiBMb2JzdGVyLiAoaS5lLiB5b3UgaGF2ZSB0byBiaW5kIGEgdmFyaWFibGUpXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gcGFyYW1Db3B5Q29uc3RydWN0b3IgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgdHlwZSkge1xyXG4gICAgICAgIC8vICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcInBhcmFtLnBhcmFtQ29weUNvbnN0cnVjdG9yXCIsIFwiQ2Fubm90IGZpbmQgYSBjb3B5IGNvbnN0cnVjdG9yIHRvIHBhc3MgYSBwYXJhbWV0ZXIgb2YgdHlwZSBcIiArIHR5cGUgKyBcIiBieSB2YWx1ZS5cIik7XHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICB0aGlzQ29uc3QgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgdHlwZTogVHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcInBhcmFtLnRoaXNDb25zdFwiLCBcIkEgbm9uLWNvbnN0IG1lbWJlciBmdW5jdGlvbiBjYW5ub3QgYmUgY2FsbGVkIG9uIGEgY29uc3QgaW5zdGFuY2Ugb2YgdGhlIFwiICsgdHlwZSArIFwiIGNsYXNzLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc3RtdCA6IHtcclxuICAgICAgICBmdW5jdGlvbl9kZWZpbml0aW9uX3Byb2hpYml0ZWQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcInN0bXQuZnVuY3Rpb25fZGVmaW5pdGlvbl9wcm9oaWJpdGVkXCIsIFwiQSBmdW5jdGlvbiBkZWZpbml0aW9uIGlzIHByb2hpYml0ZWQgaGVyZSAoaS5lLiBpbnNpZGUgYSBzdGF0ZW1lbnQpLlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlbGVjdGlvbiA6IHtcclxuICAgICAgICAgICAgY29uZGl0aW9uX2Jvb2wgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgZXhwcjogVHlwZWRFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShleHByLCBOb3RlS2luZC5FUlJPUiwgXCJzdG10LnNlbGVjdGlvbi5jb25kaXRpb25fYm9vbFwiLCBcIkV4cHJlc3Npb24gb2YgdHlwZSAoXCIgKyBleHByLnR5cGUgKyBcIikgY2Fubm90IGJlIGNvbnZlcnRlZCB0byBib29sZWFuIGNvbmRpdGlvbi5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGl0ZXJhdGlvbjoge1xyXG4gICAgICAgICAgICBjb25kaXRpb25fYm9vbCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBleHByOiBUeXBlZEV4cHJlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGV4cHIsIE5vdGVLaW5kLkVSUk9SLCBcInN0bXQuaXRlcmF0aW9uLmNvbmRpdGlvbl9ib29sXCIsIFwiRXhwcmVzc2lvbiBvZiB0eXBlIChcIiArIGV4cHIudHlwZSArIFwiKSBjYW5ub3QgYmUgY29udmVydGVkIHRvIGJvb2xlYW4gY29uZGl0aW9uLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYnJlYWtTdGF0ZW1lbnQ6IHtcclxuICAgICAgICAgICAgbG9jYXRpb246IGZ1bmN0aW9uIChjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJzdG10LmJyZWFrU3RhdGVtZW50LmxvY2F0aW9uXCIsIFwiQnJlYWsgc3RhdGVtZW50cyBtYXkgb25seSBvY2N1ciBpbnNpZGUgbG9vcHMgb3IgY2FzZSBzdGF0ZW1lbnRzLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmV0dXJuU3RhdGVtZW50OiB7XHJcbiAgICAgICAgICAgIGVtcHR5OiBmdW5jdGlvbiAoY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwic3RtdC5yZXR1cm5TdGF0ZW1lbnQuZW1wdHlcIiwgXCJBIHJldHVybiBzdGF0ZW1lbnQgd2l0aG91dCBhbiBleHByZXNzaW9uIGlzIG9ubHkgYWxsb3dlZCBpbiB2b2lkIGZ1bmN0aW9ucy5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4cHJWb2lkOiBmdW5jdGlvbiAoY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwic3RtdC5yZXR1cm5TdGF0ZW1lbnQuZXhwclZvaWRcIiwgXCJBIHJldHVybiBzdGF0ZW1lbnQgd2l0aCBhbiBleHByZXNzaW9uIG9mIG5vbi12b2lkIHR5cGUgaXMgb25seSBhbGxvd2VkIGluIGEgbm9uLXZvaWQgZnVuY3Rpb24uXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb252ZXJ0IDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGZyb206IFR5cGUsIHRvOiBUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcInN0bXQucmV0dXJuU3RhdGVtZW50LmNvbnZlcnRcIiwgXCJDYW5ub3QgY29udmVydCBcIiArIGZyb20gKyBcIiB0byByZXR1cm4gdHlwZSBvZiBcIiArIHRvICsgXCIgaW4gcmV0dXJuIHN0YXRlbWVudC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbGluayA6IHtcclxuICAgICAgICBsaWJyYXJ5X3Vuc3VwcG9ydGVkIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGZ1bmM6IEZ1bmN0aW9uRW50aXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGlua2VyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImxpbmsubGlicmFyeV91bnN1cHBvcnRlZFwiLCBcIkknbSBzb3JyeSwgYnV0IHRoaXMgZnVuY3Rpb24gKFwiICsgZnVuYyArIFwiKSBpcyBhIHBhcnQgb2YgdGhlIHN0YW5kYXJkIGxpYnJhcnkgdGhhdCBpc24ndCBjdXJyZW50bHkgc3VwcG9ydGVkLlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG11bHRpcGxlX2RlZiA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaW5rZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwibGluay5tdWx0aXBsZV9kZWZcIiwgXCJNdWx0aXBsZSBkZWZpbml0aW9ucyBmb3VuZCBmb3IgXCIgKyBuYW1lICsgXCIuXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHlwZV9taXNtYXRjaCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBlbnQxOiBEZWNsYXJlZEVudGl0eSwgZW50MjogRGVjbGFyZWRFbnRpdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaW5rZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwibGluay50eXBlX21pc21hdGNoXCIsIFwiTXVsdGlwbGUgZGVjbGFyYXRpb25zIGZvdW5kIGZvciBcIiArIGVudDEubmFtZSArIFwiLCBidXQgd2l0aCBkaWZmZXJlbnQgdHlwZXMuXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xhc3Nfc2FtZV90b2tlbnMgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgZW50MTogRGVjbGFyZWRFbnRpdHksIGVudDI6IERlY2xhcmVkRW50aXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGlua2VyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImxpbmsuY2xhc3Nfc2FtZV90b2tlbnNcIiwgXCJNdWx0aXBsZSBjbGFzcyBkZWZpbml0aW9ucyBhcmUgb2sgaWYgdGhleSBhcmUgRVhBQ1RMWSB0aGUgc2FtZSBpbiB0aGUgc291cmNlIGNvZGUuIEhvd2V2ZXIsIHRoZSBtdWx0aXBsZSBkZWZpbml0aW9ucyBmb3VuZCBmb3IgXCIgKyBlbnQxLm5hbWUgKyBcIiBkbyBub3QgbWF0Y2ggZXhhY3RseS5cIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmdW5jIDoge1xyXG4gICAgICAgICAgICBkZWZfbm90X2ZvdW5kIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGZ1bmM6IEZ1bmN0aW9uRW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExpbmtlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJsaW5rLmZ1bmMuZGVmX25vdF9mb3VuZFwiLCBcIkNhbm5vdCBmaW5kIGRlZmluaXRpb24gZm9yIGZ1bmN0aW9uIFwiICsgZnVuYy5uYW1lICsgXCIuIFRoYXQgaXMsIHRoZSBmdW5jdGlvbiBpcyBkZWNsYXJlZCBhbmQgSSBrbm93IHdoYXQgaXQgaXMsIGJ1dCBJIGNhbid0IGZpbmQgdGhlIGFjdHVhbCBjb2RlIHRoYXQgaW1wbGVtZW50cyBpdC5cIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG5vX21hdGNoaW5nX292ZXJsb2FkIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGZ1bmM6IEZ1bmN0aW9uRW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExpbmtlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJsaW5rLmZ1bmMubm9fbWF0Y2hpbmdfb3ZlcmxvYWRcIiwgYEFsdGhvdWdoIHNvbWUgZGVmaW5pdGlvbnMgZm9yIGEgZnVuY3Rpb24gbmFtZWQgJHtmdW5jLm5hbWV9IGV4aXN0LCBJIGNhbid0IGZpbmQgb25lIHdpdGggdGhlIHJpZ2h0IHNpZ25hdHVyZSB0byBtYXRjaCB0aGlzIGRlY2xhcmF0aW9uLmApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXR1cm5UeXBlc01hdGNoIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGZ1bmM6IEZ1bmN0aW9uRW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExpbmtlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJsaW5rLmZ1bmMucmV0dXJuVHlwZXNNYXRjaFwiLCBcIlRoaXMgZGVjbGFyYXRpb24gb2YgdGhlIGZ1bmN0aW9uIFwiICsgZnVuYy5uYW1lICsgXCIgaGFzIGEgZGlmZmVyZW50IHJldHVybiB0eXBlIHRoYW4gaXRzIGRlZmluaXRpb24uXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWZfbm90X2ZvdW5kIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIGVudDogU3RhdGljRW50aXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGlua2VyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImxpbmsuZGVmX25vdF9mb3VuZFwiLCBcIkNhbm5vdCBmaW5kIGRlZmluaXRpb24gZm9yIG9iamVjdCBcIiArIGVudC5uYW1lICsgXCIuIChJdCBpcyBkZWNsYXJlZCwgc28gSSBrbm93IGl0J3MgYSB2YXJpYWJsZSBhbmQgd2hhdCB0eXBlIGl0IGlzLCBidXQgaXQncyBuZXZlciBkZWZpbmVkIGFueXdoZXJlLilcIik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICB9LFxyXG4gICAgLy8gbG9va3VwIDoge1xyXG4gICAgLy8gICAgIC8vIGJhZExvb2t1cCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBuYW1lKSB7XHJcbiAgICAvLyAgICAgLy8gICAgIG5hbWUgPSBJZGVudGlmaWVyLnF1YWxpZmllZE5hbWVTdHJpbmcobmFtZSk7XHJcbiAgICAvLyAgICAgLy8gICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwibG9va3VwLmJhZExvb2t1cFwiLCBcIk5hbWUgbG9va3VwIGZvciBcXFwiXCIrbmFtZStcIlxcXCIgd2FzIHVuc3VjY2Vzc2Z1bC4pXCIpO1xyXG4gICAgLy8gICAgIC8vIH0sXHJcbiAgICAvLyAgICAgYW1iaWd1b3VzIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIG5hbWUpIHtcclxuICAgIC8vICAgICAgICAgbmFtZSA9IElkZW50aWZpZXIucXVhbGlmaWVkTmFtZVN0cmluZyhuYW1lKTtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJsb29rdXAuYW1iaWd1b3VzXCIsIFwiXFxcIlwiK25hbWUrXCJcXFwiIGlzIGFtYmlndW91cy4gKFRoZXJlIGlzIG5vdCBlbm91Z2ggY29udGV4dHVhbCB0eXBlIGluZm9ybWF0aW9uIGZvciBuYW1lIGxvb2t1cCB0byBmaWd1cmUgb3V0IHdoaWNoIGVudGl0eSB0aGlzIGlkZW50aWZpZXIgcmVmZXJzIHRvLilcIik7XHJcbiAgICAvLyAgICAgfSxcclxuICAgIC8vICAgICBub19tYXRjaCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBuYW1lLCBwYXJhbVR5cGVzLCBpc1RoaXNDb25zdCkge1xyXG4gICAgLy8gICAgICAgICBuYW1lID0gSWRlbnRpZmllci5xdWFsaWZpZWROYW1lU3RyaW5nKG5hbWUpO1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImxvb2t1cC5ub19tYXRjaFwiLCBcIk5vIG1hdGNoaW5nIGZ1bmN0aW9uIGZvdW5kIGZvciBjYWxsIHRvIFxcXCJcIituYW1lK1wiXFxcIiB3aXRoIHBhcmFtZXRlciB0eXBlcyAoXCIgK1xyXG4gICAgLy8gICAgICAgICBwYXJhbVR5cGVzLm1hcChmdW5jdGlvbihwdCkge1xyXG4gICAgLy8gICAgICAgICAgICAgcmV0dXJuIHB0LnRvU3RyaW5nKCk7XHJcbiAgICAvLyAgICAgICAgIH0pLmpvaW4oXCIsIFwiKSArXHJcbiAgICAvLyAgICAgICAgIFwiKVwiICsgKGlzVGhpc0NvbnN0ID8gXCIgYW5kIHRoYXQgbWF5IGJlIGFwcGxpZWQgdG8gYSBjb25zdCBvYmplY3QgKG9yIGNhbGxlZCBmcm9tIGNvbnN0IG1lbWJlciBmdW5jdGlvbikuXCIgOiBcIi5cIikpO1xyXG4gICAgLy8gICAgIH0sXHJcbiAgICAvLyAgICAgaGlkZGVuIDogZnVuY3Rpb24oY29uc3RydWN0OiBUcmFuc2xhdGlvblVuaXRDb25zdHJ1Y3QsIG5hbWUsIHBhcmFtVHlwZXMsIGlzVGhpc0NvbnN0KSB7XHJcbiAgICAvLyAgICAgICAgIG5hbWUgPSBJZGVudGlmaWVyLnF1YWxpZmllZE5hbWVTdHJpbmcobmFtZSk7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwibG9va3VwLmhpZGRlblwiLCBcIk5vIG1hdGNoaW5nIGZ1bmN0aW9uIGZvdW5kIGZvciBjYWxsIHRvIFxcXCJcIituYW1lK1wiXFxcIiB3aXRoIHBhcmFtZXRlciB0eXBlcyhcIiArXHJcbiAgICAvLyAgICAgICAgICAgICBwYXJhbVR5cGVzLm1hcChmdW5jdGlvbihwdCkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiBwdC50b1N0cmluZygpO1xyXG4gICAgLy8gICAgICAgICAgICAgfSkuam9pbihcIiwgXCIpICtcclxuICAgIC8vICAgICAgICAgICAgIFwiKVwiICsgKGlzVGhpc0NvbnN0ID8gXCIgYW5kIHRoYXQgbWF5IGJlIGFwcGxpZWQgdG8gYSBjb25zdCBvYmplY3QgKG9yIGNhbGxlZCBmcm9tIGNvbnN0IG1lbWJlciBmdW5jdGlvbikuXCIgOiBcIi5cIikgKyBcIiAoQWN0dWFsbHksIHRoZXJlIGlzIGEgbWF0Y2ggaW4gYSBtb3JlIGRpc3RhbnQgc2NvcGUsIGJ1dCBpdCBpcyBoaWRkZW4gYnkgYW4gZW50aXR5IG9mIHRoZSBzYW1lIG5hbWUgaW4gYSBuZWFyZXIgc2NvcGUuKVwiKTtcclxuICAgIC8vICAgICB9LFxyXG4gICAgLy8gICAgIG5vdF9mb3VuZCA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBuYW1lKSB7XHJcbiAgICAvLyAgICAgICAgIG5hbWUgPSBJZGVudGlmaWVyLnF1YWxpZmllZE5hbWVTdHJpbmcobmFtZSk7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwibG9va3VwLm5vdF9mb3VuZFwiLCBcIkNhbm5vdCBmaW5kIGRlY2xhcmF0aW9uIGZvciBcXFwiXCIrbmFtZStcIlxcXCIuXCIpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH0sXHJcbiAgICBwcmVwcm9jZXNzIDoge1xyXG4gICAgICAgIHJlY3Vyc2l2ZUluY2x1ZGUgOiBmdW5jdGlvbihzb3VyY2VSZWY6IFNvdXJjZVJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICAgcmV0dXJuIG5ldyBQcmVwcm9jZXNzb3JOb3RlKHNvdXJjZVJlZiwgTm90ZUtpbmQuV0FSTklORywgXCJwcmVwcm9jZXNzLnJlY3Vyc2l2ZUluY2x1ZGVcIiwgXCJSZWN1cnNpdmUgI2luY2x1ZGUgZGV0ZWN0ZWQuIChpLmUuIEEgZmlsZSAjaW5jbHVkZWQgaXRzZWxmLCBvciAjaW5jbHVkZWQgYSBkaWZmZXJlbnQgZmlsZSB0aGF0IHRoZW4gI2luY2x1ZGVzIHRoZSBvcmlnaW5hbCwgZXRjLilcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGxvYnN0ZXIgOiB7XHJcbiAgICAgICAgdW5zdXBwb3J0ZWRfZmVhdHVyZSA6IGZ1bmN0aW9uKGNvbnN0cnVjdDogVHJhbnNsYXRpb25Vbml0Q29uc3RydWN0LCBmZWF0dXJlOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21waWxlck5vdGUoY29uc3RydWN0LCBOb3RlS2luZC5FUlJPUiwgXCJsb2JzdGVyLnVuc3VwcG9ydGVkX2ZlYXR1cmVcIiwgXCJTb3JyeSwgeW91IGhhdmUgdXNlZCBhIEMrKyBmZWF0dXJlIChcIiArIGZlYXR1cmUgKyBcIikgdGhhdCBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbiBMb2JzdGVyLlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlZmVyZW5jZVBydmFsdWUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImxvYnN0ZXIucmVmZXJlbmNlUHJ2YWx1ZVwiLCBcIlNvcnJ5LCBMb2JzdGVyIGRvZXMgbm90IHlldCBzdXBwb3J0IGJpbmRpbmcgcmVmZXJlbmNlcyAoZXZlbiBpZiB0aGV5IGFyZSByZWZlcmVuY2UtdG8tY29uc3QpIHRvIHBydmFsdWVzIChlLmcuIHRlbXBvcmFyeSBvYmplY3RzKS5cIik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0ZXJuYXJ5U2FtZVR5cGUgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgdHlwZTE6IFR5cGUsIHR5cGUyOiBUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGlsZXJOb3RlKGNvbnN0cnVjdCwgTm90ZUtpbmQuRVJST1IsIFwibG9ic3Rlci50ZXJuYXJ5U2FtZVR5cGVcIiwgXCJMb2JzdGVyJ3MgdGVybmFyeSBvcGVyYXRvciByZXF1aXJlcyBzZWNvbmQgYW5kIHRoaXJkIG9wZXJhbmRzIG9mIHRoZSBzYW1lIHR5cGUuIFRoZSBnaXZlbiBvcGVyYW5kcyBoYXZlIHR5cGVzIFwiICsgdHlwZTEgKyBcIiBhbmQgXCIgKyB0eXBlMiArIFwiLlwiKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlcm5hcnlOb1ZvaWQgOiBmdW5jdGlvbihjb25zdHJ1Y3Q6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBpbGVyTm90ZShjb25zdHJ1Y3QsIE5vdGVLaW5kLkVSUk9SLCBcImxvYnN0ZXIudGVybmFyeU5vVm9pZFwiLCBcIkxvYnN0ZXIncyB0ZXJuYXJ5IG9wZXJhdG9yIGRvZXMgbm90IGFsbG93IHZvaWQgb3BlcmFuZHMuXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5vdGVIYW5kbGVyIHsgXHJcbiAgICBhZGROb3RlKG5vdGU6IE5vdGUpIDogdm9pZDtcclxuXHJcblxyXG59IiwiXHJcbmltcG9ydCBwdWxsIGZyb20gXCJsb2Rhc2gvcHVsbFwiO1xyXG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiLi91dGlsXCI7XHJcblxyXG5pbnRlcmZhY2UgTWVzc2FnZSB7XHJcbiAgICBjYXRlZ29yeTogc3RyaW5nO1xyXG4gICAgZGF0YToge307XHJcbiAgICBzb3VyY2U6IGFueTtcclxufVxyXG5cclxuXHJcbi8vIGludGVyZmFjZSBPYnNlcnZhYmxlVHlwZSB7XHJcbi8vICAgICBzZW5kKGNhdGVnb3J5OiBzdHJpbmcsIGRhdGE6IGFueSkgOiB2b2lkO1xyXG4vLyAgICAgYWRkTGlzdGVuZXIobGlzdGVuZXI6IE9ic2VydmVyVHlwZSwgY2F0ZWdvcnk/OiBzdHJpbmcgfCBzdHJpbmdbXSkgOiBPYnNlcnZhYmxlVHlwZTtcclxuLy8gICAgIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyOiBPYnNlcnZlclR5cGUsIGNhdGVnb3J5Pzogc3RyaW5nKSA6IE9ic2VydmFibGVUeXBlO1xyXG4vLyAgICAgaWRlbnRpZnkoY2F0ZWdvcnk6IHN0cmluZywgZnVuYzogKG86T2JzZXJ2ZXJUeXBlKSA9PiBhbnkpIDogT2JzZXJ2ZXJUeXBlO1xyXG4vLyB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkTGlzdGVuZXIob2JqV2l0aE9ic2VydmFibGU6IHtvYnNlcnZhYmxlOiBPYnNlcnZhYmxlfSwgbGlzdGVuZXI6IE9ic2VydmVyVHlwZSwgY2F0ZWdvcnk/OiBzdHJpbmcgfCBzdHJpbmdbXSkge1xyXG4gICAgb2JqV2l0aE9ic2VydmFibGUub2JzZXJ2YWJsZS5hZGRMaXN0ZW5lcihsaXN0ZW5lciwgY2F0ZWdvcnkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVzc2FnZVJlc3BvbnNlKG1lc3NhZ2VDYXRlZ29yeT86IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgaWYgKCF0YXJnZXQuX2FjdCkgeyB0YXJnZXQuX2FjdCA9IHt9OyB9XHJcbiAgICAgICAgdGFyZ2V0Ll9hY3RbbWVzc2FnZUNhdGVnb3J5IHx8IHByb3BlcnR5S2V5XSA9IHRhcmdldFtwcm9wZXJ0eUtleV07XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VSZXNwb25zZXMge1xyXG4gICAgW2luZGV4OiBzdHJpbmddOiAoKG1zZzogTWVzc2FnZSkgPT4gdm9pZCk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2ZXJUeXBlIHtcclxuICAgIF9hY3QgOiBNZXNzYWdlUmVzcG9uc2VzO1xyXG59XHJcblxyXG4vLyBleHBvcnQgY2xhc3MgT2JzZXJ2ZXIge1xyXG4vLyAgICAgcHJpdmF0ZSByZWFkb25seSBhY3RvcjogQWN0b3I7XHJcblxyXG4vLyAgICAgY29uc3RydWN0b3IoYWN0b3I6IEFjdG9yKSB7XHJcbi8vICAgICAgICAgdGhpcy5hY3RvciA9IGFjdG9yO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBfSURFTlRJRlkobXNnIDoge2RhdGE6KG86YW55KSA9PiB2b2lkfSkge1xyXG4vLyAgICAgICAgIG1zZy5kYXRhKHRoaXMpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBsaXN0ZW5UbyhvdGhlcjogT2JzZXJ2YWJsZVR5cGUsIGNhdGVnb3J5OiBzdHJpbmcpIHtcclxuLy8gICAgICAgICBvdGhlci5hZGRMaXN0ZW5lcih0aGlzLCBjYXRlZ29yeSk7XHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIHN0b3BMaXN0ZW5pbmdUbyhvdGhlcjogT2JzZXJ2YWJsZVR5cGUsIGNhdGVnb3J5OiBzdHJpbmcpIHtcclxuLy8gICAgICAgICBpZiAob3RoZXIpIHtcclxuLy8gICAgICAgICAgICAgb3RoZXIucmVtb3ZlTGlzdGVuZXIodGhpcywgY2F0ZWdvcnkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICByZXR1cm4gdGhpcztcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgcmVjdiAobXNnIDogTWVzc2FnZSkge1xyXG5cclxuLy8gICAgICAgICAvLyBDYWxsIHRoZSBcIl9hY3RcIiBmdW5jdGlvbiBmb3IgdGhpc1xyXG4vLyAgICAgICAgIHZhciBjYXRBY3QgPSB0aGlzLmFjdG9yLl9hY3RbbXNnLmNhdGVnb3J5XTtcclxuLy8gICAgICAgICBpZiAoY2F0QWN0KXtcclxuLy8gICAgICAgICAgICAgY2F0QWN0LmNhbGwodGhpcy5hY3RvciwgbXNnKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZSBpZiAodGhpcy5hY3Rvci5fYWN0Ll9kZWZhdWx0KSB7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYWN0b3IuX2FjdC5fZGVmYXVsdC5jYWxsKHRoaXMuYWN0b3IsIG1zZyk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2Uge1xyXG4vLyAgICAgICAgICAgICBhc3NlcnQoZmFsc2UpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbmZ1bmN0aW9uIHJlY2VpdmVNZXNzYWdlKG9ic2VydmVyOiBPYnNlcnZlclR5cGUsIG1zZzogTWVzc2FnZSkge1xyXG4gICAgdmFyIGNhdEFjdCA9IG9ic2VydmVyLl9hY3RbbXNnLmNhdGVnb3J5XTtcclxuICAgIGlmIChjYXRBY3Qpe1xyXG4gICAgICAgIGNhdEFjdC5jYWxsKG9ic2VydmVyLCBtc2cpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAob2JzZXJ2ZXIuX2FjdC5fZGVmYXVsdCkge1xyXG4gICAgICAgIG9ic2VydmVyLl9hY3QuX2RlZmF1bHQuY2FsbChvYnNlcnZlciwgbXNnKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFzc2VydChmYWxzZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlIHtcclxuICAgIHByaXZhdGUgdW5pdmVyc2FsT2JzZXJ2ZXJzOiBPYnNlcnZlclR5cGVbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBvYnNlcnZlcnM6IHtbaW5kZXg6IHN0cmluZ10gOiBPYnNlcnZlclR5cGVbXX0gPSB7fTtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNvdXJjZTogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNlbmQoY2F0ZWdvcnk6IHN0cmluZywgZGF0YT86IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZS5zaWxlbnQpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBtc2c6IE1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcclxuICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGxldCBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVyc1ttc2cuY2F0ZWdvcnldO1xyXG4gICAgICAgIGlmIChvYnNlcnZlcnMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYnNlcnZlcnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHJlY2VpdmVNZXNzYWdlKG9ic2VydmVyc1tpXSwgbXNnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnVuaXZlcnNhbE9ic2VydmVycy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICByZWNlaXZlTWVzc2FnZSh0aGlzLnVuaXZlcnNhbE9ic2VydmVyc1tpXSwgbXNnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZExpc3RlbmVyKGxpc3RlbmVyOiBPYnNlcnZlclR5cGUsIGNhdGVnb3J5Pzogc3RyaW5nIHwgc3RyaW5nW10pIHtcclxuICAgICAgICBpZiAoY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2F0ZWdvcnkpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGFuIGFycmF5IG9mIGNhdGVnb3JpZXMsIGFkZCB0byBhbGwgaW5kaXZpZHVhbGx5XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhdGVnb3J5Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcihsaXN0ZW5lciwgY2F0ZWdvcnlbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9ic2VydmVyc1tjYXRlZ29yeV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVyc1tjYXRlZ29yeV0gPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzW2NhdGVnb3J5XS5wdXNoKGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJBZGRlZChsaXN0ZW5lciwgY2F0ZWdvcnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIC8vIGlmIG5vIGNhdGVnb3J5LCBpbnRlbnQgaXMgdG8gbGlzdGVuIHRvIGV2ZXJ5dGhpbmdcclxuICAgICAgICAgICAgdGhpcy51bml2ZXJzYWxPYnNlcnZlcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJBZGRlZChsaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgTm90ZTogdG8gcmVtb3ZlIGEgdW5pdmVyc2FsIGxpc3RlbmVyLCB5b3UgbXVzdCBjYWxsIHRoaXMgd2l0aCBjYXRlZ29yeT09ZmFsc2UuXHJcbiAgICBJZiBhIGxpc3RlbmVyIGlzIHVuaXZlcnNhbCwgcmVtb3ZpbmcgaXQgZnJvbSBhIHBhcnRpY3VsYXIgY2F0ZWdvcnkgd29uJ3QgZG8gYW55dGhpbmcuXHJcbiAgICAqL1xyXG4gICAgcHVibGljIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyOiBPYnNlcnZlclR5cGUsIGNhdGVnb3J5Pzogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYoY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gdGhlIGxpc3QgZm9yIGEgc3BlY2lmaWMgY2F0ZWdvcnkgKGlmIGxpc3QgZXhpc3RzKVxyXG4gICAgICAgICAgICBsZXQgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnNbY2F0ZWdvcnldO1xyXG4gICAgICAgICAgICBvYnNlcnZlcnMgJiYgcHVsbChvYnNlcnZlcnMsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lclJlbW92ZWQobGlzdGVuZXIsIGNhdGVnb3J5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gYWxsIGNhdGVnb3JpZXNcclxuICAgICAgICAgICAgZm9yKHZhciBjYXQgaW4gdGhpcy5vYnNlcnZlcnMpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lciwgY2F0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQWxzbyByZW1vdmUgZnJvbSB1bml2ZXJzYWwgbGlzdGVuZXJzXHJcbiAgICAgICAgICAgIHB1bGwodGhpcy51bml2ZXJzYWxPYnNlcnZlcnMsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lclJlbW92ZWQobGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbGlzdGVuZXJBZGRlZChsaXN0ZW5lcjogT2JzZXJ2ZXJUeXBlLCBjYXRlZ29yeT86IHN0cmluZykgOiB2b2lkIHsgfVxyXG4gICAgcHJvdGVjdGVkIGxpc3RlbmVyUmVtb3ZlZChsaXN0ZW5lcjogT2JzZXJ2ZXJUeXBlLCBjYXRlZ29yeT86IHN0cmluZykgOiB2b2lkIHsgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBpZGVudGlmeShjYXRlZ29yeTogc3RyaW5nLCBmdW5jOiAobzpPYnNlcnZlclR5cGUpID0+IGFueSkge1xyXG4gICAgLy8gICAgIGxldCBvdGhlciEgOiBPYnNlcnZlclR5cGU7IC8vIFVzZXMgZGVmaW5pdGUgYXNzaWdubWVudCBhbm5vdGF0aW9uIHNpbmNlIHRoZSBmdW5jdGlvbiBpcyBhc3N1bWVkIHRvIGFzc2lnbiB0byBvdGhlclxyXG4gICAgLy8gICAgIHRoaXMuc2VuZChjYXRlZ29yeSwgZnVuYyB8fCBmdW5jdGlvbihvOk9ic2VydmVyVHlwZSkge290aGVyID0gbzt9KTtcclxuICAgIC8vICAgICByZXR1cm4gb3RoZXI7XHJcbiAgICAvLyB9XHJcblxyXG59XHJcbiIsImltcG9ydCB7IEJhc2ljQ1BQQ29uc3RydWN0LCBSdW50aW1lQ29uc3RydWN0LCBQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbiwgUnVudGltZVBvdGVudGlhbEZ1bGxFeHByZXNzaW9uLCBTdWNjZXNzZnVsbHlDb21waWxlZCwgQ29tcGlsZWRUZW1wb3JhcnlEZWFsbG9jYXRvciwgVHJhbnNsYXRpb25Vbml0Q29udGV4dCB9IGZyb20gXCIuL2NvbnN0cnVjdHNcIjtcclxuaW1wb3J0IHsgRnVuY3Rpb25FbnRpdHksIE9iamVjdEVudGl0eSwgVGVtcG9yYXJ5T2JqZWN0RW50aXR5LCBQYXNzQnlWYWx1ZVBhcmFtZXRlckVudGl0eSwgTG9jYWxWYXJpYWJsZUVudGl0eSwgTG9jYWxSZWZlcmVuY2VFbnRpdHksIEF1dG9FbnRpdHksIFBhc3NCeVJlZmVyZW5jZVBhcmFtZXRlckVudGl0eSB9IGZyb20gXCIuL2VudGl0aWVzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVCbG9jaywgQ29tcGlsZWRCbG9jayB9IGZyb20gXCIuL3N0YXRlbWVudHNcIjtcclxuaW1wb3J0IHsgUG90ZW50aWFsUmV0dXJuVHlwZSwgQ2xhc3NUeXBlLCBPYmplY3RUeXBlLCBSZWZlcmVuY2VUeXBlLCBOb1JlZlR5cGUsIFZvaWRUeXBlLCBGdW5jdGlvblR5cGUgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBNZW1vcnlGcmFtZSB9IGZyb20gXCIuL3J1bnRpbWVFbnZpcm9ubWVudFwiO1xyXG5pbXBvcnQgeyBDUFBPYmplY3QgfSBmcm9tIFwiLi9vYmplY3RzXCI7XHJcbmltcG9ydCB7IFNpbXVsYXRpb24gfSBmcm9tIFwiLi9TaW11bGF0aW9uXCI7XHJcbmltcG9ydCB7IE11dGFibGUsIGFzc2VydCwgYXNNdXRhYmxlIH0gZnJvbSBcIi4uL3V0aWwvdXRpbFwiO1xyXG5pbXBvcnQgeyBUeXBlZEV4cHJlc3Npb24sIFZhbHVlQ2F0ZWdvcnkgfSBmcm9tIFwiLi9leHByZXNzaW9uc1wiO1xyXG5pbXBvcnQgeyBDb3B5SW5pdGlhbGl6ZXIsIFJ1bnRpbWVDb3B5SW5pdGlhbGl6ZXIsIENvbXBpbGVkQ29weUluaXRpYWxpemVyIH0gZnJvbSBcIi4vaW5pdGlhbGl6ZXJzXCI7XHJcbmltcG9ydCB7IGNsb25lIH0gZnJvbSBcImxvZGFzaFwiO1xyXG5pbXBvcnQgeyBDUFBFcnJvciB9IGZyb20gXCIuL2Vycm9yc1wiO1xyXG5pbXBvcnQgeyBDb21waWxlZEZ1bmN0aW9uRGVmaW5pdGlvbiB9IGZyb20gXCIuL2RlY2xhcmF0aW9uc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb25Db250ZXh0IGV4dGVuZHMgVHJhbnNsYXRpb25Vbml0Q29udGV4dCB7XHJcbiAgICByZWFkb25seSBjb250YWluaW5nRnVuY3Rpb246IEZ1bmN0aW9uRW50aXR5O1xyXG4gICAgcmVhZG9ubHkgZnVuY3Rpb25Mb2NhbHM6IEZ1bmN0aW9uTG9jYWxzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25Db250ZXh0KGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIGNvbnRhaW5pbmdGdW5jdGlvbjogRnVuY3Rpb25FbnRpdHkpIDogRnVuY3Rpb25Db250ZXh0IHtcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0LCB7Y29udGFpbmluZ0Z1bmN0aW9uOiBjb250YWluaW5nRnVuY3Rpb24sIGZ1bmN0aW9uTG9jYWxzOiBuZXcgRnVuY3Rpb25Mb2NhbHMoKX0pO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25Mb2NhbHMge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBsb2NhbE9iamVjdHM6IHJlYWRvbmx5IEF1dG9FbnRpdHlbXSA9IFtdO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGxvY2FsUmVmZXJlbmNlczogcmVhZG9ubHkgTG9jYWxSZWZlcmVuY2VFbnRpdHlbXSA9IFtdO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGxvY2FsVmFyaWFibGVzQnlFbnRpdHlJZDoge1xyXG4gICAgICAgIFtpbmRleDogbnVtYmVyXSA6IExvY2FsVmFyaWFibGVFbnRpdHlcclxuICAgIH0gPSB7fTtcclxuXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXJMb2NhbFZhcmlhYmxlKGxvY2FsOiBMb2NhbFZhcmlhYmxlRW50aXR5KSB7XHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLmxvY2FsVmFyaWFibGVzQnlFbnRpdHlJZFtsb2NhbC5lbnRpdHlJZF0pO1xyXG4gICAgICAgIHRoaXMubG9jYWxWYXJpYWJsZXNCeUVudGl0eUlkW2xvY2FsLmVudGl0eUlkXSA9IGxvY2FsO1xyXG4gICAgICAgIGlmIChsb2NhbCBpbnN0YW5jZW9mIEF1dG9FbnRpdHkpIHtcclxuICAgICAgICAgICAgYXNNdXRhYmxlKHRoaXMubG9jYWxPYmplY3RzKS5wdXNoKGxvY2FsKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXNNdXRhYmxlKHRoaXMubG9jYWxSZWZlcmVuY2VzKS5wdXNoKGxvY2FsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmVudW0gUnVudGltZUZ1bmN0aW9uSW5kaWNlcyB7XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUnVudGltZUZ1bmN0aW9uPFQgZXh0ZW5kcyBQb3RlbnRpYWxSZXR1cm5UeXBlID0gUG90ZW50aWFsUmV0dXJuVHlwZT4gZXh0ZW5kcyBSdW50aW1lQ29uc3RydWN0PENvbXBpbGVkRnVuY3Rpb25EZWZpbml0aW9uPiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGNhbGxlcj86IFJ1bnRpbWVGdW5jdGlvbkNhbGw7XHJcbiAgICAvLyBwdWJsaWMgcmVhZG9ubHkgY29udGFpbmluZ1J1bnRpbWVGdW5jdGlvbjogdGhpcztcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RhY2tGcmFtZT86IE1lbW9yeUZyYW1lO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSByZWNlaXZlcj86IENQUE9iamVjdDxDbGFzc1R5cGU+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG9iamVjdCByZXR1cm5lZCBieSB0aGUgZnVuY3Rpb24sIGVpdGhlciBhbiBvcmlnaW5hbCByZXR1cm5lZC1ieS1yZWZlcmVuY2Ugb3IgYSB0ZW1wb3JhcnlcclxuICAgICAqIG9iamVjdCBjcmVhdGVkIHRvIGhvbGQgYSByZXR1cm4tYnktdmFsdWUuIE9uY2UgdGhlIGZ1bmN0aW9uIGNhbGwgaGFzIGJlZW4gZXhlY3V0ZWQsIHdpbGwgYmVcclxuICAgICAqIGRlZmluZWQgdW5sZXNzIGl0J3MgYSB2b2lkIGZ1bmN0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmV0dXJuT2JqZWN0PzogQ1BQT2JqZWN0PE5vUmVmVHlwZTxFeGNsdWRlPFQsVm9pZFR5cGU+Pj47XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGhhc0NvbnRyb2w6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgYm9keTogUnVudGltZUJsb2NrO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IENvbXBpbGVkRnVuY3Rpb25EZWZpbml0aW9uLCBwYXJlbnQ6IFJ1bnRpbWVGdW5jdGlvbkNhbGwsIHJlY2VpdmVyPzogQ1BQT2JqZWN0PENsYXNzVHlwZT4pO1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRGdW5jdGlvbkRlZmluaXRpb24sIHNpbTogU2ltdWxhdGlvbiwgcmVjZWl2ZXI/OiBDUFBPYmplY3Q8Q2xhc3NUeXBlPik7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDb21waWxlZEZ1bmN0aW9uRGVmaW5pdGlvbiwgcGFyZW50T3JTaW06IFJ1bnRpbWVGdW5jdGlvbkNhbGwgfCBTaW11bGF0aW9uLCByZWNlaXZlcj86IENQUE9iamVjdDxDbGFzc1R5cGU+KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIFwiZnVuY3Rpb25cIiwgcGFyZW50T3JTaW0pO1xyXG4gICAgICAgIGlmIChwYXJlbnRPclNpbSBpbnN0YW5jZW9mIFJ1bnRpbWVGdW5jdGlvbkNhbGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jYWxsZXIgPSBwYXJlbnRPclNpbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZWNlaXZlciA9IHJlY2VpdmVyO1xyXG4gICAgICAgIC8vIEEgZnVuY3Rpb24gaXMgaXRzIG93biBjb250YWluaW5nIGZ1bmN0aW9uIGNvbnRleHRcclxuICAgICAgICAvLyB0aGlzLmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb24gPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYm9keSA9IHRoaXMubW9kZWwuYm9keS5jcmVhdGVSdW50aW1lU3RhdGVtZW50KHRoaXMpO1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgLy8gc2V0Q2FsbGVyIDogZnVuY3Rpb24oY2FsbGVyKSB7XHJcbiAgICAvLyAgICAgdGhpcy5pX2NhbGxlciA9IGNhbGxlcjtcclxuICAgIC8vIH0sXHJcblxyXG4gICAgcHVibGljIHB1c2hTdGFja0ZyYW1lKCkge1xyXG4gICAgICAgICg8TXV0YWJsZTx0aGlzPj50aGlzKS5zdGFja0ZyYW1lID0gdGhpcy5zaW0ubWVtb3J5LnN0YWNrLnB1c2hGcmFtZSh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHJldHVybiBvYmplY3QgZm9yIHRoaXMgZnVuY3Rpb24uIE1heSBvbmx5IGJlIGludm9rZWQgb25jZS5cclxuICAgICAqIGUuZy5cclxuICAgICAqICAtIHJldHVybi1ieS12YWx1ZTogVGhlIGNhbGxlciBzaG91bGQgc2V0IHRoZSByZXR1cm4gb2JqZWN0IHRvIGEgdGVtcG9yYXJ5IG9iamVjdCwgd2hvc2UgdmFsdWVcclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgbWF5IGJlIGluaXRpYWxpemVkIGJ5IGEgcmV0dXJuIHN0YXRlbWVudC5cclxuICAgICAqICAtIHJldHVybi1ieS1yZWZlcmVuY2U6IFdoZW4gdGhlIGZ1bmN0aW9uIGlzIGZpbmlzaGVkLCBpcyBzZXQgdG8gdGhlIG9iamVjdCByZXR1cm5lZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFJldHVybk9iamVjdDxUIGV4dGVuZHMgT2JqZWN0VHlwZSB8IFJlZmVyZW5jZVR5cGU+KHRoaXM6IFJ1bnRpbWVGdW5jdGlvbjxUPiwgb2JqOiBDUFBPYmplY3Q8Tm9SZWZUeXBlPFQ+Pikge1xyXG4gICAgICAgIC8vIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBvbmNlXHJcbiAgICAgICAgYXNzZXJ0KCF0aGlzLnJldHVybk9iamVjdCk7XHJcbiAgICAgICAgKDxNdXRhYmxlPFJ1bnRpbWVGdW5jdGlvbjxPYmplY3RUeXBlPiB8IFJ1bnRpbWVGdW5jdGlvbjxSZWZlcmVuY2VUeXBlPj4+dGhpcykucmV0dXJuT2JqZWN0ID0gb2JqO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2FpbkNvbnRyb2woKSB7XHJcbiAgICAgICAgKDxib29sZWFuPnRoaXMuaGFzQ29udHJvbCkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwiZ2FpbkNvbnRyb2xcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxvc2VDb250cm9sKCkge1xyXG4gICAgICAgICg8Ym9vbGVhbj50aGlzLmhhc0NvbnRyb2wpID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcImxvc2VDb250cm9sXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHByaXZhdGUgZW5jb3VudGVyUmV0dXJuU3RhdGVtZW50IDogZnVuY3Rpb24oKSB7XHJcbiAgICAvLyAgICAgdGhpcy5pX3JldHVyblN0YXRlbWVudEVuY291bnRlcmVkID0gdHJ1ZTtcclxuICAgIC8vIH0sXHJcblxyXG4gICAgLy8gcmV0dXJuU3RhdGVtZW50RW5jb3VudGVyZWQgOiBmdW5jdGlvbigpIHtcclxuICAgIC8vICAgICByZXR1cm4gdGhpcy5pX3JldHVyblN0YXRlbWVudEVuY291bnRlcmVkO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIFxyXG4gICAgLy8gdGFpbENhbGxSZXNldCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QsIGNhbGxlcikge1xyXG5cclxuICAgIC8vICAgICAvLyBOZWVkIHRvIHVuc2VhdCBhbGwgcmVmZXJlbmNlIHRoYXQgd2VyZSBvbiB0aGUgc3RhY2sgZnJhbWUgZm9yIHRoZSBmdW5jdGlvbi5cclxuICAgIC8vICAgICAvLyBPdGhlcndpc2UsIGxvb2t1cCB3ZWlyZG5lc3MgY2FuIG9jY3VyIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBsb29rdXAgY29kZSB3YXNuJ3RcclxuICAgIC8vICAgICAvLyBpbnRlbmRlZCB0byBiZSBhYmxlIHRvIHJlc2VhdCByZWZlcmVuY2VzIGFuZCBwYXJhbWV0ZXIgaW5pdGlhbGl6ZXJzIHdpbGwgaW5zdGVhZFxyXG4gICAgLy8gICAgIC8vIHRoaW5rIHRoZXkncmUgc3VwcG9zZWQgdG8gcGFzcyBpbnRvIHRoZSB0aGluZ3MgdGhhdCB0aGUgcmVmZXJlbmNlcyBvbiB0aGUgZXhpc3RpbmdcclxuICAgIC8vICAgICAvLyBzdGFjayBmcmFtZSB3ZXJlIHJlZmVycmluZyB0by5cclxuICAgIC8vICAgICBpbnN0LnN0YWNrRnJhbWUuc2V0VXBSZWZlcmVuY2VJbnN0YW5jZXMoKTtcclxuXHJcbiAgICAvLyAgICAgaW5zdC5yZXVzZWRGcmFtZSA9IHRydWU7XHJcbiAgICAvLyAgICAgaW5zdC5zZXRDYWxsZXIoY2FsbGVyKTtcclxuICAgIC8vICAgICBpbnN0LmluZGV4ID0gdGhpcy5pbml0SW5kZXg7XHJcbiAgICAvLyAgICAgc2ltLnBvcFVudGlsKGluc3QpO1xyXG4gICAgLy8gICAgIC8vaW5zdC5zZW5kKFwicmVzZXRcIik7IC8vIGRvbid0IG5lZWQgaSB0aGlua1xyXG4gICAgLy8gICAgIHJldHVybiBpbnN0O1xyXG4gICAgLy8gfSxcclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIHN0ZXBGb3J3YXJkSW1wbCgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHVwTmV4dEltcGwoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuYm9keS5pc0RvbmUpIHtcclxuICAgICAgICAgICAgdGhpcy5zaW0ucG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNpbS5wdXNoKHRoaXMuYm9keSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyB1cE5leHQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBzdGVwRm9yd2FyZCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4gICAgLy8gICAgIGlmIChpbnN0LmluZGV4ID09PSBcImFmdGVyRGVzdHJ1Y3RvcnNcIil7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuZG9uZShzaW0sIGluc3QpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBkb25lIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcblxyXG4gICAgLy8gICAgIC8vIElmIG5vbi12b2lkIHJldHVybiB0eXBlLCBjaGVjayB0aGF0IHJldHVybiBvYmplY3Qgd2FzIGluaXRpYWxpemVkLlxyXG4gICAgLy8gICAgIC8vIE5vbi12b2lkIGZ1bmN0aW9ucyBzaG91bGQgYmUgZ3VhcmFudGVlZCB0byBoYXZlIGEgcmV0dXJuT2JqZWN0IChldmVuIGlmIGl0IG1pZ2h0IGJlIGEgcmVmZXJlbmNlKVxyXG4gICAgLy8gICAgIGlmICghaXNBKHRoaXMudHlwZS5yZXR1cm5UeXBlLCBUeXBlcy5Wb2lkKSAmJiAhaW5zdC5yZXR1cm5TdGF0ZW1lbnRFbmNvdW50ZXJlZCgpKXtcclxuICAgIC8vICAgICAgICAgdGhpcy5mbG93T2ZmTm9uVm9pZChzaW0sIGluc3QpO1xyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgaWYgKGluc3QucmVjZWl2ZXIpe1xyXG4gICAgLy8gICAgICAgICBpbnN0LnJlY2VpdmVyLmNhbGxFbmRlZCgpO1xyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgc2ltLm1lbW9yeS5zdGFjay5wb3BGcmFtZShpbnN0KTtcclxuICAgIC8vICAgICBzaW0ucG9wKGluc3QpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIGZsb3dPZmZOb25Wb2lkIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbiAgICAvLyAgICAgaWYgKHRoaXMuaXNNYWluKXtcclxuICAgIC8vICAgICAgICAgaW5zdC5pX3JldHVybk9iamVjdC5zZXRWYWx1ZShWYWx1ZS5pbnN0YW5jZSgwLCBUeXBlcy5JbnQuaW5zdGFuY2UoKSkpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBlbHNle1xyXG4gICAgLy8gICAgICAgICBzaW0uaW1wbGVtZW50YXRpb25EZWZpbmVkQmVoYXZpb3IoXCJZaWtlcyEgVGhpcyBpcyBhIG5vbi12b2lkIGZ1bmN0aW9uIChpLmUuIGl0J3Mgc3VwcG9zZWQgdG8gcmV0dXJuIHNvbWV0aGluZyksIGJ1dCBpdCBlbmRlZCB3aXRob3V0IGhpdHRpbmcgYSByZXR1cm4gc3RhdGVtZW50XCIpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbn1cclxuXHJcbi8vIFRPRE86IGlzIHRoaXMgbmVlZGVkPyBJIHRoaW5rIFJ1bnRpbWVGdW5jdGlvbiBtYXkgYmUgYWJsZSB0byBoYW5kbGUgYWxsIG9mIGl0LlxyXG4vLyBleHBvcnQgY2xhc3MgUnVudGltZU1lbWJlckZ1bmN0aW9uIGV4dGVuZHMgUnVudGltZUZ1bmN0aW9uIHtcclxuXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgcmVjZWl2ZXI6IENQUE9iamVjdDxDbGFzc1R5cGU+O1xyXG5cclxuLy8gICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IEZ1bmN0aW9uRGVmaW5pdGlvbiwgcGFyZW50OiBSdW50aW1lRnVuY3Rpb25DYWxsLCByZWNlaXZlcjogQ1BQT2JqZWN0PENsYXNzVHlwZT4pIHtcclxuLy8gICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuLy8gICAgICAgICB0aGlzLnJlY2VpdmVyID0gcmVjZWl2ZXI7XHJcbi8vICAgICB9XHJcblxyXG4vLyB9XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uQ2FsbCBleHRlbmRzIFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHtcclxuICAgIFxyXG4gICAgcHVibGljIHJlYWRvbmx5IGZ1bmM6IEZ1bmN0aW9uRW50aXR5O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGFyZ3M6IHJlYWRvbmx5IFR5cGVkRXhwcmVzc2lvbltdO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHJlY2VpdmVyPzogT2JqZWN0RW50aXR5PENsYXNzVHlwZT47XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGFyZ0luaXRpYWxpemVyczogcmVhZG9ubHkgQ29weUluaXRpYWxpemVyW107XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSByZXR1cm5CeVZhbHVlVGFyZ2V0PzogVGVtcG9yYXJ5T2JqZWN0RW50aXR5O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIEZ1bmN0aW9uRW50aXR5IG11c3QgYmUgcHJvdmlkZWQgdG8gc3BlY2lmeSB3aGljaCBmdW5jdGlvbiBpcyBiZWluZyBjYWxsZWQuXHJcbiAgICAgKlxyXG4gICAgICogQSByZWNlaXZlciBlbnRpdHkgbWF5IGJlIHByb3ZpZGVkIGhlcmUsIGFuZCBpZiBpdCBpcywgdGhlIGZ1bmN0aW9uIGNhbGwgZ3VhcmFudGVlcyBpdCB3aWxsXHJcbiAgICAgKiBiZSBsb29rZWQgdXAgaW4gYSBydW50aW1lIGNvbnRleHQgQkVGT1JFIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBcImNhbGxlZFwiIChpLmUuIGJlZm9yZSBhIG5ld1xyXG4gICAgICogc3RhY2sgZnJhbWUgaGFzIGJlZW4gcHVzaGVkIGFuZCBjb250cm9sIGhhcyBiZWVuIGdpdmVuIG92ZXIgdG8gdGhlIGNhbGxlZCBmdW5jdGlvbikuIFRoaXMgaW5cclxuICAgICAqIHBhcnRpY3VsYXIgaXMgaW1wb3J0YW50IGZvciBlLmcuIGEgUGFyYW1ldGVyRW50aXR5IHVzZWQgYXMgdGhlIHJlY2VpdmVyIG9mIGEgY29uc3RydWN0b3IgY2FsbFxyXG4gICAgICogd2hlbiBhIGNsYXNzLXR5cGUgcGFyYW1ldGVyIGlzIHBhc3NlZCBieSB2YWx1ZSB0byBzb21lIGZ1bmN0aW9uLiBJZiBpdCB3ZXJlIGxvb2tlZCB1cCBpbnN0ZWFkXHJcbiAgICAgKiBhZnRlciB0aGUgY2FsbCwgaXQgd291bGQgdHJ5IHRvIGZpbmQgYSBwYXJhbWV0ZXIgb2YgdGhlIGNvbnN0cnVjdG9yIHJhdGhlciB0aGFuIG9mIHRoZSBmdW5jdGlvbixcclxuICAgICAqIHdoaWNoIGlzbid0IHJpZ2h0LlxyXG4gICAgICpcclxuICAgICAqIElmIGEgcmVjZWl2ZXIgZW50aXR5IGlzIG5vdCBwcm92aWRlZCBoZXJlLCBhIHJlY2VpdmVyIG9iamVjdCBtdXN0IGJlIHNwZWNpZmllZCBhdCBydW50aW1lIHdoZW5cclxuICAgICAqIGEgcnVudGltZSBjb25zdHJ1Y3QgZm9yIHRoaXMgZnVuY3Rpb24gY2FsbCBpcyBjcmVhdGVkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjb250ZXh0IFxyXG4gICAgICogQHBhcmFtIGZ1bmMgU3BlY2lmaWVzIHdoaWNoIGZ1bmN0aW9uIGlzIGJlaW5nIGNhbGxlZC5cclxuICAgICAqIEBwYXJhbSBhcmdzIEFyZ3VtZW50cyB0byB0aGUgZnVuY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0gcmVjZWl2ZXIgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCBmdW5jOiBGdW5jdGlvbkVudGl0eSwgYXJnczogcmVhZG9ubHkgVHlwZWRFeHByZXNzaW9uW10sIHJlY2VpdmVyPzogT2JqZWN0RW50aXR5PENsYXNzVHlwZT4pIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy5mdW5jID0gZnVuYztcclxuICAgICAgICB0aGlzLmFyZ3MgPSBjbG9uZShhcmdzKTtcclxuICAgICAgICB0aGlzLnJlY2VpdmVyID0gcmVjZWl2ZXI7XHJcblxyXG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGUgYXJncyBhcmUgTk9UIGF0dGFjaGVkIGFzIGNoaWxkcmVuIGhlcmUuIEluc3RlYWQsIHRoZXkgYXJlIGF0dGFjaGVkIHRvIHRoZSBpbml0aWFsaXplcnMuXHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBpbml0aWFsaXplcnMgZm9yIGVhY2ggYXJndW1lbnQvcGFyYW1ldGVyIHBhaXJcclxuICAgICAgICB0aGlzLmFyZ0luaXRpYWxpemVycyA9IGFyZ3MubWFwKChhcmcsIGkpID0+IHtcclxuICAgICAgICAgICAgbGV0IHBhcmFtVHlwZSA9IHRoaXMuZnVuYy50eXBlLnBhcmFtVHlwZXNbaV07XHJcbiAgICAgICAgICAgIGlmIChwYXJhbVR5cGUuaXNSZWZlcmVuY2VUeXBlKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBDb3B5SW5pdGlhbGl6ZXIuY3JlYXRlKGNvbnRleHQsIG5ldyBQYXNzQnlSZWZlcmVuY2VQYXJhbWV0ZXJFbnRpdHkodGhpcy5mdW5jLCBwYXJhbVR5cGUucmVmVG8sIGkpLCBbYXJnXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29weUluaXRpYWxpemVyLmNyZWF0ZShjb250ZXh0LCBuZXcgUGFzc0J5VmFsdWVQYXJhbWV0ZXJFbnRpdHkodGhpcy5mdW5jLCBwYXJhbVR5cGUsIGkpLCBbYXJnXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gVE9ET1xyXG4gICAgICAgIC8vIHRoaXMuaXNSZWN1cnNpdmUgPSB0aGlzLmZ1bmMuZGVmaW5pdGlvbiA9PT0gdGhpcy5jb250ZXh0LmNvbnRhaW5pbmdGdW5jdGlvbjtcclxuXHJcbiAgICAgICAgLy8gTm8gcmV0dXJucyBmb3Igdm9pZCBmdW5jdGlvbnMsIG9mIGNvdXJzZS5cclxuICAgICAgICAvLyBJZiByZXR1cm4gYnkgcmVmZXJlbmNlLCB0aGUgcmV0dXJuIG9iamVjdCBhbHJlYWR5IGV4aXN0cyBhbmQgbm8gbmVlZCB0byBjcmVhdGUgYSB0ZW1wb3JhcnkuXHJcbiAgICAgICAgLy8gRWxzZSwgZm9yIGEgcmV0dXJuIGJ5IHZhbHVlLCB3ZSBkbyBuZWVkIHRvIGNyZWF0ZSBhIHRlbXBvcmFyeSBvYmplY3QuXHJcbiAgICAgICAgbGV0IHJldHVyblR5cGUgPSB0aGlzLmZ1bmMudHlwZS5yZXR1cm5UeXBlO1xyXG4gICAgICAgIGlmICggIShyZXR1cm5UeXBlIGluc3RhbmNlb2YgVm9pZFR5cGUpICYmICEocmV0dXJuVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZVR5cGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmV0dXJuQnlWYWx1ZVRhcmdldCA9IHRoaXMuY3JlYXRlVGVtcG9yYXJ5T2JqZWN0KHJldHVyblR5cGUsICh0aGlzLmZ1bmMubmFtZSB8fCBcInVua25vd25cIikgKyBcIigpIFtyZXR1cm5dXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVE9ETzogbmVlZCB0byBjaGVjayB0aGF0IGl0J3Mgbm90IGFuIGF1eGlsaWFyeSBmdW5jdGlvbiBjYWxsIGJlZm9yZSBhZGRpbmcgdGhlc2U/XHJcbiAgICAgICAgLy8gdGhpcy5jb250ZXh0LmNvbnRhaW5pbmdGdW5jdGlvbi5hZGRDYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC50cmFuc2xhdGlvblVuaXQucmVnaXN0ZXJGdW5jdGlvbkNhbGwodGhpcyk7IC8vIFRPRE86IGlzIHRoaXMgbmVlZGVkP1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBjaGVja0xpbmtpbmdQcm9ibGVtcygpIHtcclxuICAgIC8vICAgICBpZiAoIXRoaXMuZnVuYy5pc0xpbmtlZCgpKSB7XHJcbiAgICAvLyAgICAgICAgIGlmICh0aGlzLmZ1bmMuaXNMaWJyYXJ5VW5zdXBwb3J0ZWQoKSkge1xyXG4gICAgLy8gICAgICAgICAgICAgbGV0IG5vdGUgPSBDUFBFcnJvci5saW5rLmxpYnJhcnlfdW5zdXBwb3J0ZWQodGhpcywgdGhpcy5mdW5jKTtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShub3RlKTtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybiBub3RlO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICAgbGV0IG5vdGUgPSBDUFBFcnJvci5saW5rLmRlZl9ub3RfZm91bmQodGhpcywgdGhpcy5mdW5jKTtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShub3RlKTtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybiBub3RlO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIHJldHVybiBudWxsO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHRhaWxSZWN1cnNpb25DaGVjayA6IGZ1bmN0aW9uKCl7XHJcbiAgICAvLyAgICAgaWYgKHRoaXMuaXNUYWlsICE9PSB1bmRlZmluZWQpIHtcclxuICAgIC8vICAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgdmFyIGNoaWxkID0gdGhpcztcclxuICAgIC8vICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XHJcbiAgICAvLyAgICAgdmFyIGlzVGFpbCA9IHRydWU7XHJcbiAgICAvLyAgICAgdmFyIHJlYXNvbiA9IG51bGw7XHJcbiAgICAvLyAgICAgdmFyIG90aGVycyA9IFtdO1xyXG4gICAgLy8gICAgIHZhciBmaXJzdCA9IHRydWU7XHJcbiAgICAvLyAgICAgd2hpbGUoIWlzQShjaGlsZCwgRnVuY3Rpb25EZWZpbml0aW9uKSAmJiAhaXNBKGNoaWxkLCBTdGF0ZW1lbnRzLlJldHVybikpIHtcclxuICAgIC8vICAgICAgICAgdmFyIHJlc3VsdCA9IHBhcmVudC5pc1RhaWxDaGlsZChjaGlsZCk7XHJcbiAgICAvLyAgICAgICAgIGlmICghcmVzdWx0LmlzVGFpbCkge1xyXG4gICAgLy8gICAgICAgICAgICAgaXNUYWlsID0gZmFsc2U7XHJcbiAgICAvLyAgICAgICAgICAgICByZWFzb24gPSByZXN1bHQucmVhc29uO1xyXG4gICAgLy8gICAgICAgICAgICAgb3RoZXJzID0gcmVzdWx0Lm90aGVycyB8fCBbXTtcclxuICAgIC8vICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgLy8gICAgICAgICB9XHJcblxyXG4gICAgLy8gICAgICAgICAvL2lmICghZmlyc3QgJiYgY2hpbGQudGVtcERlYWxsb2NhdG9yKXtcclxuICAgIC8vICAgICAgICAgLy8gICAgaXNUYWlsID0gZmFsc2U7XHJcbiAgICAvLyAgICAgICAgIC8vICAgIHJlYXNvbiA9IFwiVGhlIGZ1bGwgZXhwcmVzc2lvbiBjb250YWluaW5nIHRoaXMgcmVjdXJzaXZlIGNhbGwgaGFzIHRlbXBvcmFyeSBvYmplY3RzIHRoYXQgbmVlZCB0byBiZSBkZWFsbG9jYXRlZCBhZnRlciB0aGUgY2FsbCByZXR1cm5zLlwiO1xyXG4gICAgLy8gICAgICAgICAvLyAgICBvdGhlcnMgPSBbXTtcclxuICAgIC8vICAgICAgICAgLy8gICAgYnJlYWs7XHJcbiAgICAvLyAgICAgICAgIC8vfVxyXG4gICAgLy8gICAgICAgICAvL2ZpcnN0ID0gZmFsc2U7XHJcblxyXG5cclxuICAgIC8vICAgICAgICAgcmVhc29uID0gcmVhc29uIHx8IHJlc3VsdC5yZWFzb247XHJcblxyXG4gICAgLy8gICAgICAgICBjaGlsZCA9IHBhcmVudDtcclxuICAgIC8vICAgICAgICAgcGFyZW50ID0gY2hpbGQucGFyZW50O1xyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgdGhpcy5pc1RhaWwgPSBpc1RhaWw7XHJcbiAgICAvLyAgICAgdGhpcy5pc1RhaWxSZWFzb24gPSByZWFzb247XHJcbiAgICAvLyAgICAgdGhpcy5pc1RhaWxPdGhlcnMgPSBvdGhlcnM7XHJcbiAgICAvLyAgICAgLy90aGlzLmNvbnRhaW5pbmdGdW5jdGlvbigpLmlzVGFpbFJlY3Vyc2l2ZSA9IHRoaXMuY29udGFpbmluZ0Z1bmN0aW9uKCkuaXNUYWlsUmVjdXJzaXZlICYmIGlzVGFpbDtcclxuXHJcbiAgICAvLyAgICAgdGhpcy5jYW5Vc2VUQ08gPSB0aGlzLmlzUmVjdXJzaXZlICYmIHRoaXMuaXNUYWlsO1xyXG4gICAgLy8gfSxcclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUZ1bmN0aW9uQ2FsbDxUIGV4dGVuZHMgUG90ZW50aWFsUmV0dXJuVHlwZSA9IFBvdGVudGlhbFJldHVyblR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gVmFsdWVDYXRlZ29yeT4odGhpczogQ29tcGlsZWRGdW5jdGlvbkNhbGw8VD4sIHBhcmVudDogUnVudGltZVBvdGVudGlhbEZ1bGxFeHByZXNzaW9uKSA6IFJ1bnRpbWVGdW5jdGlvbkNhbGw8VD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUnVudGltZUZ1bmN0aW9uQ2FsbDxUPih0aGlzLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGlzVGFpbENoaWxkIDogZnVuY3Rpb24oY2hpbGQpe1xyXG4gICAgLy8gICAgIHJldHVybiB7aXNUYWlsOiBmYWxzZSxcclxuICAgIC8vICAgICAgICAgcmVhc29uOiBcIkEgcXVpY2sgcnVsZSBpcyB0aGF0IGEgZnVuY3Rpb24gY2FsbCBjYW4gbmV2ZXIgYmUgdGFpbCByZWN1cnNpdmUgaWYgaXQgaXMgYW4gYXJndW1lbnQgdG8gYW5vdGhlciBmdW5jdGlvbiBjYWxsLiBUaGUgb3V0ZXIgZnVuY3Rpb24gY2FsbCB3aWxsIGFsd2F5cyBoYXBwZW4gYWZ0ZXJ3YXJkIVwiLFxyXG4gICAgLy8gICAgICAgICBvdGhlcnM6IFt0aGlzXVxyXG4gICAgLy8gICAgIH07XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIC8vIFRPRE86IHdoYXQgaXMgdGhpcz8gc2hvdWxkIGl0IGJlIGRlc2NyaWJlRXZhbFJlc3VsdD8gb3IgZXhwbGFpbj8gcHJvYmFibHkgbm90IGp1c3QgZGVzY3JpYmUgc2luY2UgdGhhdCBpcyBmb3Igb2JqZWN0c1xyXG4gICAgLy8gZGVzY3JpYmUgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuICAgIC8vICAgICB2YXIgZGVzYyA9IHt9O1xyXG4gICAgLy8gICAgIGRlc2MubWVzc2FnZSA9IFwiYSBjYWxsIHRvIFwiICsgdGhpcy5mdW5jLmRlc2NyaWJlKHNpbSkubWVzc2FnZTtcclxuICAgIC8vICAgICByZXR1cm4gZGVzYztcclxuICAgIC8vIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRGdW5jdGlvbkNhbGw8VCBleHRlbmRzIFBvdGVudGlhbFJldHVyblR5cGUgPSBQb3RlbnRpYWxSZXR1cm5UeXBlPiBleHRlbmRzIEZ1bmN0aW9uQ2FsbCwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG4gICAgXHJcbiAgICByZWFkb25seSBhcmdzOiByZWFkb25seSBUeXBlZEV4cHJlc3Npb25bXTtcclxuICAgIHJlYWRvbmx5IGFyZ0luaXRpYWxpemVyczogcmVhZG9ubHkgQ29tcGlsZWRDb3B5SW5pdGlhbGl6ZXJbXTtcclxuICAgIHJlYWRvbmx5IHJldHVybkJ5VmFsdWVUYXJnZXQ/OiBUIGV4dGVuZHMgT2JqZWN0VHlwZSA/IFRlbXBvcmFyeU9iamVjdEVudGl0eTxUPiA6IHVuZGVmaW5lZDtcclxufVxyXG5cclxuY29uc3QgSU5ERVhfRlVOQ1RJT05fQ0FMTF9QVVNIID0gMDtcclxuY29uc3QgSU5ERVhfRlVOQ1RJT05fQ0FMTF9BUkdVTUVOVFMgPSAxO1xyXG5jb25zdCBJTkRFWF9GVU5DVElPTl9DQUxMX0NBTEwgPSAyO1xyXG5jb25zdCBJTkRFWF9GVU5DVElPTl9DQUxMX1JFVFVSTiA9IDI7XHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lRnVuY3Rpb25DYWxsPFQgZXh0ZW5kcyBQb3RlbnRpYWxSZXR1cm5UeXBlID0gUG90ZW50aWFsUmV0dXJuVHlwZT4gZXh0ZW5kcyBSdW50aW1lUG90ZW50aWFsRnVsbEV4cHJlc3Npb248Q29tcGlsZWRGdW5jdGlvbkNhbGw8VD4+IHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbW9kZWwhOiBDb21waWxlZEZ1bmN0aW9uQ2FsbDxUPjsgLy8gbmFycm93cyB0eXBlIG9mIG1lbWJlciBpbiBiYXNlIGNsYXNzXHJcblxyXG4gICAgLy8gcHVibGljIHJlYWRvbmx5IGZ1bmN0aW9uRGVmIDogRnVuY3Rpb25EZWZpbml0aW9uO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGNhbGxlZEZ1bmN0aW9uIDogUnVudGltZUZ1bmN0aW9uPFQ+O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGFyZ0luaXRpYWxpemVyczogcmVhZG9ubHkgUnVudGltZUNvcHlJbml0aWFsaXplcltdO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSByZWNlaXZlcj86IENQUE9iamVjdDxDbGFzc1R5cGU+XHJcblxyXG4gICAgLy8gcHVibGljIHJlYWRvbmx5IGhhc0JlZW5DYWxsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGluZGV4IDogdHlwZW9mIElOREVYX0ZVTkNUSU9OX0NBTExfUFVTSCB8IHR5cGVvZiBJTkRFWF9GVU5DVElPTl9DQUxMX0FSR1VNRU5UUyB8IHR5cGVvZiBJTkRFWF9GVU5DVElPTl9DQUxMX0NBTEwgfCB0eXBlb2YgSU5ERVhfRlVOQ1RJT05fQ0FMTF9SRVRVUk4gPSBJTkRFWF9GVU5DVElPTl9DQUxMX1BVU0g7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRGdW5jdGlvbkNhbGw8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsLCBcImNhbGxcIiwgcGFyZW50KTtcclxuXHJcbiAgICAgICAgLy8gVE9ETyBjYW4gaSBnZXQgcmlkIG9mIHRoZSBub24tbnVsbCBhc3NlcnRpb24gb3IgY2FzdCBoZXJlP1xyXG4gICAgICAgIC8vIEJhc2ljYWxseSwgdGhlIGFzc3VtcHRpb24gZGVwZW5kcyBvbiBhIFJ1bnRpbWVGdW5jdGlvbkNhbGwgb25seSBiZWluZyBjcmVhdGVkXHJcbiAgICAgICAgLy8gaWYgdGhlIHByb2dyYW0gd2FzIHN1Y2Nlc3NmdWxseSBsaW5rZWQgKHdoaWNoIGFsc28gaW1wbGllcyB0aGUgRnVuY3Rpb25EZWZpbml0aW9uIHdhcyBjb21waWxlZClcclxuICAgICAgICAvLyBJdCBhbHNvIGFzc3VtZXMgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24gaGFzIHRoZSBjb3JyZWN0IHJldHVybiB0eXBlLlxyXG4gICAgICAgIGxldCBmdW5jdGlvbkRlZiA9IDxDb21waWxlZEZ1bmN0aW9uRGVmaW5pdGlvbjxUPj50aGlzLm1vZGVsLmZ1bmMuZGVmaW5pdGlvbiE7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ3JlYXRlIGFyZ3VtZW50IGluaXRpYWxpemVyIGluc3RhbmNlc1xyXG4gICAgICAgIHRoaXMuYXJnSW5pdGlhbGl6ZXJzID0gdGhpcy5tb2RlbC5hcmdJbml0aWFsaXplcnMubWFwKChhSW5pdCkgPT4gYUluaXQuY3JlYXRlUnVudGltZUluaXRpYWxpemVyKHRoaXMpKTtcclxuXHJcblxyXG5cclxuICAgICAgICAvLyBUT0RPOiBUQ08/IHdvdWxkIHJldXNlIHRoaXMuY29udGFpbmluZ1J1bnRpbWVGdW5jdGlvbiBpbnN0ZWFkIG9mIGNyZWF0aW5nIG5ld1xyXG4gICAgICAgIFxyXG4gICAgICAgICAvLyBmb3Igbm9uLW1lbWJlciBmdW5jdGlvbnMsIHJlY2VpdmVyIHVuZGVmaW5lZFxyXG4gICAgICAgIHRoaXMucmVjZWl2ZXIgPSB0aGlzLm1vZGVsLnJlY2VpdmVyICYmIHRoaXMubW9kZWwucmVjZWl2ZXIucnVudGltZUxvb2t1cCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNhbGxlZEZ1bmN0aW9uID0gZnVuY3Rpb25EZWYuY3JlYXRlUnVudGltZUZ1bmN0aW9uKHRoaXMsIHRoaXMucmVjZWl2ZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IFRDTz8gaWYgdXNpbmcgVENPLCBkb24ndCBjcmVhdGUgYSBuZXcgcmV0dXJuIG9iamVjdCwganVzdCByZXVzZSB0aGUgb2xkIG9uZVxyXG4gICAgICAgIGlmICh0aGlzLm1vZGVsLnJldHVybkJ5VmFsdWVUYXJnZXQpIHtcclxuICAgICAgICAgICAgLy8gSWYgcmV0dXJuLWJ5LXZhbHVlLCBzZXQgcmV0dXJuIG9iamVjdCB0byB0ZW1wb3JhcnlcclxuICAgICAgICAgICAgbGV0IGNmID0gPFJ1bnRpbWVGdW5jdGlvbjxPYmplY3RUeXBlPj50aGlzLmNhbGxlZEZ1bmN0aW9uOyAvLyBUT0RPOiBtYXkgYmUgYWJsZSB0byBnZXQgcmlkIG9mIHRoaXMgY2FzdCBpZiBDb21waWxlZEZ1bmN0aW9uRGVmaW5pdGlvbiBwcm92aWRlZCBtb3JlIGluZm8gYWJvdXQgcmV0dXJuIHR5cGVcclxuICAgICAgICAgICAgY2Yuc2V0UmV0dXJuT2JqZWN0KHRoaXMubW9kZWwucmV0dXJuQnlWYWx1ZVRhcmdldC5vYmplY3RJbnN0YW5jZSh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5kZXggPSBJTkRFWF9GVU5DVElPTl9DQUxMX0NBTEw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHVwTmV4dEltcGwoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPT09IElOREVYX0ZVTkNUSU9OX0NBTExfQVJHVU1FTlRTKSB7XHJcbiAgICAgICAgICAgIC8vIFB1c2ggYWxsIGFyZ3VtZW50IGluaXRpYWxpemVycy4gUHVzaCBpbiByZXZlcnNlIHNvIHRoZXkgcnVuIGxlZnQgdG8gcmlnaHRcclxuICAgICAgICAgICAgLy8gKGFsdGhvdWdoIHRoaXMgaXMgbm90IHN0cmljdGx5IG5lY2Vzc2FyeSBnaXZlbiB0aGV5IGFyZSBpbmRldGVybWluYXRlbHkgc2VxdWVuY2VkKVxyXG4gICAgICAgICAgICBmb3IodmFyIGkgPSB0aGlzLmFyZ0luaXRpYWxpemVycy5sZW5ndGgtMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2ltLnB1c2godGhpcy5hcmdJbml0aWFsaXplcnNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaW5kZXggPT09IElOREVYX0ZVTkNUSU9OX0NBTExfUkVUVVJOKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGVkRnVuY3Rpb24ubG9zZUNvbnRyb2woKTtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluaW5nUnVudGltZUZ1bmN0aW9uLmdhaW5Db250cm9sKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9uZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnNpbS5wb3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBzdGVwRm9yd2FyZEltcGwoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPT09IElOREVYX0ZVTkNUSU9OX0NBTExfUFVTSCkge1xyXG5cclxuICAgICAgICAgICAgLy8gVE9ETzogVENPPyBqdXN0IGRvIGEgdGFpbENhbGxSZXNldCwgc2VuZCBcInRhaWxDYWxsZWRcIiBtZXNzYWdlXHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhbGxlZEZ1bmN0aW9uLnB1c2hTdGFja0ZyYW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBJTkRFWF9GVU5DVElPTl9DQUxMX0FSR1VNRU5UUztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5pbmRleCA9PT0gSU5ERVhfRlVOQ1RJT05fQ0FMTF9DQUxMKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb24ubG9zZUNvbnRyb2woKTtcclxuICAgICAgICAgICAgdGhpcy5zaW0ucHVzaCh0aGlzLmNhbGxlZEZ1bmN0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5jYWxsZWRGdW5jdGlvbi5nYWluQ29udHJvbCgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlY2VpdmVyICYmIHRoaXMucmVjZWl2ZXIuY2FsbFJlY2VpdmVkKCk7XHJcblxyXG4gICAgICAgICAgICAvLyAoPE11dGFibGU8dGhpcz4+dGhpcykuaGFzQmVlbkNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwiY2FsbGVkXCIsIHRoaXMuY2FsbGVkRnVuY3Rpb24pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5pbmRleCA9IElOREVYX0ZVTkNUSU9OX0NBTExfUkVUVVJOO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBhc3NlcnQsIGFzc2VydEZhbHNlLCBNdXRhYmxlIH0gZnJvbSBcIi4uL3V0aWwvdXRpbFwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4uL3V0aWwvb2JzZXJ2ZVwiO1xyXG5pbXBvcnQgeyBDUFBPYmplY3QsIEF1dG9PYmplY3QsIFN0cmluZ0xpdGVyYWxPYmplY3QsIFN0YXRpY09iamVjdCwgVGVtcG9yYXJ5T2JqZWN0LCBEeW5hbWljT2JqZWN0LCBUaGlzT2JqZWN0LCBJbnZhbGlkT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0c1wiO1xyXG5pbXBvcnQgeyBCb29sLCBDaGFyLCBPYmplY3RQb2ludGVyLCBBcnJheVBvaW50ZXIsIHNpbWlsYXJUeXBlLCBzdWJUeXBlLCBQb2ludGVyVHlwZSwgT2JqZWN0VHlwZSwgc2FtZVR5cGUsIEF0b21pY1R5cGUsIEludGVncmFsVHlwZSwgSW50IH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IGxhc3QgZnJvbSBcImxvZGFzaC9sYXN0XCI7XHJcbmltcG9ydCB7IFN0YXRpY0VudGl0eSwgQXV0b0VudGl0eSwgTG9jYWxSZWZlcmVuY2VFbnRpdHksIFN0cmluZ0xpdGVyYWxFbnRpdHksIFRlbXBvcmFyeU9iamVjdEVudGl0eSB9IGZyb20gXCIuL2VudGl0aWVzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVDb25zdHJ1Y3QgfSBmcm9tIFwiLi9jb25zdHJ1Y3RzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVGdW5jdGlvbiB9IGZyb20gXCIuL2Z1bmN0aW9uc1wiO1xyXG5pbXBvcnQgeyBDb21waWxlZEdsb2JhbE9iamVjdERlZmluaXRpb24sIEdsb2JhbE9iamVjdERlZmluaXRpb24gfSBmcm9tIFwiLi9kZWNsYXJhdGlvbnNcIjtcclxuXHJcbmV4cG9ydCB0eXBlIGJ5dGUgPSBudW1iZXI7IC8vIEhBQ0sgLSBjYW4gYmUgcmVzb2x2ZWQgaWYgSSBtYWtlIHRoZSBtZW1vcnkgbW9kZWwgcmVhbGlzdGljIGFuZCBub3QgaGFja3lcclxuZXhwb3J0IHR5cGUgUmF3VmFsdWVUeXBlID0gbnVtYmVyOyAvLyBIQUNLIC0gY2FuIGJlIHJlc29sdmVkIGlmIEkgbWFrZSB0aGUgcmF3IHZhbHVlIHR5cGUgdXNlZCBkZXBlbmQgb24gdGhlIFR5cGUgcGFyYW1ldGVyXHJcblxyXG4vLyBleHBvcnQgdHlwZSBWYWx1ZVR5cGU8VCBleHRlbmRzIEF0b21pY1R5cGU+ID0gVCBleHRlbmRzIEF0b21pY1R5cGUgPyBWYWx1ZTxUPiA6IG5ldmVyO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZhbHVlPFQgZXh0ZW5kcyBBdG9taWNUeXBlID0gQXRvbWljVHlwZT4ge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX25hbWUgPSBcIlZhbHVlXCI7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IFQ7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9pc1ZhbGlkOiBib29sZWFuO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSByYXdWYWx1ZTogUmF3VmFsdWVUeXBlO1xyXG5cclxuXHJcbiAgICAvLyBUT0RPOiB0czogY2hhbmdlIGFueSB0eXBlIGZvciB2YWx1ZSB0byBtYXRjaCB0eXBlIGV4cGVjdGVkIGZvciBDUFAgdHlwZSBvZiB2YWx1ZVxyXG4gICAgY29uc3RydWN0b3IocmF3VmFsdWU6IFJhd1ZhbHVlVHlwZSwgdHlwZTogVCwgaXNWYWxpZDogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcy52YWx1ZSBpbiBmYXZvciBvZiB1c2luZyByYXdWYWx1ZSgpIGZ1bmN0aW9uXHJcbiAgICAgICAgdGhpcy5yYXdWYWx1ZSA9IHJhd1ZhbHVlO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5faXNWYWxpZCA9IGlzVmFsaWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBnZXQgaXNWYWxpZCgpIHtcclxuICAgICAgICAvLyBOb3RlOiB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgZ2V0dGVyIHNpbmNlIGl0IGlzIG5lY2Vzc2FyeSB0byBjYWxsIGlzVmFsdWVWYWxpZCBvbiB0aGUgdHlwZSBlYWNoIHRpbWUuXHJcbiAgICAgICAgLy8gICAgICAgZS5nLiBBIHR5cGUgd2l0aCBSVFRJIGxpa2UgYW4gb2JqZWN0IHBvaW50ZXIgbWF5IGJlY29tZSBpbnZhbGlkIGlmIHRoZSBvYmplY3QgZGllcy5cclxuICAgICAgICByZXR1cm4gdGhpcy5faXNWYWxpZCAmJiB0aGlzLnR5cGUuaXNWYWx1ZVZhbGlkKHRoaXMucmF3VmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbG9uZSh2YWx1ZVRvQ2xvbmU6IFJhd1ZhbHVlVHlwZSA9IHRoaXMucmF3VmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlPFQ+KHZhbHVlVG9DbG9uZSwgdGhpcy50eXBlLCB0aGlzLmlzVmFsaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbnZhbGlkYXRlZCgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlPFQ+KHRoaXMucmF3VmFsdWUsIHRoaXMudHlwZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlcXVhbHMob3RoZXJWYWx1ZTogVmFsdWU8VD4pIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlPEJvb2w+KFxyXG4gICAgICAgICAgICB0aGlzLnJhd1ZhbHVlID09PSBvdGhlclZhbHVlLnJhd1ZhbHVlID8gMSA6IDAsXHJcbiAgICAgICAgICAgIG5ldyBCb29sKCksXHJcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCAmJiBvdGhlclZhbHVlLmlzVmFsaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByYXdFcXVhbHMob3RoZXJSYXdWYWx1ZTogUmF3VmFsdWVUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3VmFsdWUgPT09IG90aGVyUmF3VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNvbWJpbmUob3RoZXJWYWx1ZTogVmFsdWU8VD4sIGNvbWJpbmVyOiAoYTpSYXdWYWx1ZVR5cGUsIGI6UmF3VmFsdWVUeXBlKSA9PiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICBhc3NlcnQoc2FtZVR5cGUodGhpcy50eXBlLCBvdGhlclZhbHVlLnR5cGUpKTtcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlPFQ+KFxyXG4gICAgICAgICAgICBjb21iaW5lcih0aGlzLnJhd1ZhbHVlLCBvdGhlclZhbHVlLnJhd1ZhbHVlKSxcclxuICAgICAgICAgICAgdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB0aGlzLmlzVmFsaWQgJiYgb3RoZXJWYWx1ZS5pc1ZhbGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcG9pbnRlck9mZnNldDxUIGV4dGVuZHMgUG9pbnRlclR5cGU+KHRoaXM6IFZhbHVlPFQ+LCBvZmZzZXRWYWx1ZTogVmFsdWU8SW50ZWdyYWxUeXBlPiwgc3VidHJhY3Q6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmFsdWU8VD4oXHJcbiAgICAgICAgICAgIChzdWJ0cmFjdCA/XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJhd1ZhbHVlIC0gdGhpcy50eXBlLnB0clRvLnNpemUgKiBvZmZzZXRWYWx1ZS5yYXdWYWx1ZSA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJhd1ZhbHVlICsgdGhpcy50eXBlLnB0clRvLnNpemUgKiBvZmZzZXRWYWx1ZS5yYXdWYWx1ZSksXHJcbiAgICAgICAgICAgIHRoaXMudHlwZSxcclxuICAgICAgICAgICAgdGhpcy5pc1ZhbGlkICYmIG9mZnNldFZhbHVlLmlzVmFsaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwb2ludGVyRGlmZmVyZW5jZSh0aGlzOiBWYWx1ZTxQb2ludGVyVHlwZT4sIG90aGVyVmFsdWU6IFZhbHVlPFBvaW50ZXJUeXBlPikge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmFsdWU8SW50PihcclxuICAgICAgICAgICAgKHRoaXMucmF3VmFsdWUgLSBvdGhlclZhbHVlLnJhd1ZhbHVlKSAvIHRoaXMudHlwZS5wdHJUby5zaXplLFxyXG4gICAgICAgICAgICBuZXcgSW50KCksXHJcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCAmJiBvdGhlclZhbHVlLmlzVmFsaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb21wYXJlKG90aGVyVmFsdWU6IFZhbHVlPFQ+LCBjb21wYXJlcjogKGE6UmF3VmFsdWVUeXBlLCBiOlJhd1ZhbHVlVHlwZSkgPT4gYm9vbGVhbikge1xyXG4gICAgICAgIGFzc2VydChzYW1lVHlwZSh0aGlzLnR5cGUsIG90aGVyVmFsdWUudHlwZSkpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVmFsdWU8Qm9vbD4oXHJcbiAgICAgICAgICAgIGNvbXBhcmVyKHRoaXMucmF3VmFsdWUsIG90aGVyVmFsdWUucmF3VmFsdWUpID8gMSA6IDAsXHJcbiAgICAgICAgICAgIG5ldyBCb29sKCksXHJcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCAmJiBvdGhlclZhbHVlLmlzVmFsaWQpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgbW9kaWZ5KG1vZGlmaWVyOiAoYTpSYXdWYWx1ZVR5cGUpID0+IFJhd1ZhbHVlVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmFsdWU8VD4oXHJcbiAgICAgICAgICAgIG1vZGlmaWVyKHRoaXMucmF3VmFsdWUpLFxyXG4gICAgICAgICAgICB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHZhbHVlU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUudmFsdWVUb1N0cmluZyh0aGlzLnJhd1ZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPOiBwZXJoYXBzIHRoaXMgc2hvdWxkIGJlIG1vdmVkIHRvIHRoZSBvc3RyZWFtIGNsYXNzXHJcbiAgICBwdWJsaWMgdmFsdWVUb09zdHJlYW1TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS52YWx1ZVRvT3N0cmVhbVN0cmluZyh0aGlzLnJhd1ZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgc2hvdWxkIGJlIHVzZWQgVkVSWSBSQVJFTFkuIFRoZSBvbmx5IHRpbWUgdG8gdXNlIGl0IGlzIGlmIHlvdSBoYXZlIGEgdGVtcG9yYXJ5IFZhbHVlIGluc3RhbmNlXHJcbiAgICAgKiB0aGF0IHlvdSdyZSB1c2luZyBsb2NhbGx5IGFuZCB3YW50IHRvIGtlZXAgdXBkYXRpbmcgaXRzIHJhdyB2YWx1ZSB0byBzb21ldGhpbmcgZWxzZSBiZWZvcmUgcGFzc2luZ1xyXG4gICAgICogdG8gc29tZXRoaW5nIGxpa2UgbWVtb3J5LmRlcmVmZXJlbmNlKCkuIEZvciBleGFtcGxlLCB0aGlzIGlzIGRvbmUgd2hlbiB0cmF2ZXJzaW5nIHRocm91Z2ggYSBjc3RyaW5nIGJ5XHJcbiAgICAgKiBnZXR0aW5nIHRoZSB2YWx1ZSBvZiB0aGUgcG9pbnRlciBpbml0aWFsbHksIHRoZW4gYWQgaG9jIHVwZGF0aW5nIHRoYXQgdmFsdWUgYXMgeW91IG1vdmUgdGhyb3VnaCB0aGUgY3N0cmluZy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFJhd1ZhbHVlKHJhd1ZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICAoPFJhd1ZhbHVlVHlwZT50aGlzLnJhd1ZhbHVlKSA9IHJhd1ZhbHVlO1xyXG4gICAgICAgICg8Ym9vbGVhbj50aGlzLmlzVmFsaWQpID0gdGhpcy5pc1ZhbGlkICYmIHRoaXMudHlwZS5pc1ZhbHVlVmFsaWQodGhpcy5yYXdWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlKCkge1xyXG4gICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IHRoaXMudmFsdWVTdHJpbmcoKSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWVtb3J5IHtcclxuICAgIHByaXZhdGUgc3RhdGljIF9uYW1lID0gXCJNZW1vcnlcIjtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKHRoaXMpO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBjYXBhY2l0eTogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHN0YXRpY0NhcGFjaXR5OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RhY2tDYXBhY2l0eTogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGhlYXBDYXBhY2l0eTogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBzdGF0aWNTdGFydDogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHN0YXRpY0VuZDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBzdGFja1N0YXJ0OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RhY2tFbmQ6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaGVhcFN0YXJ0OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaGVhcEVuZDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSB0ZW1wb3JhcnlTdGFydDogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHRlbXBvcmFyeUNhcGFjaXR5OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGVtcG9yYXJ5RW5kOiBudW1iZXI7XHJcblxyXG4gICAgLy8gRGVmaW5pdGUgYXNzaWdubWVudCBhc3NlcnRpb25zIHdpdGggISBhcmUgZm9yIHByb3BlcnRpZXMgaW5pdGlhbGl6ZWQgaW4gdGhlIHJlc2V0IGZ1bmN0aW9uIGNhbGxlZFxyXG4gICAgLy8gYXQgdGhlIGVuZCBvZiB0aGUgY29uc3RydWN0b3IuXHJcbiAgICBwcml2YXRlIGJ5dGVzITogUmF3VmFsdWVUeXBlW107IC8vVE9ETzogSGFjayAtIGluc3RlYWQgb2YgcmVhbCBieXRlcywgbWVtb3J5IGp1c3Qgc3RvcmVzIHRoZSByYXcgdmFsdWUgaW4gdGhlIGZpcnN0IGJ5dGUgb2YgYW4gb2JqZWN0XHJcbiAgICBwcml2YXRlIG9iamVjdHMhOiB7IFtpbmRleDogbnVtYmVyXTogQ1BQT2JqZWN0PE9iamVjdFR5cGU+IH07XHJcbiAgICBwcml2YXRlIHN0cmluZ0xpdGVyYWxNYXAhOiB7IFtpbmRleDogc3RyaW5nXTogU3RyaW5nTGl0ZXJhbE9iamVjdCB9O1xyXG4gICAgcHJpdmF0ZSBzdGF0aWNPYmplY3RzITogeyBbaW5kZXg6IHN0cmluZ106IFN0YXRpY09iamVjdCB9O1xyXG4gICAgcHJpdmF0ZSB0ZW1wb3JhcnlPYmplY3RzITogeyBbaW5kZXg6IG51bWJlcl06IFRlbXBvcmFyeU9iamVjdCB9O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHN0YWNrITogTWVtb3J5U3RhY2s7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaGVhcCE6IE1lbW9yeUhlYXA7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWNUb3AhOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHRlbXBvcmFyeUJvdHRvbSE6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjYXBhY2l0eT86IG51bWJlciwgc3RhdGljQ2FwYWNpdHk/OiBudW1iZXIsIHN0YWNrQ2FwYWNpdHk/OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmNhcGFjaXR5ID0gY2FwYWNpdHkgfHwgMTAwMDA7XHJcbiAgICAgICAgdGhpcy5zdGF0aWNDYXBhY2l0eSA9IHN0YXRpY0NhcGFjaXR5IHx8IE1hdGguZmxvb3IodGhpcy5jYXBhY2l0eSAvIDEwKTtcclxuICAgICAgICB0aGlzLnN0YWNrQ2FwYWNpdHkgPSBzdGFja0NhcGFjaXR5IHx8IE1hdGguZmxvb3IoKHRoaXMuY2FwYWNpdHkgLSB0aGlzLnN0YXRpY0NhcGFjaXR5KSAvIDIpO1xyXG4gICAgICAgIHRoaXMuaGVhcENhcGFjaXR5ID0gdGhpcy5jYXBhY2l0eSAtIHRoaXMuc3RhdGljQ2FwYWNpdHkgLSB0aGlzLnN0YWNrQ2FwYWNpdHk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGljU3RhcnQgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhdGljRW5kID0gdGhpcy5zdGF0aWNTdGFydCArIHRoaXMuc3RhdGljQ2FwYWNpdHk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhY2tTdGFydCA9IHRoaXMuc3RhdGljRW5kO1xyXG4gICAgICAgIHRoaXMuc3RhY2tFbmQgPSB0aGlzLnN0YWNrU3RhcnQgKyB0aGlzLnN0YWNrQ2FwYWNpdHk7XHJcblxyXG4gICAgICAgIHRoaXMuaGVhcFN0YXJ0ID0gdGhpcy5zdGFja0VuZDtcclxuICAgICAgICB0aGlzLmhlYXBFbmQgPSB0aGlzLmhlYXBTdGFydCArIHRoaXMuaGVhcENhcGFjaXR5O1xyXG5cclxuICAgICAgICB0aGlzLnRlbXBvcmFyeVN0YXJ0ID0gdGhpcy5oZWFwRW5kICsgMTAwO1xyXG4gICAgICAgIHRoaXMudGVtcG9yYXJ5Q2FwYWNpdHkgPSAxMDAwMDtcclxuICAgICAgICB0aGlzLnRlbXBvcmFyeUVuZCA9IHRoaXMudGVtcG9yYXJ5U3RhcnQgKyB0aGlzLnRlbXBvcmFyeUNhcGFjaXR5O1xyXG5cclxuICAgICAgICBhc3NlcnQodGhpcy5zdGF0aWNDYXBhY2l0eSA8IHRoaXMuY2FwYWNpdHkgJiYgdGhpcy5zdGFja0NhcGFjaXR5IDwgdGhpcy5jYXBhY2l0eSAmJiB0aGlzLmhlYXBDYXBhY2l0eSA8IHRoaXMuY2FwYWNpdHkpO1xyXG4gICAgICAgIGFzc2VydCh0aGlzLmhlYXBFbmQgPT0gdGhpcy5jYXBhY2l0eSk7XHJcblxyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVzZXQoKSB7XHJcblxyXG4gICAgICAgIC8vIG1lbW9yeSBpcyBhIHNlcXVlbmNlIG9mIGJ5dGVzLCBhZGRyZXNzZXMgc3RhcnRpbmcgYXQgMFxyXG4gICAgICAgIHRoaXMuYnl0ZXMgPSBuZXcgQXJyYXkodGhpcy5jYXBhY2l0eSArIHRoaXMudGVtcG9yYXJ5Q2FwYWNpdHkpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jYXBhY2l0eSArIHRoaXMudGVtcG9yYXJ5Q2FwYWNpdHk7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ5dGVzW2ldID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMub2JqZWN0cyA9IHt9O1xyXG4gICAgICAgIHRoaXMuc3RyaW5nTGl0ZXJhbE1hcCA9IHt9O1xyXG4gICAgICAgIHRoaXMuc3RhdGljVG9wID0gdGhpcy5zdGF0aWNTdGFydCArIDQ7XHJcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzID0ge307XHJcbiAgICAgICAgdGhpcy50ZW1wb3JhcnlCb3R0b20gPSB0aGlzLnRlbXBvcmFyeVN0YXJ0O1xyXG5cclxuICAgICAgICAoPE11dGFibGU8dGhpcz4+dGhpcykuc3RhY2sgPSBuZXcgTWVtb3J5U3RhY2sodGhpcywgdGhpcy5zdGF0aWNFbmQpO1xyXG4gICAgICAgICg8TXV0YWJsZTx0aGlzPj50aGlzKS5oZWFwID0gbmV3IE1lbW9yeUhlYXAodGhpcywgdGhpcy5oZWFwRW5kKTtcclxuICAgICAgICB0aGlzLnRlbXBvcmFyeU9iamVjdHMgPSB7fTtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcInJlc2V0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRCeXRlKGFkZHI6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVzW2FkZHJdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWFkQnl0ZShhZGRyOiBudW1iZXIpIHtcclxuXHJcbiAgICAgICAgLy8gTm90aWZ5IGFueSBvdGhlciBvYmplY3QgdGhhdCBpcyBpbnRlcmVzdGVkIGluIHRoYXQgYnl0ZVxyXG4gICAgICAgIC8vIHZhciBiZWdpbiA9IGFkIC0gVHlwZS5nZXRNYXhTaXplKCk7XHJcbiAgICAgICAgLy9mb3IodmFyIGkgPSBhZDsgYmVnaW4gPCBpOyAtLWkpe1xyXG4gICAgICAgIC8vICAgIHZhciBvYmogPSB0aGlzLm9iamVjdHNbaV07XHJcbiAgICAgICAgLy8gICAgaWYgKG9iaiA9PSBmcm9tT2JqKSB7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgLy8gICAgaWYgKG9iaiAmJiBvYmouc2l6ZSA+IGFkIC0gaSl7XHJcbiAgICAgICAgLy8gICAgICAgIG9iai5ieXRlUmVhZChhZCk7XHJcbiAgICAgICAgLy8gICAgfVxyXG4gICAgICAgIC8vfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVzW2FkZHJdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRCeXRlcyhhZGRyOiBudW1iZXIsIG51bTogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXMuc2xpY2UoYWRkciwgYWRkciArIG51bSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlYWRCeXRlcyhhZGRyOiBudW1iZXIsIG51bTogbnVtYmVyKSB7XHJcbiAgICAgICAgdmFyIGVuZCA9IGFkZHIgKyBudW07XHJcblxyXG4gICAgICAgIC8vIE5vdGlmeSBhbnkgb3RoZXIgb2JqZWN0IHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGF0IGJ5dGVcclxuICAgICAgICAvLyB2YXIgYmVnaW4gPSBhZCAtIFR5cGUuZ2V0TWF4U2l6ZSgpO1xyXG4gICAgICAgIC8vZm9yKHZhciBpID0gZW5kLTE7IGJlZ2luIDwgaTsgLS1pKXtcclxuICAgICAgICAvLyAgICB2YXIgb2JqID0gdGhpcy5vYmplY3RzW2ldO1xyXG4gICAgICAgIC8vICAgIGlmIChvYmogPT0gZnJvbU9iaikgeyBjb250aW51ZTsgfVxyXG4gICAgICAgIC8vICAgIGlmIChvYmogJiYgb2JqLnNpemUgPiBhZCAtIGkpe1xyXG4gICAgICAgIC8vICAgICAgICBvYmouYnl0ZXNSZWFkKGFkLCBlbmQtYWQpOy8vLnNlbmQoXCJieXRlc1JlYWRcIiwge2FkZHI6IGFkLCBsZW5ndGg6IGVuZC1hZH0pO1xyXG4gICAgICAgIC8vICAgIH1cclxuICAgICAgICAvL31cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXMuc2xpY2UoYWRkciwgZW5kKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Qnl0ZShhZGRyOiBudW1iZXIsIHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICB0aGlzLmJ5dGVzW2FkZHJdID0gdmFsdWU7XHJcblxyXG4gICAgICAgIC8vIE5vdGlmeSBhbnkgb2JqZWN0IHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGF0IGJ5dGVcclxuICAgICAgICAvLyB2YXIgYmVnaW4gPSBhZCAtIFR5cGUuZ2V0TWF4U2l6ZSgpO1xyXG4gICAgICAgIC8vZm9yKHZhciBpID0gYWQ7IGJlZ2luIDwgaTsgLS1pKXtcclxuICAgICAgICAvLyAgICB2YXIgb2JqID0gdGhpcy5vYmplY3RzW2ldO1xyXG4gICAgICAgIC8vICAgIGlmIChvYmogJiYgb2JqLnNpemUgPiBhZCAtIGkpe1xyXG4gICAgICAgIC8vICAgICAgICBvYmouYnl0ZVNldChhZCwgdmFsdWUpOy8vLnNlbmQoXCJieXRlU2V0XCIsIHthZGRyOiBhZCwgdmFsdWU6IHZhbHVlfSk7XHJcbiAgICAgICAgLy8gICAgfVxyXG4gICAgICAgIC8vfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB3cml0ZUJ5dGUoYWRkcjogbnVtYmVyLCB2YWx1ZTogUmF3VmFsdWVUeXBlKSB7XHJcbiAgICAgICAgdGhpcy5ieXRlc1thZGRyXSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAvLyBOb3RpZnkgYW55IG90aGVyIG9iamVjdCB0aGF0IGlzIGludGVyZXN0ZWQgaW4gdGhhdCBieXRlXHJcbiAgICAgICAgLy8gdmFyIGJlZ2luID0gYWQgLSBUeXBlLmdldE1heFNpemUoKTtcclxuICAgICAgICAvL2Zvcih2YXIgaSA9IGFkOyBiZWdpbiA8IGk7IC0taSl7XHJcbiAgICAgICAgLy8gICAgdmFyIG9iaiA9IHRoaXMub2JqZWN0c1tpXTtcclxuICAgICAgICAvLyAgICBpZiAob2JqID09IGZyb21PYmopIHsgY29udGludWU7IH1cclxuICAgICAgICAvLyAgICBpZiAob2JqICYmIG9iai5zaXplID4gYWQgLSBpKXtcclxuICAgICAgICAvLyAgICAgICAgb2JqLmJ5dGVXcml0dGVuKGFkLCB2YWx1ZSk7Ly8uc2VuZChcImJ5dGVXcml0dGVuXCIsIHthZGRyOiBhZCwgdmFsdWU6IHZhbHVlfSk7XHJcbiAgICAgICAgLy8gICAgfVxyXG4gICAgICAgIC8vfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRCeXRlcyhhZGRyOiBudW1iZXIsIHZhbHVlczogUmF3VmFsdWVUeXBlW10pIHtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5ieXRlc1thZGRyICsgaV0gPSB2YWx1ZXNbaV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOb3RpZnkgYW55IG90aGVyIG9iamVjdCB0aGF0IGlzIGludGVyZXN0ZWQgaW4gdGhhdCBieXRlXHJcbiAgICAgICAgLy92YXIgYmVnaW4gPSBhZCAtIFR5cGUuZ2V0TWF4U2l6ZSgpO1xyXG4gICAgICAgIC8vZm9yKHZhciBpID0gYWQrdmFsdWVzLmxlbmd0aDsgYmVnaW4gPCBpOyAtLWkpe1xyXG4gICAgICAgIC8vICAgIHZhciBvYmogPSB0aGlzLm9iamVjdHNbaV07XHJcbiAgICAgICAgLy8gICAgaWYgKG9iaiAmJiBvYmouc2l6ZSA+IGFkIC0gaSl7XHJcbiAgICAgICAgLy8gICAgICAgIG9iai5ieXRlc1NldChhZCwgdmFsdWVzKTsvLy5zZW5kKFwiYnl0ZVNldFwiLCB7YWRkcjogYWQsIHZhbHVlczogdmFsdWVzfSk7XHJcbiAgICAgICAgLy8gICAgfVxyXG4gICAgICAgIC8vfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB3cml0ZUJ5dGVzKGFkZHI6IG51bWJlciwgdmFsdWVzOiBSYXdWYWx1ZVR5cGVbXSkge1xyXG5cclxuICAgICAgICAvL1RPRE8gcmVtb3ZlIHRoaXMgY29tbWVudGVkIGNvZGVcclxuICAgICAgICAvL2lmIChpc0EoZnJvbU9iaiwgVGVtcG9yYXJ5T2JqZWN0KSl7XHJcbiAgICAgICAgLy8gICAgdmFyIG9iakJ5dGVzID0gdGhpcy50ZW1wb3JhcnlPYmplY3RzW2Zyb21PYmouZW50aXR5SWRdO1xyXG4gICAgICAgIC8vICAgIGlmICghb2JqQnl0ZXMpe1xyXG4gICAgICAgIC8vICAgICAgICBvYmpCeXRlcyA9IG5ldyBBcnJheShmcm9tT2JqLnNpemUpO1xyXG4gICAgICAgIC8vICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgZnJvbU9iai5zaXplOyArK2kpe1xyXG4gICAgICAgIC8vICAgICAgICAgICAgb2JqQnl0ZXNbaV0gPSAwO1xyXG4gICAgICAgIC8vICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgIHRoaXMudGVtcG9yYXJ5T2JqZWN0c1tmcm9tT2JqLmVudGl0eUlkXSA9IG9iakJ5dGVzO1xyXG4gICAgICAgIC8vICAgIH1cclxuICAgICAgICAvLyAgICByZXR1cm47XHJcbiAgICAgICAgLy99XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZXNbYWRkciArIGldID0gdmFsdWVzW2ldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTm90aWZ5IGFueSBvdGhlciBvYmplY3QgdGhhdCBpcyBpbnRlcmVzdGVkIGluIHRoYXQgYnl0ZVxyXG4gICAgICAgIC8vdmFyIGJlZ2luID0gYWQgLSBUeXBlLmdldE1heFNpemUoKTtcclxuICAgICAgICAvL2Zvcih2YXIgaSA9IGFkK3ZhbHVlcy5sZW5ndGgtMTsgYmVnaW4gPCBpOyAtLWkpe1xyXG4gICAgICAgIC8vICAgIHZhciBvYmogPSB0aGlzLm9iamVjdHNbaV07XHJcbiAgICAgICAgLy8gICAgaWYgKG9iaiA9PSBmcm9tT2JqKSB7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgLy8gICAgaWYgKG9iaiAmJiBvYmouc2l6ZSA+IGFkIC0gaSl7XHJcbiAgICAgICAgLy8gICAgICAgIG9iai5ieXRlc1dyaXR0ZW4oYWQsIHZhbHVlcyk7Ly8uc2VuZChcImJ5dGVzV3JpdHRlblwiLCB7YWRkcjogYWQsIHZhbHVlczogdmFsdWVzfSk7XHJcbiAgICAgICAgLy8gICAgfVxyXG4gICAgICAgIC8vfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEF0dGVtcHRzIHRvIGRlcmVmZXJlbmNlIGEgcG9pbnRlciBhbmQgcmV0cmVpdmUgdGhlIG9iamVjdCBpdCBwb2ludHMgdG8uXHJcbiAgICAvLyBUYWtlcyBpbiBhIFZhbHVlIG9mIHBvaW50ZXIgdHlwZS4gTXVzdCBwb2ludCB0byBhbiBvYmplY3QgdHlwZS5cclxuICAgIC8vIFJldHVybnMgdGhlIG1vc3QgcmVjZW50bHkgYWxsb2NhdGVkIG9iamVjdCBhdCB0aGUgZ2l2ZW4gYWRkcmVzcy5cclxuICAgIC8vIFRoaXMgbWF5IGJlIGFuIG9iamVjdCB3aGljaCBpcyBubyBsb25nZXIgYWxpdmUgKGhhcyBiZWVuIGRlYWxsb2NhdGVkKS5cclxuICAgIC8vIElmIG5vIG9iamVjdCBpcyBmb3VuZCwgb3IgYW4gb2JqZWN0IG9mIGEgdHlwZSB0aGF0IGRvZXMgbm90IG1hdGNoIHRoZSBwb2ludGVkLXRvIHR5cGUgaXMgZm91bmQsXHJcbiAgICAvLyByZXR1cm5zIGFuIGFub255bW91cyBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiBhZGRyZXNzIGludGVycHJldGVkIGFzIHRoZSByZXF1ZXN0ZWQgdHlwZS5cclxuICAgIC8vIChJbiBDKyssIHJlYWRpbmcvd3JpdGluZyB0byB0aGlzIG9iamVjdCB3aWxsIGNhdXNlIHVuZGVmaW5lZCBiZWhhdmlvci4pXHJcbiAgICAvLyBUT0RPOiBwcmV2ZW50IHdyaXRpbmcgdG8gemVybyBvciBuZWdhdGl2ZSBhZGRyZXNzIG9iamVjdHM/XHJcbiAgICBwdWJsaWMgZGVyZWZlcmVuY2UocHRyOiBWYWx1ZTxQb2ludGVyVHlwZT4pIHtcclxuICAgICAgICBhc3NlcnQocHRyLnR5cGUuaXNPYmplY3RQb2ludGVyKCkpO1xyXG5cclxuICAgICAgICB2YXIgYWRkciA9IHB0ci5yYXdWYWx1ZTtcclxuXHJcbiAgICAgICAgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZXMgZm9yIHBvaW50ZXJzIHdpdGggUlRUSVxyXG4gICAgICAgIGlmIChwdHIudHlwZSBpbnN0YW5jZW9mIEFycmF5UG9pbnRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gcHRyLnR5cGUuYXJyYXlPYmplY3QuZ2V0QXJyYXlFbGVtU3Vib2JqZWN0QnlBZGRyZXNzKGFkZHIpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHB0ci50eXBlIGluc3RhbmNlb2YgT2JqZWN0UG9pbnRlciAmJiBwdHIudHlwZS5pc1ZhbHVlVmFsaWQoYWRkcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHB0ci50eXBlLnBvaW50ZWRPYmplY3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBHcmFiIG9iamVjdCBmcm9tIG1lbW9yeVxyXG4gICAgICAgIHZhciBvYmogPSB0aGlzLm9iamVjdHNbYWRkcl07XHJcblxyXG4gICAgICAgIGlmIChvYmogJiYgKHNpbWlsYXJUeXBlKG9iai50eXBlLCBwdHIudHlwZS5wdHJUbykgfHwgc3ViVHlwZShvYmoudHlwZSwgcHRyLnR5cGUucHRyVG8pKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIG9iamVjdCB3YXNuJ3QgdGhlcmUgb3IgZG9lc24ndCBtYXRjaCB0aGUgdHlwZSB3ZSBhc2tlZCBmb3IgKGlnbm9yaW5nIGNvbnN0KVxyXG4gICAgICAgIC8vIHRoZW4gd2UgbmVlZCB0byBjcmVhdGUgYW4gYW5vbnltb3VzIG9iamVjdCBvZiB0aGUgYXBwcm9wcmlhdGUgdHlwZSBpbnN0ZWFkXHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbnZhbGlkT2JqZWN0KHB0ci50eXBlLCB0aGlzLCBhZGRyKTtcclxuICAgIH1cclxuICAgIFxyXG5cclxuICAgIHByaXZhdGUgYWxsb2NhdGVPYmplY3Qob2JqZWN0OiBDUFBPYmplY3Q8T2JqZWN0VHlwZT4pIHtcclxuICAgICAgICB0aGlzLm9iamVjdHNbb2JqZWN0LmFkZHJlc3NdID0gb2JqZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW5kcyB0aGUgbGlmZXRpbWUgb2YgYW4gb2JqZWN0IGF0IHRoZSBnaXZlbiBhZGRyZXNzLiBJdHMgZGF0YSBhY3R1YWxseSByZW1haW5zIGluIG1lbW9yeSwgYnV0IGlzIG1hcmtlZCBhcyBkZWFkIGFuZCBpbnZhbGlkLlxyXG4gICAgICogSWYgbm8gb2JqZWN0IGV4aXN0cyBhdCB0aGUgZ2l2ZW4gYWRkcmVzcywgZG9lcyBub3RoaW5nLiBJZiB0aGUgb2JqZWN0IGlzIGFscmVhZHkgZGVhZCwgZG9lcyBub3RoaW5nLlxyXG4gICAgICogQHBhcmFtIGFkZHIgXHJcbiAgICAgKiBAcGFyYW0ga2lsbGVyIFRoZSBydW50aW1lIGNvbnN0cnVjdCB0aGF0IGtpbGxlZCB0aGUgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBraWxsT2JqZWN0KGFkZHI6IG51bWJlciwga2lsbGVyPzogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIGxldCBvYmogPSB0aGlzLm9iamVjdHNbYWRkcl07XHJcbiAgICAgICAgaWYgKG9iaiAmJiBvYmouaXNBbGl2ZSkge1xyXG4gICAgICAgICAgICBvYmoua2lsbChraWxsZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWxsb2NhdGVTdHJpbmdMaXRlcmFsKHN0cmluZ0xpdGVyYWxFbnRpdHk6IFN0cmluZ0xpdGVyYWxFbnRpdHkpIHtcclxuICAgICAgICB2YXIgc3RyID0gc3RyaW5nTGl0ZXJhbEVudGl0eS5zdHI7XHJcbiAgICAgICAgaWYgKCF0aGlzLnN0cmluZ0xpdGVyYWxNYXBbc3RyXSkge1xyXG4gICAgICAgICAgICAvLyBvbmx5IG5lZWQgdG8gYWxsb2NhdGUgYSBzdHJpbmcgbGl0ZXJhbCBvYmplY3QgaWYgd2UgZGlkbid0IGFscmVhZHkgaGF2ZSBhbiBpZGVudGljYWwgb25lXHJcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBzdHJpbmdMaXRlcmFsRW50aXR5Lm9iamVjdEluc3RhbmNlKHRoaXMsIHRoaXMuc3RhdGljVG9wKTtcclxuICAgICAgICAgICAgdGhpcy5hbGxvY2F0ZU9iamVjdChvYmplY3QpO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVjb3JkIHRoZSBzdHJpbmcgbGl0ZXJhbCBpbiBjYXNlIHdlIHNlZSBtb3JlIHRoYXQgYXJlIHRoZSBzYW1lIGluIHRoZSBmdXR1cmVcclxuICAgICAgICAgICAgdGhpcy5zdHJpbmdMaXRlcmFsTWFwW3N0cl0gPSBvYmplY3Q7XHJcblxyXG4gICAgICAgICAgICAvLyB3cml0ZSB2YWx1ZSBvZiBzdHJpbmcgbGl0ZXJhbCBpbnRvIHRoZSBvYmplY3RcclxuICAgICAgICAgICAgQ2hhci5qc1N0cmluZ1RvTnVsbFRlcm1pbmF0ZWRDaGFyQXJyYXkoc3RyKS5mb3JFYWNoKChjLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBvYmplY3QuZ2V0QXJyYXlFbGVtU3Vib2JqZWN0KGkpLnNldFZhbHVlKG5ldyBWYWx1ZShjLCBDaGFyLkNIQVIpKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBhZGp1c3QgbG9jYXRpb24gZm9yIG5leHQgc3RhdGljIG9iamVjdFxyXG4gICAgICAgICAgICB0aGlzLnN0YXRpY1RvcCArPSBvYmplY3Quc2l6ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTdHJpbmdMaXRlcmFsKHN0cjogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nTGl0ZXJhbE1hcFtzdHJdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhbGxvY2F0ZVN0YXRpYyhkZWY6IENvbXBpbGVkR2xvYmFsT2JqZWN0RGVmaW5pdGlvbikge1xyXG4gICAgICAgIHZhciBvYmogPSBuZXcgU3RhdGljT2JqZWN0KGRlZiwgZGVmLmRlY2xhcmVkRW50aXR5LnR5cGUsIHRoaXMsIHRoaXMuc3RhdGljVG9wKTtcclxuICAgICAgICB0aGlzLmFsbG9jYXRlT2JqZWN0KG9iaik7XHJcbiAgICAgICAgdGhpcy5zdGF0aWNUb3AgKz0gb2JqLnNpemU7XHJcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzW2RlZi5kZWNsYXJlZEVudGl0eS5xdWFsaWZpZWROYW1lXSA9IG9iajtcclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljTG9va3VwPFQgZXh0ZW5kcyBPYmplY3RUeXBlPihzdGF0aWNFbnRpdHk6IFN0YXRpY0VudGl0eTxUPikge1xyXG4gICAgICAgIHJldHVybiA8U3RhdGljT2JqZWN0PFQ+PnRoaXMuc3RhdGljT2JqZWN0c1tzdGF0aWNFbnRpdHkucXVhbGlmaWVkTmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFsbG9jYXRlVGVtcG9yYXJ5T2JqZWN0PFQgZXh0ZW5kcyBPYmplY3RUeXBlPih0ZW1wRW50aXR5OiBUZW1wb3JhcnlPYmplY3RFbnRpdHk8VD4pIHtcclxuICAgICAgICBsZXQgb2JqID0gbmV3IFRlbXBvcmFyeU9iamVjdCh0ZW1wRW50aXR5LnR5cGUsIHRoaXMsIHRoaXMudGVtcG9yYXJ5Qm90dG9tLCB0ZW1wRW50aXR5Lm5hbWUpO1xyXG4gICAgICAgIHRoaXMuYWxsb2NhdGVPYmplY3Qob2JqKTtcclxuICAgICAgICB0aGlzLnRlbXBvcmFyeUJvdHRvbSArPSB0ZW1wRW50aXR5LnR5cGUuc2l6ZTtcclxuICAgICAgICB0aGlzLnRlbXBvcmFyeU9iamVjdHNbdGVtcEVudGl0eS5lbnRpdHlJZF0gPSBvYmo7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJ0ZW1wb3JhcnlPYmplY3RBbGxvY2F0ZWRcIiwgb2JqKTtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBUT0RPOiB0aGluayBvZiBzb21lIHdheSB0byBwcmV2ZW50IGFjY2lkZW50YWxseSBjYWxsaW5nIHRoZSBvdGhlciBkZWFsbG9jYXRlIGRpcmVjdGx5IHdpdGggYSB0ZW1wb3Jhcnkgb2JqXHJcbiAgICBwdWJsaWMgZGVhbGxvY2F0ZVRlbXBvcmFyeU9iamVjdChvYmo6IFRlbXBvcmFyeU9iamVjdCwga2lsbGVyPzogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIHRoaXMua2lsbE9iamVjdChvYmouYWRkcmVzcywga2lsbGVyKTtcclxuICAgICAgICAvL3RoaXMudGVtcG9yYXJ5Qm90dG9tICs9IG9iai50eXBlLnNpemU7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMudGVtcG9yYXJ5T2JqZWN0c1tvYmouYWRkcmVzc107XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJ0ZW1wb3JhcnlPYmplY3REZWFsbG9jYXRlZFwiLCBvYmopO1xyXG4gICAgfVxyXG59O1xyXG5cclxuY2xhc3MgTWVtb3J5U3RhY2sge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX25hbWUgPSAgXCJNZW1vcnlTdGFja1wiO1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKHRoaXMpO1xyXG5cclxuICAgIHByaXZhdGUgdG9wOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0YXJ0OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1lbW9yeTogTWVtb3J5O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBmcmFtZXM6IE1lbW9yeUZyYW1lW107XHJcblxyXG4gICAgY29uc3RydWN0b3IobWVtb3J5OiBNZW1vcnksIHN0YXJ0OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLm1lbW9yeSA9IG1lbW9yeTtcclxuICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XHJcbiAgICAgICAgdGhpcy50b3AgPSBzdGFydDtcclxuICAgICAgICB0aGlzLmZyYW1lcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBjbGVhcigpIHtcclxuICAgIC8vICAgICB0aGlzLmZyYW1lcy5sZW5ndGggPSAwO1xyXG4gICAgLy8gICAgIHRoaXMudG9wID0gdGhpcy5zdGFydDtcclxuICAgIC8vIH1cclxuXHJcbiAgICBwdWJsaWMgdG9wRnJhbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGxhc3QodGhpcy5mcmFtZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwdXNoRnJhbWUocnRGdW5jOiBSdW50aW1lRnVuY3Rpb24pIHtcclxuICAgICAgICB2YXIgZnJhbWUgPSBuZXcgTWVtb3J5RnJhbWUodGhpcy5tZW1vcnksIHRoaXMudG9wLCBydEZ1bmMpO1xyXG4gICAgICAgIHRoaXMudG9wICs9IGZyYW1lLnNpemU7XHJcbiAgICAgICAgdGhpcy5mcmFtZXMucHVzaChmcmFtZSk7XHJcbiAgICAgICAgdGhpcy5tZW1vcnkub2JzZXJ2YWJsZS5zZW5kKFwiZnJhbWVQdXNoZWRcIiwgZnJhbWUpO1xyXG4gICAgICAgIHJldHVybiBmcmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcG9wRnJhbWUocnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBsZXQgZnJhbWUgPSB0aGlzLmZyYW1lcy5wb3AoKTtcclxuICAgICAgICBpZiAoIWZyYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRGYWxzZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmcmFtZS5wb3AocnRDb25zdHJ1Y3QpO1xyXG4gICAgICAgIHRoaXMudG9wIC09IGZyYW1lLnNpemU7XHJcbiAgICAgICAgdGhpcy5tZW1vcnkub2JzZXJ2YWJsZS5zZW5kKFwiZnJhbWVQb3BwZWRcIiwgZnJhbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpIHtcclxuICAgICAgICB2YXIgc3RyID0gXCI8dWwgY2xhc3M9XFxcInN0YWNrRnJhbWVzXFxcIj5cIjtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZnJhbWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZSA9IHRoaXMuZnJhbWVzW2ldO1xyXG4gICAgICAgICAgICBzdHIgKz0gXCI8bGk+XCIgKyBmcmFtZS50b1N0cmluZygpICsgXCI8L2xpPlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdHIgKz0gXCI8L3VsPlwiO1xyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE1lbW9yeUhlYXAge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgX25hbWUgPSBcIk1lbW9yeUhlYXBcIjtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKHRoaXMpO1xyXG5cclxuICAgIHByaXZhdGUgYm90dG9tOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVuZDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBtZW1vcnk6IE1lbW9yeTtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgb2JqZWN0TWFwOiB7W2luZGV4Om51bWJlcl06IER5bmFtaWNPYmplY3R9O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihtZW1vcnk6IE1lbW9yeSwgZW5kOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLm1lbW9yeSA9IG1lbW9yeTtcclxuICAgICAgICB0aGlzLmVuZCA9IGVuZDtcclxuICAgICAgICB0aGlzLmJvdHRvbSA9IGVuZDtcclxuICAgICAgICB0aGlzLm9iamVjdE1hcCA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBjbGVhcigpIHtcclxuICAgIC8vICAgICB0aGlzLm9iamVjdE1hcCA9IHt9O1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHB1YmxpYyBhbGxvY2F0ZU5ld09iamVjdChvYmo6IER5bmFtaWNPYmplY3QpIHtcclxuICAgIC8vICAgICB0aGlzLmJvdHRvbSAtPSBvYmoudHlwZS5zaXplO1xyXG4gICAgLy8gICAgIHRoaXMubWVtb3J5LmFsbG9jYXRlT2JqZWN0KG9iaiwgdGhpcy5ib3R0b20pO1xyXG4gICAgLy8gICAgIHRoaXMub2JqZWN0TWFwW29iai5hZGRyZXNzXSA9IG9iajtcclxuICAgIC8vICAgICB0aGlzLm1lbW9yeS5vYnNlcnZhYmxlLnNlbmQoXCJoZWFwT2JqZWN0QWxsb2NhdGVkXCIsIG9iaik7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gcHVibGljIGRlbGV0ZU9iamVjdChhZGRyOiBudW1iZXIsIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAvLyAgICAgdmFyIG9iaiA9IHRoaXMub2JqZWN0TWFwW2FkZHJdO1xyXG4gICAgLy8gICAgIGlmIChvYmopIHtcclxuICAgIC8vICAgICAgICAgZGVsZXRlIHRoaXMub2JqZWN0TWFwW2FkZHJdO1xyXG4gICAgLy8gICAgICAgICB0aGlzLm1lbW9yeS5kZWFsbG9jYXRlT2JqZWN0KGFkZHIsIHJ0Q29uc3RydWN0KTtcclxuICAgIC8vICAgICAgICAgdGhpcy5tZW1vcnkub2JzZXJ2YWJsZS5zZW5kKFwiaGVhcE9iamVjdERlbGV0ZWRcIiwgb2JqKTtcclxuICAgIC8vICAgICAgICAgLy8gTm90ZTogcmVzcG9uc2liaWxpdHkgZm9yIHJ1bm5pbmcgZGVzdHJ1Y3RvciBsaWVzIGVsc2V3aGVyZVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICByZXR1cm4gb2JqO1xyXG4gICAgLy8gfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIE1lbW9yeUZyYW1lIHtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF9uYW1lID0gXCJNZW1vcnlGcmFtZVwiO1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKHRoaXMpO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RhcnQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZW5kOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1lbW9yeTogTWVtb3J5O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBmdW5jOiBSdW50aW1lRnVuY3Rpb247XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHNpemU6IG51bWJlcjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbG9jYWxPYmplY3RzQnlFbnRpdHlJZDoge1tpbmRleDpudW1iZXJdOiBBdXRvT2JqZWN0fSA9IHt9O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBsb2NhbFJlZmVyZW5jZXNCeUVudGl0eUlkOiB7W2luZGV4Om51bWJlcl06IENQUE9iamVjdCB8IHVuZGVmaW5lZH0gPSB7fTtcclxuICAgIFxyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihtZW1vcnk6IE1lbW9yeSwgc3RhcnQ6IG51bWJlciwgcnRGdW5jOiBSdW50aW1lRnVuY3Rpb24pIHtcclxuICAgICAgICB0aGlzLm1lbW9yeSA9IG1lbW9yeTtcclxuICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XHJcbiAgICAgICAgdGhpcy5mdW5jID0gcnRGdW5jO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XHJcblxyXG4gICAgICAgIGxldCBhZGRyID0gdGhpcy5zdGFydDtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogYWRkIHRoaXMgcG9pbnRlciBiYWNrIGluXHJcbiAgICAgICAgLy8gaWYgKHRoaXMuZnVuYy5tb2RlbC5pc01lbWJlckZ1bmN0aW9uKSB7XHJcbiAgICAgICAgLy8gICAgIGxldCBvYmogPSBuZXcgVGhpc09iamVjdChuZXcgT2JqZWN0UG9pbnRlcihydEZ1bmMucmVjZWl2ZXIpLCBtZW1vcnksIGFkZHIpO1xyXG4gICAgICAgIC8vICAgICBvYmouc2V0VmFsdWUocnRGdW5jLnJlY2VpdmVyLmdldFBvaW50ZXJUbygpKTtcclxuICAgICAgICAvLyAgICAgYWRkciArPSBvYmouc2l6ZTtcclxuXHJcbiAgICAgICAgLy8gICAgIHRoaXMubG9jYWxPYmplY3RzQnlFbnRpdHlJZFtvYmouZW50aXR5SWRdID0gb2JqO1xyXG4gICAgICAgIC8vICAgICB0aGlzLnNpemUgKz0gb2JqLnNpemU7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyBQdXNoIG9iamVjdHMgZm9yIGFsbCBlbnRpdGllcyBpbiB0aGUgYmxvY2tcclxuICAgICAgICBydEZ1bmMubW9kZWwuY29udGV4dC5mdW5jdGlvbkxvY2Fscy5sb2NhbE9iamVjdHMuZm9yRWFjaCgob2JqRW50aXR5KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAob2JqRW50aXR5IGluc3RhbmNlb2YgQXV0b0VudGl0eSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGFuZCBhbGxvY2F0ZSB0aGUgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICBsZXQgb2JqID0gbmV3IEF1dG9PYmplY3Qob2JqRW50aXR5LmRlZmluaXRpb24sIG9iakVudGl0eS50eXBlLCBtZW1vcnksIGFkZHIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbE9iamVjdHNCeUVudGl0eUlkW29iakVudGl0eS5lbnRpdHlJZF0gPSBvYmo7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTW92ZSBvbiB0byBuZXh0IGFkZHJlc3MgYWZ0ZXJ3YXJkXHJcbiAgICAgICAgICAgICAgICBhZGRyICs9IG9iai5zaXplO1xyXG4gICAgICAgICAgICAgICAgKDxNdXRhYmxlPHRoaXM+PnRoaXMpLnNpemUgKz0gb2JqLnNpemU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZW5kID0gdGhpcy5zdGFydCArIHRoaXMuc2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPOiBpcyB0aGlzIGV2ZXIgdXNlZD9cclxuICAgIHB1YmxpYyB0b1N0cmluZygpIHtcclxuICAgICAgICB2YXIgc3RyID0gXCJcIjtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5sb2NhbE9iamVjdHNCeUVudGl0eUlkKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmogPSB0aGlzLmxvY2FsT2JqZWN0c0J5RW50aXR5SWRba2V5XTtcclxuICAgICAgICAgICAgLy9cdFx0XHRpZiAoIW9iai50eXBlKXtcclxuICAgICAgICAgICAgLy8gc3RyICs9IFwiPHNwYW4gc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6XCIgKyBvYmouY29sb3IgKyBcIlxcXCI+XCIgKyBrZXkgKyBcIiA9IFwiICsgb2JqICsgXCI8L3NwYW4+XFxuXCI7XHJcbiAgICAgICAgICAgIHN0ciArPSBcIjxzcGFuPlwiICsgb2JqICsgXCI8L3NwYW4+XFxuXCI7XHJcbiAgICAgICAgICAgIC8vXHRcdFx0fVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRMb2NhbE9iamVjdDxUIGV4dGVuZHMgT2JqZWN0VHlwZT4oZW50aXR5OiBBdXRvRW50aXR5PFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIDxBdXRvT2JqZWN0PFQ+PnRoaXMubG9jYWxPYmplY3RzQnlFbnRpdHlJZFtlbnRpdHkuZW50aXR5SWRdO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJlZmVyZW5jZUxvb2t1cDxUIGV4dGVuZHMgT2JqZWN0VHlwZT4oZW50aXR5OiBMb2NhbFJlZmVyZW5jZUVudGl0eTxUPikge1xyXG4gICAgICAgIHJldHVybiA8Q1BQT2JqZWN0PFQ+PnRoaXMubG9jYWxSZWZlcmVuY2VzQnlFbnRpdHlJZFtlbnRpdHkuZW50aXR5SWRdIHx8IGFzc2VydEZhbHNlKFwiQXR0ZW1wdCB0byBsb29rIHVwIHJlZmVycmVkIG9iamVjdCBiZWZvcmUgcmVmZXJlbmNlIHdhcyBib3VuZC5cIik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYmluZFJlZmVyZW5jZShlbnRpdHk6IExvY2FsUmVmZXJlbmNlRW50aXR5LCBvYmo6IENQUE9iamVjdDxPYmplY3RUeXBlPikge1xyXG4gICAgICAgIHRoaXMubG9jYWxSZWZlcmVuY2VzQnlFbnRpdHlJZFtlbnRpdHkuZW50aXR5SWRdID0gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBzZXRVcFJlZmVyZW5jZUluc3RhbmNlcygpIHtcclxuICAgIC8vICAgICB0aGlzLnNjb3BlLnJlZmVyZW5jZU9iamVjdHMuZm9yRWFjaCgocmVmOiBMb2NhbFJlZmVyZW5jZUVudGl0eSkgPT4ge1xyXG4gICAgLy8gICAgICAgICB0aGlzLmxvY2FsUmVmZXJlbmNlc0J5RW50aXR5SWRbcmVmLmVudGl0eUlkXSA9IHVuZGVmaW5lZDtcclxuICAgIC8vICAgICAgICAgLy9zZWxmLm1lbW9yeS5hbGxvY2F0ZU9iamVjdChyZWYsIGFkZHIpO1xyXG4gICAgLy8gICAgICAgICAvL2FkZHIgKz0gcmVmLnR5cGUuc2l6ZTtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBwdWJsaWMgcG9wKHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMubG9jYWxPYmplY3RzQnlFbnRpdHlJZCkge1xyXG4gICAgICAgICAgICB2YXIgb2JqID0gdGhpcy5sb2NhbE9iamVjdHNCeUVudGl0eUlkW2tleV07XHJcblxyXG4gICAgICAgICAgICAvLyBOb3RlIHRoaXMgZG9lcyBub3RoaW5nIGlmIHRoZSBvYmplY3Qgd2FzIGFscmVhZHkgZGVhbGxvY2F0ZWQgKGUuZy4gZ29pbmcgb3V0IG9mIHNjb3BlIG9mIGEgbmVzdGVkIGJsb2NrLCBkZXN0cnVjdG9yIHdhcyBjYWxsZWQpXHJcbiAgICAgICAgICAgIHRoaXMubWVtb3J5LmtpbGxPYmplY3Qob2JqLmFkZHJlc3MsIHJ0Q29uc3RydWN0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59OyIsImltcG9ydCB7IENQUE9iamVjdCB9IGZyb20gXCIuL29iamVjdHNcIjtcclxuaW1wb3J0IHsgU2ltdWxhdGlvbiwgU2ltdWxhdGlvbkV2ZW50IH0gZnJvbSBcIi4vU2ltdWxhdGlvblwiO1xyXG5pbXBvcnQgeyBUeXBlLCBPYmplY3RUeXBlLCBBdG9taWNUeXBlLCBJbnRlZ3JhbFR5cGUsIEZsb2F0aW5nUG9pbnRUeXBlLCBQb2ludGVyVHlwZSwgUmVmZXJlbmNlVHlwZSwgQ2xhc3NUeXBlLCBCb3VuZGVkQXJyYXlUeXBlLCBGdW5jdGlvblR5cGUsIGlzVHlwZSwgUG90ZW50aWFsUmV0dXJuVHlwZSwgQm9vbCwgc2FtZVR5cGUsIFZvaWRUeXBlLCBBcml0aG1ldGljVHlwZSwgQXJyYXlQb2ludGVyLCBJbnQsIFBvdGVudGlhbFBhcmFtZXRlclR5cGUsIEZsb2F0LCBEb3VibGUsIENoYXIsIE5vUmVmVHlwZSwgbm9SZWYsIEFycmF5T2ZVbmtub3duQm91bmRUeXBlIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgQVNUTm9kZSwgUG90ZW50aWFsRnVsbEV4cHJlc3Npb24sIFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkLCBSdW50aW1lUG90ZW50aWFsRnVsbEV4cHJlc3Npb24sIFJ1bnRpbWVDb25zdHJ1Y3QsIENvbXBpbGVkVGVtcG9yYXJ5RGVhbGxvY2F0b3IsIENQUENvbnN0cnVjdCwgRGVzY3JpcHRpb24gfSBmcm9tIFwiLi9jb25zdHJ1Y3RzXCI7XHJcbmltcG9ydCB7IENQUEVycm9yIH0gZnJvbSBcIi4vZXJyb3JzXCI7XHJcbmltcG9ydCB7IEZ1bmN0aW9uRW50aXR5LCBPYmplY3RFbnRpdHksIENQUEVudGl0eSwgb3ZlcmxvYWRSZXNvbHV0aW9uIH0gZnJvbSBcIi4vZW50aXRpZXNcIjtcclxuaW1wb3J0IHsgVmFsdWUsIFJhd1ZhbHVlVHlwZSB9IGZyb20gXCIuL3J1bnRpbWVFbnZpcm9ubWVudFwiO1xyXG5pbXBvcnQgeyBNdXRhYmxlLCBDb25zdHJ1Y3RvciwgYXNzZXJ0LCBlc2NhcGVTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbC91dGlsXCI7XHJcbmltcG9ydCB7IEZ1bmN0aW9uQ2FsbCwgQ29tcGlsZWRGdW5jdGlvbkNhbGwsIFJ1bnRpbWVGdW5jdGlvbkNhbGwgfSBmcm9tIFwiLi9mdW5jdGlvbnNcIjtcclxuaW1wb3J0IHsgc3RhbmRhcmRDb252ZXJzaW9uLCBjb252ZXJ0VG9QUlZhbHVlLCB1c3VhbEFyaXRobWV0aWNDb252ZXJzaW9ucyB9IGZyb20gXCIuL3N0YW5kYXJkQ29udmVyc2lvbnNcIjtcclxuaW1wb3J0IHsgY2hlY2tJZGVudGlmaWVyIH0gZnJvbSBcIi4vbGV4aWNhbFwiO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWFkVmFsdWVXaXRoQWxlcnQob2JqOiBDUFBPYmplY3Q8QXRvbWljVHlwZT4sIHNpbTogU2ltdWxhdGlvbikge1xyXG4gICAgbGV0IHZhbHVlID0gb2JqLnJlYWRWYWx1ZSgpO1xyXG4gICAgaWYoIXZhbHVlLmlzVmFsaWQpIHtcclxuICAgICAgICBsZXQgb2JqRGVzYyA9IG9iai5kZXNjcmliZSgpO1xyXG4gICAgICAgIHZhciBtc2cgPSBcIlRoZSB2YWx1ZSB5b3UganVzdCBnb3Qgb3V0IG9mIFwiICsgKG9iakRlc2MubmFtZSB8fCBvYmpEZXNjLm1lc3NhZ2UpICsgXCIgaXNuJ3QgdmFsaWQuIEl0IG1pZ2h0IGJlIHVuaW5pdGlhbGl6ZWQgb3IgaXQgY291bGQgaGF2ZSBjb21lIGZyb20gYSBkZWFkIG9iamVjdC5cIjtcclxuICAgICAgICBpZiAodmFsdWUucmF3VmFsdWUgPT09IDApe1xyXG4gICAgICAgICAgICBtc2cgKz0gXCJcXG5cXG4oTm90ZTogVGhlIHZhbHVlIGp1c3QgaGFwcGVucyB0byBiZSB6ZXJvLiBEb24ndCBiZSBmb29sZWQhIFVuaW5pdGlhbGl6ZWQgbWVtb3J5IGlzbid0IGd1YXJhbnRlZWQgdG8gYmUgemVyby4pXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNpbS5ldmVudE9jY3VycmVkKFNpbXVsYXRpb25FdmVudC5VTkRFRklORURfQkVIQVZJT1IsIG1zZywgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn07XHJcblxyXG4vLyBUT0RPOiBlbnN1cmUgdGhhdCBhbiBleHByZXNzaW9uIGlzIG5ldmVyIGNvbnNpZGVyZWQgY29tcGlsZWQgdW5sZXNzIGl0cyBjaGlsZHJlbiBhcmUgY29tcGlsZWRcclxuXHJcbi8qKlxyXG4gKiBUT0RPOiB0aGlzIGNvbW1lbnQgaXMgb3V0IG9mIGRhdGVcclxuICogU3RhbmRhcmQgY29tcGlsYXRpb24gcGhhc2UgZm9yIGV4cHJlc3Npb25zOlxyXG4gKiAgIDEuIENvbXBpbGUgY2hpbGRyZW4gKHdpdGggbm8gc3BlY2lhbCBjb250ZXh0IC0gaWYgdGhpcyBpcyBuZWVkZWQsIHlvdSdsbCBuZWVkIHRvIG92ZXJyaWRlIGNvbXBpbGUoKSlcclxuICogICAyLiBQZXJmb3JtIGFueSBjb252ZXJzaW9ucyBzcGVjaWZpZWQgaW4gdGhpcy5pX2NoaWxkcmVuVG9Db252ZXJ0LiB0aGUgbHZhbHVlLXRvLXJ2YWx1ZSBjb252ZXJzaW9uIGlzIG5vdCBzdXBwcmVzc2VkXHJcbiAqICAgMy4gSWYgYW55IGVycm9ycyBoYXZlIGJlZW4gcmVwb3J0ZWQgYnkgY2hpbGRyZW4sIGFib3J0LiBUaGUgcmVzdCBvZiB0aGUgc2VxdWVuY2UgaXMgc2tpcHBlZFxyXG4gKiAgIDQuIENhbGwgdGhlIHRoaXMuY29udmVydCgpIGhvb2suIFB1dCBjdXN0b20gY29udmVyc2lvbiBjb2RlIGhlcmUuXHJcbiAqICAgNS4gQ2FsbCB0aGUgdGhpcy50eXBlQ2hlY2soKSBob29rLiBQdXQgY3VzdG9tIHR5cGVjaGVja2luZyBoZXJlLiBBZnRlciB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCwgdGhlIGV4cHJlc3Npb24gc2hvdWxkXHJcbiAqICAgICAgaGF2ZSB0aGlzLnR5cGUgYW5kIHRoaXMudmFsdWVDYXRlZ29yeSBzZXQgY29ycmVjdCwgYWx0aG91Z2ggdGhpcyBkb2VzIG5vdCBtZWFuIHRoZSBmdW5jdGlvbiBuZWNlc3NhcmlseSBoYXMgdG8gZG9cclxuICogICAgICB0aGlzIChlLmcuIHNvbWUgZXhwcmVzc2lvbnMgYWx3YXlzIGhhdmUgdGhlIHNhbWUgdHlwZSBvciB2YWx1ZSBjYXRlZ29yeSwgc28gdGhlc2UgcHJvcGVydGllcyBtYXkgYmUgc2V0IGluaXRpYWxseVxyXG4gKiAgICAgIGF0IHRoZSBjbGFzcyBsZXZlbCkuXHJcbiAqICAgNi4gQ29tcGlsZSBhbnkgdGVtcG9yYXJ5IG9iamVjdHMgZm9yIHdob20gdGhpcyBpcyB0aGUgZW5jbG9zaW5nIGZ1bGwgZXhwcmVzc2lvbi5cclxuICpcclxuICovXHJcblxyXG4vLyBUT0RPOiB1c2Ugc3ltYm9scyBoZXJlP1xyXG5leHBvcnQgdHlwZSBWYWx1ZUNhdGVnb3J5ID0gXCJwcnZhbHVlXCIgfCBcImx2YWx1ZVwiO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2VsbFR5cGVkPFQgZXh0ZW5kcyBUeXBlID0gVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPSBWYWx1ZUNhdGVnb3J5PiB7XHJcbiAgICByZWFkb25seSB0eXBlOiBUO1xyXG4gICAgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeTogVjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUeXBlZEV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUgPSBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeSA9IFZhbHVlQ2F0ZWdvcnk+IGV4dGVuZHMgRXhwcmVzc2lvbiB7XHJcbiAgICByZWFkb25seSB0eXBlOiBUO1xyXG4gICAgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeTogVjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU3BlY2lmaWNUeXBlZEV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUgPSBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeSA9IFZhbHVlQ2F0ZWdvcnk+ID0gViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPyBUeXBlZEV4cHJlc3Npb248VCxWPiA6IG5ldmVyO1xyXG5cclxuLy8gZXhwb3J0IGludGVyZmFjZSBUeXBlZEFuZENvbXBpbGVkPFQgZXh0ZW5kcyBUeXBlID0gVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPSBWYWx1ZUNhdGVnb3J5PiBleHRlbmRzIEV4cHJlc3Npb248VCxWPiwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG5cclxuLy8gfVxyXG5cclxuLy8gdHlwZSBDb21waWxlZEV4cHJlc3Npb25CYXNlPEUgZXh0ZW5kcyBFeHByZXNzaW9uLCBUIGV4dGVuZHMgVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+ID0gRSAmIFR5cGVkQW5kQ29tcGlsZWQ8VCxWPjtcclxuXHJcbi8vIFRPRE86IGlzIHRoaXMgdXNlZCBhbnltb3JlP1xyXG50eXBlIFNpbWlsYXJUeXBlZENvbXBpbGVkRXhwcmVzc2lvbjxDRSBleHRlbmRzIENvbXBpbGVkRXhwcmVzc2lvbj4gPSBDb21waWxlZEV4cHJlc3Npb248Q0VbXCJ0eXBlXCJdLCBDRVtcInZhbHVlQ2F0ZWdvcnlcIl0+O1xyXG5cclxuXHJcbmV4cG9ydCB0eXBlIEV4cHJlc3Npb25BU1ROb2RlID1cclxuICAgIENvbW1hQVNUTm9kZSB8XHJcbiAgICBUZXJuYXJ5QVNUTm9kZSB8XHJcbiAgICBBc3NpZ25tZW50RXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgQ29tcG91bmRBc3NpZ25tZW50RXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgQmluYXJ5T3BlcmF0b3JFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBQb2ludGVyVG9NZW1iZXJFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBDU3R5bGVDYXN0RXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgVW5hcnlFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBQb3N0Zml4RXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgQ29uc3RydWN0RXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgSWRlbnRpZmllckV4cHJlc3Npb25BU1ROb2RlIHxcclxuICAgIFRoaXNFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBOdW1lcmljTGl0ZXJhbEFTVE5vZGU7XHJcblxyXG5cclxuY29uc3QgRXhwcmVzc2lvbkNvbnN0cnVjdHNNYXAgPSB7XHJcbiAgICBcImNvbW1hX2V4cHJlc3Npb25cIiA6IChhc3Q6IENvbW1hQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IENvbW1hRXhwcmVzc2lvbi5jcmVhdGVGcm9tQVNUKGFzdCwgY29udGV4dCksXHJcbiAgICBcclxuICAgIFwidGVybmFyeV9leHByZXNzaW9uXCIgOiAoYXN0OiBUZXJuYXJ5QVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IFRlcm5hcnlFeHByZXNzaW9uLmNyZWF0ZUZyb21BU1QoYXN0LCBjb250ZXh0KSxcclxuICAgIFxyXG4gICAgXCJhc3NpZ25tZW50X2V4cHJlc3Npb25cIiA6IChhc3Q6IEFzc2lnbm1lbnRFeHByZXNzaW9uQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IEFzc2lnbm1lbnRFeHByZXNzaW9uLmNyZWF0ZUZyb21BU1QoYXN0LCBjb250ZXh0KSxcclxuICAgIFwiY29tcG91bmRfYXNzaWdubWVudF9leHByZXNzaW9uXCIgOiAoYXN0OiBDb21wb3VuZEFzc2lnbm1lbnRFeHByZXNzaW9uQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IG5ldyBVbnN1cHBvcnRlZEV4cHJlc3Npb24oY29udGV4dCwgXCJjb21wb3VuZCBhc3NpZ25tZW50XCIpLnNldEFTVChhc3QpLFxyXG4gICAgXHJcbiAgICAvLyBiaW5hcnkgb3BlcmF0b3JzXHJcbiAgICBcImFyaXRobWV0aWNfYmluYXJ5X29wZXJhdG9yX2V4cHJlc3Npb25cIiA6IChhc3Q6IEFyaXRobWV0aWNCaW5hcnlPcGVyYXRvckV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gQXJpdGhtZXRpY0JpbmFyeU9wZXJhdG9yRXhwcmVzc2lvbi5jcmVhdGVGcm9tQVNUKGFzdCwgY29udGV4dCksXHJcbiAgICBcInJlbGF0aW9uYWxfYmluYXJ5X29wZXJhdG9yX2V4cHJlc3Npb25cIiA6IChhc3Q6IFJlbGF0aW9uYWxCaW5hcnlPcGVyYXRvckV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gUmVsYXRpb25hbEJpbmFyeU9wZXJhdG9yLmNyZWF0ZUZyb21BU1QoYXN0LCBjb250ZXh0KSxcclxuICAgIFwibG9naWNhbF9iaW5hcnlfb3BlcmF0b3JfZXhwcmVzc2lvblwiIDogKGFzdDogTG9naWNhbEJpbmFyeU9wZXJhdG9yRXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA9PiBMb2dpY2FsQmluYXJ5T3BlcmF0b3IuY3JlYXRlRnJvbUFTVChhc3QsIGNvbnRleHQpLFxyXG4gICAgXHJcbiAgICBcInBvaW50ZXJfdG9fbWVtYmVyX2V4cHJlc3Npb25cIiA6IChhc3Q6IFBvaW50ZXJUb01lbWJlckV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcInBvaW50ZXItdG8tbWVtYmVyXCIpLnNldEFTVChhc3QpLFxyXG4gICAgXHJcbiAgICBcImNfc3R5bGVfY2FzdF9leHByZXNzaW9uXCIgOiAoYXN0OiBDU3R5bGVDYXN0RXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA9PiBuZXcgVW5zdXBwb3J0ZWRFeHByZXNzaW9uKGNvbnRleHQsIFwiYy1zdHlsZSBjYXN0XCIpLnNldEFTVChhc3QpLFxyXG4gICAgXHJcbiAgICAvLyBwcmVmaXggb3BlcmF0b3JzXHJcbiAgICBcInByZWZpeF9pbmNyZW1lbnRfZXhwcmVzc2lvblwiIDogKGFzdDogUHJlZml4SW5jcmVtZW50RXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA9PiBuZXcgVW5zdXBwb3J0ZWRFeHByZXNzaW9uKGNvbnRleHQsIFwicHJlZml4IGluY3JlbWVudFwiKS5zZXRBU1QoYXN0KSxcclxuICAgIFwicHJlZml4X2RlY3JlbWVudF9leHByZXNzaW9uXCIgOiAoYXN0OiBQcmVmaXhEZWNyZW1lbnRFeHByZXNzaW9uQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IG5ldyBVbnN1cHBvcnRlZEV4cHJlc3Npb24oY29udGV4dCwgXCJwcmVmaXggZGVjcmVtZW50XCIpLnNldEFTVChhc3QpLFxyXG4gICAgXCJkZXJlZmVyZW5jZV9leHByZXNzaW9uXCIgOiAoYXN0OiBEZXJlZmVyZW5jZUV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcImRlcmVmZXJlbmNlXCIpLnNldEFTVChhc3QpLFxyXG4gICAgXCJhZGRyZXNzX29mX2V4cHJlc3Npb25cIiA6IChhc3Q6IEFkZHJlc3NPZkV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcImFkZHJlc3Mtb2ZcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcInVuYXJ5X3BsdXNfZXhwcmVzc2lvblwiIDogKGFzdDogVW5hcnlQbHVzRXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA9PiBuZXcgVW5zdXBwb3J0ZWRFeHByZXNzaW9uKGNvbnRleHQsIFwidW5hcnkgcGx1c1wiKS5zZXRBU1QoYXN0KSxcclxuICAgIFwidW5hcnlfbWludXNfZXhwcmVzc2lvblwiIDogKGFzdDogVW5hcnlNaW51c0V4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcInVuYXJ5IG1pbnVzXCIpLnNldEFTVChhc3QpLFxyXG4gICAgXCJsb2dpY2FsX25vdF9leHByZXNzaW9uXCIgOiAoYXN0OiBMb2dpY2FsTm90RXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA9PiBuZXcgVW5zdXBwb3J0ZWRFeHByZXNzaW9uKGNvbnRleHQsIFwibG9naWNhbCBub3RcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcImJpdHdpc2Vfbm90X2V4cHJlc3Npb25cIiA6IChhc3Q6IEJpdHdpc2VOb3RFeHByZXNzaW9uQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IG5ldyBVbnN1cHBvcnRlZEV4cHJlc3Npb24oY29udGV4dCwgXCJiaXR3aXNlIG5vdFwiKS5zZXRBU1QoYXN0KSxcclxuICAgIFwic2l6ZW9mX2V4cHJlc3Npb25cIiA6IChhc3Q6IFNpemVvZkV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcInNpemVvZlwiKS5zZXRBU1QoYXN0KSxcclxuICAgIFwic2l6ZW9mX3R5cGVfZXhwcmVzc2lvblwiIDogKGFzdDogU2l6ZW9mVHlwZUV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcInNpemVvZiAodHlwZSlcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcIm5ld19leHByZXNzaW9uXCIgOiAoYXN0OiBOZXdFeHByZXNzaW9uQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IG5ldyBVbnN1cHBvcnRlZEV4cHJlc3Npb24oY29udGV4dCwgXCJuZXdcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcImRlbGV0ZV9leHByZXNzaW9uXCIgOiAoYXN0OiBEZWxldGVFeHByZXNzaW9uQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IG5ldyBVbnN1cHBvcnRlZEV4cHJlc3Npb24oY29udGV4dCwgXCJkZWxldGVcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcImRlbGV0ZV9hcnJheV9leHByZXNzaW9uXCIgOiAoYXN0OiBEZWxldGVBcnJheUV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcImRlbGV0ZVtdXCIpLnNldEFTVChhc3QpLFxyXG4gICAgXHJcbiAgICAvLyBwb3N0Zml4IG9wZXJhdG9yc1xyXG4gICAgXCJzdGF0aWNfY2FzdF9leHByZXNzaW9uXCIgOiAoYXN0OiBTdGF0aWNDYXN0RXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA9PiBuZXcgVW5zdXBwb3J0ZWRFeHByZXNzaW9uKGNvbnRleHQsIFwic3RhdGljIGNhc3RcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcImR5bmFtaWNfY2FzdF9leHByZXNzaW9uXCIgOiAoYXN0OiBEeW5hbWljQ2FzdEV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcImR5bmFtaWMgY2FzdFwiKS5zZXRBU1QoYXN0KSxcclxuICAgIFwicmVpbnRlcnByZXRfY2FzdF9leHByZXNzaW9uXCIgOiAoYXN0OiBSZWludGVycHJldENhc3RFeHByZXNzaW9uQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IG5ldyBVbnN1cHBvcnRlZEV4cHJlc3Npb24oY29udGV4dCwgXCJyZWludGVycHJldCBjYXN0XCIpLnNldEFTVChhc3QpLFxyXG4gICAgXCJjb25zdF9jYXN0X2V4cHJlc3Npb25cIiA6IChhc3Q6IENvbnN0Q2FzdEV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcImNvbnN0IGNhc3RcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcInN1YnNjcmlwdF9leHByZXNzaW9uXCIgOiAoYXN0OiBTdWJzY3JpcHRFeHByZXNzaW9uQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IG5ldyBVbnN1cHBvcnRlZEV4cHJlc3Npb24oY29udGV4dCwgXCJzdWJzY3JpcHRcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcImZ1bmN0aW9uX2NhbGxfZXhwcmVzc2lvblwiIDogKGFzdDogRnVuY3Rpb25DYWxsRXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA9PiBGdW5jdGlvbkNhbGxFeHByZXNzaW9uLmNyZWF0ZUZyb21BU1QoYXN0LCBjb250ZXh0KSxcclxuICAgIFwiZG90X2V4cHJlc3Npb25cIiA6IChhc3Q6IERvdEV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcImRvdCBvcGVyYXRvclwiKS5zZXRBU1QoYXN0KSxcclxuICAgIFwiYXJyb3dfZXhwcmVzc2lvblwiIDogKGFzdDogQXJyb3dFeHByZXNzaW9uQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpID0+IG5ldyBVbnN1cHBvcnRlZEV4cHJlc3Npb24oY29udGV4dCwgXCJhcnJvdyBvcGVyYXRvclwiKS5zZXRBU1QoYXN0KSxcclxuICAgIFwicG9zdGZpeF9pbmNyZW1lbnRfZXhwcmVzc2lvblwiIDogKGFzdDogUG9zdGZpeEluY3JlbWVudEV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcInBvc3RmaXggaW5jcmVtZW50XCIpLnNldEFTVChhc3QpLFxyXG4gICAgXCJwb3N0Zml4X2RlY3JlbWVudF9leHByZXNzaW9uXCIgOiAoYXN0OiBQb3N0Zml4RGVjcmVtZW50RXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA9PiBuZXcgVW5zdXBwb3J0ZWRFeHByZXNzaW9uKGNvbnRleHQsIFwicG9zdGZpeCBkZWNyZW1lbnRcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcclxuICAgIFwiY29uc3RydWN0X2V4cHJlc3Npb25cIiA6IChhc3Q6IENvbnN0cnVjdEV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcImNvbnN0cnVjdCBleHByZXNzaW9uXCIpLnNldEFTVChhc3QpLFxyXG4gICAgXHJcbiAgICBcImlkZW50aWZpZXJfZXhwcmVzc2lvblwiIDogKGFzdDogSWRlbnRpZmllckV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gSWRlbnRpZmllckV4cHJlc3Npb24uY3JlYXRlRnJvbUFTVChhc3QsIGNvbnRleHQpLFxyXG4gICAgXHJcbiAgICBcInRoaXNfZXhwcmVzc2lvblwiIDogKGFzdDogVGhpc0V4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkRXhwcmVzc2lvbihjb250ZXh0LCBcInRoaXMgcG9pbnRlclwiKS5zZXRBU1QoYXN0KSxcclxuXHJcbiAgICBcIm51bWVyaWNfbGl0ZXJhbFwiIDogKGFzdDogTnVtZXJpY0xpdGVyYWxBU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgPT4gTnVtZXJpY0xpdGVyYWwuY3JlYXRlRnJvbUFTVChhc3QsIGNvbnRleHQpLFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXhwcmVzc2lvbkZyb21BU1Q8QVNUVHlwZSBleHRlbmRzIEV4cHJlc3Npb25BU1ROb2RlPihhc3Q6IEFTVFR5cGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA6IFJldHVyblR5cGU8KHR5cGVvZiBFeHByZXNzaW9uQ29uc3RydWN0c01hcClbQVNUVHlwZVtcImNvbnN0cnVjdF90eXBlXCJdXT4ge1xyXG4gICAgcmV0dXJuIDxhbnk+RXhwcmVzc2lvbkNvbnN0cnVjdHNNYXBbYXN0LmNvbnN0cnVjdF90eXBlXSg8YW55PmFzdCwgY29udGV4dCk7XHJcbn0gXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEV4cHJlc3Npb25Db250ZXh0IGV4dGVuZHMgVHJhbnNsYXRpb25Vbml0Q29udGV4dCB7XHJcbiAgICByZWFkb25seSBjb250ZXh0dWFsUGFyYW1ldGVyVHlwZXM/OiByZWFkb25seSAoVHlwZSB8IHVuZGVmaW5lZClbXTtcclxuICAgIHJlYWRvbmx5IGNvbnRleHR1YWxSZWNlaXZlclR5cGU/OiBDbGFzc1R5cGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeHByZXNzaW9uQ29udGV4dChjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCBjb250ZXh0dWFsUGFyYW1ldGVyVHlwZXM6IHJlYWRvbmx5IChUeXBlIHwgdW5kZWZpbmVkKVtdKSA6IEV4cHJlc3Npb25Db250ZXh0IHtcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0LCB7Y29udGV4dHVhbFBhcmFtZXRlclR5cGVzOiBjb250ZXh0dWFsUGFyYW1ldGVyVHlwZXN9KTtcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEV4cHJlc3Npb248QVNUVHlwZSBleHRlbmRzIEV4cHJlc3Npb25BU1ROb2RlID0gRXhwcmVzc2lvbkFTVE5vZGU+IGV4dGVuZHMgUG90ZW50aWFsRnVsbEV4cHJlc3Npb248RXhwcmVzc2lvbkNvbnRleHQsIEFTVFR5cGU+IHtcclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZT86IFR5cGU7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeT86IFZhbHVlQ2F0ZWdvcnk7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29udmVyc2lvbkxlbmd0aDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUgPSBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeSA9IFZhbHVlQ2F0ZWdvcnk+KHRoaXM6IENvbXBpbGVkRXhwcmVzc2lvbjxULFY+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogUnVudGltZUV4cHJlc3Npb248VCxWPjtcclxuXHJcbiAgICBwdWJsaWMgaXNXZWxsVHlwZWQoKSA6IHRoaXMgaXMgU3BlY2lmaWNUeXBlZEV4cHJlc3Npb248VHlwZSxWYWx1ZUNhdGVnb3J5PiB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy50eXBlICYmICEhdGhpcy52YWx1ZUNhdGVnb3J5O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc1R5cGVkPFQgZXh0ZW5kcyBUeXBlPihjdG9yOiBDb25zdHJ1Y3RvcjxUPikgOiB0aGlzIGlzIFNwZWNpZmljVHlwZWRFeHByZXNzaW9uPFQsIFZhbHVlQ2F0ZWdvcnk+IHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLnR5cGUgJiYgdGhpcy50eXBlLmlzVHlwZShjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNPYmplY3RUeXBlZCgpIDogdGhpcyBpcyBTcGVjaWZpY1R5cGVkRXhwcmVzc2lvbjxPYmplY3RUeXBlLCBWYWx1ZUNhdGVnb3J5PiB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy50eXBlICYmIHRoaXMudHlwZS5pc09iamVjdFR5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNBdG9taWNUeXBlZCgpIDogdGhpcyBpcyBTcGVjaWZpY1R5cGVkRXhwcmVzc2lvbjxBdG9taWNUeXBlLCBWYWx1ZUNhdGVnb3J5PiB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy50eXBlICYmIHRoaXMudHlwZS5pc0F0b21pY1R5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNBcml0aG1ldGljVHlwZWQoKSA6IHRoaXMgaXMgU3BlY2lmaWNUeXBlZEV4cHJlc3Npb248QXJpdGhtZXRpY1R5cGUsIFZhbHVlQ2F0ZWdvcnk+IHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLnR5cGUgJiYgdGhpcy50eXBlLmlzQXJpdGhtZXRpY1R5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNJbnRlZ3JhbFR5cGVkKCkgOiB0aGlzIGlzIFNwZWNpZmljVHlwZWRFeHByZXNzaW9uPEludGVncmFsVHlwZSwgVmFsdWVDYXRlZ29yeT4ge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMudHlwZSAmJiB0aGlzLnR5cGUuaXNJbnRlZ3JhbFR5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNGbG9hdGluZ1BvaW50VHlwZWQoKSA6IHRoaXMgaXMgU3BlY2lmaWNUeXBlZEV4cHJlc3Npb248RmxvYXRpbmdQb2ludFR5cGUsIFZhbHVlQ2F0ZWdvcnk+IHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLnR5cGUgJiYgdGhpcy50eXBlLmlzRmxvYXRpbmdQb2ludFR5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNQb2ludGVyVHlwZWQoKSA6IHRoaXMgaXMgU3BlY2lmaWNUeXBlZEV4cHJlc3Npb248UG9pbnRlclR5cGUsIFZhbHVlQ2F0ZWdvcnk+IHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLnR5cGUgJiYgdGhpcy50eXBlLmlzUG9pbnRlclR5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNSZWZlcmVuY2VUeXBlZCgpIDogdGhpcyBpcyBTcGVjaWZpY1R5cGVkRXhwcmVzc2lvbjxSZWZlcmVuY2VUeXBlLCBWYWx1ZUNhdGVnb3J5PiB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy50eXBlICYmIHRoaXMudHlwZS5pc1JlZmVyZW5jZVR5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNDbGFzc1R5cGVkKCkgOiB0aGlzIGlzIFNwZWNpZmljVHlwZWRFeHByZXNzaW9uPENsYXNzVHlwZSwgVmFsdWVDYXRlZ29yeT4ge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMudHlwZSAmJiB0aGlzLnR5cGUuaXNDbGFzc1R5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNCb3VuZGVkQXJyYXlUeXBlZCgpIDogdGhpcyBpcyBTcGVjaWZpY1R5cGVkRXhwcmVzc2lvbjxCb3VuZGVkQXJyYXlUeXBlLCBcImx2YWx1ZVwiPiB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy50eXBlICYmIHRoaXMudHlwZS5pc0JvdW5kZWRBcnJheVR5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNBcnJheU9mVW5rbm93bkJvdW5kVHlwZWQoKSA6IHRoaXMgaXMgU3BlY2lmaWNUeXBlZEV4cHJlc3Npb248QXJyYXlPZlVua25vd25Cb3VuZFR5cGUsIFwibHZhbHVlXCI+IHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLnR5cGUgJiYgdGhpcy50eXBlLmlzQXJyYXlPZlVua25vd25Cb3VuZFR5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNHZW5lcmljQXJyYXlUeXBlZCgpIDogdGhpcyBpcyBTcGVjaWZpY1R5cGVkRXhwcmVzc2lvbjxCb3VuZGVkQXJyYXlUeXBlIHwgQXJyYXlPZlVua25vd25Cb3VuZFR5cGUsIFwibHZhbHVlXCI+IHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLnR5cGUgJiYgdGhpcy50eXBlLmlzR2VuZXJpY0FycmF5VHlwZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc1BydmFsdWU8VCBleHRlbmRzIFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5Pih0aGlzOiBUeXBlZEV4cHJlc3Npb248VCxWPikgOiB0aGlzIGlzIFR5cGVkRXhwcmVzc2lvbjxULFwicHJ2YWx1ZVwiPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVDYXRlZ29yeSA9PT0gXCJwcnZhbHVlXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzTHZhbHVlPFQgZXh0ZW5kcyBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeT4odGhpczogVHlwZWRFeHByZXNzaW9uPFQsVj4pIDogdGhpcyBpcyBUeXBlZEV4cHJlc3Npb248VCxcImx2YWx1ZVwiPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVDYXRlZ29yeSA9PT0gXCJsdmFsdWVcIjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgaXNTdWNjZXNzZnVsbHlDb21waWxlZCgpIDogdGhpcyBpcyBDb21waWxlZDx0aGlzPiB7XHJcbiAgICAvLyAgICAgcmV0dXJuICF0aGlzLmhhc0Vycm9ycztcclxuICAgIC8vIH1cclxuXHJcbiAgICBwdWJsaWMgaXNUYWlsQ2hpbGQoY2hpbGQ6IENQUENvbnN0cnVjdCkge1xyXG4gICAgICAgIHJldHVybiB7aXNUYWlsOiBmYWxzZX07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IGRlc2NyaWJlRXZhbFJlc3VsdChkZXB0aDogbnVtYmVyKSA6IERlc2NyaXB0aW9uO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkRXhwcmVzc2lvbjxUIGV4dGVuZHMgVHlwZSA9IFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gVmFsdWVDYXRlZ29yeT4gZXh0ZW5kcyBFeHByZXNzaW9uLCBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcbiAgICByZWFkb25seSB0ZW1wb3JhcnlEZWFsbG9jYXRvcj86IENvbXBpbGVkVGVtcG9yYXJ5RGVhbGxvY2F0b3I7IC8vIHRvIG1hdGNoIENvbXBpbGVkUG90ZW50aWFsRnVsbEV4cHJlc3Npb24gc3RydWN0dXJlXHJcbiAgICByZWFkb25seSB0eXBlOiBUO1xyXG4gICAgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeTogVjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU3BlY2lmaWNDb21waWxlZEV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUgPSBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeSA9IFZhbHVlQ2F0ZWdvcnk+ID0gViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPyBDb21waWxlZEV4cHJlc3Npb248VCxWPiA6IG5ldmVyO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhbGxXZWxsVHlwZWQoZXhwcmVzc2lvbnM6IEV4cHJlc3Npb25bXSk6IGV4cHJlc3Npb25zIGlzIFR5cGVkRXhwcmVzc2lvbltdO1xyXG5leHBvcnQgZnVuY3Rpb24gYWxsV2VsbFR5cGVkKGV4cHJlc3Npb25zOiByZWFkb25seSBFeHByZXNzaW9uW10pOiBleHByZXNzaW9ucyBpcyByZWFkb25seSBUeXBlZEV4cHJlc3Npb25bXTtcclxuZXhwb3J0IGZ1bmN0aW9uIGFsbFdlbGxUeXBlZChleHByZXNzaW9uczogcmVhZG9ubHkgRXhwcmVzc2lvbltdKTogZXhwcmVzc2lvbnMgaXMgcmVhZG9ubHkgVHlwZWRFeHByZXNzaW9uW10ge1xyXG4gICAgcmV0dXJuIGV4cHJlc3Npb25zLmV2ZXJ5KChleHByKSA9PiB7IHJldHVybiBleHByLmlzV2VsbFR5cGVkKCk7IH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxsT2JqZWN0VHlwZWQoZXhwcmVzc2lvbnM6IEV4cHJlc3Npb25bXSk6IGV4cHJlc3Npb25zIGlzIFR5cGVkRXhwcmVzc2lvbjxPYmplY3RUeXBlPltdO1xyXG5leHBvcnQgZnVuY3Rpb24gYWxsT2JqZWN0VHlwZWQoZXhwcmVzc2lvbnM6IHJlYWRvbmx5IEV4cHJlc3Npb25bXSk6IGV4cHJlc3Npb25zIGlzIHJlYWRvbmx5IFR5cGVkRXhwcmVzc2lvbjxPYmplY3RUeXBlPltdO1xyXG5leHBvcnQgZnVuY3Rpb24gYWxsT2JqZWN0VHlwZWQoZXhwcmVzc2lvbnM6IHJlYWRvbmx5IEV4cHJlc3Npb25bXSk6IGV4cHJlc3Npb25zIGlzIHJlYWRvbmx5IFR5cGVkRXhwcmVzc2lvbjxPYmplY3RUeXBlPltdIHtcclxuICAgIHJldHVybiBleHByZXNzaW9ucy5ldmVyeSgoZXhwcikgPT4geyByZXR1cm4gZXhwci5pc09iamVjdFR5cGVkKCk7IH0pO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBWQ1Jlc3VsdFR5cGVzPFQgZXh0ZW5kcyBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeT4gPVxyXG4gICAgVCBleHRlbmRzIEZ1bmN0aW9uVHlwZSA/IChcclxuICAgICAgICBWIGV4dGVuZHMgXCJwcnZhbHVlXCIgPyBuZXZlciA6XHJcbiAgICAgICAgViBleHRlbmRzIFwieHZhbHVlXCIgPyBuZXZlciA6XHJcbiAgICAgICAgRnVuY3Rpb25FbnRpdHkgLy8gbHZhbHVlXHJcbiAgICApXHJcbiAgICA6IFQgZXh0ZW5kcyBBdG9taWNUeXBlID8gKFxyXG4gICAgICAgIFYgZXh0ZW5kcyBcInBydmFsdWVcIiA/IFZhbHVlPFQ+IDpcclxuICAgICAgICBWIGV4dGVuZHMgXCJ4dmFsdWVcIiA/IENQUE9iamVjdDxUPiA6XHJcbiAgICAgICAgQ1BQT2JqZWN0PFQ+IC8vIGx2YWx1ZVxyXG4gICAgKVxyXG4gICAgOiBUIGV4dGVuZHMgT2JqZWN0VHlwZSA/IChcclxuICAgICAgICBcclxuICAgICAgICAvLyBlLmcuIElmIFQgaXMgYWN0dWFsbHkgT2JqZWN0VHlwZSwgdGhlbiBpdCBjb3VsZCBiZSBhbiBBdG9taWNUeXBlIGFuZCB3ZSBnbyB3aXRoIHRoZSBmaXJzdCBvcHRpb24gVmFsdWU8QXRvbWljVHlwZT4gfCBDUFBPYmplY3Q8VD4uXHJcbiAgICAgICAgLy8gICAgICBIb3dldmVyLCBpZiBUIGlzIGFjdHVhbGx5IENsYXNzVHlwZSwgdGhlbiBpdCBjYW4ndCBiZSBhbiBBdG9taWNUeXBlIGFuZCB3ZSBnbyB3aXRoIHRoZSBzZWNvbmQgb3B0aW9uIG9mIG9ubHkgQ1BQT2JqZWN0PFQ+XHJcbiAgICAgICAgViBleHRlbmRzIFwicHJ2YWx1ZVwiID8gKEF0b21pY1R5cGUgZXh0ZW5kcyBUID8gVmFsdWU8QXRvbWljVHlwZT4gfCBDUFBPYmplY3Q8VD4gOiBDUFBPYmplY3Q8VD4pIDpcclxuICAgICAgICBWIGV4dGVuZHMgXCJ4dmFsdWVcIiA/IENQUE9iamVjdDxUPiA6XHJcbiAgICAgICAgQ1BQT2JqZWN0PFQ+IC8vIGx2YWx1ZVxyXG4gICAgKVxyXG4gICAgOiAvKk9iamVjdFR5cGUgZXh0ZW5kcyBUID8qLyAoIC8vIFRoYXQgaXMsIFQgaXMgbW9yZSBnZW5lcmFsLCBzbyBpdCdzIHBvc3NpYmxlIFQgaXMgYW4gQXRvbWljVHlwZSBvciBhbiBPYmplY3RUeXBlXHJcbiAgICAgICAgViBleHRlbmRzIFwicHJ2YWx1ZVwiID8gVmFsdWU8QXRvbWljVHlwZT4gfCBDUFBPYmplY3Q8T2JqZWN0VHlwZT4gOlxyXG4gICAgICAgIFYgZXh0ZW5kcyBcInh2YWx1ZVwiID8gQ1BQT2JqZWN0PE9iamVjdFR5cGU+IDpcclxuICAgICAgICBDUFBPYmplY3Q8T2JqZWN0VHlwZT4gLy8gbHZhbHVlXHJcbiAgICApXHJcbiAgICAvLyA6IHsgLy8gT3RoZXJ3aXNlLCBUIGlzIE5PVCBwb3NzaWJseSBhbiBPYmplY3RUeXBlLiBUaGlzIGNvdWxkIGhhcHBlbiB3aXRoIGUuZy4gYW4gbHZhbHVlIGV4cHJlc3Npb24gdGhhdCB5aWVsZHMgYSBmdW5jdGlvblxyXG4gICAgLy8gICAgIHJlYWRvbmx5IHBydmFsdWU6IG51bWJlcjtcclxuICAgIC8vICAgICByZWFkb25seSB4dmFsdWU6IG51bWJlcjtcclxuICAgIC8vICAgICByZWFkb25seSBsdmFsdWU6IG51bWJlcjtcclxuICAgIC8vIH07XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUgPSBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeSA9IFZhbHVlQ2F0ZWdvcnksIEMgZXh0ZW5kcyBDb21waWxlZEV4cHJlc3Npb248VCxWPiA9IENvbXBpbGVkRXhwcmVzc2lvbjxULFY+PiBleHRlbmRzIFJ1bnRpbWVQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbjxDPiB7XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogV0FSTklORzogVGhlIGV2YWxSZXN1bHQgcHJvcGVydHkgbWF5IGJlIHVuZGVmaW5lZCwgZXZlbiB0aG91Z2ggaXQncyB0eXBlIHN1Z2dlc3RzIGl0IHdpbGwgYWx3YXlzXHJcbiAgICAgKiBiZSBkZWZpbmVkLiBJbiBtb3N0IHBsYWNlcyB3aGVyZSBpdCBpcyBhY2Nlc3NlZCwgdGhlcmUgaXMgYW4gaW1wbGljaXQgYXNzdW1wdGlvbiB0aGF0IHRoZSBleHByZXNzaW9uXHJcbiAgICAgKiB3aWxsIGFscmVhZHkgaGF2ZSBiZWVuIGV2YWx1YXRlZCBhbmQgdGhlIGNsaWVudCBjb2RlIHdvdWxkIGVuZCB1cCBuZWVkaW5nIGEgbm9uLW51bGwgYXNzZXJ0aW9uIGFueXdheS5cclxuICAgICAqIEhvd2V2ZXIsIHRob3NlIG5vbi1udWxsIGFzc2VydGlvbnMgYWN0dWFsbHkgaW50cm9kdWNlIHNvbWUgdHJpY2t5IGNvbXBsaWNhdGlvbnMgd2l0aCBWQ1Jlc3VsdFR5cGVzLFxyXG4gICAgICogd2hpY2ggY2F1c2UgdHlwZSBlcnJvcnMgYW5kIGFyZSBhIGh1Z2UgcGFpbi4gU28gaW5zdGVhZCB3ZSB0ZWxsIHRoZSB0eXBlIHN5c3RlbSB0byB0cnVzdCB1cy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGV2YWxSZXN1bHQhOiBWQ1Jlc3VsdFR5cGVzPFQsVj47XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG1vZGVsOiBDLCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgXCJleHByZXNzaW9uXCIsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHNldEV2YWxSZXN1bHQodmFsdWU6IFZDUmVzdWx0VHlwZXM8VCxWPikge1xyXG4gICAgICAgICg8TXV0YWJsZTx0aGlzPj50aGlzKS5ldmFsUmVzdWx0ID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWRFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVzc2lvbiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGUgPSB1bmRlZmluZWQ7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQsIHVuc3VwcG9ydGVkTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcbiAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmxvYnN0ZXIudW5zdXBwb3J0ZWRfZmVhdHVyZSh0aGlzLCB1bnN1cHBvcnRlZE5hbWUpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBXaWxsIG5ldmVyIGJlIGNhbGxlZCBzaW5jZSBhbiBVbnN1cHBvcnRlZEV4cHJlc3Npb24gd2lsbCBhbHdheXMgaGF2ZSBlcnJvcnMgYW5kXHJcbiAgICAvLyBuZXZlciBzYXRpc2Z5IHRoZSByZXF1aXJlZCB0aGlzIGNvbnRleHQgb2YgQ29tcGlsZWRFeHByZXNzaW9uXHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb24odGhpczogQ29tcGlsZWRFeHByZXNzaW9uLCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogbmV2ZXIge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgYSBydW50aW1lIGluc3RhbmNlIG9mIGFuIHVuc3VwcG9ydGVkIGNvbnN0cnVjdC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlRXZhbFJlc3VsdChkZXB0aDogbnVtYmVyKTogRGVzY3JpcHRpb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiYW4gdW5zdXBwb3J0ZWQgZXhwcmVzc2lvblwiXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8vIHByb2Nlc3NOb25NZW1iZXJPdmVybG9hZCA6IGZ1bmN0aW9uKGFyZ3MsIG9wKXtcclxuICAgIC8vICAgICB0cnl7XHJcbiAgICAvLyAgICAgICAgIHZhciBvdmVybG9hZGVkT3AgPSB0aGlzLmNvbnRleHR1YWxTY29wZS5yZXF1aXJlZExvb2t1cChcIm9wZXJhdG9yXCIrb3AsIHtcclxuICAgIC8vICAgICAgICAgICAgIG93bjp0cnVlLCBwYXJhbVR5cGVzOmFyZ3MubWFwKGZ1bmN0aW9uKGFyZyl7cmV0dXJuIGFyZy50eXBlO30pXHJcbiAgICAvLyAgICAgICAgIH0pO1xyXG4gICAgLy8gICAgICAgICB0aGlzLmZ1bmNDYWxsID0gdGhpcy5zdWIuZnVuY0NhbGwgPSBGdW5jdGlvbkNhbGwuaW5zdGFuY2UodGhpcy5jb2RlLCB7cGFyZW50OnRoaXN9KTtcclxuICAgIC8vICAgICAgICAgdGhpcy5zdWIuZnVuY0NhbGwuY29tcGlsZShvdmVybG9hZGVkT3AsIGFyZ3MubWFwKGZ1bmN0aW9uKGFyZyl7cmV0dXJuIGFyZy5jb2RlO30pKTtcclxuICAgIC8vICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5zdWIuZnVuY0NhbGwudHlwZTtcclxuICAgIC8vICAgICAgICAgdGhpcy52YWx1ZUNhdGVnb3J5ID0gdGhpcy5zdWIuZnVuY0NhbGwudmFsdWVDYXRlZ29yeTtcclxuICAgIC8vICAgICAgICAgdGhpcy5pX2NoaWxkcmVuVG9FeGVjdXRlID0gdGhpcy5pX2NoaWxkcmVuVG9FeGVjdXRlRm9yT3ZlcmxvYWQ7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGNhdGNoKGUpe1xyXG4gICAgLy8gICAgICAgICBpZiAoaXNBKGUsIFNlbWFudGljRXhjZXB0aW9ucy5CYWRMb29rdXApKXtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLm92ZXJsb2FkTG9va3VwKHRoaXMsIG9wKSk7XHJcbiAgICAvLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoZS5hbm5vdGF0aW9uKHRoaXMpKTtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybjtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICBlbHNle1xyXG4gICAgLy8gICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH0sXHJcblxyXG5cclxuICAgIC8vIGNvbXBpbGVNZW1iZXJPdmVybG9hZCA6IGZ1bmN0aW9uKHRoaXNBcmcsIGFyZ0FzdHMsIGlzVGhpc0NvbnN0LCBvcCl7XHJcbiAgICAvLyAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgLy8gICAgIHZhciBhdXhBcmdzID0gYXJnQXN0cy5tYXAoZnVuY3Rpb24oYXJnQXN0KXtcclxuICAgIC8vICAgICAgICAgdmFyIGF1eEFyZyA9IENQUENvbnN0cnVjdC5jcmVhdGUoYXJnQXN0LCB7cGFyZW50OiBzZWxmLCBhdXhpbGlhcnk6IHRydWV9KTtcclxuICAgIC8vICAgICAgICAgYXV4QXJnLnRyeUNvbXBpbGUoKTtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIGF1eEFyZztcclxuICAgIC8vICAgICB9KTtcclxuXHJcbiAgICAvLyAgICAgdHJ5e1xyXG4gICAgLy8gICAgICAgICB2YXIgb3ZlcmxvYWRlZE9wID0gdGhpc0FyZy50eXBlLmNsYXNzU2NvcGUucmVxdWlyZWRMb29rdXAoXCJvcGVyYXRvclwiK29wLCB7XHJcbiAgICAvLyAgICAgICAgICAgICBvd246dHJ1ZSwgcGFyYW1UeXBlczphdXhBcmdzLm1hcChmdW5jdGlvbihhcmcpe3JldHVybiBhcmcudHlwZTt9KSxcclxuICAgIC8vICAgICAgICAgICAgIGlzVGhpc0NvbnN0OiBpc1RoaXNDb25zdFxyXG4gICAgLy8gICAgICAgICB9KTtcclxuXHJcbiAgICAvLyAgICAgICAgIHRoaXMuaXNPdmVybG9hZCA9IHRydWU7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuaXNNZW1iZXJPdmVybG9hZCA9IHRydWU7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuZnVuY0NhbGwgPSBGdW5jdGlvbkNhbGwuaW5zdGFuY2Uoe2FyZ3M6IGFyZ0FzdHN9LCB7cGFyZW50OnRoaXN9KTtcclxuICAgIC8vICAgICAgICAgdGhpcy5mdW5jQ2FsbC5jb21waWxlKHtmdW5jOiBvdmVybG9hZGVkT3B9KTtcclxuICAgIC8vICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5mdW5jQ2FsbC50eXBlO1xyXG4gICAgLy8gICAgICAgICB0aGlzLnZhbHVlQ2F0ZWdvcnkgPSB0aGlzLmZ1bmNDYWxsLnZhbHVlQ2F0ZWdvcnk7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuaV9jaGlsZHJlblRvRXhlY3V0ZSA9IHRoaXMuaV9jaGlsZHJlblRvRXhlY3V0ZUZvck1lbWJlck92ZXJsb2FkO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBjYXRjaChlKXtcclxuICAgIC8vICAgICAgICAgaWYgKGlzQShlLCBTZW1hbnRpY0V4Y2VwdGlvbnMuQmFkTG9va3VwKSl7XHJcbiAgICAvLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5vdmVybG9hZExvb2t1cCh0aGlzLCBvcCkpO1xyXG4gICAgLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKGUuYW5ub3RhdGlvbih0aGlzKSk7XHJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcblxyXG5cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTaW1wbGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgVHlwZSA9IFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gVmFsdWVDYXRlZ29yeSwgQyBleHRlbmRzIENvbXBpbGVkRXhwcmVzc2lvbjxULFY+ID0gQ29tcGlsZWRFeHByZXNzaW9uPFQsVj4+IGV4dGVuZHMgUnVudGltZUV4cHJlc3Npb248VCxWLEM+IHtcclxuXHJcbiAgICBwcml2YXRlIGluZGV4IDogMCB8IDEgPSAwO1xyXG5cclxuICAgIC8vIE5vdGU6IHRoaXMgaXMgUnVudGltZUNvbnN0cnVjdCByYXRoZXIgdGhhbiBSdW50aW1lRXhwcmVzc2lvbiwgYmVjYXVzZSBSdW50aW1lRXhwcmVzc2lvbiBpcyBpbXBsaWNpdGx5XHJcbiAgICAvLyAgICAgICBSdW50aW1lRXhwcmVzc2lvbjxUeXBlLCBWYWx1ZUNhdGVnb3J5PiBhbmQgcGFydGljdWxhciBpbnN0YW50aWF0aW9ucyBtYXkgbm90XHJcbiAgICBwcml2YXRlIHN1YmV4cHJlc3Npb25zOiBSdW50aW1lQ29uc3RydWN0W10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDLCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc2V0U3ViZXhwcmVzc2lvbnMoc3ViZXhwcmVzc2lvbnM6IFJ1bnRpbWVDb25zdHJ1Y3RbXSkge1xyXG4gICAgICAgIHRoaXMuc3ViZXhwcmVzc2lvbnMgPSBzdWJleHByZXNzaW9ucztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgdXBOZXh0SW1wbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pbmRleCA9PT0gMCkgeyAvLyBzdWJleHByZXNzaW9uc1xyXG4gICAgICAgICAgICAvLyBwdXNoIHN1YmV4cHJlc3Npb25zIGluIHJldmVyc2Ugb3JkZXIgc2luY2UgaXQncyBhIHN0YWNrXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN1YmV4cHJlc3Npb25zLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpbS5wdXNoKHRoaXMuc3ViZXhwcmVzc2lvbnNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSAxOyAvLyBvcGVyYXRlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgc3RlcEZvcndhcmRJbXBsKCkge1xyXG4gICAgICAgIHRoaXMub3BlcmF0ZSgpO1xyXG4gICAgICAgIHRoaXMuZG9uZSgpO1xyXG4gICAgICAgIC8vIFRPRE86IGhvdyBkbyBleHByZXNzaW9ucyBwb3AgdGhlbXNlbHZlcz9cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3Qgb3BlcmF0ZSgpIDogdm9pZDtcclxufVxyXG5cclxuXHJcbi8vIGFic3RyYWN0IGNsYXNzIExSRXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24ge1xyXG4vLyAgICAgdF9jb21waWxlZFR5cGUhIDogRXhwcmVzc2lvbltcInRfY29tcGlsZWRUeXBlXCJdICYge1xyXG4vLyAgICAgICAgIGxlZnQ6IENvbXBpbGVkRXhwcmVzc2lvbjxFeHByZXNzaW9uLCBUeXBlLCBcInBydmFsdWVcIj47XHJcbi8vICAgICAgICAgcmlnaHQ6IENvbXBpbGVkRXhwcmVzc2lvbjxFeHByZXNzaW9uLCBUeXBlLCBcInBydmFsdWVcIj47XHJcbi8vICAgICB9XHJcbi8vIH07XHJcblxyXG5cclxudHlwZSB0X092ZXJsb2FkYWJsZU9wZXJhdG9ycyA9XHJcbiAgICBcIitcIiB8IFwiLVwiIHwgXCIqXCIgfCBcIi9cIiB8IFwiJVwiIHxcclxuICAgIFwiJlwiIHwgXCJ8XCIgfCBcIl5cIiB8IFwiflwiIHwgXCI8PFwiIHwgXCI+PlwiIHwgXCI8XCIgfCBcIj5cIiB8IFwiPD1cIiB8XHJcbiAgICBcIj49XCIgfCBcIj09XCIgfCBcIiE9XCIgfCBcIiYmXCIgfCBcInx8XCIgfCBcIiFcIiB8IFwiKytcIiB8IFwiLS1cIiB8XHJcbiAgICBcIis9XCIgfCBcIi09XCIgfCBcIio9XCIgfCBcIi89XCIgfCBcIiU9XCIgfCBcIiY9XCIgfCBcInw9XCIgfCBcIl49XCIgfCBcIjw8PVwiIHwgXCI+Pj1cIiB8XHJcbiAgICBcIixcIiB8IFwiLT5cIiB8IFwiLT4qXCIgfCBcIigpXCIgfCBcIltdXCI7XHJcblxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIE9wZXJhdG9yT3ZlcmxvYWQgZXh0ZW5kcyBFeHByZXNzaW9uIHtcclxuXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZT86IFR5cGU7XHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeT86IFZhbHVlQ2F0ZWdvcnk7XHJcblxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IG9wZXJhdG9yOiB0X092ZXJsb2FkYWJsZU9wZXJhdG9ycztcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBvcGVyYW5kczogRXhwcmVzc2lvbltdO1xyXG4gICAgXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgaXNNZW1iZXJPdmVybG9hZD86IGJvb2xlYW47XHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgb3ZlcmxvYWRGdW5jdGlvbkNhbGw/OiBGdW5jdGlvbkNhbGw7XHJcblxyXG4vLyAgICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCwgb3BlcmFuZHM6IEV4cHJlc3Npb25bXSwgb3BlcmF0b3I6IHRfT3ZlcmxvYWRhYmxlT3BlcmF0b3JzKSB7XHJcbi8vICAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcblxyXG4vLyAgICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcclxuLy8gICAgICAgICB0aGlzLm9wZXJhbmRzID0gb3BlcmFuZHM7IC8vIFRoZXNlIG1heSBnbyB0aHJvdWdoIGNvbnZlcnNpb25zIHdoZW4gYXR0YWNoZWQgdG8gYSBmdW5jdGlvbiBjYWxsLCBidXQgdGhpcyBtZW1iZXIgY29udGFpbnMgdGhlIFwicmF3XCIgdmVyc2lvbnNcclxuXHJcbi8vICAgICAgICAgLy8gSWYgYW55IG9mIHRoZSBvcGVyYW5kcyBhcmUgbm90IHdlbGwtdHlwZWQsIGNhbid0IGNvbXBpbGVcclxuLy8gICAgICAgICBpZiAoIXRoaXMuaGFzV2VsbFR5cGVkT3BlcmFuZHMob3BlcmFuZHMpKSB7XHJcbi8vICAgICAgICAgICAgIHRoaXMudHlwZSA9IG51bGw7XHJcbi8vICAgICAgICAgICAgIHRoaXMudmFsdWVDYXRlZ29yeSA9IG51bGw7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIGF0dGFjaCBvcGVyYW5kcyBkaXJlY3RseSBhcyBjaGlsZHJlbi5cclxuLy8gICAgICAgICAgICAgb3BlcmFuZHMuZm9yRWFjaCgoZXhwcikgPT4ge3RoaXMuYXR0YWNoKGV4cHIpO30pO1xyXG4vLyAgICAgICAgICAgICByZXR1cm47XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAvLyBTYW5pdHkgY2hlY2sgdGhhdCBhdCBsZWFzdCBvbmUgb2YgdGhlIG9wZXJhbmRzIGhhcyBjbGFzcy10eXBlXHJcbi8vICAgICAgICAgYXNzZXJ0KG9wZXJhbmRzLmxlbmd0aCA+IDAsIFwiT3BlcmF0b3Igb3ZlcmxvYWQgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBvcGVyYW5kLlwiKTtcclxuLy8gICAgICAgICBhc3NlcnQob3BlcmFuZHMuc29tZSgoZXhwcikgPT4ge3JldHVybiBpc1R5cGUoZXhwci50eXBlLCBDbGFzc1R5cGUpO30pLCBcIkF0IGxlYXN0IG9uZSBvcGVyYW5kIGluIGEgbm9uLW1lbWJlciBvdmVybG9hZCBtdXN0IGhhdmUgY2xhc3MtdHlwZS5cIik7XHJcblxyXG5cclxuLy8gICAgICAgICBsZXQgb3ZlcmxvYWRGdW5jdGlvbiA6IEZ1bmN0aW9uRW50aXR5PyA9IG51bGw7XHJcblxyXG4vLyAgICAgICAgIC8vIElmIHRoZSBsZWZ0bW9zdCBvcGVyYW5kIGlzIGNsYXNzLXR5cGUsIHdlIGNhbiBsb29rIGZvciBhIG1lbWJlciBvdmVybG9hZFxyXG4vLyAgICAgICAgIGxldCBsZWZ0bW9zdCA9IG9wZXJhbmRzWzBdO1xyXG4vLyAgICAgICAgIGlmIChpc1R5cGUobGVmdG1vc3QudHlwZSwgQ2xhc3NUeXBlKSkge1xyXG4vLyAgICAgICAgICAgICBsZXQgZW50aXR5ID0gbGVmdG1vc3QudHlwZS5jcHBDbGFzcy5zY29wZS5zaW5nbGVMb29rdXAoXCJvcGVyYXRvclwiICsgdGhpcy5vcGVyYXRvciwge1xyXG4vLyAgICAgICAgICAgICAgICAgb3duOnRydWUsIHBhcmFtczpbb3BlcmFuZHMuc2xpY2UoMSldLCBpc1RoaXNDb25zdCA6IGxlZnRtb3N0LnR5cGUuaXNDb25zdFxyXG4vLyAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbi8vICAgICAgICAgICAgIFV0aWwuYXNzZXJ0KGVudGl0eSBpbnN0YW5jZW9mIEZ1bmN0aW9uRW50aXR5LCBcIk5vbi1mdW5jdGlvbiBlbnRpdHkgZm91bmQgZm9yIG9wZXJhdG9yIG92ZXJsb2FkIG5hbWUgbG9va3VwLlwiKTtcclxuLy8gICAgICAgICAgICAgb3ZlcmxvYWRGdW5jdGlvbiA9IDxGdW5jdGlvbkVudGl0eT5lbnRpdHk7XHJcbi8vICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4vLyAgICAgICAgIC8vIElmIHdlIGRpZG4ndCBmaW5kIGEgbWVtYmVyIG92ZXJsb2FkLCBuZXh0IGxvb2sgZm9yIGEgbm9uLW1lbWJlciBvdmVybG9hZFxyXG4vLyAgICAgICAgIGlmICghb3ZlcmxvYWRGdW5jdGlvbikge1xyXG4vLyAgICAgICAgICAgICBsZXQgZW50aXR5ID0gdGhpcy5jb250ZXh0dWFsU2NvcGUuc2luZ2xlTG9va3VwKFwib3BlcmF0b3JcIiArIHRoaXMub3BlcmF0b3IsIHtcclxuLy8gICAgICAgICAgICAgICAgIHBhcmFtczogb3BlcmFuZHNcclxuLy8gICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4vLyAgICAgICAgICAgICBVdGlsLmFzc2VydChlbnRpdHkgaW5zdGFuY2VvZiBGdW5jdGlvbkVudGl0eSwgXCJOb24tZnVuY3Rpb24gZW50aXR5IGZvdW5kIGZvciBvcGVyYXRvciBvdmVybG9hZCBuYW1lIGxvb2t1cC5cIik7XHJcbi8vICAgICAgICAgICAgIG92ZXJsb2FkRnVuY3Rpb24gPSA8RnVuY3Rpb25FbnRpdHk+ZW50aXR5O1xyXG4vLyAgICAgICAgIH1cclxuXHJcblxyXG4vLyAgICAgICAgIGlmIChvdmVybG9hZEZ1bmN0aW9uKSB7XHJcbi8vICAgICAgICAgICAgIHRoaXMuaXNNZW1iZXJPdmVybG9hZCA9IG92ZXJsb2FkRnVuY3Rpb24gaW5zdGFuY2VvZiBNZW1iZXJGdW5jdGlvbkVudGl0eTtcclxuXHJcblxyXG4vLyAgICAgICAgICAgICBpZiAodGhpcy5pc01lbWJlck92ZXJsb2FkKSB7XHJcbi8vICAgICAgICAgICAgICAgICAvLyBNZW1iZXIgb3ZlcmxvYWQgbWVhbnMgbGVmdG1vc3Qgb3BlcmFuZCBpcyBvdXIgZGlyZWN0bHkgYXR0YWNoZWQgY2hpbGQsIG90aGVyIG9wZXJhbmRzIGFyZSBhcmd1bWVudHMgdG8gZnVuY3Rpb24gY2FsbC5cclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoKG9wZXJhbmRzWzBdKTtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoKHRoaXMub3ZlcmxvYWRGdW5jdGlvbkNhbGwgPSBuZXcgRnVuY3Rpb25DYWxsKGNvbnRleHQsIG92ZXJsb2FkRnVuY3Rpb24sIG9wZXJhbmRzLnNsaWNlKDEpKSk7XHJcbi8vICAgICAgICAgICAgICAgICAvLyBUaGUgcmVjZWl2ZXIgb2YgdGhlIGZ1bmN0aW9uIGNhbGwgaXMgc2V0IGF0IHJ1bnRpbWUgYWZ0ZXIgdGhlIG9wZXJhbmQgaXMgZXZhbHVhdGVkXHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgICAgIC8vIE5vbi1tZW1iZXIgb3ZlcmxvYWQgbWVhbnMgYWxsIG9wZXJhbmRzIGFyZSBhcmd1bWVudHMgb2YgdGhlIGZ1bmN0aW9uIGNhbGxcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoKHRoaXMub3ZlcmxvYWRGdW5jdGlvbkNhbGwgPSBuZXcgRnVuY3Rpb25DYWxsKGNvbnRleHQsIG92ZXJsb2FkRnVuY3Rpb24sIG9wZXJhbmRzKSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgICAgIHRoaXMudHlwZSA9IHRoaXMub3ZlcmxvYWRGdW5jdGlvbkNhbGwuZnVuYy50eXBlLnJldHVyblR5cGU7XHJcbi8vICAgICAgICAgICAgIHRoaXMudmFsdWVDYXRlZ29yeSA9IHRoaXMub3ZlcmxvYWRGdW5jdGlvbkNhbGwudmFsdWVDYXRlZ29yeTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgLy8gVE9ETzogYWRkIGluIG5vdGVzIGZyb20gYXR0ZW1wdGVkIGxvb2t1cCBvcGVyYXRpb25zIGZvciB0aGUgbWVtYmVyIGFuZCBub24tbWVtYmVyIG92ZXJsb2Fkc1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5iaW5hcnkub3ZlcmxvYWRfbm90X2ZvdW5kKHRoaXMsIG9wZXJhdG9yLCBvcGVyYW5kcykpO1xyXG5cclxuLy8gICAgICAgICAgICAgdGhpcy50eXBlID0gbnVsbDtcclxuLy8gICAgICAgICAgICAgdGhpcy52YWx1ZUNhdGVnb3J5ID0gbnVsbDtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIElmIHdlIGRpZG4ndCBmaW5kIGEgZnVuY3Rpb24gdG8gdXNlLCBqdXN0IGF0dGFjaCBvcGVyYW5kcyBkaXJlY3RseSBhcyBjaGlsZHJlbi5cclxuLy8gICAgICAgICAgICAgb3BlcmFuZHMuZm9yRWFjaCgoZXhwcikgPT4ge3RoaXMuYXR0YWNoKGV4cHIpO30pO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwcml2YXRlIGhhc1dlbGxUeXBlZE9wZXJhbmRzKG9wZXJhbmRzOiBFeHByZXNzaW9uW10pIDogb3BlcmFuZHMgaXMgVHlwZWRFeHByZXNzaW9uW10ge1xyXG4vLyAgICAgICAgIHJldHVybiBvcGVyYW5kcy5ldmVyeSgoZXhwcikgPT4geyByZXR1cm4gZXhwci5pc1dlbGxUeXBlZCgpOyB9KTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5Pih0aGlzOiBDb21waWxlZEV4cHJlc3Npb248VCxWPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVPcGVyYXRvck92ZXJsb2FkPENvbXBpbGVkT3BlcmF0b3JPdmVybG9hZDxULFY+PiB7XHJcbi8vICAgICAgICAgcmV0dXJuIG5ldyBSdW50aW1lT3BlcmF0b3JPdmVybG9hZCh0aGlzLCBwYXJlbnQpO1xyXG4vLyAgICAgfVxyXG4gICAgXHJcbi8vICAgICBwdWJsaWMgZGVzY3JpYmVFdmFsUmVzdWx0KGRlcHRoOiBudW1iZXIpOiBEZXNjcmlwdGlvbiB7XHJcbi8vICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbi8vICAgICB9XHJcblxyXG5cclxuXHJcbi8vICAgICAvLyB1cE5leHQgOiBDbGFzcy5BRERJVElPTkFMTFkoZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAvLyAgICAgaWYgKHRoaXMuZnVuY0NhbGwpe1xyXG4vLyAgICAgLy8gICAgICAgICBpbnN0LmNoaWxkSW5zdGFuY2VzLmZ1bmNDYWxsLmdldFJ1bnRpbWVGdW5jdGlvbigpLnNldFJlY2VpdmVyKEV2YWx1YXRpb25SZXN1bHRSdW50aW1lRW50aXR5Lmluc3RhbmNlKHRoaXMubGhzLnR5cGUsIGluc3QuY2hpbGRJbnN0YW5jZXMubGhzKSk7XHJcbi8vICAgICAvLyAgICAgfVxyXG4vLyAgICAgLy8gfSksXHJcblxyXG4vLyAgICAgLy8gc3RlcEZvcndhcmQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuXHJcbi8vICAgICAvLyAgICAgaWYgKGluc3QuaW5kZXggPT0gXCJvcGVyYXRlXCIpe1xyXG5cclxuLy8gICAgIC8vICAgICAgICAgaWYgKHRoaXMuZnVuY0NhbGwpe1xyXG4vLyAgICAgLy8gICAgICAgICAgICAgLy8gQXNzaWdubWVudCBvcGVyYXRvciBmdW5jdGlvbiBjYWxsIGhhcyBhbHJlYWR5IHRha2VuIGNhcmUgb2YgdGhlIFwiYXNzaWdubWVudFwiLlxyXG4vLyAgICAgLy8gICAgICAgICAgICAgLy8gSnVzdCBldmFsdWF0ZSB0byByZXR1cm5lZCB2YWx1ZSBmcm9tIGFzc2lnbm1lbnQgb3BlcmF0b3IuXHJcbi8vICAgICAvLyAgICAgICAgICAgICBpbnN0LnNldEV2YWxSZXN1bHQoaW5zdC5jaGlsZEluc3RhbmNlcy5mdW5jQ2FsbC5ldmFsUmVzdWx0KTtcclxuLy8gICAgIC8vICAgICAgICAgICAgIHRoaXMuZG9uZShzaW0sIGluc3QpO1xyXG4vLyAgICAgLy8gICAgICAgICAgICAgLy9yZXR1cm4gdHJ1ZTtcclxuLy8gICAgIC8vICAgICAgICAgfVxyXG4vLyAgICAgLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgLy8gICAgICAgICB9XHJcbi8vICAgICAvLyAgICAgfVxyXG4vLyAgICAgLy8gfSxcclxuXHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRPcGVyYXRvck92ZXJsb2FkPFQgZXh0ZW5kcyBQb3RlbnRpYWxSZXR1cm5UeXBlID0gUG90ZW50aWFsUmV0dXJuVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPSBWYWx1ZUNhdGVnb3J5PiBleHRlbmRzIE9wZXJhdG9yT3ZlcmxvYWQsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuICAgIFxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IFQ7XHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeTogVjtcclxuXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgb3BlcmFuZHM6IENvbXBpbGVkRXhwcmVzc2lvbltdO1xyXG4gICAgXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgaXNNZW1iZXJPdmVybG9hZDogYm9vbGVhbjtcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBvdmVybG9hZEZ1bmN0aW9uQ2FsbDogQ29tcGlsZWRGdW5jdGlvbkNhbGw8VCxWPjsgXHJcbi8vIH1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tbWFBU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJjb21tYV9leHByZXNzaW9uXCI7XHJcbiAgICByZWFkb25seSBvcGVyYXRvcjogXCIsXCI7XHJcbiAgICByZWFkb25seSBsZWZ0OiBFeHByZXNzaW9uQVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IHJpZ2h0OiBFeHByZXNzaW9uQVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IGFzc29jaWF0aXZpdHk6IFwibGVmdFwiO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tbWFFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVzc2lvbiB7XHJcbiAgICBcclxuICAgIC8vIFRPRE86IHdoYXQgaXMgdGhpcyBmb3I/XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGNvbnN0cnVjdEtpbmQgPSBTeW1ib2woXCJDb21tYVwiKTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZT86IFR5cGU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeT86IFZhbHVlQ2F0ZWdvcnk7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGxlZnQ6IEV4cHJlc3Npb247XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmlnaHQ6IEV4cHJlc3Npb247XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0LCBsZWZ0OiBFeHByZXNzaW9uLCByaWdodDogRXhwcmVzc2lvbikge1xyXG4gICAgICAgIHN1cGVyKGNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHJpZ2h0LnR5cGU7XHJcbiAgICAgICAgdGhpcy52YWx1ZUNhdGVnb3J5ID0gcmlnaHQudmFsdWVDYXRlZ29yeTtcclxuICAgICAgICB0aGlzLmF0dGFjaCh0aGlzLmxlZnQgPSBsZWZ0KTtcclxuICAgICAgICB0aGlzLmF0dGFjaCh0aGlzLnJpZ2h0ID0gcmlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbUFTVChhc3Q6IENvbW1hQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpIDogQ29tbWFFeHByZXNzaW9uIHtcclxuICAgICAgICByZXR1cm4gbmV3IENvbW1hRXhwcmVzc2lvbihjb250ZXh0LCBjcmVhdGVFeHByZXNzaW9uRnJvbUFTVChhc3QubGVmdCwgY29udGV4dCksIGNyZWF0ZUV4cHJlc3Npb25Gcm9tQVNUKGFzdC5yaWdodCwgY29udGV4dCkpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBwdWJsaWMgaXNTdWNjZXNzZnVsbHlDb21waWxlZCgpOiB0aGlzIGlzIENvbW1hPHRydWU+IHtcclxuICAgIC8vICAgICByZXR1cm4gIXRoaXMuaGFzRXJyb3JzO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+KHRoaXM6IENvbXBpbGVkQ29tbWE8VCxWPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVDb21tYTxULFY+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVDb21tYSg8Q29tcGlsZWRDb21tYTxULFY+PnRoaXMsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHVibGljIGlzVGFpbENoaWxkKGNoaWxkOiBDUFBDb25zdHJ1Y3QpIHtcclxuICAgIC8vICAgICBpZiAoY2hpbGQgPT09IHRoaXMucmlnaHQpe1xyXG4gICAgLy8gICAgICAgICByZXR1cm4ge2lzVGFpbDogdHJ1ZSxcclxuICAgIC8vICAgICAgICAgICAgIHJlYXNvbjogXCJUaGUgcmVjdXJzaXZlIGNhbGwgaXMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGNvbW1hLCBzbyBpdCBpcyBndWFyYW50ZWVkIHRvIGJlIGV2YWx1YXRlZCBsYXN0LlwiXHJcbiAgICAvLyAgICAgICAgIH07XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiB7aXNUYWlsOiBmYWxzZSxcclxuICAgIC8vICAgICAgICAgICAgIHJlYXNvbjogXCJUaGUgZXhwcmVzc2lvbiBvbiB0aGUgcmlnaHQgb2YgdGhlIGNvbW1hIHdpbGwgYmUgZXZhbHVhdGVkIGFmdGVyIHRoZSByZWN1cnNpdmUgY2FsbC5cIixcclxuICAgIC8vICAgICAgICAgICAgIG90aGVyczogW3RoaXMucmlnaHRdXHJcbiAgICAvLyAgICAgICAgIH07XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZUV2YWxSZXN1bHQoZGVwdGg6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJpZ2h0LmRlc2NyaWJlRXZhbFJlc3VsdChkZXB0aCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkQ29tbWE8VCBleHRlbmRzIFR5cGUgPSBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeSA9IFZhbHVlQ2F0ZWdvcnk+IGV4dGVuZHMgQ29tbWFFeHByZXNzaW9uLCBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcbiAgICByZWFkb25seSB0ZW1wb3JhcnlEZWFsbG9jYXRvcj86IENvbXBpbGVkVGVtcG9yYXJ5RGVhbGxvY2F0b3I7IC8vIHRvIG1hdGNoIENvbXBpbGVkUG90ZW50aWFsRnVsbEV4cHJlc3Npb24gc3RydWN0dXJlXHJcbiAgICByZWFkb25seSB0eXBlOiBUO1xyXG4gICAgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeTogVjtcclxuICAgIHJlYWRvbmx5IGxlZnQ6IENvbXBpbGVkRXhwcmVzc2lvbjtcclxuICAgIHJlYWRvbmx5IHJpZ2h0OiBDb21waWxlZEV4cHJlc3Npb248VCxWPjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVDb21tYTxUIGV4dGVuZHMgVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+IGV4dGVuZHMgU2ltcGxlUnVudGltZUV4cHJlc3Npb248VCxWLENvbXBpbGVkQ29tbWE8VCxWPj4ge1xyXG5cclxuICAgIHB1YmxpYyBsZWZ0OiBSdW50aW1lRXhwcmVzc2lvbjtcclxuICAgIHB1YmxpYyByaWdodDogUnVudGltZUV4cHJlc3Npb248VCxWPjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDb21waWxlZENvbW1hPFQsVj4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsLCBwYXJlbnQpO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLm1vZGVsLnJpZ2h0LmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubGVmdCA9IHRoaXMubW9kZWwubGVmdC5jcmVhdGVSdW50aW1lRXhwcmVzc2lvbih0aGlzKTtcclxuICAgICAgICB0aGlzLnNldFN1YmV4cHJlc3Npb25zKFt0aGlzLmxlZnQsIHRoaXMucmlnaHRdKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb3BlcmF0ZSgpIHtcclxuICAgICAgICB0aGlzLnNldEV2YWxSZXN1bHQodGhpcy5yaWdodC5ldmFsUmVzdWx0KTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVybmFyeUFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcInRlcm5hcnlfZXhwcmVzc2lvblwiO1xyXG4gICAgcmVhZG9ubHkgY29uZGl0aW9uOiBFeHByZXNzaW9uQVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IHRoZW46IEV4cHJlc3Npb25BU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgb3RoZXJ3aXNlOiBFeHByZXNzaW9uQVNUTm9kZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRlcm5hcnlFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVzc2lvbiB7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlPzogVHlwZTtcclxuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZUNhdGVnb3J5PzogVmFsdWVDYXRlZ29yeTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZGl0aW9uOiBFeHByZXNzaW9uO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHRoZW46IEV4cHJlc3Npb247XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgb3RoZXJ3aXNlOiBFeHByZXNzaW9uO1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgX3RfY29tcGlsZWQhOiBDb21waWxlZFRlcm5hcnk7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0LCBjb25kaXRpb246IEV4cHJlc3Npb24sIHRoZW46IEV4cHJlc3Npb24sIG90aGVyd2lzZTogRXhwcmVzc2lvbikge1xyXG4gICAgICAgIHN1cGVyKGNvbnRleHQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGNvbmRpdGlvbi5pc1dlbGxUeXBlZCgpKSB7XHJcbiAgICAgICAgICAgIGNvbmRpdGlvbiA9IHRoaXMuY29tcGlsZUNvbmRpdGlvbihjb25kaXRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoZW4uaXNXZWxsVHlwZWQoKSAmJiBvdGhlcndpc2UuaXNXZWxsVHlwZWQoKSkge1xyXG4gICAgICAgICAgICAoe3RoZW4sIG90aGVyd2lzZX0gPSB0aGlzLmNvbXBpbGVDb25zZXF1ZW5jZXModGhlbiwgb3RoZXJ3aXNlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmF0dGFjaCh0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbik7XHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy50aGVuID0gdGhlbik7XHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy5vdGhlcndpc2UgPSBvdGhlcndpc2UpO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSB0aGVuLnR5cGU7XHJcbiAgICAgICAgdGhpcy52YWx1ZUNhdGVnb3J5ID0gdGhlbi52YWx1ZUNhdGVnb3J5O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21BU1QoYXN0OiBUZXJuYXJ5QVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpIDogVGVybmFyeUV4cHJlc3Npb24ge1xyXG4gICAgICAgIHJldHVybiBuZXcgVGVybmFyeUV4cHJlc3Npb24oY29udGV4dCxcclxuICAgICAgICAgICAgY3JlYXRlRXhwcmVzc2lvbkZyb21BU1QoYXN0LmNvbmRpdGlvbiwgY29udGV4dCksXHJcbiAgICAgICAgICAgIGNyZWF0ZUV4cHJlc3Npb25Gcm9tQVNUKGFzdC50aGVuLCBjb250ZXh0KSxcclxuICAgICAgICAgICAgY3JlYXRlRXhwcmVzc2lvbkZyb21BU1QoYXN0Lm90aGVyd2lzZSwgY29udGV4dCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29tcGlsZUNvbmRpdGlvbihjb25kaXRpb24gOiBUeXBlZEV4cHJlc3Npb24pIHtcclxuICAgICAgICBjb25kaXRpb24gPSBzdGFuZGFyZENvbnZlcnNpb24oY29uZGl0aW9uLCBuZXcgQm9vbCgpKTtcclxuICAgICAgICBpZiAoIWlzVHlwZShjb25kaXRpb24udHlwZSwgQm9vbCkpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIudGVybmFyeS5jb25kaXRpb25fYm9vbChjb25kaXRpb24sIGNvbmRpdGlvbi50eXBlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb25kaXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb21waWxlQ29uc2VxdWVuY2VzKHRoZW46IFR5cGVkRXhwcmVzc2lvbiwgb3RoZXJ3aXNlOiBUeXBlZEV4cHJlc3Npb24pIHtcclxuICAgICAgICAvLyBJZiBvbmUgb2YgdGhlIGV4cHJlc3Npb25zIGlzIGEgcHJ2YWx1ZSwgYXR0ZW1wdCB0byBtYWtlIHRoZSBvdGhlciBvbmUgYXMgd2VsbFxyXG4gICAgICAgIGlmICh0aGVuLmlzUHJ2YWx1ZSgpICYmIG90aGVyd2lzZS5pc0x2YWx1ZSgpKSB7XHJcbiAgICAgICAgICAgIG90aGVyd2lzZSA9IGNvbnZlcnRUb1BSVmFsdWUob3RoZXJ3aXNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob3RoZXJ3aXNlLmlzUHJ2YWx1ZSgpICYmIHRoZW4uaXNMdmFsdWUoKSkge1xyXG4gICAgICAgICAgICB0aGVuID0gY29udmVydFRvUFJWYWx1ZSh0aGVuKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuXHJcbiAgICAgICAgaWYgKCFzYW1lVHlwZSh0aGVuLnR5cGUsIG90aGVyd2lzZS50eXBlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IubG9ic3Rlci50ZXJuYXJ5U2FtZVR5cGUodGhpcywgdGhlbi50eXBlLCBvdGhlcndpc2UudHlwZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNUeXBlKHRoZW4udHlwZSwgVm9pZFR5cGUpIHx8IGlzVHlwZShvdGhlcndpc2UudHlwZSwgVm9pZFR5cGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5sb2JzdGVyLnRlcm5hcnlOb1ZvaWQodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhlbi52YWx1ZUNhdGVnb3J5ICE9PSBvdGhlcndpc2UudmFsdWVDYXRlZ29yeSl7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLnRlcm5hcnkuc2FtZVZhbHVlQ2F0ZWdvcnkodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4ge3RoZW4sIG90aGVyd2lzZX07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFQgZXh0ZW5kcyBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeT4odGhpczogQ29tcGlsZWRUZXJuYXJ5PFQsVj4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lVGVybmFyeTxULFY+O1xyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFQgZXh0ZW5kcyBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeT4odGhpczogQ29tcGlsZWRFeHByZXNzaW9uPFQsVj4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBuZXZlcjtcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+KHRoaXM6IENvbXBpbGVkVGVybmFyeTxULFY+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogUnVudGltZVRlcm5hcnk8VCxWPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSdW50aW1lVGVybmFyeSh0aGlzLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE9cclxuICAgIHB1YmxpYyBkZXNjcmliZUV2YWxSZXN1bHQoZGVwdGg6IG51bWJlcik6IERlc2NyaXB0aW9uIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbiAgICAvLyBwdWJsaWMgaXNUYWlsQ2hpbGQoY2hpbGQ6IENQUENvbnN0cnVjdCkge1xyXG4gICAgLy8gICAgIGlmIChjaGlsZCA9PT0gdGhpcy5jb25kaXRpb24pe1xyXG4gICAgLy8gICAgICAgICByZXR1cm4ge2lzVGFpbDogZmFsc2UsXHJcbiAgICAvLyAgICAgICAgICAgICByZWFzb246IFwiT25lIG9mIHRoZSB0d28gc3ViZXhwcmVzc2lvbnMgaW4gdGhlIHRlcm5hcnkgb3BlcmF0b3Igd2lsbCBiZSBldmFsdWF0ZWQgYWZ0ZXIgdGhlIGZ1bmN0aW9uIGNhbGwuXCIsXHJcbiAgICAvLyAgICAgICAgICAgICBvdGhlcnM6IFt0aGlzLnRoZW4sIHRoaXMub3RoZXJ3aXNlXVxyXG4gICAgLy8gICAgICAgICB9O1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBlbHNle1xyXG4gICAgLy8gICAgICAgICByZXR1cm4ge2lzVGFpbDogdHJ1ZX07XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkVGVybmFyeTxUIGV4dGVuZHMgVHlwZSA9IFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gVmFsdWVDYXRlZ29yeT4gZXh0ZW5kcyBUZXJuYXJ5RXhwcmVzc2lvbiwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG4gICAgcmVhZG9ubHkgdHlwZTogVDtcclxuICAgIHJlYWRvbmx5IHZhbHVlQ2F0ZWdvcnk6IFY7XHJcbiAgICByZWFkb25seSBjb25kaXRpb246IENvbXBpbGVkRXhwcmVzc2lvbjxCb29sLCBcInBydmFsdWVcIj47XHJcbiAgICByZWFkb25seSB0aGVuOiBDb21waWxlZEV4cHJlc3Npb248VCxWPjtcclxuICAgIHJlYWRvbmx5IG90aGVyd2lzZTogQ29tcGlsZWRFeHByZXNzaW9uPFQsVj47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lVGVybmFyeTxUIGV4dGVuZHMgVHlwZSA9IFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gVmFsdWVDYXRlZ29yeT4gZXh0ZW5kcyBSdW50aW1lRXhwcmVzc2lvbjxULFYsQ29tcGlsZWRUZXJuYXJ5PFQsVj4+IHtcclxuXHJcbiAgICBwdWJsaWMgY29uZGl0aW9uOiBSdW50aW1lRXhwcmVzc2lvbjxCb29sLCBcInBydmFsdWVcIj47XHJcbiAgICBwdWJsaWMgdGhlbjogUnVudGltZUV4cHJlc3Npb248VCxWPjtcclxuICAgIHB1YmxpYyBvdGhlcndpc2U6IFJ1bnRpbWVFeHByZXNzaW9uPFQsVj47XHJcblxyXG4gICAgcHJpdmF0ZSBpbmRleCA9IFwiY29uZGl0aW9uXCI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRUZXJuYXJ5PFQsVj4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsLCBwYXJlbnQpO1xyXG4gICAgICAgIHRoaXMuY29uZGl0aW9uID0gdGhpcy5tb2RlbC5jb25kaXRpb24uY3JlYXRlUnVudGltZUV4cHJlc3Npb24odGhpcyk7XHJcbiAgICAgICAgdGhpcy50aGVuID0gdGhpcy5tb2RlbC50aGVuLmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub3RoZXJ3aXNlID0gdGhpcy5tb2RlbC5vdGhlcndpc2UuY3JlYXRlUnVudGltZUV4cHJlc3Npb24odGhpcyk7XHJcbiAgICB9XHJcblxyXG5cdHByb3RlY3RlZCB1cE5leHRJbXBsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4ID09PSBcImNvbmRpdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2ltLnB1c2godGhpcy5jb25kaXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gXCJicmFuY2hcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5pbmRleCA9PT0gXCJicmFuY2hcIikge1xyXG4gICAgICAgICAgICBpZih0aGlzLmNvbmRpdGlvbi5ldmFsUmVzdWx0LnJhd1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpbS5wdXNoKHRoaXMudGhlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2ltLnB1c2godGhpcy5vdGhlcndpc2UpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5pbmRleCA9IFwib3BlcmF0ZVwiO1xyXG4gICAgICAgIH1cclxuXHR9XHJcblx0XHJcblx0cHJvdGVjdGVkIHN0ZXBGb3J3YXJkSW1wbCgpIHtcclxuICAgICAgICB0aGlzLnNldEV2YWxSZXN1bHQodGhpcy50aGVuID8gdGhpcy50aGVuLmV2YWxSZXN1bHQgOiB0aGlzLm90aGVyd2lzZS5ldmFsUmVzdWx0KTtcclxuICAgICAgICB0aGlzLnNpbS5wb3AoKTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFzc2lnbm1lbnRFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwiYXNzaWdubWVudF9leHByZXNzaW9uXCI7XHJcbiAgICByZWFkb25seSBsaHM6IEV4cHJlc3Npb25BU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgb3BlcmF0b3I6IFwiPVwiO1xyXG4gICAgcmVhZG9ubHkgcmhzOiBFeHByZXNzaW9uQVNUTm9kZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFzc2lnbm1lbnRFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVzc2lvbiB7XHJcbiAgICAvLyBwdWJsaWMgcmVhZG9ubHkgXHJcbiAgICAvLyB2YWx1ZUNhdGVnb3J5IDogXCJsdmFsdWVcIixcclxuICAgIC8vIGlzT3ZlcmxvYWQgOiBmYWxzZSxcclxuICAgIC8vIGlzTWVtYmVyT3ZlcmxvYWQgOiB0cnVlLFxyXG4gICAgLy8gaV9jaGlsZHJlblRvQ3JlYXRlIDogW1wibGhzXCJdLFxyXG4gICAgLy8gaV9jaGlsZHJlblRvRXhlY3V0ZSA6IFtcImxoc1wiLCBcInJoc1wiXSxcclxuICAgIC8vIGlfY2hpbGRyZW5Ub0V4ZWN1dGVGb3JPdmVybG9hZCA6IFtcImxoc1wiLCBcImZ1bmNDYWxsXCJdLCAvLyBkb2VzIG5vdCBpbmNsdWRlIHJocyBiZWNhdXNlIGZ1bmN0aW9uIGNhbGwgZG9lcyB0aGF0XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU/OiBUeXBlO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHZhbHVlQ2F0ZWdvcnkgPSBcImx2YWx1ZVwiO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBsaHM6IEV4cHJlc3Npb247XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmhzOiBFeHByZXNzaW9uO1xyXG4gICAgXHJcbiAgICAvLyBwdWJsaWMgcmVhZG9ubHkgX3RfY29tcGlsZWQhOiBDb21waWxlZEFzc2lnbm1lbnQ7XHJcblxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCwgbGhzOiBFeHByZXNzaW9uLCByaHM6IEV4cHJlc3Npb24pIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIGxocy9yaHMgZG9lc24ndCBoYXZlIGEgdHlwZSBvciBWQywgdGhlIHJlc3Qgb2YgdGhlIGFuYWx5c2lzIGRvZXNuJ3QgbWFrZSBtdWNoIHNlbnNlLlxyXG4gICAgICAgIGlmICghbGhzLmlzV2VsbFR5cGVkKCkgfHwgIXJocy5pc1dlbGxUeXBlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoKHRoaXMubGhzID0gbGhzKTtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2godGhpcy5yaHMgPSByaHMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByaHMgPSBzdGFuZGFyZENvbnZlcnNpb24ocmhzLCBsaHMudHlwZS5jdlVucXVhbGlmaWVkKCkpO1xyXG5cclxuICAgICAgICBpZiAobGhzLnZhbHVlQ2F0ZWdvcnkgJiYgbGhzLnZhbHVlQ2F0ZWdvcnkgIT0gXCJsdmFsdWVcIikge1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5hc3NpZ25tZW50Lmxoc19sdmFsdWUodGhpcykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVE9ETzogYWRkIGEgY2hlY2sgZm9yIGEgbW9kaWZpYWJsZSB0eXBlIChlLmcuIGFuIGFycmF5IHR5cGUgaXMgbm90IG1vZGlmaWFibGUpXHJcblxyXG4gICAgICAgIGlmIChsaHMudHlwZS5pc0NvbnN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmFzc2lnbm1lbnQubGhzX2NvbnN0KHRoaXMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyaHMuaXNXZWxsVHlwZWQoKSAmJiAhc2FtZVR5cGUocmhzLnR5cGUsIGxocy50eXBlLmN2VW5xdWFsaWZpZWQoKSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuYXNzaWdubWVudC5jb252ZXJ0KHRoaXMsIGxocywgcmhzKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUT0RPOiBkbyB3ZSBuZWVkIHRvIGNoZWNrIHRoYXQgbGhzIGlzIGFuIEF0b21pY1R5cGU/IG9yIGlzIHRoYXQgbmVjZXNzYXJ5IGdpdmVuIGFsbCB0aGUgb3RoZXIgY2hlY2tzP1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSBsaHMudHlwZTtcclxuICAgICAgICB0aGlzLmF0dGFjaCh0aGlzLmxocyA9IGxocyk7XHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy5yaHMgPSByaHMpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21BU1QoYXN0OiBBc3NpZ25tZW50RXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA6IEFzc2lnbm1lbnRFeHByZXNzaW9uIHtcclxuICAgICAgICByZXR1cm4gbmV3IEFzc2lnbm1lbnRFeHByZXNzaW9uKGNvbnRleHQsXHJcbiAgICAgICAgICAgIGNyZWF0ZUV4cHJlc3Npb25Gcm9tQVNUKGFzdC5saHMsIGNvbnRleHQpLFxyXG4gICAgICAgICAgICBjcmVhdGVFeHByZXNzaW9uRnJvbUFTVChhc3QucmhzLCBjb250ZXh0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPih0aGlzOiBDb21waWxlZEFzc2lnbm1lbnQ8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lQXNzaWdubWVudDxUPjtcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+KHRoaXM6IENvbXBpbGVkRXhwcmVzc2lvbjxULFY+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogbmV2ZXI7XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIEF0b21pY1R5cGU+KHRoaXM6IENvbXBpbGVkQXNzaWdubWVudDxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVBc3NpZ25tZW50PFQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVBc3NpZ25tZW50KHRoaXMsIHBhcmVudCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFRPRE9cclxuICAgIHB1YmxpYyBkZXNjcmliZUV2YWxSZXN1bHQoZGVwdGg6IG51bWJlcik6IERlc2NyaXB0aW9uIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gY29udmVydCA6IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgIFxyXG5cclxuICAgIC8vICAgICAvLyBDaGVjayBmb3Igb3ZlcmxvYWRlZCBhc3NpZ25tZW50XHJcbiAgICAvLyAgICAgLy8gTk9URTogZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBsaHMgcmVmZXJlbmNlIHR5cGUgYmVjYXVzZSBpdCB3aWxsIGhhdmUgYmVlbiBhZGp1c3RlZCB0byBub24tcmVmZXJlbmNlXHJcbiAgICAvLyAgICAgaWYgKGlzQSh0aGlzLmxocy50eXBlLCBUeXBlcy5DbGFzcykpe1xyXG4gICAgLy8gICAgICAgICAvLyBDbGFzcy10eXBlIExIUyBtZWFucyB3ZSBjaGVjayBmb3IgYW4gb3ZlcmxvYWRlZCA9IG9wZXJhdG9yXHJcblxyXG4gICAgLy8gICAgICAgICAvLyBDb21waWxlIHRoZSBSSFMgYXMgYW4gYXV4aWxpYXJ5IGV4cHJlc3Npb24gc28gdGhhdCB3ZSBjYW4gZmlndXJlIG91dCBpdHMgdHlwZSB3aXRob3V0IGltcGFjdGluZyB0aGUgY29uc3RydWN0IHRyZWVcclxuICAgIC8vICAgICAgICAgdmFyIGF1eFJocyA9IENQUENvbnN0cnVjdC5jcmVhdGUodGhpcy5hc3QucmhzLCB7cGFyZW50OiB0aGlzLCBhdXhpbGlhcnk6IHRydWV9KTtcclxuICAgIC8vICAgICAgICAgYXV4UmhzLmNvbXBpbGUoKTtcclxuXHJcbiAgICAvLyAgICAgICAgIHRyeXtcclxuICAgIC8vICAgICAgICAgICAgIC8vIExvb2sgZm9yIGFuIG92ZXJsb2FkZWQgPSBvcGVyYXRvciB0aGF0IHdlIGNhbiB1c2Ugd2l0aCBhbiBhcmd1bWVudCBvZiB0aGUgUkhTIHR5cGVcclxuICAgIC8vICAgICAgICAgICAgIC8vIE5vdGU6IFwib3duXCIgaGVyZSBtZWFucyBkb24ndCBsb29rIGluIHBhcmVudCBzY29wZSBjb250YWluaW5nIHRoZSBjbGFzcyBkZWZpbml0aW9uLCBidXQgd2Ugc3RpbGxcclxuICAgIC8vICAgICAgICAgICAgIC8vIGxvb2sgaW4gdGhlIHNjb3BlIG9mIGFueSBiYXNlIGNsYXNzZXMgdGhhdCBleGlzdCBkdWUgdG8gdGhlIGNsYXNzIHNjb3BlIHBlcmZvcm1pbmcgbWVtYmVyIGxvb2t1cFxyXG4gICAgLy8gICAgICAgICAgICAgdmFyIGFzc25PcCA9IHRoaXMubGhzLnR5cGUuY2xhc3NTY29wZS5yZXF1aXJlZE1lbWJlckxvb2t1cChcIm9wZXJhdG9yPVwiLCB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcGFyYW1UeXBlczpbYXV4UmhzLnR5cGVdLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGlzVGhpc0NvbnN0OiB0aGlzLmxocy50eXBlLmlzQ29uc3RcclxuICAgIC8vICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgIC8vICAgICAgICAgICAgIC8vIFRPRE86IEl0IGxvb2tzIGxpa2UgdGhpcyBpZi9lbHNlIGlzbid0IG5lY2Vzc2FyeSBkdWUgdG8gcmVxdWlyZWRMb29rdXAgdGhyb3dpbmcgYW4gZXhjZXB0aW9uIGlmIG5vdCBmb3VuZFxyXG4gICAgLy8gICAgICAgICAgICAgaWYgKGFzc25PcCl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdGhpcy5pc092ZXJsb2FkID0gdHJ1ZTtcclxuICAgIC8vICAgICAgICAgICAgICAgICB0aGlzLmlzTWVtYmVyT3ZlcmxvYWQgPSB0cnVlO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHRoaXMuZnVuY0NhbGwgPSBGdW5jdGlvbkNhbGwuaW5zdGFuY2Uoe2FyZ3M6IFt0aGlzLmFzdC5yaHNdfSwge3BhcmVudDp0aGlzfSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdGhpcy5mdW5jQ2FsbC5jb21waWxlKHtmdW5jOiBhc3NuT3B9KTtcclxuICAgIC8vICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmZ1bmNDYWxsLnR5cGU7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdGhpcy5pX2NoaWxkcmVuVG9FeGVjdXRlID0gdGhpcy5pX2NoaWxkcmVuVG9FeGVjdXRlRm9yT3ZlcmxvYWQ7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICBlbHNle1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmFzc2lnbm1lbnQubm90X2RlZmluZWQodGhpcywgdGhpcy5saHMudHlwZSkpO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGNhdGNoKGUpe1xyXG4gICAgLy8gICAgICAgICAgICAgaWYgKGlzQShlLCBTZW1hbnRpY0V4Y2VwdGlvbnMuQmFkTG9va3VwKSl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIub3ZlcmxvYWRMb29rdXAodGhpcywgXCI9XCIpKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoZS5hbm5vdGF0aW9uKHRoaXMpKTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICAvLyBlbHNle1xyXG4gICAgLy8gICAgIC8vICAgICAvLyBOb24tY2xhc3MgdHlwZSwgc28gdGhpcyBpcyByZWd1bGFyIGFzc2lnbm1lbnQuIENyZWF0ZSBhbmQgY29tcGlsZSB0aGUgcmhzLCBhbmQgdGhlbiBhdHRlbXB0XHJcbiAgICAvLyAgICAgLy8gICAgIC8vIHN0YW5kYXJkIGNvbnZlcnNpb24gb2YgcmhzIHRvIG1hdGNoIGN2LXVucXVhbGlmaWVkIHR5cGUgb2YgbGhzLCBpbmNsdWRpbmcgbHZhbHVlIHRvIHJ2YWx1ZSBjb252ZXJzaW9uXHJcbiAgICAvLyAgICAgLy8gfVxyXG4gICAgLy8gfSxcclxuXHJcblxyXG4gICAgLy8gdXBOZXh0IDogQ2xhc3MuQURESVRJT05BTExZKGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4gICAgLy8gICAgIGlmICh0aGlzLmZ1bmNDYWxsKXtcclxuICAgIC8vICAgICAgICAgaW5zdC5jaGlsZEluc3RhbmNlcy5mdW5jQ2FsbC5nZXRSdW50aW1lRnVuY3Rpb24oKS5zZXRSZWNlaXZlcihFdmFsdWF0aW9uUmVzdWx0UnVudGltZUVudGl0eS5pbnN0YW5jZSh0aGlzLmxocy50eXBlLCBpbnN0LmNoaWxkSW5zdGFuY2VzLmxocykpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH0pLFxyXG5cclxuICAgIC8vIHN0ZXBGb3J3YXJkIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcblxyXG4gICAgLy8gICAgIGlmIChpbnN0LmluZGV4ID09IFwib3BlcmF0ZVwiKXtcclxuXHJcbiAgICAvLyAgICAgICAgIGlmICh0aGlzLmZ1bmNDYWxsKXtcclxuICAgIC8vICAgICAgICAgICAgIC8vIEFzc2lnbm1lbnQgb3BlcmF0b3IgZnVuY3Rpb24gY2FsbCBoYXMgYWxyZWFkeSB0YWtlbiBjYXJlIG9mIHRoZSBcImFzc2lnbm1lbnRcIi5cclxuICAgIC8vICAgICAgICAgICAgIC8vIEp1c3QgZXZhbHVhdGUgdG8gcmV0dXJuZWQgdmFsdWUgZnJvbSBhc3NpZ25tZW50IG9wZXJhdG9yLlxyXG4gICAgLy8gICAgICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KGluc3QuY2hpbGRJbnN0YW5jZXMuZnVuY0NhbGwuZXZhbFJlc3VsdCk7XHJcbiAgICAvLyAgICAgICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuICAgIC8vICAgICAgICAgICAgIC8vcmV0dXJuIHRydWU7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH0sXHJcblxyXG4gICAgcHVibGljIGlzVGFpbENoaWxkKGNoaWxkOiBDUFBDb25zdHJ1Y3QpIHtcclxuICAgICAgICByZXR1cm4ge2lzVGFpbDogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlYXNvbjogXCJUaGUgYXNzaWdubWVudCBpdHNlbGYgd2lsbCBoYXBwZW4gYWZ0ZXIgdGhlIHJlY3Vyc2l2ZSBjYWxsIHJldHVybnMuXCIsXHJcbiAgICAgICAgICAgIG90aGVyczogW3RoaXNdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZXhwbGFpbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgdmFyIGxocyA9IHRoaXMubGhzLmRlc2NyaWJlRXZhbFJlc3VsdCgwKTtcclxuICAgICAgICB2YXIgcmhzID0gdGhpcy5yaHMuZGVzY3JpYmVFdmFsUmVzdWx0KDApO1xyXG4gICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJUaGUgdmFsdWUgb2YgXCIgKyAocmhzLm5hbWUgfHwgcmhzLm1lc3NhZ2UpICsgXCIgd2lsbCBiZSBhc3NpZ25lZCB0byBcIiArIChsaHMubmFtZSB8fCBsaHMubWVzc2FnZSkgKyBcIi5cIn07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRBc3NpZ25tZW50PFQgZXh0ZW5kcyBBdG9taWNUeXBlID0gQXRvbWljVHlwZT4gZXh0ZW5kcyBBc3NpZ25tZW50RXhwcmVzc2lvbiwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG4gICAgcmVhZG9ubHkgdHlwZTogVDtcclxuICAgIHJlYWRvbmx5IGxoczogQ29tcGlsZWRFeHByZXNzaW9uPFQsIFwibHZhbHVlXCI+O1xyXG4gICAgcmVhZG9ubHkgcmhzOiBDb21waWxlZEV4cHJlc3Npb248VCwgXCJwcnZhbHVlXCI+O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVBc3NpZ25tZW50PFQgZXh0ZW5kcyBBdG9taWNUeXBlID0gQXRvbWljVHlwZT4gZXh0ZW5kcyBTaW1wbGVSdW50aW1lRXhwcmVzc2lvbjxULFwibHZhbHVlXCIsIENvbXBpbGVkQXNzaWdubWVudDxUPj4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBsaHM6IFJ1bnRpbWVFeHByZXNzaW9uPFQsIFwibHZhbHVlXCI+O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHJoczogUnVudGltZUV4cHJlc3Npb248VCwgXCJwcnZhbHVlXCI+O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IENvbXBpbGVkQXNzaWdubWVudDxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbiAgICAgICAgdGhpcy5saHMgPSB0aGlzLm1vZGVsLmxocy5jcmVhdGVSdW50aW1lRXhwcmVzc2lvbih0aGlzKTtcclxuICAgICAgICB0aGlzLnJocyA9IHRoaXMubW9kZWwucmhzLmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuc2V0U3ViZXhwcmVzc2lvbnMoW3RoaXMucmhzLCB0aGlzLmxoc10pO1xyXG4gICAgfVxyXG5cclxuXHRwcm90ZWN0ZWQgb3BlcmF0ZSgpIHtcclxuICAgICAgICB0aGlzLmxocy5ldmFsUmVzdWx0LndyaXRlVmFsdWUodGhpcy5yaHMuZXZhbFJlc3VsdCk7XHJcbiAgICAgICAgdGhpcy5zZXRFdmFsUmVzdWx0KHRoaXMubGhzLmV2YWxSZXN1bHQpO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgdF9Db21wb3VuZEFzc2lnbm1lbnRPcGVyYXRvcnMgPSBcIio9XCIgfCBcIi89XCIgfCBcIiU9XCIgfCBcIis9XCIgfCBcIi09XCIgfCBcIj4+PVwiIHwgXCI8PD1cIiB8IFwiJj1cIiB8IFwiXj1cIiB8IFwifD1cIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG91bmRBc3NpZ25tZW50RXhwcmVzc2lvbkFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcImNvbXBvdW5kX2Fzc2lnbm1lbnRfZXhwcmVzc2lvblwiO1xyXG4gICAgcmVhZG9ubHkgbGhzOiBFeHByZXNzaW9uQVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IG9wZXJhdG9yOiB0X0NvbXBvdW5kQXNzaWdubWVudE9wZXJhdG9ycztcclxuICAgIHJlYWRvbmx5IHJoczogRXhwcmVzc2lvbkFTVE5vZGU7XHJcbn1cclxuXHJcbi8vIHZhciBiZW5lYXRoQ29udmVyc2lvbnMgPSBmdW5jdGlvbihleHByKXtcclxuLy8gICAgIHdoaWxlKGlzQShleHByLCBDb252ZXJzaW9ucy5JbXBsaWNpdENvbnZlcnNpb24pKXtcclxuLy8gICAgICAgICBleHByID0gZXhwci5mcm9tO1xyXG4vLyAgICAgfVxyXG4vLyAgICAgcmV0dXJuIGV4cHI7XHJcbi8vIH07XHJcblxyXG4vLyBUT0RPOiB0aGVyZSBtaWdodCBiZSBhIGJldHRlciB3YXkgdG8gaW1wbGVtZW50IHRoaXMuIGN1cnJlbnRseSBpdCByZXVzZXMgY29kZSBmcm9tIEJpbmFyeU9wZXJhdG9yLCBidXQgSSBmZWVsXHJcbi8vIGEgbGl0dGxlIGJpdCBpY2t5IGFib3V0IGhvdyBpdCBkb2VzIGl0IGFuZCB0aGUgd2F5IGl0IHRyZWF0cyB0aGUgY29uc3RydWN0IHRyZWVcclxuLy8gZXhwb3J0IHZhciBDb21wb3VuZEFzc2lnbm1lbnQgID0gRXhwcmVzc2lvbi5leHRlbmQoe1xyXG4vLyAgICAgX25hbWU6IFwiQ29tcG91bmRBc3NpZ25tZW50XCIsXHJcbi8vICAgICB2YWx1ZUNhdGVnb3J5IDogXCJsdmFsdWVcIixcclxuXHJcbi8vICAgICBpX2NyZWF0ZUZyb21BU1Q6IGZ1bmN0aW9uKGFzdCl7XHJcbi8vICAgICAgICAgQ29tcG91bmRBc3NpZ25tZW50Ll9wYXJlbnQuaV9jcmVhdGVGcm9tQVNULmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblxyXG4vLyAgICAgICAgIC8vIEJhc2ljYWxseSB0aGlzIHVzZXMgYSBiaW5hcnkgb3BlcmF0b3IgZXhwcmVzc2lvbiB0byBkbyBtb3N0IG9mIHRoZSB3b3JrXHJcbi8vICAgICAgICAgLy8gZS5nLiB4ICs9IHkgc2hvdWxkIGJlIGVxdWl2YWxlbnQgKHRvIGEgY2VydGFpbiBleHRlbnQpIHRvIHggPSB4ICsgeVxyXG5cclxuLy8gICAgICAgICB0aGlzLm9wZXJhdG9yID0gYXN0Lm9wZXJhdG9yO1xyXG4vLyAgICAgICAgIHZhciBiaW5hcnlPcCA9IHRoaXMub3BlcmF0b3Iuc3Vic3RyaW5nKDAsIHRoaXMub3BlcmF0b3IubGVuZ3RoLTEpOyAvLyByZW1vdmUgdGhlID0gZnJvbSB0aGUgb3BlcmF0b3IgZS5nLiArPSBiZWNvbWVzICtcclxuLy8gICAgICAgICB2YXIgYmluQXN0ID0gY29weU1peGluKGFzdCwge1xyXG4vLyAgICAgICAgICAgICBsZWZ0OiBhc3QubGhzLFxyXG4vLyAgICAgICAgICAgICByaWdodDogYXN0LnJocyxcclxuLy8gICAgICAgICAgICAgb3BlcmF0b3I6IGJpbmFyeU9wXHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgdmFyIGJpbmFyeU9wQ2xhc3MgPSBCSU5BUllfT1BTW2JpbmFyeU9wXTtcclxuLy8gICAgICAgICB0aGlzLmlfYmluYXJ5T3AgPSBiaW5hcnlPcENsYXNzLmluc3RhbmNlKGJpbkFzdCwge3BhcmVudDogdGhpc30pO1xyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBjb21waWxlIDogZnVuY3Rpb24oKSB7XHJcblxyXG4vLyAgICAgICAgIC8vY29tcGlsZXMgbGVmdCBhbmQgcmlnaHRcclxuLy8gICAgICAgICB0aGlzLmlfYmluYXJ5T3AuY29tcGlsZSgpO1xyXG5cclxuLy8gICAgICAgICBpZih0aGlzLmhhc0Vycm9ycygpKXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgLy8gbGVmdCBzaG91bGQgYmUgYSBzdGFuZGFyZCBjb252ZXJzaW9uIHNlcXVlbmNlXHJcbi8vICAgICAgICAgLy8gd2Ugd2FudCB0byBleHRyYWN0IHRoZSBwcmUtY29udmVyc2lvbiBleHByZXNzaW9uIGZvciBsaHNcclxuLy8gICAgICAgICB0aGlzLmxocyA9IGJlbmVhdGhDb252ZXJzaW9ucyh0aGlzLmlfYmluYXJ5T3AubGVmdCk7XHJcblxyXG4vLyAgICAgICAgIC8vIEF0dGVtcHQgdG8gY29udmVydCByaHMgKGEgYmluYXJ5IG9wZXJhdGlvbikgYmFjayB0byB0eXBlIG9mIGxoc1xyXG4vLyAgICAgICAgIHRoaXMucmhzID0gc3RhbmRhcmRDb252ZXJzaW9uKHRoaXMuaV9iaW5hcnlPcCwgdGhpcy5saHMudHlwZSk7XHJcblxyXG4vLyAgICAgICAgIC8vIFR5cGUgQ2hlY2tcclxuLy8gICAgICAgICBpZiAodGhpcy5saHMudmFsdWVDYXRlZ29yeSAhPT0gXCJsdmFsdWVcIikge1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5hc3NpZ25tZW50Lmxoc19sdmFsdWUodGhpcykpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgaWYgKCFzYW1lVHlwZSh0aGlzLnJocy50eXBlLCB0aGlzLmxocy50eXBlKSkge1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5hc3NpZ25tZW50LmNvbnZlcnQodGhpcywgdGhpcy5saHMsIHRoaXMucmhzKSk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmxocy50eXBlO1xyXG5cclxuLy8gICAgICAgICB0aGlzLmNvbXBpbGVUZW1wb3JhcmlyZXMoKTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgdXBOZXh0IDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgLy8gRXZhbHVhdGUgc3ViZXhwcmVzc2lvbnNcclxuLy8gICAgICAgICBpZiAoaW5zdC5pbmRleCA9PSBcInN1YmV4cHJlc3Npb25zXCIpIHtcclxuLy8gICAgICAgICAgICAgaW5zdC5yaHMgPSB0aGlzLnJocy5jcmVhdGVBbmRQdXNoSW5zdGFuY2Uoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgaW5zdC5pbmRleCA9IFwib3BlcmF0ZVwiO1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIHN0ZXBGb3J3YXJkIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgaWYgKGluc3QuaW5kZXggPT09IFwib3BlcmF0ZVwiKXtcclxuLy8gICAgICAgICAgICAgLy8gZXh0cmFjdCBsdmFsdWUgb24gbGhzIHRoYXQgbWF5IGJlIHVuZGVybmVhdGggYSBzdGFuZGFyZCBjb252ZXJzaW9uIHNlcXVlbmNlXHJcbi8vICAgICAgICAgICAgIC8vIG5vdGU6IHRoaXMgaXMgb25seSBhcHBsaWNhYmxlIGluIGNvbXBvdW5kIGFzc2lnbm1lbnQuIGluIHJlZ3VsYXIgbGhzIHdpbGwgbmV2ZXIgYmUgY29udmVydGVkXHJcbi8vICAgICAgICAgICAgIHZhciBmaW5kTGhzID0gaW5zdC5yaHM7XHJcbi8vICAgICAgICAgICAgIHdoaWxlKGlzQShmaW5kTGhzLm1vZGVsLCBJbXBsaWNpdENvbnZlcnNpb24pKXtcclxuLy8gICAgICAgICAgICAgICAgIGZpbmRMaHMgPSBmaW5kTGhzLmNoaWxkSW5zdGFuY2VzLmZyb207IC8vIHN0cmlwIGNvbnZlcnNpb25zIG9mZiByZXN1bHQgb2YgYmluYXJ5IG9wXHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZmluZExocyA9IGZpbmRMaHMuY2hpbGRJbnN0YW5jZXMubGVmdDsgLy8gZ28gdG8gbGVmdCBhcmd1bWVudCBvZiBiaW5hcnkgb3BcclxuLy8gICAgICAgICAgICAgd2hpbGUoaXNBKGZpbmRMaHMubW9kZWwsIEltcGxpY2l0Q29udmVyc2lvbikpe1xyXG4vLyAgICAgICAgICAgICAgICAgZmluZExocyA9IGZpbmRMaHMuY2hpbGRJbnN0YW5jZXMuZnJvbTsgLy8gc3RyaXAgY29udmVyc2lvbnMgb2ZmIGxlZnQgb3BlcmFuZFxyXG4vLyAgICAgICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgICAgICB2YXIgbGhzID0gZmluZExocy5ldmFsUmVzdWx0O1xyXG4vLyAgICAgICAgICAgICB2YXIgcmhzID0gaW5zdC5yaHMuZXZhbFJlc3VsdDtcclxuXHJcbi8vICAgICAgICAgICAgIGxocy53cml0ZVZhbHVlKHJocyk7XHJcblxyXG4vLyAgICAgICAgICAgICBpbnN0LnNldEV2YWxSZXN1bHQobGhzKTtcclxuLy8gICAgICAgICAgICAgdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBpc1RhaWxDaGlsZCA6IGZ1bmN0aW9uKGNoaWxkKXtcclxuLy8gICAgICAgICByZXR1cm4ge2lzVGFpbDogZmFsc2UsXHJcbi8vICAgICAgICAgICAgIHJlYXNvbjogXCJUaGUgY29tcG91bmQgYXNzaWdubWVudCBpdHNlbGYgd2lsbCBoYXBwZW4gYWZ0ZXIgdGhlIHJlY3Vyc2l2ZSBjYWxsIHJldHVybnMuXCIsXHJcbi8vICAgICAgICAgICAgIG90aGVyczogW3RoaXNdXHJcbi8vICAgICAgICAgfTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGQobGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gbGVmdCArIHJpZ2h0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3ViKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIGxlZnQgLSByaWdodDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHQobGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gbGVmdCAqIHJpZ2h0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW50RGl2KGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlcil7XHJcbiAgICByZXR1cm4gTWF0aC50cnVuYyhsZWZ0IC8gcmlnaHQpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZsb2F0RGl2KGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlcil7XHJcbiAgICByZXR1cm4gbGVmdCAvIHJpZ2h0O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1vZChsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIGxlZnQgLSBpbnREaXYobGVmdCwgcmlnaHQpKnJpZ2h0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbHQobGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKXtcclxuICAgIHJldHVybiBsZWZ0IDwgcmlnaHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBndChsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIGxlZnQgPiByaWdodDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGx0ZShsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIGxlZnQgPD0gcmlnaHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBndGUobGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKXtcclxuICAgIHJldHVybiBsZWZ0ID49IHJpZ2h0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXEobGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKXtcclxuICAgIHJldHVybiBsZWZ0ID09IHJpZ2h0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbmUobGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKXtcclxuICAgIHJldHVybiBsZWZ0ID09IHJpZ2h0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYml0QW5kKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlcil7XHJcbiAgICByZXR1cm4gbGVmdCAmIHJpZ2h0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYml0WG9yKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlcil7XHJcbiAgICByZXR1cm4gbGVmdCBeIHJpZ2h0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYml0T3IobGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKXtcclxuICAgIHJldHVybiBsZWZ0IHwgcmlnaHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiaXRTaGlmdExlZnQobGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyKXtcclxuICAgIHJldHVybiBsZWZ0IDw8IHJpZ2h0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYml0U2hpZnRSaWdodChsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIGxlZnQgPj4+IHJpZ2h0OyAvLyBUT0RPOiBpcyB0aGUgc2lnbiBwcmVzZXJ2aW5nIGJpdCBzaGlmdCByaWdodCBtb3JlIGNvbnNpc3RlbnQgd2l0aCBDKys/XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEJpbmFyeU9wZXJhdG9yRXhwcmVzc2lvbkFTVE5vZGUgPVxyXG4gICAgQXJpdGhtZXRpY0JpbmFyeU9wZXJhdG9yRXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgUmVsYXRpb25hbEJpbmFyeU9wZXJhdG9yRXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgTG9naWNhbEJpbmFyeU9wZXJhdG9yRXhwcmVzc2lvbkFTVE5vZGU7XHJcblxyXG50eXBlIHRfQmluYXJ5T3BlcmF0b3JzID0gdF9Bcml0aG1ldGljQmluYXJ5T3BlcmF0b3JzIHwgdF9SZWxhdGlvbmFsQmluYXJ5T3BlcmF0b3JzIHwgdF9Mb2dpY2FsQmluYXJ5T3BlcmF0b3JzO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJpbmFyeU9wZXJhdG9yIGV4dGVuZHMgRXhwcmVzc2lvbiB7XHJcbiAgICBcclxuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSB0eXBlPzogQXRvbWljVHlwZTtcclxuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZUNhdGVnb3J5ID0gXCJwcnZhbHVlXCI7XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGxlZnQ6IEV4cHJlc3Npb247XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgcmlnaHQ6IEV4cHJlc3Npb247XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG9wZXJhdG9yOiB0X0JpbmFyeU9wZXJhdG9ycztcclxuICAgIFxyXG4gICAgcHVibGljIHJlYWRvbmx5IF90X2NvbXBpbGVkITogQ29tcGlsZWRCaW5hcnlPcGVyYXRvcjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQsIG9wZXJhdG9yOiB0X0JpbmFyeU9wZXJhdG9ycykge1xyXG4gICAgICAgIHN1cGVyKGNvbnRleHQpXHJcbiAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgQXRvbWljVHlwZT4odGhpczogQ29tcGlsZWRCaW5hcnlPcGVyYXRvcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVCaW5hcnlPcGVyYXRvcjxUPjtcclxuICAgIHB1YmxpYyBhYnN0cmFjdCBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+KHRoaXM6IENvbXBpbGVkRXhwcmVzc2lvbjxULFY+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogbmV2ZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRCaW5hcnlPcGVyYXRvcjxUIGV4dGVuZHMgQXRvbWljVHlwZSA9IEF0b21pY1R5cGU+IGV4dGVuZHMgQmluYXJ5T3BlcmF0b3IsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuICAgIHJlYWRvbmx5IHRlbXBvcmFyeURlYWxsb2NhdG9yPzogQ29tcGlsZWRUZW1wb3JhcnlEZWFsbG9jYXRvcjsgLy8gdG8gbWF0Y2ggQ29tcGlsZWRQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbiBzdHJ1Y3R1cmVcclxuICAgIHJlYWRvbmx5IHR5cGU6IFQ7XHJcbiAgICByZWFkb25seSBsZWZ0OiBDb21waWxlZEV4cHJlc3Npb248QXRvbWljVHlwZSwgXCJwcnZhbHVlXCI+XHJcbiAgICByZWFkb25seSByaWdodDogQ29tcGlsZWRFeHByZXNzaW9uPEF0b21pY1R5cGUsIFwicHJ2YWx1ZVwiPlxyXG59XHJcblxyXG4vLyBUT0RPOiBJIHRoaW5rIHRoaXMgY2xhc3Mgc2hvdWxkbid0IGV4aXN0LiBJdCBzaG91bGQgcHJvYmFibHkganVzdCBiZSBSdW50aW1lQXJpdGhtZXRpY0JpbmFyeU9wZXJhdG9yLlxyXG4vLyBJdCBnaXZlcyB0aGUgaW1wcmVzc2lvblxyXG4vLyB0aGF0IHRoaXMgd291bGQgYmUgYSBiYXNlIGZvciBhbGwgUnVudGltZSBjbGFzc2VzIGZvciBiaW5hcnkgb3BlcmF0b3JzLCBidXQgaXQgaXNuJ3QgZm9yXHJcbi8vIFJ1bnRpbWVMb2dpY2FsQmluYXJ5T3BlcmF0b3Igc2luY2UgdGhhdCBvbmUgcnVucyBkaWZmZXJlbnRseSB0byBoYW5kbGUgc2hvcnQtY2lyY3VpdCBiZWhhdmlvclxyXG4vLyBjb3JyZWN0bHkuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSdW50aW1lQmluYXJ5T3BlcmF0b3I8VCBleHRlbmRzIEF0b21pY1R5cGUgPSBBdG9taWNUeXBlLCBDIGV4dGVuZHMgQ29tcGlsZWRCaW5hcnlPcGVyYXRvcjxUPiA9IENvbXBpbGVkQmluYXJ5T3BlcmF0b3I8VD4+IGV4dGVuZHMgU2ltcGxlUnVudGltZUV4cHJlc3Npb248VCwgXCJwcnZhbHVlXCIsIEM+IHtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXJpdGhtZXRpY0JpbmFyeU9wZXJhdG9yRXhwcmVzc2lvbkFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcImFyaXRobWV0aWNfYmluYXJ5X29wZXJhdG9yX2V4cHJlc3Npb25cIjtcclxuICAgIHJlYWRvbmx5IG9wZXJhdG9yOiB0X0FyaXRobWV0aWNCaW5hcnlPcGVyYXRvcnM7XHJcbiAgICByZWFkb25seSBsZWZ0OiBFeHByZXNzaW9uQVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IHJpZ2h0OiBFeHByZXNzaW9uQVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IGFzc29jaWF0aXZpdHk6IFwibGVmdFwiO1xyXG59XHJcblxyXG50eXBlIHRfQXJpdGhtZXRpY0JpbmFyeU9wZXJhdG9ycyA9IFwiK1wiIHwgXCItXCIgfCBcIipcIiB8IFwiL1wiIHwgXCIlXCIgfCBcIiZcIiB8IFwiXlwiIHwgXCJ8XCIgfCBcIjw8XCIgfCBcIj4+XCIgfCBcIjxcIiB8IFwiPlwiIHwgXCI8PVwiIHwgXCI+PVwiIHwgXCI9PVwiIHwgXCIhPVwiO1xyXG5cclxuLy8gTm90ZTogQXRvbWljVHlwZSBoZXJlIGlzIG11Y2ggd2lkZXIgdGhhbiBuZWVkZWQuIFQgc2hvdWxkIHRoZW9yZXRpY2FsbHkgb25seSBldmVyIGJlIEludCwgRG91YmxlLCBvciBGbG9hdFxyXG5jb25zdCBBUklUSE1FVElDX0JJTkFSWV9PUEVSQVRJT05TIDoge1tpbmRleDpzdHJpbmddOiA8VCBleHRlbmRzIEF0b21pY1R5cGU+KGxlZnQ6IFZhbHVlPFQ+LCByaWdodDogVmFsdWU8VD4pID0+IFZhbHVlPFQ+fVxyXG4gICAgPSB7XHJcbiAgICBcIitcIiA6IGZ1bmN0aW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuY29tYmluZShyaWdodCwgYWRkKTtcclxuICAgIH0sXHJcbiAgICBcIi1cIiA6IGZ1bmN0aW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuY29tYmluZShyaWdodCwgc3ViKTtcclxuICAgIH0sXHJcbiAgICBcIipcIiA6IGZ1bmN0aW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuY29tYmluZShyaWdodCwgbXVsdCk7XHJcbiAgICB9LFxyXG4gICAgXCIvXCIgOiBmdW5jdGlvbjxUIGV4dGVuZHMgQXRvbWljVHlwZT4obGVmdDogVmFsdWU8VD4sIHJpZ2h0OiBWYWx1ZTxUPikge1xyXG4gICAgICAgIGlmIChsZWZ0LnR5cGUuaXNJbnRlZ3JhbFR5cGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGVmdC5jb21iaW5lKHJpZ2h0LCBpbnREaXYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxlZnQuY29tYmluZShyaWdodCwgZmxvYXREaXYpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcIiVcIiA6IGZ1bmN0aW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuY29tYmluZShyaWdodCwgbW9kKTtcclxuICAgIH0sXHJcbiAgICBcIiZcIiA6IGZ1bmN0aW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuY29tYmluZShyaWdodCwgYml0QW5kKTtcclxuICAgIH0sXHJcbiAgICBcIl5cIiA6IGZ1bmN0aW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuY29tYmluZShyaWdodCwgYml0WG9yKTtcclxuICAgIH0sXHJcbiAgICBcInxcIiA6IGZ1bmN0aW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuY29tYmluZShyaWdodCwgYml0T3IpO1xyXG4gICAgfSxcclxuICAgIFwiPDxcIiA6IGZ1bmN0aW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuY29tYmluZShyaWdodCwgYml0U2hpZnRMZWZ0KTtcclxuICAgIH0sXHJcbiAgICBcIj4+XCIgOiBmdW5jdGlvbjxUIGV4dGVuZHMgQXRvbWljVHlwZT4obGVmdDogVmFsdWU8VD4sIHJpZ2h0OiBWYWx1ZTxUPikge1xyXG4gICAgICAgIHJldHVybiBsZWZ0LmNvbWJpbmUocmlnaHQsIGJpdFNoaWZ0UmlnaHQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBUT0RPOiBtYWtlIHR5cGVzIG1vcmUgc3BlY2lmaWMuIEFyaXRobWV0aWNCaW5hcnlPcGVyYXRvciBzaG91bGQgb25seSBiZSB1c2VkIGluIGNhc2VzIHdoZXJlIGl0IGhhc1xyXG4vLyBhbHJlYWR5IGJlZW4gZGV0ZXJtaW5lZCB0aGF0IGJvdGggb3BlcmFuZHMgaGF2ZSBhcml0aG1ldGljIHR5cGUuIEVpdGhlciB0aGF0IG9yIGl0IHNob3VsZCBiZSB1c2VkXHJcbi8vIGluIGNhc2VzIHdoZXJlIGFuIG9wZXJhdG9yIHJlcXVpcmVzIGFyaXRobWV0aWMgb3BlcmFuZHMsIGJ1dCBub3Qgc3VyZS4gRm9yIGV4YW1wbGUsIHdoYXQgaWYgc29tZW9uZVxyXG4vLyB0cmllcyB0byBhZGQgYSBwb2ludGVyIHR5cGUgYW5kIGEgY2xhc3MgdHlwZSB3aXRoIHRoZSArIG9wZXJhdG9yIChhc3N1bWluZyBvdmVybG9hZHMgYWxyZWFkeSBjaGVja2VkXHJcbi8vIGFuZCBub25lIGZvdW5kKS4gV2hhdCBUUyBjbGFzcyBkbyB3ZSB3YW50IHRvIGdldCB1c2VkLCBzIHRoYXQgdGhlIGVycm9yIG1lc3NhZ2VzIGFyZSBhcyBnb29kIGFzIHBvc3NpYmxlP1xyXG4vLyBDb25zaWRlcmluZyB0aGllIGFuZCBMb2dpY2FsQmluYXJ5T3BlcmF0b3IgdG9nZXRoZXIsIGl0IGFjdHVhbGx5IHNlZW1zIGJlc3QgdG8gY3JlYXRlIHRoaXMgaW4gYSB3YXkgdGhhdFxyXG4vLyBpcyBiYXNlZCBvbiB0aGUgb3BlcmF0b3IgdXNlZCBhbmQgYWN0dWFsbHkgYWxsb3dzIGZvciBpbXByb3BlciB0eXBlcy4gVGhhdCBzaG91bGQgcmVzdWx0IGluIHRoZSBtb3N0IHJlbGV2YW50XHJcbi8vIGVycm9yIG1lc3NhZ2VzLiAoT2YgY291cnNlLCBvdmVybG9hZHMgYXJlIHN0aWxsIGNoZWNrZWQgZm9yIGZpcnN0LCBhbmQgdGhlIHNwZWNpZmljIHBvaW50ZXIgb2Zmc2V0IGFuZFxyXG4vLyBwb2ludGVyIGRpZmZlcmVuY2UgY2FzZXMgc2hvdWxkIGFsc28gYmUgY2hlY2tlZCBmb3IgZmlyc3QuIFNvIHRoZXNlIGFyZSB0aGUgZmFsbGJhY2sgb3B0aW9ucy4pXHJcbmNsYXNzIEFyaXRobWV0aWNCaW5hcnlPcGVyYXRvckV4cHJlc3Npb24gZXh0ZW5kcyBCaW5hcnlPcGVyYXRvciB7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlPzogQXJpdGhtZXRpY1R5cGU7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGxlZnQ6IEV4cHJlc3Npb247XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmlnaHQ6IEV4cHJlc3Npb247XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG9wZXJhdG9yITogdF9Bcml0aG1ldGljQmluYXJ5T3BlcmF0b3JzOyAvLyBOYXJyb3dzIHR5cGUgZnJvbSBiYXNlXHJcblxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0LCBsZWZ0OiBFeHByZXNzaW9uLCByaWdodDogRXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRfQXJpdGhtZXRpY0JpbmFyeU9wZXJhdG9ycykge1xyXG4gICAgICAgIHN1cGVyKGNvbnRleHQsIG9wZXJhdG9yKTtcclxuXHJcbiAgICAgICAgaWYgKCFsZWZ0LmlzV2VsbFR5cGVkKCkgfHwgIXJpZ2h0LmlzV2VsbFR5cGVkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2godGhpcy5sZWZ0ID0gbGVmdCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoKHRoaXMucmlnaHQgPSByaWdodCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQXJpdGhtZXRpYyB0eXBlcyBhcmUgcmVxdWlyZWRcclxuICAgICAgICBpZiAoIWxlZnQuaXNBcml0aG1ldGljVHlwZWQoKSB8fCAhcmlnaHQuaXNBcml0aG1ldGljVHlwZWQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5iaW5hcnkuYXJpdGhtZXRpY19vcGVyYW5kcyh0aGlzLCB0aGlzLm9wZXJhdG9yLCBsZWZ0LCByaWdodCkpO1xyXG4gICAgICAgICAgICB0aGlzLmF0dGFjaCh0aGlzLmxlZnQgPSBsZWZ0KTtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2godGhpcy5yaWdodCA9IHJpZ2h0KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gJSBvcGVyYXRvciBhbmQgc2hpZnQgb3BlcmF0b3JzIHJlcXVpcmUgaW50ZWdyYWwgb3BlcmFuZHNcclxuICAgICAgICBpZiAoKG9wZXJhdG9yID09PSBcIiVcIiB8fCBvcGVyYXRvciA9PT0gXCI8PFwiIHx8IG9wZXJhdG9yID09IFwiPj5cIikgJiZcclxuICAgICAgICAgICAgKCFsZWZ0LmlzSW50ZWdyYWxUeXBlZCgpIHx8ICFyaWdodC5pc0ludGVncmFsVHlwZWQoKSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuYmluYXJ5LmFyaXRobWV0aWNfb3BlcmFuZHModGhpcywgdGhpcy5vcGVyYXRvciwgbGVmdCwgcmlnaHQpKTtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2godGhpcy5sZWZ0ID0gbGVmdCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoKHRoaXMucmlnaHQgPSByaWdodCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBbY29udmVydGVkTGVmdCwgY29udmVydGVkUmlnaHRdID0gdXN1YWxBcml0aG1ldGljQ29udmVyc2lvbnMobGVmdCwgcmlnaHQpO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBpZiAoIXNhbWVUeXBlKGNvbnZlcnRlZExlZnQudHlwZSEsIGNvbnZlcnRlZFJpZ2h0LnR5cGUhKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5pbnZhbGlkX2JpbmFyeV9vcGVyYW5kcyh0aGlzLCB0aGlzLm9wZXJhdG9yLCBjb252ZXJ0ZWRMZWZ0LCBjb252ZXJ0ZWRSaWdodCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50eXBlID0gY29udmVydGVkTGVmdC50eXBlO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoKHRoaXMubGVmdCA9IGNvbnZlcnRlZExlZnQpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoKHRoaXMucmlnaHQgPSBjb252ZXJ0ZWRSaWdodCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbUFTVChhc3Q6IEFyaXRobWV0aWNCaW5hcnlPcGVyYXRvckV4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkgOiBBcml0aG1ldGljQmluYXJ5T3BlcmF0b3JFeHByZXNzaW9uIHwgUG9pbnRlckRpZmZlcmVuY2UgfCBQb2ludGVyT2Zmc2V0IHtcclxuICAgICAgICBsZXQgbGVmdCA6IEV4cHJlc3Npb24gPSBjcmVhdGVFeHByZXNzaW9uRnJvbUFTVChhc3QubGVmdCwgY29udGV4dCk7XHJcbiAgICAgICAgbGV0IHJpZ2h0IDogRXhwcmVzc2lvbiA9IGNyZWF0ZUV4cHJlc3Npb25Gcm9tQVNUKGFzdC5yaWdodCwgY29udGV4dCk7XHJcbiAgICAgICAgbGV0IG9wID0gYXN0Lm9wZXJhdG9yO1xyXG5cclxuICAgICAgICAvLyBJZiBvcGVyYXRvciBpcyBcIi1cIiBhbmQgYm90aCBhcmUgcG9pbnRlcnMsIGl0J3MgYSBwb2ludGVyIGRpZmZlcmVuY2VcclxuICAgICAgICBpZiAob3AgPT09IFwiLVwiICYmIChsZWZ0LmlzUG9pbnRlclR5cGVkKCkgfHwgbGVmdC5pc0JvdW5kZWRBcnJheVR5cGVkKCkpICYmIChyaWdodC5pc1BvaW50ZXJUeXBlZCgpIHx8IHJpZ2h0LmlzQm91bmRlZEFycmF5VHlwZWQoKSkpIHtcclxuICAgICAgICAgICAgLy8gY2FzdHMgYmVsb3cgYXJlIG5lY2Vzc2FyeSBiZWNhdXNlIGNvbnZlcnRUb1BSVmFsdWUoKSBvdmVybG9hZHMgY2FuJ3QgZWxlZ2FudGx5XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgdW5pb24gYmV0d2VlbiBwb2ludGVyIGFuZCBhcnJheSB0eXBlcy4gV2l0aG91dCB0aGUgY2FzdHMsIHdlJ3ZlIGhhdmVcclxuICAgICAgICAgICAgLy8gdG8gc2VwYXJhdGUgdGhpcyBvdXQgaW50byB0aGUgNCBkaWZmZXJlbnQgY2FzZXMgb2YgYXJyYXkvYXJyYXksIGFycmF5L3BvaW50ZXIsXHJcbiAgICAgICAgICAgIC8vIHBvaW50ZXIvYXJyYXksIHBvaW50ZXIvcG9pbnRlciwgd2hpY2ggd291bGQgYmUgYW5ub3lpbmdcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludGVyRGlmZmVyZW5jZShjb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgPFR5cGVkRXhwcmVzc2lvbjxQb2ludGVyVHlwZSwgXCJwcnZhbHVlXCI+PmNvbnZlcnRUb1BSVmFsdWUobGVmdCksXHJcbiAgICAgICAgICAgICAgICA8VHlwZWRFeHByZXNzaW9uPFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj4+Y29udmVydFRvUFJWYWx1ZShyaWdodCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgb3BlcmF0b3IgaXMgXCItXCIgb3IgXCIrXCIgYW5kIGl0J3MgYSBjb21iaW5hdGlvbiBvZiBwb2ludGVyIHBsdXMgaW50ZWdlciwgaXQncyBhIHBvaW50ZXIgb2Zmc2V0XHJcbiAgICAgICAgaWYgKG9wID09PSBcIi1cIiB8fCBvcCA9PT0gXCIrXCIpIHtcclxuICAgICAgICAgICAgaWYoKGxlZnQuaXNQb2ludGVyVHlwZWQoKSB8fCBsZWZ0LmlzQm91bmRlZEFycmF5VHlwZWQoKSkgJiYgcmlnaHQuaXNJbnRlZ3JhbFR5cGVkKCkgfHxcclxuICAgICAgICAgICAgICAgKHJpZ2h0LmlzUG9pbnRlclR5cGVkKCkgfHwgcmlnaHQuaXNCb3VuZGVkQXJyYXlUeXBlZCgpKSAmJiBsZWZ0LmlzSW50ZWdyYWxUeXBlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50ZXJPZmZzZXQoY29udGV4dCxcclxuICAgICAgICAgICAgICAgICAgICA8VHlwZWRFeHByZXNzaW9uPFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj4+Y29udmVydFRvUFJWYWx1ZShsZWZ0KSxcclxuICAgICAgICAgICAgICAgICAgICA8VHlwZWRFeHByZXNzaW9uPFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj4+Y29udmVydFRvUFJWYWx1ZShyaWdodCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEFyaXRobWV0aWNCaW5hcnlPcGVyYXRvckV4cHJlc3Npb24oY29udGV4dCwgbGVmdCwgcmlnaHQsIG9wKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIEFyaXRobWV0aWNUeXBlPih0aGlzOiBDb21waWxlZEFyaXRobWV0aWNCaW5hcnlPcGVyYXRvcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVBcml0aG1ldGljQmluYXJ5T3BlcmF0b3I8VD47XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5Pih0aGlzOiBDb21waWxlZEV4cHJlc3Npb248VCxWPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IG5ldmVyO1xyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFQgZXh0ZW5kcyBBcml0aG1ldGljVHlwZT4odGhpczogQ29tcGlsZWRBcml0aG1ldGljQmluYXJ5T3BlcmF0b3I8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lQXJpdGhtZXRpY0JpbmFyeU9wZXJhdG9yPFQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVBcml0aG1ldGljQmluYXJ5T3BlcmF0b3IodGhpcywgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGVzY3JpYmVFdmFsUmVzdWx0KGRlcHRoOiBudW1iZXIpOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRBcml0aG1ldGljQmluYXJ5T3BlcmF0b3I8VCBleHRlbmRzIEFyaXRobWV0aWNUeXBlPiBleHRlbmRzIEFyaXRobWV0aWNCaW5hcnlPcGVyYXRvckV4cHJlc3Npb24sIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuXHJcbiAgICByZWFkb25seSB0ZW1wb3JhcnlEZWFsbG9jYXRvcj86IENvbXBpbGVkVGVtcG9yYXJ5RGVhbGxvY2F0b3I7IC8vIHRvIG1hdGNoIENvbXBpbGVkUG90ZW50aWFsRnVsbEV4cHJlc3Npb24gc3RydWN0dXJlXHJcbiAgICByZWFkb25seSB0eXBlOiBUO1xyXG5cclxuICAgIHJlYWRvbmx5IGxlZnQ6IENvbXBpbGVkRXhwcmVzc2lvbjxULFwicHJ2YWx1ZVwiPjtcclxuICAgIHJlYWRvbmx5IHJpZ2h0OiBDb21waWxlZEV4cHJlc3Npb248VCxcInBydmFsdWVcIj47XHJcbn1cclxuXHJcbi8vIFRPRE86IHJlbmFtZSB0aGlzIG9yIG1heWJlIGNyZWF0ZSB0d28gc2VwYXJhdGUgY2xhc3NlcyBmb3IgQXJpdGhtZXRpYyBhbmQgTG9naWNhbFxyXG5leHBvcnQgY2xhc3MgUnVudGltZUFyaXRobWV0aWNCaW5hcnlPcGVyYXRvcjxUIGV4dGVuZHMgQXJpdGhtZXRpY1R5cGU+IGV4dGVuZHMgUnVudGltZUJpbmFyeU9wZXJhdG9yPFQsIENvbXBpbGVkQXJpdGhtZXRpY0JpbmFyeU9wZXJhdG9yPFQ+PiB7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSBsZWZ0OiBSdW50aW1lRXhwcmVzc2lvbjxULCBcInBydmFsdWVcIj47XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmlnaHQ6IFJ1bnRpbWVFeHByZXNzaW9uPFQsIFwicHJ2YWx1ZVwiPjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDb21waWxlZEFyaXRobWV0aWNCaW5hcnlPcGVyYXRvcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5tb2RlbC5sZWZ0LmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLm1vZGVsLnJpZ2h0LmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuc2V0U3ViZXhwcmVzc2lvbnMoW3RoaXMubGVmdCwgdGhpcy5yaWdodF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvcGVyYXRlKCkge1xyXG4gICAgICAgIC8vIE5vdCBzdXJlIHdoeSB0aGUgY2FzdCBoZXJlIGlzIG5lY2Vzc2FyeSBidXQgYXBwYXJlbnRseSBUeXBlc2NyaXB0IG5lZWRzIGl0XHJcbiAgICAgICAgdGhpcy5zZXRFdmFsUmVzdWx0KDxWQ1Jlc3VsdFR5cGVzPFQsXCJwcnZhbHVlXCI+PkFSSVRITUVUSUNfQklOQVJZX09QRVJBVElPTlNbdGhpcy5tb2RlbC5vcGVyYXRvcl0odGhpcy5sZWZ0LmV2YWxSZXN1bHQsIHRoaXMucmlnaHQuZXZhbFJlc3VsdCkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUG9pbnRlckRpZmZlcmVuY2UgZXh0ZW5kcyBCaW5hcnlPcGVyYXRvciB7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlOiBJbnQ7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeSA9IFwicHJ2YWx1ZVwiO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBsZWZ0OiBUeXBlZEV4cHJlc3Npb248UG9pbnRlclR5cGUsIFwicHJ2YWx1ZVwiPjtcclxuICAgIHB1YmxpYyByZWFkb25seSByaWdodDogVHlwZWRFeHByZXNzaW9uPFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj47XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG9wZXJhdG9yISA6IFwiLVwiOyAvLyBOYXJyb3dzIHR5cGUgZnJvbSBiYXNlXHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0LCBsZWZ0OiBUeXBlZEV4cHJlc3Npb248UG9pbnRlclR5cGUsIFwicHJ2YWx1ZVwiPiwgcmlnaHQ6IFR5cGVkRXhwcmVzc2lvbjxQb2ludGVyVHlwZSwgXCJwcnZhbHVlXCI+KSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCwgXCItXCIpO1xyXG5cclxuICAgICAgICAvLyBOb3QgbmVjZXNzYXJ5IGFzc3VtaW5nIHRoZXkgY29tZSBpbiBhcyBwcnZhbHVlcyB0aGF0IGFyZSBjb25maXJtZWQgdG8gaGF2ZSBwb2ludGVyIHR5cGUuXHJcbiAgICAgICAgLy8gaWYgKGxlZnQuaXNXZWxsVHlwZWQoKSAmJiByaWdodC5pc1dlbGxUeXBlZCgpKSB7XHJcbiAgICAgICAgLy8gICAgIGxlZnQgPSBjb252ZXJ0VG9QUlZhbHVlKGxlZnQpO1xyXG4gICAgICAgIC8vICAgICByaWdodCA9IGNvbnZlcnRUb1BSVmFsdWUocmlnaHQpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy5sZWZ0ID0gbGVmdCk7XHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy5yaWdodCA9IHJpZ2h0KTtcclxuXHJcbiAgICAgICAgdGhpcy50eXBlID0gbmV3IEludCgpO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICAvLyBOb3QgbmVjZXNzYXJ5IGFzc3VtaW5nIHRoZXkgY29tZSBpbiBhcyBwcnZhbHVlcyB0aGF0IGFyZSBjb25maXJtZWQgdG8gaGF2ZSBwb2ludGVyIHR5cGUuXHJcbiAgICAgICAgLy8gaWYgKGxlZnQuaXNXZWxsVHlwZWQoKSAmJiByaWdodC5pc1dlbGxUeXBlZCgpKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIC8vICAgICBpZiAobGVmdC50eXBlLmlzVHlwZShQb2ludGVyKSAmJiByaWdodC50eXBlLmlzVHlwZShQb2ludGVyKSkge1xyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy50eXBlID0gbmV3IEludCgpO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gICAgIGVsc2Uge1xyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuaW52YWxpZF9iaW5hcnlfb3BlcmFuZHModGhpcywgdGhpcy5vcGVyYXRvciwgbGVmdCwgcmlnaHQpKTtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMudHlwZSA9IG51bGw7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMudHlwZSA9IG51bGw7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbih0aGlzOiBDb21waWxlZFBvaW50ZXJEaWZmZXJlbmNlLCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogUnVudGltZVBvaW50ZXJEaWZmZXJlbmNlO1xyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFQgZXh0ZW5kcyBQb2ludGVyVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+KHRoaXM6IENvbXBpbGVkRXhwcmVzc2lvbjxULFY+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogbmV2ZXI7XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb24odGhpczogQ29tcGlsZWRQb2ludGVyRGlmZmVyZW5jZSwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVQb2ludGVyRGlmZmVyZW5jZSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSdW50aW1lUG9pbnRlckRpZmZlcmVuY2UodGhpcywgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGVzY3JpYmVFdmFsUmVzdWx0KGRlcHRoOiBudW1iZXIpOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRQb2ludGVyRGlmZmVyZW5jZSBleHRlbmRzIFBvaW50ZXJEaWZmZXJlbmNlLCBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcbiAgICByZWFkb25seSB0ZW1wb3JhcnlEZWFsbG9jYXRvcj86IENvbXBpbGVkVGVtcG9yYXJ5RGVhbGxvY2F0b3I7IC8vIHRvIG1hdGNoIENvbXBpbGVkUG90ZW50aWFsRnVsbEV4cHJlc3Npb24gc3RydWN0dXJlXHJcblxyXG4gICAgcmVhZG9ubHkgbGVmdDogQ29tcGlsZWRFeHByZXNzaW9uPFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj47XHJcbiAgICByZWFkb25seSByaWdodDogQ29tcGlsZWRFeHByZXNzaW9uPFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lUG9pbnRlckRpZmZlcmVuY2UgZXh0ZW5kcyBSdW50aW1lQmluYXJ5T3BlcmF0b3I8SW50LCBDb21waWxlZFBvaW50ZXJEaWZmZXJlbmNlPiB7XHJcblxyXG4gICAgcHVibGljIGxlZnQ6IFJ1bnRpbWVFeHByZXNzaW9uPFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj47XHJcbiAgICBwdWJsaWMgcmlnaHQ6IFJ1bnRpbWVFeHByZXNzaW9uPFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj47XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRQb2ludGVyRGlmZmVyZW5jZSwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5tb2RlbC5sZWZ0LmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLm1vZGVsLnJpZ2h0LmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuc2V0U3ViZXhwcmVzc2lvbnMoW3RoaXMubGVmdCwgdGhpcy5yaWdodF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvcGVyYXRlKCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmxlZnQuZXZhbFJlc3VsdC5wb2ludGVyRGlmZmVyZW5jZSh0aGlzLnJpZ2h0LmV2YWxSZXN1bHQpO1xyXG5cclxuICAgICAgICBsZXQgbGVmdEFyciA9IHRoaXMubGVmdC5tb2RlbC50eXBlLmlzVHlwZShBcnJheVBvaW50ZXIpID8gdGhpcy5sZWZ0Lm1vZGVsLnR5cGUuYXJyYXlPYmplY3QgOiBudWxsO1xyXG4gICAgICAgIGxldCByaWdodEFyciA9IHRoaXMucmlnaHQubW9kZWwudHlwZS5pc1R5cGUoQXJyYXlQb2ludGVyKSA/IHRoaXMucmlnaHQubW9kZWwudHlwZS5hcnJheU9iamVjdCA6IG51bGw7XHJcblxyXG4gICAgICAgIGlmIChyZXN1bHQucmF3RXF1YWxzKDApKSB7XHJcbiAgICAgICAgICAgIC8vIElmIGl0J3MgdGhlIHNhbWUgYWRkcmVzcywgSSBndWVzcyB3ZSBjYW4gbGV0IGl0IHNsaWRlLi4uXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFsZWZ0QXJyICYmIHJpZ2h0QXJyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2ltLmV2ZW50T2NjdXJyZWQoU2ltdWxhdGlvbkV2ZW50LlVOREVGSU5FRF9CRUhBVklPUiwgXCJUaGUgbGVmdCBwb2ludGVyIGluIHRoaXMgc3VidHJhY3Rpb24gaXMgbm90IGZyb20gYW4gYXJyYXksIHNvIHRoZSByZXN1bHRpbmcgZGlmZmVyZW5jZSBpcyBub3QgbWVhbmluZ2Z1bC5cIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5pbnZhbGlkYXRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsZWZ0QXJyICYmICFyaWdodEFycikge1xyXG4gICAgICAgICAgICB0aGlzLnNpbS5ldmVudE9jY3VycmVkKFNpbXVsYXRpb25FdmVudC5VTkRFRklORURfQkVIQVZJT1IsIFwiVGhlIHJpZ2h0IHBvaW50ZXIgaW4gdGhpcyBzdWJ0cmFjdGlvbiBpcyBub3QgZnJvbSBhbiBhcnJheSwgc28gdGhlIHJlc3VsdGluZyBkaWZmZXJlbmNlIGlzIG5vdCBtZWFuaW5nZnVsLlwiLCB0cnVlKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmludmFsaWRhdGVkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxlZnRBcnIgJiYgcmlnaHRBcnIgJiYgbGVmdEFyciAhPT0gcmlnaHRBcnIpIHtcclxuICAgICAgICAgICAgdGhpcy5zaW0uZXZlbnRPY2N1cnJlZChTaW11bGF0aW9uRXZlbnQuVU5ERUZJTkVEX0JFSEFWSU9SLCBcIlRoZSBwb2ludGVycyBpbiB0aGlzIHN1YnRyYWN0aW9uIGFyZSBwb2ludGluZyBpbnRvIHR3byBkaWZmZXJlbnQgYXJyYXlzLCBzbyB0aGUgcmVzdWx0aW5nIGRpZmZlcmVuY2UgaXMgbm90IG1lYW5pbmdmdWwuXCIsIHRydWUpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuaW52YWxpZGF0ZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0RXZhbFJlc3VsdChyZXN1bHQpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBvaW50ZXJPZmZzZXQgZXh0ZW5kcyBCaW5hcnlPcGVyYXRvciB7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlPzogUG9pbnRlclR5cGU7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGxlZnQ6IFR5cGVkRXhwcmVzc2lvbjxQb2ludGVyVHlwZSwgXCJwcnZhbHVlXCI+IHwgVHlwZWRFeHByZXNzaW9uPEludGVncmFsVHlwZSwgXCJwcnZhbHVlXCI+O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHJpZ2h0OiBUeXBlZEV4cHJlc3Npb248UG9pbnRlclR5cGUsIFwicHJ2YWx1ZVwiPiB8IFR5cGVkRXhwcmVzc2lvbjxJbnRlZ3JhbFR5cGUsIFwicHJ2YWx1ZVwiPjtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcG9pbnRlcj86IFR5cGVkRXhwcmVzc2lvbjxQb2ludGVyVHlwZSwgXCJwcnZhbHVlXCI+O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG9mZnNldD86IFR5cGVkRXhwcmVzc2lvbjxJbnRlZ3JhbFR5cGUsIFwicHJ2YWx1ZVwiPjtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcG9pbnRlck9uTGVmdD86IGJvb2xlYW47XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG9wZXJhdG9yISA6IFwiK1wiOyAvLyBOYXJyb3dzIHR5cGUgZnJvbSBiYXNlXHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0LFxyXG4gICAgICAgICAgICBsZWZ0OiBUeXBlZEV4cHJlc3Npb248UG9pbnRlclR5cGUsIFwicHJ2YWx1ZVwiPiB8IFR5cGVkRXhwcmVzc2lvbjxJbnRlZ3JhbFR5cGUsIFwicHJ2YWx1ZVwiPixcclxuICAgICAgICAgICAgcmlnaHQ6IFR5cGVkRXhwcmVzc2lvbjxQb2ludGVyVHlwZSwgXCJwcnZhbHVlXCI+IHwgVHlwZWRFeHByZXNzaW9uPEludGVncmFsVHlwZSwgXCJwcnZhbHVlXCI+KSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCwgXCIrXCIpO1xyXG5cclxuICAgICAgICAvLyBOT1QgTkVFREVEIEFTU1VNSU5HIFRIRVkgQ09NRSBJTiBBTFJFQURZIFdFTEwgVFlQRUQgQVMgQVBQUk9QUklBVEUgRk9SIFBPSU5URVIgT0ZGU0VUXHJcbiAgICAgICAgLy8gaWYgKGxlZnQuaXNXZWxsVHlwZWQoKSAmJiByaWdodC5pc1dlbGxUeXBlZCgpKSB7XHJcbiAgICAgICAgLy8gICAgIGxlZnQgPSBjb252ZXJ0VG9QUlZhbHVlKGxlZnQpO1xyXG4gICAgICAgIC8vICAgICByaWdodCA9IGNvbnZlcnRUb1BSVmFsdWUocmlnaHQpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcblxyXG4gICAgICAgIHRoaXMuYXR0YWNoKHRoaXMubGVmdCA9IGxlZnQpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoKHRoaXMucmlnaHQgPSByaWdodCk7XHJcblxyXG4gICAgICAgIGlmICghbGVmdC5pc1dlbGxUeXBlZCgpIHx8ICFyaWdodC5pc1dlbGxUeXBlZCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGlmIChsZWZ0LmlzUG9pbnRlclR5cGVkKCkgJiYgcmlnaHQuaXNJbnRlZ3JhbFR5cGVkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wb2ludGVyT25MZWZ0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5wb2ludGVyID0gPFR5cGVkRXhwcmVzc2lvbjxQb2ludGVyVHlwZSwgXCJwcnZhbHVlXCI+PiBsZWZ0O1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IDxUeXBlZEV4cHJlc3Npb248SW50ZWdyYWxUeXBlLCBcInBydmFsdWVcIj4+IHJpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLnBvaW50ZXIudHlwZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGVmdC5pc0ludGVncmFsVHlwZWQoKSAmJiByaWdodC5pc1BvaW50ZXJUeXBlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9pbnRlck9uTGVmdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50ZXIgPSA8VHlwZWRFeHByZXNzaW9uPFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj4+IHJpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IDxUeXBlZEV4cHJlc3Npb248SW50ZWdyYWxUeXBlLCBcInBydmFsdWVcIj4+IGxlZnQ7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHRoaXMucG9pbnRlci50eXBlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuaW52YWxpZF9iaW5hcnlfb3BlcmFuZHModGhpcywgdGhpcy5vcGVyYXRvciwgbGVmdCwgcmlnaHQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFQgZXh0ZW5kcyBQb2ludGVyVHlwZT4odGhpczogQ29tcGlsZWRQb2ludGVyT2Zmc2V0PFQ+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogUnVudGltZVBvaW50ZXJPZmZzZXQ8VD47XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIFBvaW50ZXJUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeT4odGhpczogQ29tcGlsZWRFeHByZXNzaW9uPFQsVj4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBuZXZlcjtcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgUG9pbnRlclR5cGU+KHRoaXM6IENvbXBpbGVkUG9pbnRlck9mZnNldDxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVQb2ludGVyT2Zmc2V0PFQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVQb2ludGVyT2Zmc2V0KHRoaXMsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlRXZhbFJlc3VsdChkZXB0aDogbnVtYmVyKTogRGVzY3JpcHRpb24ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkUG9pbnRlck9mZnNldDxUIGV4dGVuZHMgUG9pbnRlclR5cGUgPSBQb2ludGVyVHlwZT4gZXh0ZW5kcyBQb2ludGVyT2Zmc2V0LCBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcblxyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG5cclxuICAgIHJlYWRvbmx5IHR5cGU6IFQ7XHJcblxyXG4gICAgcmVhZG9ubHkgbGVmdDogQ29tcGlsZWRFeHByZXNzaW9uPFQsIFwicHJ2YWx1ZVwiPiB8IENvbXBpbGVkRXhwcmVzc2lvbjxJbnRlZ3JhbFR5cGUsIFwicHJ2YWx1ZVwiPjtcclxuICAgIHJlYWRvbmx5IHJpZ2h0OiBDb21waWxlZEV4cHJlc3Npb248VCwgXCJwcnZhbHVlXCI+IHwgQ29tcGlsZWRFeHByZXNzaW9uPEludGVncmFsVHlwZSwgXCJwcnZhbHVlXCI+O1xyXG4gICAgXHJcbiAgICByZWFkb25seSBwb2ludGVyOiBDb21waWxlZEV4cHJlc3Npb248VCwgXCJwcnZhbHVlXCI+O1xyXG4gICAgcmVhZG9ubHkgb2Zmc2V0OiBDb21waWxlZEV4cHJlc3Npb248SW50ZWdyYWxUeXBlLCBcInBydmFsdWVcIj47XHJcbiAgICBcclxuICAgIHJlYWRvbmx5IHBvaW50ZXJPbkxlZnQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVQb2ludGVyT2Zmc2V0PFQgZXh0ZW5kcyBQb2ludGVyVHlwZSA9IFBvaW50ZXJUeXBlPiBleHRlbmRzIFJ1bnRpbWVCaW5hcnlPcGVyYXRvcjxULCBDb21waWxlZFBvaW50ZXJPZmZzZXQ8VD4+IHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbGVmdDogUnVudGltZUV4cHJlc3Npb248VCwgXCJwcnZhbHVlXCI+IHwgUnVudGltZUV4cHJlc3Npb248SW50ZWdyYWxUeXBlLCBcInBydmFsdWVcIj47IC8vIG5hcnJvd3MgdHlwZSBvZiBtZW1iZXIgaW4gYmFzZSBjbGFzc1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHJpZ2h0OiBSdW50aW1lRXhwcmVzc2lvbjxULCBcInBydmFsdWVcIj4gfCBSdW50aW1lRXhwcmVzc2lvbjxJbnRlZ3JhbFR5cGUsIFwicHJ2YWx1ZVwiPjsgLy8gbmFycm93cyB0eXBlIG9mIG1lbWJlciBpbiBiYXNlIGNsYXNzXHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHBvaW50ZXI6IFJ1bnRpbWVFeHByZXNzaW9uPFQsIFwicHJ2YWx1ZVwiPjtcclxuICAgIHB1YmxpYyByZWFkb25seSBvZmZzZXQ6IFJ1bnRpbWVFeHByZXNzaW9uPEludGVncmFsVHlwZSwgXCJwcnZhbHVlXCI+O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IENvbXBpbGVkUG9pbnRlck9mZnNldDxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbiAgICAgICAgdGhpcy5wb2ludGVyID0gdGhpcy5tb2RlbC5wb2ludGVyLmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5tb2RlbC5vZmZzZXQuY3JlYXRlUnVudGltZUV4cHJlc3Npb24odGhpcyk7XHJcbiAgICAgICAgaWYgKG1vZGVsLnBvaW50ZXJPbkxlZnQpIHtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5wb2ludGVyO1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMucG9pbnRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRTdWJleHByZXNzaW9ucyhbdGhpcy5sZWZ0LCB0aGlzLnJpZ2h0XSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9wZXJhdGUoKSB7XHJcblxyXG4gICAgICAgIC8vIGNvZGUgYmVsb3cgY29tcHV0ZXMgdGhlIG5ldyBhZGRyZXNzIGFmdGVyIHBvaW50ZXIgYWRkaXRpb24sIHdoaWxlIHByZXNlcnZpbmcgUlRUSVxyXG4gICAgICAgIC8vICAgcmVzdWx0ID0gcG9pbnRlciArIG9mZnNldCAqIHBvaW50ZXJTaXplXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucG9pbnRlci5ldmFsUmVzdWx0LnBvaW50ZXJPZmZzZXQodGhpcy5vZmZzZXQuZXZhbFJlc3VsdCk7XHJcbiAgICAgICAgdGhpcy5zZXRFdmFsUmVzdWx0KDxWQ1Jlc3VsdFR5cGVzPFQsXCJwcnZhbHVlXCI+PnJlc3VsdCk7IC8vIG5vdCBzdXJlIHdoeSBjYXN0IGlzIG5lY2Vzc2FyeSBoZXJlXHJcblxyXG4gICAgICAgIGxldCByZXN1bHRUeXBlID0gcmVzdWx0LnR5cGU7XHJcbiAgICAgICAgaWYgKHJlc3VsdFR5cGUuaXNUeXBlKEFycmF5UG9pbnRlcikpe1xyXG4gICAgICAgICAgICAvLyBDaGVjayB0aGF0IHdlIGhhdmVuJ3QgcnVuIG9mZiB0aGUgYXJyYXlcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC5yYXdWYWx1ZSA8IHJlc3VsdFR5cGUubWluKCkpe1xyXG4gICAgICAgICAgICAgICAgLy9zaW0uYWxlcnQoXCJPb3BzLiBUaGF0IHBvaW50ZXIganVzdCB3YW5kZXJlZCBvZmYgdGhlIGJlZ2lubmluZyBvZiBpdHMgYXJyYXkuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdFR5cGUub25lUGFzdCgpIDwgcmVzdWx0LnJhd1ZhbHVlKXtcclxuICAgICAgICAgICAgICAgIC8vc2ltLmFsZXJ0KFwiT29wcy4gVGhhdCBwb2ludGVyIGp1c3Qgd2FuZGVyZWQgb2ZmIHRoZSBlbmQgb2YgaXRzIGFycmF5LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAvLyBJZiB0aGUgUlRUSSB3b3JrcyB3ZWxsIGVub3VnaCwgdGhpcyBzaG91bGQgYWx3YXlzIGJlIHVuc2FmZVxyXG4gICAgICAgICAgICB0aGlzLnNpbS5ldmVudE9jY3VycmVkKFNpbXVsYXRpb25FdmVudC5VTkRFRklORURfQkVIQVZJT1IsIFwiVWgsIEkgZG9uJ3QgdGhpbmsgeW91J3JlIHN1cHBvc2VkIHRvIGRvIGFyaXRobWV0aWMgd2l0aCB0aGF0IHBvaW50ZXIuIEl0J3Mgbm90IHBvaW50aW5nIGludG8gYW4gYXJyYXkuXCIsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlbGF0aW9uYWxCaW5hcnlPcGVyYXRvckV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJyZWxhdGlvbmFsX2JpbmFyeV9vcGVyYXRvcl9leHByZXNzaW9uXCI7XHJcbiAgICByZWFkb25seSBvcGVyYXRvcjogdF9SZWxhdGlvbmFsQmluYXJ5T3BlcmF0b3JzO1xyXG4gICAgcmVhZG9ubHkgbGVmdDogRXhwcmVzc2lvbkFTVE5vZGU7XHJcbiAgICByZWFkb25seSByaWdodDogRXhwcmVzc2lvbkFTVE5vZGU7XHJcbiAgICByZWFkb25seSBhc3NvY2lhdGl2aXR5OiBcImxlZnRcIjtcclxufVxyXG5cclxudHlwZSB0X1JlbGF0aW9uYWxCaW5hcnlPcGVyYXRvcnMgPSBcIjxcIiB8IFwiPlwiIHwgXCI8PVwiIHwgXCI+PVwiIHwgXCI9PVwiIHwgXCIhPVwiO1xyXG5cclxuY29uc3QgUkVMQVRJT05BTF9CSU5BUllfT1BFUkFUSU9OUyA6IHtbaW5kZXg6c3RyaW5nXTogPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSA9PiBWYWx1ZTxCb29sPn1cclxuICAgID0ge1xyXG4gICAgXCI8XCIgOiBmdW5jdGlvbjxUIGV4dGVuZHMgQXRvbWljVHlwZT4obGVmdDogVmFsdWU8VD4sIHJpZ2h0OiBWYWx1ZTxUPikge1xyXG4gICAgICAgIHJldHVybiBsZWZ0LmNvbXBhcmUocmlnaHQsIGx0KTtcclxuICAgIH0sXHJcbiAgICBcIj5cIiA6IGZ1bmN0aW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuY29tcGFyZShyaWdodCwgZ3QpO1xyXG4gICAgfSxcclxuICAgIFwiPD1cIiA6IGZ1bmN0aW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihsZWZ0OiBWYWx1ZTxUPiwgcmlnaHQ6IFZhbHVlPFQ+KSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuY29tcGFyZShyaWdodCwgbHRlKTtcclxuICAgIH0sXHJcbiAgICBcIj49XCIgOiBmdW5jdGlvbjxUIGV4dGVuZHMgQXRvbWljVHlwZT4obGVmdDogVmFsdWU8VD4sIHJpZ2h0OiBWYWx1ZTxUPikge1xyXG4gICAgICAgIHJldHVybiBsZWZ0LmNvbXBhcmUocmlnaHQsIGd0ZSk7XHJcbiAgICB9LFxyXG4gICAgXCI9PVwiIDogZnVuY3Rpb248VCBleHRlbmRzIEF0b21pY1R5cGU+KGxlZnQ6IFZhbHVlPFQ+LCByaWdodDogVmFsdWU8VD4pIHtcclxuICAgICAgICByZXR1cm4gbGVmdC5jb21wYXJlKHJpZ2h0LCBlcSk7XHJcbiAgICB9LFxyXG4gICAgXCIhPVwiIDogZnVuY3Rpb248VCBleHRlbmRzIEF0b21pY1R5cGU+KGxlZnQ6IFZhbHVlPFQ+LCByaWdodDogVmFsdWU8VD4pIHtcclxuICAgICAgICByZXR1cm4gbGVmdC5jb21wYXJlKHJpZ2h0LCBuZSk7XHJcbiAgICB9LFxyXG59XHJcblxyXG5jbGFzcyBSZWxhdGlvbmFsQmluYXJ5T3BlcmF0b3IgZXh0ZW5kcyBCaW5hcnlPcGVyYXRvciB7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlID0gQm9vbC5CT09MO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBsZWZ0OiBFeHByZXNzaW9uO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHJpZ2h0OiBFeHByZXNzaW9uO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBvcGVyYXRvciE6IHRfUmVsYXRpb25hbEJpbmFyeU9wZXJhdG9yczsgLy8gTmFycm93cyB0eXBlIGZyb20gYmFzZVxyXG5cclxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCwgbGVmdDogRXhwcmVzc2lvbiwgcmlnaHQ6IEV4cHJlc3Npb24sIG9wZXJhdG9yOiB0X1JlbGF0aW9uYWxCaW5hcnlPcGVyYXRvcnMpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0LCBvcGVyYXRvcik7XHJcblxyXG4gICAgICAgIGlmICghbGVmdC5pc1dlbGxUeXBlZCgpIHx8ICFyaWdodC5pc1dlbGxUeXBlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoKHRoaXMubGVmdCA9IGxlZnQpO1xyXG4gICAgICAgICAgICB0aGlzLmF0dGFjaCh0aGlzLnJpZ2h0ID0gcmlnaHQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEFyaXRobWV0aWMgdHlwZXMgYXJlIHJlcXVpcmVkIChub3RlOiBwb2ludGVyIGNvbXBhcmlzb25zIGhhdmUgdGhlaXIgb3duIFBvaW50ZXJSZWxhdGlvbmFsT3BlcmF0aW9uIGNsYXNzKVxyXG4gICAgICAgIGlmICghbGVmdC5pc0FyaXRobWV0aWNUeXBlZCgpIHx8ICFyaWdodC5pc0FyaXRobWV0aWNUeXBlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmJpbmFyeS5hcml0aG1ldGljX29wZXJhbmRzKHRoaXMsIHRoaXMub3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSk7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoKHRoaXMubGVmdCA9IGxlZnQpO1xyXG4gICAgICAgICAgICB0aGlzLmF0dGFjaCh0aGlzLnJpZ2h0ID0gcmlnaHQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgW2NvbnZlcnRlZExlZnQsIGNvbnZlcnRlZFJpZ2h0XSA9IHVzdWFsQXJpdGhtZXRpY0NvbnZlcnNpb25zKGxlZnQsIHJpZ2h0KTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIXNhbWVUeXBlKGNvbnZlcnRlZExlZnQudHlwZSEsIGNvbnZlcnRlZFJpZ2h0LnR5cGUhKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5pbnZhbGlkX2JpbmFyeV9vcGVyYW5kcyh0aGlzLCB0aGlzLm9wZXJhdG9yLCBjb252ZXJ0ZWRMZWZ0LCBjb252ZXJ0ZWRSaWdodCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy5sZWZ0ID0gY29udmVydGVkTGVmdCk7XHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy5yaWdodCA9IGNvbnZlcnRlZFJpZ2h0KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tQVNUKGFzdDogUmVsYXRpb25hbEJpbmFyeU9wZXJhdG9yRXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA6IFJlbGF0aW9uYWxCaW5hcnlPcGVyYXRvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWxhdGlvbmFsQmluYXJ5T3BlcmF0b3IoY29udGV4dCxcclxuICAgICAgICAgICAgY3JlYXRlRXhwcmVzc2lvbkZyb21BU1QoYXN0LmxlZnQsIGNvbnRleHQpLFxyXG4gICAgICAgICAgICBjcmVhdGVFeHByZXNzaW9uRnJvbUFTVChhc3QucmlnaHQsIGNvbnRleHQpLFxyXG4gICAgICAgICAgICBhc3Qub3BlcmF0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgQXJpdGhtZXRpY1R5cGU+KHRoaXM6IENvbXBpbGVkUmVsYXRpb25hbEJpbmFyeU9wZXJhdG9yPFQ+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogUnVudGltZVJlbGF0aW9uYWxCaW5hcnlPcGVyYXRvcjxUPjtcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+KHRoaXM6IENvbXBpbGVkRXhwcmVzc2lvbjxULFY+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogbmV2ZXI7XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIEFyaXRobWV0aWNUeXBlPih0aGlzOiBDb21waWxlZFJlbGF0aW9uYWxCaW5hcnlPcGVyYXRvcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVSZWxhdGlvbmFsQmluYXJ5T3BlcmF0b3I8VD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUnVudGltZVJlbGF0aW9uYWxCaW5hcnlPcGVyYXRvcih0aGlzLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZUV2YWxSZXN1bHQoZGVwdGg6IG51bWJlcik6IERlc2NyaXB0aW9uIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZFJlbGF0aW9uYWxCaW5hcnlPcGVyYXRvcjxUIGV4dGVuZHMgQXJpdGhtZXRpY1R5cGU+IGV4dGVuZHMgUmVsYXRpb25hbEJpbmFyeU9wZXJhdG9yLCBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcblxyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG5cclxuICAgIHJlYWRvbmx5IGxlZnQ6IENvbXBpbGVkRXhwcmVzc2lvbjxULFwicHJ2YWx1ZVwiPjtcclxuICAgIHJlYWRvbmx5IHJpZ2h0OiBDb21waWxlZEV4cHJlc3Npb248VCxcInBydmFsdWVcIj47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lUmVsYXRpb25hbEJpbmFyeU9wZXJhdG9yPFQgZXh0ZW5kcyBBcml0aG1ldGljVHlwZT4gZXh0ZW5kcyBSdW50aW1lQmluYXJ5T3BlcmF0b3I8Qm9vbCwgQ29tcGlsZWRSZWxhdGlvbmFsQmluYXJ5T3BlcmF0b3I8VD4+IHtcclxuICAgIFxyXG4gICAgcHVibGljIHJlYWRvbmx5IGxlZnQ6IFJ1bnRpbWVFeHByZXNzaW9uPFQsIFwicHJ2YWx1ZVwiPjtcclxuICAgIHB1YmxpYyByZWFkb25seSByaWdodDogUnVudGltZUV4cHJlc3Npb248VCwgXCJwcnZhbHVlXCI+O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IENvbXBpbGVkUmVsYXRpb25hbEJpbmFyeU9wZXJhdG9yPFQ+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLm1vZGVsLmxlZnQuY3JlYXRlUnVudGltZUV4cHJlc3Npb24odGhpcyk7XHJcbiAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMubW9kZWwucmlnaHQuY3JlYXRlUnVudGltZUV4cHJlc3Npb24odGhpcyk7XHJcbiAgICAgICAgdGhpcy5zZXRTdWJleHByZXNzaW9ucyhbdGhpcy5sZWZ0LCB0aGlzLnJpZ2h0XSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9wZXJhdGUoKSB7XHJcbiAgICAgICAgLy8gTm90IHN1cmUgd2h5IHRoZSBjYXN0IGhlcmUgaXMgbmVjZXNzYXJ5IGJ1dCBhcHBhcmVudGx5IFR5cGVzY3JpcHQgbmVlZHMgaXRcclxuICAgICAgICB0aGlzLnNldEV2YWxSZXN1bHQoUkVMQVRJT05BTF9CSU5BUllfT1BFUkFUSU9OU1t0aGlzLm1vZGVsLm9wZXJhdG9yXSh0aGlzLmxlZnQuZXZhbFJlc3VsdCwgdGhpcy5yaWdodC5ldmFsUmVzdWx0KSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vIFBvaW50ZXJSZWxhdGlvbmFsQmluYXJ5T3BlcmF0b3JcclxuXHJcblxyXG4vLyAgICAgY29udmVydCA6IGZ1bmN0aW9uKCl7XHJcblxyXG4vLyAgICAgICAgIGlmIChpc0EodGhpcy5sZWZ0LnR5cGUsIFR5cGVzLlBvaW50ZXIpICYmIGlzQSh0aGlzLnJpZ2h0LCBMaXRlcmFsKSAmJiBpc0EodGhpcy5yaWdodC50eXBlLCBUeXBlcy5JbnQpICYmIHRoaXMucmlnaHQudmFsdWUucmF3VmFsdWUoKSA9PSAwKXtcclxuLy8gICAgICAgICAgICAgdGhpcy5yaWdodCA9IENvbnZlcnNpb25zLk51bGxQb2ludGVyQ29udmVyc2lvbi5pbnN0YW5jZSh0aGlzLnJpZ2h0LCB0aGlzLmxlZnQudHlwZSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGlmIChpc0EodGhpcy5yaWdodC50eXBlLCBUeXBlcy5Qb2ludGVyKSAmJiBpc0EodGhpcy5sZWZ0LCBMaXRlcmFsKSAmJiBpc0EodGhpcy5sZWZ0LnR5cGUsIFR5cGVzLkludCkgJiYgdGhpcy5sZWZ0LnZhbHVlLnJhd1ZhbHVlKCkgPT0gMCl7XHJcbi8vICAgICAgICAgICAgIHRoaXMubGVmdCA9IENvbnZlcnNpb25zLk51bGxQb2ludGVyQ29udmVyc2lvbi5pbnN0YW5jZSh0aGlzLmxlZnQsIHRoaXMucmlnaHQudHlwZSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICB0eXBlQ2hlY2sgOiBmdW5jdGlvbigpe1xyXG5cclxuLy8gICAgICAgICAvLyBOb3RlOiB0eXBlQ2hlY2sgaXMgb25seSBjYWxsZWQgaWYgaXQncyBub3QgYW4gb3ZlcmxvYWRcclxuXHJcbi8vICAgICAgICAgaWYgKGlzQSh0aGlzLmxlZnQudHlwZSwgVHlwZXMuUG9pbnRlcikpe1xyXG4vLyAgICAgICAgICAgICBpZiAoIWlzQSh0aGlzLnJpZ2h0LnR5cGUsIFR5cGVzLlBvaW50ZXIpKXtcclxuLy8gICAgICAgICAgICAgICAgIC8vIFRPRE8gdGhpcyBpcyBhIGhhY2sgdW50aWwgSSBpbXBsZW1lbnQgZnVuY3Rpb25zIHRvIGRldGVybWluZSBjdi1jb21iaW5lZCB0eXBlIGFuZCBjb21wb3NpdGUgcG9pbnRlciB0eXBlc1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuaW52YWxpZF9iaW5hcnlfb3BlcmFuZHModGhpcywgdGhpcy5vcGVyYXRvciwgdGhpcy5sZWZ0LCB0aGlzLnJpZ2h0KSk7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIG9wZXJhdGUgOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgc2ltLCBpbnN0KXtcclxuLy8gICAgICAgICBpZiAodGhpcy5pc1BvaW50ZXJDb21wYXJpc2lvbikge1xyXG4vLyAgICAgICAgICAgICBpZiAoIXRoaXMuYWxsb3dEaWZmQXJyYXlQb2ludGVycyAmJiAoIWlzQShsZWZ0LnR5cGUsIFR5cGVzLkFycmF5UG9pbnRlcikgfHwgIWlzQShyaWdodC50eXBlLCBUeXBlcy5BcnJheVBvaW50ZXIpIHx8IGxlZnQudHlwZS5hcnJPYmogIT09IHJpZ2h0LnR5cGUuYXJyT2JqKSl7XHJcbi8vICAgICAgICAgICAgICAgICBzaW0udW5zcGVjaWZpZWRCZWhhdmlvcihcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHRyeWluZyB0byBzZWUgd2hpY2ggcG9pbnRlciBjb21lcyBiZWZvcmUvYWZ0ZXIgaW4gbWVtb3J5LCBidXQgdGhpcyBvbmx5IG1ha2VzIHNlbnNlIGlmIGJvdGggcG9pbnRlcnMgY29tZSBmcm9tIHRoZSBzYW1lIGFycmF5LiBJIGRvbid0IHRoaW5rIHRoYXQncyB0aGUgY2FzZSBoZXJlLlwiKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICByZXR1cm4gVmFsdWUuaW5zdGFuY2UodGhpcy5jb21wYXJlKGxlZnQudmFsdWUsIHJpZ2h0LnZhbHVlKSwgdGhpcy50eXBlKTsgLy8gVE9ETyBtYXRjaCBDKysgYXJpdGhtZXRpY1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMb2dpY2FsQmluYXJ5T3BlcmF0b3JFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwibG9naWNhbF9iaW5hcnlfb3BlcmF0b3JfZXhwcmVzc2lvblwiO1xyXG4gICAgcmVhZG9ubHkgb3BlcmF0b3I6IHRfTG9naWNhbEJpbmFyeU9wZXJhdG9ycztcclxuICAgIHJlYWRvbmx5IGxlZnQ6IEV4cHJlc3Npb25BU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgcmlnaHQ6IEV4cHJlc3Npb25BU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgYXNzb2NpYXRpdml0eTogXCJsZWZ0XCI7XHJcbn1cclxuXHJcbnR5cGUgdF9Mb2dpY2FsQmluYXJ5T3BlcmF0b3JzID0gXCImJlwiIHwgXCJ8fFwiO1xyXG5cclxuY2xhc3MgTG9naWNhbEJpbmFyeU9wZXJhdG9yIGV4dGVuZHMgQmluYXJ5T3BlcmF0b3Ige1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZSA9IG5ldyBCb29sKCk7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGxlZnQ6IEV4cHJlc3Npb247XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmlnaHQ6IEV4cHJlc3Npb247XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG9wZXJhdG9yITogdF9Mb2dpY2FsQmluYXJ5T3BlcmF0b3JzOyAvLyBOYXJyb3dzIHR5cGUgZnJvbSBiYXNlXHJcblxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0LCBsZWZ0OiBFeHByZXNzaW9uLCByaWdodDogRXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRfTG9naWNhbEJpbmFyeU9wZXJhdG9ycykge1xyXG4gICAgICAgIHN1cGVyKGNvbnRleHQsIG9wZXJhdG9yKTtcclxuXHJcbiAgICAgICAgaWYgKGxlZnQuaXNXZWxsVHlwZWQoKSAmJiByaWdodC5pc1dlbGxUeXBlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoKHRoaXMubGVmdCA9IHRoaXMuY29tcGlsZUxvZ2ljYWxTdWJleHByZXNzaW9uKGxlZnQpKTtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2godGhpcy5yaWdodCA9IHRoaXMuY29tcGlsZUxvZ2ljYWxTdWJleHByZXNzaW9uKHJpZ2h0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmF0dGFjaCh0aGlzLmxlZnQgPSBsZWZ0KTtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2godGhpcy5yaWdodCA9IHJpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb21waWxlTG9naWNhbFN1YmV4cHJlc3Npb24oc3ViZXhwciA6IFR5cGVkRXhwcmVzc2lvbikge1xyXG4gICAgICAgIHN1YmV4cHIgPSBzdGFuZGFyZENvbnZlcnNpb24oc3ViZXhwciwgQm9vbC5CT09MKTtcclxuICAgICAgICBpZiAoIWlzVHlwZShzdWJleHByLnR5cGUsIEJvb2wpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmJpbmFyeS5ib29sZWFuX29wZXJhbmQodGhpcywgdGhpcy5vcGVyYXRvciwgc3ViZXhwcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3ViZXhwcjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tQVNUKGFzdDogTG9naWNhbEJpbmFyeU9wZXJhdG9yRXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSA6IExvZ2ljYWxCaW5hcnlPcGVyYXRvcntcclxuICAgICAgICByZXR1cm4gbmV3IExvZ2ljYWxCaW5hcnlPcGVyYXRvcihjb250ZXh0LFxyXG4gICAgICAgICAgICBjcmVhdGVFeHByZXNzaW9uRnJvbUFTVChhc3QubGVmdCwgY29udGV4dCksXHJcbiAgICAgICAgICAgIGNyZWF0ZUV4cHJlc3Npb25Gcm9tQVNUKGFzdC5yaWdodCwgY29udGV4dCksXHJcbiAgICAgICAgICAgIGFzdC5vcGVyYXRvcik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbih0aGlzOiBDb21waWxlZExvZ2ljYWxCaW5hcnlPcGVyYXRvciwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVMb2dpY2FsQmluYXJ5T3BlcmF0b3I7XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIEF0b21pY1R5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5Pih0aGlzOiBDb21waWxlZEV4cHJlc3Npb248VCxWPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IG5ldmVyO1xyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXM6IENvbXBpbGVkTG9naWNhbEJpbmFyeU9wZXJhdG9yLCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogUnVudGltZUxvZ2ljYWxCaW5hcnlPcGVyYXRvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSdW50aW1lTG9naWNhbEJpbmFyeU9wZXJhdG9yKHRoaXMsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlRXZhbFJlc3VsdChkZXB0aDogbnVtYmVyKTogRGVzY3JpcHRpb24ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBwdWJsaWMgaXNUYWlsQ2hpbGQoY2hpbGQ6IENQUENvbnN0cnVjdCkge1xyXG4gICAgLy8gICAgIGlmIChjaGlsZCA9PT0gdGhpcy5sZWZ0KXtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHtpc1RhaWw6IGZhbHNlLFxyXG4gICAgLy8gICAgICAgICAgICAgcmVhc29uOiBcIlRoZSByaWdodCBvcGVyYW5kIG9mIHRoZSBcIiArIHRoaXMub3BlcmF0b3IgKyBcIiBvcGVyYXRvciBtYXkgbmVlZCB0byBiZSBjaGVja2VkIGlmIGl0IGRvZXMgbm90IHNob3J0IGNpcmN1aXQuXCIsXHJcbiAgICAvLyAgICAgICAgICAgICBvdGhlcnM6IFt0aGlzLnJpZ2h0XVxyXG4gICAgLy8gICAgICAgICB9O1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBlbHNle1xyXG4gICAgLy8gICAgICAgICByZXR1cm4ge2lzVGFpbDogdHJ1ZSxcclxuICAgIC8vICAgICAgICAgICAgIHJlYXNvbjogXCJCZWNhdXNlIHRoZSBcIiArIHRoaXMub3BlcmF0b3IgKyBcIiBvcGVyYXRvciBzaG9ydCBjaXJjdWl0cywgdGhlIHJpZ2h0IG9wZXJhbmQgaXMgZ3VhcmFudGVlZCB0byBiZSBldmFsdWF0ZWQgbGFzdCBhbmQgaXRzIHJlc3VsdCBpcyB1c2VkIGRpcmVjdGx5IChubyBjb21iaW5hdGlvbiB3aXRoIGxlZnQgc2lkZSBuZWVkZWQpLlwiXHJcbiAgICAvLyAgICAgICAgIH07XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZExvZ2ljYWxCaW5hcnlPcGVyYXRvciBleHRlbmRzIExvZ2ljYWxCaW5hcnlPcGVyYXRvciwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG5cclxuICAgIHJlYWRvbmx5IGxlZnQ6IENvbXBpbGVkRXhwcmVzc2lvbjxCb29sLCBcInBydmFsdWVcIj5cclxuICAgIHJlYWRvbmx5IHJpZ2h0OiBDb21waWxlZEV4cHJlc3Npb248Qm9vbCwgXCJwcnZhbHVlXCI+XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lTG9naWNhbEJpbmFyeU9wZXJhdG9yIGV4dGVuZHMgUnVudGltZUV4cHJlc3Npb248Qm9vbCwgXCJwcnZhbHVlXCIsIENvbXBpbGVkTG9naWNhbEJpbmFyeU9wZXJhdG9yPiB7XHJcblxyXG4gICAgcHVibGljIGxlZnQ6IFJ1bnRpbWVFeHByZXNzaW9uPEJvb2wsIFwicHJ2YWx1ZVwiPjtcclxuICAgIHB1YmxpYyByaWdodDogUnVudGltZUV4cHJlc3Npb248Qm9vbCwgXCJwcnZhbHVlXCI+O1xyXG5cclxuICAgIHByaXZhdGUgaW5kZXggPSBcImxlZnRcIjtcclxuXHJcbiAgICBwcml2YXRlIGhhc1Nob3J0Q2lyY3VpdGVkPzogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDb21waWxlZExvZ2ljYWxCaW5hcnlPcGVyYXRvciwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gdGhpcy5tb2RlbC5sZWZ0LmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLm1vZGVsLnJpZ2h0LmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuXHRwcm90ZWN0ZWQgdXBOZXh0SW1wbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pbmRleCA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICAgICAgdGhpcy5zaW0ucHVzaCh0aGlzLmxlZnQpO1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gXCJyaWdodFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmluZGV4ID09PSBcInJpZ2h0XCIpIHtcclxuICAgICAgICAgICAgbGV0IHNob3J0Q2lyY3VpdFJlc2x0ID0gdGhpcy5tb2RlbC5vcGVyYXRvciA9PT0gXCImJlwiID8gMCA6IDE7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzU2hvcnRDaXJjdWl0ZWQgPSB0aGlzLmxlZnQuZXZhbFJlc3VsdC5yYXdFcXVhbHMoc2hvcnRDaXJjdWl0UmVzbHQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmhhc1Nob3J0Q2lyY3VpdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBvbmx5IHB1c2ggcmlnaHQgY2hpbGQgaWYgd2UgaGF2ZSBub3Qgc2hvcnQgY2lyY3VpdGVkXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpbS5wdXNoKHRoaXMucmlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBcIm9wZXJhdGVcIjtcclxuICAgICAgICB9XHJcblx0fVxyXG5cdFxyXG5cdHByb3RlY3RlZCBzdGVwRm9yd2FyZEltcGwoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzU2hvcnRDaXJjdWl0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRFdmFsUmVzdWx0KHRoaXMubGVmdC5ldmFsUmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RXZhbFJlc3VsdCh0aGlzLm9wZXJhdGUodGhpcy5sZWZ0LmV2YWxSZXN1bHQsIHRoaXMucmlnaHQuZXZhbFJlc3VsdCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNpbS5wb3AoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJpdmF0ZSBvcGVyYXRlKGxlZnQ6IFZhbHVlPEJvb2w+LCByaWdodDogVmFsdWU8Qm9vbD4pIHtcclxuICAgICAgICByZXR1cm4gbGVmdC5jb21iaW5lKHJpZ2h0LCAoYTogUmF3VmFsdWVUeXBlLCBiOiBSYXdWYWx1ZVR5cGUpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwub3BlcmF0b3IgPT0gXCImJlwiID8gYSAmJiBiIDogYSB8fCBiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50ZXJUb01lbWJlckV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJwb2ludGVyX3RvX21lbWJlcl9leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ1N0eWxlQ2FzdEV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJjX3N0eWxlX2Nhc3RfZXhwcmVzc2lvblwiO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBVbmFyeUV4cHJlc3Npb25BU1ROb2RlID1cclxuICAgIFByZWZpeEluY3JlbWVudEV4cHJlc3Npb25BU1ROb2RlIHxcclxuICAgIFByZWZpeERlY3JlbWVudEV4cHJlc3Npb25BU1ROb2RlIHxcclxuICAgIERlcmVmZXJlbmNlRXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgQWRkcmVzc09mRXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgVW5hcnlQbHVzRXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgVW5hcnlNaW51c0V4cHJlc3Npb25BU1ROb2RlIHxcclxuICAgIExvZ2ljYWxOb3RFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBCaXR3aXNlTm90RXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgU2l6ZW9mRXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgU2l6ZW9mVHlwZUV4cHJlc3Npb25BU1ROb2RlIHxcclxuICAgIE5ld0V4cHJlc3Npb25BU1ROb2RlIHxcclxuICAgIERlbGV0ZUV4cHJlc3Npb25BU1ROb2RlIHxcclxuICAgIERlbGV0ZUFycmF5RXhwcmVzc2lvbkFTVE5vZGU7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByZWZpeEluY3JlbWVudEV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJwcmVmaXhfaW5jcmVtZW50X2V4cHJlc3Npb25cIjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQcmVmaXhEZWNyZW1lbnRFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwicHJlZml4X2RlY3JlbWVudF9leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGVyZWZlcmVuY2VFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwiZGVyZWZlcmVuY2VfZXhwcmVzc2lvblwiO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFkZHJlc3NPZkV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJhZGRyZXNzX29mX2V4cHJlc3Npb25cIjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVbmFyeVBsdXNFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwidW5hcnlfcGx1c19leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVW5hcnlNaW51c0V4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJ1bmFyeV9taW51c19leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9naWNhbE5vdEV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJsb2dpY2FsX25vdF9leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQml0d2lzZU5vdEV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJiaXR3aXNlX25vdF9leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2l6ZW9mRXhwcmVzc2lvbkFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcInNpemVvZl9leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2l6ZW9mVHlwZUV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJzaXplb2ZfdHlwZV9leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTmV3RXhwcmVzc2lvbkFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcIm5ld19leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGVsZXRlRXhwcmVzc2lvbkFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcImRlbGV0ZV9leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGVsZXRlQXJyYXlFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwiZGVsZXRlX2FycmF5X2V4cHJlc3Npb25cIjtcclxufVxyXG5cclxuXHJcblxyXG4vLyBleHBvcnQgdmFyIFVuYXJ5T3AgID0gRXhwcmVzc2lvbi5leHRlbmQoe1xyXG4vLyAgICAgX25hbWU6IFwiVW5hcnlPcFwiLFxyXG4vLyAgICAgaV9jaGlsZHJlblRvRXhlY3V0ZSA6IFtcIm9wZXJhbmRcIl0sXHJcbi8vICAgICBpX2NoaWxkcmVuVG9FeGVjdXRlRm9yTWVtYmVyT3ZlcmxvYWQgOiBbXCJvcGVyYW5kXCIsIFwiZnVuY0NhbGxcIl0sIC8vIGRvZXMgbm90IGluY2x1ZGUgcmhzIGJlY2F1c2UgZnVuY3Rpb24gY2FsbCBkb2VzIHRoYXRcclxuLy8gICAgIGlfY2hpbGRyZW5Ub0V4ZWN1dGVGb3JPdmVybG9hZCA6IFtcImZ1bmNDYWxsXCJdLCAvLyBkb2VzIG5vdCBpbmNsdWRlIHJocyBiZWNhdXNlIGZ1bmN0aW9uIGNhbGwgZG9lcyB0aGF0XHJcblxyXG4vLyAgICAgaV9jcmVhdGVGcm9tQVNUIDogZnVuY3Rpb24oYXN0LCBjb250ZXh0KXtcclxuLy8gICAgICAgICBVbmFyeU9wLl9wYXJlbnQuaV9jcmVhdGVGcm9tQVNULmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbi8vICAgICAgICAgdGhpcy5vcGVyYXRvciA9IGFzdC5vcGVyYXRvcjtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgY29tcGlsZSA6IGZ1bmN0aW9uKCl7XHJcblxyXG4vLyAgICAgICAgIHZhciBhdXhPcGVyYW5kID0gQ1BQQ29uc3RydWN0LmNyZWF0ZSh0aGlzLmFzdC5vcGVyYW5kLCB7cGFyZW50OiB0aGlzLCBhdXhpbGlhcnk6IHRydWV9KTtcclxuLy8gICAgICAgICBhdXhPcGVyYW5kLmNvbXBpbGUoKTtcclxuXHJcbi8vICAgICAgICAgaWYgKGlzQShhdXhPcGVyYW5kLnR5cGUsIFR5cGVzLkNsYXNzKSl7XHJcbi8vICAgICAgICAgICAgIC8vIElmIGl0J3Mgb2YgY2xhc3MgdHlwZSwgd2UgbG9vayBmb3Igb3ZlcmxvYWRzXHJcbi8vICAgICAgICAgICAgIHZhciBvdmVybG9hZE9wID0gYXV4T3BlcmFuZC50eXBlLmNsYXNzU2NvcGUuc2luZ2xlTG9va3VwKFwib3BlcmF0b3JcIiArIHRoaXMub3BlcmF0b3IsIHtcclxuLy8gICAgICAgICAgICAgICAgIG93bjp0cnVlLCBwYXJhbVR5cGVzOltdLCBpc1RoaXNDb25zdCA6IGF1eE9wZXJhbmQudHlwZS5pc0NvbnN0XHJcbi8vICAgICAgICAgICAgIH0pO1xyXG4vLyAgICAgICAgICAgICBpZiAoIW92ZXJsb2FkT3ApIHtcclxuLy8gICAgICAgICAgICAgICAgIG92ZXJsb2FkT3AgPSB0aGlzLmNvbnRleHR1YWxTY29wZS5zaW5nbGVMb29rdXAoXCJvcGVyYXRvclwiICsgdGhpcy5vcGVyYXRvciwge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHBhcmFtVHlwZXM6IFthdXhPcGVyYW5kLnR5cGVdXHJcbi8vICAgICAgICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAgICAgaWYgKG92ZXJsb2FkT3Ape1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5pc092ZXJsb2FkID0gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuaXNNZW1iZXJPdmVybG9hZCA9IGlzQShvdmVybG9hZE9wLCBNZW1iZXJGdW5jdGlvbkVudGl0eSk7XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNNZW1iZXJPdmVybG9hZCl7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gTWVtYmVyIG92ZXJsb2FkIG1lYW5zIG9wZXJhbmQgaXMgb3VyIGRpcmVjdCBjaGlsZCwgYW5kIG5vIGFyZ3VtZW50cyB0byBmdW5jdGlvbiBjYWxsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVyYW5kID0gdGhpcy5pX2NyZWF0ZUFuZENvbXBpbGVDaGlsZEV4cHIodGhpcy5hc3Qub3BlcmFuZCk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5mdW5jQ2FsbCA9IEZ1bmN0aW9uQ2FsbC5pbnN0YW5jZSh7YXJnczogW119LCB7cGFyZW50OnRoaXN9KTtcclxuLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLmZ1bmNDYWxsLmNvbXBpbGUoe2Z1bmM6IG92ZXJsb2FkT3B9KTtcclxuLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLmlfY2hpbGRyZW5Ub0V4ZWN1dGUgPSB0aGlzLmlfY2hpbGRyZW5Ub0V4ZWN1dGVGb3JNZW1iZXJPdmVybG9hZDtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gTm9uLW1lbWJlciBvdmVybG9hZCBtZWFucyBvcGVyYW5kIGlzIHRoZSBhcmd1bWVudCB0byB0aGUgZnVuY3Rpb24gY2FsbFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuZnVuY0NhbGwgPSBGdW5jdGlvbkNhbGwuaW5zdGFuY2Uoe2FyZ3M6IFt0aGlzLmFzdC5vcGVyYW5kXX0sIHtwYXJlbnQ6dGhpc30pO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuZnVuY0NhbGwuY29tcGlsZSh7ZnVuYzogb3ZlcmxvYWRPcH0pO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuaV9jaGlsZHJlblRvRXhlY3V0ZSA9IHRoaXMuaV9jaGlsZHJlblRvRXhlY3V0ZUZvck92ZXJsb2FkO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5mdW5jQ2FsbC50eXBlO1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZUNhdGVnb3J5ID0gdGhpcy5mdW5jQ2FsbC52YWx1ZUNhdGVnb3J5O1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgLy8gVE9ETzogdGhpcyBhcHBlYXJzIHRvIGFsbG93IGNvbXBpbGF0aW9uIHRvIHByb2NlZWQgZm9yIGEgY2xhc3MtdHlwZSBvcGVyYW5kIHdpdGhcclxuLy8gICAgICAgICAgICAgICAgIC8vIG5vIG92ZXJsb2FkcyBmb3VuZCwgYnV0IHRoYXQncyBkb29tZWQgdG8gZmFpbCAoSSB0aGluaz8pLiBQZXJoYXBzIG15IHRob3VnaHQgd2FzXHJcbi8vICAgICAgICAgICAgICAgICAvLyB0aGUgZXJyb3IgbWVzc2FnZXMgcHJvdmlkZWQgaWYgeW91IGFjY2lkZW50YWxseSB1c2VkIGEgdW5hcnkgb3BlcmF0b3IgZS5nLiAqIHdpdGhcclxuLy8gICAgICAgICAgICAgICAgIC8vIGEgY2xhc3MtdHlwZSBvcGVyYW5kIHdlcmUgbW9yZSBpbGx1c3RyYXRpdmUgaWYgdGhleSBzYWlkIHNvbWV0aGluZyBsaWtlIFwieW91IGNhbid0IHVzZVxyXG4vLyAgICAgICAgICAgICAgICAgLy8gKiB3aXRoIGEgbm9uLXBvaW50ZXIgdHlwZSByYXRoZXIgdGhhbiBvb3BzIGkgY2FuJ3QgZmluZCBhbiBvdmVybG9hZCBmb3IgKiB3aXRoIHRoaXMgY2xhc3MgdHlwZVxyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5vcGVyYW5kID0gdGhpcy5pX2NyZWF0ZUFuZENvbXBpbGVDaGlsZEV4cHIodGhpcy5hc3Qub3BlcmFuZCk7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnQoKTtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMudHlwZUNoZWNrKCk7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmNvbXBpbGVUZW1wb3JhcmlyZXMoKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICB0aGlzLm9wZXJhbmQgPSB0aGlzLmlfY3JlYXRlQW5kQ29tcGlsZUNoaWxkRXhwcih0aGlzLmFzdC5vcGVyYW5kKTtcclxuLy8gICAgICAgICAgICAgdGhpcy5jb252ZXJ0KCk7XHJcbi8vICAgICAgICAgICAgIHRoaXMudHlwZUNoZWNrKCk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuY29tcGlsZVRlbXBvcmFyaXJlcygpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgdXBOZXh0IDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgLy8gUHVzaCBsaHMsIHJocywgYW5kIGZ1bmN0aW9uIGNhbGwgKGlmIGxocyBjbGFzcyB0eXBlKVxyXG4vLyAgICAgICAgIHZhciB0b1JldHVybiA9IEV4cHJlc3Npb24udXBOZXh0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblxyXG4vLyAgICAgICAgIC8vIElmIHVzaW5nIGFuIGFzc2lnbm1lbnQgb3BlcmF0b3IsIHNldCByZWNlaXZlciBmb3IgZnVuY3Rpb24gY2FsbCBpbnN0YW5jZVxyXG4vLyAgICAgICAgIGlmICh0aGlzLmZ1bmNDYWxsICYmIHRoaXMuaXNNZW1iZXJPdmVybG9hZCl7XHJcbi8vICAgICAgICAgICAgIGluc3QuY2hpbGRJbnN0YW5jZXMuZnVuY0NhbGwuY2FsbGVkRnVuY3Rpb24uc2V0UmVjZWl2ZXIoRXZhbHVhdGlvblJlc3VsdFJ1bnRpbWVFbnRpdHkuaW5zdGFuY2UodGhpcy5vcGVyYW5kLnR5cGUsIGluc3QuY2hpbGRJbnN0YW5jZXMub3BlcmFuZCkpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgcmV0dXJuIHRvUmV0dXJuO1xyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBzdGVwRm9yd2FyZDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgaWYgKGluc3QuaW5kZXggPT09IFwib3BlcmF0ZVwiKXtcclxuLy8gICAgICAgICAgICAgaWYgKHRoaXMuZnVuY0NhbGwpe1xyXG4vLyAgICAgICAgICAgICAgICAgLy8gQXNzaWdubWVudCBvcGVyYXRvciBmdW5jdGlvbiBjYWxsIGhhcyBhbHJlYWR5IHRha2VuIGNhcmUgb2YgdGhlIFwiYXNzaWdubWVudFwiLlxyXG4vLyAgICAgICAgICAgICAgICAgLy8gSnVzdCBldmFsdWF0ZSB0byByZXR1cm5lZCB2YWx1ZSBmcm9tIGFzc2lnbm1lbnQgb3BlcmF0b3IuXHJcbi8vICAgICAgICAgICAgICAgICBpbnN0LnNldEV2YWxSZXN1bHQoaW5zdC5jaGlsZEluc3RhbmNlcy5mdW5jQ2FsbC5ldmFsUmVzdWx0KTtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuZG9uZShzaW0sIGluc3QpO1xyXG4vLyAgICAgICAgICAgICAgICAgLy9yZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5vcGVyYXRlKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgb3BlcmF0ZTogQ2xhc3MuX0FCU1RSQUNULFxyXG5cclxuLy8gICAgIGlzVGFpbENoaWxkIDogZnVuY3Rpb24oY2hpbGQpe1xyXG4vLyAgICAgICAgIHJldHVybiB7aXNUYWlsOiBmYWxzZSxcclxuLy8gICAgICAgICAgICAgcmVhc29uOiBcIlRoZSBcIiArIHRoaXMub3BlcmF0b3IgKyBcIiBvcGVyYXRpb24gd2lsbCBoYXBwZW4gYWZ0ZXIgdGhlIHJlY3Vyc2l2ZSBjYWxsLlwiLFxyXG4vLyAgICAgICAgICAgICBvdGhlcnM6IFt0aGlzXVxyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG5cclxuLy8gZXhwb3J0IHZhciBEZXJlZmVyZW5jZSA9IFVuYXJ5T3AuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkRlcmVmZXJlbmNlXCIsXHJcbi8vICAgICB2YWx1ZUNhdGVnb3J5OiBcImx2YWx1ZVwiLFxyXG4vLyAgICAgY29udmVydCA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgdGhpcy5vcGVyYW5kID0gdGhpcy5vcGVyYW5kID0gc3RhbmRhcmRDb252ZXJzaW9uKHRoaXMub3BlcmFuZCwgVHlwZXMuUG9pbnRlcik7XHJcbi8vICAgICB9LFxyXG4vLyAgICAgdHlwZUNoZWNrIDogZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICAvLyBUeXBlIGNoZWNrXHJcbi8vICAgICAgICAgaWYgKCFpc0EodGhpcy5vcGVyYW5kLnR5cGUsIFR5cGVzLlBvaW50ZXIpKSB7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmRlcmVmZXJlbmNlLnBvaW50ZXIodGhpcywgdGhpcy5vcGVyYW5kLnR5cGUpKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZSBpZiAoISh0aGlzLm9wZXJhbmQudHlwZS5wdHJUby5pc09iamVjdFR5cGUgfHwgaXNBKHRoaXMub3BlcmFuZC50eXBlLnB0clRvLCBUeXBlcy5GdW5jdGlvbikpKXtcclxuLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuZGVyZWZlcmVuY2UucG9pbnRlclRvT2JqZWN0VHlwZSh0aGlzLCB0aGlzLm9wZXJhbmQudHlwZSkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLm9wZXJhbmQudHlwZS5wdHJUbztcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIG9wZXJhdGU6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgIGlmIChpc0EodGhpcy5vcGVyYW5kLnR5cGUucHRyVG8sIFR5cGVzLkZ1bmN0aW9uKSl7XHJcbi8vICAgICAgICAgICAgIC8vZnVuY3Rpb24gcG9pbnRlclxyXG4vLyAgICAgICAgICAgICBpbnN0LnNldEV2YWxSZXN1bHQoaW5zdC5jaGlsZEluc3RhbmNlcy5vcGVyYW5kLmV2YWxSZXN1bHQpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICB2YXIgcHRyID0gaW5zdC5jaGlsZEluc3RhbmNlcy5vcGVyYW5kLmV2YWxSZXN1bHQ7XHJcbi8vICAgICAgICAgICAgIHZhciBhZGRyID0gcHRyLnJhd1ZhbHVlKCk7XHJcblxyXG5cclxuXHJcbi8vICAgICAgICAgICAgIC8vIElmIGl0J3MgYSBudWxsIHBvaW50ZXIsIGdpdmUgbWVzc2FnZVxyXG4vLyAgICAgICAgICAgICBpZiAoVHlwZXMuUG9pbnRlci5pc051bGwoYWRkcikpe1xyXG4vLyAgICAgICAgICAgICAgICAgc2ltLmNyYXNoKFwiT3chIFlvdXIgY29kZSBqdXN0IGRlcmVmZXJlbmNlZCBhIG51bGwgcG9pbnRlciFcIik7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZSBpZiAoVHlwZXMuUG9pbnRlci5pc05lZ2F0aXZlKGFkZHIpKXtcclxuLy8gICAgICAgICAgICAgICAgIHNpbS5jcmFzaChcIlVoLCB3b3cuIFRoZSBwb2ludGVyIHlvdSdyZSB0cnlpbmcgdG8gZGVyZWZlcmVuY2UgaGFzIGEgbmVnYXRpdmUgYWRkcmVzcy5cXG5UaGFua3MgYSBsb3QuXCIpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2UgaWYgKGlzQShwdHIudHlwZSwgVHlwZXMuQXJyYXlQb2ludGVyKSl7XHJcbi8vICAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIGFuIGFycmF5IHBvaW50ZXIsIG1ha2Ugc3VyZSBpdCdzIGluIGJvdW5kcyBhbmQgbm90IG9uZS1wYXN0XHJcbi8vICAgICAgICAgICAgICAgICBpZiAoYWRkciA8IHB0ci50eXBlLm1pbigpKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzaW0udW5kZWZpbmVkQmVoYXZpb3IoXCJUaGF0IHBvaW50ZXIgaGFzIHdhbmRlcmVkIG9mZiB0aGUgYmVnaW5uaW5nIG9mIGl0cyBhcnJheS4gRGVyZWZlcmVuY2luZyBpdCBtaWdodCBjYXVzZSBhIHNlZ2ZhdWx0LCBvciB3b3JzZSAtIHlvdSBtaWdodCBqdXN0IGFjY2Vzcy9jaGFuZ2Ugb3RoZXIgbWVtb3J5IG91dHNpZGUgdGhlIGFycmF5LlwiKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgIGVsc2UgaWYgKHB0ci50eXBlLm9uZVBhc3QoKSA8IGFkZHIpe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHNpbS51bmRlZmluZWRCZWhhdmlvcihcIlRoYXQgcG9pbnRlciBoYXMgd2FuZGVyZWQgb2ZmIHRoZSBlbmQgb2YgaXRzIGFycmF5LiBEZXJlZmVyZW5jaW5nIGl0IG1pZ2h0IGNhdXNlIGEgc2VnZmF1bHQsIG9yIHdvcnNlIC0geW91IG1pZ2h0IGp1c3QgYWNjZXNzL2NoYW5nZSBvdGhlciBtZW1vcnkgb3V0c2lkZSB0aGUgYXJyYXkuXCIpO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWRkciA9PSBwdHIudHlwZS5vbmVQYXN0KCkpe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHRlY2huaWNhbGx5IHRoaXMgaXMgbm90IHVuZGVmaW5lZCBiZWhhdmlvciB1bmxlc3MgdGhlIHJlc3VsdCBvZiB0aGUgZGVyZWZlcmVuY2UgdW5kZXJnb2VzIGFuIGx2YWx1ZS10by1ydmFsdWUgY29udmVyc2lvbiB0byBsb29rIHVwIHRoZSBvYmplY3RcclxuLy8gICAgICAgICAgICAgICAgICAgICBzaW0udW5kZWZpbmVkQmVoYXZpb3IoXCJUaGF0IHBvaW50ZXIgaXMgb25lIHBhc3QgdGhlIGVuZCBvZiBpdHMgYXJyYXkuIERvIHlvdSBoYXZlIGFuIG9mZi1ieS1vbmUgZXJyb3I/LiBEZXJlZmVyZW5jaW5nIGl0IG1pZ2h0IGNhdXNlIGEgc2VnZmF1bHQsIG9yIHdvcnNlIC0geW91IG1pZ2h0IGp1c3QgYWNjZXNzL2NoYW5nZSBvdGhlciBtZW1vcnkgb3V0c2lkZSB0aGUgYXJyYXkuXCIpO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAgICAgdmFyIG9iaiA9IHNpbS5tZW1vcnkuZGVyZWZlcmVuY2UocHRyKTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIE5vdGU6IGRlYWQgb2JqZWN0IGlzIG5vdCBuZWNlc3NhcmlseSBpbnZhbGlkLiBJbnZhbGlkIGhhcyB0byBkbyB3aXRoIHRoZSB2YWx1ZVxyXG4vLyAgICAgICAgICAgICAvLyB3aGlsZSBkZWFkL2FsaXZlIGhhcyB0byBkbyB3aXRoIHRoZSBvYmplY3QgaXRzZWxmLiBSZWFkaW5nIGZyb20gZGVhZCBvYmplY3QgZG9lc1xyXG4vLyAgICAgICAgICAgICAvLyB5aWVsZCBhbiBpbnZhbGlkIHZhbHVlIHRob3VnaC5cclxuLy8gICAgICAgICAgICAgaWYgKCFvYmouaXNBbGl2ZSgpKXtcclxuLy8gICAgICAgICAgICAgICAgIERlYWRPYmplY3RNZXNzYWdlLmluc3RhbmNlKG9iaiwge2Zyb21EZXJlZmVyZW5jZTp0cnVlfSkuZGlzcGxheShzaW0sIGluc3QpO1xyXG4vLyAgICAgICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgICAgICBpbnN0LnNldEV2YWxSZXN1bHQob2JqKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGRlc2NyaWJlRXZhbFJlc3VsdCA6IGZ1bmN0aW9uKGRlcHRoLCBzaW0sIGluc3Qpe1xyXG4vLyAgICAgICAgIGlmIChpbnN0ICYmIGluc3QuZXZhbFJlc3VsdCl7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBpbnN0LmV2YWxSZXN1bHQuZGVzY3JpYmUoKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZSBpZiAoZGVwdGggPT0gMCl7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJ0aGUgcmVzdWx0IG9mIFwiICsgdGhpcy5nZXRTb3VyY2VUZXh0KCl9O1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwidGhlIG9iamVjdCBhdCBhZGRyZXNzIFwiICsgdGhpcy5vcGVyYW5kLmRlc2NyaWJlRXZhbFJlc3VsdChkZXB0aC0xLCBzaW0sIHRoaXMuY2hpbGRJbnN0YW5jZShzaW0sIGluc3QsIFwib3BlcmFuZFwiKSkubWVzc2FnZX07XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBleHBsYWluIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgaWYgKGluc3QgJiYgaW5zdC5jaGlsZEluc3RhbmNlcyAmJiBpbnN0LmNoaWxkSW5zdGFuY2VzLm9wZXJhbmQgJiYgaW5zdC5jaGlsZEluc3RhbmNlcy5vcGVyYW5kLmV2YWxSZXN1bHQpe1xyXG4vLyAgICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwiV2Ugd2lsbCBmaW5kIHRoZSBvYmplY3QgYXQgYWRkcmVzcyBcIiArIGluc3QuY2hpbGRJbnN0YW5jZXMub3BlcmFuZC5ldmFsUmVzdWx0LmRlc2NyaWJlKCkubWVzc2FnZX1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcIlRoZSByZXN1bHQgb2YgXCIgKyB0aGlzLm9wZXJhbmQuZGVzY3JpYmVFdmFsUmVzdWx0KDAsIHNpbSwgaW5zdCAmJiBpbnN0LmNoaWxkSW5zdGFuY2VzICYmIGluc3QuY2hpbGRJbnN0YW5jZXMub3BlcmFuZCkubWVzc2FnZSArIFwiIHdpbGwgYmUgZGVyZWZlcmVuY2VkLiBUaGlzIGlzLCB0aGUgcmVzdWx0IGlzIGEgcG9pbnRlci9hZGRyZXNzIGFuZCB3ZSB3aWxsIGZvbGxvdyB0aGUgcG9pbnRlciB0byBzZWUgd2hhdCBvYmplY3QgbGl2ZXMgdGhlcmUuXCJ9O1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyBleHBvcnQgdmFyIEFkZHJlc3NPZiA9IFVuYXJ5T3AuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkFkZHJlc3NPZlwiLFxyXG4vLyAgICAgdmFsdWVDYXRlZ29yeTogXCJwcnZhbHVlXCIsXHJcblxyXG4vLyAgICAgdHlwZUNoZWNrIDogZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICAvLyBvcGVyYW5kIG11c3QgYmUgYW4gbHZhbHVlXHJcbi8vICAgICAgICAgaWYodGhpcy5vcGVyYW5kLnZhbHVlQ2F0ZWdvcnkgIT09IFwibHZhbHVlXCIpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5hZGRyZXNzT2YubHZhbHVlX3JlcXVpcmVkKHRoaXMpKTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHRoaXMudHlwZSA9IFR5cGVzLlBvaW50ZXIuaW5zdGFuY2UodGhpcy5vcGVyYW5kLnR5cGUpO1xyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBvcGVyYXRlOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICB2YXIgb2JqID0gaW5zdC5jaGlsZEluc3RhbmNlcy5vcGVyYW5kLmV2YWxSZXN1bHQ7XHJcblxyXG4vLyAgICAgICAgIGluc3Quc2V0RXZhbFJlc3VsdChvYmouZ2V0UG9pbnRlclRvKCkpO1xyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG4vLyBleHBvcnQgdmFyIFVuYXJ5UGx1cyA9IFVuYXJ5T3AuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIlVuYXJ5UGx1c1wiLFxyXG4vLyAgICAgdmFsdWVDYXRlZ29yeTogXCJwcnZhbHVlXCIsXHJcblxyXG4vLyAgICAgY29udmVydCA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgdGhpcy5vcGVyYW5kID0gdGhpcy5vcGVyYW5kID0gY29udmVydFRvUFJWYWx1ZSh0aGlzLm9wZXJhbmQpO1xyXG4vLyAgICAgICAgIGlmICh0aGlzLm9wZXJhbmQuaXNJbnRlZ3JhbFR5cGVkKCkpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLm9wZXJhbmQgPSB0aGlzLm9wZXJhbmQgPSBpbnRlZ3JhbFByb21vdGlvbih0aGlzLm9wZXJhbmQpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgdHlwZUNoZWNrIDogZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICBpZih0aGlzLm9wZXJhbmQudHlwZS5pc0FyaXRobWV0aWNUeXBlIHx8IGlzQSh0aGlzLm9wZXJhbmQudHlwZSwgVHlwZXMuUG9pbnRlcikpIHtcclxuLy8gICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5vcGVyYW5kLnR5cGU7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci51bmFyeVBsdXMub3BlcmFuZCh0aGlzKSk7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIG9wZXJhdGU6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgIHZhciB2YWwgPSBpbnN0LmNoaWxkSW5zdGFuY2VzLm9wZXJhbmQuZXZhbFJlc3VsdC52YWx1ZTtcclxuLy8gICAgICAgICBpbnN0LnNldEV2YWxSZXN1bHQoVmFsdWUuaW5zdGFuY2UodmFsLCB0aGlzLnR5cGUpKTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyBleHBvcnQgdmFyIFVuYXJ5TWludXMgPSBVbmFyeU9wLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZTogXCJVbmFyeU1pbnVzXCIsXHJcbi8vICAgICB2YWx1ZUNhdGVnb3J5OiBcInBydmFsdWVcIixcclxuXHJcbi8vICAgICBjb252ZXJ0IDogZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICB0aGlzLm9wZXJhbmQgPSB0aGlzLm9wZXJhbmQgPSBjb252ZXJ0VG9QUlZhbHVlKHRoaXMub3BlcmFuZCk7XHJcbi8vICAgICAgICAgaWYgKHRoaXMub3BlcmFuZC5pc0ludGVncmFsVHlwZWQoKSl7XHJcbi8vICAgICAgICAgICAgIHRoaXMub3BlcmFuZCA9IHRoaXMub3BlcmFuZCA9IGludGVncmFsUHJvbW90aW9uKHRoaXMub3BlcmFuZCk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICB0eXBlQ2hlY2sgOiBmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgIGlmKHRoaXMub3BlcmFuZC50eXBlLmlzQXJpdGhtZXRpY1R5cGUpIHtcclxuLy8gICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5vcGVyYW5kLnR5cGU7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci51bmFyeU1pbnVzLm9wZXJhbmQodGhpcykpO1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBvcGVyYXRlOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICB2YXIgdmFsID0gaW5zdC5jaGlsZEluc3RhbmNlcy5vcGVyYW5kLmV2YWxSZXN1bHQudmFsdWU7XHJcbi8vICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KFZhbHVlLmluc3RhbmNlKC12YWwsIHRoaXMudHlwZSkpO1xyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcbi8vIGV4cG9ydCB2YXIgTG9naWNhbE5vdCA9IFVuYXJ5T3AuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkxvZ2ljYWxOb3RcIixcclxuLy8gICAgIHZhbHVlQ2F0ZWdvcnk6IFwicHJ2YWx1ZVwiLFxyXG4vLyAgICAgdHlwZTogVHlwZXMuQm9vbC5pbnN0YW5jZSgpLFxyXG5cclxuLy8gICAgIGNvbnZlcnQgOiBmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgIHRoaXMub3BlcmFuZCA9IHN0YW5kYXJkQ29udmVyc2lvbih0aGlzLm9wZXJhbmQsIFR5cGVzLkJvb2wuaW5zdGFuY2UoKSk7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIHR5cGVDaGVjayA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgLy8gVHlwZSBjaGVja1xyXG4vLyAgICAgICAgIGlmICghaXNBKHRoaXMub3BlcmFuZC50eXBlLCBUeXBlcy5Cb29sKSl7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmxvZ2ljYWxOb3Qub3BlcmFuZF9ib29sKHRoaXMsIHRoaXMub3BlcmFuZCkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgb3BlcmF0ZTogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KFZhbHVlLmluc3RhbmNlKCFpbnN0LmNoaWxkSW5zdGFuY2VzLm9wZXJhbmQuZXZhbFJlc3VsdC52YWx1ZSwgdGhpcy50eXBlKSk7XHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG5cclxuLy8gZXhwb3J0IHZhciBCaXR3aXNlTm90ID0gVW5zdXBwb3J0ZWQuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkJpdHdpc2VOb3RcIixcclxuLy8gICAgIGVuZ2xpc2hOYW1lOiBcImJpdHdpc2Ugbm90XCJcclxuLy8gfSk7XHJcblxyXG4vLyBleHBvcnQgdmFyIFByZWZpeCA9IFVuYXJ5T3AuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIlByZWZpeFwiLFxyXG4vLyAgICAgdmFsdWVDYXRlZ29yeTogXCJsdmFsdWVcIixcclxuLy8gICAgIHR5cGVDaGVjayA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgLy8gVHlwZSBjaGVja1xyXG4vLyAgICAgICAgIGlmICh0aGlzLm9wZXJhbmQudHlwZS5pc0FyaXRobWV0aWNUeXBlIHx8IGlzQSh0aGlzLm9wZXJhbmQudHlwZSwgVHlwZXMuUG9pbnRlcikpIHtcclxuLy8gICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5vcGVyYW5kLnR5cGU7XHJcblxyXG4vLyAgICAgICAgICAgICBpZiAodGhpcy5vcGVyYXRvciA9PSBcIi0tXCIgJiYgaXNBKHRoaXMub3BlcmFuZC50eXBlLCBUeXBlcy5Cb29sKSl7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5pbnZhbGlkX29wZXJhbmQodGhpcywgdGhpcy5vcGVyYXRvciwgdGhpcy5vcGVyYW5kKSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3BlcmFuZC52YWx1ZUNhdGVnb3J5ID09PSBcImx2YWx1ZVwiKSB7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIubHZhbHVlX29wZXJhbmQodGhpcywgdGhpcy5vcGVyYXRvcikpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmludmFsaWRfb3BlcmFuZCh0aGlzLCB0aGlzLm9wZXJhdG9yLCB0aGlzLm9wZXJhbmQpKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG4vLyAgICAgb3BlcmF0ZTogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgdmFyIG9iaiA9IGluc3QuY2hpbGRJbnN0YW5jZXMub3BlcmFuZC5ldmFsUmVzdWx0O1xyXG4vLyAgICAgICAgIHZhciBhbW91bnQgPSAoaXNBKHRoaXMudHlwZSwgVHlwZXMuUG9pbnRlcikgPyB0aGlzLnR5cGUucHRyVG8uc2l6ZSA6IDEpO1xyXG5cclxuLy8gICAgICAgICB2YXIgb2xkVmFsdWUgPSByZWFkVmFsdWVXaXRoQWxlcnQob2JqLCBzaW0sIHRoaXMub3BlcmFuZCwgaW5zdC5jaGlsZEluc3RhbmNlcy5vcGVyYW5kKTtcclxuLy8gICAgICAgICB2YXIgbmV3UmF3VmFsdWUgPSB0aGlzLm9wZXJhdG9yID09PSBcIisrXCIgPyBvbGRWYWx1ZS5yYXdWYWx1ZSgpICsgYW1vdW50IDogb2xkVmFsdWUucmF3VmFsdWUoKSAtIGFtb3VudDtcclxuXHJcbi8vICAgICAgICAgaWYgKGlzQShvYmoudHlwZSwgVHlwZXMuQXJyYXlQb2ludGVyKSl7XHJcbi8vICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgd2UgaGF2ZW4ndCBydW4gb2ZmIHRoZSBhcnJheVxyXG4vLyAgICAgICAgICAgICBpZiAobmV3UmF3VmFsdWUgPCBvYmoudHlwZS5taW4oKSl7XHJcbi8vICAgICAgICAgICAgICAgICBpZiAob2JqLmlzVmFsdWVWYWxpZCgpKXsgLy8gaXQgd2FzIHZhbGlkIGJ1dCBpcyBqdXN0IG5vdyBiZWNvbWluZyBpbnZhbGlkXHJcbi8vICAgICAgICAgICAgICAgICAgICAgc2ltLmFsZXJ0KFwiT29wcy4gVGhhdCBwb2ludGVyIGp1c3Qgd2FuZGVyZWQgb2ZmIHRoZSBiZWdpbm5pbmcgb2YgaXRzIGFycmF5LlwiKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNlIGlmIChvYmoudHlwZS5vbmVQYXN0KCkgPCBuZXdSYXdWYWx1ZSl7XHJcbi8vICAgICAgICAgICAgICAgICBpZiAob2JqLmlzVmFsdWVWYWxpZCgpKXsgLy8gaXQgd2FzIHZhbGlkIGJ1dCBpcyBqdXN0IG5vdyBiZWNvbWluZyBpbnZhbGlkXHJcbi8vICAgICAgICAgICAgICAgICAgICAgc2ltLmFsZXJ0KFwiT29wcy4gVGhhdCBwb2ludGVyIGp1c3Qgd2FuZGVyZWQgb2ZmIHRoZSBlbmQgb2YgaXRzIGFycmF5LlwiKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIGlmIChpc0Eob2JqLnR5cGUsIFR5cGVzLlBvaW50ZXIpKXtcclxuLy8gICAgICAgICAgICAgLy8gSWYgdGhlIFJUVEkgd29ya3Mgd2VsbCBlbm91Z2gsIHRoaXMgc2hvdWxkIGFsd2F5cyBiZSB1bnNhZmVcclxuLy8gICAgICAgICAgICAgc2ltLnVuZGVmaW5lZEJlaGF2aW9yKFwiVWgsIEkgZG9uJ3QgdGhpbmsgeW91J3JlIHN1cHBvc2VkIHRvIGRvIGFyaXRobWV0aWMgd2l0aCB0aGF0IHBvaW50ZXIuIEl0J3Mgbm90IHBvaW50aW5nIGludG8gYW4gYXJyYXkuXCIpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgb2JqLndyaXRlVmFsdWUoVmFsdWUuaW5zdGFuY2UobmV3UmF3VmFsdWUsIG9sZFZhbHVlLnR5cGUsIHtpbnZhbGlkOiAhb2xkVmFsdWUuaXNWYWx1ZVZhbGlkKCl9KSk7XHJcbi8vICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KG9iaik7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGV4cGxhaW4gOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICB2YXIgZXZkZXNjID0gdGhpcy5vcGVyYW5kLmRlc2NyaWJlRXZhbFJlc3VsdCgwLCBzaW0sIGluc3QgJiYgaW5zdC5jaGlsZEluc3RhbmNlcyAmJiBpbnN0LmNoaWxkSW5zdGFuY2VzLm9wZXJhbmQpLm1lc3NhZ2U7XHJcbi8vICAgICAgICAgdmFyIGluY0RlYyA9IHRoaXMub3BlcmF0b3IgPT09IFwiKytcIiA/IFwiaW5jcmVtZW50ZWRcIiA6IFwiZGVjcmVtZW50ZWRcIjtcclxuLy8gICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwiRmlyc3QsIHRoZSB2YWx1ZSBvZiBcIiArIGV2ZGVzYyArIFwiIHdpbGwgYmUgXCIgKyBpbmNEZWMgKyBcIiBieSBvbmUuIFRoZW4gdGhpcyBleHByZXNzaW9uIGFzIGEgd2hvbGUgd2lsbCBldmFsdWF0ZSB0byB0aGUgbmV3IHZhbHVlIG9mIFwiICsgZXZkZXNjICsgXCIuXCJ9O1xyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG4vLyAvLyBUT0RPOiBDb25zb2xpZGF0ZSBwb3N0Zml4IGluY3JlbWVudC9kZWNyZW1lbnQgaW50byBvbmUgY2xhc3MuICBjb25zaWRlciBhbHNvIG1lcmdpbmcgc3Vic2NyaXB0XHJcbi8vIC8vIFRPRE86IEFsbG93IG92ZXJyaWRpbmcgcG9zdGZpeCBpbmNyZW1lbnQvZGVjcmVtZW50XHJcbi8vIGV4cG9ydCB2YXIgSW5jcmVtZW50ICA9IEV4cHJlc3Npb24uZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkluY3JlbWVudFwiLFxyXG4vLyAgICAgdmFsdWVDYXRlZ29yeTogXCJwcnZhbHVlXCIsXHJcbi8vICAgICBpX2NoaWxkcmVuVG9DcmVhdGUgOiBbXCJvcGVyYW5kXCJdLFxyXG4vLyAgICAgaV9jaGlsZHJlblRvRXhlY3V0ZSA6IFtcIm9wZXJhbmRcIl0sXHJcblxyXG4vLyAgICAgdHlwZUNoZWNrIDogZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICAvLyBUeXBlIGNoZWNrXHJcbi8vICAgICAgICAgaWYgKHRoaXMub3BlcmFuZC50eXBlLmlzQXJpdGhtZXRpY1R5cGUgfHwgaXNBKHRoaXMub3BlcmFuZC50eXBlLCBUeXBlcy5Qb2ludGVyKSkge1xyXG4vLyAgICAgICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLm9wZXJhbmQudHlwZTtcclxuXHJcbi8vICAgICAgICAgICAgIGlmICh0aGlzLm9wZXJhbmQudmFsdWVDYXRlZ29yeSA9PT0gXCJsdmFsdWVcIikge1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmx2YWx1ZV9vcGVyYW5kKHRoaXMsIFwiKytcIikpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmludmFsaWRfb3BlcmFuZCh0aGlzLCBcIisrXCIsIHRoaXMub3BlcmFuZCkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgc3RlcEZvcndhcmQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuXHJcbi8vICAgICAgICAgLy8gRXZhbHVhdGUgc3ViZXhwcmVzc2lvbnNcclxuLy8gICAgICAgICBpZiAoaW5zdC5pbmRleCA9PSBcIm9wZXJhdGVcIil7XHJcbi8vICAgICAgICAgICAgIHZhciBvYmogPSBpbnN0LmNoaWxkSW5zdGFuY2VzLm9wZXJhbmQuZXZhbFJlc3VsdDtcclxuLy8gICAgICAgICAgICAgdmFyIGFtb3VudCA9IChpc0EodGhpcy50eXBlLCBUeXBlcy5Qb2ludGVyKSA/IHRoaXMudHlwZS5wdHJUby5zaXplIDogMSk7XHJcbi8vICAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IHJlYWRWYWx1ZVdpdGhBbGVydChvYmosIHNpbSwgdGhpcy5vcGVyYW5kLCBpbnN0LmNoaWxkSW5zdGFuY2VzLm9wZXJhbmQpO1xyXG4vLyAgICAgICAgICAgICB2YXIgbmV3UmF3VmFsdWUgPSBvbGRWYWx1ZS5yYXdWYWx1ZSgpICsgYW1vdW50O1xyXG5cclxuXHJcbi8vICAgICAgICAgICAgIGlmIChpc0Eob2JqLnR5cGUsIFR5cGVzLkFycmF5UG9pbnRlcikpe1xyXG4vLyAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB3ZSBoYXZlbid0IHJ1biBvZmYgdGhlIGFycmF5XHJcbi8vICAgICAgICAgICAgICAgICBpZiAobmV3UmF3VmFsdWUgPCBvYmoudHlwZS5taW4oKSl7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgLy9zaW0uYWxlcnQoXCJPb3BzLiBUaGF0IHBvaW50ZXIganVzdCB3YW5kZXJlZCBvZmYgdGhlIGJlZ2lubmluZyBvZiBpdHMgYXJyYXkuXCIpO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgZWxzZSBpZiAob2JqLnR5cGUub25lUGFzdCgpIDwgbmV3UmF3VmFsdWUpe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vc2ltLmFsZXJ0KFwiT29wcy4gVGhhdCBwb2ludGVyIGp1c3Qgd2FuZGVyZWQgb2ZmIHRoZSBlbmQgb2YgaXRzIGFycmF5LlwiKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNlIGlmIChpc0Eob2JqLnR5cGUsIFR5cGVzLlBvaW50ZXIpKXtcclxuLy8gICAgICAgICAgICAgICAgIC8vIElmIHRoZSBSVFRJIHdvcmtzIHdlbGwgZW5vdWdoLCB0aGlzIHNob3VsZCBhbHdheXMgYmUgdW5zYWZlXHJcbi8vICAgICAgICAgICAgICAgICBzaW0udW5kZWZpbmVkQmVoYXZpb3IoXCJVaCwgSSBkb24ndCB0aGluayB5b3UncmUgc3VwcG9zZWQgdG8gZG8gYXJpdGhtZXRpYyB3aXRoIHRoYXQgcG9pbnRlci4gSXQncyBub3QgcG9pbnRpbmcgaW50byBhbiBhcnJheS5cIik7XHJcbi8vICAgICAgICAgICAgIH1cclxuXHJcblxyXG4vLyAgICAgICAgICAgICBvYmoud3JpdGVWYWx1ZShWYWx1ZS5pbnN0YW5jZShuZXdSYXdWYWx1ZSwgb2xkVmFsdWUudHlwZSwge2ludmFsaWQ6ICFvbGRWYWx1ZS5pc1ZhbHVlVmFsaWQoKX0pKTtcclxuLy8gICAgICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KG9sZFZhbHVlKTtcclxuLy8gICAgICAgICAgICAgdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcbi8vIGV4cG9ydCB2YXIgRGVjcmVtZW50ICA9IEV4cHJlc3Npb24uZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkRlY3JlbWVudFwiLFxyXG4vLyAgICAgdmFsdWVDYXRlZ29yeTogXCJwcnZhbHVlXCIsXHJcbi8vICAgICBpX2NoaWxkcmVuVG9DcmVhdGUgOiBbXCJvcGVyYW5kXCJdLFxyXG4vLyAgICAgaV9jaGlsZHJlblRvRXhlY3V0ZSA6IFtcIm9wZXJhbmRcIl0sXHJcbi8vICAgICB0eXBlQ2hlY2sgOiBmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgIC8vIFR5cGUgY2hlY2tcclxuLy8gICAgICAgICBpZiAodGhpcy5vcGVyYW5kLnR5cGUuaXNBcml0aG1ldGljVHlwZSB8fCBpc0EodGhpcy5vcGVyYW5kLnR5cGUsIFR5cGVzLlBvaW50ZXIpKSB7XHJcbi8vICAgICAgICAgICAgIHRoaXMudHlwZSA9IHRoaXMub3BlcmFuZC50eXBlO1xyXG5cclxuLy8gICAgICAgICAgICAgaWYgKHRoaXMub3BlcmF0b3IgPSBcIi0tXCIgJiYgaXNBKHRoaXMub3BlcmFuZC50eXBlLCBUeXBlcy5Cb29sKSl7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5pbnZhbGlkX29wZXJhbmQodGhpcywgdGhpcy5vcGVyYXRvciwgdGhpcy5vcGVyYW5kKSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5vcGVyYW5kLnZhbHVlQ2F0ZWdvcnkgPT09IFwibHZhbHVlXCIpIHtcclxuLy8gICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5sdmFsdWVfb3BlcmFuZCh0aGlzLCB0aGlzLm9wZXJhdG9yKSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuaW52YWxpZF9vcGVyYW5kKHRoaXMsIHRoaXMub3BlcmF0b3IsIHRoaXMub3BlcmFuZCkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcbi8vICAgICBzdGVwRm9yd2FyZCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG5cclxuLy8gICAgICAgICAvLyBFdmFsdWF0ZSBzdWJleHByZXNzaW9uc1xyXG4vLyAgICAgICAgIGlmIChpbnN0LmluZGV4ID09IFwib3BlcmF0ZVwiKXtcclxuLy8gICAgICAgICAgICAgdmFyIG9iaiA9IGluc3QuY2hpbGRJbnN0YW5jZXMub3BlcmFuZC5ldmFsUmVzdWx0O1xyXG4vLyAgICAgICAgICAgICB2YXIgYW1vdW50ID0gKGlzQSh0aGlzLnR5cGUsIFR5cGVzLlBvaW50ZXIpID8gdGhpcy50eXBlLnB0clRvLnNpemUgOiAxKTtcclxuLy8gICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gcmVhZFZhbHVlV2l0aEFsZXJ0KG9iaiwgc2ltLCB0aGlzLm9wZXJhbmQsIGluc3QuY2hpbGRJbnN0YW5jZXMub3BlcmFuZCk7XHJcbi8vICAgICAgICAgICAgIHZhciBuZXdSYXdWYWx1ZSA9IG9sZFZhbHVlLnJhd1ZhbHVlKCkgLSBhbW91bnQ7XHJcblxyXG4vLyAgICAgICAgICAgICBpZiAoaXNBKG9iai50eXBlLCBUeXBlcy5BcnJheVBvaW50ZXIpKXtcclxuLy8gICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgd2UgaGF2ZW4ndCBydW4gb2ZmIHRoZSBhcnJheVxyXG4vLyAgICAgICAgICAgICAgICAgaWYgKG5ld1Jhd1ZhbHVlIDwgb2JqLnR5cGUubWluKCkpe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vc2ltLmFsZXJ0KFwiT29wcy4gVGhhdCBwb2ludGVyIGp1c3Qgd2FuZGVyZWQgb2ZmIHRoZSBiZWdpbm5pbmcgb2YgaXRzIGFycmF5LlwiKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9iai50eXBlLm9uZVBhc3QoKSA8IG5ld1Jhd1ZhbHVlKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICAvL3NpbS5hbGVydChcIk9vcHMuIFRoYXQgcG9pbnRlciBqdXN0IHdhbmRlcmVkIG9mZiB0aGUgZW5kIG9mIGl0cyBhcnJheS5cIik7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZSBpZiAoaXNBKG9iai50eXBlLCBUeXBlcy5Qb2ludGVyKSl7XHJcbi8vICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgUlRUSSB3b3JrcyB3ZWxsIGVub3VnaCwgdGhpcyBzaG91bGQgYWx3YXlzIGJlIHVuc2FmZVxyXG4vLyAgICAgICAgICAgICAgICAgc2ltLnVuZGVmaW5lZEJlaGF2aW9yKFwiVWgsIEkgZG9uJ3QgdGhpbmsgeW91J3JlIHN1cHBvc2VkIHRvIGRvIGFyaXRobWV0aWMgd2l0aCB0aGF0IHBvaW50ZXIuIEl0J3Mgbm90IHBvaW50aW5nIGludG8gYW4gYXJyYXkuXCIpO1xyXG4vLyAgICAgICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgICAgICBvYmoud3JpdGVWYWx1ZShWYWx1ZS5pbnN0YW5jZShuZXdSYXdWYWx1ZSwgb2xkVmFsdWUudHlwZSwge2ludmFsaWQ6ICFvbGRWYWx1ZS5pc1ZhbHVlVmFsaWQoKX0pKTtcclxuLy8gICAgICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KG9sZFZhbHVlKTtcclxuLy8gICAgICAgICAgICAgdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG5cclxuLy8gLy8gVE9ETzogQWxsb3cgb3ZlcmxvYWRpbmcgU3Vic2NyaXB0IHdpdGggaW5pdGlhbGl6ZXIgbGlzdFxyXG4vLyBleHBvcnQgdmFyIFN1YnNjcmlwdCAgPSBFeHByZXNzaW9uLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZTogXCJTdWJzY3JpcHRcIixcclxuLy8gICAgIHZhbHVlQ2F0ZWdvcnk6IFwibHZhbHVlXCIsXHJcbi8vICAgICBpX2NoaWxkcmVuVG9DcmVhdGUgOiBbXCJvcGVyYW5kXCJdLFxyXG4vLyAgICAgaV9jaGlsZHJlblRvRXhlY3V0ZSA6IFtcIm9wZXJhbmRcIiwgXCJhcmdcIl0sXHJcbi8vICAgICBpX2NoaWxkcmVuVG9FeGVjdXRlRm9yTWVtYmVyT3ZlcmxvYWQgOiBbXCJvcGVyYW5kXCJdLCAvLyBkb2VzIG5vdCBpbmNsdWRlIG9mZnNldCBiZWNhdXNlIGZ1bmN0aW9uIGNhbGwgZG9lcyB0aGF0XHJcblxyXG4vLyAgICAgY29tcGlsZSA6IGZ1bmN0aW9uKCl7XHJcblxyXG4vLyAgICAgICAgIHRoaXMub3BlcmFuZC5jb21waWxlKCk7XHJcblxyXG4vLyAgICAgICAgIC8vIENoZWNrIGZvciBvdmVybG9hZFxyXG4vLyAgICAgICAgIGlmIChpc0EodGhpcy5vcGVyYW5kLnR5cGUsIFR5cGVzLkNsYXNzKSl7XHJcbi8vICAgICAgICAgICAgIHRoaXMuY29tcGlsZU1lbWJlck92ZXJsb2FkKHRoaXMub3BlcmFuZCwgW3RoaXMuYXN0LmFyZ10sIHRoaXMub3BlcmFuZC50eXBlLmlzQ29uc3QsIFwiW11cIik7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIHRoaXMub3BlcmFuZCA9IHN0YW5kYXJkQ29udmVyc2lvbih0aGlzLm9wZXJhbmQsIFR5cGVzLlBvaW50ZXIpO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFyZyA9IHRoaXMuaV9jcmVhdGVBbmRDb21waWxlQ2hpbGRFeHByKHRoaXMuYXN0LmFyZywgVHlwZXMuSW50Lmluc3RhbmNlKCkpO1xyXG5cclxuLy8gICAgICAgICAgICAgdGhpcy5jb252ZXJ0KCk7XHJcbi8vICAgICAgICAgICAgIHRoaXMudHlwZUNoZWNrKCk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuY29tcGlsZVRlbXBvcmFyaXJlcygpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgdHlwZUNoZWNrIDogZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICBpZiAoIWlzQSh0aGlzLm9wZXJhbmQudHlwZSwgVHlwZXMuUG9pbnRlcikpIHtcclxuLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuYXJyYXlfb3BlcmFuZCh0aGlzLCB0aGlzLm9wZXJhbmQudHlwZSkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLm9wZXJhbmQudHlwZS5wdHJUbztcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIGlmICghaXNBKHRoaXMuYXJnLnR5cGUsIFR5cGVzLkludCkpIHtcclxuLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuYXJyYXlfb2Zmc2V0KHRoaXMsIHRoaXMuYXJnLnR5cGUpKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuXHJcbi8vICAgICB1cE5leHQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICBpZiAodGhpcy5pc092ZXJsb2FkKVxyXG4vLyAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgaWYgKGluc3QuaW5kZXggPT09IFwic3ViZXhwcmVzc2lvbnNcIil7XHJcbi8vICAgICAgICAgICAgICAgICBpbnN0LmNoaWxkSW5zdGFuY2VzID0ge307XHJcbi8vICAgICAgICAgICAgICAgICBpbnN0LmNoaWxkSW5zdGFuY2VzLm9wZXJhbmQgPSB0aGlzLm9wZXJhbmQuY3JlYXRlQW5kUHVzaEluc3RhbmNlKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgICAgICBpbnN0LmluZGV4ID0gXCJvcGVyYXRlXCI7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNlIGlmIChpbnN0LmluZGV4ID09PSBcIm9wZXJhdGVcIil7XHJcbi8vICAgICAgICAgICAgICAgICBpbnN0LmNoaWxkSW5zdGFuY2VzLmZ1bmNDYWxsID0gdGhpcy5mdW5jQ2FsbC5jcmVhdGVBbmRQdXNoSW5zdGFuY2Uoc2ltLCBpbnN0LCBpbnN0LmNoaWxkSW5zdGFuY2VzLm9wZXJhbmQuZXZhbFJlc3VsdCk7XHJcbi8vICAgICAgICAgICAgICAgICBpbnN0LmluZGV4ID0gXCJkb25lXCI7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KGluc3QuY2hpbGRJbnN0YW5jZXMuZnVuY0NhbGwuZXZhbFJlc3VsdCk7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIEV4cHJlc3Npb25zLlN1YnNjcmlwdC5fcGFyZW50LnVwTmV4dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgc3RlcEZvcndhcmQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuXHJcbi8vICAgICAgICAgLy8gRXZhbHVhdGUgc3ViZXhwcmVzc2lvbnNcclxuLy8gICAgICAgICBpZiAoaW5zdC5pbmRleCA9PT0gXCJvcGVyYXRlXCIpe1xyXG4vLyAgICAgICAgICAgICAvLyBzdWIgYW5kIG9wZXJhbmQgYXJlIGFscmVhZHkgZXZhbHVhdGVkXHJcbi8vICAgICAgICAgICAgIC8vIHJlc3VsdCBvZiBvcGVyYW5kIHNob3VsZCBiZSBhIHBvaW50ZXJcclxuLy8gICAgICAgICAgICAgLy8gcmVzdWx0IG9mIHN1YiBzaG91bGQgYmUgYW4gaW50ZWdlclxyXG4vLyAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gaW5zdC5jaGlsZEluc3RhbmNlcy5hcmcuZXZhbFJlc3VsdDtcclxuLy8gICAgICAgICAgICAgdmFyIHB0ciA9IGluc3QuY2hpbGRJbnN0YW5jZXMub3BlcmFuZC5ldmFsUmVzdWx0O1xyXG4vLyAgICAgICAgICAgICBwdHIgPSBWYWx1ZS5pbnN0YW5jZShwdHIudmFsdWUrb2Zmc2V0LnZhbHVlKnRoaXMudHlwZS5zaXplLCBwdHIudHlwZSk7XHJcbi8vICAgICAgICAgICAgIHZhciBhZGRyID0gcHRyLnZhbHVlO1xyXG5cclxuXHJcblxyXG4vLyAgICAgICAgICAgICBpZiAoVHlwZXMuUG9pbnRlci5pc05lZ2F0aXZlKGFkZHIpKXtcclxuLy8gICAgICAgICAgICAgICAgIHNpbS5jcmFzaChcIkdvb2Qgd29yay4gWW91IHN1YnNjcmlwdGVkIHNvIGZhciBiYWNrd2FyZHMgb2ZmIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5IHlvdSB3ZW50IHRvIGEgbmVnYXRpdmUgYWRkcmVzcy4gLV9fLVwiKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNlIGlmIChpc0EocHRyLnR5cGUsIFR5cGVzLkFycmF5UG9pbnRlcikpe1xyXG4vLyAgICAgICAgICAgICAgICAgLy8gSWYgaXQncyBhbiBhcnJheSBwb2ludGVyLCBtYWtlIHN1cmUgaXQncyBpbiBib3VuZHMgYW5kIG5vdCBvbmUtcGFzdFxyXG4vLyAgICAgICAgICAgICAgICAgaWYgKGFkZHIgPCBwdHIudHlwZS5taW4oKSl7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc2ltLnVuZGVmaW5lZEJlaGF2aW9yKFwiVGhhdCBzdWJzY3JpcHQgb3BlcmF0aW9uIGdvZXMgb2ZmIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5LiBUaGlzIGNvdWxkIGNhdXNlIGEgc2VnZmF1bHQsIG9yIHdvcnNlIC0geW91IG1pZ2h0IGp1c3QgYWNjZXNzL2NoYW5nZSBvdGhlciBtZW1vcnkgb3V0c2lkZSB0aGUgYXJyYXkuXCIpO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHRyLnR5cGUub25lUGFzdCgpIDwgYWRkcil7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc2ltLnVuZGVmaW5lZEJlaGF2aW9yKFwiVGhhdCBzdWJzY3JpcHQgb3BlcmF0aW9uIGdvZXMgb2ZmIHRoZSBlbmQgb2YgdGhlIGFycmF5LiBUaGlzIGNvdWxkIGNhdXNlIGEgc2VnZmF1bHQsIG9yIHdvcnNlIC0geW91IG1pZ2h0IGp1c3QgYWNjZXNzL2NoYW5nZSBvdGhlciBtZW1vcnkgb3V0c2lkZSB0aGUgYXJyYXkuXCIpO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWRkciA9PSBwdHIudHlwZS5vbmVQYXN0KCkpe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHRlY2huaWNhbGx5IHRoaXMgaXMgbm90IHVuZGVmaW5lZCBiZWhhdmlvciB1bmxlc3MgdGhlIHJlc3VsdCBvZiB0aGUgZGVyZWZlcmVuY2UgdW5kZXJnb2VzIGFuIGx2YWx1ZS10by1ydmFsdWUgY29udmVyc2lvbiB0byBsb29rIHVwIHRoZSBvYmplY3RcclxuLy8gICAgICAgICAgICAgICAgICAgICBzaW0udW5kZWZpbmVkQmVoYXZpb3IoXCJUaGF0IHN1YnNjcmlwdCBhY2Nlc3NlcyB0aGUgZWxlbWVudCBvbmUgcGFzdCB0aGUgZW5kIG9mIHRoZSBhcnJheS4gVGhpcyBjb3VsZCBjYXVzZSBhIHNlZ2ZhdWx0LCBvciB3b3JzZSAtIHlvdSBtaWdodCBqdXN0IGFjY2Vzcy9jaGFuZ2Ugb3RoZXIgbWVtb3J5IG91dHNpZGUgdGhlIGFycmF5LlwiKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgICAgIHZhciBvYmogPSBzaW0ubWVtb3J5LmRlcmVmZXJlbmNlKHB0cik7XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBOb3RlOiBkZWFkIG9iamVjdCBpcyBub3QgbmVjZXNzYXJpbHkgaW52YWxpZC4gSW52YWxpZCBoYXMgdG8gZG8gd2l0aCB0aGUgdmFsdWVcclxuLy8gICAgICAgICAgICAgLy8gd2hpbGUgZGVhZC9hbGl2ZSBoYXMgdG8gZG8gd2l0aCB0aGUgb2JqZWN0IGl0c2VsZi4gUmVhZGluZyBmcm9tIGRlYWQgb2JqZWN0IGRvZXNcclxuLy8gICAgICAgICAgICAgLy8geWllbGQgYW4gaW52YWxpZCB2YWx1ZSB0aG91Z2guXHJcbi8vICAgICAgICAgICAgIGlmICghb2JqLmlzQWxpdmUoKSl7XHJcbi8vICAgICAgICAgICAgICAgICBEZWFkT2JqZWN0TWVzc2FnZS5pbnN0YW5jZShvYmosIHtmcm9tU3Vic2NyaXB0OnRydWV9KS5kaXNwbGF5KHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgICAgIGluc3Quc2V0RXZhbFJlc3VsdChvYmopO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGlzVGFpbENoaWxkIDogZnVuY3Rpb24oY2hpbGQpe1xyXG4vLyAgICAgICAgIHJldHVybiB7aXNUYWlsOiBmYWxzZSxcclxuLy8gICAgICAgICAgICAgcmVhc29uOiBcIlRoZSBzdWJzY3JpcHRpbmcgd2lsbCBoYXBwZW4gYWZ0ZXIgdGhlIHJlY3Vyc2l2ZSBjYWxsIHJldHVybnMuXCIsXHJcbi8vICAgICAgICAgICAgIG90aGVyczogW3RoaXNdXHJcbi8vICAgICAgICAgfTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyBleHBvcnQgdmFyIERvdCAgPSBFeHByZXNzaW9uLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZTogXCJEb3RcIixcclxuLy8gICAgIGlfcnVudGltZUNvbnN0cnVjdENsYXNzIDogUnVudGltZU1lbWJlckFjY2VzcyxcclxuLy8gICAgIGlfY2hpbGRyZW5Ub0NyZWF0ZSA6IFtcIm9wZXJhbmRcIl0sXHJcbi8vICAgICBpX2NoaWxkcmVuVG9FeGVjdXRlIDogW1wib3BlcmFuZFwiXSxcclxuXHJcbi8vICAgICBpX2NyZWF0ZUZyb21BU1QgOiBmdW5jdGlvbihhc3QsIGNvbnRleHQpIHtcclxuLy8gICAgICAgICBEb3QuX3BhcmVudC5pX2NyZWF0ZUZyb21BU1QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuLy8gICAgICAgICB0aGlzLm1lbWJlck5hbWUgPSBhc3QubWVtYmVyLmlkZW50aWZpZXI7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGNvbXBpbGUgOiBmdW5jdGlvbihjb21waWxhdGlvbkNvbnRleHQpIHtcclxuLy8gICAgICAgICB0aGlzLmlfcGFyYW1UeXBlcyA9IGNvbXBpbGF0aW9uQ29udGV4dCAmJiBjb21waWxhdGlvbkNvbnRleHQucGFyYW1UeXBlcztcclxuLy8gICAgICAgICBFeHByZXNzaW9ucy5Eb3QuX3BhcmVudC5jb21waWxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIHR5cGVDaGVjayA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgaWYgKCFpc0EodGhpcy5vcGVyYW5kLnR5cGUsIFR5cGVzLkNsYXNzKSkge1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5kb3QuY2xhc3NfdHlwZSh0aGlzKSk7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIC8vIEZpbmQgb3V0IHdoYXQgdGhpcyBpZGVudGlmaWVzXHJcbi8vICAgICAgICAgdHJ5IHtcclxuLy8gICAgICAgICAgICAgdGhpcy5lbnRpdHkgPSB0aGlzLm9wZXJhbmQudHlwZS5jbGFzc1Njb3BlLnJlcXVpcmVkTWVtYmVyTG9va3VwKHRoaXMubWVtYmVyTmFtZSwge3BhcmFtVHlwZXM6IHRoaXMuaV9wYXJhbVR5cGVzLCBpc1RoaXNDb25zdDp0aGlzLm9wZXJhbmQudHlwZS5pc0NvbnN0fSk7XHJcbi8vICAgICAgICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZW50aXR5LnR5cGU7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGNhdGNoKGUpe1xyXG4vLyAgICAgICAgICAgICBpZiAoaXNBKGUsIFNlbWFudGljRXhjZXB0aW9ucy5CYWRMb29rdXApKXtcclxuLy8gICAgICAgICAgICAgICAgIC8vIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmRvdC5tZW1iZXJMb29rdXAodGhpcywgdGhpcy5vcGVyYW5kLnR5cGUsIHRoaXMubWVtYmVyTmFtZSkpO1xyXG4vLyAgICAgICAgICAgICAgICAgLy8gVE9ETzogd2h5IGlzIHRoaXMgY29tbWVudGVkP1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKGUuYW5ub3RhdGlvbih0aGlzKSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIGlmIChpc0EodGhpcy50eXBlLCBUeXBlcy5SZWZlcmVuY2UpKXtcclxuLy8gICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy50eXBlLnJlZlRvO1xyXG4vLyAgICAgICAgICAgICB0aGlzLnZhbHVlQ2F0ZWdvcnkgPSBcImx2YWx1ZVwiO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIGlmICh0aGlzLm9wZXJhbmQudmFsdWVDYXRlZ29yeSA9PT0gXCJsdmFsdWVcIil7XHJcbi8vICAgICAgICAgICAgIHRoaXMudmFsdWVDYXRlZ29yeSA9IFwibHZhbHVlXCI7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIHRoaXMudmFsdWVDYXRlZ29yeSA9IFwieHZhbHVlXCI7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICB1cE5leHQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICBpZiAoaW5zdC5pbmRleCA9PT0gXCJzdWJleHByZXNzaW9uc1wiKXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIEV4cHJlc3Npb24udXBOZXh0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIC8vIGVudGl0eSBtYXkgYmUgTWVtYmVyVmFyaWFibGVFbnRpdHkgYnV0IHNob3VsZCBuZXZlciBiZSBhbiBBdXRvRW50aXR5XHJcbi8vICAgICAgICAgICAgIGFzc2VydCghaXNBKHRoaXMuZW50aXR5LCBBdXRvRW50aXR5KSk7XHJcbi8vICAgICAgICAgICAgIGluc3Quc2V0T2JqZWN0QWNjZXNzZWRGcm9tKGluc3QuY2hpbGRJbnN0YW5jZXMub3BlcmFuZC5ldmFsUmVzdWx0KTtcclxuLy8gICAgICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KHRoaXMuZW50aXR5LnJ1bnRpbWVMb29rdXAoc2ltLCBpbnN0KSk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuZG9uZShzaW0sIGluc3QpO1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGlzVGFpbENoaWxkIDogZnVuY3Rpb24oY2hpbGQpe1xyXG4vLyAgICAgICAgIHJldHVybiB7aXNUYWlsOiBmYWxzZSxcclxuLy8gICAgICAgICAgICAgcmVhc29uOiBcIlRoZSBkb3Qgb3BlcmF0aW9uIGl0c2VsZiB3aWxsIGhhcHBlbiBhZnRlciB0aGUgcmVjdXJzaXZlIGNhbGwgcmV0dXJucy5cIixcclxuLy8gICAgICAgICAgICAgb3RoZXJzOiBbdGhpc11cclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG5cclxuLy8gZXhwb3J0IHZhciBBcnJvdyAgPSBFeHByZXNzaW9uLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZTogXCJBcnJvd1wiLFxyXG4vLyAgICAgaV9ydW50aW1lQ29uc3RydWN0Q2xhc3MgOiBSdW50aW1lTWVtYmVyQWNjZXNzLFxyXG4vLyAgICAgdmFsdWVDYXRlZ29yeTogXCJsdmFsdWVcIixcclxuLy8gICAgIGlfY2hpbGRyZW5Ub0NyZWF0ZSA6IFtcIm9wZXJhbmRcIl0sXHJcbi8vICAgICBpX2NoaWxkcmVuVG9Db252ZXJ0IDoge1xyXG4vLyAgICAgICAgIG9wZXJhbmQgOiBUeXBlcy5Qb2ludGVyLmluc3RhbmNlKClcclxuLy8gICAgIH0sXHJcbi8vICAgICBpX2NoaWxkcmVuVG9FeGVjdXRlIDogW1wib3BlcmFuZFwiXSxcclxuXHJcbi8vICAgICBpX2NyZWF0ZUZyb21BU1QgOiBmdW5jdGlvbihhc3QsIGNvbnRleHQpIHtcclxuLy8gICAgICAgICBBcnJvdy5fcGFyZW50LmlfY3JlYXRlRnJvbUFTVC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4vLyAgICAgICAgIHRoaXMubWVtYmVyTmFtZSA9IGFzdC5tZW1iZXIuaWRlbnRpZmllcjtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgY29tcGlsZSA6IGZ1bmN0aW9uKGNvbXBpbGF0aW9uQ29udGV4dCkge1xyXG4vLyAgICAgICAgIHRoaXMuaV9wYXJhbVR5cGVzID0gY29tcGlsYXRpb25Db250ZXh0ICYmIGNvbXBpbGF0aW9uQ29udGV4dC5wYXJhbVR5cGVzO1xyXG4vLyAgICAgICAgIEV4cHJlc3Npb25zLkRvdC5fcGFyZW50LmNvbXBpbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgdHlwZUNoZWNrIDogZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICBpZiAoIWlzQSh0aGlzLm9wZXJhbmQudHlwZSwgVHlwZXMuUG9pbnRlcikgfHwgIWlzQSh0aGlzLm9wZXJhbmQudHlwZS5wdHJUbywgVHlwZXMuQ2xhc3MpKSB7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmFycm93LmNsYXNzX3BvaW50ZXJfdHlwZSh0aGlzKSk7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIC8vIEZpbmQgb3V0IHdoYXQgdGhpcyBpZGVudGlmaWVzXHJcbi8vICAgICAgICAgdHJ5e1xyXG4vLyAgICAgICAgICAgICB0aGlzLmVudGl0eSA9IHRoaXMub3BlcmFuZC50eXBlLnB0clRvLmNsYXNzU2NvcGUucmVxdWlyZWRNZW1iZXJMb29rdXAodGhpcy5tZW1iZXJOYW1lLCB7cGFyYW1UeXBlczogdGhpcy5pX3BhcmFtVHlwZXMsIGlzVGhpc0NvbnN0OnRoaXMub3BlcmFuZC50eXBlLnB0clRvLmlzQ29uc3R9KTtcclxuLy8gICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5lbnRpdHkudHlwZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgY2F0Y2goZSl7XHJcbi8vICAgICAgICAgICAgIGlmIChpc0EoZSwgU2VtYW50aWNFeGNlcHRpb25zLkJhZExvb2t1cCkpe1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuYXJyb3cubWVtYmVyTG9va3VwKHRoaXMsIHRoaXMub3BlcmFuZC50eXBlLnB0clRvLCB0aGlzLm1lbWJlck5hbWUpKTtcclxuLy8gICAgICAgICAgICAgICAgIC8vIHRoaXMuYWRkTm90ZShlLmFubm90YXRpb24odGhpcykpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBzdGVwRm9yd2FyZCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG5cclxuLy8gICAgICAgICBpZiAoaW5zdC5pbmRleCA9PSBcIm9wZXJhdGVcIil7XHJcbi8vICAgICAgICAgICAgIHZhciBhZGRyID0gaW5zdC5jaGlsZEluc3RhbmNlcy5vcGVyYW5kLmV2YWxSZXN1bHQ7XHJcbi8vICAgICAgICAgICAgIGlmIChUeXBlcy5Qb2ludGVyLmlzTnVsbChhZGRyLnJhd1ZhbHVlKCkpKXtcclxuLy8gICAgICAgICAgICAgICAgIHNpbS5jcmFzaChcIk93ISBZb3VyIGNvZGUganVzdCB0cmllZCB0byB1c2UgdGhlIGFycm93IG9wZXJhdG9yIG9uIGEgbnVsbCBwb2ludGVyIVwiKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBpbnN0LnNldE9iamVjdEFjY2Vzc2VkRnJvbShzaW0ubWVtb3J5LmRlcmVmZXJlbmNlKGFkZHIsIHRoaXMub3BlcmFuZC50eXBlLnB0clRvKSk7XHJcbi8vICAgICAgICAgICAgIGluc3Quc2V0RXZhbFJlc3VsdCh0aGlzLmVudGl0eS5ydW50aW1lTG9va3VwKHNpbSwgaW5zdCkpO1xyXG5cclxuLy8gICAgICAgICAgICAgdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgaXNUYWlsQ2hpbGQgOiBmdW5jdGlvbihjaGlsZCl7XHJcbi8vICAgICAgICAgcmV0dXJuIHtpc1RhaWw6IGZhbHNlLFxyXG4vLyAgICAgICAgICAgICByZWFzb246IFwiVGhlIGFycm93IG9wZXJhdGlvbiBpdHNlbGYgd2lsbCBoYXBwZW4gYWZ0ZXIgdGhlIHJlY3Vyc2l2ZSBjYWxsIHJldHVybnMuXCIsXHJcbi8vICAgICAgICAgICAgIG90aGVyczogW3RoaXNdXHJcbi8vICAgICAgICAgfTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG5cclxuXHJcblxyXG4vLyBleHBvcnQgdmFyIFBSRURFRklORURfRlVOQ1RJT05TID0ge1xyXG4vLyAgICAgcmFuZCA6IGZ1bmN0aW9uKGFyZ3MsIHNpbSwgaW5zdCl7XHJcbi8vICAgICAgICAgcmV0dXJuIFZhbHVlLmluc3RhbmNlKE1hdGguZmxvb3Ioc2ltLm5leHRSYW5kb20oKSAqIDMyNzY3KSwgVHlwZXMuSW50Lmluc3RhbmNlKCkpO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIFwiYXNzZXJ0XCIgOiBmdW5jdGlvbihhcmdzLCBzaW0sIGluc3Qpe1xyXG4vLyAgICAgICAgIGlmKCFhcmdzWzBdLmV2YWxSZXN1bHQudmFsdWUpe1xyXG4vLyAgICAgICAgICAgICBzaW0uYXNzZXJ0aW9uRmFpbHVyZShcIllpa2VzISBBbiBhc3NlcnQgZmFpbGVkISA8YnIgLz48c3BhbiBjbGFzcz0nY29kZSc+XCIgKyBpbnN0Lm1vZGVsLmdldFNvdXJjZVRleHQoKSArIFwiPC9zcGFuPiBvbiBsaW5lIFwiICsgaW5zdC5tb2RlbC5nZXRTb3VyY2VUZXh0KCkgKyBcIi5cIik7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIHJldHVybiBWYWx1ZS5pbnN0YW5jZShcIlwiLCBUeXBlcy5Wb2lkLmluc3RhbmNlKCkpO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIFwicGF1c2VcIiA6IGZ1bmN0aW9uKGFyZ3MsIHNpbSwgaW5zdCl7XHJcbi8vICAgICAgICAgc2ltLnBhdXNlKCk7XHJcbi8vICAgICAgICAgcmV0dXJuIFZhbHVlLmluc3RhbmNlKFwiXCIsIFR5cGVzLlZvaWQuaW5zdGFuY2UoKSk7XHJcbi8vICAgICB9LFxyXG4vLyAgICAgXCJwYXVzZUlmXCIgOiBmdW5jdGlvbihhcmdzLCBzaW0sIGluc3Qpe1xyXG4vLyAgICAgICAgIGlmKGFyZ3NbMF0uZXZhbFJlc3VsdC52YWx1ZSl7XHJcbi8vICAgICAgICAgICAgIHNpbS5wYXVzZSgpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICByZXR1cm4gVmFsdWUuaW5zdGFuY2UoXCJcIiwgVHlwZXMuVm9pZC5pbnN0YW5jZSgpKTtcclxuLy8gICAgIH1cclxuLy8gfTtcclxuXHJcbmV4cG9ydCB0eXBlIFBvc3RmaXhFeHByZXNzaW9uQVNUTm9kZSA9XHJcbiAgICBTdGF0aWNDYXN0RXhwcmVzc2lvbkFTVE5vZGUgfFxyXG4gICAgRHluYW1pY0Nhc3RFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBSZWludGVycHJldENhc3RFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBDb25zdENhc3RFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBTdWJzY3JpcHRFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBGdW5jdGlvbkNhbGxFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBEb3RFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBBcnJvd0V4cHJlc3Npb25BU1ROb2RlIHxcclxuICAgIFBvc3RmaXhJbmNyZW1lbnRFeHByZXNzaW9uQVNUTm9kZSB8XHJcbiAgICBQb3N0Zml4RGVjcmVtZW50RXhwcmVzc2lvbkFTVE5vZGU7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdGF0aWNDYXN0RXhwcmVzc2lvbkFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcInN0YXRpY19jYXN0X2V4cHJlc3Npb25cIjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljQ2FzdEV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJkeW5hbWljX2Nhc3RfZXhwcmVzc2lvblwiO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlaW50ZXJwcmV0Q2FzdEV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJyZWludGVycHJldF9jYXN0X2V4cHJlc3Npb25cIjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb25zdENhc3RFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwiY29uc3RfY2FzdF9leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaXB0RXhwcmVzc2lvbkFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcInN1YnNjcmlwdF9leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uQ2FsbEV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJmdW5jdGlvbl9jYWxsX2V4cHJlc3Npb25cIjtcclxuICAgIHJlYWRvbmx5IG9wZXJhbmQ6IEV4cHJlc3Npb25BU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgYXJnczogcmVhZG9ubHkgRXhwcmVzc2lvbkFTVE5vZGVbXTtcclxufVxyXG5cclxudHlwZSBGdW5jdGlvblJlc3VsdFR5cGU8UlQgZXh0ZW5kcyBQb3RlbnRpYWxSZXR1cm5UeXBlPiA9IE5vUmVmVHlwZTxFeGNsdWRlPFJULFZvaWRUeXBlPj47XHJcbnR5cGUgRnVuY3Rpb25WQzxSVCBleHRlbmRzIFBvdGVudGlhbFJldHVyblR5cGU+ID0gUlQgZXh0ZW5kcyBSZWZlcmVuY2VUeXBlID8gXCJsdmFsdWVcIiA6IFwicHJ2YWx1ZVwiO1xyXG5cclxuLy8gTk9URTogd2hlbiBjcmVhdGluZyB0aGlzIGZyb20gQVNULCBvcGVyYW5kIG11c3QgYmUgY3JlYXRlZC9jb21waWxlZFxyXG4vLyB3aXRoIGFkZGl0aW9uIGNvbnRleHQgaW5jbHVkaW5nIHRoZSBjb21waWxlZCB0eXBlcyBvZiB0aGUgYXJndW1lbnRzLlxyXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25DYWxsRXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24ge1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZT86IE9iamVjdFR5cGUgfCBWb2lkVHlwZTtcclxuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZUNhdGVnb3J5PzogVmFsdWVDYXRlZ29yeTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgb3BlcmFuZDogRXhwcmVzc2lvblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGFyZ3M6IHJlYWRvbmx5IEV4cHJlc3Npb25bXTtcclxuICAgIHB1YmxpYyByZWFkb25seSBjYWxsPzogRnVuY3Rpb25DYWxsO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCwgb3BlcmFuZDogRXhwcmVzc2lvbiwgYXJnczogcmVhZG9ubHkgRXhwcmVzc2lvbltdKSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy5vcGVyYW5kID0gb3BlcmFuZCk7XHJcbiAgICAgICAgdGhpcy5hcmdzID0gYXJncztcclxuICAgICAgICBhcmdzLmZvckVhY2goKGFyZykgPT4gdGhpcy5hdHRhY2goYXJnKSlcclxuXHJcbiAgICAgICAgLy8gSWYgYW55IGFyZ3VtZW50cyBhcmUgbm90IHdlbGwgdHlwZWQsIHdlIGNhbid0IHNlbGVjdCBhIGZ1bmN0aW9uLlxyXG4gICAgICAgIGlmICghYWxsV2VsbFR5cGVkKGFyZ3MpKSB7XHJcbiAgICAgICAgICAgIC8vIHR5cGUsIHZhbHVlQ2F0ZWdvcnksIGFuZCBjYWxsIHJlbWFpbiB1bmRlZmluZWRcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCEob3BlcmFuZCBpbnN0YW5jZW9mIElkZW50aWZpZXJFeHByZXNzaW9uKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5mdW5jdGlvbkNhbGwuaW52YWxpZF9vcGVyYW5kX2V4cHJlc3Npb24odGhpcywgb3BlcmFuZCkpO1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghb3BlcmFuZC5lbnRpdHkpIHtcclxuICAgICAgICAgICAgLy8gdHlwZSwgdmFsdWVDYXRlZ29yeSwgYW5kIGNhbGwgcmVtYWluIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIShvcGVyYW5kLmVudGl0eSBpbnN0YW5jZW9mIEZ1bmN0aW9uRW50aXR5KSkge1xyXG4gICAgICAgICAgICAvLyB0eXBlLCB2YWx1ZUNhdGVnb3J5LCBhbmQgY2FsbCByZW1haW4gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmZ1bmN0aW9uQ2FsbC5vcGVyYW5kKHRoaXMsIG9wZXJhbmQuZW50aXR5KSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudHlwZSA9IG5vUmVmKG9wZXJhbmQuZW50aXR5LnR5cGUucmV0dXJuVHlwZSk7XHJcblxyXG4gICAgICAgIHRoaXMudmFsdWVDYXRlZ29yeSA9IG9wZXJhbmQuZW50aXR5LnR5cGUucmV0dXJuVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZVR5cGUgPyBcImx2YWx1ZVwiIDogXCJwcnZhbHVlXCI7XHJcblxyXG4gICAgICAgIC8vIElmIGFueSBvZiB0aGUgYXJndW1lbnRzIHdlcmUgbm90IE9iamVjdFR5cGUsIGxvb2t1cCB3b3VsZG4ndCBoYXZlIGZvdW5kIGEgZnVuY3Rpb24uXHJcbiAgICAgICAgLy8gU28gdGhlIGNhc3QgYmVsb3cgc2hvdWxkIGJlIGZpbmUuXHJcbiAgICAgICAgLy8gVE9ETzogYWxsb3cgbWVtYmVyIGZ1bmN0aW9uIGNhbGxzLiAob3IgbWFrZSB0aGVtIGEgc2VwYXJhdGUgY2xhc3MgaWRrKVxyXG4gICAgICAgIHRoaXMuY2FsbCA9IG5ldyBGdW5jdGlvbkNhbGwoY29udGV4dCwgb3BlcmFuZC5lbnRpdHksIDxyZWFkb25seSBUeXBlZEV4cHJlc3Npb248T2JqZWN0VHlwZSwgVmFsdWVDYXRlZ29yeT5bXT5hcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21BU1QoYXN0OiBGdW5jdGlvbkNhbGxFeHByZXNzaW9uQVNUTm9kZSwgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQpIDogRnVuY3Rpb25DYWxsRXhwcmVzc2lvbiB7XHJcbiAgICAgICAgbGV0IGFyZ3MgPSBhc3QuYXJncy5tYXAoYXJnID0+IGNyZWF0ZUV4cHJlc3Npb25Gcm9tQVNUKGFyZywgY29udGV4dCkpO1xyXG4gICAgICAgIGxldCBjb250ZXh0dWFsUGFyYW1UeXBlcyA9IGFyZ3MubWFwKGFyZyA9PiBhcmcudHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbkNhbGxFeHByZXNzaW9uKGNvbnRleHQsXHJcbiAgICAgICAgICAgIGNyZWF0ZUV4cHJlc3Npb25Gcm9tQVNUKGFzdC5vcGVyYW5kLCBjcmVhdGVFeHByZXNzaW9uQ29udGV4dChjb250ZXh0LCBjb250ZXh0dWFsUGFyYW1UeXBlcykpLFxyXG4gICAgICAgICAgICBhcmdzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFJUIGV4dGVuZHMgUG90ZW50aWFsUmV0dXJuVHlwZT4odGhpczogQ29tcGlsZWRGdW5jdGlvbkNhbGxFeHByZXNzaW9uPFJUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVGdW5jdGlvbkNhbGxFeHByZXNzaW9uPFJUPlxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFQgZXh0ZW5kcyBPYmplY3RUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeT4odGhpczogQ29tcGlsZWRFeHByZXNzaW9uPFQsVj4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBuZXZlcjtcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxSVCBleHRlbmRzIFBvdGVudGlhbFJldHVyblR5cGU+KHRoaXM6IENvbXBpbGVkRnVuY3Rpb25DYWxsRXhwcmVzc2lvbjxSVD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lRnVuY3Rpb25DYWxsRXhwcmVzc2lvbjxSVD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUnVudGltZUZ1bmN0aW9uQ2FsbEV4cHJlc3Npb24odGhpcywgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPXHJcbiAgICBwdWJsaWMgZGVzY3JpYmVFdmFsUmVzdWx0KGRlcHRoOiBudW1iZXIpOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgXHJcbiAgICAvLyBpc1RhaWxDaGlsZCA6IGZ1bmN0aW9uKGNoaWxkKXtcclxuICAgIC8vICAgICByZXR1cm4ge2lzVGFpbDogY2hpbGQgPT09IHRoaXMuZnVuY0NhbGxcclxuICAgIC8vICAgICB9O1xyXG4gICAgLy8gfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkRnVuY3Rpb25DYWxsRXhwcmVzc2lvbjxSVCBleHRlbmRzIFBvdGVudGlhbFJldHVyblR5cGUgPSBQb3RlbnRpYWxSZXR1cm5UeXBlPiBleHRlbmRzIEZ1bmN0aW9uQ2FsbEV4cHJlc3Npb24sIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuICAgIFxyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG5cclxuICAgIHJlYWRvbmx5IHR5cGU6IEZ1bmN0aW9uUmVzdWx0VHlwZTxSVD47XHJcbiAgICByZWFkb25seSB2YWx1ZUNhdGVnb3J5OiBGdW5jdGlvblZDPFJUPjtcclxuICAgIFxyXG4gICAgcmVhZG9ubHkgb3BlcmFuZDogQ29tcGlsZWRGdW5jdGlvbklkZW50aWZpZXI7XHJcbiAgICByZWFkb25seSBhcmdzOiByZWFkb25seSBDb21waWxlZEV4cHJlc3Npb25bXTtcclxuICAgIHJlYWRvbmx5IGNhbGw6IENvbXBpbGVkRnVuY3Rpb25DYWxsPFJUPjtcclxufVxyXG5cclxuY29uc3QgSU5ERVhfRlVOQ1RJT05fQ0FMTF9FWFBSRVNTSU9OX09QRVJBTkQgPSAwO1xyXG5jb25zdCBJTkRFWF9GVU5DVElPTl9DQUxMX0VYUFJFU1NJT05fQ0FMTCA9IDE7XHJcbmNvbnN0IElOREVYX0ZVTkNUSU9OX0NBTExfRVhQUkVTU0lPTl9SRVRVUk4gPSAyO1xyXG5leHBvcnQgY2xhc3MgUnVudGltZUZ1bmN0aW9uQ2FsbEV4cHJlc3Npb248UlQgZXh0ZW5kcyBQb3RlbnRpYWxSZXR1cm5UeXBlID0gUG90ZW50aWFsUmV0dXJuVHlwZT4gZXh0ZW5kcyBSdW50aW1lRXhwcmVzc2lvbjxGdW5jdGlvblJlc3VsdFR5cGU8UlQ+LCBGdW5jdGlvblZDPFJUPiwgQ29tcGlsZWRGdW5jdGlvbkNhbGxFeHByZXNzaW9uPFJUPj4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBvcGVyYW5kOiBSdW50aW1lRnVuY3Rpb25JZGVudGlmaWVyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGFyZ3M6IHJlYWRvbmx5IFJ1bnRpbWVFeHByZXNzaW9uW107XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgY2FsbDogUnVudGltZUZ1bmN0aW9uQ2FsbDxSVD47XHJcblxyXG4gICAgcHJpdmF0ZSBpbmRleCA6IHR5cGVvZiBJTkRFWF9GVU5DVElPTl9DQUxMX0VYUFJFU1NJT05fT1BFUkFORCB8IHR5cGVvZiBJTkRFWF9GVU5DVElPTl9DQUxMX0VYUFJFU1NJT05fQ0FMTCB8IHR5cGVvZiBJTkRFWF9GVU5DVElPTl9DQUxMX0VYUFJFU1NJT05fUkVUVVJOID0gSU5ERVhfRlVOQ1RJT05fQ0FMTF9FWFBSRVNTSU9OX09QRVJBTkQ7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRGdW5jdGlvbkNhbGxFeHByZXNzaW9uPFJUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbiAgICAgICAgdGhpcy5vcGVyYW5kID0gdGhpcy5tb2RlbC5vcGVyYW5kLmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuYXJncyA9IHRoaXMubW9kZWwuYXJncy5tYXAoKGFyZykgPT4gYXJnLmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpKTtcclxuICAgICAgICB0aGlzLmNhbGwgPSB0aGlzLm1vZGVsLmNhbGwuY3JlYXRlUnVudGltZUZ1bmN0aW9uQ2FsbCh0aGlzKTtcclxuICAgIH1cclxuXHJcblx0cHJvdGVjdGVkIHVwTmV4dEltcGwoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPT09IElOREVYX0ZVTkNUSU9OX0NBTExfRVhQUkVTU0lPTl9PUEVSQU5EKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2ltLnB1c2godGhpcy5vcGVyYW5kKTtcclxuICAgICAgICAgICAgdGhpcy5pbmRleCA9IElOREVYX0ZVTkNUSU9OX0NBTExfRVhQUkVTU0lPTl9DQUxMO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmluZGV4ID09PSBJTkRFWF9GVU5DVElPTl9DQUxMX0VYUFJFU1NJT05fQ0FMTCkge1xyXG4gICAgICAgICAgICB0aGlzLnNpbS5wdXNoKHRoaXMuY2FsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBJTkRFWF9GVU5DVElPTl9DQUxMX0VYUFJFU1NJT05fUkVUVVJOO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5pbmRleCA9PT0gSU5ERVhfRlVOQ1RJT05fQ0FMTF9FWFBSRVNTSU9OX1JFVFVSTiApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubW9kZWwudHlwZSBpbnN0YW5jZW9mIFZvaWRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnNldEV2YWxSZXN1bHQobnVsbCk7IC8vIFRPRE86IHR5cGUgc3lzdGVtIHdvbid0IGFsbG93IHRoaXMgY3VycmVudGx5XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmlzUmVmZXJlbmNlVHlwZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIGJ5IHJlZmVyZW5jZSBpcyBsdmFsdWUgYW5kIHlpZWxkcyB0aGUgcmV0dXJuZWQgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEV2YWxSZXN1bHQoPFZDUmVzdWx0VHlwZXM8RnVuY3Rpb25SZXN1bHRUeXBlPFJUPiwgRnVuY3Rpb25WQzxSVD4+PnRoaXMuY2FsbC5jYWxsZWRGdW5jdGlvbi5yZXR1cm5PYmplY3QhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1vZGVsLmlzQXRvbWljVHlwZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIGJ5IHZhbHVlIG9mIGF0b21pYyB0eXBlLiBJbiB0aGlzIGNhc2UsIHdlIGNhbiBsb29rIHVwXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgb2YgdGhlIHJldHVybiBvYmplY3QgYW5kIHVzZSB0aGF0IGFzIHRoZSBldmFsIHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgbGV0IHJldE9iaiA9IDxDUFBPYmplY3Q8QXRvbWljVHlwZT4+PHVua25vd24+dGhpcy5jYWxsLmNhbGxlZEZ1bmN0aW9uLnJldHVybk9iamVjdCE7IC8vIEkgZG9uJ3QgdW5kZXJzdGFuZCB3aHkgVHlwZXNjcmlwdCBmb3JjZXMgdGhlIGhhcmQgY2FzdCBoZXJlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEV2YWxSZXN1bHQoPFZDUmVzdWx0VHlwZXM8RnVuY3Rpb25SZXN1bHRUeXBlPFJUPiwgRnVuY3Rpb25WQzxSVD4+PnJldE9iai5nZXRWYWx1ZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFJldHVybiBieSB2YWx1ZSBvZiBhIG5vbi1hdG9taWMgdHlwZS4gSW4gdGhpcyBjYXNlLCBpdCdzIHN0aWxsIGEgcHJ2YWx1ZVxyXG4gICAgICAgICAgICAgICAgLy8gYnV0IGlzIHRoZSB0ZW1wb3Jhcnkgb2JqZWN0IHJhdGhlciB0aGFuIGl0cyB2YWx1ZS5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXZhbFJlc3VsdCg8VkNSZXN1bHRUeXBlczxGdW5jdGlvblJlc3VsdFR5cGU8UlQ+LCBGdW5jdGlvblZDPFJUPj4+dGhpcy5jYWxsLmNhbGxlZEZ1bmN0aW9uLnJldHVybk9iamVjdCEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2ltLnBvcCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RlcEZvcndhcmRJbXBsKCkge1xyXG4gICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cclxuICAgIH1cclxufVxyXG5cclxuLy8gT0xEIHN0dWZmIGtlcHQgaW4gY2FzZSBpdCdzIHJlbGV2YW50IGZvciBvcGVyYXRvciBvdmVybG9hZHMsIGJ1dCBwcm9iYWJseSB3b24ndCBiZSBuZWVkZWRcclxuLy8gZXhwb3J0IHZhciBGdW5jdGlvbkNhbGxFeHByZXNzaW9uICA9IEV4cHJlc3Npb24uZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkZ1bmN0aW9uQ2FsbEV4cHJlc3Npb25cIixcclxuLy8gICAgIGluaXRJbmRleDogXCJvcGVyYW5kXCIsXHJcblxyXG4gICAgLy8gYmluZEZ1bmN0aW9uIDogZnVuY3Rpb24oYXJnVHlwZXMpe1xyXG4gICAgLy8gICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIC8vICAgICBpZiAoaXNBKHRoaXMub3BlcmFuZC50eXBlLCBUeXBlcy5DbGFzcykpe1xyXG4gICAgLy8gICAgICAgICAvLyBDaGVjayBmb3IgZnVuY3Rpb24gY2FsbCBvcGVyYXRvciBhbmQgaWYgc28sIGZpbmQgZnVuY3Rpb25cclxuICAgIC8vICAgICAgICAgLy8gVE9ETzogSSB0aGluayB0aGlzIGJyZWFrcyBnaXZlbiBtdWx0aXBsZSBvdmVybG9hZGVkIGZ1bmN0aW9uIGNhbGwgb3BlcmF0b3JzP1xyXG5cclxuICAgIC8vICAgICAgICAgdHJ5e1xyXG4gICAgLy8gICAgICAgICAgICAgdGhpcy5jYWxsT3AgPSB0aGlzLm9wZXJhbmQudHlwZS5jbGFzc1Njb3BlLnJlcXVpcmVkTWVtYmVyTG9va3VwKFwib3BlcmF0b3IoKVwiLCB7cGFyYW1UeXBlczphcmdUeXBlcywgaXNUaGlzQ29uc3Q6IHRoaXMub3BlcmFuZC50eXBlLmlzQ29uc3R9KTtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuYm91bmRGdW5jdGlvbiA9IHRoaXMuY2FsbE9wO1xyXG4gICAgLy8gICAgICAgICAgICAgdGhpcy50eXBlID0gbm9SZWYodGhpcy5jYWxsT3AudHlwZS5yZXR1cm5UeXBlKTtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICBjYXRjaChlKXtcclxuICAgIC8vICAgICAgICAgICAgIGlmIChpc0EoZSwgU2VtYW50aWNFeGNlcHRpb25zLkJhZExvb2t1cCkpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5leHByLmZ1bmN0aW9uQ2FsbC5ub3RfZGVmaW5lZCh0aGlzLCB0aGlzLm9wZXJhbmQudHlwZSwgYXJnVHlwZXMpKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoZS5hbm5vdGF0aW9uKHRoaXMpKTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBlbHNlIGlmIChpc0EodGhpcy5vcGVyYW5kLmVudGl0eSwgRnVuY3Rpb25FbnRpdHkpKXsgLy8gVE9ETzogdXNlIG9mIGVudGl0eSBwcm9wZXJ0eSBoZXJlIGZlZWxzIGhhY2t5XHJcbiAgICAvLyAgICAgICAgIC8vIElmIGl0J3MgYW4gaWRlbnRpZmllciwgZG90LCBhcnJvdywgZXRjLiB0aGF0IGRlbm90ZSBhbiBlbnRpdHkgLSBqdXN0IGJpbmQgdGhhdFxyXG4gICAgLy8gICAgICAgICB0aGlzLnN0YXRpY0Z1bmN0aW9uID0gdGhpcy5vcGVyYW5kLmVudGl0eTtcclxuICAgIC8vICAgICAgICAgdGhpcy5zdGF0aWNGdW5jdGlvblR5cGUgPSB0aGlzLnN0YXRpY0Z1bmN0aW9uLnR5cGU7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuYm91bmRGdW5jdGlvbiA9IHRoaXMub3BlcmFuZC5lbnRpdHk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2UgaWYgKGlzQSh0aGlzLm9wZXJhbmQudHlwZSwgVHlwZXMuUG9pbnRlcikgJiYgaXNBKHRoaXMub3BlcmFuZC50eXBlLnB0clRvLCBUeXBlcy5GdW5jdGlvbikpe1xyXG4gICAgLy8gICAgICAgICB0aGlzLnN0YXRpY0Z1bmN0aW9uVHlwZSA9IHRoaXMub3BlcmFuZC50eXBlLnB0clRvO1xyXG4gICAgLy8gICAgICAgICB0aGlzLmJvdW5kRnVuY3Rpb24gPSBQb2ludGVkRnVuY3Rpb25FbnRpdHkuaW5zdGFuY2UodGhpcy5vcGVyYW5kLnR5cGUucHRyVG8pO1xyXG4gICAgLy8gICAgICAgICB0aGlzLm9wZXJhbmQgPSBjb252ZXJ0VG9QUlZhbHVlKHRoaXMub3BlcmFuZCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2UgaWYgKGlzQSh0aGlzLm9wZXJhbmQudHlwZSwgVHlwZXMuRnVuY3Rpb24pKXtcclxuICAgIC8vICAgICAgICAgdGhpcy5zdGF0aWNGdW5jdGlvblR5cGUgPSB0aGlzLm9wZXJhbmQudHlwZTtcclxuICAgIC8vICAgICAgICAgdGhpcy5ib3VuZEZ1bmN0aW9uID0gUG9pbnRlZEZ1bmN0aW9uRW50aXR5Lmluc3RhbmNlKHRoaXMub3BlcmFuZC50eXBlKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuZnVuY3Rpb25DYWxsLm9wZXJhbmQodGhpcywgdGhpcy5vcGVyYW5kKSk7XHJcbiAgICAvLyAgICAgfVxyXG5cclxuICAgIC8vIH0sXHJcblxyXG5cclxuLy8gfSk7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRG90RXhwcmVzc2lvbkFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcImRvdF9leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXJyb3dFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwiYXJyb3dfZXhwcmVzc2lvblwiO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBvc3RmaXhJbmNyZW1lbnRFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwicG9zdGZpeF9pbmNyZW1lbnRfZXhwcmVzc2lvblwiO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBvc3RmaXhEZWNyZW1lbnRFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwicG9zdGZpeF9kZWNyZW1lbnRfZXhwcmVzc2lvblwiO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIGV4cG9ydCB2YXIgTmV3RXhwcmVzc2lvbiA9IEV4cHJlc3Npb24uZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIk5ld0V4cHJlc3Npb25cIixcclxuLy8gICAgIHZhbHVlQ2F0ZWdvcnk6IFwicHJ2YWx1ZVwiLFxyXG4vLyAgICAgaW5pdEluZGV4OiBcImFsbG9jYXRlXCIsXHJcbi8vICAgICBjb21waWxlIDogZnVuY3Rpb24oKXtcclxuXHJcbi8vICAgICAgICAgLy8gQ29tcGlsZSB0aGUgdHlwZSBzcGVjaWZpZXJcclxuLy8gICAgICAgICB0aGlzLnR5cGVTcGVjID0gVHlwZVNwZWNpZmllci5pbnN0YW5jZSh0aGlzLmFzdC5zcGVjcywge3BhcmVudDp0aGlzfSk7XHJcbi8vICAgICAgICAgdGhpcy50eXBlU3BlYy5jb21waWxlKCk7XHJcblxyXG4vLyAgICAgICAgIHRoaXMuaGVhcFR5cGUgPSB0aGlzLnR5cGVTcGVjLnR5cGU7XHJcblxyXG4vLyAgICAgICAgIC8vIENvbXBpbGUgZGVjbGFyYXRvciBpZiBpdCBleGlzdHNcclxuLy8gICAgICAgICBpZih0aGlzLmFzdC5kZWNsYXJhdG9yKSB7XHJcbi8vICAgICAgICAgICAgIHRoaXMuZGVjbGFyYXRvciA9IERlY2xhcmF0b3IuaW5zdGFuY2UodGhpcy5hc3QuZGVjbGFyYXRvciwge3BhcmVudDogdGhpc30pO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmRlY2xhcmF0b3IuY29tcGlsZSh7YmFzZVR5cGU6IHRoaXMuaGVhcFR5cGV9KTtcclxuLy8gICAgICAgICAgICAgdGhpcy5oZWFwVHlwZSA9IHRoaXMuZGVjbGFyYXRvci50eXBlO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgaWYgKGlzQSh0aGlzLmhlYXBUeXBlLCBUeXBlcy5BcnJheSkpe1xyXG4vLyAgICAgICAgICAgICAvLyBOb3RlOiB0aGlzIGlzIFBvaW50ZXIsIHJhdGhlciB0aGFuIEFycmF5UG9pbnRlciwgc2luY2UgdGhlIGxhdHRlciBzaG91bGQgb25seSBiZSB1c2VkIGluIHJ1bnRpbWUgY29udGV4dHNcclxuLy8gICAgICAgICAgICAgdGhpcy50eXBlID0gVHlwZXMuUG9pbnRlci5pbnN0YW5jZSh0aGlzLmhlYXBUeXBlLmVsZW1UeXBlKTtcclxuLy8gICAgICAgICAgICAgaWYgKHRoaXMuZGVjbGFyYXRvci5keW5hbWljTGVuZ3RoRXhwcmVzc2lvbil7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmR5bmFtaWNMZW5ndGggPSB0aGlzLmlfY3JlYXRlQW5kQ29tcGlsZUNoaWxkRXhwcih0aGlzLmRlY2xhcmF0b3IuZHluYW1pY0xlbmd0aEV4cHJlc3Npb24sIFR5cGVzLkludC5pbnN0YW5jZSgpKTtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuaW5pdEluZGV4ID0gXCJsZW5ndGhcIjtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIHtcclxuLy8gICAgICAgICAgICAgdGhpcy50eXBlID0gVHlwZXMuUG9pbnRlci5pbnN0YW5jZSh0aGlzLmhlYXBUeXBlKTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHZhciBlbnRpdHkgPSBOZXdPYmplY3RFbnRpdHkuaW5zdGFuY2UodGhpcy5oZWFwVHlwZSk7XHJcblxyXG4vLyAgICAgICAgIHZhciBpbml0Q29kZSA9IHRoaXMuYXN0LmluaXRpYWxpemVyIHx8IHthcmdzOiBbXX07XHJcbi8vICAgICAgICAgaWYgKGlzQSh0aGlzLmhlYXBUeXBlLCBUeXBlcy5DbGFzcykgfHwgaW5pdENvZGUuYXJncy5sZW5ndGggPT0gMSl7XHJcbi8vICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZXIgPSBOZXdEaXJlY3RJbml0aWFsaXplci5pbnN0YW5jZShpbml0Q29kZSwge3BhcmVudDogdGhpc30pO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVyLmNvbXBpbGUoZW50aXR5KTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZSBpZiAoaW5pdENvZGUuYXJncy5sZW5ndGggPT0gMCl7XHJcbi8vICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZXIgPSBOZXdEZWZhdWx0SW5pdGlhbGl6ZXIuaW5zdGFuY2UoaW5pdENvZGUsIHtwYXJlbnQ6IHRoaXN9KTtcclxuLy8gICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplci5jb21waWxlKGVudGl0eSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5pbml0LnNjYWxhcl9hcmdzKHRoaXMsIHRoaXMuaGVhcFR5cGUpKTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHRoaXMuY29tcGlsZVRlbXBvcmFyaXJlcygpO1xyXG4vLyAgICAgfSxcclxuXHJcblxyXG4vLyAgICAgY3JlYXRlSW5zdGFuY2UgOiBmdW5jdGlvbihzaW0sIHBhcmVudCl7XHJcbi8vICAgICAgICAgdmFyIGluc3QgPSBFeHByZXNzaW9uLmNyZWF0ZUluc3RhbmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbi8vICAgICAgICAgaW5zdC5pbml0aWFsaXplciA9IHRoaXMuaW5pdGlhbGl6ZXIuY3JlYXRlSW5zdGFuY2Uoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICByZXR1cm4gaW5zdDtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgdXBOZXh0IDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgaWYgKGluc3QuaW5kZXggPT09IFwibGVuZ3RoXCIpe1xyXG4vLyAgICAgICAgICAgICBpbnN0LmR5bmFtaWNMZW5ndGggPSB0aGlzLmR5bmFtaWNMZW5ndGguY3JlYXRlQW5kUHVzaEluc3RhbmNlKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgIGluc3QuaW5kZXggPSBcImFsbG9jYXRlXCI7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIGlmIChpbnN0LmluZGV4ID09PSBcImluaXRcIil7XHJcbi8vICAgICAgICAgICAgIHNpbS5wdXNoKGluc3QuaW5pdGlhbGl6ZXIpO1xyXG4vLyAgICAgICAgICAgICBpbnN0LmluZGV4ID0gXCJvcGVyYXRlXCI7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgc3RlcEZvcndhcmQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuXHJcbi8vICAgICAgICAgLy8gRHluYW1pYyBtZW1vcnkgLSBkb2Vzbid0IGdldCBhZGRlZCB0byBhbnkgc2NvcGUsIGJ1dCB3ZSBjcmVhdGUgb24gdGhlIGhlYXBcclxuXHJcbi8vICAgICAgICAgaWYgKGluc3QuaW5kZXggPT09IFwiYWxsb2NhdGVcIikge1xyXG4vLyAgICAgICAgICAgICB2YXIgaGVhcFR5cGUgPSB0aGlzLmhlYXBUeXBlO1xyXG5cclxuLy8gICAgICAgICAgICAgLy8gSWYgaXQncyBhbiBhcnJheSwgd2UgbmVlZCB0byB1c2UgdGhlIGR5bmFtaWMgbGVuZ3RoXHJcbi8vICAgICAgICAgICAgIGlmICh0aGlzLmR5bmFtaWNMZW5ndGgpIHtcclxuLy8gICAgICAgICAgICAgICAgIHZhciBsZW4gPSBpbnN0LmR5bmFtaWNMZW5ndGguZXZhbFJlc3VsdC5yYXdWYWx1ZSgpO1xyXG4vLyAgICAgICAgICAgICAgICAgaWYgKGxlbiA9PT0gMCl7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc2ltLmFsZXJ0KFwiU29ycnksIGJ1dCBJIGNhbid0IGFsbG9jYXRlIGEgZHluYW1pYyBhcnJheSBvZiB6ZXJvIGxlbmd0aC4gSSBrbm93IHRoZXJlJ3MgdGVjaG5pY2FsbHkgYW4gb2xkIEMtc3R5bGUgaGFjayB0aGF0IHVzZXMgemVyby1sZW5ndGggYXJyYXlzLCBidXQgaGV5LCBJJ20ganVzdCBhIGxvYnN0ZXIuIEknbGwgZ28gYWhlYWQgYW5kIGFsbG9jYXRlIGFuIGFycmF5IG9mIGxlbmd0aCAxIGluc3RlYWQuXCIpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGxlbiA9IDE7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgICBlbHNlIGlmIChsZW4gPCAwKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzaW0udW5kZWZpbmVkQmVoYXZpb3IoXCJJIGNhbid0IGFsbG9jYXRlIGFuIGFycmF5IG9mIG5lZ2F0aXZlIGxlbmd0aC4gVGhhdCBkb2Vzbid0IGV2ZW4gbWFrZSBzZW5zZS4gSSdsbCBqdXN0IGFsbG9jYXRlIGFuIGFycmF5IG9mIGxlbmd0aCAxIGluc3RlYWQuXCIpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGxlbiA9IDE7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgICBoZWFwVHlwZSA9IFR5cGVzLkFycmF5Lmluc3RhbmNlKHRoaXMuaGVhcFR5cGUuZWxlbVR5cGUsIGxlbik7XHJcbi8vICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgICAgIHZhciBvYmogPSBEeW5hbWljT2JqZWN0Lmluc3RhbmNlKGhlYXBUeXBlKTtcclxuXHJcbi8vICAgICAgICAgICAgIHNpbS5tZW1vcnkuaGVhcC5hbGxvY2F0ZU5ld09iamVjdChvYmopO1xyXG4vLyAgICAgICAgICAgICBzaW0uaV9wZW5kaW5nTmV3cy5wdXNoKG9iaik7XHJcbi8vICAgICAgICAgICAgIGluc3QuaV9hbGxvY2F0ZWRPYmplY3QgPSBvYmo7XHJcbi8vICAgICAgICAgICAgIGluc3QuaW5pdGlhbGl6ZXIuc2V0QWxsb2NhdGVkT2JqZWN0KG9iaik7XHJcbi8vICAgICAgICAgICAgIGluc3QuaW5kZXggPSBcImluaXRcIjsgLy8gQWx3YXlzIHVzZSBhbiBpbml0aWFsaXplci4gSWYgdGhlcmUgaXNuJ3Qgb25lLCB0aGVuIGl0IHdpbGwganVzdCBiZSBkZWZhdWx0XHJcbi8vICAgICAgICAgICAgIC8vaWYgKHRoaXMuaW5pdGlhbGl6ZXIpe1xyXG4vLyAgICAgICAgICAgICAvLyAgICBpbnN0LmluZGV4ID0gXCJpbml0XCI7XHJcbi8vICAgICAgICAgICAgIC8vfVxyXG4vLyAgICAgICAgICAgICAvL2Vsc2V7XHJcbi8vICAgICAgICAgICAgIC8vICAgIGluc3QuaW5kZXggPSBcIm9wZXJhdGVcIjtcclxuLy8gICAgICAgICAgICAgLy99XHJcbi8vICAgICAgICAgICAgIC8vcmV0dXJuIHRydWU7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2UgaWYgKGluc3QuaW5kZXggPT09IFwib3BlcmF0ZVwiKSB7XHJcbi8vICAgICAgICAgICAgIGlmIChpc0EodGhpcy5oZWFwVHlwZSwgVHlwZXMuQXJyYXkpKXtcclxuLy8gICAgICAgICAgICAgICAgIC8vIFJUVEkgZm9yIGFycmF5IHBvaW50ZXJcclxuLy8gICAgICAgICAgICAgICAgIGluc3Quc2V0RXZhbFJlc3VsdChWYWx1ZS5pbnN0YW5jZShpbnN0LmlfYWxsb2NhdGVkT2JqZWN0LmFkZHJlc3MsIFR5cGVzLkFycmF5UG9pbnRlci5pbnN0YW5jZShpbnN0LmlfYWxsb2NhdGVkT2JqZWN0KSkpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICAvLyBSVFRJIGZvciBvYmplY3QgcG9pbnRlclxyXG4vLyAgICAgICAgICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KFZhbHVlLmluc3RhbmNlKGluc3QuaV9hbGxvY2F0ZWRPYmplY3QuYWRkcmVzcywgVHlwZXMuT2JqZWN0UG9pbnRlci5pbnN0YW5jZShpbnN0LmlfYWxsb2NhdGVkT2JqZWN0KSkpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIHNpbS5pX3BlbmRpbmdOZXdzLnBvcCgpO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgfSxcclxuLy8gICAgIGV4cGxhaW4gOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplcil7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJBIG5ldyBvYmplY3Qgb2YgdHlwZSBcIiArIHRoaXMuaGVhcFR5cGUuZGVzY3JpYmUoKS5uYW1lICsgXCIgd2lsbCBiZSBjcmVhdGVkIG9uIHRoZSBoZWFwLiBcIiArIHRoaXMuaW5pdGlhbGl6ZXIuZXhwbGFpbihzaW0sIGluc3QuaW5pdGlhbGl6ZXIpLm1lc3NhZ2V9O1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwiQSBuZXcgb2JqZWN0IG9mIHR5cGUgXCIgKyB0aGlzLmhlYXBUeXBlLmRlc2NyaWJlKCkubmFtZSArIFwiIHdpbGwgYmUgY3JlYXRlZCBvbiB0aGUgaGVhcC5cIn07XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG5cclxuXHJcbi8vIGV4cG9ydCB2YXIgRGVsZXRlICA9IEV4cHJlc3Npb24uZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkRlbGV0ZVwiLFxyXG4vLyAgICAgdmFsdWVDYXRlZ29yeTogXCJwcnZhbHVlXCIsXHJcbi8vICAgICB0eXBlOiBUeXBlcy5Wb2lkLmluc3RhbmNlKCksXHJcbi8vICAgICBpX2NoaWxkcmVuVG9DcmVhdGUgOiBbXCJvcGVyYW5kXCJdLFxyXG4vLyAgICAgaV9jaGlsZHJlblRvQ29udmVydCA6IHtcclxuLy8gICAgICAgICBcIm9wZXJhbmRcIiA6IFR5cGVzLlBvaW50ZXIuaW5zdGFuY2UoKVxyXG4vLyAgICAgfSxcclxuLy8gICAgIGlfY2hpbGRyZW5Ub0V4ZWN1dGUgOiBbXCJvcGVyYW5kXCJdLFxyXG5cclxuLy8gICAgIHR5cGVDaGVjayA6IGZ1bmN0aW9uKCl7XHJcblxyXG4vLyAgICAgICAgIGlmIChpc0EodGhpcy5vcGVyYW5kLnR5cGUucHRyVG8sIFR5cGVzLkNsYXNzKSl7XHJcbi8vICAgICAgICAgICAgIHZhciBjbGFzc1R5cGUgPSB0aGlzLm9wZXJhbmQudHlwZS5wdHJUbztcclxuLy8gICAgICAgICAgICAgdmFyIGRlc3QgPSBjbGFzc1R5cGUuZGVzdHJ1Y3RvcjtcclxuLy8gICAgICAgICAgICAgLy9UT0RPIG5vdCBmb3VuZCBhbmQgYW1iaWd1b3VzXHJcbi8vICAgICAgICAgICAgIGlmIChpc0EoZGVzdCwgRnVuY3Rpb25FbnRpdHkpKXtcclxuLy8gICAgICAgICAgICAgICAgIC8vdGhpcy5hc3NuT3AgPSBhc3NuT3A7XHJcbi8vICAgICAgICAgICAgICAgICAvL3RoaXMudHlwZSA9IG5vUmVmKGFzc25PcC50eXBlLnJldHVyblR5cGUpO1xyXG4vLyAgICAgICAgICAgICAgICAgLy8gQXR0ZW1wdCBzdGFuZGFyZCBjb252ZXJzaW9uIG9mIHJocyB0byBtYXRjaCBsaHMsIHdpdGhvdXQgbHZhbHVlIHRvIHJ2YWx1ZVxyXG4vLyAgICAgICAgICAgICAgICAgLy90aGlzLnJocyA9IHRoaXMuc3ViLnJocyA9IHN0YW5kYXJkQ29udmVyc2lvbih0aGlzLnJocywgdGhpcy5saHMudHlwZSwge3N1cHByZXNzTFRSOnRydWV9KTtcclxuXHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmZ1bmNDYWxsID0gdGhpcy5mdW5jQ2FsbCA9IEZ1bmN0aW9uQ2FsbC5pbnN0YW5jZSh7YXJnczogW119LCB7cGFyZW50OnRoaXN9KTtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuZnVuY0NhbGwuY29tcGlsZSh7ZnVuYzogZGVzdH0pO1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5mdW5jQ2FsbC50eXBlO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5kZWxldGUubm9fZGVzdHJ1Y3Rvcih0aGlzLCBjbGFzc1R5cGUpKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgLy8gVHlwZSBjaGVja1xyXG4vLyAgICAgICAgIGlmICghaXNBKHRoaXMub3BlcmFuZC50eXBlLCBUeXBlcy5Qb2ludGVyKSkge1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZXhwci5kZWxldGUucG9pbnRlcih0aGlzLCB0aGlzLm9wZXJhbmQudHlwZSkpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIGlmICghdGhpcy5vcGVyYW5kLnR5cGUucHRyVG8uaXNPYmplY3RUeXBlKXtcclxuLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIuZGVsZXRlLnBvaW50ZXJUb09iamVjdFR5cGUodGhpcywgdGhpcy5vcGVyYW5kLnR5cGUpKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG4vLyAgICAgc3RlcEZvcndhcmQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuXHJcbi8vICAgICAgICAgaWYgKCFpbnN0LmFscmVhZHlEZXN0cnVjdGVkKXtcclxuLy8gICAgICAgICAgICAgdmFyIHB0ciA9IGluc3QuY2hpbGRJbnN0YW5jZXMub3BlcmFuZC5ldmFsUmVzdWx0O1xyXG4vLyAgICAgICAgICAgICBpZiAoVHlwZXMuUG9pbnRlci5pc051bGwocHRyLnJhd1ZhbHVlKCkpKXtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuZG9uZShzaW0sIGluc3QpO1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgICAgICAvLyBJZiBpdCdzIGFuIGFycmF5IHBvaW50ZXIsIGp1c3QgZ3JhYiBhcnJheSBvYmplY3QgdG8gZGVsZXRlIGZyb20gUlRUSS5cclxuLy8gICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGFzayBtZW1vcnkgd2hhdCBvYmplY3QgaXQncyBwb2ludGluZyB0by5cclxuLy8gICAgICAgICAgICAgdmFyIG9iajtcclxuLy8gICAgICAgICAgICAgaWYgKGlzQShwdHIudHlwZSwgVHlwZXMuQXJyYXlQb2ludGVyKSl7XHJcbi8vICAgICAgICAgICAgICAgICBvYmogPSBwdHIudHlwZS5hcnJPYmo7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgICAgIG9iaiA9IHNpbS5tZW1vcnkuZGVyZWZlcmVuY2UocHRyKTtcclxuLy8gICAgICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAgICAgaWYgKCFpc0Eob2JqLCBEeW5hbWljT2JqZWN0KSkge1xyXG4vLyAgICAgICAgICAgICAgICAgaWYgKGlzQShvYmosIEF1dG9PYmplY3QpKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc2ltLnVuZGVmaW5lZEJlaGF2aW9yKFwiT2ggbm8hIFRoZSBwb2ludGVyIHlvdSBnYXZlIHRvIDxzcGFuIGNsYXNzPSdjb2RlJz5kZWxldGU8L3NwYW4+IHdhcyBwb2ludGluZyB0byBzb21ldGhpbmcgb24gdGhlIHN0YWNrIVwiKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHNpbS51bmRlZmluZWRCZWhhdmlvcihcIk9oIG5vISBUaGUgcG9pbnRlciB5b3UgZ2F2ZSB0byA8c3BhbiBjbGFzcz0nY29kZSc+ZGVsZXRlPC9zcGFuPiB3YXNuJ3QgcG9pbnRpbmcgdG8gYSB2YWxpZCBoZWFwIG9iamVjdC5cIik7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgICAgIHJldHVybjtcclxuLy8gICAgICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAgICAgaWYgKGlzQShvYmoudHlwZSwgVHlwZXMuQXJyYXkpKXtcclxuLy8gICAgICAgICAgICAgICAgIHNpbS51bmRlZmluZWRCZWhhdmlvcihcIllvdSB0cmllZCB0byBkZWxldGUgYW4gYXJyYXkgb2JqZWN0IHdpdGggYSA8c3BhbiBjbGFzcz0nY29kZSc+ZGVsZXRlPC9zcGFuPiBleHByZXNzaW9uLiBEaWQgeW91IGZvcmdldCB0byB1c2UgdGhlIGRlbGV0ZVtdIHN5bnRheD9cIik7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgICAgIHJldHVybjtcclxuLy8gICAgICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAgICAgLy9pZiAoIXNpbWlsYXJUeXBlKG9iai50eXBlLCB0aGlzLm9wZXJhbmQudHlwZS5wdHJUbykpIHtcclxuLy8gICAgICAgICAgICAgLy8gICAgc2ltLmFsZXJ0KFwiVGhlIHR5cGUgb2YgdGhlIHBvaW50ZXIgeW91IGdhdmUgdG8gPHNwYW4gY2xhc3M9J2NvZGUnPmRlbGV0ZTwvc3Bhbj4gaXMgZGlmZmVyZW50IHRoYW4gdGhlIHR5cGUgb2YgdGhlIG9iamVjdCBJIGZvdW5kIG9uIHRoZSBoZWFwIC0gdGhhdCdzIGEgYmFkIHRoaW5nIVwiKTtcclxuLy8gICAgICAgICAgICAgLy8gICAgdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgIC8vICAgIHJldHVybjtcclxuLy8gICAgICAgICAgICAgLy99XHJcblxyXG4vLyAgICAgICAgICAgICBpZiAoIW9iai5pc0FsaXZlKCkpIHtcclxuLy8gICAgICAgICAgICAgICAgIERlYWRPYmplY3RNZXNzYWdlLmluc3RhbmNlKG9iaiwge2Zyb21EZWxldGU6dHJ1ZX0pLmRpc3BsYXkoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuZG9uZShzaW0sIGluc3QpO1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgICAgICBpbnN0LmFscmVhZHlEZXN0cnVjdGVkID0gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgaWYodGhpcy5mdW5jQ2FsbCl7XHJcbi8vICAgICAgICAgICAgICAgICAvLyBTZXQgb2JqIGFzIHJlY2VpdmVyIGZvciB2aXJ0dWFsIGRlc3RydWN0b3IgbG9va3VwXHJcbi8vICAgICAgICAgICAgICAgICB2YXIgZGVzdCA9IHRoaXMuZnVuY0NhbGwuY3JlYXRlQW5kUHVzaEluc3RhbmNlKHNpbSwgaW5zdCwgb2JqKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgdmFyIGRlbGV0ZWQgPSBzaW0ubWVtb3J5LmhlYXAuZGVsZXRlT2JqZWN0KGluc3QuY2hpbGRJbnN0YW5jZXMub3BlcmFuZC5ldmFsUmVzdWx0LnZhbHVlLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgaXNUYWlsQ2hpbGQgOiBmdW5jdGlvbihjaGlsZCl7XHJcbi8vICAgICAgICAgcmV0dXJuIHtpc1RhaWw6IGZhbHNlLFxyXG4vLyAgICAgICAgICAgICByZWFzb246IFwiVGhlIGRlbGV0ZSBvcGVyYXRpb24gd2lsbCBoYXBwZW4gYWZ0ZXIgdGhlIHJlY3Vyc2l2ZSBjYWxsIHJldHVybnMuXCIsXHJcbi8vICAgICAgICAgICAgIG90aGVyczogW3RoaXNdXHJcbi8vICAgICAgICAgfTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyAvL1RPRE86IG1vdmUgdG8gcnVudGltZUVudmlyb25tZW50IG9yIG1lbW9yeSBqcyBtb2R1bGVzP1xyXG4vLyAvKipcclxuLy8gICpcclxuLy8gICogQHBhcmFtIHNpbVxyXG4vLyAgKiBAcGFyYW0gaW5zdFxyXG4vLyAgKiBAcGFyYW0ge1ZhbHVlIHwgQ1BQT2JqZWN0fSBwdHJcclxuLy8gICogQHJldHVybnMge0NQUE9iamVjdD99XHJcbi8vICAqL1xyXG4vLyB2YXIgZGVsZXRlSGVhcEFycmF5ID0gZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCwgcHRyKSB7XHJcbi8vICAgICBpZihUeXBlcy5Qb2ludGVyLmlzTnVsbChwdHIucmF3VmFsdWUoKSkpe1xyXG4vLyAgICAgICAgIHJldHVybjtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICAvLyBJZiBpdCdzIGFuIGFycmF5IHBvaW50ZXIsIGp1c3QgZ3JhYiBhcnJheSBvYmplY3QgdG8gZGVsZXRlIGZyb20gUlRUSS5cclxuLy8gICAgIC8vIE90aGVyd2lzZSBhc2sgbWVtb3J5IHdoYXQgb2JqZWN0IGl0J3MgcG9pbnRpbmcgdG8uXHJcbi8vICAgICB2YXIgb2JqO1xyXG4vLyAgICAgaWYgKGlzQShwdHIudHlwZSwgVHlwZXMuQXJyYXlQb2ludGVyKSl7XHJcbi8vICAgICAgICAgb2JqID0gcHRyLnR5cGUuYXJyT2JqO1xyXG4vLyAgICAgICAgIC8vIGlmIHRoZSBhZGRyZXNzIGlzIG5vdCB0aGUgc2FtZSwgaXQgbWVhbnMgd2UncmUgZGVsZXRpbmcgdGhyb3VnaCBhbiBhcnJheSBwb2ludGVyLFxyXG4vLyAgICAgICAgIC8vIGJ1dCBub3Qgb25lIHRoYXQgaXMgcG9pbnRpbmcgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXkuIHRoaXMgY2F1c2VzIHVuZGVmaW5lZCBiZWhhdmlvclxyXG4vLyAgICAgICAgIGlmIChwdHIucmF3VmFsdWUoKSAhPT0gb2JqLmFkZHJlc3MpIHtcclxuLy8gICAgICAgICAgICAgc2ltLnVuZGVmaW5lZEJlaGF2aW9yKFwiSXQgbG9va3MgbGlrZSB5b3UgdXNlZCA8c3BhbiBjbGFzcz0nY29kZSc+ZGVsZXRlW108L3NwYW4+IG9uIGEgcG9pbnRlciB0byBhbiBhcnJheSwgYnV0IGl0IHdhc24ndCBwb2ludGluZyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheSBhcyBpcyByZXF1aXJlZCBmb3IgPHNwYW4gY2xhc3M9J2NvZGUnPmRlbGV0ZVtdPC9zcGFuPi4gVGhpcyBjYXVzZXMgdW5kZWZpbmVkIGJlaGF2aW9yIVwiKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcbi8vICAgICBlbHNle1xyXG4vLyAgICAgICAgIG9iaiA9IHNpbS5tZW1vcnkuZGVyZWZlcmVuY2UocHRyKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICAvLyBDaGVjayB0byBtYWtlIHN1cmUgd2UncmUgZGVsZXRpbmcgYSB2YWxpZCBoZWFwIG9iamVjdC5cclxuLy8gICAgIGlmICghaXNBKG9iaiwgRHluYW1pY09iamVjdCkpIHtcclxuLy8gICAgICAgICBpZiAoaXNBKG9iaiwgQXV0b09iamVjdCkpIHtcclxuLy8gICAgICAgICAgICAgc2ltLnVuZGVmaW5lZEJlaGF2aW9yKFwiT2ggbm8hIFRoZSBwb2ludGVyIHlvdSBnYXZlIHRvIDxzcGFuIGNsYXNzPSdjb2RlJz5kZWxldGVbXTwvc3Bhbj4gd2FzIHBvaW50aW5nIHRvIHNvbWV0aGluZyBvbiB0aGUgc3RhY2shXCIpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIHtcclxuLy8gICAgICAgICAgICAgc2ltLnVuZGVmaW5lZEJlaGF2aW9yKFwiT2ggbm8hIFRoZSBwb2ludGVyIHlvdSBnYXZlIHRvIDxzcGFuIGNsYXNzPSdjb2RlJz5kZWxldGVbXTwvc3Bhbj4gd2Fzbid0IHBvaW50aW5nIHRvIGEgdmFsaWQgaGVhcCBvYmplY3QuXCIpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICByZXR1cm47XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgaWYgKCFpc0Eob2JqLnR5cGUsIFR5cGVzLkFycmF5KSkge1xyXG4vLyAgICAgICAgIHNpbS51bmRlZmluZWRCZWhhdmlvcihcIllvdSB0cmllZCB0byBkZWxldGUgYSBub24tYXJyYXkgb2JqZWN0IHdpdGggYSA8c3BhbiBjbGFzcz0nY29kZSc+ZGVsZXRlW108L3NwYW4+IGV4cHJlc3Npb24uIE9vcHMhXCIpO1xyXG4vLyAgICAgICAgIHJldHVybjtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICAvL2lmICghc2ltaWxhclR5cGUob2JqLnR5cGUuZWxlbVR5cGUsIHRoaXMub3BlcmFuZC50eXBlLnB0clRvKSkge1xyXG4vLyAgICAgLy8gICAgc2ltLmFsZXJ0KFwiVGhlIHR5cGUgb2YgdGhlIHBvaW50ZXIgeW91IGdhdmUgdG8gPHNwYW4gY2xhc3M9J2NvZGUnPmRlbGV0ZTwvc3Bhbj4gaXMgZGlmZmVyZW50IHRoYW4gdGhlIGVsZW1lbnQgdHlwZSBvZiB0aGUgYXJyYXkgb2JqZWN0IEkgZm91bmQgb24gdGhlIGhlYXAgLSB0aGF0J3MgYSBiYWQgdGhpbmchXCIpO1xyXG4vLyAgICAgLy8gICAgdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbi8vICAgICAvLyAgICByZXR1cm47XHJcbi8vICAgICAvL31cclxuXHJcbi8vICAgICBpZiAoIW9iai5pc0FsaXZlKCkpIHtcclxuLy8gICAgICAgICBEZWFkT2JqZWN0TWVzc2FnZS5pbnN0YW5jZShvYmosIHtmcm9tRGVsZXRlOnRydWV9KS5kaXNwbGF5KHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHJldHVybiBzaW0ubWVtb3J5LmhlYXAuZGVsZXRlT2JqZWN0KHB0ci5yYXdWYWx1ZSgpLCBpbnN0KTtcclxuLy8gfTtcclxuXHJcbi8vIC8vIFRPRE86IGxpc2tvdiBzdWdnZXN0cyB0aGlzIHNob3VsZG4ndCBiZSBhIHN1YnR5cGUuIFVzZSBoYXMtYSBpbnN0ZWFkP1xyXG4vLyBleHBvcnQgdmFyIERlbGV0ZUFycmF5ID0gRGVsZXRlLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZTogXCJEZWxldGVBcnJheVwiLFxyXG5cclxuLy8gICAgIHN0ZXBGb3J3YXJkOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICB2YXIgcHRyID0gaW5zdC5jaGlsZEluc3RhbmNlcy5vcGVyYW5kLmV2YWxSZXN1bHQ7XHJcbi8vICAgICAgICAgZGVsZXRlSGVhcEFycmF5KHNpbSwgaW5zdCwgcHRyKTtcclxuLy8gICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgaXNUYWlsQ2hpbGQgOiBmdW5jdGlvbihjaGlsZCl7XHJcbi8vICAgICAgICAgcmV0dXJuIHtpc1RhaWw6IGZhbHNlLFxyXG4vLyAgICAgICAgICAgICByZWFzb246IFwiVGhlIGRlbGV0ZVtdIG9wZXJhdGlvbiB3aWxsIGhhcHBlbiBhZnRlciB0aGUgcmVjdXJzaXZlIGNhbGwgcmV0dXJucy5cIixcclxuLy8gICAgICAgICAgICAgb3RoZXJzOiBbdGhpc11cclxuLy8gICAgICAgICB9O1xyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbnN0cnVjdEV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJjb25zdHJ1Y3RfZXhwcmVzc2lvblwiO1xyXG59XHJcblxyXG4vLyAvLyBUT0RPOiBUaGlzIGFwcGVhcnMgdG8gd29yayBidXQgSSdtIHByZXR0eSBzdXJlIEkgY29weS9wYXN0ZWQgZnJvbSBOZXdFeHByZXNzaW9uIGFuZCBuZXZlciBmaW5pc2hlZCBjaGFuZ2luZyBpdC5cclxuLy8gZXhwb3J0IHZhciBDb25zdHJ1Y3RFeHByZXNzaW9uID0gRXhwcmVzc2lvbi5leHRlbmQoe1xyXG4vLyAgICAgX25hbWU6IFwiQ29uc3RydWN0RXhwcmVzc2lvblwiLFxyXG4vLyAgICAgdmFsdWVDYXRlZ29yeTogXCJwcnZhbHVlXCIsXHJcbi8vICAgICBpbml0SW5kZXg6IFwiaW5pdFwiLFxyXG4vLyAgICAgY29tcGlsZSA6IGZ1bmN0aW9uKCl7XHJcblxyXG4vLyAgICAgICAgIC8vIENvbXBpbGUgdGhlIHR5cGUgc3BlY2lmaWVyXHJcbi8vICAgICAgICAgdGhpcy50eXBlU3BlYyA9IFR5cGVTcGVjaWZpZXIuaW5zdGFuY2UoW3RoaXMuYXN0LnR5cGVdLCB7cGFyZW50OnRoaXN9KTtcclxuLy8gICAgICAgICB0aGlzLnR5cGVTcGVjLmNvbXBpbGUoKTtcclxuXHJcbi8vICAgICAgICAgdGhpcy50eXBlID0gdGhpcy50eXBlU3BlYy50eXBlO1xyXG5cclxuLy8gICAgICAgICAvLyBDb21waWxlIGRlY2xhcmF0b3IgaWYgaXQgZXhpc3RzXHJcbi8vICAgICAgICAgaWYodGhpcy5hc3QuZGVjbGFyYXRvcikge1xyXG4vLyAgICAgICAgICAgICB0aGlzLmRlY2xhcmF0b3IgPSBEZWNsYXJhdG9yLmluc3RhbmNlKHRoaXMuYXN0LmRlY2xhcmF0b3IsIHtwYXJlbnQ6IHRoaXN9KTtcclxuLy8gICAgICAgICAgICAgdGhpcy5kZWNsYXJhdG9yLmNvbXBpbGUoe2Jhc2VUeXBlOiB0aGlzLmhlYXBUeXBlfSk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuaGVhcFR5cGUgPSB0aGlzLmRlY2xhcmF0b3IudHlwZTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHRoaXMuZW50aXR5ID0gdGhpcy5jcmVhdGVUZW1wb3JhcnlPYmplY3QodGhpcy50eXBlLCBcIlt0ZW1wIFwiICsgdGhpcy50eXBlICsgXCJdXCIpO1xyXG5cclxuLy8gICAgICAgICBpZiAoaXNBKHRoaXMudHlwZSwgVHlwZXMuQ2xhc3MpIHx8IHRoaXMuYXN0LmFyZ3MubGVuZ3RoID09IDEpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVyID0gRGlyZWN0SW5pdGlhbGl6ZXIuaW5zdGFuY2UodGhpcy5hc3QsIHtwYXJlbnQ6IHRoaXN9KTtcclxuLy8gICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplci5jb21waWxlKHRoaXMuZW50aXR5KTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmluaXQuc2NhbGFyX2FyZ3ModGhpcywgdGhpcy50eXBlKSk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICB0aGlzLmNvbXBpbGVUZW1wb3JhcmlyZXMoKTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgY3JlYXRlSW5zdGFuY2UgOiBmdW5jdGlvbihzaW0sIHBhcmVudCl7XHJcbi8vICAgICAgICAgdmFyIGluc3QgPSBFeHByZXNzaW9uLmNyZWF0ZUluc3RhbmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbi8vICAgICAgICAgaW5zdC50ZW1wT2JqZWN0ID0gdGhpcy5lbnRpdHkub2JqZWN0SW5zdGFuY2UoaW5zdCk7XHJcbi8vICAgICAgICAgcmV0dXJuIGluc3Q7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIHVwTmV4dCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgIGlmIChpbnN0LmluZGV4ID09PSBcImluaXRcIil7XHJcbi8vICAgICAgICAgICAgIHZhciBpbml0SW5zdCA9IHRoaXMuaW5pdGlhbGl6ZXIuY3JlYXRlQW5kUHVzaEluc3RhbmNlKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgIGluc3QuaW5kZXggPSBcImRvbmVcIjtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIGlmIChpc0EodGhpcy50eXBlLCBUeXBlcy5jbGFzcykpe1xyXG4vLyAgICAgICAgICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KGluc3QudGVtcE9iamVjdCk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgICAgIGluc3Quc2V0RXZhbFJlc3VsdChpbnN0LnRlbXBPYmplY3QucmVhZFZhbHVlKCkpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIHRoaXMuZG9uZShzaW0sIGluc3QpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuXHJcblxyXG4vLyB9KTtcclxuXHJcblxyXG5cclxuLy8gZnVuY3Rpb24gaWRlbnRpZmllclRvVGV4dCh1bnF1YWxpZmllZElkOiBzdHJpbmcpIDogc3RyaW5nO1xyXG4vLyBmdW5jdGlvbiBpZGVudGlmaWVyVG9UZXh0KHF1YWxJZDogcmVhZG9ubHkge2lkZW50aWZpZXI6IHN0cmluZ31bXSkgOiBzdHJpbmc7XHJcbi8vICAgICBmdW5jdGlvbiBpZGVudGlmaWVyVG9UZXh0KHF1YWxJZDogc3RyaW5nIHwgcmVhZG9ubHkge2lkZW50aWZpZXI6IHN0cmluZ31bXSkgOiBzdHJpbmcge1xyXG4vLyAgICAgaWYgKHR5cGVvZiBxdWFsSWQgPT09IFwic3RyaW5nXCIpIHtcclxuLy8gICAgICAgICByZXR1cm4gcXVhbElkOyAvLyBJZiBpdCdzIGFuIHVucXVhbGlmaWVkIGlkXHJcbi8vICAgICB9XHJcbi8vICAgICBlbHNlIHtcclxuLy8gICAgICAgICByZXR1cm4gcXVhbElkLnJlZHVjZShmdW5jdGlvbihzdHIsaWQsaSl7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBzdHIgKyAoaSA+IDAgPyBcIjo6XCIgOiBcIlwiKSArIGlkLmlkZW50aWZpZXI7XHJcbi8vICAgICAgICAgfSxcIlwiKTtcclxuLy8gICAgIH1cclxuLy8gfTtcclxuXHJcbi8vIGZ1bmN0aW9uIHF1YWxpZmllZE5hbWVTdHJpbmcobmFtZXMpIHtcclxuLy8gICAgIGlmICghQXJyYXkuaXNBcnJheShuYW1lcykpe1xyXG4vLyAgICAgICAgIHJldHVybiBuYW1lcztcclxuLy8gICAgIH1cclxuLy8gICAgIHJldHVybiBuYW1lcy5tYXAoZnVuY3Rpb24oaWQpe3JldHVybiBpZC5pZGVudGlmaWVyfSkuam9pbihcIjo6XCIpXHJcbi8vIH1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSWRlbnRpZmllckV4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJpZGVudGlmaWVyX2V4cHJlc3Npb25cIjtcclxuICAgIHJlYWRvbmx5IGlkZW50aWZpZXI6IHN0cmluZztcclxufVxyXG5cclxuLy8gVE9ETzogbWF5YmUgSWRlbnRpZmllciBzaG91bGQgYmUgYSBub24tZXhlY3V0YWJsZSBjb25zdHJ1Y3QgYW5kIHRoZW4gaGF2ZSBhIFxyXG4vLyBUT0RPOiBtYWtlIHNlcGFyYXRlIGNsYXNzZXMgZm9yIHF1YWxpZmllZCBhbmQgdW5xdWFsaWZpZWQgSURzP1xyXG5leHBvcnQgY2xhc3MgSWRlbnRpZmllckV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZT86IE9iamVjdFR5cGUgfCBGdW5jdGlvblR5cGU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeSA9IFwibHZhbHVlXCI7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGVudGl0eT86IE9iamVjdEVudGl0eSB8IEZ1bmN0aW9uRW50aXR5OyAvLyBUT0RPOiBzaG91bGQgdGhpcyBiZSBOYW1lZEVudGl0eT8gRG9lcyBpdCBtYWtlIGEgZGlmZmVyZW5jZT9cclxuXHJcbiAgICBwdWJsaWMgX3RfY29tcGlsZWQhOiBDb21waWxlZE9iamVjdElkZW50aWZpZXIgfCBDb21waWxlZEZ1bmN0aW9uSWRlbnRpZmllcjtcclxuXHJcbiAgICAvLyBpX2NyZWF0ZUZyb21BU1Q6IGZ1bmN0aW9uKGFzdCwgY29udGV4dCl7XHJcblxyXG4gICAgLy8gICAgIElkZW50aWZpZXIuX3BhcmVudC5pX2NyZWF0ZUZyb21BU1QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIC8vICAgICB0aGlzLmlkZW50aWZpZXIgPSB0aGlzLmFzdC5pZGVudGlmaWVyO1xyXG4gICAgLy8gICAgIHRoaXMuaWRlbnRpZmllclRleHQgPSBxdWFsaWZpZWROYW1lU3RyaW5nKHRoaXMuaWRlbnRpZmllcik7XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICBjaGVja0lkZW50aWZpZXIodGhpcywgbmFtZSwgdGhpcyk7XHJcblxyXG4gICAgICAgIGxldCBsb29rdXBSZXN1bHQgPSB0aGlzLmNvbnRleHQuY29udGV4dHVhbFNjb3BlLmxvb2t1cCh0aGlzLm5hbWUpO1xyXG5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShsb29rdXBSZXN1bHQpKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAobG9va3VwUmVzdWx0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gT25seSBvbmUgZnVuY3Rpb24gd2l0aCB0aGF0IG5hbWUgZm91bmQsIHNvIHdlIGp1c3QgZ3JhYiBpdC5cclxuICAgICAgICAgICAgICAgIC8vIEFueSBlcnJvcnMgd2lsbCBiZSBkZXRlY3RlZCBsYXRlciBlLmcuIHdoZW4gYSBmdW5jdGlvbiBjYWxsIGlzIGF0dGVtcHRlZC5cclxuICAgICAgICAgICAgICAgIHRoaXMuZW50aXR5ID0gbG9va3VwUmVzdWx0WzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTmVlZCB0byBwZXJmb3JtIG92ZXJsb2FkIHJlc29sdXRpb24gdG8gc2VsZWN0IHRoZSBhcHByb3ByaWF0ZSBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgLy8gZnJvbSB0aGUgZnVuY3Rpb24gb3ZlcmxvYWQgZ3JvdXAuIFRoaXMgZGVwZW5kcyBvbiBjb250ZXh0dWFsIHBhcmFtZXRlciB0eXBlcy5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuY29udGV4dHVhbFBhcmFtZXRlclR5cGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG92ZXJsb2FkUmVzdWx0ID0gb3ZlcmxvYWRSZXNvbHV0aW9uKGxvb2t1cFJlc3VsdCwgdGhpcy5jb250ZXh0LmNvbnRleHR1YWxQYXJhbWV0ZXJUeXBlcywgdGhpcy5jb250ZXh0LmNvbnRleHR1YWxSZWNlaXZlclR5cGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3ZlcmxvYWRSZXN1bHQuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSBiZXN0IHJlc3VsdCBoYXMgYmVlbiBzZWxlY3RlZCwgdXNlIHRoYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdHkgPSBvdmVybG9hZFJlc3VsdC5zZWxlY3RlZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgdXNlIHRoZSBiZXN0IGNhbmRpZGF0ZSAoaXQgaXMgc29ydGVkIHRvIHRoZSBmcm9udCBvZiB0aGUgY2FuZGlkYXRlcyBpbiB0aGUgcmVzdWx0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZXJyb3JzIHRoYXQgbWFkZSBpdCBub24tdmlhYmxlIHdpbGwgYmUgcGlja2VkIHVwIGxhdGVyIGUuZy4gd2hlbiBhIGZ1bmN0aW9uIGNhbGwgaXMgYXR0ZW1wdGVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0eSA9IG92ZXJsb2FkUmVzdWx0LmNhbmRpZGF0ZXNbMF0uY2FuZGlkYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5pZGVuLmFtYmlndW91cyh0aGlzLCB0aGlzLm5hbWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5lbnRpdHkgPSBsb29rdXBSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmVudGl0eSAmJiB0aGlzLmVudGl0eS50eXBlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21BU1QoYXN0OiBJZGVudGlmaWVyRXhwcmVzc2lvbkFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBJZGVudGlmaWVyRXhwcmVzc2lvbihjb250ZXh0LCBhc3QuaWRlbnRpZmllcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFQgZXh0ZW5kcyBPYmplY3RUeXBlPih0aGlzOiBDb21waWxlZE9iamVjdElkZW50aWZpZXI8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lT2JqZWN0SWRlbnRpZmllcjxUPjtcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgRnVuY3Rpb25UeXBlPih0aGlzOiBDb21waWxlZEZ1bmN0aW9uSWRlbnRpZmllciwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVGdW5jdGlvbklkZW50aWZpZXI7XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5Pih0aGlzOiBDb21waWxlZEV4cHJlc3Npb248VCxWPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IG5ldmVyO1xyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIGlmICh0aGlzLmVudGl0eSBpbnN0YW5jZW9mIEZ1bmN0aW9uRW50aXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUnVudGltZUZ1bmN0aW9uSWRlbnRpZmllcig8YW55PnRoaXMsIHBhcmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVPYmplY3RJZGVudGlmaWVyKDxhbnk+dGhpcywgcGFyZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlRXZhbFJlc3VsdChkZXB0aDogbnVtYmVyKTogRGVzY3JpcHRpb24ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRlc2NyaWJlRXZhbFJlc3VsdCA6IGZ1bmN0aW9uKGRlcHRoLCBzaW0sIGluc3Qpe1xyXG4gICAgLy8gICAgIGlmIChpbnN0ICYmIGluc3QuZXZhbFJlc3VsdCl7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBpbnN0LmV2YWxSZXN1bHQuZGVzY3JpYmUoKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgLy8gTm90ZSBkb24ndCBjYXJlIGFib3V0IGRlcHRoIHNpbmNlIHdlIGFsd2F5cyBqdXN0IHVzZSBpZGVudGlmaWVyXHJcbiAgICAvLyAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5LmRlc2NyaWJlKHNpbSwgaW5zdCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfSxcclxuXHJcbiAgICAvLyBleHBsYWluIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgLy8gICAgIHJldHVybiB7bWVzc2FnZTogdGhpcy5lbnRpdHkubmFtZX07XHJcbiAgICAvLyB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRPYmplY3RJZGVudGlmaWVyPFQgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZT4gZXh0ZW5kcyBJZGVudGlmaWVyRXhwcmVzc2lvbiwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG5cclxuICAgIHJlYWRvbmx5IHR5cGU6IFQ7XHJcbiAgICByZWFkb25seSB2YWx1ZUNhdGVnb3J5OiBcImx2YWx1ZVwiO1xyXG4gICAgcmVhZG9ubHkgZW50aXR5OiBPYmplY3RFbnRpdHk8VD47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRGdW5jdGlvbklkZW50aWZpZXIgZXh0ZW5kcyBJZGVudGlmaWVyRXhwcmVzc2lvbiwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG5cclxuICAgIHJlYWRvbmx5IHR5cGU6IEZ1bmN0aW9uVHlwZTtcclxuICAgIHJlYWRvbmx5IHZhbHVlQ2F0ZWdvcnk6IFwibHZhbHVlXCI7XHJcbiAgICByZWFkb25seSBlbnRpdHk6IEZ1bmN0aW9uRW50aXR5O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVPYmplY3RJZGVudGlmaWVyPFQgZXh0ZW5kcyBPYmplY3RUeXBlPiBleHRlbmRzIFJ1bnRpbWVFeHByZXNzaW9uPFQsIFwibHZhbHVlXCIsIENvbXBpbGVkT2JqZWN0SWRlbnRpZmllcjxUPj4ge1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IENvbXBpbGVkT2JqZWN0SWRlbnRpZmllcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG5cdHByb3RlY3RlZCB1cE5leHRJbXBsKCkge1xyXG4gICAgICAgIHRoaXMuc2V0RXZhbFJlc3VsdCg8VkNSZXN1bHRUeXBlczxULCBcImx2YWx1ZVwiPj50aGlzLm1vZGVsLmVudGl0eS5ydW50aW1lTG9va3VwKHRoaXMpKTtcclxuICAgICAgICB0aGlzLnNpbS5wb3AoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RlcEZvcndhcmRJbXBsKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIGRvIG5vdGhpbmdcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVGdW5jdGlvbklkZW50aWZpZXIgZXh0ZW5kcyBSdW50aW1lRXhwcmVzc2lvbjxGdW5jdGlvblR5cGUsIFwibHZhbHVlXCIsIENvbXBpbGVkRnVuY3Rpb25JZGVudGlmaWVyPiB7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRGdW5jdGlvbklkZW50aWZpZXIsIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuXHRwcm90ZWN0ZWQgdXBOZXh0SW1wbCgpIHtcclxuICAgICAgICB0aGlzLnNldEV2YWxSZXN1bHQodGhpcy5tb2RlbC5lbnRpdHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBzdGVwRm9yd2FyZEltcGwoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gZG8gbm90aGluZ1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRoaXNFeHByZXNzaW9uQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwidGhpc19leHByZXNzaW9uXCI7XHJcbn1cclxuXHJcbi8vIGV4cG9ydCB2YXIgVGhpc0V4cHJlc3Npb24gID0gRXhwcmVzc2lvbi5leHRlbmQoe1xyXG4vLyAgICAgX25hbWU6IFwiVGhpc0V4cHJlc3Npb25cIixcclxuLy8gICAgIHZhbHVlQ2F0ZWdvcnk6IFwicHJ2YWx1ZVwiLFxyXG4vLyAgICAgY29tcGlsZSA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgdmFyIGZ1bmMgPSB0aGlzLmNvbnRhaW5pbmdGdW5jdGlvbigpO1xyXG4vLyAgICAgICAgIGlmIChmdW5jLmlzTWVtYmVyRnVuY3Rpb24pe1xyXG4vLyAgICAgICAgICAgICB0aGlzLnR5cGUgPSBUeXBlcy5Qb2ludGVyLmluc3RhbmNlKGZ1bmMucmVjZWl2ZXJUeXBlKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmV4cHIudGhpc0V4cHIubWVtYmVyRnVuYyh0aGlzKSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuLy8gICAgIHN0ZXBGb3J3YXJkIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgLy8gU2V0IHRoaXMgcG9pbnRlciB3aXRoIFJUVEkgdG8gcG9pbnQgdG8gcmVjZWl2ZXJcclxuLy8gICAgICAgICBsZXQgcmVjZWl2ZXIgPSBpbnN0LmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb24ucmVjZWl2ZXI7XHJcbi8vICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KFZhbHVlLmluc3RhbmNlKHJlY2VpdmVyLmFkZHJlc3MsIFR5cGVzLk9iamVjdFBvaW50ZXIuaW5zdGFuY2UocmVjZWl2ZXIpKSk7XHJcbi8vICAgICAgICAgdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG5cclxuLy8gZXhwb3J0IHZhciBFbnRpdHlFeHByZXNzaW9uICA9IEV4cHJlc3Npb24uZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkVudGl0eUV4cHJlc3Npb25cIixcclxuLy8gICAgIHZhbHVlQ2F0ZWdvcnk6IFwibHZhbHVlXCIsXHJcbi8vICAgICBpbml0IDogZnVuY3Rpb24oZW50aXR5LCBhc3QsIGNvbnRleHQpe1xyXG4vLyAgICAgICAgIHRoaXMuaW5pdFBhcmVudChhc3QsIGNvbnRleHQpO1xyXG4vLyAgICAgICAgIHRoaXMuZW50aXR5ID0gZW50aXR5O1xyXG4vLyAgICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZW50aXR5LnR5cGU7XHJcbi8vICAgICB9LFxyXG4vLyAgICAgY29tcGlsZSA6IGZ1bmN0aW9uKCl7XHJcblxyXG4vLyAgICAgfSxcclxuLy8gICAgIHVwTmV4dCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgIGluc3Quc2V0RXZhbFJlc3VsdCh0aGlzLmVudGl0eS5ydW50aW1lTG9va3VwKHNpbSwgaW5zdCkpO1xyXG4vLyAgICAgICAgIHRoaXMuZG9uZShzaW0sIGluc3QpO1xyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBwYXJzZUNQUENoYXIobGl0VmFsdWU6IHN0cmluZyl7XHJcbiAgICByZXR1cm4gZXNjYXBlU3RyaW5nKGxpdFZhbHVlKS5jaGFyQ29kZUF0KDApO1xyXG59O1xyXG5cclxuY29uc3QgbGl0ZXJhbEpTUGFyc2UgPSB7XHJcblx0XCJpbnRcIjogcGFyc2VJbnQsXHJcblx0XCJmbG9hdFwiOiBwYXJzZUZsb2F0LFxyXG4gICAgXCJkb3VibGVcIjogcGFyc2VGbG9hdCxcclxuICAgIFwiYm9vbFwiIDogKGI6IGJvb2xlYW4pID0+IChiID8gMSA6IDApLFxyXG4gICAgXCJjaGFyXCI6IHBhcnNlQ1BQQ2hhclxyXG59O1xyXG5cclxuY29uc3QgbGl0ZXJhbFR5cGVzID0ge1xyXG5cdFwiaW50XCI6IEludC5JTlQsXHJcblx0XCJmbG9hdFwiOiBEb3VibGUuRE9VQkxFLFxyXG5cdFwiZG91YmxlXCI6IERvdWJsZS5ET1VCTEUsXHJcbiAgICBcImJvb2xcIjogQm9vbC5CT09MLFxyXG4gICAgXCJjaGFyXCIgOiBDaGFyLkNIQVJcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU51bWVyaWNMaXRlcmFsVmFsdWVGcm9tQVNUKGFzdDogTnVtZXJpY0xpdGVyYWxBU1ROb2RlKSB7XHJcbiAgICByZXR1cm4gbGl0ZXJhbEpTUGFyc2VbYXN0LnR5cGVdKDxhbnk+YXN0LnZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTnVtZXJpY0xpdGVyYWxBU1ROb2RlID0gRmxvYXRMaXRlcmFsQVNUTm9kZSB8IEludExpdGVyYWxBU1ROb2RlIHwgQ2hhckxpdGVyYWxBU1ROb2RlIHwgQm9vbExpdGVyYWxBU1ROb2RlO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGbG9hdExpdGVyYWxBU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJudW1lcmljX2xpdGVyYWxcIjtcclxuICAgIHJlYWRvbmx5IHR5cGU6IFwiZmxvYXRcIjtcclxuICAgIHJlYWRvbmx5IHZhbHVlOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW50TGl0ZXJhbEFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcIm51bWVyaWNfbGl0ZXJhbFwiO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogXCJpbnRcIjtcclxuICAgIHJlYWRvbmx5IHZhbHVlOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2hhckxpdGVyYWxBU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJudW1lcmljX2xpdGVyYWxcIjtcclxuICAgIHJlYWRvbmx5IHR5cGU6IFwiY2hhclwiO1xyXG4gICAgcmVhZG9ubHkgdmFsdWU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCb29sTGl0ZXJhbEFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcIm51bWVyaWNfbGl0ZXJhbFwiO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogXCJjaGFyXCI7XHJcbiAgICByZWFkb25seSB2YWx1ZTogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE51bWVyaWNMaXRlcmFsPFQgZXh0ZW5kcyBBcml0aG1ldGljVHlwZSA9IEFyaXRobWV0aWNUeXBlPiBleHRlbmRzIEV4cHJlc3Npb24ge1xyXG4gICAgXHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IFQ7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmFsdWVDYXRlZ29yeSA9IFwicHJ2YWx1ZVwiO1xyXG5cclxuXHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZTogVmFsdWU8VD47XHJcblxyXG4gICAgLy8gY3JlYXRlIGZyb20gYXN0IGNvZGU6XHJcbiAgICAvLyBUT0RPOiBhcmUgdGhlcmUgc29tZSBsaXRlcmFsIHR5cGVzIHdpdGhvdXQgY29udmVyc2lvbiBmdW5jdGlvbnM/IFRoZXJlIHNob3VsZG4ndCBiZS4uLlxyXG5cclxuICAgIC8vIHZhciBjb252ID0gbGl0ZXJhbEpTUGFyc2VbdGhpcy5hc3QudHlwZV07XHJcbiAgICAvLyB2YXIgdmFsID0gKGNvbnYgPyBjb252KHRoaXMuYXN0LnZhbHVlKSA6IHRoaXMuYXN0LnZhbHVlKTtcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHQsIHR5cGU6IFQsIHZhbHVlOiBSYXdWYWx1ZVR5cGUpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuXHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ldyBWYWx1ZSh2YWx1ZSwgdGhpcy50eXBlKTsgIC8vVE9ETyBmaXggdGhpcyAobWF5YmUgd2l0aCBhIGZhY3RvcnkgZnVuY3Rpb24gZm9yIHZhbHVlcz8pXHJcblx0fVxyXG4gICAgXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21BU1QoYXN0OiBOdW1lcmljTGl0ZXJhbEFTVE5vZGUsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOdW1lcmljTGl0ZXJhbChjb250ZXh0LCBsaXRlcmFsVHlwZXNbYXN0LnR5cGVdLCBwYXJzZU51bWVyaWNMaXRlcmFsVmFsdWVGcm9tQVNUKGFzdCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgQXJpdGhtZXRpY1R5cGU+KHRoaXM6IENvbXBpbGVkTnVtZXJpY0xpdGVyYWw8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lTnVtZXJpY0xpdGVyYWw8VD47XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIEF0b21pY1R5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5Pih0aGlzOiBDb21waWxlZEV4cHJlc3Npb248VCxWPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IG5ldmVyO1xyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFQgZXh0ZW5kcyBBcml0aG1ldGljVHlwZT4odGhpczogQ29tcGlsZWROdW1lcmljTGl0ZXJhbDxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVOdW1lcmljTGl0ZXJhbDxUPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSdW50aW1lTnVtZXJpY0xpdGVyYWwodGhpcywgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGVzY3JpYmVFdmFsUmVzdWx0KGRlcHRoOiBudW1iZXIpOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIGRlc2NyaWJlRXZhbFJlc3VsdCA6IGZ1bmN0aW9uKGRlcHRoLCBzaW0sIGluc3Qpe1xyXG4gICAgLy8gICAgIHZhciBzdHIgPSB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAvLyAgICAgcmV0dXJuIHtuYW1lOiBzdHIsIG1lc3NhZ2U6IHN0cn07XHJcbiAgICAvLyB9XHJcblx0XHJcbi8vXHRzdGVwRm9yd2FyZCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vL1x0XHR0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy9cdFx0cmV0dXJuIHRydWU7XHJcbi8vXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWROdW1lcmljTGl0ZXJhbDxUIGV4dGVuZHMgQXJpdGhtZXRpY1R5cGUgPSBBcml0aG1ldGljVHlwZT4gZXh0ZW5kcyBOdW1lcmljTGl0ZXJhbDxUPiwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUnVudGltZU51bWVyaWNMaXRlcmFsPFQgZXh0ZW5kcyBBcml0aG1ldGljVHlwZSA9IEFyaXRobWV0aWNUeXBlPiBleHRlbmRzIFJ1bnRpbWVFeHByZXNzaW9uPFQsIFwicHJ2YWx1ZVwiLCBDb21waWxlZE51bWVyaWNMaXRlcmFsPFQ+PiB7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWROdW1lcmljTGl0ZXJhbDxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG5cdHByb3RlY3RlZCB1cE5leHRJbXBsKCkge1xyXG4gICAgICAgIHRoaXMuc2V0RXZhbFJlc3VsdCg8VkNSZXN1bHRUeXBlczxULCBcInBydmFsdWVcIj4+dGhpcy5tb2RlbC52YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5zaW0ucG9wKCk7XHJcblx0fVxyXG5cdFxyXG5cdHByb3RlY3RlZCBzdGVwRm9yd2FyZEltcGwoKSB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZ1xyXG5cdH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIFN0cmluZ0xpdGVyYWwgZXh0ZW5kcyBFeHByZXNzaW9uIHtcclxuLy8gICAgIHB1YmxpYyB2YWx1ZUNhdGVnb3J5OiBzdHJpbmc7XHJcbi8vICAgICBwdWJsaWMgdHlwZTogVHlwZTtcclxuLy8gICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbihwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3Q8Q1BQQ29uc3RydWN0Pik6IFJ1bnRpbWVFeHByZXNzaW9uQmFzZTxFeHByZXNzaW9uPiB7XHJcbi8vICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbi8vICAgICB9XHJcbi8vICAgICBwdWJsaWMgZGVzY3JpYmVFdmFsUmVzdWx0KGRlcHRoOiBudW1iZXIpOiBEZXNjcmlwdGlvbiB7XHJcbi8vICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbi8vICAgICB9XHJcbi8vICAgICBfbmFtZTogXCJTdHJpbmdMaXRlcmFsXCIsXHJcbi8vICAgICBpbml0SW5kZXg6IGZhbHNlLFxyXG4vLyAgICAgY29tcGlsZSA6IGZ1bmN0aW9uKCl7XHJcblxyXG4vLyAgICAgICAgIHZhciBjb252ID0gbGl0ZXJhbEpTUGFyc2VbdGhpcy5hc3QudHlwZV07XHJcbi8vICAgICAgICAgdmFyIHZhbCA9IChjb252ID8gY29udih0aGlzLmFzdC52YWx1ZSkgOiB0aGlzLmFzdC52YWx1ZSk7XHJcblxyXG4vLyAgICAgICAgIHRoaXMuaV9zdHJpbmdFbnRpdHkgPSBTdHJpbmdMaXRlcmFsRW50aXR5Lmluc3RhbmNlKHZhbCk7XHJcbi8vICAgICAgICAgdGhpcy50cmFuc2xhdGlvblVuaXQuYWRkU3RyaW5nTGl0ZXJhbCh0aGlzLmlfc3RyaW5nRW50aXR5KTtcclxuLy8gICAgICAgICB0aGlzLmlfaXNTdHJpbmdMaXRlcmFsID0gdHJ1ZTtcclxuLy8gICAgICAgICB0aGlzLmlfc3RyaW5nVmFsdWUgPSB2YWw7XHJcbi8vICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5pX3N0cmluZ0VudGl0eS50eXBlO1xyXG4vLyAgICAgICAgIHRoaXMudmFsdWVDYXRlZ29yeSA9IFwibHZhbHVlXCI7XHJcblxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICB1cE5leHQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICBpbnN0LmV2YWxSZXN1bHQgPSB0aGlzLmlfc3RyaW5nRW50aXR5LnJ1bnRpbWVMb29rdXAoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgZGVzY3JpYmVFdmFsUmVzdWx0IDogZnVuY3Rpb24oZGVwdGgsIHNpbSwgaW5zdCl7XHJcbi8vICAgICAgICAgcmV0dXJuIHtuYW1lOiBcInRoZSBzdHJpbmcgbGl0ZXJhbCBcXFwiXCIgKyB0aGlzLmlfc3RyaW5nVmFsdWUgKyBcIlxcXCJcIiwgbWVzc2FnZTogXCJ0aGUgc3RyaW5nIGxpdGVyYWwgXFxcIlwiICsgdGhpcy5pX3N0cmluZ1ZhbHVlICsgXCJcXFwiXCJ9O1xyXG4vLyAgICAgfVxyXG5cclxuLy8gLy9cdHN0ZXBGb3J3YXJkIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vIC8vXHRcdHRoaXMuZG9uZShzaW0sIGluc3QpO1xyXG4vLyAvL1x0XHRyZXR1cm4gdHJ1ZTtcclxuLy8gLy9cdH1cclxuLy8gfVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQYXJlbnRoZXNlc0V4cHJlc3Npb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJwYXJlbnRoZXNlc19leHByZXNzaW9uXCI7XHJcbiAgICByZWFkb25seSBzdWJleHByZXNzaW9uOiBFeHByZXNzaW9uQVNUTm9kZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBhcmVudGhlc2VzIGV4dGVuZHMgRXhwcmVzc2lvbiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU/OiBUeXBlO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHZhbHVlQ2F0ZWdvcnk/OiBWYWx1ZUNhdGVnb3J5O1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBzdWJleHByZXNzaW9uOiBFeHByZXNzaW9uO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBfdF9jb21waWxlZCE6IENvbXBpbGVkUGFyZW50aGVzZXM7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0LCBzdWJleHByZXNzaW9uOiBFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcblxyXG4gICAgICAgIHRoaXMuYXR0YWNoKHRoaXMuc3ViZXhwcmVzc2lvbiA9IHN1YmV4cHJlc3Npb24pO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHN1YmV4cHJlc3Npb24udHlwZTtcclxuICAgICAgICB0aGlzLnZhbHVlQ2F0ZWdvcnkgPSBzdWJleHByZXNzaW9uLnZhbHVlQ2F0ZWdvcnk7XHJcblxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21BU1QoYXN0OiBQYXJlbnRoZXNlc0V4cHJlc3Npb25BU1ROb2RlLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUGFyZW50aGVzZXMoY29udGV4dCwgY3JlYXRlRXhwcmVzc2lvbkZyb21BU1QoYXN0LnN1YmV4cHJlc3Npb24sIGNvbnRleHQpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5Pih0aGlzOiBDb21waWxlZFBhcmVudGhlc2VzPFQsVj4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lUGFyZW50aGVzZXM8VCxWPjtcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRXhwcmVzc2lvbjxUIGV4dGVuZHMgVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+KHRoaXM6IENvbXBpbGVkRXhwcmVzc2lvbjxULFY+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogbmV2ZXI7XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5Pih0aGlzOiBDb21waWxlZFBhcmVudGhlc2VzPFQsVj4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lUGFyZW50aGVzZXM8VCxWPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSdW50aW1lUGFyZW50aGVzZXModGhpcywgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGVzY3JpYmVFdmFsUmVzdWx0KGRlcHRoOiBudW1iZXIpOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaXNUYWlsQ2hpbGQgOiBmdW5jdGlvbihjaGlsZCl7XHJcbiAgICAvLyAgICAgcmV0dXJuIHtpc1RhaWw6IHRydWV9O1xyXG4gICAgLy8gfVxyXG59XHJcblxyXG5cclxuLy8gVE9ETzogc2hvdWxkIHRoZXNlIGludGVyZmFjZSBkZWZpbml0aW9ucyBoYXZlIFwicHVibGljXCIgaW4gdGhlbT8gd2hhdCBpcyBiZXN0IHN0eWxlP1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkUGFyZW50aGVzZXM8VCBleHRlbmRzIFR5cGUgPSBUeXBlLCBWIGV4dGVuZHMgVmFsdWVDYXRlZ29yeSA9IFZhbHVlQ2F0ZWdvcnk+IGV4dGVuZHMgUGFyZW50aGVzZXMsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuICAgIFxyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG5cclxuICAgIHJlYWRvbmx5IHR5cGU6IFQ7XHJcbiAgICByZWFkb25seSB2YWx1ZUNhdGVnb3J5OiBWO1xyXG5cclxuICAgIHJlYWRvbmx5IHN1YmV4cHJlc3Npb246IENvbXBpbGVkRXhwcmVzc2lvbjxULFY+O1xyXG59XHJcblxyXG5jb25zdCBJTkRFWF9QQVJFTlRIRVNFU19TVUJFWFBSRVNTSU9OUyA9IDA7XHJcbmNvbnN0IElOREVYX1BBUkVOVEhFU0VTX0RPTkUgPSAxO1xyXG5leHBvcnQgY2xhc3MgUnVudGltZVBhcmVudGhlc2VzPFQgZXh0ZW5kcyBUeXBlID0gVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPSBWYWx1ZUNhdGVnb3J5PiBleHRlbmRzIFJ1bnRpbWVFeHByZXNzaW9uPFQsViwgQ29tcGlsZWRQYXJlbnRoZXNlczxULFY+PiB7XHJcblxyXG4gICAgcHVibGljIHN1YmV4cHJlc3Npb246IFJ1bnRpbWVFeHByZXNzaW9uPFQsVj47XHJcblxyXG4gICAgcHJpdmF0ZSBpbmRleCA6IHR5cGVvZiBJTkRFWF9QQVJFTlRIRVNFU19TVUJFWFBSRVNTSU9OUyB8IHR5cGVvZiBJTkRFWF9QQVJFTlRIRVNFU19ET05FID0gSU5ERVhfUEFSRU5USEVTRVNfU1VCRVhQUkVTU0lPTlM7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRQYXJlbnRoZXNlczxULFY+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuICAgICAgICB0aGlzLnN1YmV4cHJlc3Npb24gPSB0aGlzLm1vZGVsLnN1YmV4cHJlc3Npb24uY3JlYXRlUnVudGltZUV4cHJlc3Npb24odGhpcyk7XHJcbiAgICB9XHJcblxyXG5cdHByb3RlY3RlZCB1cE5leHRJbXBsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4ID09PSBJTkRFWF9QQVJFTlRIRVNFU19TVUJFWFBSRVNTSU9OUykge1xyXG4gICAgICAgICAgICB0aGlzLnNpbS5wdXNoKHRoaXMuc3ViZXhwcmVzc2lvbik7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBJTkRFWF9QQVJFTlRIRVNFU19ET05FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRFdmFsUmVzdWx0KHRoaXMuc3ViZXhwcmVzc2lvbi5ldmFsUmVzdWx0KTtcclxuICAgICAgICAgICAgdGhpcy5zaW0ucG9wKCk7XHJcbiAgICAgICAgfVxyXG5cdH1cclxuXHRcclxuXHRwcm90ZWN0ZWQgc3RlcEZvcndhcmRJbXBsKCkge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmdcclxuXHR9XHJcbn1cclxuXHJcblxyXG5cclxuY29uc3QgQVVYSUxJQVJZX0VYUFJFU1NJT05fQ09OVEVYVCA6IEV4cHJlc3Npb25Db250ZXh0ID0ge1xyXG4gICAgcHJvZ3JhbTogPG5ldmVyPnVuZGVmaW5lZCxcclxuICAgIHRyYW5zbGF0aW9uVW5pdDogPG5ldmVyPnVuZGVmaW5lZCxcclxuICAgIGNvbnRleHR1YWxTY29wZTogPG5ldmVyPnVuZGVmaW5lZFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQXV4aWxpYXJ5RXhwcmVzc2lvbjxUIGV4dGVuZHMgVHlwZSA9IFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gVmFsdWVDYXRlZ29yeT4gZXh0ZW5kcyBFeHByZXNzaW9uIGltcGxlbWVudHMgVHlwZWRFeHByZXNzaW9uPFQsVj4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlOiBUO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHZhbHVlQ2F0ZWdvcnk6IFY7XHJcblxyXG4gICAgY29uc3RydWN0b3IodHlwZTogVCwgdmFsdWVDYXRlZ29yeTogVikge1xyXG4gICAgICAgIHN1cGVyKEFVWElMSUFSWV9FWFBSRVNTSU9OX0NPTlRFWFQpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy52YWx1ZUNhdGVnb3J5ID0gdmFsdWVDYXRlZ29yeTtcclxuXHR9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPFQgZXh0ZW5kcyBUeXBlID0gVHlwZSwgViBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPSBWYWx1ZUNhdGVnb3J5Pih0aGlzOiBDb21waWxlZEV4cHJlc3Npb248VCwgVj4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBuZXZlciB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXV4aWxpYXJ5IGV4cHJlc3Npb25zIG11c3QgbmV2ZXIgYmUgaW5zdGFudGlhdGVkIGF0IHJ1bnRpbWUuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZUV2YWxSZXN1bHQoZGVwdGg6IG51bWJlcikgOiBuZXZlciB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXV4aWxpYXJ5IGV4cHJlc3Npb25zIGhhdmUgbm8gZGVzY3JpcHRpb25cIik7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuXHJcbi8vIE9MRCBFWFBSRVNTSU9OIEpVTksgQkVMT1dcclxuXHJcbi8vIHR5cGUgQ29tcGlsZWQ8RSBleHRlbmRzIEV4cHJlc3Npb24gPSBFeHByZXNzaW9uLCBUIGV4dGVuZHMgVHlwZSA9IFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gVmFsdWVDYXRlZ29yeT4gPSBFICYgRVtcIl90X2NvbXBpbGVkVHlwZVwiXSAmIHtcclxuLy8gICAgIHJlYWRvbmx5IHR5cGU6IFQ7XHJcbi8vICAgICByZWFkb25seSB2YWx1ZUNhdGVnb3J5OiBWO1xyXG4vLyB9O1xyXG5cclxuLy8gaW50ZXJmYWNlIENvbXBpbGVkRXhwcmVzc2lvbjxUIGV4dGVuZHMgVHlwZSA9IFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gVmFsdWVDYXRlZ29yeT4ge1xyXG4vLyAgICAgcmVhZG9ubHkgdHlwZTogVDtcclxuLy8gICAgIHJlYWRvbmx5IHZhbHVlQ2F0ZWdvcnk6IFY7XHJcbi8vICAgICByZWFkb25seSBfdF9pc0NvbXBpbGVkOiB0cnVlO1xyXG4vLyB9XHJcblxyXG4vLyBcclxuLy8gdHlwZSBFeHByZXNzaW9uUHJvcGVydHlOYW1lczxDIGV4dGVuZHMgRXhwcmVzc2lvbj4gPSB7IFtLIGluIGtleW9mIENdOiBDW0tdIGV4dGVuZHMgRXhwcmVzc2lvbiA/IEsgOiBuZXZlciB9W2tleW9mIENdO1xyXG4vLyB0eXBlIENvbXBpbGVkQ2hpbGRFeHByZXNzaW9uczxFIGV4dGVuZHMgRXhwcmVzc2lvbiwgRXggZXh0ZW5kcyBrZXlvZiBhbnk+ID0ge1xyXG4vLyAgICAgW2sgaW4gRXhjbHVkZTxFeHByZXNzaW9uUHJvcGVydHlOYW1lczxFPixFeD5dOiBDb21waWxlZEV4cHJlc3Npb248KEVba10gZXh0ZW5kcyBFeHByZXNzaW9uID8gRVtrXSA6IG5ldmVyKT47XHJcbi8vIH07XHJcblxyXG4vLyB0eXBlIENvbXBpbGVkRXhwcmVzc2lvbjxFIGV4dGVuZHMgRXhwcmVzc2lvbiA9IEV4cHJlc3Npb24sXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIFQgZXh0ZW5kcyBUeXBlID0gRVtcInRfY29tcGlsZWRUeXBlXCJdW1widHlwZVwiXSxcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgVkMgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gRVtcInRfY29tcGlsZWRUeXBlXCJdW1widmFsdWVDYXRlZ29yeVwiXT5cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgPSBVdGlsLk92ZXJ3cml0ZTxcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFV0aWwuT3ZlcndyaXRlPFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFV0aWwuT3ZlcndyaXRlPEUsIEVbXCJ0X2NvbXBpbGVkVHlwZVwiXT4sXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tcGlsZWRDaGlsZEV4cHJlc3Npb25zPEUsIGtleW9mIEVbXCJ0X2NvbXBpbGVkVHlwZVwiXT4+LFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0X2lzQ29tcGlsZWQgaXMgaGVyZSB0byBwcmV2ZW50IChvdGhlcndpc2UpIHN0cnVjdHVyYWxseSBlcXVpdmFsZW50IG5vbi1jb21waWxlZCBleHByZXNzaW9uc1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZyb20gYmVpbmcgYXNzaWduYWJsZSB0byBhIGNvbXBpbGVkIGV4cHJlc3Npb24gdHlwZVxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IG1heWJlIGJldHRlciB0byB1c2UgYSBzeW1ib2wgaGVyZT9cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seSB0X2lzQ29tcGlsZWQ6IFwidHJ1ZVwiXHJcblxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBpbiB0aGUgdHlwZSBhbmQgdmFsdWVDYXRlZ29yeSBwcm9wZXJ0aWVzIGZyb20gdGhlIHRlbXBsYXRlIHBhcmFtZXRlcnMgd2l0aFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFwibGFzdCBvbmUgd2luc1wiIHNlbWFudGljcywgYmVjYXVzZSB0aGV5IHdlcmUgb21pdHRlZCAod2l0aCBPbWl0KSBwcmV2aW91c2x5XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHkgdHlwZTogVDtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seSB2YWx1ZUNhdGVnb3J5OiBWQztcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgPjtcclxuIiwiaW1wb3J0IHsgVHlwZSwgQm91bmRlZEFycmF5VHlwZSwgQ2xhc3NUeXBlLCBBdG9taWNUeXBlLCBQb2ludGVyVHlwZSwgT2JqZWN0VHlwZSwgT2JqZWN0UG9pbnRlciwgQXJyYXlQb2ludGVyLCBBcnJheUVsZW1UeXBlLCBDaGFyLCBJbnQgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4uL3V0aWwvb2JzZXJ2ZVwiO1xyXG5pbXBvcnQgeyBhc3NlcnQsIE11dGFibGUsIGFzTXV0YWJsZSB9IGZyb20gXCIuLi91dGlsL3V0aWxcIjtcclxuaW1wb3J0IHsgTWVtb3J5LCBWYWx1ZSwgUmF3VmFsdWVUeXBlIH0gZnJvbSBcIi4vcnVudGltZUVudmlyb25tZW50XCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVDb25zdHJ1Y3QsIERlc2NyaXB0aW9uIH0gZnJvbSBcIi4vY29uc3RydWN0c1wiO1xyXG5pbXBvcnQgeyBBdXRvRW50aXR5LCBTdGF0aWNFbnRpdHksIENQUEVudGl0eSwgVGVtcG9yYXJ5T2JqZWN0RW50aXR5LCBPYmplY3RFbnRpdHkgfSBmcm9tIFwiLi9lbnRpdGllc1wiO1xyXG5pbXBvcnQgeyBTaW11bGF0aW9uIH0gZnJvbSBcIi4vU2ltdWxhdGlvblwiO1xyXG5pbXBvcnQgeyBMb2NhbFZhcmlhYmxlRGVmaW5pdGlvbiwgR2xvYmFsT2JqZWN0RGVmaW5pdGlvbiwgQ29tcGlsZWRHbG9iYWxPYmplY3REZWZpbml0aW9uLCBQYXJhbWV0ZXJEZWZpbml0aW9uIH0gZnJvbSBcIi4vZGVjbGFyYXRpb25zXCI7XHJcblxyXG5hYnN0cmFjdCBjbGFzcyBPYmplY3REYXRhPFQgZXh0ZW5kcyBPYmplY3RUeXBlPiB7XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgb2JqZWN0OiBDUFBPYmplY3Q8VD47XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgc2l6ZTogbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG1lbW9yeTogTWVtb3J5O1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGFkZHJlc3M6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Iob2JqZWN0OiBDUFBPYmplY3Q8VD4sIG1lbW9yeTogTWVtb3J5LCBhZGRyZXNzOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcclxuICAgICAgICB0aGlzLnNpemUgPSB0aGlzLm9iamVjdC5zaXplO1xyXG4gICAgICAgIHRoaXMubWVtb3J5ID0gbWVtb3J5O1xyXG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHVibGljIGFic3RyYWN0IHJhd1ZhbHVlKCkgOiBSYXdWYWx1ZVR5cGU7XHJcblxyXG4gICAgLy8gcHVibGljIGFic3RyYWN0IHNldFJhd1ZhbHVlKG5ld1ZhbHVlOiBSYXdWYWx1ZVR5cGUsIHdyaXRlOiBib29sZWFuKSA6IHZvaWQ7XHJcbn07XHJcblxyXG5jbGFzcyBBdG9taWNPYmplY3REYXRhPFQgZXh0ZW5kcyBBdG9taWNUeXBlPiBleHRlbmRzIE9iamVjdERhdGE8VD4ge1xyXG5cclxuICAgIHB1YmxpYyByYXdWYWx1ZSgpIHtcclxuICAgICAgICB2YXIgYnl0ZXMgPSB0aGlzLm1lbW9yeS5yZWFkQnl0ZXModGhpcy5hZGRyZXNzLCB0aGlzLnNpemUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9iamVjdC50eXBlLmJ5dGVzVG9WYWx1ZShieXRlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFJhd1ZhbHVlKG5ld1ZhbHVlOiBSYXdWYWx1ZVR5cGUsIHdyaXRlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5tZW1vcnkud3JpdGVCeXRlcyh0aGlzLmFkZHJlc3MsIHRoaXMub2JqZWN0LnR5cGUudmFsdWVUb0J5dGVzKG5ld1ZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5jbGFzcyBBcnJheU9iamVjdERhdGE8VCBleHRlbmRzIEJvdW5kZWRBcnJheVR5cGU+IGV4dGVuZHMgT2JqZWN0RGF0YTxUPiB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGU8RWxlbV90eXBlIGV4dGVuZHMgQXJyYXlFbGVtVHlwZT4ob2JqZWN0OiBDUFBPYmplY3Q8Qm91bmRlZEFycmF5VHlwZTxFbGVtX3R5cGU+PiwgbWVtb3J5OiBNZW1vcnksIGFkZHJlc3M6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgQXJyYXlPYmplY3REYXRhPEJvdW5kZWRBcnJheVR5cGU+KG9iamVjdCwgbWVtb3J5LCBhZGRyZXNzKTtcclxuICAgIH0gXHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbGVtT2JqZWN0czogQXJyYXlTdWJvYmplY3Q8YW55PltdO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihvYmplY3Q6IENQUE9iamVjdDxUPiwgbWVtb3J5OiBNZW1vcnksIGFkZHJlc3M6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKG9iamVjdCwgbWVtb3J5LCBhZGRyZXNzKTtcclxuXHJcbiAgICAgICAgbGV0IHN1YkFkZHIgPSB0aGlzLmFkZHJlc3M7XHJcbiAgICAgICAgdGhpcy5lbGVtT2JqZWN0cyA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLm9iamVjdC50eXBlLmxlbmd0aDsgKytpKXtcclxuICAgICAgICAgICAgdGhpcy5lbGVtT2JqZWN0cy5wdXNoKG5ldyBBcnJheVN1Ym9iamVjdCh0aGlzLm9iamVjdCwgaSwgbWVtb3J5LCBzdWJBZGRyKSk7XHJcbiAgICAgICAgICAgIHN1YkFkZHIgKz0gdGhpcy5vYmplY3QudHlwZS5lbGVtVHlwZS5zaXplO1xyXG4gICAgICAgIH0gXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEFycmF5RWxlbVN1Ym9iamVjdEJ5QWRkcmVzcyhhZGRyZXNzOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgaW5kZXggPSAoYWRkcmVzcyAtIHRoaXMuYWRkcmVzcykgLyB0aGlzLm9iamVjdC50eXBlLmVsZW1UeXBlLnNpemU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXJyYXlFbGVtU3Vib2JqZWN0KGluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0QXJyYXlFbGVtU3Vib2JqZWN0KGluZGV4OiBudW1iZXIpIDogQXJyYXlTdWJvYmplY3Q8VFtcImVsZW1UeXBlXCJdPiB7XHJcbiAgICAgICAgaWYgKDAgPD0gaW5kZXggJiYgaW5kZXggPCB0aGlzLmVsZW1PYmplY3RzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtT2JqZWN0c1tpbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgb3V0T2ZCb3VuZHNPYmogPSAgbmV3IEFycmF5U3Vib2JqZWN0KHRoaXMub2JqZWN0LCBpbmRleCxcclxuICAgICAgICAgICAgICAgIHRoaXMubWVtb3J5LCB0aGlzLmFkZHJlc3MgKyBpbmRleCAqIHRoaXMub2JqZWN0LnR5cGUuZWxlbVR5cGUuc2l6ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRPZkJvdW5kc09iajtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHVibGljIHJhd1ZhbHVlKCkge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmVsZW1PYmplY3RzLm1hcCgoZWxlbU9iaikgPT4geyByZXR1cm4gZWxlbU9iai5yYXdWYWx1ZSgpOyB9KTtcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgc2V0UmF3VmFsdWUobmV3VmFsdWU6IFJhd1ZhbHVlVHlwZSwgd3JpdGU6IGJvb2xlYW4pIHtcclxuICAgIC8vICAgICBmb3IodmFyIGkgPSAwOyBpIDwgKDxBcnJheVR5cGU+dGhpcy5vYmplY3QudHlwZSkubGVuZ3RoOyArK2kpe1xyXG4gICAgLy8gICAgICAgICB0aGlzLmVsZW1PYmplY3RzW2ldLnNldFZhbHVlKG5ld1ZhbHVlW2ldLCB3cml0ZSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG59XHJcblxyXG5jbGFzcyBDbGFzc09iamVjdERhdGE8VCBleHRlbmRzIENsYXNzVHlwZT4gZXh0ZW5kcyBPYmplY3REYXRhPFQ+IHtcclxuXHJcbiAgICAvLyBwdWJsaWMgcmVhZG9ubHkgc3Vib2JqZWN0czogU3Vib2JqZWN0W107XHJcbiAgICAvLyBwdWJsaWMgcmVhZG9ubHkgYmFzZVN1Ym9iamVjdHM6IEJhc2VTdWJvYmplY3RbXTtcclxuICAgIC8vIHB1YmxpYyByZWFkb25seSBtZW1iZXJTdWJvYmplY3RzOiBNZW1iZXJTdWJvYmplY3RbXTtcclxuICAgIC8vIHByaXZhdGUgcmVhZG9ubHkgbWVtYmVyU3Vib2JqZWN0TWFwOiB7W2luZGV4OiBzdHJpbmddOiBNZW1iZXJTdWJvYmplY3R9ID0ge307XHJcblxyXG4gICAgLy8gcHVibGljIGNvbnN0cnVjdG9yKG9iamVjdDogQ1BQT2JqZWN0PFQ+LCBtZW1vcnk6IE1lbW9yeSwgYWRkcmVzczogbnVtYmVyKSB7XHJcbiAgICAvLyAgICAgc3VwZXIob2JqZWN0LCBtZW1vcnksIGFkZHJlc3MpO1xyXG4gICAgICAgIFxyXG4gICAgLy8gICAgIGxldCBzdWJBZGRyID0gdGhpcy5hZGRyZXNzO1xyXG5cclxuICAgIC8vICAgICB0aGlzLmJhc2VTdWJvYmplY3RzID0gKDxDbGFzc1R5cGU+dGhpcy5vYmplY3QudHlwZSkuY3BwQ2xhc3MuYmFzZVN1Ym9iamVjdEVudGl0aWVzLm1hcCgoYmFzZSkgPT4ge1xyXG4gICAgLy8gICAgICAgICBsZXQgc3ViT2JqID0gYmFzZS5vYmplY3RJbnN0YW5jZSh0aGlzLm9iamVjdCwgbWVtb3J5LCBzdWJBZGRyKTtcclxuICAgIC8vICAgICAgICAgc3ViQWRkciArPSBzdWJPYmouc2l6ZTtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHN1Yk9iajtcclxuICAgIC8vICAgICB9KTtcclxuXHJcbiAgICAvLyAgICAgdGhpcy5tZW1iZXJTdWJvYmplY3RzID0gKDxDbGFzc1R5cGU+dGhpcy5vYmplY3QudHlwZSkuY3BwQ2xhc3MubWVtYmVyU3Vib2JqZWN0RW50aXRpZXMubWFwKChtZW0pID0+IHtcclxuICAgIC8vICAgICAgICAgbGV0IHN1Yk9iaiA9IG1lbS5vYmplY3RJbnN0YW5jZSh0aGlzLm9iamVjdCwgbWVtb3J5LCBzdWJBZGRyKTtcclxuICAgIC8vICAgICAgICAgc3ViQWRkciArPSBzdWJPYmouc2l6ZTtcclxuICAgIC8vICAgICAgICAgdGhpcy5tZW1iZXJTdWJvYmplY3RNYXBbbWVtLm5hbWVdID0gc3ViT2JqO1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gc3ViT2JqO1xyXG4gICAgLy8gICAgIH0pO1xyXG5cclxuXHJcbiAgICAvLyAgICAgdGhpcy5zdWJvYmplY3RzID0gdGhpcy5iYXNlU3Vib2JqZWN0cy5jb25jYXQodGhpcy5tZW1iZXJTdWJvYmplY3RzKTtcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgZ2V0TWVtYmVyU3Vib2JqZWN0KG5hbWU6IHN0cmluZykge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLm1lbWJlclN1Ym9iamVjdE1hcFtuYW1lXTtcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgZ2V0QmFzZVN1Ym9iamVjdCgpIDogQmFzZVN1Ym9iamVjdCB8IHVuZGVmaW5lZCB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuYmFzZVN1Ym9iamVjdHNbMF07XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gVE9ETzogQ291bGQgcmVtb3ZlPyBUaGlzIGlzbid0IGN1cnJlbnRseSB1c2VkIGFuZCBJIGRvbid0IHRoaW5rIGl0J3MgdXNlZnVsIGZvciBhbnl0aGluZ1xyXG4gICAgLy8gcHVibGljIGdldFN1Ym9iamVjdEJ5QWRkcmVzcyhhZGRyZXNzOiBudW1iZXIpIHtcclxuICAgIC8vICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJvYmplY3RzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAvLyAgICAgICAgIHZhciBzdWJPYmogPSB0aGlzLnN1Ym9iamVjdHNbaV07XHJcbiAgICAvLyAgICAgICAgIGlmIChzdWJPYmouYWRkcmVzcyA9PT0gYWRkcmVzcyl7XHJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm4gc3ViT2JqO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHB1YmxpYyByYXdWYWx1ZSgpIHtcclxuICAgIC8vICAgICByZXR1cm4gdGhpcy5zdWJvYmplY3RzLm1hcCgoc3ViT2JqKSA9PiB7IHJldHVybiBzdWJPYmoucmF3VmFsdWUoKTsgfSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gcHVibGljIHNldFJhd1ZhbHVlKG5ld1ZhbHVlOiBSYXdWYWx1ZVR5cGUsIHdyaXRlOiBib29sZWFuKSB7XHJcbiAgICAvLyAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vib2JqZWN0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgLy8gICAgICAgICB0aGlzLnN1Ym9iamVjdHNbaV0uc2V0VmFsdWUobmV3VmFsdWVbaV0sIHdyaXRlKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcbn1cclxuXHJcbi8vIGludGVyZmFjZSBDUFBPYmplY3REZXNjcmlwdG9yPFQgZXh0ZW5kcyBPYmplY3RUeXBlPiB7XHJcbi8vICAgICBkZXNjcmliZShvYmo6IENQUE9iamVjdDxUPikgOiBEZXNjcmlwdGlvbjtcclxuLy8gfVxyXG5cclxuXHJcbi8vIGNvbnN0IE9CSkVDVF9ERVNDUklQVE9SUyA9IHtcclxuLy8gICAgIERFRkFVTFQgOiB7XHJcbi8vICAgICAgICAgZGVzY3JpYmU6IChvYmo6IENQUE9iamVjdDxPYmplY3RUeXBlPikgPT4ge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwiYW4gb2JqZWN0IGF0IDB4XCIgKyBvYmouYWRkcmVzc307XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuLy8gICAgIEFVVE8gOiB7XHJcbi8vICAgICAgICAgZGVzY3JpYmU6IChvYmo6IENQUE9iamVjdDxPYmplY3RUeXBlPikgPT4ge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwidGhlIGhlYXAgb2JqZWN0IGF0IDB4XCIgKyBvYmouYWRkcmVzc307XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuLy8gICAgIERZTkFNSUMgOiB7XHJcbi8vICAgICAgICAgZGVzY3JpYmU6IChvYmo6IENQUE9iamVjdDxPYmplY3RUeXBlPikgPT4ge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwidGhlIGhlYXAgb2JqZWN0IGF0IDB4XCIgKyBvYmouYWRkcmVzc307XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuLy8gICAgIElOVkFMSUQgOiB7XHJcbi8vICAgICAgICAgZGVzY3JpYmU6IChvYmo6IENQUE9iamVjdDxPYmplY3RUeXBlPikgPT4ge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwiYW4gaW52YWxpZCBvYmplY3QgYXQgMHhcIiArIG9iai5hZGRyZXNzfTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG4vLyAgICAgVEhJUyA6IHtcclxuLy8gICAgICAgICBkZXNjcmliZTogKG9iajogQ1BQT2JqZWN0PFBvaW50ZXI+KSA9PiB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB7bmFtZTogXCJ0aGlzXCIsIG1lc3NhZ2U6IFwidGhlIHRoaXMgcG9pbnRlclwifTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG4vLyAgICAgU1RSSU5HX0xJVEVSQUwgOiB7XHJcbi8vICAgICAgICAgZGVzY3JpYmU6IChvYmo6IENQUE9iamVjdDxBcnJheVR5cGU+KSA9PiB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJzdHJpbmcgbGl0ZXJhbCBhdCAweFwiICsgb2JqLmFkZHJlc3N9O1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuXHJcbi8vIGNsYXNzIEVudGl0eU9iamVjdERlc2NyaXB0b3Ige1xyXG4vLyAgICAgcHJpdmF0ZSBlbnRpdHk6IENQUEVudGl0eTtcclxuICAgIFxyXG4vLyAgICAgY29uc3RydWN0b3IoZW50aXR5OiBDUFBFbnRpdHkpIHtcclxuLy8gICAgICAgICB0aGlzLmVudGl0eSA9IGVudGl0eTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBkZXNjcmliZShvYmo6IENQUE9iamVjdCkge1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLmVudGl0eS5kZXNjcmliZSgpO1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG5cclxuLy8gVE9ETzogaXQgbWF5IGJlIG1vcmUgZWxlZ2FudCB0byBzcGxpdCBpbnRvIDMgZGVyaXZlZCB0eXBlcyBvZiBDUFBPYmplY3QgZm9yIGFycmF5cywgY2xhc3NlcywgYW5kXHJcbi8vIGF0b21pYyBvYmplY3RzIGFuZCB1c2UgYSBwdWJsaWMgZmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGFwcHJvcHJpYXRlIGluc3RhbmNlIGJhc2VkIG9uIHRoZVxyXG4vLyB0ZW1wbGF0ZSBwYXJhbWV0ZXIuIChSYXRoZXIgdGhhbiB0aGUgY3VycmVudCBhd2t3YXJkIGNvbXBvc2l0aW9uIGFuZCBjb25kaXRpb25hbCBtZXRob2Qgc3RyYXRlZ3kpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDUFBPYmplY3Q8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSh0aGlzKTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogVDtcclxuICAgIHB1YmxpYyByZWFkb25seSBzaXplOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgYWRkcmVzczogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0YTogVCBleHRlbmRzIEF0b21pY1R5cGUgPyBBdG9taWNPYmplY3REYXRhPFQ+IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgVCBleHRlbmRzIEJvdW5kZWRBcnJheVR5cGUgPyBBcnJheU9iamVjdERhdGE8VD4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBUIGV4dGVuZHMgQ2xhc3NUeXBlID8gQ2xhc3NPYmplY3REYXRhPFQ+IDogdW5rbm93bjtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNBbGl2ZTogYm9vbGVhbjtcclxuICAgIHB1YmxpYyByZWFkb25seSBkZWFsbG9jYXRlZEJ5PzogUnVudGltZUNvbnN0cnVjdDtcclxuXHJcblxyXG4gICAgcHJpdmF0ZSBfaXNWYWxpZDogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodHlwZTogVCwgbWVtb3J5OiBNZW1vcnksIGFkZHJlc3M6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5zaXplID0gdHlwZS5zaXplO1xyXG4gICAgICAgIGFzc2VydCh0aGlzLnNpemUgIT0gMCwgXCJTaXplIGNhbm5vdCBiZSAwLlwiKTsgLy8gU0NBUllcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudHlwZSBpbnN0YW5jZW9mIEJvdW5kZWRBcnJheVR5cGUpIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5pc0FycmF5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhID0gPGFueT5BcnJheU9iamVjdERhdGEuY3JlYXRlKDxhbnk+dGhpcywgbWVtb3J5LCBhZGRyZXNzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy50eXBlIGluc3RhbmNlb2YgQ2xhc3NUeXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IDxhbnk+bmV3IENsYXNzT2JqZWN0RGF0YSg8YW55PnRoaXMsIG1lbW9yeSwgYWRkcmVzcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSA8YW55Pm5ldyBBdG9taWNPYmplY3REYXRhKDxhbnk+dGhpcywgbWVtb3J5LCBhZGRyZXNzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XHJcblxyXG4gICAgICAgIHRoaXMuaXNBbGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5faXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE9ubHkgYWxsb3dlZCBpZiByZWNlaXZlciBtYXRjaGVzIENQUE9iamVjdDxBcnJheVR5cGU8RWxlbV90eXBlPj5cclxuICAgIHB1YmxpYyBnZXRBcnJheUVsZW1TdWJvYmplY3Q8QVQgZXh0ZW5kcyBCb3VuZGVkQXJyYXlUeXBlPih0aGlzOiBDUFBPYmplY3Q8QVQ+LCBpbmRleDogbnVtYmVyKSA6IEFycmF5U3Vib2JqZWN0PEFUW1wiZWxlbVR5cGVcIl0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmdldEFycmF5RWxlbVN1Ym9iamVjdChpbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gT25seSBhbGxvd2VkIGlmIHJlY2VpdmVyIG1hdGNoZXMgQ1BQT2JqZWN0PEFycmF5VHlwZTxFbGVtX3R5cGU+PlxyXG4gICAgcHVibGljIGdldEFycmF5RWxlbVN1Ym9iamVjdEJ5QWRkcmVzczxBVCBleHRlbmRzIEJvdW5kZWRBcnJheVR5cGU+KHRoaXM6IENQUE9iamVjdDxBVD4sIGFkZHJlc3M6IG51bWJlcikgOiBBcnJheVN1Ym9iamVjdDxBVFtcImVsZW1UeXBlXCJdPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5nZXRBcnJheUVsZW1TdWJvYmplY3RCeUFkZHJlc3MoYWRkcmVzcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLy8gT25seSBhbGxvd2VkIGlmIHJlY2VpdmVyIG1hdGNoZXMgQ1BQT2JqZWN0PENsYXNzVHlwZT5cclxuICAgIC8vIHB1YmxpYyBnZXRNZW1iZXJTdWJvYmplY3QodGhpczogQ1BQT2JqZWN0PENsYXNzVHlwZT4sIG5hbWU6IHN0cmluZykgOiBNZW1iZXJTdWJvYmplY3Qge1xyXG4gICAgLy8gICAgIHJldHVybiAoPENsYXNzT2JqZWN0RGF0YTxDbGFzc1R5cGU+PnRoaXMuZGF0YSkuZ2V0TWVtYmVyU3Vib2JqZWN0KG5hbWUpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIC8vIE9ubHkgYWxsb3dlZCBpZiByZWNlaXZlciBtYXRjaGVzIENQUE9iamVjdDxDbGFzc1R5cGU+XHJcbiAgICAvLyBwdWJsaWMgZ2V0QmFzZVN1Ym9iamVjdCh0aGlzOiBDUFBPYmplY3Q8Q2xhc3NUeXBlPikgOiBCYXNlU3Vib2JqZWN0IHwgdW5kZWZpbmVkIHtcclxuICAgIC8vICAgICByZXR1cm4gKDxDbGFzc09iamVjdERhdGE8Q2xhc3NUeXBlPj50aGlzLmRhdGEpLmdldEJhc2VTdWJvYmplY3QoKTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBwdWJsaWMgc3Vib2JqZWN0VmFsdWVXcml0dGVuKCkge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwidmFsdWVXcml0dGVuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gXCJAXCIrIHRoaXMuYWRkcmVzcztcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPOiBmaWd1cmUgb3V0IHByZWNpc2VseSB3aGF0IHRoaXMgaXMgdXNlZCBmb3IgYW5kIG1ha2Ugc3VyZSBvdmVycmlkZXMgYWN0dWFsbHkgcHJvdmlkZSBhcHByb3ByaWF0ZSBzdHJpbmdzXHJcbiAgICAvLyBwdWJsaWMgbmFtZVN0cmluZygpIHtcclxuICAgIC8vICAgICByZXR1cm4gXCJAXCIgKyB0aGlzLmFkZHJlc3M7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgcHVibGljIGtpbGwocnQ/OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgKDxNdXRhYmxlPHRoaXM+PnRoaXMpLmlzQWxpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHJ0KSB7XHJcbiAgICAgICAgICAgICg8TXV0YWJsZTx0aGlzPj50aGlzKS5kZWFsbG9jYXRlZEJ5ID0gcnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwiZGVhbGxvY2F0ZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFBvaW50ZXJUbygpIDogVmFsdWU8UG9pbnRlclR5cGU+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKHRoaXMuYWRkcmVzcywgbmV3IE9iamVjdFBvaW50ZXIodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRWYWx1ZTxVIGV4dGVuZHMgQXRvbWljVHlwZT4odGhpczogQ1BQT2JqZWN0PFU+LCByZWFkOiBib29sZWFuID0gZmFsc2UpIDogVmFsdWU8VT4ge1xyXG4gICAgICAgIGxldCB2YWwgPSBuZXcgVmFsdWUodGhpcy5nZXRSYXdWYWx1ZSgpLCB0aGlzLnR5cGUsIHRoaXMuX2lzVmFsaWQpO1xyXG4gICAgICAgIGlmIChyZWFkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwidmFsdWVSZWFkXCIsIHZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRSYXdWYWx1ZSh0aGlzOiBDUFBPYmplY3Q8QXRvbWljVHlwZT4pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLnJhd1ZhbHVlKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkVmFsdWU8VSBleHRlbmRzIEF0b21pY1R5cGU+KHRoaXM6IENQUE9iamVjdDxVPikgOiBWYWx1ZTxVPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFZhbHVlPFRfQXRvbWljIGV4dGVuZHMgQXRvbWljVHlwZT4odGhpczogQ1BQT2JqZWN0PFRfQXRvbWljPiwgbmV3VmFsdWU6IFZhbHVlPFRfQXRvbWljPiwgd3JpdGU6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG5cclxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gbmV3VmFsdWUuaXNWYWxpZDtcclxuXHJcbiAgICAgICAgLy8gQWNjZXB0IG5ldyBSVFRJXHJcbiAgICAgICAgYXNNdXRhYmxlKHRoaXMpLnR5cGUgPSBuZXdWYWx1ZS50eXBlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZGF0YS5zZXRSYXdWYWx1ZShuZXdWYWx1ZS5yYXdWYWx1ZSwgd3JpdGUpO1xyXG5cclxuICAgICAgICBpZih3cml0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcInZhbHVlV3JpdHRlblwiLCBuZXdWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMub25WYWx1ZVNldCh3cml0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uVmFsdWVTZXQod3JpdGU6IGJvb2xlYW4pIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHdyaXRlVmFsdWU8VF9BdG9taWMgZXh0ZW5kcyBBdG9taWNUeXBlPih0aGlzOiBDUFBPYmplY3Q8VF9BdG9taWM+LCBuZXdWYWx1ZTogVmFsdWU8VF9BdG9taWM+KSB7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZShuZXdWYWx1ZSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzVmFsdWVWYWxpZDxUX0F0b21pYyBleHRlbmRzIEF0b21pY1R5cGU+KHRoaXM6IENQUE9iamVjdDxUX0F0b21pYz4pIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQgJiYgdGhpcy50eXBlLmlzVmFsdWVWYWxpZCh0aGlzLmdldFJhd1ZhbHVlKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE86IGZpZ3VyZSBvdXQgd2hldGhlciB0aGlzIG9sZCBjb2RlIGlzIHdvcnRoIGtlZXBpbmdcclxuICAgIC8vIG9yaWdpbmFsbHksIHRoZXNlIGZ1bmN0aW9ucyB3ZXJlIHVzZWQgdG8gbm90aWZ5IGFuIG9iamVjdCB3aGVuIHNvbWVib2R5IGVsc2VcclxuICAgIC8vIG1lc3NlZCB3aXRoIChpLmUuIHJlYWQvd3JvdGUgYnl0ZXMgdGhhdCB3ZXJlIHBhcnQgb2YgdGhlIG9iamVjdCkuXHJcblxyXG4gICAgLy8gYnl0ZVJlYWQ6IGZ1bmN0aW9uKGFkZHIpe1xyXG4gICAgLy8gICAgIGlmICh0aGlzLmlzQXJyYXkpe1xyXG4gICAgLy8gICAgICAgICAvLyBJZiBhcnJheSwgZmluZCB0aGUgc3Vib2JqZWN0IGNvbnRhaW5pbmcgdGhlIGJ5dGVcclxuICAgIC8vICAgICAgICAgdGhpcy5lbGVtT2JqZWN0c1soYWRkciAtIHRoaXMuYWRkcmVzcykgLyB0aGlzLm5vblJlZlR5cGUuZWxlbVR5cGUuc2l6ZV0uYnl0ZVJlYWQoYWRkcik7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2UgaWYgKHRoaXMuaXNDbGFzcyl7XHJcbiAgICAvLyAgICAgICAgIHZhciBhZCA9IHRoaXMuYWRkcmVzcztcclxuICAgIC8vICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vib2JqZWN0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgLy8gICAgICAgICAgICAgdmFyIG1lbSA9IHRoaXMuc3Vib2JqZWN0c1tpXTtcclxuICAgIC8vICAgICAgICAgICAgIGlmKGFkID0gYWQgKyBtZW0udHlwZS5zaXplID4gYWRkcil7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYWQuYnl0ZVJlYWQoYWRkcik7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgdGhpcy5zZW5kKFwiYnl0ZVJlYWRcIiwge2FkZHI6IGFkZHJ9KTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9LFxyXG4gICAgLy8gYnl0ZXNSZWFkOiBmdW5jdGlvbihhZGRyLCBsZW5ndGgpe1xyXG4gICAgLy8gICAgIGlmICh0aGlzLmlzQXJyYXkpIHtcclxuICAgIC8vICAgICAgICAgdmFyIGJlZ2luSW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKCggYWRkciAtIHRoaXMuYWRkcmVzcyApIC8gdGhpcy5ub25SZWZUeXBlLmVsZW1UeXBlLnNpemUpKTtcclxuICAgIC8vICAgICAgICAgdmFyIGVuZEluZGV4ID0gTWF0aC5taW4oXHJcbiAgICAvLyAgICAgICAgICAgICBiZWdpbkluZGV4ICsgTWF0aC5jZWlsKGxlbmd0aCAvIHRoaXMubm9uUmVmVHlwZS5lbGVtVHlwZS5zaXplKSxcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMubm9uUmVmVHlwZS5sZW5ndGgpO1xyXG5cclxuICAgIC8vICAgICAgICAgZm9yICh2YXIgaSA9IGJlZ2luSW5kZXg7IGkgPCBlbmRJbmRleDsgKytpKSB7XHJcbiAgICAvLyAgICAgICAgICAgICB0aGlzLmVsZW1PYmplY3RzW2ldLmJ5dGVzUmVhZChhZGRyLCBsZW5ndGgpO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2UgaWYgKHRoaXMuaXNDbGFzcyl7XHJcbiAgICAvLyAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnN1Ym9iamVjdHMubGVuZ3RoOyArK2kpIHtcclxuICAgIC8vICAgICAgICAgICAgIHZhciBtZW0gPSB0aGlzLnN1Ym9iamVjdHNbaV07XHJcbiAgICAvLyAgICAgICAgICAgICBpZihhZGRyIDwgbWVtLmFkZHJlc3MgKyBtZW0udHlwZS5zaXplICYmIG1lbS5hZGRyZXNzIDwgYWRkciArIGxlbmd0aCl7IC8vIGNoZWNrIGZvciBvdmVybGFwXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbWVtLmJ5dGVzUmVhZChhZGRyLCBsZW5ndGgpO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgZWxzZSBpZiAobWVtLmFkZHJlc3MgPiBhZGRyICtsZW5ndGgpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIC8vIGJyZWFrIGlmIHdlIGFyZSBub3cgaW4gbWVtYmVycyBwYXN0IGFmZmVjdGVkIGJ5dGVzXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgdGhpcy5zZW5kKFwiYnl0ZXNSZWFkXCIsIHthZGRyOiBhZGRyLCBsZW5ndGg6IGxlbmd0aH0pO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH0sXHJcbiAgICAvLyBieXRlU2V0OiBmdW5jdGlvbihhZGRyLCB2YWx1ZSl7XHJcbiAgICAvLyAgICAgaWYgKHRoaXMuaXNBcnJheSl7XHJcbiAgICAvLyAgICAgICAgIC8vIElmIGFycmF5LCBmaW5kIHRoZSBzdWJvYmplY3QgY29udGFpbmluZyB0aGUgYnl0ZVxyXG4gICAgLy8gICAgICAgICB0aGlzLmVsZW1PYmplY3RzWyhhZGRyIC0gdGhpcy5hZGRyZXNzKSAvIHRoaXMubm9uUmVmVHlwZS5lbGVtVHlwZS5zaXplXS5ieXRlU2V0KGFkZHIsIHZhbHVlKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZSBpZiAodGhpcy5pc0NsYXNzKXtcclxuICAgIC8vICAgICAgICAgdmFyIGFkID0gdGhpcy5hZGRyZXNzO1xyXG4gICAgLy8gICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJvYmplY3RzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAvLyAgICAgICAgICAgICB2YXIgbWVtID0gdGhpcy5zdWJvYmplY3RzW2ldO1xyXG4gICAgLy8gICAgICAgICAgICAgaWYoYWQgPSBhZCArIG1lbS50eXBlLnNpemUgPiBhZGRyKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICBtZW0uYnl0ZVNldChhZGRyLCB2YWx1ZSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgdGhpcy5zZW5kKFwiYnl0ZVNldFwiLCB7YWRkcjogYWRkciwgdmFsdWU6IHZhbHVlfSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfSxcclxuICAgIC8vIGJ5dGVzU2V0OiBmdW5jdGlvbihhZGRyLCB2YWx1ZXMpe1xyXG4gICAgLy8gICAgIHZhciBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xyXG4gICAgLy8gICAgIGlmICh0aGlzLmlzQXJyYXkpIHtcclxuICAgIC8vICAgICAgICAgdmFyIGJlZ2luSW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKCggYWRkciAtIHRoaXMuYWRkcmVzcyApIC8gdGhpcy5ub25SZWZUeXBlLmVsZW1UeXBlLnNpemUpKTtcclxuICAgIC8vICAgICAgICAgdmFyIGVuZEluZGV4ID0gTWF0aC5taW4oXHJcbiAgICAvLyAgICAgICAgICAgICBiZWdpbkluZGV4ICsgTWF0aC5jZWlsKGxlbmd0aCAvIHRoaXMubm9uUmVmVHlwZS5lbGVtVHlwZS5zaXplKSxcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMubm9uUmVmVHlwZS5sZW5ndGgpO1xyXG5cclxuICAgIC8vICAgICAgICAgZm9yICh2YXIgaSA9IGJlZ2luSW5kZXg7IGkgPCBlbmRJbmRleDsgKytpKSB7XHJcbiAgICAvLyAgICAgICAgICAgICB0aGlzLmVsZW1PYmplY3RzW2ldLmJ5dGVzU2V0KGFkZHIsIHZhbHVlcyk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZSBpZiAodGhpcy5pc0NsYXNzKXtcclxuICAgIC8vICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vib2JqZWN0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgLy8gICAgICAgICAgICAgdmFyIG1lbSA9IHRoaXMuc3Vib2JqZWN0c1tpXTtcclxuICAgIC8vICAgICAgICAgICAgIGlmKGFkZHIgPCBtZW0uYWRkcmVzcyArIG1lbS50eXBlLnNpemUgJiYgbWVtLmFkZHJlc3MgPCBhZGRyICsgbGVuZ3RoKXsgLy8gY2hlY2sgZm9yIG92ZXJsYXBcclxuICAgIC8vICAgICAgICAgICAgICAgICBtZW0uYnl0ZXNTZXQoYWRkciwgdmFsdWVzKTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIGVsc2UgaWYgKG1lbS5hZGRyZXNzID4gYWRkciArbGVuZ3RoKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICAvLyBicmVhayBpZiB3ZSBhcmUgbm93IGluIG1lbWJlcnMgcGFzdCBhZmZlY3RlZCBieXRlc1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuc2VuZChcImJ5dGVzU2V0XCIsIHthZGRyOiBhZGRyLCB2YWx1ZXM6IHZhbHVlc30pO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH0sXHJcbiAgICAvLyBieXRlV3JpdHRlbjogZnVuY3Rpb24oYWRkciwgdmFsdWUpe1xyXG4gICAgLy8gICAgIGlmICh0aGlzLmlzQXJyYXkpe1xyXG4gICAgLy8gICAgICAgICAvLyBJZiBhcnJheSwgZmluZCB0aGUgc3Vib2JqZWN0IGNvbnRhaW5pbmcgdGhlIGJ5dGVcclxuICAgIC8vICAgICAgICAgdGhpcy5lbGVtT2JqZWN0c1soYWRkciAtIHRoaXMuYWRkcmVzcykgLyB0aGlzLm5vblJlZlR5cGUuZWxlbVR5cGUuc2l6ZV0uYnl0ZVdyaXR0ZW4oYWRkciwgdmFsdWUpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBlbHNlIGlmICh0aGlzLmlzQ2xhc3Mpe1xyXG4gICAgLy8gICAgICAgICB2YXIgYWQgPSB0aGlzLmFkZHJlc3M7XHJcbiAgICAvLyAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLnN1Ym9iamVjdHMubGVuZ3RoOyArK2kpIHtcclxuICAgIC8vICAgICAgICAgICAgIHZhciBtZW0gPSB0aGlzLnN1Ym9iamVjdHNbaV07XHJcbiAgICAvLyAgICAgICAgICAgICBpZihhZCA9IGFkICsgbWVtLnR5cGUuc2l6ZSA+IGFkZHIpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIG1lbS5ieXRlV3JpdHRlbihhZGRyLCB2YWx1ZSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgdGhpcy5zZW5kKFwiYnl0ZVdyaXR0ZW5cIiwge2FkZHI6IGFkZHIsIHZhbHVlOiB2YWx1ZX0pO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH0sXHJcbiAgICAvLyBieXRlc1dyaXR0ZW46IGZ1bmN0aW9uKGFkZHIsIHZhbHVlcyl7XHJcbiAgICAvLyAgICAgdmFyIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XHJcbiAgICAvLyAgICAgaWYgKHRoaXMuaXNBcnJheSkge1xyXG4gICAgLy8gICAgICAgICB2YXIgYmVnaW5JbmRleCA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoKCBhZGRyIC0gdGhpcy5hZGRyZXNzICkgLyB0aGlzLm5vblJlZlR5cGUuZWxlbVR5cGUuc2l6ZSkpO1xyXG4gICAgLy8gICAgICAgICB2YXIgZW5kSW5kZXggPSBNYXRoLm1pbihcclxuICAgIC8vICAgICAgICAgICAgIGJlZ2luSW5kZXggKyBNYXRoLmNlaWwobGVuZ3RoIC8gdGhpcy5ub25SZWZUeXBlLmVsZW1UeXBlLnNpemUpLFxyXG4gICAgLy8gICAgICAgICAgICAgdGhpcy5ub25SZWZUeXBlLmxlbmd0aCk7XHJcblxyXG4gICAgLy8gICAgICAgICBmb3IgKHZhciBpID0gYmVnaW5JbmRleDsgaSA8IGVuZEluZGV4OyArK2kpIHtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuZWxlbU9iamVjdHNbaV0uYnl0ZXNXcml0dGVuKGFkZHIsIHZhbHVlcyk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZSBpZiAodGhpcy5pc0NsYXNzKXtcclxuICAgIC8vICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vib2JqZWN0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgLy8gICAgICAgICAgICAgdmFyIG1lbSA9IHRoaXMuc3Vib2JqZWN0c1tpXTtcclxuICAgIC8vICAgICAgICAgICAgIGlmKGFkZHIgPCBtZW0uYWRkcmVzcyArIG1lbS50eXBlLnNpemUgJiYgbWVtLmFkZHJlc3MgPCBhZGRyICsgbGVuZ3RoKXsgLy8gY2hlY2sgZm9yIG92ZXJsYXBcclxuICAgIC8vICAgICAgICAgICAgICAgICBtZW0uYnl0ZXNXcml0dGVuKGFkZHIsIHZhbHVlcyk7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICBlbHNlIGlmIChtZW0uYWRkcmVzcyA+IGFkZHIgK2xlbmd0aCl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgLy8gYnJlYWsgaWYgd2UgYXJlIG5vdyBpbiBtZW1iZXJzIHBhc3QgYWZmZWN0ZWQgYnl0ZXNcclxuICAgIC8vICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBlbHNle1xyXG4gICAgLy8gICAgICAgICB0aGlzLnNlbmQoXCJieXRlc1dyaXR0ZW5cIiwge2FkZHI6IGFkZHIsIHZhbHVlczogdmFsdWVzfSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfSxcclxuXHJcblxyXG4gICAgcHVibGljIGNhbGxSZWNlaXZlZCgpIHtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcImNhbGxSZWNlaXZlZFwiLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2FsbEVuZGVkKCkge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwiY2FsbEVuZGVkXCIsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRWYWxpZGl0eSh2YWxpZDogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSB2YWxpZDtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcInZhbGlkaXR5U2V0XCIsIHZhbGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgZGVzY3JpYmUoKSA6IERlc2NyaXB0aW9uO1xyXG5cclxufTtcclxuXHJcbi8vIFRPRE86IEtlcHQgc29tZSBvZiB0aGlzIGluIGEgY29tbWVudCBpbiBjYXNlIGl0J3MgaGVscGZ1bCB3aGVuIHJlaW50cm9kdWNpbmcgbGVhayBjaGVja2luZ1xyXG4vLyBleHBvcnQgY2xhc3MgRHluYW1pY09iamVjdCBleHRlbmRzIENQUE9iamVjdCB7XHJcbiAgICBcclxuLy8gICAgIHByaXZhdGUgaGFzQmVlbkxlYWtlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuLy8gICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0eXBlOiBPYmplY3RUeXBlLCBtZW1vcnk6IE1lbW9yeSwgYWRkcmVzczogbnVtYmVyKSB7XHJcbi8vICAgICAgICAgc3VwZXIodHlwZSwgbWVtb3J5LCBhZGRyZXNzKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XHJcbi8vICAgICAgICAgcmV0dXJuIFwiSGVhcCBvYmplY3QgYXQgXCIgKyB0aGlzLmFkZHJlc3MgKyBcIiAoXCIgKyB0aGlzLnR5cGUgKyBcIilcIjtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgbGVha2VkKHNpbTogU2ltdWxhdGlvbikge1xyXG4vLyAgICAgICAgIGlmICghdGhpcy5oYXNCZWVuTGVha2VkKXtcclxuLy8gICAgICAgICAgICAgdGhpcy5oYXNCZWVuTGVha2VkID0gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgc2ltLm1lbW9yeUxlYWtlZChcIk9oIG5vISBTb21lIG1lbW9yeSBqdXN0IGdvdCBsb3N0LiBJdCdzIGhpZ2hsaWdodGVkIGluIHJlZCBpbiB0aGUgbWVtb3J5IGRpc3BsYXkuXCIpXHJcbi8vICAgICAgICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwibGVha2VkXCIpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuXHJcbi8vICAgICAvLyBUT0RPOiBXaHkgZG9lcyB0aGlzIGV4aXN0PyBIb3cgZG9lcyBzb21ldGhpbmcgYmVjb21lIHVubGVha2VkPz9cclxuLy8gICAgIHB1YmxpYyB1bmxlYWtlZChzaW06IFNpbXVsYXRpb24pIHtcclxuLy8gICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcInVubGVha2VkXCIpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBkZXNjcmliZSgpIHtcclxuLy8gICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwidGhlIGhlYXAgb2JqZWN0IGF0IDB4XCIgKyB0aGlzLmFkZHJlc3N9O1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8gVE9ETzogcmVtb3ZlIHRoaXM/XHJcbi8vIGV4cG9ydCB2YXIgRXZhbHVhdGlvblJlc3VsdFJ1bnRpbWVFbnRpdHkgPSBDUFBPYmplY3QuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkV2YWx1YXRpb25SZXN1bHRSdW50aW1lRW50aXR5XCIsXHJcbi8vICAgICBzdG9yYWdlOiBcImF1dG9tYXRpY1wiLFxyXG4vLyAgICAgaW5pdDogZnVuY3Rpb24odHlwZSwgaW5zdCl7XHJcbi8vICAgICAgICAgdGhpcy5pbml0UGFyZW50KG51bGwsIHR5cGUpO1xyXG4vLyAgICAgICAgIHRoaXMuaW5zdCA9IGluc3Q7XHJcbi8vICAgICB9LFxyXG4vLyAgICAgaW5zdGFuY2VTdHJpbmcgOiBmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgIHJldHVybiB0aGlzLm5hbWUgKyBcIiAoXCIgKyB0aGlzLnR5cGUgKyBcIilcIjtcclxuLy8gICAgIH0sXHJcbi8vICAgICBydW50aW1lTG9va3VwIDogIGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuLy8gICAgICAgICByZXR1cm4gdGhpcy5pbnN0LmV2YWxSZXN1bHQucnVudGltZUxvb2t1cChzaW0sIGluc3QpO1xyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG4vLyBwdWJsaWMgc3RhdGljIGNyZWF0ZUF1dG9PYmplY3Q8VCBleHRlbmRzIE9iamVjdFR5cGU+KGVudGl0eTogQXV0b0VudGl0eTxUPiwgbWVtb3J5OiBNZW1vcnksIGFkZHJlc3M6IG51bWJlcikge1xyXG4vLyAgICAgcmV0dXJuIG5ldyBDUFBPYmplY3QoZW50aXR5LnR5cGUsIG1lbW9yeSwgYWRkcmVzcywgbmV3IEVudGl0eU9iamVjdERlc2NyaXB0b3IoZW50aXR5KSk7XHJcbi8vIH1cclxuXHJcbmV4cG9ydCBjbGFzcyBBdXRvT2JqZWN0PFQgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZT4gZXh0ZW5kcyBDUFBPYmplY3Q8VD4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBkZWY6IExvY2FsVmFyaWFibGVEZWZpbml0aW9uIHwgUGFyYW1ldGVyRGVmaW5pdGlvblxyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihkZWY6IExvY2FsVmFyaWFibGVEZWZpbml0aW9uIHwgUGFyYW1ldGVyRGVmaW5pdGlvbiwgdHlwZTogVCwgbWVtb3J5OiBNZW1vcnksIGFkZHJlc3M6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKHR5cGUsIG1lbW9yeSwgYWRkcmVzcyk7XHJcbiAgICAgICAgdGhpcy5kZWYgPSBkZWY7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlKCk6IERlc2NyaXB0aW9uIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZWYuZGVjbGFyZWRFbnRpdHkuZGVzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTWFpblJldHVybk9iamVjdCBleHRlbmRzIENQUE9iamVjdDxJbnQ+IHtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IobWVtb3J5OiBNZW1vcnkpIHtcclxuICAgICAgICBzdXBlcihJbnQuSU5ULCBtZW1vcnksIDApOyAvLyBIQUNLOiBwdXQgaXQgYXQgYWRkcmVzcyAwLiBwcm9iYWJseSB3b24ndCBjYXVzZSBhbnkgaXNzdWVzIHNpbmNlIGl0J3Mgbm90IGFsbG9jYXRlZFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZSgpOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcIlRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIG1haW4uXCJ9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhdGljT2JqZWN0PFQgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZT4gZXh0ZW5kcyBDUFBPYmplY3Q8VD4ge1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgZGVmOiBDb21waWxlZEdsb2JhbE9iamVjdERlZmluaXRpb24sIHR5cGU6IFQsIG1lbW9yeTogTWVtb3J5LCBhZGRyZXNzOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcih0eXBlLCBtZW1vcnksIGFkZHJlc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZSgpOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmLmRlY2xhcmVkRW50aXR5LmRlc2NyaWJlKCk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRHluYW1pY09iamVjdDxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgQ1BQT2JqZWN0PFQ+IHtcclxuXHJcbiAgICBwdWJsaWMgZGVzY3JpYmUoKTogRGVzY3JpcHRpb24ge1xyXG4gICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJ0aGUgaGVhcCBvYmplY3QgYXQgMHhcIiArIHRoaXMuYWRkcmVzc307XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSW52YWxpZE9iamVjdDxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgQ1BQT2JqZWN0PFQ+IHtcclxuXHJcbiAgICBwdWJsaWMgZGVzY3JpYmUoKTogRGVzY3JpcHRpb24ge1xyXG4gICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJhbiBpbnZhbGlkIG9iamVjdCBhdCAweFwiICsgdGhpcy5hZGRyZXNzfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRoaXNPYmplY3Q8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIENQUE9iamVjdDxUPiB7XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlKCk6IERlc2NyaXB0aW9uIHtcclxuICAgICAgICByZXR1cm4ge25hbWU6IFwidGhpc1wiLCBtZXNzYWdlOiBcInRoZSB0aGlzIHBvaW50ZXJcIn07XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3RyaW5nTGl0ZXJhbE9iamVjdCBleHRlbmRzIENQUE9iamVjdDxCb3VuZGVkQXJyYXlUeXBlPENoYXI+PiB7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHR5cGU6IEJvdW5kZWRBcnJheVR5cGU8Q2hhcj4sIG1lbW9yeTogTWVtb3J5LCBhZGRyZXNzOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcih0eXBlLCBtZW1vcnksIGFkZHJlc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXNjcmliZSgpOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcInN0cmluZyBsaXRlcmFsIGF0IDB4XCIgKyB0aGlzLmFkZHJlc3N9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5hYnN0cmFjdCBjbGFzcyBTdWJvYmplY3Q8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIENQUE9iamVjdDxUPiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRhaW5pbmdPYmplY3Q6IENQUE9iamVjdDxCb3VuZGVkQXJyYXlUeXBlIHwgQ2xhc3NUeXBlPjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmluZ09iamVjdDogQ1BQT2JqZWN0PEJvdW5kZWRBcnJheVR5cGUgfCBDbGFzc1R5cGU+LCB0eXBlOiBULCBtZW1vcnk6IE1lbW9yeSwgYWRkcmVzczogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIodHlwZSwgbWVtb3J5LCBhZGRyZXNzKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5pbmdPYmplY3QgPSBjb250YWluaW5nT2JqZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpc0FsaXZlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5pbmdPYmplY3QuaXNBbGl2ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGVhbGxvY2F0ZWRCeSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluaW5nT2JqZWN0LmRlYWxsb2NhdGVkQnk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uVmFsdWVTZXQod3JpdGU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAod3JpdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluaW5nT2JqZWN0LnN1Ym9iamVjdFZhbHVlV3JpdHRlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFycmF5U3Vib2JqZWN0PFQgZXh0ZW5kcyBBcnJheUVsZW1UeXBlID0gQXJyYXlFbGVtVHlwZT4gZXh0ZW5kcyBTdWJvYmplY3Q8VD4ge1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29udGFpbmluZ09iamVjdCE6IENQUE9iamVjdDxCb3VuZGVkQXJyYXlUeXBlPFQ+PjsgLy8gSGFuZGxlZCBieSBwYXJlbnQgKFRPRE86IGlzIHRoaXMgYSBnb29kIGlkZWE/KVxyXG4gICAgcHVibGljIHJlYWRvbmx5IGluZGV4OiBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGFyck9iajogQ1BQT2JqZWN0PEJvdW5kZWRBcnJheVR5cGU8VD4+LCBpbmRleDogbnVtYmVyLCBtZW1vcnk6IE1lbW9yeSwgYWRkcmVzczogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIoYXJyT2JqLCBhcnJPYmoudHlwZS5lbGVtVHlwZSwgbWVtb3J5LCBhZGRyZXNzKTtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFBvaW50ZXJUbygpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKHRoaXMuYWRkcmVzcywgbmV3IEFycmF5UG9pbnRlcih0aGlzLmNvbnRhaW5pbmdPYmplY3QpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZGVzY3JpYmUoKSB7XHJcbiAgICAgICAgdmFyIGFyckRlc2MgPSB0aGlzLmNvbnRhaW5pbmdPYmplY3QuZGVzY3JpYmUoKTtcclxuICAgICAgICB2YXIgZGVzYyA6IERlc2NyaXB0aW9uID0ge1xyXG4gICAgICAgICAgICBtZXNzYWdlOiBcImVsZW1lbnQgXCIgKyB0aGlzLmluZGV4ICsgXCIgb2YgXCIgKyBhcnJEZXNjLm1lc3NhZ2UsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoYXJyRGVzYy5uYW1lKXtcclxuICAgICAgICAgICAgZGVzYy5uYW1lID0gYXJyRGVzYy5uYW1lICsgXCJbXCIgKyB0aGlzLmluZGV4ICsgXCJdXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZXNjO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJhc2VTdWJvYmplY3QgZXh0ZW5kcyBTdWJvYmplY3Q8Q2xhc3NUeXBlPiB7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSBjb250YWluaW5nT2JqZWN0ITogQ1BQT2JqZWN0PENsYXNzVHlwZT47IC8vIEhhbmRsZWQgYnkgcGFyZW50IChUT0RPOiBpcyB0aGlzIGEgZ29vZCBpZGVhPylcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGFpbmluZ09iamVjdDogQ1BQT2JqZWN0PENsYXNzVHlwZT4sIHR5cGU6IENsYXNzVHlwZSwgbWVtb3J5OiBNZW1vcnksIGFkZHJlc3M6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKGNvbnRhaW5pbmdPYmplY3QsIHR5cGUsIG1lbW9yeSwgYWRkcmVzcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc2NyaWJlKCkgOiBEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcInRoZSBcIiArIHRoaXMudHlwZS5uYW1lICsgXCIgYmFzZSBvZiBcIiArIHRoaXMuY29udGFpbmluZ09iamVjdC5kZXNjcmliZSgpLm1lc3NhZ2V9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWVtYmVyU3Vib2JqZWN0PFQgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZT4gZXh0ZW5kcyBTdWJvYmplY3Q8VD4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBjb250YWluaW5nT2JqZWN0ITogQ1BQT2JqZWN0PENsYXNzVHlwZT47IC8vIEhhbmRsZWQgYnkgcGFyZW50IChUT0RPOiBpcyB0aGlzIGEgZ29vZCBpZGVhPylcclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRhaW5pbmdPYmplY3Q6IENQUE9iamVjdDxDbGFzc1R5cGU+LCB0eXBlOiBULCBuYW1lOiBzdHJpbmcsIG1lbW9yeTogTWVtb3J5LCBhZGRyZXNzOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihjb250YWluaW5nT2JqZWN0LCB0eXBlLCBtZW1vcnksIGFkZHJlc3MpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBkZXNjcmliZSgpIHtcclxuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5jb250YWluaW5nT2JqZWN0O1xyXG4gICAgICAgIGxldCBwYXJlbnREZXNjID0gcGFyZW50LmRlc2NyaWJlKCk7XHJcbiAgICAgICAgbGV0IGRlc2MgOiBEZXNjcmlwdGlvbiA9IHtcclxuICAgICAgICAgICAgbWVzc2FnZTogXCJ0aGUgbWVtYmVyIFwiICsgdGhpcy5uYW1lICsgXCIgb2YgXCIgKyBwYXJlbnREZXNjLm1lc3NhZ2VcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcmVudERlc2MubmFtZSl7XHJcbiAgICAgICAgICAgIGRlc2MubmFtZSA9IHBhcmVudERlc2MubmFtZSArIFwiLlwiICsgdGhpcy5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVzYztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8vIGV4cG9ydCB0eXBlIFRlbXBvcmFyeU9iamVjdFR5cGU8VCBleHRlbmRzIE9iamVjdFR5cGU+ID0gVCBleHRlbmRzIE9iamVjdFR5cGUgPyBUZW1wb3JhcnlPYmplY3Q8VD4gOiBuZXZlcjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUZW1wb3JhcnlPYmplY3Q8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIENQUE9iamVjdDxUPiB7XHJcblxyXG4gICAgcHJpdmF0ZSBuYW1lPzogc3RyaW5nO1xyXG5cclxuICAgIC8vIHB1YmxpYyBzdGF0aWMgY3JlYXRlPFQgZXh0ZW5kcyBPYmplY3RUeXBlPih0eXBlOiBULCBtZW1vcnk6IE1lbW9yeSwgYWRkcmVzczogbnVtYmVyLCBuYW1lPzogc3RyaW5nKSA6IFQgZXh0ZW5kcyBPYmplY3RUeXBlID8gVGVtcG9yYXJ5T2JqZWN0PFQ+IDogbmV2ZXIge1xyXG4gICAgLy8gICAgIHJldHVybiA8YW55PiBuZXcgVGVtcG9yYXJ5T2JqZWN0KHR5cGUsIG1lbW9yeSwgYWRkcmVzcywgbmFtZSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHR5cGU6IFQsIG1lbW9yeTogTWVtb3J5LCBhZGRyZXNzOiBudW1iZXIsIG5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcih0eXBlLCBtZW1vcnksIGFkZHJlc3MpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgLy8gdGhpcy5lbnRpdHlJZCA9IHRlbXBPYmpFbnRpdHkuZW50aXR5SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5hbWVTdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiQFwiICsgdGhpcy5hZGRyZXNzO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgZGVzY3JpYmUoKSA6IERlc2NyaXB0aW9ue1xyXG4gICAgICAgIHJldHVybiBuYW1lID8ge25hbWU6IHRoaXMubmFtZSwgbWVzc2FnZTogXCJ0aGUgdGVtcG9yYXJ5IG9iamVjdCBcIiArIHRoaXMubmFtZX0gOiB7bWVzc2FnZTogXCJhIHRlbXBvcmFyeSBvYmplY3RcIn07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBPYmplY3RUeXBlLCBUeXBlLCBBdG9taWNUeXBlLCBCb3VuZGVkQXJyYXlUeXBlLCBQb2ludGVyVHlwZSwgQXJyYXlQb2ludGVyLCBJbnQsIEJvb2wsIEludGVncmFsVHlwZSwgRmxvYXQsIERvdWJsZSwgRmxvYXRpbmdQb2ludFR5cGUsIHNpbWlsYXJUeXBlLCBpc1R5cGUsIHN1YlR5cGUsIHNhbWVUeXBlLCBpc0N2Q29udmVydGlibGUsIEFyaXRobWV0aWNUeXBlLCBBcnJheUVsZW1UeXBlIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgVmFsdWVDYXRlZ29yeSwgRXhwcmVzc2lvbiwgVHlwZWRFeHByZXNzaW9uLCBDb21waWxlZEV4cHJlc3Npb24sIFZDUmVzdWx0VHlwZXMsIFNpbXBsZVJ1bnRpbWVFeHByZXNzaW9uLCBSdW50aW1lRXhwcmVzc2lvbiwgTnVtZXJpY0xpdGVyYWwsIFNwZWNpZmljVHlwZWRFeHByZXNzaW9uIH0gZnJvbSBcIi4vZXhwcmVzc2lvbnNcIjtcclxuaW1wb3J0IHsgRGVzY3JpcHRpb24sIFN1Y2Nlc3NmdWxseUNvbXBpbGVkLCBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yLCBSdW50aW1lQ29uc3RydWN0IH0gZnJvbSBcIi4vY29uc3RydWN0c1wiO1xyXG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gXCIuL3J1bnRpbWVFbnZpcm9ubWVudFwiO1xyXG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiLi4vdXRpbC91dGlsXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW1wbGljaXRDb252ZXJzaW9uPEZyb21UeXBlIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGUsIEZyb21WQyBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPSBWYWx1ZUNhdGVnb3J5LCBUb1R5cGUgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZSwgVG9WQyBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPSBWYWx1ZUNhdGVnb3J5PiBleHRlbmRzIEV4cHJlc3Npb24ge1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZnJvbTogVHlwZWRFeHByZXNzaW9uPEZyb21UeXBlLCBGcm9tVkM+O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IFRvVHlwZTtcclxuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZUNhdGVnb3J5OiBUb1ZDO1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29udmVyc2lvbkxlbmd0aDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihmcm9tOiBUeXBlZEV4cHJlc3Npb248RnJvbVR5cGUsIEZyb21WQz4sIHRvVHlwZTogVG9UeXBlLCB2YWx1ZUNhdGVnb3J5OiBUb1ZDKSB7XHJcbiAgICAgICAgc3VwZXIoZnJvbS5jb250ZXh0KTtcclxuICAgICAgICB0aGlzLmF0dGFjaCh0aGlzLmZyb20gPSBmcm9tKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0b1R5cGU7XHJcbiAgICAgICAgdGhpcy52YWx1ZUNhdGVnb3J5ID0gdmFsdWVDYXRlZ29yeTtcclxuXHJcbiAgICAgICAgaWYgKGZyb20gaW5zdGFuY2VvZiBJbXBsaWNpdENvbnZlcnNpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uTGVuZ3RoID0gZnJvbS5jb252ZXJzaW9uTGVuZ3RoICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uTGVuZ3RoID0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPEZyb21UeXBlIGV4dGVuZHMgT2JqZWN0VHlwZSwgRnJvbVZDIGV4dGVuZHMgVmFsdWVDYXRlZ29yeSwgVG9UeXBlIGV4dGVuZHMgT2JqZWN0VHlwZSwgVG9WQyBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+KHRoaXM6IENvbXBpbGVkSW1wbGljaXRDb252ZXJzaW9uPEZyb21UeXBlLCBGcm9tVkMsIFRvVHlwZSwgVG9WQz4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lSW1wbGljaXRDb252ZXJzaW9uPEZyb21UeXBlLCBGcm9tVkMsIFRvVHlwZSwgVG9WQz47XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUV4cHJlc3Npb248VCBleHRlbmRzIFR5cGUsIFYgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5Pih0aGlzOiBDb21waWxlZEV4cHJlc3Npb248VCxWPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IG5ldmVyO1xyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uPEZyb21UeXBlIGV4dGVuZHMgT2JqZWN0VHlwZSwgRnJvbVZDIGV4dGVuZHMgVmFsdWVDYXRlZ29yeSwgVG9UeXBlIGV4dGVuZHMgT2JqZWN0VHlwZSwgVG9WQyBleHRlbmRzIFZhbHVlQ2F0ZWdvcnk+KHRoaXM6IENvbXBpbGVkSW1wbGljaXRDb252ZXJzaW9uPEZyb21UeXBlLCBGcm9tVkMsIFRvVHlwZSwgVG9WQz4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lSW1wbGljaXRDb252ZXJzaW9uPEZyb21UeXBlLCBGcm9tVkMsIFRvVHlwZSwgVG9WQz4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUnVudGltZUltcGxpY2l0Q29udmVyc2lvbih0aGlzLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBvcGVyYXRlKGZyb21FdmFsUmVzdWx0OiBWQ1Jlc3VsdFR5cGVzPEZyb21UeXBlLCBGcm9tVkM+KSA6IFZDUmVzdWx0VHlwZXM8VG9UeXBlLCBUb1ZDPjtcclxuXHJcbiAgICBcclxuICAgIHB1YmxpYyBkZXNjcmliZUV2YWxSZXN1bHQoZGVwdGg6IG51bWJlcik6IERlc2NyaXB0aW9uIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZEltcGxpY2l0Q29udmVyc2lvbjxGcm9tVHlwZSBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlLCBGcm9tVkMgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gVmFsdWVDYXRlZ29yeSwgVG9UeXBlIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGUsIFRvVkMgZXh0ZW5kcyBWYWx1ZUNhdGVnb3J5ID0gVmFsdWVDYXRlZ29yeT4gZXh0ZW5kcyBJbXBsaWNpdENvbnZlcnNpb248RnJvbVR5cGUsIEZyb21WQywgVG9UeXBlLCBUb1ZDPiwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG4gICAgXHJcbiAgICByZWFkb25seSBmcm9tOiBDb21waWxlZEV4cHJlc3Npb248RnJvbVR5cGUsIEZyb21WQz47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lSW1wbGljaXRDb252ZXJzaW9uPEZyb21UeXBlIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGUsIEZyb21WQyBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPSBWYWx1ZUNhdGVnb3J5LCBUb1R5cGUgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZSwgVG9WQyBleHRlbmRzIFZhbHVlQ2F0ZWdvcnkgPSBWYWx1ZUNhdGVnb3J5PlxyXG4gICAgZXh0ZW5kcyBTaW1wbGVSdW50aW1lRXhwcmVzc2lvbjxUb1R5cGUsIFRvVkMsIENvbXBpbGVkSW1wbGljaXRDb252ZXJzaW9uPEZyb21UeXBlLCBGcm9tVkMsIFRvVHlwZSwgVG9WQz4+IHtcclxuICAgICAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSBmcm9tOiBSdW50aW1lRXhwcmVzc2lvbjxGcm9tVHlwZSwgRnJvbVZDPjtcclxuICAgIFxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG1vZGVsOiBDb21waWxlZEltcGxpY2l0Q29udmVyc2lvbjxGcm9tVHlwZSwgRnJvbVZDLCBUb1R5cGUsIFRvVkM+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuICAgICAgICB0aGlzLmZyb20gPSB0aGlzLm1vZGVsLmZyb20uY3JlYXRlUnVudGltZUV4cHJlc3Npb24odGhpcyk7XHJcbiAgICAgICAgdGhpcy5zZXRTdWJleHByZXNzaW9ucyhbdGhpcy5mcm9tXSk7XHJcbiAgICB9XHJcbiAgICAgICAgXHJcbiAgICBwcm90ZWN0ZWQgb3BlcmF0ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldEV2YWxSZXN1bHQodGhpcy5tb2RlbC5vcGVyYXRlKHRoaXMuZnJvbS5ldmFsUmVzdWx0KSk7XHJcbiAgICB9XHJcbiAgICAvLyBpc1RhaWxDaGlsZCA6IGZ1bmN0aW9uKGNoaWxkKXtcclxuICAgIC8vICAgICByZXR1cm4ge2lzVGFpbDogZmFsc2UsXHJcbiAgICAvLyAgICAgICAgIHJlYXNvbjogXCJBbiBpbXBsaWNpdCBjb252ZXJzaW9uIChcIiArICh0aGlzLmVuZ2xpc2hOYW1lIHx8IHRoaXMuX25hbWUpICsgXCIpIHRha2VzIHBsYWNlIGFmdGVyIHRoZSBmdW5jdGlvbiBjYWxsIHJldHVybnMuXCJcclxuICAgIC8vICAgICB9O1xyXG4gICAgLy8gfVxyXG5cclxufVxyXG5cclxuXHJcbi8vIFR5cGUgMSBDb252ZXJzaW9uc1xyXG4vLyBMVmFsdWVUb1JWYWx1ZSwgQXJyYXlUb1BvaW50ZXIsIEZ1bmN0aW9uVG9Qb2ludGVyXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIExWYWx1ZVRvUlZhbHVlPFQgZXh0ZW5kcyBBdG9taWNUeXBlPiBleHRlbmRzIEltcGxpY2l0Q29udmVyc2lvbjxULCBcImx2YWx1ZVwiLCBULCBcInBydmFsdWVcIj4ge1xyXG4gICAgXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZnJvbTogVHlwZWRFeHByZXNzaW9uPFQsIFwibHZhbHVlXCI+KSB7XHJcbiAgICAgICAgc3VwZXIoZnJvbSwgZnJvbS50eXBlLmN2VW5xdWFsaWZpZWQoKSwgXCJwcnZhbHVlXCIpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgb3BlcmF0ZShmcm9tRXZhbFJlc3VsdDogVkNSZXN1bHRUeXBlczxULCBcImx2YWx1ZVwiPikge1xyXG4gICAgICAgIHJldHVybiA8VkNSZXN1bHRUeXBlczxULCBcInBydmFsdWVcIj4+ZnJvbUV2YWxSZXN1bHQuZ2V0VmFsdWUoKTsgLy8gQ2FzdCB0ZWNobmljYWxseSBuZWNlc3NhcnkgaGVyZVxyXG4gICAgICAgIC8vIFRPRE86IGFkZCBhbGVydCBpZiB2YWx1ZSBpcyBpbnZhbGlkXHJcbiAgICAgICAgLy8gZS5nLiBpbnN0LnNldEV2YWxSZXN1bHQocmVhZFZhbHVlV2l0aEFsZXJ0KGV2YWxWYWx1ZSwgc2ltLCB0aGlzLmZyb20sIGluc3QuY2hpbGRJbnN0YW5jZXMuZnJvbSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRlc2NyaWJlRXZhbFJlc3VsdCA6IGZ1bmN0aW9uKGRlcHRoLCBzaW0sIGluc3Qpe1xyXG4gICAgLy8gICAgIGlmIChpbnN0ICYmIGluc3QuZXZhbFJlc3VsdCl7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBpbnN0LmV2YWxSZXN1bHQuZGVzY3JpYmUoKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZSBpZiAoZGVwdGggPT0gMCl7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJ0aGUgdmFsdWUgb2YgXCIgKyB0aGlzLmdldFNvdXJjZVRleHQoKX07XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJ0aGUgdmFsdWUgb2YgXCIgKyB0aGlzLmZyb20uZGVzY3JpYmVFdmFsUmVzdWx0KGRlcHRoLTEsc2ltLCBpbnN0ICYmIGluc3QuY2hpbGRJbnN0YW5jZXMgJiYgaW5zdC5jaGlsZEluc3RhbmNlcy5mcm9tKS5tZXNzYWdlfTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIGV4cGxhaW4gOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuICAgIC8vICAgICByZXR1cm4ge21lc3NhZ2U6IFwiVGhlIHZhbHVlIG9mIFwiICsgdGhpcy5mcm9tLmRlc2NyaWJlRXZhbFJlc3VsdCgwLCBzaW0sIGluc3QgJiYgaW5zdC5jaGlsZEluc3RhbmNlcyAmJiBpbnN0LmNoaWxkSW5zdGFuY2VzLmZyb20pLm1lc3NhZ2UgKyBcIiB3aWxsIGJlIGxvb2tlZCB1cC5cIn07XHJcbiAgICAvLyB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQXJyYXlUb1BvaW50ZXI8VCBleHRlbmRzIEJvdW5kZWRBcnJheVR5cGU+IGV4dGVuZHMgSW1wbGljaXRDb252ZXJzaW9uPFQsIFwibHZhbHVlXCIsIFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj4ge1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihmcm9tOiBUeXBlZEV4cHJlc3Npb248VCwgXCJsdmFsdWVcIj4pIHtcclxuICAgICAgICBzdXBlcihmcm9tLCBmcm9tLnR5cGUuYWRqdXN0VG9Qb2ludGVyVHlwZSgpLCBcInBydmFsdWVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9wZXJhdGUoZnJvbUV2YWxSZXN1bHQ6IFZDUmVzdWx0VHlwZXM8Qm91bmRlZEFycmF5VHlwZSwgXCJsdmFsdWVcIj4pIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZyb21FdmFsUmVzdWx0LmFkZHJlc3MsIG5ldyBBcnJheVBvaW50ZXIoZnJvbUV2YWxSZXN1bHQpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBleHBsYWluIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbiAgICAvLyAgICAgcmV0dXJuIHttZXNzYWdlOiBcIkluIHRoaXMgY2FzZSAoYW5kIG1vc3Qgb3RoZXJzKSwgdXNpbmcgdGhlIG5hbWUgb2YgYW4gYXJyYXkgaW4gYW4gZXhwcmVzc2lvbiB3aWxsIHlpZWxkIGEgdGhlIGFkZHJlc3Mgb2YgaXRzIGZpcnN0IGVsZW1lbnQuIFRoYXQncyB3aGF0IGhhcHBlbnMgaGVyZS5cIn07XHJcbiAgICAvLyB9XHJcbn1cclxuXHJcblxyXG5cclxuLy8gZXhwb3J0IHZhciBGdW5jdGlvblRvUG9pbnRlciA9IEltcGxpY2l0Q29udmVyc2lvbi5leHRlbmQoe1xyXG4vLyAgICAgX25hbWU6IFwiRnVuY3Rpb25Ub1BvaW50ZXJcIixcclxuLy8gICAgIGluaXQ6IGZ1bmN0aW9uKGZyb20pe1xyXG4vLyAgICAgICAgIGFzc2VydChpc0EoZnJvbS50eXBlLCBUeXBlcy5GdW5jdGlvbikpO1xyXG4vLyAgICAgICAgIHRoaXMuaW5pdFBhcmVudChmcm9tLCBUeXBlcy5Qb2ludGVyLmluc3RhbmNlKGZyb20udHlwZSksIFwicHJ2YWx1ZVwiKTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgb3BlcmF0ZSA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgIHZhciBmdW5jID0gaW5zdC5jaGlsZEluc3RhbmNlcy5mcm9tLmV2YWxSZXN1bHQ7XHJcbi8vICAgICAgICAgaW5zdC5zZXRFdmFsUmVzdWx0KFZhbHVlLmluc3RhbmNlKGZ1bmMsIHRoaXMudHlwZSkpO1xyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBleHBsYWluIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcIlVzaW5nIHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gaW4gYW4gZXhwcmVzc2lvbiB3aWxsIHlpZWxkIGEgcG9pbnRlciB0byB0aGF0IGZ1bmN0aW9uLlwifTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyBUeXBlIDIgQ29udmVyc2lvbnNcclxuXHJcbi8qKlxyXG4gKiBBbGwgdHlwZSBjb252ZXJzaW9ucyBpZ25vcmUgY3YtcXVhbGlmaWNhdGlvbnMgb24gdGhlIGdpdmVuIGRlc3RpbmF0aW9uIHR5cGUuIEluc3RlYWQsXHJcbiAqIHRoZSBjb252ZXJ0ZWQgdHlwZSByZXRhaW5zIHRoZSBjdi1xdWFsaWZpY2F0aW9ucyBvZiB0aGUgc291cmNlIHR5cGUuXHJcbiAqL1xyXG5hYnN0cmFjdCBjbGFzcyBUeXBlQ29udmVyc2lvbjxGcm9tVHlwZSBleHRlbmRzIEF0b21pY1R5cGUsIFRvVHlwZSBleHRlbmRzIEF0b21pY1R5cGU+XHJcbiAgICBleHRlbmRzIEltcGxpY2l0Q29udmVyc2lvbjxGcm9tVHlwZSwgXCJwcnZhbHVlXCIsIFRvVHlwZSwgXCJwcnZhbHVlXCI+IHtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZnJvbTogVHlwZWRFeHByZXNzaW9uPEZyb21UeXBlLCBcInBydmFsdWVcIj4sIHRvVHlwZTogVG9UeXBlKSB7XHJcbiAgICAgICAgc3VwZXIoZnJvbSwgdG9UeXBlLmN2UXVhbGlmaWVkKGZyb20udHlwZS5pc0NvbnN0LCBmcm9tLnR5cGUuaXNWb2xhdGlsZSksIFwicHJ2YWx1ZVwiKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmNsYXNzIE5vT3BUeXBlQ29udmVyc2lvbjxGcm9tVHlwZSBleHRlbmRzIEF0b21pY1R5cGUsIFRvVHlwZSBleHRlbmRzIEF0b21pY1R5cGU+XHJcbiAgICBleHRlbmRzIFR5cGVDb252ZXJzaW9uPEZyb21UeXBlLCBUb1R5cGU+IHtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZnJvbTogVHlwZWRFeHByZXNzaW9uPEZyb21UeXBlLCBcInBydmFsdWVcIj4sIHRvVHlwZTogVG9UeXBlKSB7XHJcbiAgICAgICAgc3VwZXIoZnJvbSwgdG9UeXBlKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIG9wZXJhdGUoZnJvbUV2YWxSZXN1bHQ6IFZDUmVzdWx0VHlwZXM8RnJvbVR5cGUsIFwicHJ2YWx1ZVwiPikge1xyXG4gICAgICAgIHJldHVybiA8VkNSZXN1bHRUeXBlczxUb1R5cGUsIFwicHJ2YWx1ZVwiPj5uZXcgVmFsdWUoZnJvbUV2YWxSZXN1bHQucmF3VmFsdWUsIHRoaXMudHlwZSk7IC8vIENhc3QgdGVjaG5pY2FsbHkgbmVjZXNzYXJ5IGhlcmVcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE51bGxQb2ludGVyQ29udmVyc2lvbjxQIGV4dGVuZHMgUG9pbnRlclR5cGU+IGV4dGVuZHMgTm9PcFR5cGVDb252ZXJzaW9uPEludCwgUD4ge1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihmcm9tOiBOdW1lcmljTGl0ZXJhbDxJbnQ+LCB0b1R5cGU6IFApIHtcclxuICAgICAgICBzdXBlcihmcm9tLCB0b1R5cGUpO1xyXG4gICAgICAgIGFzc2VydChmcm9tLnZhbHVlLnJhd1ZhbHVlID09PSAwKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQb2ludGVyQ29udmVyc2lvbjxGcm9tVHlwZSBleHRlbmRzIFBvaW50ZXJUeXBlLCBUb1R5cGUgZXh0ZW5kcyBQb2ludGVyVHlwZT4gZXh0ZW5kcyBOb09wVHlwZUNvbnZlcnNpb248RnJvbVR5cGUsIFRvVHlwZT4ge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBvaW50ZXJUb0Jvb2xlYW5Db252ZXJzaW9uIGV4dGVuZHMgTm9PcFR5cGVDb252ZXJzaW9uPFBvaW50ZXJUeXBlLCBCb29sPiB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZnJvbTogVHlwZWRFeHByZXNzaW9uPFBvaW50ZXJUeXBlLCBcInBydmFsdWVcIj4pIHtcclxuICAgICAgICBzdXBlcihmcm9tLCBCb29sLkJPT0wpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSW50ZWdyYWxQcm9tb3Rpb248RnJvbVR5cGUgZXh0ZW5kcyBJbnRlZ3JhbFR5cGUsIFRvVHlwZSBleHRlbmRzIEludGVncmFsVHlwZT4gZXh0ZW5kcyBOb09wVHlwZUNvbnZlcnNpb248RnJvbVR5cGUsIFRvVHlwZT4ge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEludGVncmFsQ29udmVyc2lvbjxGcm9tVHlwZSBleHRlbmRzIEludGVncmFsVHlwZSwgVG9UeXBlIGV4dGVuZHMgSW50ZWdyYWxUeXBlPiBleHRlbmRzIE5vT3BUeXBlQ29udmVyc2lvbjxGcm9tVHlwZSwgVG9UeXBlPiB7XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEZsb2F0aW5nUG9pbnRQcm9tb3Rpb24gZXh0ZW5kcyBOb09wVHlwZUNvbnZlcnNpb248RmxvYXQsIERvdWJsZT4ge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGZyb206IFR5cGVkRXhwcmVzc2lvbjxGbG9hdCwgXCJwcnZhbHVlXCI+KSB7XHJcbiAgICAgICAgc3VwZXIoZnJvbSwgRG91YmxlLkRPVUJMRSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGbG9hdGluZ1BvaW50Q29udmVyc2lvbjxGcm9tVHlwZSBleHRlbmRzIEZsb2F0aW5nUG9pbnRUeXBlLCBUb1R5cGUgZXh0ZW5kcyBGbG9hdGluZ1BvaW50VHlwZT4gZXh0ZW5kcyBOb09wVHlwZUNvbnZlcnNpb248RnJvbVR5cGUsIFRvVHlwZT4ge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEludGVncmFsVG9GbG9hdGluZ0NvbnZlcnNpb248RnJvbVR5cGUgZXh0ZW5kcyBJbnRlZ3JhbFR5cGUsIFRvVHlwZSBleHRlbmRzIEZsb2F0aW5nUG9pbnRUeXBlPiBleHRlbmRzIE5vT3BUeXBlQ29udmVyc2lvbjxGcm9tVHlwZSwgVG9UeXBlPiB7XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEZsb2F0aW5nVG9JbnRlZ3JhbENvbnZlcnNpb248VCBleHRlbmRzIEZsb2F0aW5nUG9pbnRUeXBlPiBleHRlbmRzIFR5cGVDb252ZXJzaW9uPFQsIEludGVncmFsVHlwZT4ge1xyXG5cclxuICAgIHB1YmxpYyBvcGVyYXRlKGZyb21FdmFsUmVzdWx0OiBWQ1Jlc3VsdFR5cGVzPFQsIFwicHJ2YWx1ZVwiPikge1xyXG4gICAgICAgIGlmICh0aGlzLnR5cGUuaXNUeXBlKEJvb2wpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVmFsdWUoZnJvbUV2YWxSZXN1bHQucmF3VmFsdWUgPT09IDAgPyAwIDogMSwgSW50LklOVCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgVmFsdWUoTWF0aC50cnVuYyhmcm9tRXZhbFJlc3VsdC5yYXdWYWx1ZSksIEludC5JTlQpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8vIFRPRE86IHJlbW92ZSB0aGlzLiBubyBsb25nZXIgbmVlZGVkIG5vdyB0aGF0IHdlIGhhdmUgcmVhbCBzdHJpbmdzXHJcbi8vIFN0cmluZ1RvQ1N0cmluZ0NvbnZlcnNpb24gPSBJbXBsaWNpdENvbnZlcnNpb24uZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIlN0cmluZ1RvQ1N0cmluZ0NvbnZlcnNpb25cIixcclxuLy8gICAgIGluaXQ6IGZ1bmN0aW9uKGZyb20sIHRvVHlwZSl7XHJcbi8vICAgICAgICAgYXNzZXJ0KGZyb20udmFsdWVDYXRlZ29yeSA9PT0gXCJwcnZhbHVlXCIpO1xyXG4vLyAgICAgICAgIGFzc2VydChpc0EoZnJvbS50eXBlLCBUeXBlcy5TdHJpbmcpKTtcclxuLy8gICAgICAgICBhc3NlcnQoaXNBKHRvVHlwZSwgVHlwZXMuQXJyYXkpICYmIGlzQSh0b1R5cGUuZWxlbVR5cGUsIFR5cGVzLkNoYXIpKTtcclxuLy8gICAgICAgICB0aGlzLmluaXRQYXJlbnQoZnJvbSwgdG9UeXBlLCBcInBydmFsdWVcIik7XHJcbi8vICAgICB9LFxyXG4vL1xyXG4vLyAgICAgb3BlcmF0ZSA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgIC8vIEkgdGhpbmsgb25seSB0aGluZyBJIHJlYWxseSBuZWVkIGhlcmUgaXMgdG8gaGFuZGxlIGJvb2xlYW5zIGdyYWNlZnVsbHlcclxuLy8gICAgICAgICAvLyBBZGRpbmcgMC4wIHNob3VsZCBkbyB0aGUgdHJpY2suXHJcbi8vICAgICAgICAgdmFyIGNzdHIgPSBpbnN0LmNoaWxkSW5zdGFuY2VzLmZyb20uZXZhbFJlc3VsdC52YWx1ZTtcclxuLy8gICAgICAgICBpbnN0LnNldEV2YWxSZXN1bHQoVmFsdWUuaW5zdGFuY2UoY3N0ci5zcGxpdChcIlwiKSwgVHlwZXMuU3RyaW5nKSk7XHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG5cclxuLy8gUXVhbGlmaWNhdGlvbiBjb252ZXJzaW9uc1xyXG5cclxuZXhwb3J0IGNsYXNzIFF1YWxpZmljYXRpb25Db252ZXJzaW9uPFQgZXh0ZW5kcyBBdG9taWNUeXBlPiBleHRlbmRzIEltcGxpY2l0Q29udmVyc2lvbjxULCBcInBydmFsdWVcIiwgVCwgXCJwcnZhbHVlXCI+IHtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZnJvbTogVHlwZWRFeHByZXNzaW9uPFQsIFwicHJ2YWx1ZVwiPiwgdG9UeXBlOiBUKSB7XHJcbiAgICAgICAgc3VwZXIoZnJvbSwgdG9UeXBlLCBcInBydmFsdWVcIik7XHJcbiAgICAgICAgYXNzZXJ0KHNpbWlsYXJUeXBlKGZyb20udHlwZSwgdG9UeXBlKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBvcGVyYXRlKGZyb21FdmFsUmVzdWx0OiBWQ1Jlc3VsdFR5cGVzPFQsIFwicHJ2YWx1ZVwiPikge1xyXG4gICAgICAgIHJldHVybiA8VkNSZXN1bHRUeXBlczxULCBcInBydmFsdWVcIj4+bmV3IFZhbHVlKGZyb21FdmFsUmVzdWx0LnJhd1ZhbHVlLCB0aGlzLnR5cGUpOyAvLyBDYXN0IHRlY2huaWNhbGx5IG5lY2Vzc2FyeSBoZXJlXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9QUlZhbHVlPFQgZXh0ZW5kcyBBdG9taWNUeXBlPihmcm9tOiBTcGVjaWZpY1R5cGVkRXhwcmVzc2lvbjxUPikgOiBUeXBlZEV4cHJlc3Npb248VCwgXCJwcnZhbHVlXCI+O1xyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvUFJWYWx1ZTxFbGVtX3R5cGUgZXh0ZW5kcyBBcnJheUVsZW1UeXBlPihmcm9tOiBUeXBlZEV4cHJlc3Npb248Qm91bmRlZEFycmF5VHlwZTxFbGVtX3R5cGU+LCBcImx2YWx1ZVwiPikgOiBUeXBlZEV4cHJlc3Npb248UG9pbnRlclR5cGU8RWxlbV90eXBlPiwgXCJwcnZhbHVlXCI+O1xyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvUFJWYWx1ZShmcm9tOiBTcGVjaWZpY1R5cGVkRXhwcmVzc2lvbjxBdG9taWNUeXBlPiB8IFR5cGVkRXhwcmVzc2lvbjxCb3VuZGVkQXJyYXlUeXBlLCBcImx2YWx1ZVwiPikgOiBUeXBlZEV4cHJlc3Npb248QXRvbWljVHlwZSwgXCJwcnZhbHVlXCI+O1xyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvUFJWYWx1ZShmcm9tOiBUeXBlZEV4cHJlc3Npb24pIDogVHlwZWRFeHByZXNzaW9uO1xyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRvUFJWYWx1ZShmcm9tOiBUeXBlZEV4cHJlc3Npb24pIHtcclxuXHJcbiAgICBpZiAoZnJvbS5pc0JvdW5kZWRBcnJheVR5cGVkKCkpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEFycmF5VG9Qb2ludGVyKGZyb20pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghZnJvbS5pc0F0b21pY1R5cGVkKCkpIHtcclxuICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBiYXNlZCBvbiB1bmlvbiBpbnB1dCB0eXBlLCBpdCBtdXN0IGJlIGF0b21pYyB0eXBlZCBpZiB3ZSBnZXQgdG8gaGVyZVxyXG5cclxuICAgIGlmIChmcm9tLmlzUHJ2YWx1ZSgpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZyb207XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIG11c3QgYmUgYW4gbHZhbHVlIGlmIHdlIGdldCB0byBoZXJlXHJcblxyXG5cclxuICAgIC8vIFRPRE86IGFkZCBiYWNrIGluIGZvciBmdW5jdGlvbiBwb2ludGVyc1xyXG4gICAgLy8gaWYgKGZyb20udHlwZSBpbnN0YW5jZW9mIEZ1bmN0aW9uVHlwZSkge1xyXG4gICAgLy8gICAgIHJldHVybiBuZXcgRnVuY3Rpb25Ub1BvaW50ZXIoZnJvbSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBMVmFsdWVUb1JWYWx1ZShmcm9tKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0eXBlQ29udmVyc2lvbihmcm9tOiBUeXBlZEV4cHJlc3Npb248UG9pbnRlclR5cGUsIFwicHJ2YWx1ZVwiPiwgdG9UeXBlOiBCb29sKSA6IFR5cGVkRXhwcmVzc2lvbjxCb29sLCBcInBydmFsdWVcIj47XHJcbmV4cG9ydCBmdW5jdGlvbiB0eXBlQ29udmVyc2lvbihmcm9tOiBUeXBlZEV4cHJlc3Npb248RG91YmxlLCBcInBydmFsdWVcIj4sIHRvVHlwZTogRmxvYXQpIDogVHlwZWRFeHByZXNzaW9uPEZsb2F0LCBcInBydmFsdWVcIj47XHJcbmV4cG9ydCBmdW5jdGlvbiB0eXBlQ29udmVyc2lvbihmcm9tOiBUeXBlZEV4cHJlc3Npb248SW50ZWdyYWxUeXBlLCBcInBydmFsdWVcIj4sIHRvVHlwZTogSW50ZWdyYWxUeXBlKSA6IFR5cGVkRXhwcmVzc2lvbjxJbnRlZ3JhbFR5cGUsIFwicHJ2YWx1ZVwiPjtcclxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVDb252ZXJzaW9uKGZyb206IFR5cGVkRXhwcmVzc2lvbjxGbG9hdGluZ1BvaW50VHlwZSwgXCJwcnZhbHVlXCI+LCB0b1R5cGU6IEludGVncmFsVHlwZSkgOiBUeXBlZEV4cHJlc3Npb248SW50ZWdyYWxUeXBlLCBcInBydmFsdWVcIj47XHJcbmV4cG9ydCBmdW5jdGlvbiB0eXBlQ29udmVyc2lvbihmcm9tOiBUeXBlZEV4cHJlc3Npb248SW50ZWdyYWxUeXBlLCBcInBydmFsdWVcIj4sIHRvVHlwZTogRmxvYXRpbmdQb2ludFR5cGUpIDogVHlwZWRFeHByZXNzaW9uPEZsb2F0aW5nUG9pbnRUeXBlLCBcInBydmFsdWVcIj47XHJcbmV4cG9ydCBmdW5jdGlvbiB0eXBlQ29udmVyc2lvbihmcm9tOiBUeXBlZEV4cHJlc3Npb248RmxvYXRpbmdQb2ludFR5cGUsIFwicHJ2YWx1ZVwiPiwgdG9UeXBlOiBGbG9hdGluZ1BvaW50VHlwZSkgOiBUeXBlZEV4cHJlc3Npb248RmxvYXRpbmdQb2ludFR5cGUsIFwicHJ2YWx1ZVwiPjtcclxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVDb252ZXJzaW9uPFNpbWlsYXJUeXBlIGV4dGVuZHMgQXRvbWljVHlwZT4oZnJvbTogVHlwZWRFeHByZXNzaW9uPFNpbWlsYXJUeXBlLCBcInBydmFsdWVcIj4sIHRvVHlwZTogU2ltaWxhclR5cGUpIDogVHlwZWRFeHByZXNzaW9uPFNpbWlsYXJUeXBlLCBcInBydmFsdWVcIj47XHJcbmV4cG9ydCBmdW5jdGlvbiB0eXBlQ29udmVyc2lvbjxGcm9tVHlwZSBleHRlbmRzIEF0b21pY1R5cGUsIFRvVHlwZSBleHRlbmRzIEF0b21pY1R5cGU+KGZyb206IFR5cGVkRXhwcmVzc2lvbjxGcm9tVHlwZSwgXCJwcnZhbHVlXCI+LCB0b1R5cGU6IFRvVHlwZSkgOiBUeXBlZEV4cHJlc3Npb248RnJvbVR5cGUsIFwicHJ2YWx1ZVwiPiB8IFR5cGVkRXhwcmVzc2lvbjxUb1R5cGUsIFwicHJ2YWx1ZVwiPjtcclxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVDb252ZXJzaW9uKGZyb206IFR5cGVkRXhwcmVzc2lvbjxBdG9taWNUeXBlLCBcInBydmFsdWVcIj4sIHRvVHlwZTogQXRvbWljVHlwZSkge1xyXG5cclxuICAgIGlmIChzaW1pbGFyVHlwZShmcm9tLnR5cGUsIHRvVHlwZSkpIHtcclxuICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodG9UeXBlLmlzUG9pbnRlclR5cGUoKSAmJiAoZnJvbSBpbnN0YW5jZW9mIE51bWVyaWNMaXRlcmFsKSAmJiBpc1R5cGUoZnJvbS50eXBlLCBJbnQpICYmIGZyb20udmFsdWUucmF3VmFsdWUgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gbmV3IE51bGxQb2ludGVyQ29udmVyc2lvbihmcm9tLCB0b1R5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0b1R5cGUuaXNQb2ludGVyVHlwZSgpICYmIHRvVHlwZS5wdHJUby5pc0NsYXNzVHlwZSgpICYmXHJcbiAgICAgICAgZnJvbS5pc1BvaW50ZXJUeXBlZCgpICYmIGZyb20udHlwZS5wdHJUby5pc0NsYXNzVHlwZSgpICYmXHJcbiAgICAgICAgc3ViVHlwZShmcm9tLnR5cGUucHRyVG8sIHRvVHlwZS5wdHJUbykpIHtcclxuICAgICAgICAvLyBOb3RlIHRoYXQgY3YgcXVhbGlmaWNhdGlvbnMgb24gdGhlIG5ldyBkZXN0aW5hdGlvbiBwb2ludGVyIHR5cGUgZG9uJ3QgbmVlZCB0byBiZSBzZXQsIHNpbmNlXHJcbiAgICAgICAgLy8gdGhleSBhcmUgaWdub3JlZCBieSB0aGUgUG9pbnRlckNvbnZlcnNpb24gYW55d2F5ICh0aGUgc291cmNlIHR5cGUncyBjdiBxdWFsaWZpY2F0aW9ucyBhcmUgc2V0KS5cclxuICAgICAgICAvLyBIb3dldmVyLCB3ZSBkbyBuZWVkIHRvIHByZXNlcnZlIHRoZSBjdi1xdWFsaWZpY2F0aW9ucyBvbiB0aGUgcG9pbnRlZC10byB0eXBlLlxyXG4gICAgICAgIHJldHVybiBuZXcgUG9pbnRlckNvbnZlcnNpb24oZnJvbSwgbmV3IFBvaW50ZXJUeXBlKHRvVHlwZS5wdHJUby5jdlF1YWxpZmllZChmcm9tLnR5cGUucHRyVG8uaXNDb25zdCwgZnJvbS50eXBlLnB0clRvLmlzVm9sYXRpbGUpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRvVHlwZS5pc1R5cGUoQm9vbCkgJiYgZnJvbS5pc1BvaW50ZXJUeXBlZCgpKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludGVyVG9Cb29sZWFuQ29udmVyc2lvbihmcm9tKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodG9UeXBlLmlzVHlwZShEb3VibGUpICYmIGZyb20uaXNUeXBlZChGbG9hdCkpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0aW5nUG9pbnRQcm9tb3Rpb24oZnJvbSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRvVHlwZS5pc0ludGVncmFsVHlwZSgpKSB7XHJcbiAgICAgICAgaWYgKGZyb20uaXNJbnRlZ3JhbFR5cGVkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRlZ3JhbENvbnZlcnNpb24oZnJvbSwgdG9UeXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZyb20uaXNGbG9hdGluZ1BvaW50VHlwZWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0aW5nVG9JbnRlZ3JhbENvbnZlcnNpb24oZnJvbSwgdG9UeXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRvVHlwZS5pc0Zsb2F0aW5nUG9pbnRUeXBlKCkpIHtcclxuICAgICAgICBpZiAoZnJvbS5pc0ludGVncmFsVHlwZWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGVncmFsVG9GbG9hdGluZ0NvbnZlcnNpb24oZnJvbSwgdG9UeXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZyb20uaXNGbG9hdGluZ1BvaW50VHlwZWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0aW5nUG9pbnRDb252ZXJzaW9uKGZyb20sIHRvVHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmcm9tO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHF1YWxpZmljYXRpb25Db252ZXJzaW9uKGZyb206IFR5cGVkRXhwcmVzc2lvbjxBdG9taWNUeXBlLCBcInBydmFsdWVcIj4sIHRvVHlwZTogQXRvbWljVHlwZSkge1xyXG5cclxuICAgIGlmIChzYW1lVHlwZShmcm9tLnR5cGUsIHRvVHlwZSkpIHtcclxuICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZnJvbS52YWx1ZUNhdGVnb3J5ID09PSBcInBydmFsdWVcIiAmJiBpc0N2Q29udmVydGlibGUoZnJvbS50eXBlLCB0b1R5cGUpKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBRdWFsaWZpY2F0aW9uQ29udmVyc2lvbihmcm9tLCB0b1R5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmcm9tO1xyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdGFuZGFyZENvbnZlcnNpb25PcHRpb25zIHtcclxuICAgIHJlYWRvbmx5IHN1cHByZXNzTFRSPzogdHJ1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEF0dGVtcHRzIHRvIGdlbmVyYXRlIGEgc3RhbmRhcmQgY29udmVyc2lvbiBzZXF1ZW5jZSBvZiB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB0byB0aGUgZ2l2ZW5cclxuICogZGVzdGluYXRpb24gdHlwZS4gXHJcbiAqIEBwYXJhbSBmcm9tIFRoZSBvcmlnaW5hbCBleHByZXNzaW9uXHJcbiAqIEBwYXJhbSB0b1R5cGUgVGhlIGRlc3RpbmF0aW9uIHR5cGVcclxuICogQHBhcmFtIG9wdGlvbnMgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RhbmRhcmRDb252ZXJzaW9uKGZyb206IFR5cGVkRXhwcmVzc2lvbiwgdG9UeXBlOiBUeXBlLCBvcHRpb25zOiBTdGFuZGFyZENvbnZlcnNpb25PcHRpb25zID0ge30pIHtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuICAgIC8vIFVubGVzcyB0aGUgb2JqZWN0IGlzIGF0b21pYyB0eXBlZCBvciBpcyBhbiBhcnJheSwgTG9ic3RlciBjdXJyZW50bHkgZG9lc24ndCBzdXBwb3J0XHJcbiAgICAvLyBhbnkgc3RhbmRhcmQgY29udmVyc2lvbnMuIE5vdGUgaW4gcGFydGljdWxhciB0aGlzIG1lYW5zIHVzZXItZGVmaW5lZCBjb252ZXJpc29uIGZ1bmN0aW9uc1xyXG4gICAgLy8gZm9yIGNsYXNzLXR5cGVkIG9iamVjdHMgYXJlIG5vdCBzdXBwb3J0ZWQuXHJcbiAgICBpZiAoIShmcm9tLmlzQXRvbWljVHlwZWQoKSB8fCBmcm9tLmlzQm91bmRlZEFycmF5VHlwZWQoKSkpIHtcclxuICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRvVHlwZS5pc0F0b21pY1R5cGUoKSkge1xyXG4gICAgICAgIHJldHVybiBmcm9tO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghb3B0aW9ucy5zdXBwcmVzc0xUUikge1xyXG4gICAgICAgIGxldCBmcm9tUHJ2YWx1ZSA9IGNvbnZlcnRUb1BSVmFsdWUoZnJvbSk7XHJcbiAgICAgICAgZnJvbVBydmFsdWUgPSB0eXBlQ29udmVyc2lvbihmcm9tUHJ2YWx1ZSwgdG9UeXBlKTtcclxuICAgICAgICBmcm9tUHJ2YWx1ZSA9IHF1YWxpZmljYXRpb25Db252ZXJzaW9uKGZyb21QcnZhbHVlLCB0b1R5cGUpO1xyXG4gICAgICAgIHJldHVybiBmcm9tUHJ2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZnJvbTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnRlZ3JhbFByb21vdGlvbihleHByOiBUeXBlZEV4cHJlc3Npb248SW50ZWdyYWxUeXBlLCBcInBydmFsdWVcIj4pIHtcclxuICAgIGlmIChleHByLmlzSW50ZWdyYWxUeXBlZCgpICYmICFleHByLmlzVHlwZWQoSW50KSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgSW50ZWdyYWxQcm9tb3Rpb24oZXhwciwgSW50LklOVCk7XHJcbiAgICB9XHJcbiAgICBlbHNle1xyXG4gICAgICAgIHJldHVybiBleHByO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzdWFsQXJpdGhtZXRpY0NvbnZlcnNpb25zKGxlZnRPcmlnOiBTcGVjaWZpY1R5cGVkRXhwcmVzc2lvbjxBcml0aG1ldGljVHlwZT4sIHJpZ2h0T3JpZzogU3BlY2lmaWNUeXBlZEV4cHJlc3Npb248QXJpdGhtZXRpY1R5cGU+KSB7XHJcbiAgICBcclxuICAgIGxldCBsZWZ0ID0gY29udmVydFRvUFJWYWx1ZShsZWZ0T3JpZyk7XHJcbiAgICBsZXQgcmlnaHQgPSBjb252ZXJ0VG9QUlZhbHVlKHJpZ2h0T3JpZyk7XHJcblxyXG4gICAgLy8gVE9ETyBJZiBlaXRoZXIgaGFzIHNjb3BlZCBlbnVtZXJhdGlvbiB0eXBlLCBubyBjb252ZXJzaW9ucyBhcmUgcGVyZm9ybWVkXHJcblxyXG4gICAgLy8gVE9ETyBJZiBlaXRoZXIgaXMgbG9uZyBkb3VibGUsIHRoZSBvdGhlciBzaGFsbCBiZSBjb252ZXJ0ZWQgdG8gbG9uZyBkb3VibGVcclxuXHJcbiAgICAvLyBJZiBlaXRoZXIgaXMgZG91YmxlLCB0aGUgb3RoZXIgc2hhbGwgYmUgY29udmVydGVkIHRvIGRvdWJsZVxyXG4gICAgaWYgKGxlZnQuaXNUeXBlZChEb3VibGUpKSB7XHJcbiAgICAgICAgcmlnaHQgPSB0eXBlQ29udmVyc2lvbihyaWdodCwgRG91YmxlLkRPVUJMRSk7XHJcbiAgICAgICAgcmV0dXJuIFtsZWZ0LCByaWdodF07XHJcbiAgICB9XHJcbiAgICBpZiAocmlnaHQuaXNUeXBlZChEb3VibGUpKSB7XHJcbiAgICAgICAgbGVmdCA9IHR5cGVDb252ZXJzaW9uKGxlZnQsIERvdWJsZS5ET1VCTEUpO1xyXG4gICAgICAgIHJldHVybiBbbGVmdCwgcmlnaHRdO1xyXG4gICAgfVxyXG4gICAgLy8gSWYgZWl0aGVyIGlzIGZsb2F0LCB0aGUgb3RoZXIgc2hhbGwgYmUgY29udmVydGVkIHRvIGZsb2F0XHJcblxyXG4gICAgaWYgKGxlZnQuaXNUeXBlZChGbG9hdCkpIHtcclxuICAgICAgICByaWdodCA9IHR5cGVDb252ZXJzaW9uKHJpZ2h0LCBGbG9hdC5GTE9BVCk7XHJcbiAgICAgICAgcmV0dXJuIFtsZWZ0LCByaWdodF07XHJcbiAgICB9XHJcbiAgICBpZiAocmlnaHQuaXNUeXBlZChGbG9hdCkpIHtcclxuICAgICAgICBsZWZ0ID0gdHlwZUNvbnZlcnNpb24obGVmdCwgRmxvYXQuRkxPQVQpO1xyXG4gICAgICAgIHJldHVybiBbbGVmdCwgcmlnaHRdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE90aGVyd2lzZSwgZG8gaW50ZWdyYWwgcHJvbW90aW9uc1xyXG4gICAgaWYgKGxlZnQuaXNJbnRlZ3JhbFR5cGVkKCkpIHtcclxuICAgICAgICBsZWZ0ID0gaW50ZWdyYWxQcm9tb3Rpb24obGVmdCk7XHJcbiAgICB9XHJcbiAgICBpZiAocmlnaHQuaXNJbnRlZ3JhbFR5cGVkKCkpIHtcclxuICAgICAgICByaWdodCA9IGludGVncmFsUHJvbW90aW9uKHJpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBib3RoIG9wZXJhbmRzIGhhdmUgdGhlIHNhbWUgdHlwZSwgbm8gZnVydGhlciBjb252ZXJzaW9uIGlzIG5lZWRlZFxyXG4gICAgaWYgKHNhbWVUeXBlKGxlZnQudHlwZSwgcmlnaHQudHlwZSkpe1xyXG4gICAgICAgIHJldHVybiBbbGVmdCwgcmlnaHRdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE86IE90aGVyd2lzZSwgaWYgYm90aCBvcGVyYW5kcyBoYXZlIHNpZ25lZCBvciBib3RoIGhhdmUgdW5zaWduZWQgdHlwZXMsXHJcbiAgICAvLyBvcGVyYW5kIHdpdGggdHlwZSBvZiBsZXNzZXIgaW50ZWdlciBjb252ZXJzaW9uIHJhbmsgc2hhbGwgYmUgY29udmVydGVkXHJcbiAgICAvLyB0byB0aGUgdHlwZSBvZiB0aGUgb3BlcmFuZCB3aXRoIGdyZWF0ZXIgcmFua1xyXG4gICAgcmV0dXJuIFtsZWZ0LCByaWdodF07XHJcbn1cclxuXHJcbiIsImltcG9ydCB7IEFTVE5vZGUsIFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uLCBTdWNjZXNzZnVsbHlDb21waWxlZCwgUnVudGltZVBvdGVudGlhbEZ1bGxFeHByZXNzaW9uLCBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCBSdW50aW1lQ29uc3RydWN0LCBDUFBDb25zdHJ1Y3QsIENvbXBpbGVkVGVtcG9yYXJ5RGVhbGxvY2F0b3IgfSBmcm9tIFwiLi9jb25zdHJ1Y3RzXCI7XHJcbmltcG9ydCB7IEV4cHJlc3Npb25BU1ROb2RlLCBFeHByZXNzaW9uLCBDb21waWxlZEV4cHJlc3Npb24sIFJ1bnRpbWVFeHByZXNzaW9uLCBWQ1Jlc3VsdFR5cGVzIH0gZnJvbSBcIi4vZXhwcmVzc2lvbnNcIjtcclxuaW1wb3J0IHsgT2JqZWN0RW50aXR5LCBVbmJvdW5kUmVmZXJlbmNlRW50aXR5LCBBcnJheVN1Ym9iamVjdEVudGl0eSB9IGZyb20gXCIuL2VudGl0aWVzXCI7XHJcbmltcG9ydCB7IE9iamVjdFR5cGUsIEF0b21pY1R5cGUsIEJvdW5kZWRBcnJheVR5cGUsIHJlZmVyZW5jZUNvbXBhdGlibGUsIHNhbWVUeXBlIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgYXNzZXJ0RmFsc2UgfSBmcm9tIFwiLi4vdXRpbC91dGlsXCI7XHJcbmltcG9ydCB7IENQUEVycm9yIH0gZnJvbSBcIi4vZXJyb3JzXCI7XHJcbmltcG9ydCB7IFNpbXVsYXRpb24gfSBmcm9tIFwiLi9TaW11bGF0aW9uXCI7XHJcbmltcG9ydCB7IENQUE9iamVjdCB9IGZyb20gXCIuL29iamVjdHNcIjtcclxuaW1wb3J0IHsgc3RhbmRhcmRDb252ZXJzaW9uIH0gZnJvbSBcIi4vc3RhbmRhcmRDb252ZXJzaW9uc1wiO1xyXG5cclxuZXhwb3J0IHR5cGUgSW5pdGlhbGl6ZXJBU1ROb2RlID0gRGlyZWN0SW5pdGlhbGl6ZXJBU1ROb2RlIHwgQ29weUluaXRpYWxpemVyQVNUTm9kZTtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJbml0aWFsaXplciBleHRlbmRzIFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHtcclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdGFyZ2V0OiBPYmplY3RFbnRpdHkgfCBVbmJvdW5kUmVmZXJlbmNlRW50aXR5O1xyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBjcmVhdGVSdW50aW1lSW5pdGlhbGl6ZXIocGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVJbml0aWFsaXplcjtcclxuXHJcbiAgICBwdWJsaWMgaXNUYWlsQ2hpbGQoY2hpbGQ6IENQUENvbnN0cnVjdCkge1xyXG4gICAgICAgIHJldHVybiB7aXNUYWlsOiB0cnVlfTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRJbml0aWFsaXplcjxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgSW5pdGlhbGl6ZXIsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuICAgIHJlYWRvbmx5IHRlbXBvcmFyeURlYWxsb2NhdG9yPzogQ29tcGlsZWRUZW1wb3JhcnlEZWFsbG9jYXRvcjsgLy8gdG8gbWF0Y2ggQ29tcGlsZWRQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbiBzdHJ1Y3R1cmVcclxuICAgIHJlYWRvbmx5IHRhcmdldDogT2JqZWN0RW50aXR5PFQ+IHwgVW5ib3VuZFJlZmVyZW5jZUVudGl0eTxUPjtcclxufSBcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSdW50aW1lSW5pdGlhbGl6ZXI8QyBleHRlbmRzIENvbXBpbGVkSW5pdGlhbGl6ZXIgPSBDb21waWxlZEluaXRpYWxpemVyPiBleHRlbmRzIFJ1bnRpbWVQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbjxDPiB7XHJcblxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yIChtb2RlbDogQywgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIFwiaW5pdGlhbGl6ZXJcIiwgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGVmYXVsdEluaXRpYWxpemVyIGV4dGVuZHMgSW5pdGlhbGl6ZXIge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHRhcmdldDogVW5ib3VuZFJlZmVyZW5jZUVudGl0eSkgOiBSZWZlcmVuY2VEZWZhdWx0SW5pdGlhbGl6ZXI7XHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCB0YXJnZXQ6IE9iamVjdEVudGl0eTxBdG9taWNUeXBlPikgOiBBdG9taWNEZWZhdWx0SW5pdGlhbGl6ZXI7XHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCB0YXJnZXQ6IE9iamVjdEVudGl0eTxCb3VuZGVkQXJyYXlUeXBlPikgOiBBcnJheURlZmF1bHRJbml0aWFsaXplcjtcclxuICAgIC8vIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHRhcmdldDogT2JqZWN0RW50aXR5PENsYXNzVHlwZT4pIDogQ2xhc3NEZWZhdWx0SW5pdGlhbGl6ZXI7XHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCB0YXJnZXQ6IE9iamVjdEVudGl0eTxPYmplY3RUeXBlPikgOiBEZWZhdWx0SW5pdGlhbGl6ZXI7XHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCB0YXJnZXQ6IE9iamVjdEVudGl0eSB8IFVuYm91bmRSZWZlcmVuY2VFbnRpdHkpIDogRGVmYXVsdEluaXRpYWxpemVyIHtcclxuICAgICAgICBpZiAoKDxVbmJvdW5kUmVmZXJlbmNlRW50aXR5PnRhcmdldCkuYmluZFRvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVmZXJlbmNlRGVmYXVsdEluaXRpYWxpemVyKGNvbnRleHQsIDxVbmJvdW5kUmVmZXJlbmNlRW50aXR5PiB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0YXJnZXQudHlwZSBpbnN0YW5jZW9mIEF0b21pY1R5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBdG9taWNEZWZhdWx0SW5pdGlhbGl6ZXIoY29udGV4dCwgPE9iamVjdEVudGl0eTxBdG9taWNUeXBlPj4gdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGFyZ2V0LnR5cGUgaW5zdGFuY2VvZiBCb3VuZGVkQXJyYXlUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXlEZWZhdWx0SW5pdGlhbGl6ZXIoY29udGV4dCwgPE9iamVjdEVudGl0eTxCb3VuZGVkQXJyYXlUeXBlPj4gdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZWxzZSBpZiAodGFyZ2V0LnR5cGUgaW5zdGFuY2VvZiBDbGFzc1R5cGUpIHtcclxuICAgICAgICAvLyAgICAgcmV0dXJuIG5ldyBDbGFzc0RlZmF1bHRJbml0aWFsaXplcihjb250ZXh0LCA8T2JqZWN0RW50aXR5PENsYXNzVHlwZT4+IHRhcmdldCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBhc3NlcnRGYWxzZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgY3JlYXRlUnVudGltZUluaXRpYWxpemVyPFQgZXh0ZW5kcyBPYmplY3RUeXBlPih0aGlzOiBDb21waWxlZERlZmF1bHRJbml0aWFsaXplcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVEZWZhdWx0SW5pdGlhbGl6ZXI8VD47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWREZWZhdWx0SW5pdGlhbGl6ZXI8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIERlZmF1bHRJbml0aWFsaXplciwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG4gICAgcmVhZG9ubHkgdGFyZ2V0OiBPYmplY3RFbnRpdHk8VD47XHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSdW50aW1lRGVmYXVsdEluaXRpYWxpemVyPFQgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZSwgQyBleHRlbmRzIENvbXBpbGVkRGVmYXVsdEluaXRpYWxpemVyPFQ+ID0gQ29tcGlsZWREZWZhdWx0SW5pdGlhbGl6ZXI8VD4+IGV4dGVuZHMgUnVudGltZUluaXRpYWxpemVyPEM+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IgKG1vZGVsOiBDLCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlZmVyZW5jZURlZmF1bHRJbml0aWFsaXplciBleHRlbmRzIERlZmF1bHRJbml0aWFsaXplciB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHRhcmdldDogVW5ib3VuZFJlZmVyZW5jZUVudGl0eTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgdGFyZ2V0OiBVbmJvdW5kUmVmZXJlbmNlRW50aXR5KSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcblxyXG4gICAgICAgIC8vIENhbm5vdCBkZWZhdWx0IGluaXRpYWxpemUgYSByZWZlcmVuY2VcclxuICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uaW5pdC5yZWZlcmVuY2VCaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUluaXRpYWxpemVyKHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBuZXZlciB7XHJcbiAgICAgICAgcmV0dXJuIGFzc2VydEZhbHNlKFwiQSBkZWZhdWx0IGluaXRpYWxpemVyIGZvciBhIHJlZmVyZW5jZSBpcyBub3QgYWxsb3dlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGV4cGxhaW4oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCkgOiBuZXZlciB7XHJcbiAgICAgICAgcmV0dXJuIGFzc2VydEZhbHNlKFwiQSBkZWZhdWx0IGluaXRpYWxpemVyIGZvciBhIHJlZmVyZW5jZSBpcyBub3QgYWxsb3dlZC5cIik7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIE5vdGU6IE5vIENvbXBpbGVkUmVmZXJlbmNlRGVmYXVsdEluaXRpYWxpemVyIG9yIFJ1bnRpbWVSZWZlcmVuY2VEZWZhdWx0SW5pdGlhbGl6ZXIgY2xhc3NlcyBzaW5jZVxyXG4vLyAgICAgICBkZWZhdWx0IGluaXRpYWxpemF0aW9uIG9mIGEgcmVmZXJlbmNlIGlzIGFsd2F5cyBpbGwtZm9ybWVkLlxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBBdG9taWNEZWZhdWx0SW5pdGlhbGl6ZXIgZXh0ZW5kcyBEZWZhdWx0SW5pdGlhbGl6ZXIge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSB0YXJnZXQ6IE9iamVjdEVudGl0eTxBdG9taWNUeXBlPjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgdGFyZ2V0OiBPYmplY3RFbnRpdHk8QXRvbWljVHlwZT4pIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUluaXRpYWxpemVyPFQgZXh0ZW5kcyBBdG9taWNUeXBlPih0aGlzOiBDb21waWxlZEF0b21pY0RlZmF1bHRJbml0aWFsaXplcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVBdG9taWNEZWZhdWx0SW5pdGlhbGl6ZXI8VD47XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUluaXRpYWxpemVyPFQgZXh0ZW5kcyBPYmplY3RUeXBlPih0aGlzOiBDb21waWxlZERlZmF1bHRJbml0aWFsaXplcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IG5ldmVyO1xyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVJbml0aWFsaXplcjxUIGV4dGVuZHMgQXRvbWljVHlwZT4odGhpczogQ29tcGlsZWRBdG9taWNEZWZhdWx0SW5pdGlhbGl6ZXI8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lQXRvbWljRGVmYXVsdEluaXRpYWxpemVyPFQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVBdG9taWNEZWZhdWx0SW5pdGlhbGl6ZXIodGhpcywgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZXhwbGFpbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgbGV0IHRhcmdldERlc2MgPSB0aGlzLnRhcmdldC5kZXNjcmliZSgpO1xyXG4gICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJObyBpbml0aWFsaXphdGlvbiB3aWxsIHRha2UgcGxhY2UuIFwiICsgKHRhcmdldERlc2MubmFtZSB8fCB0YXJnZXREZXNjLm1lc3NhZ2UpICsgXCIgd2lsbCBoYXZlIGEganVuayB2YWx1ZS5cIn07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRBdG9taWNEZWZhdWx0SW5pdGlhbGl6ZXI8VCBleHRlbmRzIEF0b21pY1R5cGUgPSBBdG9taWNUeXBlPiBleHRlbmRzIEF0b21pY0RlZmF1bHRJbml0aWFsaXplciwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG4gICAgcmVhZG9ubHkgdGFyZ2V0OiBPYmplY3RFbnRpdHk8VD47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lQXRvbWljRGVmYXVsdEluaXRpYWxpemVyPFQgZXh0ZW5kcyBBdG9taWNUeXBlID0gQXRvbWljVHlwZT4gZXh0ZW5kcyBSdW50aW1lRGVmYXVsdEluaXRpYWxpemVyPFQsIENvbXBpbGVkQXRvbWljRGVmYXVsdEluaXRpYWxpemVyPFQ+PiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHRhcmdldDogQ1BQT2JqZWN0PFQ+O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IENvbXBpbGVkQXRvbWljRGVmYXVsdEluaXRpYWxpemVyPFQ+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMubW9kZWwudGFyZ2V0LnJ1bnRpbWVMb29rdXAodGhpcyk7XHJcbiAgICB9XHJcblx0XHJcbiAgICBwcm90ZWN0ZWQgdXBOZXh0SW1wbCgpIHtcclxuICAgICAgICAvLyBObyBpbml0aWFsaXphdGlvbi4gT2JqZWN0IGhhcyBqdW5rIHZhbHVlLlxyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwiaW5pdGlhbGl6ZWRcIiwgdGhpcy50YXJnZXQpO1xyXG4gICAgICAgIHRoaXMuc2ltLnBvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGVwRm9yd2FyZEltcGwoKSB7XHJcbiAgICAgICAgLy8gZG8gbm90aGluZ1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQXJyYXlEZWZhdWx0SW5pdGlhbGl6ZXIgZXh0ZW5kcyBEZWZhdWx0SW5pdGlhbGl6ZXIge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSB0YXJnZXQ6IE9iamVjdEVudGl0eTxCb3VuZGVkQXJyYXlUeXBlPjtcclxuICAgIHB1YmxpYyByZWFkb25seSBlbGVtZW50SW5pdGlhbGl6ZXJzPzogRGVmYXVsdEluaXRpYWxpemVyW107XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHRhcmdldDogT2JqZWN0RW50aXR5PEJvdW5kZWRBcnJheVR5cGU+KSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcblxyXG4gICAgICAgIC8vIElmIGl0J3MgYW4gYXJyYXkgb2YgYXRvbWljIHR5cGVzLCBkbyBub3RoaW5nLlxyXG4gICAgICAgIGxldCB0eXBlID0gdGhpcy50YXJnZXQudHlwZTtcclxuICAgICAgICBpZiAodHlwZS5lbGVtVHlwZSBpbnN0YW5jZW9mIEF0b21pY1R5cGUpIHtcclxuICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50SW5pdGlhbGl6ZXJzID0gW107XHJcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aDsgKytpKXtcclxuICAgICAgICAgICAgICAgIGxldCBlbGVtSW5pdCA9IERlZmF1bHRJbml0aWFsaXplci5jcmVhdGUoY29udGV4dCwgbmV3IEFycmF5U3Vib2JqZWN0RW50aXR5KHRoaXMudGFyZ2V0LCBpKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRJbml0aWFsaXplcnMucHVzaChlbGVtSW5pdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaChlbGVtSW5pdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbUluaXQuaGFzRXJyb3JzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmluaXQuYXJyYXlfZGVmYXVsdF9pbml0KHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVJbml0aWFsaXplcjxUIGV4dGVuZHMgQm91bmRlZEFycmF5VHlwZT4odGhpczogQ29tcGlsZWRBcnJheURlZmF1bHRJbml0aWFsaXplcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVBcnJheURlZmF1bHRJbml0aWFsaXplcjxUPjtcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lSW5pdGlhbGl6ZXI8VCBleHRlbmRzIE9iamVjdFR5cGU+KHRoaXM6IENvbXBpbGVkRGVmYXVsdEluaXRpYWxpemVyPFQ+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogbmV2ZXI7XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUluaXRpYWxpemVyPFQgZXh0ZW5kcyBCb3VuZGVkQXJyYXlUeXBlPih0aGlzOiBDb21waWxlZEFycmF5RGVmYXVsdEluaXRpYWxpemVyPFQ+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogUnVudGltZUFycmF5RGVmYXVsdEluaXRpYWxpemVyPFQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVBcnJheURlZmF1bHRJbml0aWFsaXplcih0aGlzLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBleHBsYWluKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBsZXQgdGFyZ2V0RGVzYyA9IHRoaXMudGFyZ2V0LmRlc2NyaWJlKCk7XHJcbiAgICAgICAgbGV0IHRhcmdldFR5cGUgPSB0aGlzLnRhcmdldC50eXBlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0YXJnZXRUeXBlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwiTm8gaW5pdGlhbGl6YXRpb24gaXMgcGVyZm9ybWVkIGZvciBcIiArICh0YXJnZXREZXNjLm5hbWUgfHwgdGFyZ2V0RGVzYy5tZXNzYWdlKSArIFwiYmVjYXVzZSB0aGUgYXJyYXkgaGFzIGxlbmd0aCAwLlwifTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGFyZ2V0VHlwZS5lbGVtVHlwZSBpbnN0YW5jZW9mIEF0b21pY1R5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcIk5vIGluaXRpYWxpemF0aW9uIHdpbGwgdGFrZSBwbGFjZS4gVGhlIGVsZW1lbnRzIG9mIFwiICsgKHRhcmdldERlc2MubmFtZSB8fCB0YXJnZXREZXNjLm1lc3NhZ2UpICsgXCIgd2lsbCBoYXZlIGp1bmsgdmFsdWVzLlwiIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4ge21lc3NhZ2U6IFwiRWFjaCBlbGVtZW50IG9mIFwiICsgKHRhcmdldERlc2MubmFtZSB8fCB0YXJnZXREZXNjLm1lc3NhZ2UpICsgXCIgd2lsbCBiZSBkZWZhdWx0LWluaXRpYWxpemVkLiBGb3IgZXhhbXBsZSwgXCIgK1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50SW5pdGlhbGl6ZXJzIVswXS5leHBsYWluKHNpbSwgcnRDb25zdHJ1Y3QpIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZEFycmF5RGVmYXVsdEluaXRpYWxpemVyPFQgZXh0ZW5kcyBCb3VuZGVkQXJyYXlUeXBlID0gQm91bmRlZEFycmF5VHlwZT4gZXh0ZW5kcyBBcnJheURlZmF1bHRJbml0aWFsaXplciwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG4gICAgcmVhZG9ubHkgdGFyZ2V0OiBPYmplY3RFbnRpdHk8VD47XHJcbiAgICByZWFkb25seSBlbGVtZW50SW5pdGlhbGl6ZXJzPzogQ29tcGlsZWREZWZhdWx0SW5pdGlhbGl6ZXI8VFtcImVsZW1UeXBlXCJdPltdO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUnVudGltZUFycmF5RGVmYXVsdEluaXRpYWxpemVyPFQgZXh0ZW5kcyBCb3VuZGVkQXJyYXlUeXBlID0gQm91bmRlZEFycmF5VHlwZT4gZXh0ZW5kcyBSdW50aW1lRGVmYXVsdEluaXRpYWxpemVyPFQsIENvbXBpbGVkQXJyYXlEZWZhdWx0SW5pdGlhbGl6ZXI8VD4+IHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0OiBDUFBPYmplY3Q8VD47XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZWxlbWVudEluaXRpYWxpemVycz86IFJ1bnRpbWVEZWZhdWx0SW5pdGlhbGl6ZXI8VFtcImVsZW1UeXBlXCJdPltdO1xyXG5cclxuICAgIHByaXZhdGUgaW5kZXggPSAwO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IENvbXBpbGVkQXJyYXlEZWZhdWx0SW5pdGlhbGl6ZXI8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsLCBwYXJlbnQpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5tb2RlbC50YXJnZXQucnVudGltZUxvb2t1cCh0aGlzKTtcclxuICAgICAgICBpZiAodGhpcy5tb2RlbC5lbGVtZW50SW5pdGlhbGl6ZXJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudEluaXRpYWxpemVycyA9IHRoaXMubW9kZWwuZWxlbWVudEluaXRpYWxpemVycy5tYXAoKGVsZW1Jbml0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbUluaXQuY3JlYXRlUnVudGltZUluaXRpYWxpemVyKHRoaXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblx0XHJcbiAgICBwcm90ZWN0ZWQgdXBOZXh0SW1wbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50SW5pdGlhbGl6ZXJzICYmIHRoaXMuaW5kZXggPCB0aGlzLmVsZW1lbnRJbml0aWFsaXplcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2ltLnB1c2godGhpcy5lbGVtZW50SW5pdGlhbGl6ZXJzW3RoaXMuaW5kZXgrK10pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcImluaXRpYWxpemVkXCIsIHRoaXMudGFyZ2V0KTtcclxuICAgICAgICAgICAgdGhpcy5zaW0ucG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGVwRm9yd2FyZEltcGwoKSB7XHJcbiAgICAgICAgLy8gZG8gbm90aGluZ1xyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBDbGFzc0RlZmF1bHRJbml0aWFsaXplciBleHRlbmRzIERlZmF1bHRJbml0aWFsaXplciB7XHJcblxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IHRhcmdldDogT2JqZWN0RW50aXR5PENsYXNzVHlwZT47XHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgY3RvcjogQ29uc3RydWN0b3JFbnRpdHk/O1xyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IGN0b3JDYWxsOiBNZW1iZXJGdW5jdGlvbkNhbGw/O1xyXG5cclxuLy8gICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCB0YXJnZXQ6IE9iamVjdEVudGl0eTxDbGFzc1R5cGU+KSB7XHJcbi8vICAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcblxyXG4vLyAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG5cclxuLy8gICAgICAgICAvLyBUcnkgdG8gZmluZCBkZWZhdWx0IGNvbnN0cnVjdG9yLiBOb3QgdXNpbmcgbG9va3VwIGJlY2F1c2UgY29uc3RydWN0b3JzIGhhdmUgbm8gbmFtZS5cclxuLy8gICAgICAgICB0aGlzLmN0b3IgPSBvdmVybG9hZFJlc29sdXRpb24odGFyZ2V0LnR5cGUuY3BwQ2xhc3MuY3RvcnMsIFtdKTtcclxuLy8gICAgICAgICBpZiAoIXRoaXMuY3Rvcikge1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uaW5pdC5ub19kZWZhdWx0X2NvbnN0cnVjdG9yKHRoaXMsIHRoaXMudGFyZ2V0KSk7XHJcbi8vICAgICAgICAgICAgIHJldHVybjtcclxuLy8gICAgICAgICB9XHJcbiAgICAgICAgXHJcbi8vICAgICAgICAgLy9NZW1iZXJGdW5jdGlvbkNhbGwgYXJncyBhcmU6IGNvbnRleHQsIGZ1bmN0aW9uIHRvIGNhbGwsIHJlY2VpdmVyLCBjdG9yIGFyZ3NcclxuLy8gICAgICAgICB0aGlzLmN0b3JDYWxsID0gbmV3IE1lbWJlckZ1bmN0aW9uQ2FsbChjb250ZXh0LCB0aGlzLmN0b3IsIHRoaXMudGFyZ2V0LCBbXSk7XHJcbi8vICAgICAgICAgdGhpcy5hdHRhY2godGhpcy5jdG9yQ2FsbCk7XHJcbi8vICAgICAgICAgLy8gdGhpcy5hcmdzID0gdGhpcy5jdG9yQ2FsbC5hcmdzO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lSW5pdGlhbGl6ZXI8VCBleHRlbmRzIENsYXNzVHlwZT4odGhpczogQ29tcGlsZWRDbGFzc0RlZmF1bHRJbml0aWFsaXplcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVDbGFzc0RlZmF1bHRJbml0aWFsaXplcjxUPjtcclxuLy8gICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lSW5pdGlhbGl6ZXI8VCBleHRlbmRzIE9iamVjdFR5cGU+KHRoaXM6IENvbXBpbGVkRGVmYXVsdEluaXRpYWxpemVyPFQ+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogbmV2ZXI7XHJcbi8vICAgICBwdWJsaWMgY3JlYXRlUnVudGltZUluaXRpYWxpemVyPFQgZXh0ZW5kcyBDbGFzc1R5cGU+KHRoaXM6IENvbXBpbGVkQ2xhc3NEZWZhdWx0SW5pdGlhbGl6ZXI8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lQ2xhc3NEZWZhdWx0SW5pdGlhbGl6ZXI8VD4ge1xyXG4vLyAgICAgICAgIHJldHVybiBuZXcgUnVudGltZUNsYXNzRGVmYXVsdEluaXRpYWxpemVyKHRoaXMsIHBhcmVudCk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIGV4cGxhaW4oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4vLyAgICAgICAgIGxldCB0YXJnZXREZXNjID0gdGhpcy50YXJnZXQuZGVzY3JpYmUoKTtcclxuLy8gICAgICAgICAvLyBUT0RPOiB3aGF0IGlmIHRoZXJlIGlzIGFuIGVycm9yIHRoYXQgY2F1c2VzIG5vIGN0b3IgdG8gYmUgZm91bmQvYXZhaWxhYmxlXHJcbi8vICAgICAgICAgcmV0dXJuIHttZXNzYWdlOiAodGFyZ2V0RGVzYy5uYW1lIHx8IHRhcmdldERlc2MubWVzc2FnZSkgKyBcIiB3aWxsIGJlIGluaXRpYWxpemVkIHVzaW5nIFwiICsgdGhpcy5jdG9yQ2FsbC5kZXNjcmliZSgpLm1lc3NhZ2V9O1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG4vLyBleHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkQ2xhc3NEZWZhdWx0SW5pdGlhbGl6ZXI8VCBleHRlbmRzIENsYXNzVHlwZSA9IENsYXNzVHlwZT4gZXh0ZW5kcyBDbGFzc0RlZmF1bHRJbml0aWFsaXplciwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG5cclxuLy8gICAgIHJlYWRvbmx5IHRhcmdldDogT2JqZWN0RW50aXR5PFQ+O1xyXG4vLyAgICAgcmVhZG9ubHkgY3RvcjogQ29uc3RydWN0b3JFbnRpdHk8VD47XHJcbi8vICAgICByZWFkb25seSBjdG9yQ2FsbDogQ29tcGlsZWRGdW5jdGlvbkNhbGw8Vm9pZFR5cGUsIFwicHJ2YWx1ZVwiPjtcclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIFJ1bnRpbWVDbGFzc0RlZmF1bHRJbml0aWFsaXplcjxUIGV4dGVuZHMgQ2xhc3NUeXBlID0gQ2xhc3NUeXBlPiBleHRlbmRzIFJ1bnRpbWVEZWZhdWx0SW5pdGlhbGl6ZXI8VCwgQ29tcGlsZWRDbGFzc0RlZmF1bHRJbml0aWFsaXplcjxUPj4ge1xyXG5cclxuLy8gICAgIHB1YmxpYyByZWFkb25seSB0YXJnZXQ6IENQUE9iamVjdDxDbGFzc1R5cGU+O1xyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IGN0b3JDYWxsOiBSdW50aW1lRnVuY3Rpb25DYWxsPFZvaWRUeXBlLCBcInBydmFsdWVcIj47XHJcblxyXG4vLyAgICAgcHJpdmF0ZSBpbmRleCA9IFwiY2FsbEN0b3JcIjtcclxuICAgIFxyXG4vLyAgICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRDbGFzc0RlZmF1bHRJbml0aWFsaXplcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbi8vICAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbi8vICAgICAgICAgdGhpcy50YXJnZXQgPSBtb2RlbC50YXJnZXQucnVudGltZUxvb2t1cCh0aGlzKTtcclxuLy8gICAgICAgICB0aGlzLmN0b3JDYWxsID0gdGhpcy5tb2RlbC5jdG9yQ2FsbC5jcmVhdGVSdW50aW1lRnVuY3Rpb25DYWxsKHRoaXMpO1xyXG4vLyAgICAgfVxyXG5cdFxyXG4vLyAgICAgcHJvdGVjdGVkIHVwTmV4dEltcGwoKSB7XHJcbi8vICAgICAgICAgaWYgKHRoaXMuaW5kZXggPT09IFwiY2FsbEN0b3JcIikge1xyXG4vLyAgICAgICAgICAgICB0aGlzLnNpbS5wdXNoKHRoaXMuY3RvckNhbGwpO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmluZGV4ID0gXCJkb25lXCI7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2Uge1xyXG4vLyAgICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcImluaXRpYWxpemVkXCIsIHRoaXMudGFyZ2V0KTtcclxuLy8gICAgICAgICAgICAgdGhpcy5zaW0ucG9wKCk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHB1YmxpYyBzdGVwRm9yd2FyZEltcGwoKSB7XHJcbi8vICAgICAgICAgLy8gZG8gbm90aGluZ1xyXG4vLyAgICAgfVxyXG5cclxuLy8gfVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEaXJlY3RJbml0aWFsaXplckFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIGNvbnN0cnVjdF90eXBlOiBcImRpcmVjdF9pbml0aWFsaXplclwiO1xyXG4gICAgYXJnczogRXhwcmVzc2lvbkFTVE5vZGVbXTtcclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGlyZWN0SW5pdGlhbGl6ZXIgZXh0ZW5kcyBJbml0aWFsaXplciB7XHJcblxyXG4gICAgLy8gTk9URTogcmVtb3ZlZCBzaW5jZSBJIGRvbid0IHRoaW5rIGl0IG1ha2VzIHNlbnNlIHRvIGNyZWF0ZSBhbiBpbml0aWFsaXplciBkaXJlY3RseSBmcm9tIGFuIEFTVCAoYW5kIGl0IGRvZXNuJ3QgbWF0Y2ggdGhlIGJhc2Ugc2lnbmF0dXJlIG9mIENQUENvbnN0cnVjdC5jcmVhdGVGcm9tQVNUKVxyXG4gICAgLy8gcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tQVNUPFQgZXh0ZW5kcyBUeXBlPihhc3Q6IERpcmVjdEluaXRpYWxpemVyQVNUTm9kZSwgY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgdGFyZ2V0OiBPYmplY3RFbnRpdHk8VD4pIHtcclxuICAgIC8vICAgICByZXR1cm4gdGhpcy5jcmVhdGUoY29udGV4dCwgdGFyZ2V0LFxyXG4gICAgLy8gICAgICAgICBhc3QuYXJncy5tYXAoKGEpID0+IHtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybiBFeHByZXNzaW9uLmNyZWF0ZUZyb21BU1QoYSwgY29udGV4dCk7XHJcbiAgICAvLyAgICAgICAgIH0pXHJcbiAgICAvLyAgICAgKVxyXG4gICAgLy8gfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHRhcmdldDogVW5ib3VuZFJlZmVyZW5jZUVudGl0eSwgYXJnczogcmVhZG9ubHkgRXhwcmVzc2lvbltdKSA6IFJlZmVyZW5jZURpcmVjdEluaXRpYWxpemVyO1xyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgdGFyZ2V0OiBPYmplY3RFbnRpdHk8QXRvbWljVHlwZT4sIGFyZ3M6IHJlYWRvbmx5IEV4cHJlc3Npb25bXSkgOiBBdG9taWNEaXJlY3RJbml0aWFsaXplcjtcclxuICAgIC8vIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHRhcmdldDogT2JqZWN0RW50aXR5PEJvdW5kZWRBcnJheVR5cGU+LCBhcmdzOiByZWFkb25seSBFeHByZXNzaW9uW10pIDogQXJyYXlEaXJlY3RJbml0aWFsaXplcjtcclxuICAgIC8vIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHRhcmdldDogT2JqZWN0RW50aXR5PENsYXNzVHlwZT4sIGFyZ3M6IHJlYWRvbmx5IEV4cHJlc3Npb25bXSkgOiBDbGFzc0RpcmVjdEluaXRpYWxpemVyO1xyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgdGFyZ2V0OiBPYmplY3RFbnRpdHksIGFyZ3M6IHJlYWRvbmx5IEV4cHJlc3Npb25bXSkgOiBEaXJlY3RJbml0aWFsaXplcjtcclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHRhcmdldDogT2JqZWN0RW50aXR5IHwgVW5ib3VuZFJlZmVyZW5jZUVudGl0eSwgYXJnczogcmVhZG9ubHkgRXhwcmVzc2lvbltdKSA6IERpcmVjdEluaXRpYWxpemVyIHtcclxuICAgICAgICBpZiAoKDxVbmJvdW5kUmVmZXJlbmNlRW50aXR5PnRhcmdldCkuYmluZFRvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVmZXJlbmNlRGlyZWN0SW5pdGlhbGl6ZXIoY29udGV4dCwgPFVuYm91bmRSZWZlcmVuY2VFbnRpdHk+dGFyZ2V0LCBhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGFyZ2V0LnR5cGUgaW5zdGFuY2VvZiBBdG9taWNUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXRvbWljRGlyZWN0SW5pdGlhbGl6ZXIoY29udGV4dCwgPE9iamVjdEVudGl0eTxBdG9taWNUeXBlPj4gdGFyZ2V0LCBhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZWxzZSBpZiAodGFyZ2V0LnR5cGUgaW5zdGFuY2VvZiBCb3VuZGVkQXJyYXlUeXBlKSB7XHJcbiAgICAgICAgLy8gICAgIHJldHVybiBuZXcgQXJyYXlEaXJlY3RJbml0aWFsaXplcihjb250ZXh0LCA8T2JqZWN0RW50aXR5PEJvdW5kZWRBcnJheVR5cGU+PiB0YXJnZXQsIGFyZ3MpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBlbHNlIGlmICh0YXJnZXQudHlwZSBpbnN0YW5jZW9mIENsYXNzVHlwZSkge1xyXG4gICAgICAgIC8vICAgICByZXR1cm4gbmV3IENsYXNzRGlyZWN0SW5pdGlhbGl6ZXIoY29udGV4dCwgPE9iamVjdEVudGl0eTxDbGFzc1R5cGU+PiB0YXJnZXQsIGFyZ3MpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0RmFsc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGFyZ3M6IHJlYWRvbmx5IEV4cHJlc3Npb25bXTtcclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgY3JlYXRlUnVudGltZUluaXRpYWxpemVyPFQgZXh0ZW5kcyBPYmplY3RUeXBlPih0aGlzOiBDb21waWxlZERpcmVjdEluaXRpYWxpemVyPFQ+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogUnVudGltZURpcmVjdEluaXRpYWxpemVyPFQ+O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZERpcmVjdEluaXRpYWxpemVyPFQgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZT4gZXh0ZW5kcyBEaXJlY3RJbml0aWFsaXplciwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgdGVtcG9yYXJ5RGVhbGxvY2F0b3I/OiBDb21waWxlZFRlbXBvcmFyeURlYWxsb2NhdG9yOyAvLyB0byBtYXRjaCBDb21waWxlZFBvdGVudGlhbEZ1bGxFeHByZXNzaW9uIHN0cnVjdHVyZVxyXG4gICAgcmVhZG9ubHkgdGFyZ2V0OiBPYmplY3RFbnRpdHk8VD4gfCBVbmJvdW5kUmVmZXJlbmNlRW50aXR5PFQ+O1xyXG4gICAgcmVhZG9ubHkgYXJnczogcmVhZG9ubHkgQ29tcGlsZWRFeHByZXNzaW9uW107XHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSdW50aW1lRGlyZWN0SW5pdGlhbGl6ZXI8VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlLCBDIGV4dGVuZHMgQ29tcGlsZWREaXJlY3RJbml0aWFsaXplcjxUPiA9IENvbXBpbGVkRGlyZWN0SW5pdGlhbGl6ZXI8VD4+IGV4dGVuZHMgUnVudGltZUluaXRpYWxpemVyPEM+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IgKG1vZGVsOiBDLCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUmVmZXJlbmNlRGlyZWN0SW5pdGlhbGl6ZXIgZXh0ZW5kcyBEaXJlY3RJbml0aWFsaXplciB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHRhcmdldDogVW5ib3VuZFJlZmVyZW5jZUVudGl0eTtcclxuICAgIHB1YmxpYyByZWFkb25seSBhcmdzOiByZWFkb25seSBFeHByZXNzaW9uW107XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgYXJnPzogRXhwcmVzc2lvbjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgdGFyZ2V0OiBVbmJvdW5kUmVmZXJlbmNlRW50aXR5LCBhcmdzOiByZWFkb25seSBFeHByZXNzaW9uW10pIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xyXG4gICAgICAgIGFyZ3MuZm9yRWFjaCgoYSkgPT4ge3RoaXMuYXR0YWNoKGEpO30pO1xyXG5cclxuICAgICAgICAvLyBOb3RlOiBXaXRoIGEgcmVmZXJlbmNlLCBubyBjb252ZXJzaW9ucyBhcmUgZG9uZVxyXG4gICAgICAgIGlmICh0aGlzLmFyZ3MubGVuZ3RoID4gMSl7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5pbml0LnJlZmVyZW5jZUJpbmRNdWx0aXBsZSh0aGlzKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5hcmcgPSB0aGlzLmFyZ3NbMF07XHJcbiAgICAgICAgaWYgKCF0aGlzLmFyZy5pc1dlbGxUeXBlZCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0YXJnZXRUeXBlID0gdGFyZ2V0LnR5cGU7XHJcbiAgICAgICAgaWYgKCFyZWZlcmVuY2VDb21wYXRpYmxlKHRoaXMuYXJnLnR5cGUsIHRhcmdldFR5cGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5pbml0LnJlZmVyZW5jZVR5cGUodGhpcywgdGhpcy5hcmcudHlwZSwgdGFyZ2V0VHlwZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmFyZy52YWx1ZUNhdGVnb3J5ID09PSBcInBydmFsdWVcIiAmJiAhdGFyZ2V0VHlwZS5pc0NvbnN0KXtcclxuICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmluaXQucmVmZXJlbmNlUHJ2YWx1ZUNvbnN0KHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5hcmcudmFsdWVDYXRlZ29yeSA9PT0gXCJwcnZhbHVlXCIpe1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IubG9ic3Rlci5yZWZlcmVuY2VQcnZhbHVlKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVJbml0aWFsaXplcjxUIGV4dGVuZHMgT2JqZWN0VHlwZT4odGhpczogQ29tcGlsZWRSZWZlcmVuY2VEaXJlY3RJbml0aWFsaXplcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVSZWZlcmVuY2VEaXJlY3RJbml0aWFsaXplcjxUPjtcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lSW5pdGlhbGl6ZXI8VCBleHRlbmRzIE9iamVjdFR5cGU+KHRoaXM6IENvbXBpbGVkRGlyZWN0SW5pdGlhbGl6ZXI8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBuZXZlcjtcclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lSW5pdGlhbGl6ZXI8VCBleHRlbmRzIE9iamVjdFR5cGU+KHRoaXM6IGFueSwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVSZWZlcmVuY2VEaXJlY3RJbml0aWFsaXplcjxUPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSdW50aW1lUmVmZXJlbmNlRGlyZWN0SW5pdGlhbGl6ZXIoPENvbXBpbGVkUmVmZXJlbmNlRGlyZWN0SW5pdGlhbGl6ZXI8VD4+dGhpcywgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZXhwbGFpbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgbGV0IHRhcmdldERlc2MgPSB0aGlzLnRhcmdldC5kZXNjcmliZSgpO1xyXG4gICAgICAgIGxldCByaHNEZXNjID0gdGhpcy5hcmdzWzBdLmRlc2NyaWJlRXZhbFJlc3VsdCgwKTtcclxuICAgICAgICByZXR1cm4ge21lc3NhZ2U6ICh0YXJnZXREZXNjLm5hbWUgfHwgdGFyZ2V0RGVzYy5tZXNzYWdlKSArIFwiIHdpbGwgYmUgYm91bmQgdG8gXCIgKyAocmhzRGVzYy5uYW1lIHx8IHJoc0Rlc2MubWVzc2FnZSkgKyBcIi5cIn07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRSZWZlcmVuY2VEaXJlY3RJbml0aWFsaXplcjxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgUmVmZXJlbmNlRGlyZWN0SW5pdGlhbGl6ZXIsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuICAgIHJlYWRvbmx5IHRlbXBvcmFyeURlYWxsb2NhdG9yPzogQ29tcGlsZWRUZW1wb3JhcnlEZWFsbG9jYXRvcjsgLy8gdG8gbWF0Y2ggQ29tcGlsZWRQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbiBzdHJ1Y3R1cmVcclxuICAgIHJlYWRvbmx5IHRhcmdldDogVW5ib3VuZFJlZmVyZW5jZUVudGl0eTxUPjtcclxuICAgIHJlYWRvbmx5IGFyZ3M6IHJlYWRvbmx5IENvbXBpbGVkRXhwcmVzc2lvbltdO1xyXG5cclxuICAgIC8vIE5vdGU6IENvbXBpbGF0aW9uIG9mIHRoZSBpbml0aWFsaXplciBjaGVja3MgZm9yIHJlZmVyZW5jZSBjb21wYXRpYmlsaXR5LCB3aGljaCBzaG91bGQgZW5zdXJlXHJcbiAgICAvLyB0aGF0IHRoZSBleHByZXNzaW9uIGFjdHVhbGx5IGhhcyB0aGUgc2FtZSB0eXBlIFQgYXMgdGhlIHJlZmVyZW5jZSB0byBiZSBib3VuZC4gKEZvciBzdWJ0eXBlc1xyXG4gICAgLy8gdGhhdCBhcmUgcmVmZXJlbmNlIGNvbXBhdGlibGUsIHRoaXMgaXMgZmluZSwgc2luY2UgVCB3aWxsIHN0aWxsIGJlIENsYXNzVHlwZSBmb3IgYm90aC4pXHJcbiAgICByZWFkb25seSBhcmc6IENvbXBpbGVkRXhwcmVzc2lvbjxULCBcImx2YWx1ZVwiPjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVSZWZlcmVuY2VEaXJlY3RJbml0aWFsaXplcjxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgUnVudGltZURpcmVjdEluaXRpYWxpemVyPFQsIENvbXBpbGVkUmVmZXJlbmNlRGlyZWN0SW5pdGlhbGl6ZXI8VD4+IHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgYXJnOiBSdW50aW1lRXhwcmVzc2lvbjxULCBcImx2YWx1ZVwiPjtcclxuXHJcbiAgICBwcml2YXRlIGFscmVhZHlQdXNoZWQgPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDb21waWxlZFJlZmVyZW5jZURpcmVjdEluaXRpYWxpemVyPFQ+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuICAgICAgICB0aGlzLmFyZyA9IHRoaXMubW9kZWwuYXJnLmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCB1cE5leHRJbXBsKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5hbHJlYWR5UHVzaGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2ltLnB1c2godGhpcy5hcmcpO1xyXG4gICAgICAgICAgICB0aGlzLmFscmVhZHlQdXNoZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHN0ZXBGb3J3YXJkSW1wbCgpIHtcclxuICAgICAgICBsZXQgcnRSZWYgPSB0aGlzLm1vZGVsLnRhcmdldC5iaW5kVG8odGhpcywgPENQUE9iamVjdDxUPj50aGlzLmFyZy5ldmFsUmVzdWx0KTsgIC8vVE9ETyBub3Qgc3VyZSBhdCBhbGwgd2h5IHRoaXMgY2FzdCBpcyBuZWNlc3NhcnlcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcImluaXRpYWxpemVkXCIsIHJ0UmVmKTtcclxuICAgICAgICB0aGlzLnNpbS5wb3AoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBBdG9taWNEaXJlY3RJbml0aWFsaXplciBleHRlbmRzIERpcmVjdEluaXRpYWxpemVyIHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0OiBPYmplY3RFbnRpdHk8QXRvbWljVHlwZT47XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgYXJnczogcmVhZG9ubHkgRXhwcmVzc2lvbltdO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGFyZz86IEV4cHJlc3Npb247XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHRhcmdldDogT2JqZWN0RW50aXR5PEF0b21pY1R5cGU+LCBhcmdzOiByZWFkb25seSBFeHByZXNzaW9uW10pIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgdGFyZ2V0VHlwZSA9IHRhcmdldC50eXBlO1xyXG5cclxuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xyXG4gICAgICAgIGFyZ3MuZm9yRWFjaCgoYSkgPT4ge3RoaXMuYXR0YWNoKGEpO30pO1xyXG5cclxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAxKXtcclxuICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmluaXQuc2NhbGFyX2FyZ3ModGhpcywgdGFyZ2V0VHlwZSkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYXJnID0gYXJnc1swXTtcclxuXHJcbiAgICAgICAgLy9BdHRlbXB0IHN0YW5kYXJkIGNvbnZlcnNpb24gdG8gZGVjbGFyZWQgdHlwZSwgaW5jbHVkaW5nIGx2YWx1ZSB0byBydmFsdWUgY29udmVyc2lvbnNcclxuICAgICAgICBpZiAoIXRoaXMuYXJnLmlzV2VsbFR5cGVkKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHR5cGVkQXJnID0gc3RhbmRhcmRDb252ZXJzaW9uKHRoaXMuYXJnLCB0YXJnZXRUeXBlKTtcclxuICAgICAgICB0aGlzLmFyZyA9IHR5cGVkQXJnO1xyXG5cclxuICAgICAgICBpZiAoIXNhbWVUeXBlKHR5cGVkQXJnLnR5cGUsIHRhcmdldFR5cGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5pbml0LmNvbnZlcnQodGhpcywgdHlwZWRBcmcudHlwZSwgdGFyZ2V0VHlwZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBUT0RPOiBuZWVkIHRvIGNoZWNrIHRoYXQgdGhlIGFyZyBpcyBhIHBydmFsdWVcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZUluaXRpYWxpemVyPFQgZXh0ZW5kcyBBdG9taWNUeXBlPih0aGlzOiBDb21waWxlZEF0b21pY0RpcmVjdEluaXRpYWxpemVyPFQ+LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogUnVudGltZUF0b21pY0RpcmVjdEluaXRpYWxpemVyPFQ+O1xyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVJbml0aWFsaXplcjxUIGV4dGVuZHMgT2JqZWN0VHlwZT4odGhpczogQ29tcGlsZWREaXJlY3RJbml0aWFsaXplcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IG5ldmVyO1xyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVJbml0aWFsaXplcjxUIGV4dGVuZHMgQXRvbWljVHlwZT4odGhpczogYW55LCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIDogUnVudGltZUF0b21pY0RpcmVjdEluaXRpYWxpemVyPFQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVBdG9taWNEaXJlY3RJbml0aWFsaXplcig8Q29tcGlsZWRBdG9taWNEaXJlY3RJbml0aWFsaXplcjxUPj50aGlzLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE87IGNoYW5nZSBleHBsYWluIGV2ZXJ5d2hlcmUgdG8gYmUgc2VwYXJhdGUgYmV0d2VlbiBjb21waWxlIHRpbWUgYW5kIHJ1bnRpbWUgY29uc3RydWN0c1xyXG4gICAgcHVibGljIGV4cGxhaW4oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIGxldCB0YXJnZXREZXNjID0gdGhpcy50YXJnZXQucnVudGltZUxvb2t1cChydENvbnN0cnVjdCkuZGVzY3JpYmUoKTtcclxuICAgICAgICBsZXQgcmhzRGVzYyA9IHRoaXMuYXJnc1swXS5kZXNjcmliZUV2YWxSZXN1bHQoMCk7XHJcbiAgICAgICAgcmV0dXJuIHttZXNzYWdlOiAodGFyZ2V0RGVzYy5uYW1lIHx8IHRhcmdldERlc2MubWVzc2FnZSkgKyBcIiB3aWxsIGJlIGluaXRpYWxpemVkIHdpdGggXCIgKyAocmhzRGVzYy5uYW1lIHx8IHJoc0Rlc2MubWVzc2FnZSkgKyBcIi5cIn07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRBdG9taWNEaXJlY3RJbml0aWFsaXplcjxUIGV4dGVuZHMgQXRvbWljVHlwZSA9IEF0b21pY1R5cGU+IGV4dGVuZHMgQXRvbWljRGlyZWN0SW5pdGlhbGl6ZXIsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuICAgIHJlYWRvbmx5IHRlbXBvcmFyeURlYWxsb2NhdG9yPzogQ29tcGlsZWRUZW1wb3JhcnlEZWFsbG9jYXRvcjsgLy8gdG8gbWF0Y2ggQ29tcGlsZWRQb3RlbnRpYWxGdWxsRXhwcmVzc2lvbiBzdHJ1Y3R1cmVcclxuICAgIHJlYWRvbmx5IHRhcmdldDogT2JqZWN0RW50aXR5PFQ+O1xyXG4gICAgcmVhZG9ubHkgYXJnczogcmVhZG9ubHkgQ29tcGlsZWRFeHByZXNzaW9uW107XHJcbiAgICByZWFkb25seSBhcmc6IENvbXBpbGVkRXhwcmVzc2lvbjxULCBcInBydmFsdWVcIj47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lQXRvbWljRGlyZWN0SW5pdGlhbGl6ZXI8VCBleHRlbmRzIEF0b21pY1R5cGUgPSBBdG9taWNUeXBlPiBleHRlbmRzIFJ1bnRpbWVEaXJlY3RJbml0aWFsaXplcjxULCBDb21waWxlZEF0b21pY0RpcmVjdEluaXRpYWxpemVyPFQ+PiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHRhcmdldDogQ1BQT2JqZWN0PEF0b21pY1R5cGU+O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGFyZzogUnVudGltZUV4cHJlc3Npb248VCwgXCJwcnZhbHVlXCI+O1xyXG5cclxuICAgIHByaXZhdGUgYWxyZWFkeVB1c2hlZCA9IGZhbHNlO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IENvbXBpbGVkQXRvbWljRGlyZWN0SW5pdGlhbGl6ZXI8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsLCBwYXJlbnQpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5tb2RlbC50YXJnZXQucnVudGltZUxvb2t1cCh0aGlzKTtcclxuICAgICAgICB0aGlzLmFyZyA9IHRoaXMubW9kZWwuYXJnLmNyZWF0ZVJ1bnRpbWVFeHByZXNzaW9uKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCB1cE5leHRJbXBsKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5hbHJlYWR5UHVzaGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2ltLnB1c2godGhpcy5hcmcpO1xyXG4gICAgICAgICAgICB0aGlzLmFscmVhZHlQdXNoZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RlcEZvcndhcmRJbXBsKCkge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0LndyaXRlVmFsdWUodGhpcy5hcmcuZXZhbFJlc3VsdCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJpbml0aWFsaXplZFwiLCB0aGlzLnRhcmdldCk7XHJcbiAgICAgICAgdGhpcy5zaW0ucG9wKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyAvKipcclxuLy8gICogTm90ZTogT25seSBhbGxvd2VkIHVzZSBpcyB0byBpbml0aWFsaXplIGEgY2hhciBhcnJheSBmcm9tIGEgc3RyaW5nIGxpdGVyYWwsIGJ1dCB0aGlzIGNhbiByZWFkaWx5IGJlXHJcbi8vICAqIGNyZWF0ZWQgaW4gdGhlIGNvdXJzZSBvZiBjb21waWxpbmcgYSBwcm9ncmFtIGlmIHRoZSBjb2RlIGF0dGVtcHRzIHRvIGRpcmVjdGx5IGluaXRpYWxpemUgYW4gYXJyYXkuIFRoYXQnc1xyXG4vLyAgKiBkZXNpcmFibGUsIGJlY2F1c2UgdGhpcyBjbGFzcyB3aWxsIGdpdmUgdGhlIGFwcHJvcHJpYXRlIGVycm9yIG1lc3NhZ2VzIGlmIGl0J3MgYW55dGhpbmcgb3RoZXIgdGhhbiBhXHJcbi8vICAqIGNoYXIgYXJyYXkgaW5pdGlhbGl6ZWQgZnJvbSBhIHN0cmluZyBsaXRlcmFsLlxyXG4vLyAgKi9cclxuLy8gZXhwb3J0IGNsYXNzIEFycmF5RGlyZWN0SW5pdGlhbGl6ZXIgZXh0ZW5kcyBEaXJlY3RJbml0aWFsaXplciB7XHJcblxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IHRhcmdldDogT2JqZWN0RW50aXR5PEJvdW5kZWRBcnJheVR5cGU+O1xyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IGFyZ3M6IHJlYWRvbmx5IEV4cHJlc3Npb25bXTtcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBhcmc/OiBTdHJpbmdMaXRlcmFsO1xyXG5cclxuLy8gICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCB0YXJnZXQ6IE9iamVjdEVudGl0eTxCb3VuZGVkQXJyYXlUeXBlPiwgYXJnczogcmVhZG9ubHkgRXhwcmVzc2lvbltdKSB7XHJcbi8vICAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcbiAgICAgICAgXHJcbi8vICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbi8vICAgICAgICAgbGV0IHRhcmdldFR5cGUgPSB0YXJnZXQudHlwZTtcclxuXHJcbi8vICAgICAgICAgLy8gVFMgdHlwZSBzeXN0ZW0gZW5zdXJlcyB0YXJnZXQgaXMgYXJyYXkgdHlwZSwgbmVlZCB0byBjaGVjayBlbGVtZW50IHR5cGUgYW5kIHRoYXQgYXJncyBhcmUgYSBzaW5nbGUgc3RyaW5nIGxpdGVyYWxcclxuLy8gICAgICAgICBpZiAodGFyZ2V0VHlwZS5lbGVtVHlwZSBpbnN0YW5jZW9mIENoYXIgJiYgYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXSBpbnN0YW5jZW9mIFN0cmluZ0xpdGVyYWwpIHtcclxuLy8gICAgICAgICAgICAgbGV0IGFyZyA9IHRoaXMuYXJnID0gPFN0cmluZ0xpdGVyYWw+YXJnc1swXTtcclxuICAgICAgICAgICAgXHJcbi8vICAgICAgICAgICAgIGlmIChhcmcudHlwZS5sZW5ndGggPiB0YXJnZXRUeXBlLmxlbmd0aCl7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uaW5pdC5zdHJpbmdMaXRlcmFsTGVuZ3RoKHRoaXMsIGFyZy50eXBlLmxlbmd0aCwgdGFyZ2V0VHlwZS5sZW5ndGgpKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIHtcclxuLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmluaXQuYXJyYXlfc3RyaW5nX2xpdGVyYWwodGhpcywgdGFyZ2V0VHlwZSkpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgdGhpcy5hcmdzID0gYXJncztcclxuLy8gICAgICAgICBhcmdzLmZvckVhY2goKGEpID0+IHt0aGlzLmF0dGFjaChhKTt9KTtcclxuICAgICAgICBcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgY3JlYXRlUnVudGltZUluaXRpYWxpemVyKHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4vLyAgICAgICAgIHJldHVybiBuZXcgUnVudGltZUFycmF5RGlyZWN0SW5pdGlhbGl6ZXIodGhpcywgcGFyZW50KTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICAvLyBUT0RPOyBjaGFuZ2UgZXhwbGFpbiBldmVyeXdoZXJlIHRvIGJlIHNlcGFyYXRlIGJldHdlZW4gY29tcGlsZSB0aW1lIGFuZCBydW50aW1lIGNvbnN0cnVjdHNcclxuLy8gICAgIHB1YmxpYyBleHBsYWluKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuLy8gICAgICAgICBsZXQgdGFyZ2V0RGVzYyA9IHRoaXMudGFyZ2V0LnJ1bnRpbWVMb29rdXAocnRDb25zdHJ1Y3QpLmRlc2NyaWJlKCk7XHJcbi8vICAgICAgICAgbGV0IHJoc0Rlc2MgPSB0aGlzLmFyZ3NbMF0uZGVzY3JpYmVFdmFsUmVzdWx0KDApO1xyXG4vLyAgICAgICAgIHJldHVybiB7bWVzc2FnZTogKHRhcmdldERlc2MubmFtZSB8fCB0YXJnZXREZXNjLm1lc3NhZ2UpICsgXCIgKGEgY2hhcmFjdGVyIGFycmF5KSB3aWxsIGJlIGluaXRpYWxpemVkIGZyb20gdGhlIHN0cmluZyBsaXRlcmFsIFwiICsgcmhzRGVzYyArIFwiLiBSZW1lbWJlciB0aGF0IGEgbnVsbCBjaGFyYWN0ZXIgaXMgYXV0b21hdGljYWxseSBhcHBlbmRlZCFcIn07XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRBcnJheURpcmVjdEluaXRpYWxpemVyIGV4dGVuZHMgQXJyYXlEaXJlY3RJbml0aWFsaXplciwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4vLyAgICAgcmVhZG9ubHkgdGFyZ2V0OiBPYmplY3RFbnRpdHk8Qm91bmRlZEFycmF5VHlwZTxDaGFyPj47XHJcbi8vICAgICByZWFkb25seSBhcmdzOiBDb21waWxlZEV4cHJlc3Npb25bXTtcclxuLy8gICAgIHJlYWRvbmx5IGFyZzogQ29tcGlsZWRTdHJpbmdMaXRlcmFsO1xyXG4vLyB9XHJcblxyXG4vLyBleHBvcnQgY2xhc3MgUnVudGltZUFycmF5RGlyZWN0SW5pdGlhbGl6ZXIgZXh0ZW5kcyBSdW50aW1lRGlyZWN0SW5pdGlhbGl6ZXI8Qm91bmRlZEFycmF5VHlwZTxDaGFyPiwgQ29tcGlsZWRBcnJheURpcmVjdEluaXRpYWxpemVyPiB7XHJcblxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IHRhcmdldDogQ1BQT2JqZWN0PEJvdW5kZWRBcnJheVR5cGU+O1xyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IGFyZzogUnVudGltZVN0cmluZ0xpdGVyYWw7XHJcblxyXG4vLyAgICAgcHJpdmF0ZSBhbHJlYWR5UHVzaGVkID0gZmFsc2U7XHJcblxyXG4vLyAgICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRBcnJheURpcmVjdEluaXRpYWxpemVyLCBwYXJlbnQ6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuLy8gICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuLy8gICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMubW9kZWwudGFyZ2V0LnJ1bnRpbWVMb29rdXAodGhpcyk7XHJcbi8vICAgICAgICAgdGhpcy5hcmcgPSB0aGlzLm1vZGVsLmFyZy5jcmVhdGVSdW50aW1lRXhwcmVzc2lvbih0aGlzKTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwcm90ZWN0ZWQgdXBOZXh0SW1wbCgpIHtcclxuLy8gICAgICAgICBpZiAoIXRoaXMuYWxyZWFkeVB1c2hlZCkge1xyXG4vLyAgICAgICAgICAgICB0aGlzLnNpbS5wdXNoKHRoaXMuYXJnKTtcclxuLy8gICAgICAgICAgICAgdGhpcy5hbHJlYWR5UHVzaGVkID0gdHJ1ZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIHN0ZXBGb3J3YXJkSW1wbCgpIHtcclxuICAgICAgICBcclxuLy8gICAgICAgICB2YXIgY2hhcnNUb1dyaXRlID0gdGhpcy5hcmcuZXZhbFJlc3VsdC5yYXdWYWx1ZSgpO1xyXG5cclxuLy8gICAgICAgICAvLyBwYWQgd2l0aCB6ZXJvc1xyXG4vLyAgICAgICAgIHdoaWxlIChjaGFyc1RvV3JpdGUubGVuZ3RoIDwgdGhpcy50YXJnZXQudHlwZS5sZW5ndGgpIHtcclxuLy8gICAgICAgICAgICAgY2hhcnNUb1dyaXRlLnB1c2goQ2hhci5OVUxMX0NIQVIpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgdGhpcy50YXJnZXQud3JpdGVWYWx1ZShjaGFyc1RvV3JpdGUpO1xyXG4vLyAgICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwiaW5pdGlhbGl6ZWRcIiwgdGhpcy50YXJnZXQpO1xyXG4vLyAgICAgICAgIHRoaXMuc2ltLnBvcCgpO1xyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIENsYXNzRGlyZWN0SW5pdGlhbGl6ZXIgZXh0ZW5kcyBEaXJlY3RJbml0aWFsaXplciB7XHJcblxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IHRhcmdldDogT2JqZWN0RW50aXR5PENsYXNzVHlwZT47XHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgYXJnczogcmVhZG9ubHkgRXhwcmVzc2lvbltdO1xyXG5cclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBjdG9yOiBDb25zdHJ1Y3RvckVudGl0eT87XHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgY3RvckNhbGw6IE1lbWJlckZ1bmN0aW9uQ2FsbD87XHJcblxyXG4vLyAgICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHRhcmdldDogT2JqZWN0RW50aXR5PENsYXNzVHlwZT4sIGFyZ3M6IHJlYWRvbmx5IEV4cHJlc3Npb25bXSkge1xyXG4vLyAgICAgICAgIHN1cGVyKGNvbnRleHQpO1xyXG4gICAgICAgIFxyXG4vLyAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIFxyXG4vLyAgICAgICAgIGxldCB0YXJnZXRUeXBlID0gdGFyZ2V0LnR5cGU7XHJcblxyXG4vLyAgICAgICAgIC8vIE5lZWQgdG8gc2VsZWN0IGNvbnN0cnVjdG9yLCBzbyBoYXZlIHRvIGNvbXBpbGUgYXV4aWxpYXJ5IGFyZ3VtZW50c1xyXG4vLyAgICAgICAgIGxldCB7Y3RvciwgcHJvYmxlbXN9ID0gb3ZlcmxvYWRSZXNvbHV0aW9uKHRhcmdldFR5cGUuY3BwQ2xhc3MuY3RvcnMsIGFyZ3MpO1xyXG5cclxuLy8gICAgICAgICBpZiAoY3Rvcikge1xyXG4vLyAgICAgICAgICAgICB0aGlzLmN0b3IgPSBjdG9yO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmN0b3JDYWxsID0gbmV3IEZ1bmN0aW9uQ2FsbChjb250ZXh0LCBjdG9yLCBhcmdzLCB0aGlzLnRhcmdldCk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYXR0YWNoKHRoaXMuY3RvckNhbGwpO1xyXG4vLyAgICAgICAgICAgICAvLyBOb3RlOiBpbiB0aGUgY2FzZSBhIHN1aXRhYmxlIGZ1bmN0aW9uIGNhbGwgY2FuIGJlIGNvbnN0cnVjdGVkLCBhcmd1bWVudHMgYXJlIG5vdFxyXG4vLyAgICAgICAgICAgICAvLyBhdHRhY2hlZCBoZXJlIHNpbmNlIHRoZXkgYXJlIGF0dGFjaGVkIHVuZGVyIHRoZSBmdW5jdGlvbiBjYWxsLlxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIHtcclxuLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmluaXQubWF0Y2hpbmdfY29uc3RydWN0b3IodGhpcywgdGhpcy50YXJnZXQsXHJcbi8vICAgICAgICAgICAgICAgICBhcmdzLm1hcChmdW5jdGlvbiAoYXJnKSB7cmV0dXJuIGFyZy50eXBlO30pKSk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYXR0YWNoQWxsKHRoaXMuYXJncyA9IGFyZ3MpO1xyXG4vLyAgICAgICAgICAgICByZXR1cm47XHJcbi8vICAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgY3JlYXRlUnVudGltZUluaXRpYWxpemVyPFQgZXh0ZW5kcyBDbGFzc1R5cGU+KHRoaXM6IENvbXBpbGVkQ2xhc3NEaXJlY3RJbml0aWFsaXplcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IFJ1bnRpbWVDbGFzc0RpcmVjdEluaXRpYWxpemVyPFQ+O1xyXG4vLyAgICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVJbml0aWFsaXplcjxUIGV4dGVuZHMgT2JqZWN0VHlwZT4odGhpczogQ29tcGlsZWREaXJlY3RJbml0aWFsaXplcjxUPiwgcGFyZW50OiBSdW50aW1lQ29uc3RydWN0KSA6IG5ldmVyO1xyXG4vLyAgICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVJbml0aWFsaXplcjxUIGV4dGVuZHMgQ2xhc3NUeXBlPih0aGlzOiBhbnksIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkgOiBSdW50aW1lQ2xhc3NEaXJlY3RJbml0aWFsaXplcjxUPiB7XHJcbi8vICAgICAgICAgcmV0dXJuIG5ldyBSdW50aW1lQ2xhc3NEaXJlY3RJbml0aWFsaXplcig8Q29tcGlsZWRDbGFzc0RpcmVjdEluaXRpYWxpemVyPFQ+PnRoaXMsIHBhcmVudCk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgLy8gVE9ETzsgY2hhbmdlIGV4cGxhaW4gZXZlcnl3aGVyZSB0byBiZSBzZXBhcmF0ZSBiZXR3ZWVuIGNvbXBpbGUgdGltZSBhbmQgcnVudGltZSBjb25zdHJ1Y3RzXHJcbi8vICAgICBwdWJsaWMgZXhwbGFpbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbi8vICAgICAgICAgbGV0IHRhcmdldERlc2MgPSB0aGlzLnRhcmdldC5kZXNjcmliZSgpO1xyXG4vLyAgICAgICAgIC8vIFRPRE86IHdoYXQgaWYgdGhlcmUgaXMgYW4gZXJyb3IgdGhhdCBjYXVzZXMgbm8gY3RvciB0byBiZSBmb3VuZC9hdmFpbGFibGVcclxuLy8gICAgICAgICByZXR1cm4ge21lc3NhZ2U6ICh0YXJnZXREZXNjLm5hbWUgfHwgdGFyZ2V0RGVzYy5tZXNzYWdlKSArIFwiIHdpbGwgYmUgaW5pdGlhbGl6ZWQgdXNpbmcgXCIgKyB0aGlzLmN0b3JDYWxsLmRlc2NyaWJlKCkubWVzc2FnZX07XHJcbi8vICAgICB9XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRDbGFzc0RpcmVjdEluaXRpYWxpemVyPFQgZXh0ZW5kcyBDbGFzc1R5cGU+IGV4dGVuZHMgQ2xhc3NEaXJlY3RJbml0aWFsaXplciwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgXHJcbiAgICBcclxuLy8gICAgIHJlYWRvbmx5IHRhcmdldDogT2JqZWN0RW50aXR5PFQ+O1xyXG4vLyAgICAgcmVhZG9ubHkgYXJnczogcmVhZG9ubHkgRXhwcmVzc2lvbltdO1xyXG5cclxuLy8gICAgIHJlYWRvbmx5IGN0b3I6IENvbnN0cnVjdG9yRW50aXR5PFQ+O1xyXG4vLyAgICAgcmVhZG9ubHkgY3RvckNhbGw6IENvbXBpbGVkRnVuY3Rpb25DYWxsPFZvaWRUeXBlLCBcInBydmFsdWVcIj47XHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBSdW50aW1lQ2xhc3NEaXJlY3RJbml0aWFsaXplcjxUIGV4dGVuZHMgQ2xhc3NUeXBlPiBleHRlbmRzIFJ1bnRpbWVEaXJlY3RJbml0aWFsaXplcjxULCBDb21waWxlZENsYXNzRGlyZWN0SW5pdGlhbGl6ZXI8VD4+IHtcclxuXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0OiBDUFBPYmplY3Q8Q2xhc3NUeXBlPjtcclxuICAgIFxyXG4vLyAgICAgcHVibGljIHJlYWRvbmx5IGN0b3JDYWxsOiBSdW50aW1lRnVuY3Rpb25DYWxsPFZvaWRUeXBlLCBcInBydmFsdWVcIj47XHJcblxyXG4vLyAgICAgcHJpdmF0ZSBpbmRleCA9IFwiY2FsbEN0b3JcIjtcclxuXHJcbi8vICAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDb21waWxlZENsYXNzRGlyZWN0SW5pdGlhbGl6ZXI8VD4sIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4vLyAgICAgICAgIHN1cGVyKG1vZGVsLCBwYXJlbnQpO1xyXG4vLyAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5tb2RlbC50YXJnZXQucnVudGltZUxvb2t1cCh0aGlzKTtcclxuLy8gICAgICAgICB0aGlzLmN0b3JDYWxsID0gdGhpcy5tb2RlbC5jdG9yQ2FsbC5jcmVhdGVSdW50aW1lRnVuY3Rpb25DYWxsKHRoaXMpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHByb3RlY3RlZCB1cE5leHRJbXBsKCkge1xyXG4vLyAgICAgICAgIGlmICh0aGlzLmluZGV4ID09PSBcImNhbGxDdG9yXCIpIHtcclxuLy8gICAgICAgICAgICAgdGhpcy5zaW0ucHVzaCh0aGlzLmN0b3JDYWxsKTtcclxuLy8gICAgICAgICAgICAgdGhpcy5pbmRleCA9IFwiZG9uZVwiO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIHtcclxuLy8gICAgICAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJpbml0aWFsaXplZFwiLCB0aGlzLnRhcmdldCk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuc2ltLnBvcCgpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgc3RlcEZvcndhcmRJbXBsKCkge1xyXG4vLyAgICAgICAgIC8vIGRvIG5vdGhpbmdcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvcHlJbml0aWFsaXplckFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIGNvbnN0cnVjdF90eXBlOiBcImNvcHlfaW5pdGlhbGl6ZXJcIjtcclxuICAgIGFyZ3M6IEV4cHJlc3Npb25BU1ROb2RlW107XHJcbn1cclxuXHJcbi8vIFRPRE86IFRoZXNlIHNob3VsZCByZWFsbHkgYmUgXCJjbGFzcyBhbGlhc2VzXCIgcmF0aGVyIHRoYW4gZGVyaXZlZCBjbGFzc2VzLCBob3dldmVyXHJcbi8vIGl0IGRvZXNuJ3Qgc2VlbSBsaWtlIFR5cGVzY3JpcHQgaGFzIGFueSBwcm9wZXIgbWVjaGFuaXNtIGZvciB0aGlzLlxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29weUluaXRpYWxpemVyIGV4dGVuZHMgRGlyZWN0SW5pdGlhbGl6ZXIgeyB9O1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkQ29weUluaXRpYWxpemVyPFQgZXh0ZW5kcyBPYmplY3RUeXBlID0gT2JqZWN0VHlwZT4gZXh0ZW5kcyBDb21waWxlZERpcmVjdEluaXRpYWxpemVyPFQ+IHsgfTtcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJ1bnRpbWVDb3B5SW5pdGlhbGl6ZXIgZXh0ZW5kcyBSdW50aW1lRGlyZWN0SW5pdGlhbGl6ZXIgeyB9O1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlZmVyZW5jZUNvcHlJbml0aWFsaXplciBleHRlbmRzIFJlZmVyZW5jZURpcmVjdEluaXRpYWxpemVyIHsgfTtcclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZFJlZmVyZW5jZUNvcHlJbml0aWFsaXplcjxUIGV4dGVuZHMgT2JqZWN0VHlwZSA9IE9iamVjdFR5cGU+IGV4dGVuZHMgQ29tcGlsZWRSZWZlcmVuY2VEaXJlY3RJbml0aWFsaXplcjxUPiB7IH07XHJcbmV4cG9ydCBjbGFzcyBSdW50aW1lUmVmZXJlbmNlQ29weUluaXRpYWxpemVyIGV4dGVuZHMgUnVudGltZVJlZmVyZW5jZURpcmVjdEluaXRpYWxpemVyIHsgfTtcclxuXHJcbmV4cG9ydCBjbGFzcyBBdG9taWNDb3B5SW5pdGlhbGl6ZXIgZXh0ZW5kcyBBdG9taWNEaXJlY3RJbml0aWFsaXplciB7IH07XHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRBdG9taWNDb3B5SW5pdGlhbGl6ZXI8VCBleHRlbmRzIEF0b21pY1R5cGUgPSBBdG9taWNUeXBlPiBleHRlbmRzIENvbXBpbGVkQXRvbWljRGlyZWN0SW5pdGlhbGl6ZXI8VD4geyB9O1xyXG5leHBvcnQgY2xhc3MgUnVudGltZUF0b21pY0NvcHlJbml0aWFsaXplciBleHRlbmRzIFJ1bnRpbWVBdG9taWNEaXJlY3RJbml0aWFsaXplciB7IH07XHJcbi8vIGV4cG9ydCBjbGFzcyBBcnJheUNvcHlJbml0aWFsaXplciBleHRlbmRzIEFycmF5RGlyZWN0SW5pdGlhbGl6ZXIgeyB9O1xyXG4vLyBleHBvcnQgY2xhc3MgUnVudGltZUFycmF5Q29weUluaXRpYWxpemVyIGV4dGVuZHMgUnVudGltZUFycmF5RGlyZWN0SW5pdGlhbGl6ZXIgeyB9O1xyXG4vLyBleHBvcnQgY2xhc3MgQ2xhc3NDb3B5SW5pdGlhbGl6ZXIgZXh0ZW5kcyBDbGFzc0RpcmVjdEluaXRpYWxpemVyIHsgfTtcclxuLy8gZXhwb3J0IGNsYXNzIFJ1bnRpbWVDbGFzc0NvcHlJbml0aWFsaXplciBleHRlbmRzIFJ1bnRpbWVDbGFzc0RpcmVjdEluaXRpYWxpemVyIHsgfTtcclxuXHJcblxyXG5cclxuXHJcbi8vIC8qKlxyXG4vLyAgKiBOb3RlOiBvbmx5IHVzZSBpcyBpbiBpbXBsaWNpdGx5IGRlZmluZWQgY29weSBjb25zdHJ1Y3RvclxyXG4vLyAgKi9cclxuLy8gZXhwb3J0IGNsYXNzIEFycmF5TWVtYmVySW5pdGlhbGl6ZXIgZXh0ZW5kcyBJbml0aWFsaXplciB7XHJcblxyXG4vLyAgICAgIC8vIE5vdGU6IHRoaXMgYXJlIG5vdCBNZW1iZXJTdWJvYmplY3RFbnRpdHkgc2luY2UgdGhleSBtaWdodCBuZWVkIHRvIGFwcGx5IHRvIGEgbmVzdGVkIGFycmF5IGluc2lkZSBhbiBhcnJheSBtZW1iZXJcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSB0YXJnZXQ6IE9iamVjdEVudGl0eTxCb3VuZGVkQXJyYXlUeXBlPjtcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBvdGhlck1lbWJlcjogT2JqZWN0RW50aXR5PEJvdW5kZWRBcnJheVR5cGU+O1xyXG4gICAgXHJcbi8vICAgICBwdWJsaWMgcmVhZG9ubHkgZWxlbWVudEluaXRpYWxpemVyczogRGlyZWN0SW5pdGlhbGl6ZXJbXSA9IFtdO1xyXG5cclxuLy8gICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCB0YXJnZXQ6IE9iamVjdEVudGl0eTxCb3VuZGVkQXJyYXlUeXBlPixcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICBvdGhlck1lbWJlcjogT2JqZWN0RW50aXR5PEJvdW5kZWRBcnJheVR5cGU+KSB7XHJcbi8vICAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcbiAgICAgICAgXHJcbi8vICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbi8vICAgICAgICAgdGhpcy5vdGhlck1lbWJlciA9IG90aGVyTWVtYmVyO1xyXG4vLyAgICAgICAgIGxldCB0YXJnZXRUeXBlID0gdGFyZ2V0LnR5cGU7XHJcblxyXG4vLyAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0YXJnZXRUeXBlLmxlbmd0aDsgKytpKSB7XHJcbi8vICAgICAgICAgICAgIGxldCBlbGVtSW5pdDtcclxuLy8gICAgICAgICAgICAgLy8gQ09NTUVOVEVEIEJFTE9XIEJFQ0FVU0UgTVVMVElESU1FTlNJT05BTCBBUlJBWVMgQVJFIE5PVCBBTExPV0VEXHJcbi8vICAgICAgICAgICAgIC8vIGlmICh0YXJnZXRUeXBlLmVsZW1UeXBlIGluc3RhbmNlb2YgQm91bmRlZEFycmF5VHlwZSkge1xyXG4vLyAgICAgICAgICAgICAvLyAgICAgZWxlbUluaXQgPSBuZXcgQXJyYXlNZW1iZXJJbml0aWFsaXplcihjb250ZXh0LFxyXG4vLyAgICAgICAgICAgICAvLyAgICAgICAgIG5ldyBBcnJheVN1Ym9iamVjdEVudGl0eSh0YXJnZXQsIGkpLFxyXG4vLyAgICAgICAgICAgICAvLyAgICAgICAgIG5ldyBBcnJheVN1Ym9iamVjdEVudGl0eSg8T2JqZWN0RW50aXR5PEJvdW5kZWRBcnJheVR5cGU8Qm91bmRlZEFycmF5VHlwZT4+Pm90aGVyTWVtYmVyLCBpKSk7XHJcbi8vICAgICAgICAgICAgIC8vIH1cclxuLy8gICAgICAgICAgICAgLy8gZWxzZSB7XHJcbi8vICAgICAgICAgICAgICAgICBlbGVtSW5pdCA9IERpcmVjdEluaXRpYWxpemVyLmNyZWF0ZShjb250ZXh0LFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIG5ldyBBcnJheVN1Ym9iamVjdEVudGl0eSh0YXJnZXQsIGkpLFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIFtuZXcgRW50aXR5RXhwcmVzc2lvbihjb250ZXh0LCBuZXcgQXJyYXlTdWJvYmplY3RFbnRpdHkob3RoZXJNZW1iZXIsIGkpKV0pO1xyXG4vLyAgICAgICAgICAgICAvLyB9XHJcblxyXG4vLyAgICAgICAgICAgICB0aGlzLmVsZW1lbnRJbml0aWFsaXplcnMucHVzaChlbGVtSW5pdCk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYXR0YWNoKGVsZW1Jbml0KTtcclxuXHJcbi8vICAgICAgICAgICAgIGlmKGVsZW1Jbml0Lmhhc0Vycm9ycykge1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmluaXQuYXJyYXlfZGlyZWN0X2luaXQodGhpcykpO1xyXG4vLyAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbiAgICAgICAgXHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVJbml0aWFsaXplcih0aGlzOiBDb21waWxlZEFycmF5TWVtYmVySW5pdGlhbGl6ZXIsIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4vLyAgICAgICAgIHJldHVybiBuZXcgUnVudGltZUFycmF5TWVtYmVySW5pdGlhbGl6ZXIodGhpcywgcGFyZW50KTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgZXhwbGFpbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KSA6IEV4cGxhbmF0aW9uIHtcclxuLy8gICAgICAgICBsZXQgdGFyZ2V0RGVzYyA9IHRoaXMudGFyZ2V0LmRlc2NyaWJlKCk7XHJcbi8vICAgICAgICAgbGV0IHRhcmdldFR5cGUgPSB0aGlzLnRhcmdldC50eXBlO1xyXG4vLyAgICAgICAgIGxldCBvdGhlck1lbWJlckRlc2MgPSB0aGlzLm90aGVyTWVtYmVyLmRlc2NyaWJlKCk7XHJcbiAgICAgICAgXHJcbi8vICAgICAgICAgaWYgKHRhcmdldFR5cGUubGVuZ3RoID09PSAwKSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB7bWVzc2FnZTogXCJObyBpbml0aWFsaXphdGlvbiBpcyBwZXJmb3JtZWQgZm9yIFwiICsgKHRhcmdldERlc2MubmFtZSB8fCB0YXJnZXREZXNjLm1lc3NhZ2UpICsgXCJiZWNhdXNlIHRoZSBhcnJheSBoYXMgbGVuZ3RoIDAuXCJ9O1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHttZXNzYWdlOiBcIkVhY2ggZWxlbWVudCBvZiBcIiArICh0YXJnZXREZXNjLm5hbWUgfHwgdGFyZ2V0RGVzYy5tZXNzYWdlKSArIFwiIHdpbGwgYmUgZGVmYXVsdC1pbml0aWFsaXplZCB3aXRoIHRoZSB2YWx1ZSBvZiB0aGVcIlxyXG4vLyAgICAgICAgICAgICAgICAgKyBcImNvcnJlc3BvbmRpbmcgZWxlbWVudCBvZiBcIiArIChvdGhlck1lbWJlckRlc2MubmFtZSB8fCBvdGhlck1lbWJlckRlc2MubWVzc2FnZSkgKyBcIi4gRm9yIGV4YW1wbGUsIFwiICtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudEluaXRpYWxpemVyc1swXS5leHBsYWluKHNpbSwgcnRDb25zdHJ1Y3QpIH07XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyB9XHJcblxyXG4vLyBleHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkQXJyYXlNZW1iZXJJbml0aWFsaXplciBleHRlbmRzIEFycmF5TWVtYmVySW5pdGlhbGl6ZXIsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuLy8gICAgIHJlYWRvbmx5IGVsZW1lbnRJbml0aWFsaXplcnM6IENvbXBpbGVkRGlyZWN0SW5pdGlhbGl6ZXJbXTtcclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIFJ1bnRpbWVBcnJheU1lbWJlckluaXRpYWxpemVyIGV4dGVuZHMgUnVudGltZUluaXRpYWxpemVyPENvbXBpbGVkQXJyYXlNZW1iZXJJbml0aWFsaXplcj4ge1xyXG5cclxuLy8gICAgIHB1YmxpYyByZWFkb25seSB0YXJnZXQ6IENQUE9iamVjdDxCb3VuZGVkQXJyYXlUeXBlPjtcclxuLy8gICAgIHB1YmxpYyByZWFkb25seSBlbGVtZW50SW5pdGlhbGl6ZXJzOiBSdW50aW1lRGlyZWN0SW5pdGlhbGl6ZXJbXTtcclxuXHJcbi8vICAgICBwcml2YXRlIGluZGV4ID0gMDtcclxuXHJcbi8vICAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDb21waWxlZEFycmF5TWVtYmVySW5pdGlhbGl6ZXIsIHBhcmVudDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4vLyAgICAgICAgIHN1cGVyKG1vZGVsLCBwYXJlbnQpO1xyXG4vLyAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5tb2RlbC50YXJnZXQucnVudGltZUxvb2t1cCh0aGlzKTtcclxuLy8gICAgICAgICB0aGlzLmVsZW1lbnRJbml0aWFsaXplcnMgPSB0aGlzLm1vZGVsLmVsZW1lbnRJbml0aWFsaXplcnMubWFwKChlbGVtSW5pdCkgPT4ge1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gZWxlbUluaXQuY3JlYXRlUnVudGltZUluaXRpYWxpemVyKHRoaXMpO1xyXG4vLyAgICAgICAgIH0pO1xyXG4vLyAgICAgfVxyXG5cdFxyXG4vLyAgICAgcHJvdGVjdGVkIHVwTmV4dEltcGwoKSB7XHJcbi8vICAgICAgICAgaWYgKHRoaXMuZWxlbWVudEluaXRpYWxpemVycyAmJiB0aGlzLmluZGV4IDwgdGhpcy5lbGVtZW50SW5pdGlhbGl6ZXJzLmxlbmd0aCkge1xyXG4vLyAgICAgICAgICAgICB0aGlzLnNpbS5wdXNoKHRoaXMuZWxlbWVudEluaXRpYWxpemVyc1t0aGlzLmluZGV4KytdKVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIHtcclxuLy8gICAgICAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJpbml0aWFsaXplZFwiLCB0aGlzLnRhcmdldCk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuc2ltLnBvcCgpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBwdWJsaWMgc3RlcEZvcndhcmRJbXBsKCkge1xyXG4vLyAgICAgICAgIC8vIGRvIG5vdGhpbmdcclxuLy8gICAgIH1cclxuLy8gfVxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vIGV4cG9ydCB2YXIgUGFyYW1ldGVySW5pdGlhbGl6ZXIgPSBDb3B5SW5pdGlhbGl6ZXIuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lIDogXCJQYXJhbWV0ZXJJbml0aWFsaXplclwiLFxyXG5cclxuLy8gICAgIGV4cGxhaW4gOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICB2YXIgZXhwID0gUGFyYW1ldGVySW5pdGlhbGl6ZXIuX3BhcmVudC5leHBsYWluLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbi8vICAgICAgICAgZXhwLm1lc3NhZ2UgPSBleHAubWVzc2FnZSArIFwiXFxuXFxuKFBhcmFtZXRlciBwYXNzaW5nIGlzIGRvbmUgYnkgY29weS1pbml0aWFsaXphdGlvbi4pXCI7XHJcbi8vICAgICAgICAgcmV0dXJuIGV4cDtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyBleHBvcnQgdmFyIFJldHVybkluaXRpYWxpemVyID0gQ29weUluaXRpYWxpemVyLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZSA6IFwiUmV0dXJuSW5pdGlhbGl6ZXJcIixcclxuXHJcbi8vICAgICBzdGVwRm9yd2FyZCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3QpIHtcclxuXHJcbi8vICAgICAgICAgLy8gTmVlZCB0byBoYW5kbGUgcmV0dXJuLWJ5LXJlZmVyZW5jZSBkaWZmZXJlbnRseSwgc2luY2UgdGhlcmUgaXMgbm8gYWN0dWFsIHJlZmVyZW5jZSB0aGF0XHJcbi8vICAgICAgICAgLy8gZ2V0cyBib3VuZC4gKFRoZSBydW50aW1lTG9va3VwIGZvciB0aGUgcmV0dXJuIGVudGl0eSB3b3VsZCB5aWVsZCBudWxsKS4gSW5zdGVhZCwgd2UganVzdFxyXG4vLyAgICAgICAgIC8vIHNldCB0aGUgcmV0dXJuIG9iamVjdCBmb3IgdGhlIGVuY2xvc2luZyBmdW5jdGlvbiB0byB0aGUgZXZhbHVhdGVkIGFyZ3VtZW50ICh3aGljaCBzaG91bGRcclxuLy8gICAgICAgICAvLyBoYXZlIHlpZWxkZWQgYW4gb2JqZWN0KS5cclxuLy8gICAgICAgICBpZiAoaXNBKHRoaXMuZW50aXR5LnR5cGUsIFR5cGVzLlJlZmVyZW5jZSkpIHtcclxuLy8gICAgICAgICAgICAgaW5zdC5jb250YWluaW5nUnVudGltZUZ1bmN0aW9uKCkuc2V0UmV0dXJuVmFsdWUoaW5zdC5jaGlsZEluc3RhbmNlcy5hcmdzWzBdLmV2YWxSZXN1bHQpO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgcmV0dXJuIFJldHVybkluaXRpYWxpemVyLl9wYXJlbnQuc3RlcEZvcndhcmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyBleHBvcnQgdmFyIE1lbWJlckluaXRpYWxpemVyID0gRGlyZWN0SW5pdGlhbGl6ZXIuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lIDogXCJNZW1iZXJJbml0aWFsaXplclwiLFxyXG4vLyAgICAgaXNNZW1iZXJJbml0aWFsaXplcjogdHJ1ZVxyXG4vLyB9KTtcclxuXHJcbi8vIGV4cG9ydCB2YXIgRGVmYXVsdE1lbWJlckluaXRpYWxpemVyID0gRGVmYXVsdEluaXRpYWxpemVyLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZSA6IFwiRGVmYXVsdE1lbWJlckluaXRpYWxpemVyXCIsXHJcbi8vICAgICBpc01lbWJlckluaXRpYWxpemVyOiB0cnVlXHJcbi8vIH0pO1xyXG5cclxuLy8gZXhwb3J0IHZhciBOZXdEaXJlY3RJbml0aWFsaXplciA9IERpcmVjdEluaXRpYWxpemVyLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZSA6IFwiTmV3RGlyZWN0SW5pdGlhbGl6ZXJcIixcclxuLy8gICAgIGlfcnVudGltZUNvbnN0cnVjdENsYXNzIDogUnVudGltZU5ld0luaXRpYWxpemVyXHJcbi8vIH0pO1xyXG5cclxuXHJcbi8vIGV4cG9ydCB2YXIgTmV3RGVmYXVsdEluaXRpYWxpemVyID0gRGVmYXVsdEluaXRpYWxpemVyLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZSA6IFwiTmV3RGVmYXVsdEluaXRpYWxpemVyXCIsXHJcbi8vICAgICBpX3J1bnRpbWVDb25zdHJ1Y3RDbGFzcyA6IFJ1bnRpbWVOZXdJbml0aWFsaXplclxyXG4vLyB9KTtcclxuXHJcblxyXG5cclxuLy8gZXhwb3J0IHZhciBJbml0aWFsaXplckxpc3QgPSBDUFBDb25zdHJ1Y3QuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lIDogXCJJbml0aWFsaXplckxpc3RcIixcclxuLy8gICAgIGluaXQ6IGZ1bmN0aW9uKGFzdCwgY29udGV4dCkge1xyXG4vLyAgICAgICAgIHRoaXMuaW5pdFBhcmVudChhc3QsIGNvbnRleHQpO1xyXG4vLyAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZXJMaXN0TGVuZ3RoID0gYXN0LmFyZ3MubGVuZ3RoO1xyXG4vLyAgICAgfSxcclxuLy8gICAgIGNvbXBpbGUgOiBmdW5jdGlvbihlbnRpdHkpe1xyXG4vLyAgICAgICAgIGFzc2VydChlbnRpdHksIFwiSW5pdGlhbGl6ZXIgY29udGV4dCBtdXN0IHNwZWNpZnkgZW50aXR5IHRvIGJlIGluaXRpYWxpemVkIVwiKTtcclxuLy8gICAgICAgICB0aGlzLmlfZW50aXR5VG9Jbml0aWFsaXplID0gZW50aXR5O1xyXG4vLyAgICAgICAgIHZhciBhc3QgPSB0aGlzLmFzdDtcclxuLy8gICAgICAgICB2YXIgdHlwZSA9IHRoaXMuaV9lbnRpdHlUb0luaXRpYWxpemUudHlwZTtcclxuXHJcbi8vICAgICAgICAgaWYgKCFpc0EodHlwZSwgVHlwZXMuQXJyYXkpKXtcclxuLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmluaXQubGlzdF9hcnJheSh0aGlzKSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2UgaWYgKHR5cGUubGVuZ3RoICE9PSBhc3QuYXJncy5sZW5ndGgpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uaW5pdC5saXN0X2xlbmd0aCh0aGlzLCB0eXBlLmxlbmd0aCkpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgaWYgKHRoaXMuaGFzRXJyb3JzKCkpeyByZXR1cm47IH1cclxuXHJcbi8vICAgICAgICAgdmFyIGxpc3QgPSBhc3QuYXJncztcclxuLy8gICAgICAgICAvL3RoaXMuaW5pdGlhbGl6ZXJMaXN0ID0gW107XHJcbi8vICAgICAgICAgdGhpcy5pX2NoaWxkcmVuVG9FeGVjdXRlID0gW107XHJcbi8vICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpe1xyXG4vLyAgICAgICAgICAgICB2YXIgaW5pdExpc3RFbGVtID0gdGhpc1tcImFyZ1wiK2ldID0gdGhpcy5pX2NyZWF0ZUFuZENvbXBpbGVDaGlsZEV4cHIobGlzdFtpXSwgdHlwZS5lbGVtVHlwZSk7XHJcbi8vICAgICAgICAgICAgIHRoaXMuaV9jaGlsZHJlblRvRXhlY3V0ZS5wdXNoKFwiYXJnXCIraSk7XHJcblxyXG4vLyAgICAgICAgICAgICBpZighc2FtZVR5cGUoaW5pdExpc3RFbGVtLnR5cGUsIHR5cGUuZWxlbVR5cGUpKXtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5pbml0LmNvbnZlcnQoaW5pdExpc3RFbGVtLCBpbml0TGlzdEVsZW0udHlwZSwgdHlwZS5lbGVtVHlwZSkpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2UgaWYgKGluaXRMaXN0RWxlbS5pc05hcnJvd2luZ0NvbnZlcnNpb24pe1xyXG4vLyAgICAgICAgICAgICAgICAgLy8gVE9ETzogYXMgb2Ygbm93LCBzdGlsbCBuZWVkIHRvIGFkZCBjb2RlIHRoYXQgaWRlbnRpZmllcyBjZXJ0YWluIGNvbnZlcnNpb25zIGFzIG5hcnJvd2luZ1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmluaXQubGlzdF9uYXJyb3dpbmcoaW5pdExpc3RFbGVtLCBpbml0TGlzdEVsZW0uZnJvbS50eXBlLCB0eXBlLmVsZW1UeXBlKSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgLy90aGlzLmluaXRpYWxpemVyTGlzdC5wdXNoKGluaXRMaXN0RWxlbSk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICByZXR1cm47XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIHN0ZXBGb3J3YXJkIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgaWYgKGluc3QuaW5kZXggIT09IFwiYWZ0ZXJDaGlsZHJlblwiKXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICB2YXIgb2JqID0gdGhpcy5pX2VudGl0eVRvSW5pdGlhbGl6ZS5ydW50aW1lTG9va3VwKHNpbSwgaW5zdCk7XHJcblxyXG4vLyAgICAgICAgIHZhciBhcnIgPSBbXTtcclxuLy8gICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5pbml0aWFsaXplckxpc3RMZW5ndGg7ICsraSl7XHJcbi8vICAgICAgICAgICAgIGFycltpXSA9IGluc3QuY2hpbGRJbnN0YW5jZXNbXCJhcmdcIitpXS5ldmFsUmVzdWx0LmdldFZhbHVlKCk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIG9iai53cml0ZVZhbHVlKGFycik7XHJcblxyXG4vLyAgICAgICAgIGluc3QuaW5kZXggPSBcImRvbmVcIjtcclxuLy8gICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcbiIsImltcG9ydCB7IEJhc2ljQ1BQQ29uc3RydWN0LCAgQVNUTm9kZSwgQ1BQQ29uc3RydWN0LCBTdWNjZXNzZnVsbHlDb21waWxlZCwgSW52YWxpZENvbnN0cnVjdCwgVHJhbnNsYXRpb25Vbml0Q29udGV4dCB9IGZyb20gXCIuL2NvbnN0cnVjdHNcIjtcclxuaW1wb3J0IHsgQ1BQRXJyb3IsIE5vdGUgfSBmcm9tIFwiLi9lcnJvcnNcIjtcclxuaW1wb3J0IHsgYXNNdXRhYmxlLCBhc3NlcnRGYWxzZSwgYXNzZXJ0LCBNdXRhYmxlIH0gZnJvbSBcIi4uL3V0aWwvdXRpbFwiO1xyXG5pbXBvcnQgeyBUeXBlLCBWb2lkVHlwZSwgQXJyYXlPZlVua25vd25Cb3VuZFR5cGUsIEZ1bmN0aW9uVHlwZSwgT2JqZWN0VHlwZSwgUmVmZXJlbmNlVHlwZSwgUG90ZW50aWFsUGFyYW1ldGVyVHlwZSwgQm91bmRlZEFycmF5VHlwZSwgUG9pbnRlclR5cGUsIGJ1aWx0SW5UeXBlcywgaXNCdWlsdEluVHlwZU5hbWUsIENsYXNzVHlwZSwgUG90ZW50aWFsUmV0dXJuVHlwZSB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IEluaXRpYWxpemVyLCBEZWZhdWx0SW5pdGlhbGl6ZXIsIERpcmVjdEluaXRpYWxpemVyLCBDb3B5SW5pdGlhbGl6ZXIsIEluaXRpYWxpemVyQVNUTm9kZSwgQ29tcGlsZWRJbml0aWFsaXplciB9IGZyb20gXCIuL2luaXRpYWxpemVyc1wiO1xyXG5pbXBvcnQgeyBBdXRvRW50aXR5LCBMb2NhbFJlZmVyZW5jZUVudGl0eSwgU3RhdGljRW50aXR5LCBOYW1lc3BhY2VTY29wZSwgVmFyaWFibGVFbnRpdHksIENQUEVudGl0eSwgRnVuY3Rpb25FbnRpdHkgfSBmcm9tIFwiLi9lbnRpdGllc1wiO1xyXG5pbXBvcnQgeyBFeHByZXNzaW9uLCBFeHByZXNzaW9uQVNUTm9kZSwgTnVtZXJpY0xpdGVyYWxBU1ROb2RlLCBjcmVhdGVFeHByZXNzaW9uRnJvbUFTVCwgcGFyc2VOdW1lcmljTGl0ZXJhbFZhbHVlRnJvbUFTVCB9IGZyb20gXCIuL2V4cHJlc3Npb25zXCI7XHJcbmltcG9ydCB7IEJsb2NrQ29udGV4dCwgQmxvY2tBU1ROb2RlLCBCbG9jaywgY3JlYXRlU3RhdGVtZW50RnJvbUFTVCwgaXNCbG9ja0NvbnRleHQsIENvbXBpbGVkQmxvY2sgfSBmcm9tIFwiLi9zdGF0ZW1lbnRzXCI7XHJcbmltcG9ydCB7IElkZW50aWZpZXJBU1ROb2RlLCBjaGVja0lkZW50aWZpZXIgfSBmcm9tIFwiLi9sZXhpY2FsXCI7XHJcbmltcG9ydCB7IEZ1bmN0aW9uTG9jYWxzLCBGdW5jdGlvbkNvbnRleHQsIGNyZWF0ZUZ1bmN0aW9uQ29udGV4dCwgUnVudGltZUZ1bmN0aW9uQ2FsbCwgUnVudGltZUZ1bmN0aW9uIH0gZnJvbSBcIi4vZnVuY3Rpb25zXCI7XHJcbmltcG9ydCB7IENQUE9iamVjdCB9IGZyb20gXCIuL29iamVjdHNcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFN0b3JhZ2VTcGVjaWZpZXJLZXkgPSBcInJlZ2lzdGVyXCIgfCBcInN0YXRpY1wiIHwgXCJ0aHJlYWRfbG9jYWxcIiB8IFwiZXh0ZXJuXCIgfCBcIm11dGFibGVcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFN0b3JhZ2VTcGVjaWZpZXJBU1ROb2RlID0gcmVhZG9ubHkgU3RvcmFnZVNwZWNpZmllcktleVtdO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0b3JhZ2VTcGVjaWZpZXIgZXh0ZW5kcyBCYXNpY0NQUENvbnN0cnVjdCB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHJlZ2lzdGVyPzogdHJ1ZTtcclxuICAgIHB1YmxpYyByZWFkb25seSBzdGF0aWM/OiB0cnVlO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHRocmVhZF9sb2NhbD86IHRydWU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZXh0ZXJuPzogdHJ1ZTtcclxuICAgIHB1YmxpYyByZWFkb25seSBtdXRhYmxlPzogdHJ1ZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNFbXB0eTogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21BU1QoYXN0OiBTdG9yYWdlU3BlY2lmaWVyQVNUTm9kZSwgY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgU3RvcmFnZVNwZWNpZmllcihjb250ZXh0LCBhc3QpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCBzcGVjczogcmVhZG9ubHkgU3RvcmFnZVNwZWNpZmllcktleVtdKSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dClcclxuICAgICAgICBcclxuICAgICAgICBsZXQgbnVtU3BlY3MgPSAwOyAvLyBjb3VudCBzcGVjcyBzZXBhcmF0ZWx5IHRvIGdldCBhIGNvdW50IHdpdGhvdXQgZHVwbGljYXRlc1xyXG4gICAgICAgIHNwZWNzLmZvckVhY2goKHNwZWMpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXNbc3BlY10pIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIGl0IHdhcyBhbHJlYWR5IHRydWUsIHdlIG11c3QgYmUgcHJvY2Vzc2luZyBhIGR1cGxpY2F0ZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLnN0b3JhZ2Uub25jZSh0aGlzLCBzcGVjKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhc011dGFibGUodGhpcylbc3BlY10gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgKytudW1TcGVjcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0aWMpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmxvYnN0ZXIudW5zdXBwb3J0ZWRfZmVhdHVyZSh0aGlzLCBcInN0YXRpY1wiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5leHRlcm4pIHtcclxuICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmxvYnN0ZXIudW5zdXBwb3J0ZWRfZmVhdHVyZSh0aGlzLCBcImV4dGVyblwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLnRocmVhZF9sb2NhbCkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IubG9ic3Rlci51bnN1cHBvcnRlZF9mZWF0dXJlKHRoaXMsIFwidGhyZWFkX2xvY2FsXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnJlZ2lzdGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5sb2JzdGVyLnVuc3VwcG9ydGVkX2ZlYXR1cmUodGhpcywgXCJyZWdpc3RlclwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5tdXRhYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5sb2JzdGVyLnVuc3VwcG9ydGVkX2ZlYXR1cmUodGhpcywgXCJtdXRhYmxlXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIDAgc3BlY2lmaWVycyBpcyBva1xyXG4gICAgICAgIC8vIDEgc3BlY2lmaWVyIGlzIG9rXHJcbiAgICAgICAgLy8gMiBzcGVjaWZpZXJzIG9ubHkgb2sgaWYgb25lIGlzIHRocmVhZF9sb2NhbCBhbmQgdGhlIG90aGVyIGlzIHN0YXRpYy9leHRlcm5cclxuICAgICAgICAvLyAzIG9yIG1vcmUgc3BlY2lmaWVycyBhcmUgYWx3YXlzIGluY29tcGF0aWJsZVxyXG4gICAgICAgIGlmIChudW1TcGVjcyA8IDIgfHxcclxuICAgICAgICAgICAgbnVtU3BlY3MgPT0gMiAmJiB0aGlzLnRocmVhZF9sb2NhbCAmJiAodGhpcy5zdGF0aWMgfHwgdGhpcy5leHRlcm4pKXtcclxuICAgICAgICAgICAgLy9va1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uc3RvcmFnZS5pbmNvbXBhdGlibGUodGhpcywgc3BlY3MpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaXNFbXB0eSA9IChudW1TcGVjcyA9PT0gMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFNpbXBsZVR5cGVOYW1lID0gc3RyaW5nIHwgXCJjaGFyXCIgfCBcInNob3J0XCIgfCBcImludFwiIHwgXCJib29sXCIgfCBcImxvbmdcIiB8IFwic2lnbmVkXCIgfCBcInVuc2lnbmVkXCIgfCBcImZsb2F0XCIgfCBcImRvdWJsZVwiIHwgXCJ2b2lkXCI7XHJcbmV4cG9ydCB0eXBlIFR5cGVTcGVjaWZpZXJLZXkgID0gXCJjb25zdFwiIHwgXCJ2b2xhdGlsZVwiIHwgXCJzaWduZWRcIiB8IFwidW5zaWduZWRcIiB8IFwiZW51bVwiO1xyXG5cclxuZXhwb3J0IHR5cGUgVHlwZVNwZWNpZmllckFTVE5vZGUgPSByZWFkb25seSAoVHlwZVNwZWNpZmllcktleSB8IFNpbXBsZVR5cGVOYW1lKVtdO1xyXG5cclxuZXhwb3J0IGNsYXNzIFR5cGVTcGVjaWZpZXIgZXh0ZW5kcyBCYXNpY0NQUENvbnN0cnVjdCB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnN0PzogdHJ1ZTtcclxuICAgIHB1YmxpYyByZWFkb25seSB2b2xhdGlsZT86IHRydWU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2lnbmVkPzogdHJ1ZTtcclxuICAgIHB1YmxpYyByZWFkb25seSB1bnNpZ25lZD86IHRydWU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZW51bT86IHRydWU7XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlTmFtZT86IHN0cmluZztcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZT86IFR5cGU7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tQVNUKGFzdDogVHlwZVNwZWNpZmllckFTVE5vZGUsIGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFR5cGVTcGVjaWZpZXIoY29udGV4dCwgYXN0KTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgc3BlY3M6IHJlYWRvbmx5IChUeXBlU3BlY2lmaWVyS2V5IHwgU2ltcGxlVHlwZU5hbWUpW10pIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuXHJcbiAgICAgICAgbGV0IGNvbnN0Q291bnQgPSAwO1xyXG4gICAgICAgIGxldCB2b2xhdGlsZUNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgc3BlY3MuZm9yRWFjaCgoc3BlYykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc3BlYyA9PT0gXCJlbnVtXCIpIHtcclxuICAgICAgICAgICAgICAgIGFzTXV0YWJsZSh0aGlzKS5lbnVtID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5sb2JzdGVyLnVuc3VwcG9ydGVkX2ZlYXR1cmUodGhpcywgXCJtdXRhYmxlXCIpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIGl0J3Mgb25lIG9mIHRoZSBwb3NzaWJsZSB0eXBlIHNwZWNpZmllcnNcclxuICAgICAgICAgICAgbGV0IHBvc3NpYmxlU3BlY3MgOiByZWFkb25seSBUeXBlU3BlY2lmaWVyS2V5W10gPSBbXCJjb25zdFwiLCBcInZvbGF0aWxlXCIsIFwic2lnbmVkXCIsIFwidW5zaWduZWRcIiwgXCJlbnVtXCJdO1xyXG4gICAgICAgICAgICBsZXQgbWF0Y2hlZFNwZWMgPSBwb3NzaWJsZVNwZWNzLmZpbmQocyA9PiBzID09PSBzcGVjKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtYXRjaGVkU3BlYykgeyAvLyBmb3VuZCBhIHR5cGUgc3BlY2lmaWVyXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc1ttYXRjaGVkU3BlY10pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpdCB3YXMgYSBkdXBsaWNhdGVcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24udHlwZVNwZWNpZmllci5vbmNlKHRoaXMsIG1hdGNoZWRTcGVjKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmaXJzdCB0aW1lIHRoaXMgc3BlYyBzZWVuLCBzZXQgdG8gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGFzTXV0YWJsZSh0aGlzKVttYXRjaGVkU3BlY10gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgeyAvLyBJdCdzIGEgdHlwZW5hbWVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGVOYW1lKSB7IC8vIGFscmVhZHkgaGFkIGEgdHlwZW5hbWUsIHRoaXMgaXMgYSBkdXBsaWNhdGVcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24udHlwZVNwZWNpZmllci5vbmVfdHlwZSh0aGlzLCBbdGhpcy50eXBlTmFtZSwgc3BlY10pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgYXNNdXRhYmxlKHRoaXMpLnR5cGVOYW1lID0gc3BlYztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGlmICh0aGlzLnVuc2lnbmVkICYmIHRoaXMuc2lnbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi50eXBlU3BlY2lmaWVyLnNpZ25lZF91bnNpZ25lZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB1bnNpZ25lZC9zaWduZWQgc3BlY2lmaWVyIGlzIHByZXNlbnQgYW5kIHRoZXJlIGlzIG5vIHR5cGUgbmFtZSwgZGVmYXVsdCB0byBpbnRcclxuICAgICAgICBpZiAoKHRoaXMudW5zaWduZWQgfHwgdGhpcy5zaWduZWQpICYmICF0aGlzLnR5cGVOYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZU5hbWUgPSBcImludFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIHR5cGVOYW1lIGJ5IG5vdywgaXQgbWVhbnMgdGhlcmUgd2Fzbid0IG9uZS5cclxuICAgICAgICAvLyBUaGlzIChvbGQpIGNvZGUgcHJlc3VtZXMgdGhlIG9ubHkgdGltZSB0aGlzIHdvdWxkIGJlIHBhcnNlZCBzdWNjZXNzZnVsbHlcclxuICAgICAgICAvLyBhbmQgbWFrZSBpdCBoZXJlIGlzIGluIHRoZSBjb250ZXh0IG9mIGEgZnVuY3Rpb24gZGVjbGFyYXRpb24uIEkgZG9uJ3QgdGhpbmtcclxuICAgICAgICAvLyB0aGF0J3MgcXVpdGUgY29ycmVjdC5cclxuICAgICAgICAvLyBUT0RPOiBwcm9iYWJseSBnZXQgcmlkIG9mIHRoaXMgYW5kIGp1c3QgbGV0IHRoZSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBjaGVjayBmb3IgdGhpc1xyXG4gICAgICAgIGlmICghdGhpcy50eXBlTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uZnVuYy5ub19yZXR1cm5fdHlwZSh0aGlzKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0eXBlIG5hbWUgaXMgb25lIG9mIHRoZSBidWlsdCBpbiB0eXBlc1xyXG4gICAgICAgIGlmIChpc0J1aWx0SW5UeXBlTmFtZSh0aGlzLnR5cGVOYW1lKSkge1xyXG4gICAgICAgICAgICBhc011dGFibGUodGhpcykudHlwZSA9IG5ldyBidWlsdEluVHlwZXNbdGhpcy50eXBlTmFtZV0odGhpcy5jb25zdCwgdGhpcy52b2xhdGlsZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgdG8gc2VlIGlmIHRoZSB0eXBlIG5hbWUgaXMgaW4gc2NvcGVcclxuICAgICAgICAvLyBUT0RPOiBhZGQgYmFjayBpbiB3aGVuIGNsYXNzZXMgYXJlIGFkZGVkXHJcbiAgICAgICAgLy8gdmFyIHNjb3BlVHlwZTtcclxuICAgICAgICAvLyBpZiAoc2NvcGVUeXBlID0gdGhpcy5jb250ZXh0dWFsU2NvcGUubG9va3VwKHRoaXMudHlwZU5hbWUpKXtcclxuICAgICAgICAvLyAgICAgaWYgKHNjb3BlVHlwZSBpbnN0YW5jZW9mIFR5cGVFbnRpdHkpe1xyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy50eXBlID0gbmV3IHNjb3BlVHlwZS50eXBlKHRoaXMuY29uc3QsIHRoaXMudm9sYXRpbGUpO1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IudHlwZS50eXBlTm90Rm91bmQodGhpcywgdGhpcy50eXBlTmFtZSkpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuXHJcbmludGVyZmFjZSBPdGhlclNwZWNpZmllcnMge1xyXG4gICAgcmVhZG9ubHkgdmlydHVhbD8gOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgdHlwZWRlZj8gOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgZnJpZW5kPyA6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGVjbGFyYXRpb25TcGVjaWZpZXJzQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSB0eXBlU3BlY3M6IFR5cGVTcGVjaWZpZXJBU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgc3RvcmFnZVNwZWNzOiBTdG9yYWdlU3BlY2lmaWVyQVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IGZyaWVuZD86IGJvb2xlYW47XHJcbiAgICByZWFkb25seSB0eXBlZGVmPzogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IGlubGluZT86IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBleHBsaWNpdD86IGJvb2xlYW47XHJcbiAgICByZWFkb25seSB2aXJ0dWFsPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgRGVjbGFyYXRpb25BU1ROb2RlID0gU2ltcGxlRGVjbGFyYXRpb25BU1ROb2RlIHwgRnVuY3Rpb25EZWZpbml0aW9uQVNUTm9kZTsvLyB8IENsYXNzRGVmaW5pdGlvbkFTVE5vZGVcclxuXHJcbmV4cG9ydCB0eXBlIERlY2xhcmF0aW9uID0gU2ltcGxlRGVjbGFyYXRpb24gfCBGdW5jdGlvbkRlZmluaXRpb247XHJcblxyXG5cclxuaW50ZXJmYWNlIHRfRGVjbGFyYXRpb25UeXBlcyB7XHJcbiAgICBcInNpbXBsZV9kZWNsYXJhdGlvblwiOiBTaW1wbGVEZWNsYXJhdGlvbjtcclxuICAgIFwiZnVuY3Rpb25fZGVmaW5pdGlvblwiOiBGdW5jdGlvbkRlZmluaXRpb247XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWNsYXJhdGlvbkZyb21BU1QoYXN0OiBTaW1wbGVEZWNsYXJhdGlvbkFTVE5vZGUsIGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQpIDogU2ltcGxlRGVjbGFyYXRpb25bXTtcclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlY2xhcmF0aW9uRnJvbUFTVChhc3Q6IEZ1bmN0aW9uRGVmaW5pdGlvbkFTVE5vZGUsIGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQpIDogRnVuY3Rpb25EZWZpbml0aW9uO1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVjbGFyYXRpb25Gcm9tQVNUKGFzdDogRGVjbGFyYXRpb25BU1ROb2RlLCBjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0KSA6IFNpbXBsZURlY2xhcmF0aW9uW10gfCBGdW5jdGlvbkRlZmluaXRpb247XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWNsYXJhdGlvbkZyb21BU1QoYXN0OiBEZWNsYXJhdGlvbkFTVE5vZGUsIGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQpIHtcclxuICAgIGlmIChhc3QuY29uc3RydWN0X3R5cGUgPT09IFwic2ltcGxlX2RlY2xhcmF0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRlU2ltcGxlRGVjbGFyYXRpb25Gcm9tQVNUKGFzdCwgY29udGV4dCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gRnVuY3Rpb25EZWZpbml0aW9uLmNyZWF0ZUZyb21BU1QoYXN0LCBjb250ZXh0KTtcclxuICAgIH1cclxufSBcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2ltcGxlRGVjbGFyYXRpb25Gcm9tQVNUKGFzdDogU2ltcGxlRGVjbGFyYXRpb25BU1ROb2RlLCBjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0KSB7XHJcblxyXG4gICAgLy8gTmVlZCB0byBjcmVhdGUgVHlwZVNwZWNpZmllciBmaXJzdCB0byBnZXQgdGhlIGJhc2UgdHlwZSBmaXJzdCBmb3IgdGhlIGRlY2xhcmF0b3JzXHJcbiAgICBsZXQgdHlwZVNwZWMgPSBUeXBlU3BlY2lmaWVyLmNyZWF0ZUZyb21BU1QoYXN0LnNwZWNzLnR5cGVTcGVjcywgY29udGV4dCk7XHJcbiAgICBsZXQgYmFzZVR5cGUgPSB0eXBlU3BlYy50eXBlO1xyXG4gICAgbGV0IHN0b3JhZ2VTcGVjID0gU3RvcmFnZVNwZWNpZmllci5jcmVhdGVGcm9tQVNUKGFzdC5zcGVjcy5zdG9yYWdlU3BlY3MsIGNvbnRleHQpO1xyXG5cclxuICAgIC8vIFVzZSBtYXAgdG8gY3JlYXRlIGFuIGFycmF5IG9mIHRoZSBpbmRpdmlkdWFsIGRlY2xhcmF0aW9ucyAoc2luY2UgbXVsdGlwbGUgb24gdGhlIHNhbWUgbGluZVxyXG4gICAgLy8gd2lsbCByZXN1bHQgaW4gYSBzaW5nbGUgQVNUIG5vZGUgYW5kIG5lZWQgdG8gYmUgYnJva2VuIHVwKVxyXG4gICAgcmV0dXJuIGFzdC5kZWNsYXJhdG9ycy5tYXAoKGRlY2xBU1QpID0+IHtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGRlY2xhcmF0b3IgYW5kIGRldGVybWluZSBkZWNsYXJlZCB0eXBlXHJcbiAgICAgICAgbGV0IGRlY2xhcmF0b3IgPSBEZWNsYXJhdG9yLmNyZWF0ZUZyb21BU1QoZGVjbEFTVCwgY29udGV4dCwgYmFzZVR5cGUpO1xyXG4gICAgICAgIGxldCBkZWNsYXJlZFR5cGUgPSBkZWNsYXJhdG9yLnR5cGU7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgZGVjbGFyYXRpb24gaXRzZWxmLiBXaGljaCBraW5kIGRlcGVuZHMgb24gdGhlIGRlY2xhcmVkIHR5cGVcclxuICAgICAgICBsZXQgZGVjbGFyYXRpb246IFNpbXBsZURlY2xhcmF0aW9uO1xyXG4gICAgICAgIGlmICghZGVjbGFyZWRUeXBlKSB7XHJcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uID0gbmV3IFVua25vd25UeXBlRGVjbGFyYXRpb24oY29udGV4dCwgdHlwZVNwZWMsIHN0b3JhZ2VTcGVjLCBkZWNsYXJhdG9yLCBhc3Quc3BlY3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhc3Quc3BlY3MuZnJpZW5kKSB7XHJcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uID0gbmV3IEZyaWVuZERlY2xhcmF0aW9uKGNvbnRleHQsIHR5cGVTcGVjLCBzdG9yYWdlU3BlYywgZGVjbGFyYXRvciwgYXN0LnNwZWNzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXN0LnNwZWNzLnR5cGVkZWYpIHtcclxuICAgICAgICAgICAgZGVjbGFyYXRpb24gPSBuZXcgVHlwZWRlZkRlY2xhcmF0aW9uKGNvbnRleHQsIHR5cGVTcGVjLCBzdG9yYWdlU3BlYywgZGVjbGFyYXRvciwgYXN0LnNwZWNzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGVjbGFyZWRUeXBlLmlzVm9pZFR5cGUoKSkge1xyXG4gICAgICAgICAgICBkZWNsYXJhdGlvbiA9IG5ldyBWb2lkRGVjbGFyYXRpb24oY29udGV4dCwgdHlwZVNwZWMsIHN0b3JhZ2VTcGVjLCBkZWNsYXJhdG9yLCBhc3Quc3BlY3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkZWNsYXJlZFR5cGUuaXNGdW5jdGlvblR5cGUoKSkge1xyXG4gICAgICAgICAgICBkZWNsYXJhdGlvbiA9IG5ldyBGdW5jdGlvbkRlY2xhcmF0aW9uKGNvbnRleHQsIHR5cGVTcGVjLCBzdG9yYWdlU3BlYywgZGVjbGFyYXRvciwgYXN0LnNwZWNzLCBkZWNsYXJlZFR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkZWNsYXJlZFR5cGUuaXNBcnJheU9mVW5rbm93bkJvdW5kVHlwZSgpKSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IGl0IG1heSBiZSBwb3NzaWJsZSB0byBkZXRlcm1pbmUgdGhlIGJvdW5kIGZyb20gdGhlIGluaXRpYWxpemVyXHJcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uID0gbmV3IFVua25vd25Cb3VuZEFycmF5RGVjbGFyYXRpb24oY29udGV4dCwgdHlwZVNwZWMsIHN0b3JhZ2VTcGVjLCBkZWNsYXJhdG9yLCBhc3Quc3BlY3MsIGRlY2xhcmVkVHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGFwcHJvcHJpYXRlIGtpbmQgb2Ygb2JqZWN0IGRlZmluaXRpb24gYmFzZWQgb24gdGhlIGNvbnRleHR1YWwgc2NvcGVcclxuICAgICAgICAgICAgbGV0IGRlY2wgOiBMb2NhbFZhcmlhYmxlRGVmaW5pdGlvbiB8IEdsb2JhbE9iamVjdERlZmluaXRpb247XHJcbiAgICAgICAgICAgIGlmIChpc0Jsb2NrQ29udGV4dChjb250ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgZGVjbCA9IG5ldyBMb2NhbFZhcmlhYmxlRGVmaW5pdGlvbihjb250ZXh0LCB0eXBlU3BlYywgc3RvcmFnZVNwZWMsIGRlY2xhcmF0b3IsIGFzdC5zcGVjcywgZGVjbGFyZWRUeXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlY2wgPSBuZXcgR2xvYmFsT2JqZWN0RGVmaW5pdGlvbihjb250ZXh0LCB0eXBlU3BlYywgc3RvcmFnZVNwZWMsIGRlY2xhcmF0b3IsIGFzdC5zcGVjcywgZGVjbGFyZWRUeXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWNsYXJhdGlvbiA9IGRlY2w7XHJcbiAgICBcclxuICAgICAgICAgICAgLy8gU2V0IGluaXRpYWxpemVyXHJcbiAgICAgICAgICAgIGxldCBpbml0ID0gZGVjbEFTVC5pbml0aWFsaXplcjtcclxuICAgICAgICAgICAgaWYgKCFpbml0KSB7XHJcbiAgICAgICAgICAgICAgICBkZWNsLnNldERlZmF1bHRJbml0aWFsaXplcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGluaXQuY29uc3RydWN0X3R5cGUgPT0gXCJkaXJlY3RfaW5pdGlhbGl6ZXJcIikge1xyXG4gICAgICAgICAgICAgICAgZGVjbC5zZXREaXJlY3RJbml0aWFsaXplcihpbml0LmFyZ3MubWFwKChhKSA9PiBjcmVhdGVFeHByZXNzaW9uRnJvbUFTVChhLCBjb250ZXh0KSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGluaXQuY29uc3RydWN0X3R5cGUgPT0gXCJjb3B5X2luaXRpYWxpemVyXCIpIHtcclxuICAgICAgICAgICAgICAgIGRlY2wuc2V0Q29weUluaXRpYWxpemVyKGluaXQuYXJncy5tYXAoKGEpID0+IGNyZWF0ZUV4cHJlc3Npb25Gcm9tQVNUKGEsIGNvbnRleHQpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZWxzZSBpZiAoaW5pdC5jb25zdHJ1Y3RfdHlwZSA9PSBcImluaXRpYWxpemVyX2xpc3RcIikge1xyXG4gICAgICAgICAgICAvLyAgICAgLy8gZGVjbC5zZXRDb3B5SW5pdGlhbGl6ZXIoaW5pdC5hcmdzLm1hcCgoYSkgPT4gRXhwcmVzc2lvbi5jcmVhdGVGcm9tQVNUKGEsIGNvbnRleHQpKSk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNldCBBU1RcclxuICAgICAgICBkZWNsYXJhdGlvbi5zZXRBU1QoYXN0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRlY2xhcmF0aW9uO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG5pbnRlcmZhY2UgU2ltcGxlRGVjbGFyYXRpb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJzaW1wbGVfZGVjbGFyYXRpb25cIjtcclxuICAgIHJlYWRvbmx5IHNwZWNzOiBEZWNsYXJhdGlvblNwZWNpZmllcnNBU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgZGVjbGFyYXRvcnM6IHJlYWRvbmx5IERlY2xhcmF0b3JJbml0QVNUTm9kZVtdO1xyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU2ltcGxlRGVjbGFyYXRpb248Q29udGV4dFR5cGUgZXh0ZW5kcyBUcmFuc2xhdGlvblVuaXRDb250ZXh0ID0gVHJhbnNsYXRpb25Vbml0Q29udGV4dD4gZXh0ZW5kcyBCYXNpY0NQUENvbnN0cnVjdDxDb250ZXh0VHlwZT4gaW1wbGVtZW50cyBDUFBDb25zdHJ1Y3Qge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlU3BlY2lmaWVyOiBUeXBlU3BlY2lmaWVyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHN0b3JhZ2VTcGVjaWZpZXI6IFN0b3JhZ2VTcGVjaWZpZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZGVjbGFyYXRvcjogRGVjbGFyYXRvcjtcclxuICAgIHB1YmxpYyByZWFkb25seSBvdGhlclNwZWNpZmllcnM6IE90aGVyU3BlY2lmaWVycztcclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZT86IFR5cGU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG4gICAgIFxyXG4gICAgLy8gQWxsb3cgc3ViY2xhc3NlcyB0byBjdXN0b21pemUgYmVoYXZpb3JcclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZWFkb25seSBpbml0aWFsaXplckFsbG93ZWQ6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgaXNEZWZpbml0aW9uOiBib29sZWFuO1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW5pdGlhbGl6ZXI/OiBJbml0aWFsaXplcjtcclxuICAgIHB1YmxpYyByZWFkb25seSBkZWNsYXJlZEVudGl0eT86IENQUEVudGl0eTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dFR5cGUsIHR5cGVTcGVjOiBUeXBlU3BlY2lmaWVyLCBzdG9yYWdlU3BlYzogU3RvcmFnZVNwZWNpZmllcixcclxuICAgICAgICBkZWNsYXJhdG9yOiBEZWNsYXJhdG9yLCBvdGhlclNwZWNzOiBPdGhlclNwZWNpZmllcnMpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy50eXBlU3BlY2lmaWVyID0gdHlwZVNwZWM7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlU3BlY2lmaWVyID0gc3RvcmFnZVNwZWM7XHJcbiAgICAgICAgdGhpcy5vdGhlclNwZWNpZmllcnMgPSBvdGhlclNwZWNzO1xyXG5cclxuICAgICAgICB0aGlzLmRlY2xhcmF0b3IgPSBkZWNsYXJhdG9yO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IGRlY2xhcmF0b3IubmFtZSE7IC8vIFRPRE86IHJlbW92ZSBub24tbnVsbCBhc3NlcnRpb24gaGVyZSBvbmNlIHR5cGVzY3JpcHQgc3VwcG9ydHMgYXNzZXJ0IGJhc2VkIGNvbnRyb2wgZmxvdyBhbmFseXNpcyAoc29vbilcclxuICAgICAgICBpZiAoIWRlY2xhcmF0b3IubmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0RmFsc2UoXCJTaW1wbGUgZGVjbGFyYXRpb25zIG11c3QgaGF2ZSBhIG5hbWUuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTm9uZSBvZiB0aGUgc2ltcGxlIGRlY2xhcmF0aW9ucyBhcmUgbWVtYmVyIGZ1bmN0aW9uIGRlY2xhcmF0aW9uc1xyXG4gICAgICAgIC8vIGFuZCB0aHVzIG5vbmUgc3VwcG9ydCB0aGUgdmlydHVhbCBrZXl3b3JkXHJcbiAgICAgICAgaWYgKG90aGVyU3BlY3MudmlydHVhbCkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24udmlydHVhbF9wcm9oaWJpdGVkKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRTaW1wbGVEZWNsYXJhdGlvbiBleHRlbmRzIFNpbXBsZURlY2xhcmF0aW9uLCBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcbiAgICByZWFkb25seSB0eXBlOiBUeXBlO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFVua25vd25UeXBlRGVjbGFyYXRpb24gZXh0ZW5kcyBTaW1wbGVEZWNsYXJhdGlvbiB7XHJcblxyXG4gICAgLy8gSWYgdGhlIGRlY2xhcmVkIHR5cGUgY2Fubm90IGJlIGRldGVybWluZWQsIHdlIGRvbid0IHdhbnQgdG8gZ2l2ZVxyXG4gICAgLy8gYSBtZWFuaW5nbGVzcyBlcnJvciB0aGF0IGFuIGluaXRpYWxpemVyIGlzIG5vdCBhbGxvd2VkLCBzbyB3ZSBzZXRcclxuICAgIC8vIHRoaXMgdG8gdHJ1ZS5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBpbml0aWFsaXplckFsbG93ZWQgPSB0cnVlO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBpc0RlZmluaXRpb24gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogdW5kZWZpbmVkO1xyXG4gICAgXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgdHlwZVNwZWM6IFR5cGVTcGVjaWZpZXIsIHN0b3JhZ2VTcGVjOiBTdG9yYWdlU3BlY2lmaWVyLFxyXG4gICAgICAgIGRlY2xhcmF0b3I6IERlY2xhcmF0b3IsIG90aGVyU3BlY3M6IE90aGVyU3BlY2lmaWVycykge1xyXG5cclxuICAgICAgICBzdXBlcihjb250ZXh0LCB0eXBlU3BlYywgc3RvcmFnZVNwZWMsIGRlY2xhcmF0b3IsIG90aGVyU3BlY3MpO1xyXG4gICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi51bmtub3duX3R5cGUodGhpcykpO1xyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBWb2lkRGVjbGFyYXRpb24gZXh0ZW5kcyBTaW1wbGVEZWNsYXJhdGlvbiB7XHJcblxyXG4gICAgLy8gU3VwcHJlc3MgbWVhbmluZ2xlc3MgZXJyb3IsIHNpbmNlIGEgdm9pZCBkZWNsYXJhdGlvbiBpc1xyXG4gICAgLy8gYWx3YXlzIGlsbC1mb3JtZWQsIHdoZXRoZXIgb3Igbm90IGl0IGhhcyBhbiBpbml0aWFsaXplci5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBpbml0aWFsaXplckFsbG93ZWQgPSB0cnVlO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBpc0RlZmluaXRpb24gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZSA9IFZvaWRUeXBlLlZPSUQ7XHJcbiAgICBcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCB0eXBlU3BlYzogVHlwZVNwZWNpZmllciwgc3RvcmFnZVNwZWM6IFN0b3JhZ2VTcGVjaWZpZXIsXHJcbiAgICAgICAgZGVjbGFyYXRvcjogRGVjbGFyYXRvciwgb3RoZXJTcGVjczogT3RoZXJTcGVjaWZpZXJzKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKGNvbnRleHQsIHR5cGVTcGVjLCBzdG9yYWdlU3BlYywgZGVjbGFyYXRvciwgb3RoZXJTcGVjcyk7XHJcbiAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLnZvaWRfcHJvaGliaXRlZCh0aGlzKSk7XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFR5cGVkZWZEZWNsYXJhdGlvbiBleHRlbmRzIFNpbXBsZURlY2xhcmF0aW9uIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgaW5pdGlhbGl6ZXJBbGxvd2VkID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNEZWZpbml0aW9uID0gZmFsc2U7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IHVuZGVmaW5lZDsgLy8gd2lsbCBjaGFuZ2Ugd2hlbiB0eXBlZGVmIGlzIGltcGxlbWVudGVkXHJcbiAgICBcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCB0eXBlU3BlYzogVHlwZVNwZWNpZmllciwgc3RvcmFnZVNwZWM6IFN0b3JhZ2VTcGVjaWZpZXIsXHJcbiAgICAgICAgZGVjbGFyYXRvcjogRGVjbGFyYXRvciwgb3RoZXJTcGVjczogT3RoZXJTcGVjaWZpZXJzKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKGNvbnRleHQsIHR5cGVTcGVjLCBzdG9yYWdlU3BlYywgZGVjbGFyYXRvciwgb3RoZXJTcGVjcyk7XHJcbiAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmxvYnN0ZXIudW5zdXBwb3J0ZWRfZmVhdHVyZSh0aGlzLCBcInR5cGVkZWZcIikpO1xyXG5cclxuXHJcbiAgICAgICAgLy8gQUREIFRISVMgQkFDSyBJTiBXSEVOIFRZUEVERUZTIEFSRSBTVVBQT1JURURcclxuICAgICAgICAvLyBpZiAodGhpcy5zdG9yYWdlU3BlY2lmaWVyLm51bVNwZWNzID4gMCAmJiB0aGlzLmlzVHlwZWRlZikge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uc3RvcmFnZS50eXBlZGVmKHRoaXMsIHRoaXMuc3RvcmFnZVNwZWMuYXN0KSlcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZyaWVuZERlY2xhcmF0aW9uIGV4dGVuZHMgU2ltcGxlRGVjbGFyYXRpb24ge1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBpbml0aWFsaXplckFsbG93ZWQgPSBmYWxzZTtcclxuICAgIHB1YmxpYyByZWFkb25seSBpc0RlZmluaXRpb24gPSBmYWxzZTtcclxuICAgIFxyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IHVuZGVmaW5lZDsgLy8gd2lsbCBjaGFuZ2Ugd2hlbiBmcmllbmQgaXMgaW1wbGVtZW50ZWRcclxuICAgIFxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHR5cGVTcGVjOiBUeXBlU3BlY2lmaWVyLCBzdG9yYWdlU3BlYzogU3RvcmFnZVNwZWNpZmllcixcclxuICAgICAgICBkZWNsYXJhdG9yOiBEZWNsYXJhdG9yLCBvdGhlclNwZWNzOiBPdGhlclNwZWNpZmllcnMpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoY29udGV4dCwgdHlwZVNwZWMsIHN0b3JhZ2VTcGVjLCBkZWNsYXJhdG9yLCBvdGhlclNwZWNzKTtcclxuICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IubG9ic3Rlci51bnN1cHBvcnRlZF9mZWF0dXJlKHRoaXMsIFwiZnJpZW5kXCIpKTtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogQWRkIGJhY2sgaW4gd2hlbiBjbGFzc2VzIGFyZSBzdXBwb3J0ZWRcclxuICAgICAgICAvLyBpZiAoISh0aGlzLmNvbnRleHR1YWxTY29wZSBpbnN0YW5jZW9mIENsYXNzU2NvcGUpKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5mcmllbmQub3V0c2lkZV9jbGFzcyh0aGlzKSk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICBpZiAob3RoZXJTcGVjcy52aXJ0dWFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5mcmllbmQudmlydHVhbF9wcm9oaWJpdGVkKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVua25vd25Cb3VuZEFycmF5RGVjbGFyYXRpb24gZXh0ZW5kcyBTaW1wbGVEZWNsYXJhdGlvbiB7XHJcblxyXG4gICAgLy8gVGhpcyBjbGFzcyBzaG91bGQgb25seSBiZSBjcmVhdGVkIGluIGNhc2VzIHdoZXJlIHRoZSBzaXplIG9mXHJcbiAgICAvLyB0aGUgYXJyYXkgY2Fubm90IGJlIGRldGVybWluZWQgZnJvbSBpdHMgaW5pdGlhbGl6ZXIsIHdoaWNoIGlzXHJcbiAgICAvLyBwcm9ibGVtYXRpYywgYnV0IHRoZSBpbml0aWFsaXplciBpdHNlbGYgaXMgbm90IHByb2hpYml0ZWQuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgaW5pdGlhbGl6ZXJBbGxvd2VkID0gdHJ1ZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNEZWZpbml0aW9uID0gZmFsc2U7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IEFycmF5T2ZVbmtub3duQm91bmRUeXBlO1xyXG4gICAgXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgdHlwZVNwZWM6IFR5cGVTcGVjaWZpZXIsIHN0b3JhZ2VTcGVjOiBTdG9yYWdlU3BlY2lmaWVyLFxyXG4gICAgICAgIGRlY2xhcmF0b3I6IERlY2xhcmF0b3IsIG90aGVyU3BlY3M6IE90aGVyU3BlY2lmaWVycywgdHlwZTogQXJyYXlPZlVua25vd25Cb3VuZFR5cGUpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoY29udGV4dCwgdHlwZVNwZWMsIHN0b3JhZ2VTcGVjLCBkZWNsYXJhdG9yLCBvdGhlclNwZWNzKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5hcnJheS5sZW5ndGhfcmVxdWlyZWQodGhpcykpO1xyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGdW5jdGlvbkRlY2xhcmF0aW9uIGV4dGVuZHMgU2ltcGxlRGVjbGFyYXRpb24ge1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBpbml0aWFsaXplckFsbG93ZWQgPSBmYWxzZTtcclxuICAgIHB1YmxpYyByZWFkb25seSBpc0RlZmluaXRpb24gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogRnVuY3Rpb25UeXBlO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGRlY2xhcmVkRW50aXR5OiBGdW5jdGlvbkVudGl0eTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyYW1ldGVyRGVjbGFyYXRvcnM6IHJlYWRvbmx5IERlY2xhcmF0b3JbXTsgLy8gZGVmaW5lZCBpZiB0aGlzIGlzIGEgZGVjbGFyYXRvciBvZiBmdW5jdGlvbiB0eXBlXHJcbiAgICBcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBUcmFuc2xhdGlvblVuaXRDb250ZXh0LCB0eXBlU3BlYzogVHlwZVNwZWNpZmllciwgc3RvcmFnZVNwZWM6IFN0b3JhZ2VTcGVjaWZpZXIsXHJcbiAgICAgICAgZGVjbGFyYXRvcjogRGVjbGFyYXRvciwgb3RoZXJTcGVjczogT3RoZXJTcGVjaWZpZXJzLCB0eXBlOiBGdW5jdGlvblR5cGUpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoY29udGV4dCwgdHlwZVNwZWMsIHN0b3JhZ2VTcGVjLCBkZWNsYXJhdG9yLCBvdGhlclNwZWNzKTtcclxuXHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLmRlY2xhcmVkRW50aXR5ID0gbmV3IEZ1bmN0aW9uRW50aXR5KHR5cGUsIHRoaXMpO1xyXG5cclxuICAgICAgICBhc3NlcnQoISF0aGlzLmRlY2xhcmF0b3IucGFyYW1ldGVycywgXCJUaGUgZGVjbGFyYXRvciBmb3IgYSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBtdXN0IGNvbnRhaW4gZGVjbGFyYXRvcnMgZm9yIGl0cyBwYXJhbWV0ZXJzIGFzIHdlbGwuXCIpO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVyRGVjbGFyYXRvcnMgPSB0aGlzLmRlY2xhcmF0b3IucGFyYW1ldGVycyE7XHJcblxyXG4gICAgICAgIC8vIElmIG1haW4sIHNob3VsZCBoYXZlIG5vIHBhcmFtZXRlcnNcclxuICAgICAgICBpZiAodGhpcy5kZWNsYXJlZEVudGl0eS5pc01haW4oKSAmJiB0aGlzLnR5cGUucGFyYW1UeXBlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5mdW5jLm1haW5QYXJhbXModGhpcy5kZWNsYXJhdG9yKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuICAgICAgICAvLyBpZiAodGhpcy5pc01lbWJlckZ1bmN0aW9uKXtcclxuICAgICAgICAvLyAgICAgdGhpcy5pX2NvbnRhaW5pbmdDbGFzcy5hZGRNZW1iZXIodGhpcy5lbnRpdHkpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcblxyXG4gICAgICAgIC8vIGlmICghdGhpcy5pc01lbWJlckZ1bmN0aW9uICYmIHRoaXMudmlydHVhbCl7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5mdW5jLnZpcnR1YWxfbm90X2FsbG93ZWQodGhpcykpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgLy8gdGhpcy5jaGVja092ZXJsb2FkU2VtYW50aWNzKCk7XHJcblxyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmNvbnRleHR1YWxTY29wZS5hZGREZWNsYXJlZEVudGl0eSh0aGlzLmRlY2xhcmVkRW50aXR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIE5vdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQSBmdW5jdGlvbiBkZWNsYXJhdGlvbiBoYXMgbGlua2FnZSwgdW5sZXNzIGl0IGlzIGEgbG9jYWwgZnVuY3Rpb24gZGVjbGFyYXRpb24gaW4gYSBibG9jayBzY29wZVxyXG4gICAgICAgIC8vICh3aGljaCBoYXMgbm8gbGlua2FnZSkuIFRoZSBsaW5rYWdlIGlzIHByZXN1bWVkIHRvIGJlIGV4dGVybmFsLCBiZWNhdXNlIExvYnN0ZXIgZG9lcyBub3RcclxuICAgICAgICAvLyBzdXBwb3J0IHVzaW5nIHRoZSBzdGF0aWMga2V5d29yZCB0byBzcGVjaWZ5IGludGVybmFsIGxpbmthZ2UuXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGV4dC5jb250ZXh0dWFsU2NvcGUgaW5zdGFuY2VvZiBOYW1lc3BhY2VTY29wZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQudHJhbnNsYXRpb25Vbml0LnByb2dyYW0ucmVnaXN0ZXJMaW5rZWRFbnRpdHkodGhpcy5kZWNsYXJlZEVudGl0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcblxyXG5cclxuICAgIC8vIGNoZWNrT3ZlcmxvYWRTZW1hbnRpY3MgOiBmdW5jdGlvbigpe1xyXG4gICAgLy8gICAgIGlmICh0aGlzLm5hbWUgPT09IFwib3BlcmF0b3I9XCIgfHwgdGhpcy5uYW1lID09PSBcIm9wZXJhdG9yKClcIiB8fCB0aGlzLm5hbWUgPT09IFwib3BlcmF0b3JbXVwiKXtcclxuICAgIC8vICAgICAgICAgaWYgKCF0aGlzLmlzTWVtYmVyRnVuY3Rpb24pe1xyXG4gICAgLy8gICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmZ1bmMub3BfbWVtYmVyKHRoaXMpKTtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgaWYgKHRoaXMubmFtZSA9PT0gXCJvcGVyYXRvcltdXCIgJiYgdGhpcy5wYXJhbXMubGVuZ3RoICE9PSAxKXtcclxuICAgIC8vICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmZ1bmMub3Bfc3Vic2NyaXB0X29uZV9wYXJhbSh0aGlzKSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfSxcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWYXJpYWJsZURlZmluaXRpb248Q29udGV4dFR5cGUgZXh0ZW5kcyBUcmFuc2xhdGlvblVuaXRDb250ZXh0ID0gVHJhbnNsYXRpb25Vbml0Q29udGV4dD4gZXh0ZW5kcyBTaW1wbGVEZWNsYXJhdGlvbjxDb250ZXh0VHlwZT4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBpbml0aWFsaXplcj86IEluaXRpYWxpemVyO1xyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBkZWNsYXJlZEVudGl0eTogVmFyaWFibGVFbnRpdHk7XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRJbml0aWFsaXplcihpbml0OiBJbml0aWFsaXplcikge1xyXG4gICAgICAgIGFzc2VydCghdGhpcy5pbml0aWFsaXplcik7XHJcbiAgICAgICAgKDxNdXRhYmxlPHRoaXM+PnRoaXMpLmluaXRpYWxpemVyID0gaW5pdDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0RGVmYXVsdEluaXRpYWxpemVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldEluaXRpYWxpemVyKERlZmF1bHRJbml0aWFsaXplci5jcmVhdGUodGhpcy5jb250ZXh0LCB0aGlzLmRlY2xhcmVkRW50aXR5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldERpcmVjdEluaXRpYWxpemVyKGFyZ3M6IHJlYWRvbmx5IEV4cHJlc3Npb25bXSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldEluaXRpYWxpemVyKERpcmVjdEluaXRpYWxpemVyLmNyZWF0ZSh0aGlzLmNvbnRleHQsIHRoaXMuZGVjbGFyZWRFbnRpdHksIGFyZ3MpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Q29weUluaXRpYWxpemVyKGFyZ3M6IHJlYWRvbmx5IEV4cHJlc3Npb25bXSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldEluaXRpYWxpemVyKENvcHlJbml0aWFsaXplci5jcmVhdGUodGhpcy5jb250ZXh0LCB0aGlzLmRlY2xhcmVkRW50aXR5LCBhcmdzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEluaXRpYWxpemVyTGlzdChhcmdzOiByZWFkb25seSBFeHByZXNzaW9uW10pIHtcclxuICAgICAgICAvLyBUT0RPIGltcGxlbWVudCBpbml0aWFsaXplciBsaXN0c1xyXG4gICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5sb2JzdGVyLnVuc3VwcG9ydGVkX2ZlYXR1cmUodGhpcywgXCJpbml0aWFsaXplciBsaXN0c1wiKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRWYXJpYWJsZURlZmluaXRpb248VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIFZhcmlhYmxlRGVmaW5pdGlvbiwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgZGVjbGFyZWRFbnRpdHk6IFZhcmlhYmxlRW50aXR5PFQ+O1xyXG4gICAgcmVhZG9ubHkgaW5pdGlhbGl6ZXI/OiBDb21waWxlZEluaXRpYWxpemVyPFQ+O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIExvY2FsVmFyaWFibGVEZWZpbml0aW9uIGV4dGVuZHMgVmFyaWFibGVEZWZpbml0aW9uPEJsb2NrQ29udGV4dD4ge1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBpbml0aWFsaXplckFsbG93ZWQgPSB0cnVlO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGlzRGVmaW5pdGlvbiA9IHRydWU7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGUgOiBPYmplY3RUeXBlIHwgUmVmZXJlbmNlVHlwZTtcclxuICAgIHB1YmxpYyByZWFkb25seSBkZWNsYXJlZEVudGl0eTogQXV0b0VudGl0eTxPYmplY3RUeXBlPiB8IExvY2FsUmVmZXJlbmNlRW50aXR5PE9iamVjdFR5cGU+O1xyXG4gICAgXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogQmxvY2tDb250ZXh0LCB0eXBlU3BlYzogVHlwZVNwZWNpZmllciwgc3RvcmFnZVNwZWM6IFN0b3JhZ2VTcGVjaWZpZXIsXHJcbiAgICAgICAgZGVjbGFyYXRvcjogRGVjbGFyYXRvciwgb3RoZXJTcGVjczogT3RoZXJTcGVjaWZpZXJzLCB0eXBlOiBPYmplY3RUeXBlIHwgUmVmZXJlbmNlVHlwZSkge1xyXG5cclxuICAgICAgICBzdXBlcihjb250ZXh0LCB0eXBlU3BlYywgc3RvcmFnZVNwZWMsIGRlY2xhcmF0b3IsIG90aGVyU3BlY3MpO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG5cclxuICAgICAgICB0aGlzLmRlY2xhcmVkRW50aXR5ID0gXHJcbiAgICAgICAgICAgIHR5cGUuaXNSZWZlcmVuY2VUeXBlKCkgPyBuZXcgTG9jYWxSZWZlcmVuY2VFbnRpdHkodHlwZS5yZWZUbywgdGhpcykgOiBuZXcgQXV0b0VudGl0eSh0eXBlLCB0aGlzKTtcclxuXHJcblxyXG4gICAgICAgIC8vIE5vdGUgZXh0ZXJuIHVuc3VwcG9ydGVkIGVycm9yIGlzIGFkZGVkIGluIHRoZSBiYXNlIERlY2xhcmF0aW9uIGNsYXNzLCBzbyBubyBuZWVkIHRvIGFkZCBoZXJlXHJcblxyXG4gICAgICAgIC8vIEFsbCBsb2NhbCBkZWNsYXJhdGlvbnMgYXJlIGFsc28gZGVmaW5pdGlvbnMsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBhIGxvY2FsIGRlY2xhcmF0aW9uIG9mIGEgZnVuY3Rpb25cclxuICAgICAgICAvLyBvciBhIGxvY2FsIGRlY2xhcmF0aW9uIHdpdGggdGhlIGV4dGVybiBzdG9yYWdlIHNwZWNpZmllciwgYnV0IHRob3NlIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBieSBMb2JzdGVyLlxyXG4gICAgICAgIC8vIFRoaXMgbWVhbnMgYSBsb2NhbGx5IGRlY2xhcmVkIHZhcmlhYmxlIGRvZXMgbm90IGhhdmUgbGlua2FnZSwgYW5kIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55IGxpbmtpbmcgc3R1ZmYgaGVyZS5cclxuXHJcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBhZGQgdGhlIGRlY2xhcmVkIGVudGl0eSB0byB0aGUgc2NvcGUuIElmIGl0IGZhaWxzLCBub3RlIHRoZSBlcnJvci5cclxuICAgICAgICAvLyAoZS5nLiBhbiBlbnRpdHkgd2l0aCB0aGUgc2FtZSBuYW1lIHdhcyBhbHJlYWR5IGRlY2xhcmVkIGluIHRoZSBzYW1lIHNjb3BlKVxyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmNvbnRleHR1YWxTY29wZS5hZGREZWNsYXJlZEVudGl0eSh0aGlzLmRlY2xhcmVkRW50aXR5KTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZ1bmN0aW9uTG9jYWxzLnJlZ2lzdGVyTG9jYWxWYXJpYWJsZSh0aGlzLmRlY2xhcmVkRW50aXR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIE5vdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkTG9jYWxWYXJpYWJsZURlZmluaXRpb248VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIExvY2FsVmFyaWFibGVEZWZpbml0aW9uLCBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcbiAgICByZWFkb25seSBkZWNsYXJlZEVudGl0eTogQXV0b0VudGl0eTxUPiB8IExvY2FsUmVmZXJlbmNlRW50aXR5PFQ+XHJcbiAgICByZWFkb25seSBpbml0aWFsaXplcj86IENvbXBpbGVkSW5pdGlhbGl6ZXI8VD47XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgR2xvYmFsT2JqZWN0RGVmaW5pdGlvbiBleHRlbmRzIFZhcmlhYmxlRGVmaW5pdGlvbiB7XHJcblxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGluaXRpYWxpemVyQWxsb3dlZCA9IHRydWU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNEZWZpbml0aW9uID0gdHJ1ZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZSA6IE9iamVjdFR5cGUgfCBSZWZlcmVuY2VUeXBlO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGRlY2xhcmVkRW50aXR5ITogU3RhdGljRW50aXR5PE9iamVjdFR5cGU+OyAvLyBvbmx5IGFsbG93cyB1bmRlZmluZWQgYmVjYXVzZSBnbG9iYWwgcmVmZXJlbmNlcyBhcmUgbm90IHlldCBzdXBwb3J0ZWRcclxuICAgIFxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIHR5cGVTcGVjOiBUeXBlU3BlY2lmaWVyLCBzdG9yYWdlU3BlYzogU3RvcmFnZVNwZWNpZmllcixcclxuICAgICAgICBkZWNsYXJhdG9yOiBEZWNsYXJhdG9yLCBvdGhlclNwZWNzOiBPdGhlclNwZWNpZmllcnMsIHR5cGU6IE9iamVjdFR5cGUgfCBSZWZlcmVuY2VUeXBlKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKGNvbnRleHQsIHR5cGVTcGVjLCBzdG9yYWdlU3BlYywgZGVjbGFyYXRvciwgb3RoZXJTcGVjcyk7XHJcblxyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcblxyXG4gICAgICAgIGlmICh0eXBlLmlzUmVmZXJlbmNlVHlwZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5sb2JzdGVyLnVuc3VwcG9ydGVkX2ZlYXR1cmUodGhpcywgXCJnbG9iYWxseSBzY29wZWQgcmVmZXJlbmNlc1wiKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGVjbGFyZWRFbnRpdHkgPSBuZXcgU3RhdGljRW50aXR5KHR5cGUsIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyBBdHRlbXB0IHRvIGFkZCB0aGUgZGVjbGFyZWQgZW50aXR5IHRvIHRoZSBzY29wZS4gSWYgaXQgZmFpbHMsIG5vdGUgdGhlIGVycm9yLlxyXG4gICAgICAgIC8vIChlLmcuIGFuIGVudGl0eSB3aXRoIHRoZSBzYW1lIG5hbWUgd2FzIGFscmVhZHkgZGVjbGFyZWQgaW4gdGhlIHNhbWUgc2NvcGUpXHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuY29udGV4dHVhbFNjb3BlLmFkZERlY2xhcmVkRW50aXR5KHRoaXMuZGVjbGFyZWRFbnRpdHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgTm90ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRleHQudHJhbnNsYXRpb25Vbml0LnByb2dyYW0ucmVnaXN0ZXJHbG9iYWxPYmplY3REZWZpbml0aW9uKHRoaXMuZGVjbGFyZWRFbnRpdHkucXVhbGlmaWVkTmFtZSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVE9ETyBjcmVhdGUgb2JqZWN0IHdpdGggbGlua2FnZSBpZiBhcHByb3ByaWF0ZVxyXG4gICAgICAgICAgICAvLyB0aGlzLmNvbnRleHQudHJhbnNsYXRpb25Vbml0LnJlZ2lzdGVyRGVmaW5pdGlvbihlbnRpdHksIHRoaXMpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZEdsb2JhbE9iamVjdERlZmluaXRpb248VCBleHRlbmRzIE9iamVjdFR5cGUgPSBPYmplY3RUeXBlPiBleHRlbmRzIEdsb2JhbE9iamVjdERlZmluaXRpb24sIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuICAgIHJlYWRvbmx5IGRlY2xhcmVkRW50aXR5OiBTdGF0aWNFbnRpdHk8VD47XHJcbiAgICByZWFkb25seSBpbml0aWFsaXplcj86IENvbXBpbGVkSW5pdGlhbGl6ZXI8VD47XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUGFyYW1ldGVyRGVmaW5pdGlvbiBleHRlbmRzIFNpbXBsZURlY2xhcmF0aW9uIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgaW5pdGlhbGl6ZXJBbGxvd2VkID0gdHJ1ZTtcclxuICAgIHB1YmxpYyByZWFkb25seSBpc0RlZmluaXRpb24gPSB0cnVlO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSB0eXBlIDogUG90ZW50aWFsUGFyYW1ldGVyVHlwZTtcclxuICAgIHB1YmxpYyByZWFkb25seSBkZWNsYXJlZEVudGl0eTogQXV0b0VudGl0eTxPYmplY3RUeXBlPiB8IExvY2FsUmVmZXJlbmNlRW50aXR5PE9iamVjdFR5cGU+O1xyXG4gICAgXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogRnVuY3Rpb25Db250ZXh0LCB0eXBlU3BlYzogVHlwZVNwZWNpZmllciwgc3RvcmFnZVNwZWM6IFN0b3JhZ2VTcGVjaWZpZXIsXHJcbiAgICAgICAgZGVjbGFyYXRvcjogRGVjbGFyYXRvciwgb3RoZXJTcGVjczogT3RoZXJTcGVjaWZpZXJzLCB0eXBlOiBQb3RlbnRpYWxQYXJhbWV0ZXJUeXBlKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKGNvbnRleHQsIHR5cGVTcGVjLCBzdG9yYWdlU3BlYywgZGVjbGFyYXRvciwgb3RoZXJTcGVjcyk7XHJcblxyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcblxyXG4gICAgICAgIHRoaXMuZGVjbGFyZWRFbnRpdHkgPSBcclxuICAgICAgICAgICAgdGhpcy50eXBlLmlzUmVmZXJlbmNlVHlwZSgpID8gbmV3IExvY2FsUmVmZXJlbmNlRW50aXR5KHRoaXMudHlwZS5yZWZUbywgdGhpcywgdHJ1ZSkgOlxyXG4gICAgICAgICAgICBuZXcgQXV0b0VudGl0eSh0aGlzLnR5cGUsIHRoaXMsIHRydWUpO1xyXG5cclxuICAgICAgICAvLyBBdHRlbXB0IHRvIGFkZCB0aGUgZGVjbGFyZWQgZW50aXR5IHRvIHRoZSBzY29wZS4gSWYgaXQgZmFpbHMsIG5vdGUgdGhlIGVycm9yLlxyXG4gICAgICAgIC8vIChlLmcuIGFuIGVudGl0eSB3aXRoIHRoZSBzYW1lIG5hbWUgd2FzIGFscmVhZHkgZGVjbGFyZWQgaW4gdGhlIHNhbWUgc2NvcGUpXHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuY29udGV4dHVhbFNjb3BlLmFkZERlY2xhcmVkRW50aXR5KHRoaXMuZGVjbGFyZWRFbnRpdHkpO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIGRlZmluZWQgbG9jYWwgb2JqZWN0L3JlZmVyZW5jZVxyXG4gICAgICAgICAgICBjb250ZXh0LmZ1bmN0aW9uTG9jYWxzLnJlZ2lzdGVyTG9jYWxWYXJpYWJsZSh0aGlzLmRlY2xhcmVkRW50aXR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIE5vdGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5pbnRlcmZhY2UgQXJyYXlQb3N0Zml4RGVjbGFyYXRvckFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkga2luZDogXCJhcnJheVwiO1xyXG4gICAgcmVhZG9ubHkgc2l6ZT86IEV4cHJlc3Npb25BU1ROb2RlO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFyZ3VtZW50RGVjbGFyYXRpb25BU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGRlY2xhcmF0b3I6IERlY2xhcmF0b3JBU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgc3BlY3M6IERlY2xhcmF0aW9uU3BlY2lmaWVyc0FTVE5vZGU7XHJcbiAgICByZWFkb25seSBpbml0aWFsaXplcj86IEluaXRpYWxpemVyQVNUTm9kZTtcclxufVxyXG5cclxuaW50ZXJmYWNlIEZ1bmN0aW9uUG9zdGZpeERlY2xhcmF0b3JBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGtpbmQ6IFwiZnVuY3Rpb25cIjtcclxuICAgIHJlYWRvbmx5IHNpemU6IEV4cHJlc3Npb25BU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgYXJnczogcmVhZG9ubHkgQXJndW1lbnREZWNsYXJhdGlvbkFTVE5vZGVbXTtcclxuICAgIHJlYWRvbmx5IGNvbnN0PzogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIERlY2xhcmF0b3JBU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBwdXJlVmlydHVhbD86IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBzdWI/OiBEZWNsYXJhdG9yQVNUTm9kZTsgLy8gcGFyZW50aGVzZXNcclxuICAgIHJlYWRvbmx5IHBvaW50ZXI/OiBEZWNsYXJhdG9yQVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IHJlZmVyZW5jZT86IERlY2xhcmF0b3JBU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgY29uc3Q/OiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgdm9sYXRpbGU/OiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgbmFtZT86IElkZW50aWZpZXJBU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgcG9zdGZpeGVzPzogcmVhZG9ubHkgKEFycmF5UG9zdGZpeERlY2xhcmF0b3JBU1ROb2RlIHwgRnVuY3Rpb25Qb3N0Zml4RGVjbGFyYXRvckFTVE5vZGUpW107XHJcbn1cclxuXHJcbmludGVyZmFjZSBEZWNsYXJhdG9ySW5pdEFTVE5vZGUgZXh0ZW5kcyBEZWNsYXJhdG9yQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBpbml0aWFsaXplcj86IEluaXRpYWxpemVyQVNUTm9kZTtcclxufVxyXG5cclxuLy8gVE9ETzogdGFrZSBiYXNlVHlwZSBhcyBhIHBhcmFtZXRlciB0byBjb21waWxlIHJhdGhlciB0aGFuIGluaXRcclxuZXhwb3J0IGNsYXNzIERlY2xhcmF0b3IgZXh0ZW5kcyBCYXNpY0NQUENvbnN0cnVjdCB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZT86IFR5cGU7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGJhc2VUeXBlPzogVHlwZTtcclxuICAgIHB1YmxpYyByZWFkb25seSBpc1B1cmVWaXJ0dWFsPzogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyYW1ldGVycz86IHJlYWRvbmx5IERlY2xhcmF0b3JbXTsgLy8gZGVmaW5lZCBpZiB0aGlzIGlzIGEgZGVjbGFyYXRvciBvZiBmdW5jdGlvbiB0eXBlXHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tQVNUKGFzdDogRGVjbGFyYXRvckFTVE5vZGUsIGNvbnRleHQ6IFRyYW5zbGF0aW9uVW5pdENvbnRleHQsIGJhc2VUeXBlOiBUeXBlIHwgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEZWNsYXJhdG9yKGNvbnRleHQsIGFzdCwgYmFzZVR5cGUpOyAvLyBOb3RlIC5zZXRBU1QoYXN0KSBpcyBjYWxsZWQgaW4gdGhlIGN0b3IgYWxyZWFkeVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIGBEZWNsYXJhdG9yLmNyZWF0ZUZyb21BU1QoKWAgc2hvdWxkIGFsd2F5cyBiZSB1c2VkIHRvIGNyZWF0ZSBEZWNsYXJhdG9ycywgd2hpY2ggZGVsZWdhdGVzXHJcbiAgICAgKiB0byB0aGlzIHByaXZhdGUgY29uc3RydWN0b3IuIERpcmVjdGx5IGNhbGxpbmcgdGhlIGNvbnN0cnVjdG9yIGZyb20gdGhlIG91dHNpZGUgaXMgbm90IGFsbG93ZWQuXHJcbiAgICAgKiBTaW5jZSBkZWNsYXJhdG9ycyBhcmUgbGFyZ2VseSBhYm91dCBwcm9jZXNzaW5nIGFuIEFTVCwgaXQgZG9lc24ndCBtYWtlIG11Y2ggc2Vuc2UgdG8gY3JlYXRlXHJcbiAgICAgKiBvbmUgd2l0aG91dCBhbiBBU1QuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgYXN0OiBEZWNsYXJhdG9yQVNUTm9kZSwgYmFzZVR5cGU6IFR5cGUgfCB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgICAgICB0aGlzLnNldEFTVChhc3QpO1xyXG4gICAgICAgIHRoaXMuYmFzZVR5cGUgPSBiYXNlVHlwZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBsZXQgaXNNZW1iZXIgPSBpc0EodGhpcy5wYXJlbnQsIERlY2xhcmF0aW9ucy5NZW1iZXIpO1xyXG5cclxuICAgICAgICBpZiAoYXN0LnB1cmVWaXJ0dWFsKSB7IHRoaXMuaXNQdXJlVmlydHVhbCA9IHRydWU7IH1cclxuXHJcbiAgICAgICAgdGhpcy5kZXRlcm1pbmVOYW1lQW5kVHlwZShhc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGV0ZXJtaW5lTmFtZUFuZFR5cGUoYXN0OiBEZWNsYXJhdG9yQVNUTm9kZSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghdGhpcy5iYXNlVHlwZSkgeyAvLyBJZiB0aGVyZSdzIG5vIGJhc2UgdHlwZSwgd2UgcmVhbGx5IGNhbid0IGRvIG11Y2hcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHR5cGUgPSB0aGlzLmJhc2VUeXBlO1xyXG5cclxuICAgICAgICBsZXQgZmlyc3QgPSB0cnVlO1xyXG4gICAgICAgIC8vIGxldCBwcmV2S2luZCA6IFwiZnVuY3Rpb25cIiB8IFwicmVmZXJlbmNlXCIgfCBcInBvaW50ZXJcIiB8IFwiYXJyYXlcIiB8IFwibm9uZVwiID0gXCJub25lXCI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGRlY2w6IERlY2xhcmF0b3JBU1ROb2RlIHwgdW5kZWZpbmVkID0gYXN0OyAvLyBBU1Qgd2lsbCBhbHdheXMgYmUgcHJlc2VudCBvbiBEZWNsYXJhdG9yc1xyXG4gICAgICAgIHdoaWxlIChkZWNsKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBXZSB3YW50IHRvIGNoZWNrIHdoZXRoZXIgdGhpcyBpcyB0aGUgaW5uZXJtb3N0IHRoaW5nLCBidXQgZmlyc3Qgd2UgbmVlZCB0byBsb29wXHJcbiAgICAgICAgICAgIC8vIHRvIGRlc2NlbmQgdGhyb3VnaCBhbnkgQVNUIHJlcHJlc2VudGF0aW9uIG9mIHBhcmVudGhlc2VzIHdpdGhpbiB0aGUgZGVjbGFyYXRvci5cclxuICAgICAgICAgICAgbGV0IHRlbXBEZWNsID0gZGVjbDtcclxuICAgICAgICAgICAgd2hpbGUodGVtcERlY2wuc3ViKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wRGVjbCA9IHRlbXBEZWNsLnN1YjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IGlzSW5uZXJtb3N0ID0gISh0ZW1wRGVjbC5wb2ludGVyIHx8IHRlbXBEZWNsLnJlZmVyZW5jZSB8fCB0ZW1wRGVjbC5zdWIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRlY2wubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgKDxNdXRhYmxlPHRoaXM+PnRoaXMpLm5hbWUgPSBkZWNsLm5hbWUuaWRlbnRpZmllcjtcclxuICAgICAgICAgICAgICAgIGNoZWNrSWRlbnRpZmllcih0aGlzLCBkZWNsLm5hbWUuaWRlbnRpZmllciwgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWNsLnBvc3RmaXhlcykge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBhcmVQb3N0Zml4ZXNJbm5lcm1vc3QgPSBpc0lubmVybW9zdDtcclxuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IGRlY2wucG9zdGZpeGVzLmxlbmd0aC0xOyBpID49IDA7IC0taSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBBIHBvc3RmaXggcG9ydGlvbiBvZiBhIGRlY2xhcmF0b3IgaXMgb25seSBpbm5lcm1vc3QgaWYgaXQncyB0aGUgbGVmdG1vc3Qgb25lLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIHdvdWxkIGJlIGNsb3Nlc3QgdG8gd2hlcmUgdGhlIG5hbWUgd291bGQgb2NjdXIgaW4gdGhlIGRlY2xhcmF0b3IuIChOb3RlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCB0aGlzIGlzIGFsc28gdGhlIGxhc3Qgb25lIHByb2Nlc3NlZCBoZXJlLCBzaW5jZSB3ZSBpdGVyYXRlIGJhY2t3YXJkIGRvd24gdG8gMC4pXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvc3RmaXggPSBkZWNsLnBvc3RmaXhlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpc0lubmVybW9zdCA9IGFyZVBvc3RmaXhlc0lubmVybW9zdCAmJiBpID09PSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZihwb3N0Zml4LmtpbmQgPT09IFwiYXJyYXlcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZS5pc0JvdW5kZWRBcnJheVR5cGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmFycmF5Lm11bHRpZGltZW5zaW9uYWxfYXJyYXlzX3Vuc3VwcG9ydGVkKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0eXBlLmlzQXJyYXlFbGVtVHlwZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uYXJyYXkuaW52YWxpZF9lbGVtZW50X3R5cGUodGhpcywgdHlwZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIGEgcGFyYW1ldGVyIGFuZCBpdCdzIGFuIGFycmF5LCBhZGp1c3QgdG8gcG9pbnRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgdG8gUGFyYW1ldGVyIERlY2xhcmF0aW9uIGNsYXNzIGluc3RlYWQgb2YgaGVyZSBzbyB0aGF0IGEgRGVjbGFyYXRvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb2Vzbid0IG5lZWQgaW5mb3JtYXRpb24gYWJvdXQgaXRzIGNvbnRleHQgKGkuZS4gd2hldGhlciBpdCdzIGluIGEgcGFyYW1ldGVyKSB0byBkbyBpdHMgam9iLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoaXNQYXJhbSAmJiBpbm5lcm1vc3QgJiYgaSA9PSBkZWNsLnBvc3RmaXhlcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBwcmV2ID0gXCJwb2ludGVyXCI7IC8vIERvbid0IHRoaW5rIHRoaXMgaXMgbmVjZXNzYXJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB0eXBlID0gVHlwZXMuUG9pbnRlci5pbnN0YW5jZSh0eXBlLCBkZWNsW1wiY29uc3RcIl0sIGRlY2xbXCJ2b2xhdGlsZVwiXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3N0Zml4LnNpemUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zdGZpeC5zaXplLmNvbnN0cnVjdF90eXBlID09PSBcIm51bWVyaWNfbGl0ZXJhbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNpemUgc3BlY2lmaWVkIGlzIGEgbGl0ZXJhbCwganVzdCB1c2UgaXRzIHZhbHVlIGFzIGFycmF5IGxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBuZXcgQm91bmRlZEFycmF5VHlwZSh0eXBlLCBwYXJzZU51bWVyaWNMaXRlcmFsVmFsdWVGcm9tQVNUKHBvc3RmaXguc2l6ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSBzaXplIGlzIHNwZWNpZmllZCwgdGhhdCBpcyBub3QgYSBsaXRlcmFsLCBpdCBtdXN0IGJlIGFuIGV4cHJlc3Npb24gKHZpYSB0aGUgZ3JhbW1hcikuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBzaXplIGV4cHJlc3Npb24gY291bGQgZS5nLiBiZSB1c2VkIGZvciBhIGR5bmFtaWNhbGx5IGFsbG9jYXRlZCBhcnJheS4gSW4gdGhhdCBjYXNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHByb3ZpZGUgdGhlIEFTVCBvZiB0aGUgc2l6ZSBleHByZXNzaW9uIGFzIHBhcnQgb2YgdGhlIHR5cGUgc28gaXQgY2FuIGJlIHVzZWQgbGF0ZXIgYnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhIG5ldyBleHByZXNzaW9uIHRvIGNvbnN0cnVjdCB0aGUgc2l6ZSBzdWJleHByZXNzaW9uIGZvciB0aGUgYWxsb2NhdGVkIGFycmF5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBuZXcgQXJyYXlPZlVua25vd25Cb3VuZFR5cGUodHlwZSwgcG9zdGZpeC5zaXplKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRoZSBzaXplIGlzIGEgY29tcGlsZS10aW1lIGNvbnN0YW50IGV4cHJlc3Npb24sIGluIHdoaWNoIGNhc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCBzaG91bGQgYmUgZXZhbHVhdGVkIHRvIGRldGVybWluZSB0aGUgc2l6ZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoZXNlIGVycm9ycyBlbHNld2hlcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChwb3N0Zml4LnNpemUuY29uc3RydWN0X3R5cGUgIT09IFwibGl0ZXJhbFwiICYmICEoaXNJbm5lcm1vc3QgJiYgaXNBKHRoaXMucGFyZW50LCBFeHByZXNzaW9ucy5OZXdFeHByZXNzaW9uKSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLy9UT0RPIG5lZWQgdG8gZXZhbHVhdGUgc2l6ZSBvZiBhcnJheSBpZiBpdCdzIGEgY29tcGlsZS10aW1lIGNvbnN0YW50IGV4cHJlc3Npb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uYXJyYXkubGl0ZXJhbF9sZW5ndGhfb25seSh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIGlmIChwb3N0Zml4LnNpemUuY29uc3RydWN0X3R5cGUgPT09IFwibGl0ZXJhbFwiICYmIHBvc3RmaXguc2l6ZS52YWx1ZSA9PSAwICYmICEoaW5uZXJtb3N0ICYmIGlzQSh0aGlzLnBhcmVudCwgRXhwcmVzc2lvbnMuTmV3RXhwcmVzc2lvbikpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uYXJyYXkuemVyb19sZW5ndGgodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSBzaXplIHdhcyBmaW5lIGFuZCBub3RoaW5nIG5lZWRzIHRvIGJlIGRvbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBuZXcgQXJyYXlPZlVua25vd25Cb3VuZFR5cGUodHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocG9zdGZpeC5raW5kID09PSBcImZ1bmN0aW9uXCIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHlwZS5pc1BvdGVudGlhbFJldHVyblR5cGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUuaXNGdW5jdGlvblR5cGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5mdW5jLnJldHVybl9mdW5jKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUuaXNCb3VuZGVkQXJyYXlUeXBlKCkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5mdW5jLnJldHVybl9hcnJheSh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uZnVuYy5pbnZhbGlkX3JldHVybl90eXBlKHRoaXMsIHR5cGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmFtRGVjbGFyYXRvcnMgPSBwb3N0Zml4LmFyZ3MubWFwKChhcmdBU1QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0b3JhZ2VTcGVjID0gU3RvcmFnZVNwZWNpZmllci5jcmVhdGVGcm9tQVNUKGFyZ0FTVC5zcGVjcy5zdG9yYWdlU3BlY3MsIHRoaXMuY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaChzdG9yYWdlU3BlYyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdG9yYWdlU3BlYy5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZVNwZWMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5wYXJhbWV0ZXIuc3RvcmFnZV9wcm9oaWJpdGVkKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGNyZWF0ZSBUeXBlU3BlY2lmaWVyIGZpcnN0IHRvIGdldCB0aGUgYmFzZSB0eXBlIGZpcnN0IGZvciB0aGUgZGVjbGFyYXRvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eXBlU3BlYyA9IFR5cGVTcGVjaWZpZXIuY3JlYXRlRnJvbUFTVChhcmdBU1Quc3BlY3MudHlwZVNwZWNzLCB0aGlzLmNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRhY2godHlwZVNwZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21waWxlIGRlY2xhcmF0b3IgZm9yIGVhY2ggcGFyYW1ldGVyIChvZiB0aGUgZnVuY3Rpb24tdHlwZSBhcmd1bWVudCBpdHNlbGYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGVjbGFyYXRvci5jcmVhdGVGcm9tQVNUKGFyZ0FTVC5kZWNsYXJhdG9yLCB0aGlzLmNvbnRleHQsIHR5cGVTcGVjLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKDxNdXRhYmxlPHRoaXM+PnRoaXMpLnBhcmFtZXRlcnMgPSBwYXJhbURlY2xhcmF0b3JzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmFtVHlwZXMgPSBwYXJhbURlY2xhcmF0b3JzLm1hcChkZWNsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGVjbC50eXBlKSB7IHJldHVybiBkZWNsLnR5cGU7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGVjbC50eXBlLmlzQm91bmRlZEFycmF5VHlwZSgpKSB7IHJldHVybiBkZWNsLnR5cGU7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgeyByZXR1cm4gZGVjbC50eXBlLmFkanVzdFRvUG9pbnRlclR5cGUoKTt9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSBwYXJhbWV0ZXIgbGlzdCBvZiBqdXN0ICh2b2lkKSBzcGVjaWZpZXMgbm8gcGFyYW1ldGVyc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1UeXBlcy5sZW5ndGggPT0gMSAmJiBwYXJhbVR5cGVzWzBdICYmIHBhcmFtVHlwZXNbMF0uaXNWb2lkVHlwZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVR5cGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2Ugdm9pZCBwYXJhbWV0ZXJzIGFyZSBiYWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGFyYW1UeXBlcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXJhbVR5cGUgPSBwYXJhbVR5cGVzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVR5cGUgJiYgcGFyYW1UeXBlLmlzVm9pZFR5cGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uZnVuYy52b2lkX3BhcmFtKHBhcmFtRGVjbGFyYXRvcnNbal0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGFyYW1UeXBlcy5ldmVyeShwYXJhbVR5cGUgPT4gcGFyYW1UeXBlICYmIHBhcmFtVHlwZS5pc1BvdGVudGlhbFBhcmFtZXRlclR5cGUoKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5mdW5jLnNvbWVfaW52YWxpZF9wYXJhbWV0ZXJfdHlwZXModGhpcykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGNsZWFuIHVwIGVycm9yIGltbWVkaWF0ZWx5IGFib3ZlIGFuZCBnZXQgcmlkIG9mIHl1Y2t5IGNhc3QgYmVsb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IG5ldyBGdW5jdGlvblR5cGUodHlwZSwgPFBvdGVudGlhbFBhcmFtZXRlclR5cGVbXT5wYXJhbVR5cGVzLCBkZWNsLmNvbnN0LCBkZWNsLnZvbGF0aWxlLCB0aGlzLmNvbnRleHQuY29udGFpbmluZ0NsYXNzICYmIHRoaXMuY29udGV4dC5jb250YWluaW5nQ2xhc3MuY3ZRdWFsaWZpZWQoISFwb3N0Zml4LmNvbnN0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBQcm9jZXNzIHBvaW50ZXJzL3JlZmVyZW5jZXMgbmV4dFxyXG4gICAgICAgICAgICAvLyBOT1RFOiB0aGlzIGxpbmUgc2hvdWxkIE5PVCBiZSBlbHNlIGlmIHNpbmNlIHRoZSBzYW1lIEFTVCBub2RlIG1heVxyXG4gICAgICAgICAgICAvLyBoYXZlIGJvdGggcG9zdGZpeGVzIGFuZCBhIHBvaW50ZXIvcmVmZXJlbmNlXHJcbiAgICAgICAgICAgIGlmIChkZWNsLnBvaW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdHlwZS5pc09iamVjdFR5cGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlLmlzUmVmZXJlbmNlVHlwZSgpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLnBvaW50ZXIucmVmZXJlbmNlKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZS5pc1ZvaWRUeXBlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLnBvaW50ZXIudm9pZCh0aGlzKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5wb2ludGVyLmludmFsaWRfcG9pbnRlZF90eXBlKHRoaXMsIHR5cGUpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdHlwZSA9IG5ldyBQb2ludGVyVHlwZSh0eXBlLCBkZWNsW1wiY29uc3RcIl0sIGRlY2xbXCJ2b2xhdGlsZVwiXSk7XHJcbiAgICAgICAgICAgICAgICBkZWNsID0gZGVjbC5wb2ludGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRlY2wucmVmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXR5cGUuaXNPYmplY3RUeXBlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZS5pc1JlZmVyZW5jZVR5cGUoKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5yZWYucmVmKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5yZWYuaW52YWxpZF9yZWZlcnJlZF90eXBlKHRoaXMsIHR5cGUpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdHlwZSA9IG5ldyBSZWZlcmVuY2VUeXBlKHR5cGUsIGRlY2xbXCJjb25zdFwiXSwgZGVjbFtcInZvbGF0aWxlXCJdKTtcclxuICAgICAgICAgICAgICAgIGRlY2wgPSBkZWNsLnJlZmVyZW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkZWNsLmhhc093blByb3BlcnR5KFwic3ViXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBkZWNsID0gZGVjbC5zdWI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgKDxNdXRhYmxlPHRoaXM+PnRoaXMpLnR5cGUgPSB0eXBlO1xyXG5cclxuICAgICAgICAvLyBJZiBpdCdzIG5vdCBhIGZ1bmN0aW9uIHR5cGUsIHRoZSByZWNvcmRlZCBwYXJhbWV0ZXJzIGFyZW4ndCBtZWFuaW5nZnVsXHJcbiAgICAgICAgaWYgKCF0eXBlLmlzRnVuY3Rpb25UeXBlKCkpIHtcclxuICAgICAgICAgICAgZGVsZXRlICg8TXV0YWJsZTx0aGlzPj50aGlzKS5wYXJhbWV0ZXJzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmxldCBPVkVSTE9BREFCTEVfT1BTIDoge1tpbmRleDpzdHJpbmddOiB0cnVlIHwgdW5kZWZpbmVkfSA9IHt9O1xyXG5cclxuW1wibmV3W11cIlxyXG4gICAgLCBcImRlbGV0ZVtdXCJcclxuICAgICwgXCJuZXdcIlxyXG4gICAgLCBcImRlbGV0ZVwiXHJcbiAgICAsIFwiLT4qXCIsIFwiPj49XCIsIFwiPDw9XCJcclxuICAgICwgXCIrPVwiLCBcIi09XCIsIFwiKj1cIiwgXCIsPVwiLCBcIiU9XCIsIFwiXj1cIlxyXG4gICAgLCBcIiY9XCIsIFwifD1cIiwgXCI8PFwiLCBcIj4+XCIsIFwiPT1cIiwgXCIhPVwiXHJcbiAgICAsIFwiPD1cIiwgXCI+PVwiLCBcIiYmXCIsIFwifHxcIiwgXCIrK1wiLCBcIi0tXCJcclxuICAgICwgXCItPlwiLCBcIigpXCIsIFwiW11cIlxyXG4gICAgLCBcIitcIiwgXCItXCIsIFwiKlwiLCBcIi9cIiwgXCIlXCIsIFwiXlwiLCBcIiZcIlxyXG4gICAgLCBcInxcIiwgXCJ+XCIsIFwiIVwiLCBcIj1cIiwgXCI8XCIsIFwiPlwiLCBcIixcIl0uZm9yRWFjaChmdW5jdGlvbiAob3ApIHtcclxuICAgICAgICBPVkVSTE9BREFCTEVfT1BTW1wib3BlcmF0b3JcIiArIG9wXSA9IHRydWU7XHJcbiAgICB9KTtcclxuXHJcbmV4cG9ydCB0eXBlIEZ1bmN0aW9uQm9keUFTVE5vZGUgPSBCbG9ja0FTVE5vZGU7XHJcbiAgICBcclxuZXhwb3J0IGludGVyZmFjZSBGdW5jdGlvbkRlZmluaXRpb25BU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJmdW5jdGlvbl9kZWZpbml0aW9uXCI7XHJcbiAgICByZWFkb25seSBzcGVjczogRGVjbGFyYXRpb25TcGVjaWZpZXJzQVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IGRlY2xhcmF0b3I6IERlY2xhcmF0b3JBU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgYm9keTogRnVuY3Rpb25Cb2R5QVNUTm9kZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uRGVmaW5pdGlvbiBleHRlbmRzIEJhc2ljQ1BQQ29uc3RydWN0PEZ1bmN0aW9uQ29udGV4dD4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBkZWNsYXJhdGlvbjogRnVuY3Rpb25EZWNsYXJhdGlvbjtcclxuICAgIHB1YmxpYyByZWFkb25seSBwYXJhbWV0ZXJzOiByZWFkb25seSBQYXJhbWV0ZXJEZWZpbml0aW9uW107XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgYm9keTogQmxvY2s7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tQVNUKGFzdDogRnVuY3Rpb25EZWZpbml0aW9uQVNUTm9kZSwgY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBkZWNsYXJhdGlvbiA9IGNyZWF0ZVNpbXBsZURlY2xhcmF0aW9uRnJvbUFTVCh7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdF90eXBlOiBcInNpbXBsZV9kZWNsYXJhdGlvblwiLFxyXG4gICAgICAgICAgICBkZWNsYXJhdG9yczogW2FzdC5kZWNsYXJhdG9yXSxcclxuICAgICAgICAgICAgc3BlY3M6IGFzdC5zcGVjcyxcclxuICAgICAgICAgICAgc291cmNlOiBhc3QuZGVjbGFyYXRvci5zb3VyY2VcclxuICAgICAgICB9LCBjb250ZXh0KVswXTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIShkZWNsYXJhdGlvbiBpbnN0YW5jZW9mIEZ1bmN0aW9uRGVjbGFyYXRpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW52YWxpZENvbnN0cnVjdChjb250ZXh0LCBDUFBFcnJvci5kZWNsYXJhdGlvbi5mdW5jLmRlZmluaXRpb25fbm9uX2Z1bmN0aW9uX3R5cGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGltcGxlbWVudGF0aW9uIGFuZCBib2R5IGJsb2NrIChiZWZvcmUgcGFyYW1zIGFuZCBib2R5IHN0YXRlbWVudHMgYWRkZWQgeWV0KVxyXG4gICAgICAgIGxldCBmdW5jdGlvbkNvbnRleHQgPSBjcmVhdGVGdW5jdGlvbkNvbnRleHQoY29udGV4dCwgZGVjbGFyYXRpb24uZGVjbGFyZWRFbnRpdHkpO1xyXG4gICAgICAgIGxldCBib2R5ID0gbmV3IEJsb2NrKGZ1bmN0aW9uQ29udGV4dCk7XHJcbiAgICAgICAgbGV0IGJvZHlDb250ZXh0ID0gYm9keS5ibG9ja0NvbnRleHQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ3JlYXRlIHBhcmFtZXRlcnMsIHdoaWNoIGFyZSBnaXZlbiB0aGUgYm9keSBibG9jaydzIGNvbnRleHQgdG8gYWRkIGRlY2xhcmVkIGVudGl0aWVzIHRvLlxyXG4gICAgICAgIC8vIEFzIHRoZSBjb250ZXh0IHJlZmVycyBiYWNrIHRvIHRoZSBpbXBsZW1lbnRhdGlvbiwgbG9jYWwgb2JqZWN0cy9yZWZlcmVuY2VzIHdpbGwgYmUgcmVnaXN0ZXJkIHRoZXJlLlxyXG4gICAgICAgIGxldCBwYXJhbWV0ZXJzID0gZGVjbGFyYXRpb24ucGFyYW1ldGVyRGVjbGFyYXRvcnMubWFwKChwYXJhbURlY2xhcmF0b3IpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJhbWV0ZXJEZWZpbml0aW9uKGJvZHlDb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgVHlwZVNwZWNpZmllci5jcmVhdGVGcm9tQVNUKFtdLCBib2R5Q29udGV4dCksXHJcbiAgICAgICAgICAgICAgICBTdG9yYWdlU3BlY2lmaWVyLmNyZWF0ZUZyb21BU1QoW10sIGJvZHlDb250ZXh0KSxcclxuICAgICAgICAgICAgICAgIHBhcmFtRGVjbGFyYXRvcixcclxuICAgICAgICAgICAgICAgIHt9LCA8UG90ZW50aWFsUGFyYW1ldGVyVHlwZT5wYXJhbURlY2xhcmF0b3IudHlwZSk7IC8vIFRPRE86IGhhY2t5IGNhc3QsIGNhbiBiZSBlbGltaXRlZCB3aGVuIHBhcmFtZXRlciBkZWNsYXJhdGlvbnMgYXJlIHVwZ3JhZGVkIHRvIHRoZWlyIG93biBjb25zdHJ1Y3RcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gTWFudWFsbHkgYWRkIHN0YXRlbWVudHMgdG8gYm9keS4gKFRoaXMgaGFzbid0IGJlZW4gZG9uZSBiZWNhdXNlIHRoZSBib2R5IGJsb2NrIHdhcyBjcmF0ZWQgbWFudWFsbHksIG5vdFxyXG4gICAgICAgIC8vIGZyb20gdGhlIEFTVCB0aHJvdWdoIHRoZSBCbG9jay5jcmVhdGVGcm9tQVNUIGZ1bmN0aW9uLiBBbmQgd2Ugd2FpdCB1bnRpbCBub3cgdG8gZG8gaXQgc28gdGhleSB3aWxsIGJlXHJcbiAgICAgICAgLy8gYWRkZWQgYWZ0ZXIgdGhlIHBhcmFtZXRlcnMuKVxyXG4gICAgICAgIGFzdC5ib2R5LnN0YXRlbWVudHMuZm9yRWFjaChzTm9kZSA9PiBib2R5LmFkZFN0YXRlbWVudChjcmVhdGVTdGF0ZW1lbnRGcm9tQVNUKHNOb2RlLCBib2R5Q29udGV4dCkpKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uRGVmaW5pdGlvbihmdW5jdGlvbkNvbnRleHQsIGRlY2xhcmF0aW9uLCBwYXJhbWV0ZXJzLCBib2R5KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpX2NoaWxkcmVuVG9FeGVjdXRlOiBbXCJtZW1iZXJJbml0aWFsaXplcnNcIiwgXCJib2R5XCJdLCAvLyBUT0RPOiB3aHkgZG8gcmVndWxhciBmdW5jdGlvbnMgaGF2ZSBtZW1iZXIgaW5pdGlhbGl6ZXJzPz9cclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogRnVuY3Rpb25Db250ZXh0LCBkZWNsYXJhdGlvbjogRnVuY3Rpb25EZWNsYXJhdGlvbiwgcGFyYW1ldGVyczogcmVhZG9ubHkgUGFyYW1ldGVyRGVmaW5pdGlvbltdLCBib2R5OiBCbG9jaykge1xyXG4gICAgICAgIHN1cGVyKGNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoKHRoaXMuZGVjbGFyYXRpb24gPSBkZWNsYXJhdGlvbik7XHJcbiAgICAgICAgdGhpcy5hdHRhY2hBbGwodGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy5ib2R5ID0gYm9keSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnRyYW5zbGF0aW9uVW5pdC5wcm9ncmFtLnJlZ2lzdGVyRnVuY3Rpb25EZWZpbml0aW9uKHRoaXMuZGVjbGFyYXRpb24uZGVjbGFyZWRFbnRpdHkucXVhbGlmaWVkTmFtZSwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMuYXV0b3NUb0Rlc3RydWN0ID0gdGhpcy5ib2R5U2NvcGUuYXV0b21hdGljT2JqZWN0cy5maWx0ZXIoZnVuY3Rpb24ob2JqKXtcclxuICAgICAgICAvLyAgICAgcmV0dXJuIGlzQShvYmoudHlwZSwgVHlwZXMuQ2xhc3MpO1xyXG4gICAgICAgIC8vIH0pO1xyXG5cclxuICAgICAgICAvLyB0aGlzLmJvZHlTY29wZS5hdXRvbWF0aWNPYmplY3RzLmZpbHRlcihmdW5jdGlvbihvYmope1xyXG4gICAgICAgIC8vICAgcmV0dXJuIGlzQShvYmoudHlwZSwgVHlwZXMuQXJyYXkpICYmIGlzQShvYmoudHlwZS5lbGVtVHlwZSwgVHlwZXMuQ2xhc3MpO1xyXG4gICAgICAgIC8vIH0pLm1hcChmdW5jdGlvbihhcnIpe1xyXG4gICAgICAgIC8vICAgZm9yKHZhciBpID0gMDsgaSA8IGFyci50eXBlLmxlbmd0aDsgKytpKXtcclxuICAgICAgICAvLyAgICAgc2VsZi5hdXRvc1RvRGVzdHJ1Y3QucHVzaChBcnJheVN1Ym9iamVjdEVudGl0eS5pbnN0YW5jZShhcnIsIGkpKTtcclxuICAgICAgICAvLyAgIH1cclxuICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgLy8gdGhpcy5hdXRvc1RvRGVzdHJ1Y3QgPSB0aGlzLmF1dG9zVG9EZXN0cnVjdC5tYXAoZnVuY3Rpb24oZW50aXR5VG9EZXN0cnVjdCl7XHJcbiAgICAgICAgLy8gICAgIHZhciBkZXN0ID0gZW50aXR5VG9EZXN0cnVjdC50eXBlLmRlc3RydWN0b3I7XHJcbiAgICAgICAgLy8gICAgIGlmIChkZXN0KXtcclxuICAgICAgICAvLyAgICAgICAgIHZhciBjYWxsID0gRnVuY3Rpb25DYWxsLmluc3RhbmNlKHthcmdzOiBbXX0sIHtwYXJlbnQ6IHNlbGYsIHNjb3BlOiBzZWxmLmJvZHlTY29wZX0pO1xyXG4gICAgICAgIC8vICAgICAgICAgY2FsbC5jb21waWxlKHtcclxuICAgICAgICAvLyAgICAgICAgICAgICBmdW5jOiBkZXN0LFxyXG4gICAgICAgIC8vICAgICAgICAgICAgIHJlY2VpdmVyOiBlbnRpdHlUb0Rlc3RydWN0fSk7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gY2FsbDtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vICAgICBlbHNle1xyXG4gICAgICAgIC8vICAgICAgICAgc2VsZi5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmR0b3Iubm9fZGVzdHJ1Y3Rvcl9hdXRvKGVudGl0eVRvRGVzdHJ1Y3QuZGVjbCwgZW50aXR5VG9EZXN0cnVjdCkpO1xyXG4gICAgICAgIC8vICAgICB9XHJcblxyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVSdW50aW1lRnVuY3Rpb248UmV0dXJuVHlwZSBleHRlbmRzIFBvdGVudGlhbFJldHVyblR5cGU+KHRoaXM6IENvbXBpbGVkRnVuY3Rpb25EZWZpbml0aW9uPFJldHVyblR5cGU+LCBwYXJlbnQ6IFJ1bnRpbWVGdW5jdGlvbkNhbGwsIHJlY2VpdmVyPzogQ1BQT2JqZWN0PENsYXNzVHlwZT4pIDogUnVudGltZUZ1bmN0aW9uPFJldHVyblR5cGU+e1xyXG4gICAgICAgIHJldHVybiBuZXcgUnVudGltZUZ1bmN0aW9uKHRoaXMsIHBhcmVudCwgcmVjZWl2ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNhbGxTZWFyY2ggOiBmdW5jdGlvbihjYWxsYmFjaywgb3B0aW9ucyl7XHJcbiAgICAvLyAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICAvLyAgICAgLy8gdGhpcy5jYWxscyB3aWxsIGJlIGZpbGxlZCB3aGVuIHRoZSBib2R5IGlzIGJlaW5nIGNvbXBpbGVkXHJcbiAgICAvLyAgICAgLy8gV2UgYXNzdW1lIHRoaXMgaGFzIGFscmVhZHkgYmVlbiBkb25lIGZvciBhbGwgZnVuY3Rpb25zLlxyXG5cclxuICAgIC8vICAgICB0aGlzLmNhbGxDbG9zdXJlID0ge307XHJcblxyXG4gICAgLy8gICAgIHZhciBxdWV1ZSA9IFtdO1xyXG4gICAgLy8gICAgIHF1ZXVlLnVuc2hpZnRBbGwodGhpcy5jYWxscy5tYXAoZnVuY3Rpb24oY2FsbCl7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiB7Y2FsbDogY2FsbCwgZnJvbTogbnVsbH07XHJcbiAgICAvLyAgICAgfSkpO1xyXG5cclxuICAgIC8vICAgICB2YXIgc2VhcmNoID0ge1xyXG4gICAgLy8gICAgICAgICBjaGFpbjogW11cclxuICAgIC8vICAgICB9O1xyXG4gICAgLy8gICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKXtcclxuICAgIC8vICAgICAgICAgdmFyIG5leHQgPSAob3B0aW9ucy5zZWFyY2hUeXBlID09PSBcImRmc1wiID8gcXVldWUucG9wKCkgOiBxdWV1ZS5zaGlmdCgpKTtcclxuICAgIC8vICAgICAgICAgdmFyIGNhbGwgPSBuZXh0LmNhbGw7XHJcbiAgICAvLyAgICAgICAgIHNlYXJjaC5jaGFpbiA9IG5leHQ7XHJcbiAgICAvLyAgICAgICAgIGlmIChzZWFyY2guc3RvcCl7XHJcbiAgICAvLyAgICAgICAgICAgICBicmVhaztcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICBlbHNlIGlmIChzZWFyY2guc2tpcCl7XHJcblxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGVsc2UgaWYgKGNhbGwuZnVuYy5pc0xpbmtlZCgpICYmIGNhbGwuZnVuYy5pc1N0YXRpY2FsbHlCb3VuZCgpKXtcclxuXHJcbiAgICAvLyAgICAgICAgICAgICBpZiAoY2FsbC5zdGF0aWNGdW5jdGlvbi5kZWNsID09PSB0aGlzKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZWFyY2guY3ljbGUgPSB0cnVlO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZWFyY2guY3ljbGUgPSBmYWxzZTtcclxuICAgIC8vICAgICAgICAgICAgICAgICBmb3IodmFyIGMgPSBuZXh0LmZyb207IGM7IGMgPSBjLmZyb20pe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBpZiAoYy5jYWxsLnN0YXRpY0Z1bmN0aW9uLmVudGl0eUlkID09PSBjYWxsLnN0YXRpY0Z1bmN0aW9uLmVudGl0eUlkKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaC5jeWNsZSA9IHRydWU7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhzZWFyY2gpO1xyXG5cclxuICAgIC8vICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gY3ljbGUsIHdlIGNhbiBwdXNoIGNoaWxkcmVuXHJcbiAgICAvLyAgICAgICAgICAgICBpZiAoIXNlYXJjaC5jeWNsZSAmJiBpc0EoY2FsbC5zdGF0aWNGdW5jdGlvbi5kZWNsLCBGdW5jdGlvbkRlZmluaXRpb24pKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gY2FsbC5zdGF0aWNGdW5jdGlvbi5kZWNsLmNhbGxzLmxlbmd0aC0xOyBpID49IDA7IC0taSl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goe2NhbGw6IGNhbGwuc3RhdGljRnVuY3Rpb24uZGVjbC5jYWxsc1tpXSwgZnJvbTogbmV4dH0pO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgICAgICB0aGlzLmNhbGxDbG9zdXJlW2NhbGwuc3RhdGljRnVuY3Rpb24uZW50aXR5SWRdID0gdHJ1ZTtcclxuICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIHRhaWxSZWN1cnNpb25BbmFseXNpcyA6IGZ1bmN0aW9uKGFubm90YXRlZENhbGxzKXtcclxuXHJcbiAgICAvLyAgICAgLy8gQXNzdW1lIG5vdCByZWN1cnNpdmUgYXQgZmlyc3QsIHdpbGwgYmUgc2V0IHRvIHRydWUgaWYgaXQgaXNcclxuICAgIC8vICAgICB0aGlzLmlzUmVjdXJzaXZlID0gZmFsc2U7XHJcblxyXG4gICAgLy8gICAgIC8vIEFzc3VtZSB3ZSBjYW4gdXNlIGNvbnN0YW50IHN0YWNrIHNwYWNlIGF0IGZpcnN0LCB3aWxsIGJlIHNldCB0byBmYWxzZSBpZiBub3RcclxuICAgIC8vICAgICB0aGlzLmNvbnN0YW50U3RhY2tTcGFjZSA9IHRydWU7XHJcblxyXG4gICAgLy8gICAgIC8vZnJvbSA9IGZyb20gfHwge3N0YXJ0OiB0aGlzLCBmcm9tOiBudWxsfTtcclxuXHJcbiAgICAvLyAgICAgLy8gVGhlIGZyb20gcGFyYW1ldGVyIHNvcnQgb2YgcmVwcmVzZW50cyBhbGwgZnVuY3Rpb25zIHdoaWNoLCBpZiBzZWVuIGFnYWluLCBjb25zdGl0dXRlIHJlY3Vyc2lvblxyXG5cclxuXHJcbiAgICAvLyAgICAgLy9jb25zb2xlLmxvZyhcInRhaWwgcmVjdXJzaW9uIGFuYWx5c2lzIGZvcjogXCIgKyB0aGlzLm5hbWUpO1xyXG4gICAgLy8gICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIC8vICAgICB0aGlzLmNhbGxTZWFyY2goZnVuY3Rpb24oc2VhcmNoKXtcclxuXHJcbiAgICAvLyAgICAgICAgIC8vIElnbm9yZSBub24tY3ljbGVzXHJcbiAgICAvLyAgICAgICAgIGlmICghc2VhcmNoLmN5Y2xlKXtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybjtcclxuICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgdmFyIHN0ciA9IFwiIClcIjtcclxuICAgIC8vICAgICAgICAgdmFyIGNoYWluID0gc2VhcmNoLmNoYWluO1xyXG4gICAgLy8gICAgICAgICB2YXIgY3ljbGVTdGFydCA9IGNoYWluLmNhbGw7XHJcbiAgICAvLyAgICAgICAgIHZhciBmaXJzdCA9IHRydWU7XHJcbiAgICAvLyAgICAgICAgIHZhciBpbkN5Y2xlID0gdHJ1ZTtcclxuICAgIC8vICAgICAgICAgdmFyIHRhaWxDeWNsZSA9IHRydWU7XHJcbiAgICAvLyAgICAgICAgIHZhciBub25UYWlsQ3ljbGVDYWxscyA9IFtdO1xyXG4gICAgLy8gICAgICAgICB2YXIgZmlyc3RDYWxsID0gY2hhaW4uY2FsbDtcclxuICAgIC8vICAgICAgICAgd2hpbGUgKGNoYWluKXtcclxuICAgIC8vICAgICAgICAgICAgIHZhciBjYWxsID0gY2hhaW4uY2FsbDtcclxuXHJcbiAgICAvLyAgICAgICAgICAgICAvLyBNYXJrIGFsbCBjYWxscyBpbiB0aGUgY3ljbGUgYXMgcGFydCBvZiBhIGN5Y2xlLCBleGNlcHQgdGhlIG9yaWdpbmFsXHJcbiAgICAvLyAgICAgICAgICAgICBpZiAoY2hhaW4uZnJvbSB8fCBmaXJzdCl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgY2FsbC5pc1BhcnRPZkN5Y2xlID0gdHJ1ZTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2Uga25vdyB3aGV0aGVyIGl0J3MgYSB0YWlsIGNhbGxcclxuICAgIC8vICAgICAgICAgICAgIGNhbGwudGFpbFJlY3Vyc2lvbkNoZWNrKCk7XHJcblxyXG4gICAgLy8gICAgICAgICAgICAgLy8gQXQgdGltZSBvZiB3cml0aW5nLCB0aGlzIHdpbGwgYWx3YXlzIGJlIHRydWUgZHVlIHRvIHRoZSB3YXkgY2FsbCBzZWFyY2ggd29ya3NcclxuICAgIC8vICAgICAgICAgICAgIGlmIChjYWxsLnN0YXRpY0Z1bmN0aW9uKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBrbm93IHdoYXQgdGhlIGNhbGwgaXMgY2FsbGluZ1xyXG5cclxuXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgc3RyID0gKGNhbGwuc3RhdGljRnVuY3Rpb24ubmFtZSArIFwiLCBcIikgKyBzdHI7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgaWYgKGNhbGwuaXNUYWlsKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgc3RyID0gXCJ0LVwiICsgc3RyO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgICAgICBpZiAoIWZpcnN0ICYmIGNhbGwuc3RhdGljRnVuY3Rpb24gPT09IGN5Y2xlU3RhcnQuc3RhdGljRnVuY3Rpb24pe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBpbkN5Y2xlID0gZmFsc2U7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHN0ciA9IFwiKCBcIiArIHN0cjtcclxuICAgIC8vICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgLy8gICAgICAgICAgICAgICAgIC8vIFRoaXMgY29tZXMgYWZ0ZXIgcG9zc2libGUgY2hhbmdlIGluIGluQ3ljbGUgYmVjYXVzZSBmaXJzdCBwYXJ0IG9mIGN5Y2xlIGRvZXNuJ3QgaGF2ZSB0byBiZSB0YWlsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgaWYgKGluQ3ljbGUpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBpZiAoIWFubm90YXRlZENhbGxzW2NhbGwuaWRdKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGZpeCB0aGlzIHRvIG5vdCB1c2Ugc2VtYW50aWNQcm9ibGVtc1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VsZi5zZW1hbnRpY1Byb2JsZW1zLmFkZFdpZGdldChSZWN1cnNpdmVDYWxsQW5ub3RhdGlvbi5pbnN0YW5jZShjYWxsLCBjYWxsLmlzVGFpbCwgY2FsbC5pc1RhaWxSZWFzb24sIGNhbGwuaXNUYWlsT3RoZXJzKSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0ZWRDYWxsc1tjYWxsLmlkXSA9IHRydWU7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgaWYgKGluQ3ljbGUgJiYgIWNhbGwuaXNUYWlsKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGFpbEN5Y2xlID0gZmFsc2U7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIG5vblRhaWxDeWNsZUNhbGxzLnB1c2goY2FsbCk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgZWxzZSBpZiAoY2FsbC5zdGF0aWNGdW5jdGlvblR5cGUpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIC8vIE9rIGF0IGxlYXN0IHdlIGtub3cgdGhlIHR5cGUgd2UncmUgY2FsbGluZ1xyXG5cclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgLy8gVWhoIHdlIGRvbid0IGtub3cgYW55dGhpbmcuIFRoaXMgcmVhbGx5IHNob3VsZG4ndCBoYXBwZW4uXHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xyXG4gICAgLy8gICAgICAgICAgICAgY2hhaW4gPSBjaGFpbi5mcm9tO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIC8vY29uc29sZS5sb2coc3RyICsgKHRhaWxDeWNsZSA/IFwiIHRhaWxcIiA6IFwiIG5vbi10YWlsXCIpKTtcclxuXHJcbiAgICAvLyAgICAgICAgIC8vIFdlIGZvdW5kIGEgY3ljbGUgc28gaXQncyBjZXJ0YWlubHkgcmVjdXJzaXZlXHJcbiAgICAvLyAgICAgICAgIHNlbGYuaXNSZWN1cnNpdmUgPSB0cnVlO1xyXG5cclxuICAgIC8vICAgICAgICAgLy8gSWYgd2UgZm91bmQgYSBub24tdGFpbCBjeWNsZSwgaXQncyBub3QgdGFpbCByZWN1cnNpdmVcclxuICAgIC8vICAgICAgICAgaWYgKCF0YWlsQ3ljbGUpe1xyXG4gICAgLy8gICAgICAgICAgICAgc2VsZi5jb25zdGFudFN0YWNrU3BhY2UgPSBmYWxzZTtcclxuICAgIC8vICAgICAgICAgICAgIGlmICghc2VsZi5ub25UYWlsQ3ljbGVzKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZWxmLm5vblRhaWxDeWNsZXMgPSBbXTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIHNlbGYubm9uVGFpbEN5Y2xlcy5wdXNoKHNlYXJjaC5jaGFpbik7XHJcbiAgICAvLyAgICAgICAgICAgICBzZWxmLm5vblRhaWxDeWNsZSA9IHNlYXJjaC5jaGFpbjtcclxuICAgIC8vICAgICAgICAgICAgIHNlbGYubm9uVGFpbEN5Y2xlUmVhc29uID0gc3RyO1xyXG5cclxuICAgIC8vICAgICAgICAgICAgIGlmKCFzZWxmLm5vblRhaWxDeWNsZUNhbGxzKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZWxmLm5vblRhaWxDeWNsZUNhbGxzID0gW107XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICBzZWxmLm5vblRhaWxDeWNsZUNhbGxzLnB1c2hBbGwobm9uVGFpbEN5Y2xlQ2FsbHMpO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfSx7XHJcbiAgICAvLyAgICAgICAgIHNlYXJjaFR5cGU6IFwiZGZzXCJcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vICAgICAvL2NvbnNvbGUubG9nKFwiXCIpO1xyXG4gICAgLy8gICAgIC8vY29uc29sZS5sb2coXCJcIik7XHJcblxyXG4gICAgLy8gICAgIHNlbGYudGFpbFJlY3Vyc2lvbkFuYWx5c2lzRG9uZSA9IHRydWU7XHJcblxyXG5cclxuICAgIC8vICAgICAvLyBUT0RPOiBmaXggdGhpcyB0byBub3QgdXNlIHNlbWFudGljUHJvYmxlbXNcclxuICAgIC8vICAgICAvLyB0aGlzLnNlbWFudGljUHJvYmxlbXMuYWRkV2lkZ2V0KFJlY3Vyc2l2ZUZ1bmN0aW9uQW5ub3RhdGlvbi5pbnN0YW5jZSh0aGlzKSk7XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIGlzVGFpbENoaWxkIDogZnVuY3Rpb24oY2hpbGQpe1xyXG4gICAgLy8gICAgIGlmIChjaGlsZCAhPT0gdGhpcy5ib2R5KXtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHtpc1RhaWw6IGZhbHNlfTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZSBpZiAodGhpcy5hdXRvc1RvRGVzdHJ1Y3QubGVuZ3RoID4gMCl7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiB7XHJcbiAgICAvLyAgICAgICAgICAgICBpc1RhaWw6IGZhbHNlLFxyXG4gICAgLy8gICAgICAgICAgICAgcmVhc29uOiBcIlRoZSBoaWdobGlnaHRlZCBsb2NhbCB2YXJpYWJsZXMgKFwiXHJcblxyXG4gICAgLy8gICAgICAgICAgICAgK1xyXG4gICAgLy8gICAgICAgICAgICAgdGhpcy5ib2R5U2NvcGUuYXV0b21hdGljT2JqZWN0cy5maWx0ZXIoZnVuY3Rpb24ob2JqKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICByZXR1cm4gaXNBKG9iai50eXBlLCBUeXBlcy5DbGFzcyk7XHJcbiAgICAvLyAgICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24ob2JqKXtcclxuXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuIG9iai5uYW1lO1xyXG5cclxuICAgIC8vICAgICAgICAgICAgIH0pLmpvaW4oXCIsXCIpXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgK1xyXG5cclxuICAgIC8vICAgICAgICAgICAgIFwiKSBoYXZlIGRlc3RydWN0b3JzIHRoYXQgd2lsbCBydW4gYXQgdGhlIGVuZCBvZiB0aGUgZnVuY3Rpb24gYm9keSAoaS5lLiBhZnRlciBhbnkgcG9zc2libGUgcmVjdXJzaXZlIGNhbGwpLlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgb3RoZXJzOiB0aGlzLmJvZHlTY29wZS5hdXRvbWF0aWNPYmplY3RzLmZpbHRlcihmdW5jdGlvbihvYmope1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiBpc0Eob2JqLnR5cGUsIFR5cGVzLkNsYXNzKTtcclxuICAgIC8vICAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbihvYmope1xyXG5cclxuICAgIC8vICAgICAgICAgICAgICAgICB2YXIgZGVjbCA9IG9iai5kZWNsO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGlmIChpc0EoZGVjbCwgRGVjbGFyYXRvcikpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBkZWNsID0gZGVjbC5wYXJlbnQ7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiBkZWNsO1xyXG5cclxuICAgIC8vICAgICAgICAgICAgIH0pXHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZSB7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiB7aXNUYWlsOiB0cnVlfTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9LFxyXG4gICAgLy8gZGVzY3JpYmUgOiBmdW5jdGlvbigpe1xyXG4gICAgLy8gICAgIHZhciBleHAgPSB7fTtcclxuICAgIC8vICAgICBleHAubWVzc2FnZSA9IFwiYSBmdW5jdGlvbiBkZWZpbml0aW9uXCI7XHJcbiAgICAvLyAgICAgcmV0dXJuIGV4cDtcclxuICAgIC8vIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZEZ1bmN0aW9uRGVmaW5pdGlvbjxSZXR1cm5UeXBlIGV4dGVuZHMgUG90ZW50aWFsUmV0dXJuVHlwZSA9IFBvdGVudGlhbFJldHVyblR5cGU+IGV4dGVuZHMgRnVuY3Rpb25EZWZpbml0aW9uLCBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcbiAgICByZWFkb25seSBib2R5OiBDb21waWxlZEJsb2NrO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIFRPRE86IHRoaXMgc2hvdWxkIGJlIGNhbGxlZCBDbGFzc0RlZmluaXRpb25cclxuLy8gZXhwb3J0IHZhciBDbGFzc0RlY2xhcmF0aW9uID0gQ1BQQ29uc3RydWN0LmV4dGVuZChCYXNlRGVjbGFyYXRpb25NaXhpbiwge1xyXG4vLyAgICAgX25hbWU6IFwiQ2xhc3NEZWNsYXJhdGlvblwiLFxyXG5cclxuLy8gICAgIGNvbXBpbGUgOiBmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgIGFzc2VydChmYWxzZSwgXCJNdXN0IHVzZSBjb21waWxlRGVjbGFyYXRpb24gYW5kIGNvbXBpbGVEZWZpbml0aW9uIHNlcGFyYXRlbHkgZm9yIGEgQ2xhc3NEZWNsYXJhdGlvbi5cIik7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGNvbXBpbGVEZWNsYXJhdGlvbiA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgdmFyIGFzdCA9IHRoaXMuYXN0O1xyXG5cclxuXHJcbi8vICAgICAgICAgdGhpcy5rZXkgPSBhc3QuaGVhZC5rZXk7XHJcbi8vICAgICAgICAgdGhpcy5uYW1lID0gYXN0LmhlYWQubmFtZS5pZGVudGlmaWVyO1xyXG4vLyAgICAgICAgIHRoaXMubWVtYmVycyA9IFtdO1xyXG5cclxuXHJcbi8vICAgICAgICAgLy8gQmFzZSBjbGFzc2VzXHJcblxyXG4vLyAgICAgICAgIGlmICh0aGlzLmFzdC5oZWFkLmJhc2VzICYmIHRoaXMuYXN0LmhlYWQuYmFzZXMubGVuZ3RoID4gMCl7XHJcbi8vICAgICAgICAgICAgIGlmICh0aGlzLmFzdC5oZWFkLmJhc2VzLmxlbmd0aCA+IDEpe1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmNsYXNzX2RlZi5tdWx0aXBsZV9pbmhlcml0YW5jZSh0aGlzKSk7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm47XHJcbi8vICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgICAgIHRyeXtcclxuLy8gICAgICAgICAgICAgICAgIHZhciBiYXNlQ29kZSA9IHRoaXMuYXN0LmhlYWQuYmFzZXNbMF07XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgLy8gVE9ETyBORVc6IFVzZSBhbiBhY3R1YWwgSWRlbnRpZmllciBleHByZXNzaW9uIGZvciB0aGlzXHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmJhc2UgPSB0aGlzLmNvbnRleHR1YWxTY29wZS5yZXF1aXJlZExvb2t1cChiYXNlQ29kZS5uYW1lLmlkZW50aWZpZXIpO1xyXG5cclxuLy8gICAgICAgICAgICAgICAgIGlmICghaXNBKHRoaXMuYmFzZSwgVHlwZUVudGl0eSkgfHwgIWlzQSh0aGlzLmJhc2UudHlwZSwgVHlwZXMuQ2xhc3MpKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuY2xhc3NfZGVmLmJhc2VfY2xhc3NfdHlwZSh7YXN0OmJhc2VDb2RlLm5hbWV9LCBiYXNlQ29kZS5uYW1lLmlkZW50aWZpZXIpKTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgICAgICAgICBpZiAoYmFzZUNvZGUudmlydHVhbCl7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmNsYXNzX2RlZi52aXJ0dWFsX2luaGVyaXRhbmNlKHthc3Q6YmFzZUNvZGUubmFtZX0sIGJhc2VDb2RlLm5hbWUuaWRlbnRpZmllcikpO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGNhdGNoKGUpe1xyXG4vLyAgICAgICAgICAgICAgICAgaWYgKGlzQShlLCBTZW1hbnRpY0V4Y2VwdGlvbnMuQmFkTG9va3VwKSl7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKGUuYW5ub3RhdGlvbih0aGlzKSk7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcblxyXG5cclxuXHJcbi8vICAgICAgICAgLy8gQ2hlY2sgdGhhdCBubyBvdGhlciB0eXBlIHdpdGggdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0c1xyXG4vLyAgICAgICAgIHRyeSB7XHJcbi8vIC8vICAgICAgICAgICAgY29uc29sZS5sb2coXCJhZGRpbmdFbnRpdHkgXCIgKyB0aGlzLm5hbWUpO1xyXG4vLyAgICAgICAgICAgICAvLyBjbGFzcyB0eXBlLiB3aWxsIGJlIGluY29tcGxldGUgaW5pdGlhbGx5LCBidXQgbWFkZSBjb21wbGV0ZSBhdCBlbmQgb2YgY2xhc3MgZGVjbGFyYXRpb25cclxuLy8gICAgICAgICAgICAgdGhpcy50eXBlID0gVHlwZXMuQ2xhc3MuY3JlYXRlQ2xhc3NUeXBlKHRoaXMubmFtZSwgdGhpcy5jb250ZXh0dWFsU2NvcGUsIHRoaXMuYmFzZSAmJiB0aGlzLmJhc2UudHlwZSwgW10pO1xyXG4vLyAgICAgICAgICAgICB0aGlzLmNsYXNzVHlwZUNsYXNzID0gdGhpcy50eXBlO1xyXG5cclxuLy8gICAgICAgICAgICAgdGhpcy5jbGFzc1Njb3BlID0gdGhpcy50eXBlLmNsYXNzU2NvcGU7XHJcblxyXG4vLyAgICAgICAgICAgICB0aGlzLmVudGl0eSA9IFR5cGVFbnRpdHkuaW5zdGFuY2UodGhpcyk7XHJcblxyXG4vLyAgICAgICAgICAgICB0aGlzLmVudGl0eS5zZXREZWZpbml0aW9uKHRoaXMpOyAvLyBUT0RPIGFkZCBleGNlcHRpb24gdGhhdCBhbGxvd3MgYSBjbGFzcyB0byBiZSBkZWZpbmVkIG1vcmUgdGhhbiBvbmNlXHJcblxyXG4vLyAgICAgICAgICAgICB0aGlzLmNvbnRleHR1YWxTY29wZS5hZGREZWNsYXJlZEVudGl0eSh0aGlzLmVudGl0eSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGNhdGNoKGUpe1xyXG4vLyAgICAgICAgICAgICBpZiAoaXNBKGUsIE5vdGUpKXtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShlKTtcclxuLy8gICAgICAgICAgICAgICAgIHJldHVybjtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNlIHtcclxuLy8gICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG4vLyAgICAgICAgIC8vIENvbXBpbGUgdGhlIG1lbWJlcnNcclxuXHJcblxyXG4vLyAgICAgICAgIHZhciBtZW1EZWNscyA9IHRoaXMubWVtRGVjbHMgPSBbXTtcclxuLy8gICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXN0Lm1lbWJlcl9zcGVjcy5sZW5ndGg7ICsraSl7XHJcbi8vICAgICAgICAgICAgIHZhciBzcGVjID0gYXN0Lm1lbWJlcl9zcGVjc1tpXTtcclxuLy8gICAgICAgICAgICAgdmFyIGFjY2VzcyA9IHNwZWMuYWNjZXNzIHx8IFwicHJpdmF0ZVwiO1xyXG4vLyAgICAgICAgICAgICBmb3IodmFyIGogPSAwOyBqIDwgc3BlYy5tZW1iZXJzLmxlbmd0aDsgKytqKXtcclxuLy8gICAgICAgICAgICAgICAgIHNwZWMubWVtYmVyc1tqXS5hY2Nlc3MgPSBhY2Nlc3M7XHJcbi8vICAgICAgICAgICAgICAgICB2YXIgbWVtRGVjbCA9IFNpbXBsZURlY2xhcmF0aW9uLmNyZWF0ZShzcGVjLm1lbWJlcnNbal0sIHtwYXJlbnQ6dGhpcywgc2NvcGU6IHRoaXMuY2xhc3NTY29wZSwgY29udGFpbmluZ0NsYXNzOiB0aGlzLnR5cGUsIGFjY2VzczphY2Nlc3N9KTtcclxuXHJcbi8vICAgICAgICAgICAgICAgICAvLyBXaXRoaW4gbWVtYmVyIGZ1bmN0aW9uIGRlZmluaXRpb25zLCBjbGFzcyBpcyBjb25zaWRlcmVkIGFzIGNvbXBsZXRlIGV2ZW4gdGhvdWdoIGl0IGlzbid0IHlldFxyXG4vLyAgICAgICAgICAgICAgICAgaWYgKGlzQShtZW1EZWNsLCBGdW5jdGlvbkRlZmluaXRpb24pKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUuc2V0VGVtcG9yYXJpbHlDb21wbGV0ZSgpO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAgICAgICAgIG1lbURlY2wuY29tcGlsZURlY2xhcmF0aW9uKCk7XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRlbXBvcmFyaWx5IGNvbXBsZXRlXHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLnR5cGUudW5zZXRUZW1wb3JhcmlseUNvbXBsZXRlKCk7XHJcblxyXG4vLyAgICAgICAgICAgICAgICAgbWVtRGVjbHMucHVzaChtZW1EZWNsKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGNvbnN0cnVjdG9ycywgdGhlbiB3ZSBuZWVkIGFuIGltcGxpY2l0IGRlZmF1bHQgY29uc3RydWN0b3JcclxuLy8gICAgICAgICBpZih0aGlzLnR5cGUuY29uc3RydWN0b3JzLmxlbmd0aCA9PSAwKXtcclxuLy8gICAgICAgICAgICAgdmFyIGlkYyA9IHRoaXMuY3JlYXRlSW1wbGljaXREZWZhdWx0Q29uc3RydWN0b3IoKTtcclxuLy8gICAgICAgICAgICAgaWYgKGlkYyl7XHJcbi8vICAgICAgICAgICAgICAgICBpZGMuY29tcGlsZSgpO1xyXG4vLyAgICAgICAgICAgICAgICAgYXNzZXJ0KCFpZGMuaGFzRXJyb3JzKCkpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICBsZXQgaGFzQ29weUNvbnN0cnVjdG9yID0gZmFsc2U7XHJcbi8vICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMudHlwZS5jb25zdHJ1Y3RvcnMubGVuZ3RoOyArK2kpe1xyXG4vLyAgICAgICAgICAgICBpZiAodGhpcy50eXBlLmNvbnN0cnVjdG9yc1tpXS5kZWNsLmlzQ29weUNvbnN0cnVjdG9yKXtcclxuLy8gICAgICAgICAgICAgICAgIGhhc0NvcHlDb25zdHJ1Y3RvciA9IHRydWU7XHJcbi8vICAgICAgICAgICAgICAgICBicmVhaztcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuXHJcblxyXG4vLyAgICAgICAgIHZhciBoYXNVc2VyRGVmaW5lZEFzc2lnbm1lbnRPcGVyYXRvciA9IHRoaXMudHlwZS5oYXNNZW1iZXIoXCJvcGVyYXRvcj1cIiwge3BhcmFtVHlwZXM6IFt0aGlzLnR5cGVdLCBpc1RoaXNDb25zdDpmYWxzZX0pO1xyXG5cclxuLy8gICAgICAgICAvLyBSdWxlIG9mIHRoZSBCaWcgVGhyZWVcclxuLy8gICAgICAgICB2YXIgYmlnVGhyZWVZZXMgPSBbXTtcclxuLy8gICAgICAgICB2YXIgYmlnVGhyZWVObyA9IFtdO1xyXG4vLyAgICAgICAgIChoYXNDb3B5Q29uc3RydWN0b3IgPyBiaWdUaHJlZVllcyA6IGJpZ1RocmVlTm8pLnB1c2goXCJjb3B5IGNvbnN0cnVjdG9yXCIpO1xyXG4vLyAgICAgICAgIChoYXNVc2VyRGVmaW5lZEFzc2lnbm1lbnRPcGVyYXRvciA/IGJpZ1RocmVlWWVzIDogYmlnVGhyZWVObykucHVzaChcImFzc2lnbm1lbnQgb3BlcmF0b3JcIik7XHJcbi8vICAgICAgICAgKHRoaXMudHlwZS5kZXN0cnVjdG9yID8gYmlnVGhyZWVZZXMgOiBiaWdUaHJlZU5vKS5wdXNoKFwiZGVzdHJ1Y3RvclwiKTtcclxuXHJcbi8vICAgICAgICAgaWYgKDAgPCBiaWdUaHJlZVllcy5sZW5ndGggJiYgYmlnVGhyZWVZZXMubGVuZ3RoIDwgMyl7XHJcbi8vICAgICAgICAgICAgIC8vIElmIGl0J3Mgb25seSBiZWNhdXNlIG9mIGFuIGVtcHR5IGRlc3RydWN0b3IsIHN1cHByZXNzIHdhcm5pbmdcclxuLy8gICAgICAgICAgICAgaWYgKGJpZ1RocmVlWWVzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLnR5cGUuZGVzdHJ1Y3RvciAmJiB0aGlzLnR5cGUuZGVzdHJ1Y3Rvci5kZWNsLmVtcHR5Qm9keSgpKXtcclxuXHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5jbGFzc19kZWYuYmlnX3RocmVlKHRoaXMsIGJpZ1RocmVlWWVzLCBiaWdUaHJlZU5vKSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHRoaXMuY3VzdG9tQmlnVGhyZWUgPSBiaWdUaHJlZVllcy5sZW5ndGggPiAwO1xyXG5cclxuLy8gICAgICAgICBpZiAoIWhhc0NvcHlDb25zdHJ1Y3Rvcikge1xyXG4vLyAgICAgICAgICAgICAvLyBDcmVhdGUgaW1wbGljaXQgY29weSBjb25zdHJ1Y3RvclxyXG4vLyAgICAgICAgICAgICB2YXIgaWNjID0gdGhpcy5jcmVhdGVJbXBsaWNpdENvcHlDb25zdHJ1Y3RvcigpO1xyXG4vLyAgICAgICAgICAgICBpZiAoaWNjKSB7XHJcbi8vICAgICAgICAgICAgICAgICBpY2MuY29tcGlsZSgpO1xyXG4vLyAgICAgICAgICAgICAgICAgYXNzZXJ0KCFpY2MuaGFzRXJyb3JzKCkpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICBpZiAoIXRoaXMudHlwZS5kZXN0cnVjdG9yKSB7XHJcbi8vICAgICAgICAgICAgIC8vIENyZWF0ZSBpbXBsaWNpdCBkZXN0cnVjdG9yXHJcbi8vICAgICAgICAgICAgIHZhciBpZGQgPSB0aGlzLmNyZWF0ZUltcGxpY2l0RGVzdHJ1Y3RvcigpO1xyXG4vLyAgICAgICAgICAgICBpZiAoaWRkKSB7XHJcbi8vICAgICAgICAgICAgICAgICBpZGQuY29tcGlsZSgpO1xyXG4vLyAgICAgICAgICAgICAgICAgYXNzZXJ0KCFpZGQuaGFzRXJyb3JzKCkpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGlmICghaGFzVXNlckRlZmluZWRBc3NpZ25tZW50T3BlcmF0b3Ipe1xyXG5cclxuLy8gICAgICAgICAgICAgLy8gQ3JlYXRlIGltcGxpY2l0IGFzc2lnbm1lbnQgb3BlcmF0b3JcclxuLy8gICAgICAgICAgICAgdmFyIGlhbyA9IHRoaXMuY3JlYXRlSW1wbGljaXRBc3NpZ25tZW50T3BlcmF0b3IoKTtcclxuLy8gICAgICAgICAgICAgaWYgKGlhbyl7XHJcbi8vICAgICAgICAgICAgICAgICBpYW8uY29tcGlsZSgpO1xyXG4vLyAgICAgICAgICAgICAgICAgYXNzZXJ0KCFpYW8uaGFzRXJyb3JzKCkpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBjb21waWxlRGVmaW5pdGlvbiA6IGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgICAgIGlmICh0aGlzLmhhc0Vycm9ycygpKXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5tZW1EZWNscy5sZW5ndGg7ICsraSl7XHJcbi8vICAgICAgICAgICAgIHRoaXMubWVtRGVjbHNbaV0uY29tcGlsZURlZmluaXRpb24oKTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuXHJcbi8vICAgICBjcmVhdGVJbXBsaWNpdERlZmF1bHRDb25zdHJ1Y3RvciA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuLy8gICAgICAgICAvLyBJZiBhbnkgZGF0YSBtZW1iZXJzIGFyZSBvZiByZWZlcmVuY2UgdHlwZSwgZG8gbm90IGNyZWF0ZSB0aGUgaW1wbGljaXQgZGVmYXVsdCBjb25zdHJ1Y3RvclxyXG4vLyAgICAgICAgIGlmICghdGhpcy50eXBlLm1lbWJlclN1Ym9iamVjdEVudGl0aWVzLmV2ZXJ5KGZ1bmN0aW9uKHN1Yk9iail7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gIWlzQShzdWJPYmoudHlwZSwgVHlwZXMuUmVmZXJlbmNlKTtcclxuLy8gICAgICAgICAgICAgfSkpe1xyXG4vLyAgICAgICAgICAgICByZXR1cm47XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAvLyBJZiBhbnkgY29uc3QgZGF0YSBtZW1iZXJzIGRvIG5vdCBoYXZlIGEgdXNlci1wcm92aWRlZCBkZWZhdWx0IGNvbnN0cnVjdG9yXHJcbi8vICAgICAgICAgaWYgKCF0aGlzLnR5cGUubWVtYmVyU3Vib2JqZWN0RW50aXRpZXMuZXZlcnkoZnVuY3Rpb24oc3ViT2JqKXtcclxuLy8gICAgICAgICAgICAgICAgIGlmICghaXNBKHN1Yk9iai50eXBlLCBUeXBlcy5DbGFzcykgfHwgIXN1Yk9iai50eXBlLmlzQ29uc3Qpe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgdmFyIGRlZkNvbiA9IHN1Yk9iai50eXBlLmdldERlZmF1bHRDb25zdHJ1Y3RvcigpO1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZkNvbiAmJiAhZGVmQ29uLmRlY2wuaXNJbXBsaWNpdCgpO1xyXG4vLyAgICAgICAgICAgICB9KSl7XHJcbi8vICAgICAgICAgICAgIHJldHVybjtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIC8vIElmIGFueSBzdWJvYmplY3RzIGRvIG5vdCBoYXZlIGEgZGVmYXVsdCBjb25zdHJ1Y3RvciBvciBkZXN0cnVjdG9yXHJcbi8vICAgICAgICAgaWYgKCF0aGlzLnR5cGUuc3Vib2JqZWN0RW50aXRpZXMuZXZlcnkoZnVuY3Rpb24oc3ViT2JqKXtcclxuLy8gICAgICAgICAgICAgICAgIHJldHVybiAhaXNBKHN1Yk9iai50eXBlLCBUeXBlcy5DbGFzcykgfHxcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdWJPYmoudHlwZS5nZXREZWZhdWx0Q29uc3RydWN0b3IoKSAmJlxyXG4vLyAgICAgICAgICAgICAgICAgICAgIHN1Yk9iai50eXBlLmRlc3RydWN0b3I7XHJcbi8vICAgICAgICAgICAgIH0pKXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgIH1cclxuXHJcblxyXG4vLyAgICAgICAgIHZhciBzcmMgPSB0aGlzLm5hbWUgKyBcIigpIHt9XCI7XHJcbi8vICAgICAgICAgLy9UT0RPOiBpbml0aWFsaXplIG1lbWJlcnMgKGkuZS4gdGhhdCBhcmUgY2xhc3NlcylcclxuLy8gICAgICAgICBzcmMgPSBMb2JzdGVyLmNQbHVzUGx1c1BhcnNlci5wYXJzZShzcmMsIHtzdGFydFJ1bGU6XCJtZW1iZXJfZGVjbGFyYXRpb25cIn0pO1xyXG4vLyAgICAgICAgIHJldHVybiBDb25zdHJ1Y3RvckRlZmluaXRpb24uaW5zdGFuY2Uoc3JjLCB7cGFyZW50OnRoaXMsIHNjb3BlOiB0aGlzLmNsYXNzU2NvcGUsIGNvbnRhaW5pbmdDbGFzczogdGhpcy50eXBlLCBhY2Nlc3M6XCJwdWJsaWNcIiwgaW1wbGljaXQ6dHJ1ZX0pO1xyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBjcmVhdGVJbXBsaWNpdENvcHlDb25zdHJ1Y3RvciA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4vLyAgICAgICAgIC8vIElmIGFueSBzdWJvYmplY3RzIGFyZSBtaXNzaW5nIGEgY29weSBjb25zdHJ1Y3RvciwgZG8gbm90IGNyZWF0ZSBpbXBsaWNpdCBjb3B5IGN0b3JcclxuLy8gICAgICAgICBpZiAoIXRoaXMudHlwZS5zdWJvYmplY3RFbnRpdGllcy5ldmVyeShmdW5jdGlvbihzdWJPYmope1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuICFpc0Eoc3ViT2JqLnR5cGUsIFR5cGVzLkNsYXNzKSB8fFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIHN1Yk9iai50eXBlLmdldENvcHlDb25zdHJ1Y3RvcihzdWJPYmoudHlwZS5pc0NvbnN0KTtcclxuLy8gICAgICAgICAgICAgfSkpe1xyXG4vLyAgICAgICAgICAgICByZXR1cm47XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAvLyBJZiBhbnkgc3Vib2JqZWN0cyBhcmUgbWlzc2luZyBhIGRlc3RydWN0b3IsIGRvIG5vdCBjcmVhdGUgaW1wbGljaXQgY29weSBjdG9yXHJcbi8vICAgICAgICAgaWYgKCF0aGlzLnR5cGUuc3Vib2JqZWN0RW50aXRpZXMuZXZlcnkoZnVuY3Rpb24oc3ViT2JqKXtcclxuLy8gICAgICAgICAgICAgICAgIHJldHVybiAhaXNBKHN1Yk9iai50eXBlLCBUeXBlcy5DbGFzcykgfHxcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdWJPYmoudHlwZS5kZXN0cnVjdG9yO1xyXG4vLyAgICAgICAgICAgICB9KSl7XHJcbi8vICAgICAgICAgICAgIHJldHVybjtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHZhciBzcmMgPSB0aGlzLm5hbWUgKyBcIihjb25zdCBcIiArIHRoaXMubmFtZSArIFwiICZvdGhlcilcIjtcclxuXHJcbi8vICAgICAgICAgaWYgKHRoaXMudHlwZS5zdWJvYmplY3RFbnRpdGllcy5sZW5ndGggPiAwKXtcclxuLy8gICAgICAgICAgICAgc3JjICs9IFwiXFxuIDogXCI7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIHNyYyArPSB0aGlzLnR5cGUuYmFzZUNsYXNzRW50aXRpZXMubWFwKGZ1bmN0aW9uKHN1Yk9iail7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBzdWJPYmoudHlwZS5jbGFzc05hbWUgKyBcIihvdGhlcilcIjtcclxuLy8gICAgICAgICB9KS5jb25jYXQodGhpcy50eXBlLm1lbWJlckVudGl0aWVzLm1hcChmdW5jdGlvbihzdWJPYmope1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gc3ViT2JqLm5hbWUgKyBcIihvdGhlci5cIiArIHN1Yk9iai5uYW1lICsgXCIpXCI7XHJcbi8vICAgICAgICAgfSkpLmpvaW4oXCIsIFwiKTtcclxuXHJcbi8vICAgICAgICAgc3JjICs9IFwiIHt9XCI7XHJcbi8vICAgICAgICAgc3JjID0gTG9ic3Rlci5jUGx1c1BsdXNQYXJzZXIucGFyc2Uoc3JjLCB7c3RhcnRSdWxlOlwibWVtYmVyX2RlY2xhcmF0aW9uXCJ9KTtcclxuXHJcbi8vICAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yRGVmaW5pdGlvbi5pbnN0YW5jZShzcmMsIHtwYXJlbnQ6dGhpcywgc2NvcGU6IHRoaXMuY2xhc3NTY29wZSwgY29udGFpbmluZ0NsYXNzOiB0aGlzLnR5cGUsIGFjY2VzczpcInB1YmxpY1wiLCBpbXBsaWNpdDp0cnVlfSk7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGNyZWF0ZUltcGxpY2l0QXNzaWdubWVudE9wZXJhdG9yIDogZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuLy8gICAgICAgICAvLyBQYXJhbWV0ZXIgd2lsbCBvbmx5IGJlIGNvbnN0IGlmIGFsbCBzdWJvYmplY3RzIGhhdmUgYXNzaWdubWVudCBvcHMgdGhhdCB0YWtlIGNvbnN0IHBhcmFtc1xyXG4vLyAgICAgICAgIHZhciBjYW5NYWtlQ29uc3QgPSB0aGlzLnR5cGUuc3Vib2JqZWN0RW50aXRpZXMuZXZlcnkoZnVuY3Rpb24oc3ViT2JqKXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuICFpc0Eoc3ViT2JqLnR5cGUsIFR5cGVzLkNsYXNzKSB8fFxyXG4vLyAgICAgICAgICAgICAgICAgc3ViT2JqLnR5cGUuZ2V0QXNzaWdubWVudE9wZXJhdG9yKHRydWUpO1xyXG4vLyAgICAgICAgIH0pO1xyXG5cclxuLy8gICAgICAgICB2YXIgY2FuTWFrZU5vbkNvbnN0ID0gY2FuTWFrZUNvbnN0IHx8IHRoaXMudHlwZS5zdWJvYmplY3RFbnRpdGllcy5ldmVyeShmdW5jdGlvbihzdWJPYmope1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gIWlzQShzdWJPYmoudHlwZSwgVHlwZXMuQ2xhc3MpIHx8XHJcbi8vICAgICAgICAgICAgICAgICBzdWJPYmoudHlwZS5nZXRBc3NpZ25tZW50T3BlcmF0b3IoZmFsc2UpO1xyXG4vLyAgICAgICAgIH0pO1xyXG5cclxuLy8gICAgICAgICAvLyBJZiB3ZSBjYW4ndCBtYWtlIG5vbi1jb25zdCwgd2UgYWxzbyBjYW4ndCBtYWtlIGNvbnN0LCBhbmQgd2UgY2FuJ3QgbWFrZSBhbnkgaW1wbGljaXQgYXNzaWdubWVudCBvcFxyXG4vLyAgICAgICAgIGlmICghY2FuTWFrZU5vbkNvbnN0KXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICB2YXIgY29uc3RQYXJ0ID0gY2FuTWFrZUNvbnN0ID8gXCJjb25zdCBcIiA6IFwiXCI7XHJcblxyXG4vLyAgICAgICAgIC8vIElmIGFueSBkYXRhIG1lbWJlciBpcyBhIHJlZmVyZW5jZSwgd2UgY2FuJ3QgbWFrZSBpbXBsaWNpdCBhc3NpZ25tZW50IG9wZXJhdG9yXHJcbi8vICAgICAgICAgaWYgKCF0aGlzLnR5cGUubWVtYmVyU3Vib2JqZWN0RW50aXRpZXMuZXZlcnkoZnVuY3Rpb24oc3ViT2JqKXtcclxuLy8gICAgICAgICAgICAgICAgIHJldHVybiAhaXNBKHN1Yk9iai50eXBlLCBUeXBlcy5SZWZlcmVuY2UpO1xyXG4vLyAgICAgICAgICAgICB9KSl7XHJcbi8vICAgICAgICAgICAgIHJldHVybjtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIC8vIElmIGFueSBub24tY2xhc3MgbWVtYmVyIGlzIGNvbnN0IChvciBhcnJheSB0aGVyZW9mKSwgd2UgY2FuJ3QgbWFrZSBpbXBsaWNpdCBhc3NpZ25tZW50IG9wZXJhdG9yXHJcbi8vICAgICAgICAgaWYgKCF0aGlzLnR5cGUubWVtYmVyU3Vib2JqZWN0RW50aXRpZXMuZXZlcnkoZnVuY3Rpb24oc3ViT2JqKXtcclxuLy8gICAgICAgICAgICAgICAgIC8vcmV0dXJuIChpc0Eoc3ViT2JqLnR5cGUsIFR5cGVzLkNsYXNzKSB8fCAhc3ViT2JqLnR5cGUuaXNDb25zdClcclxuLy8gICAgICAgICAgICAgICAgIC8vICAgICYmICghaXNBKHN1Yk9iai50eXBlLCBUeXBlcy5BcnJheSkgfHwgaXNBKHN1Yk9iai50eXBlLmVsZW1UeXBlLCBUeXBlcy5DbGFzcykgfHwgIXN1Yk9iai50eXBlLmVsZW1UeXBlLmlzQ29uc3QpO1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuICFzdWJPYmoudHlwZS5pc0NvbnN0XHJcbi8vICAgICAgICAgICAgICAgICAgICAgJiYgKCFpc0Eoc3ViT2JqLnR5cGUsIFR5cGVzLkFycmF5KSB8fCAhc3ViT2JqLnR5cGUuZWxlbVR5cGUuaXNDb25zdCk7XHJcbi8vICAgICAgICAgICAgIH0pKXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgdmFyIHNyYyA9IHRoaXMubmFtZSArIFwiICZvcGVyYXRvcj0oXCIgKyBjb25zdFBhcnQgKyB0aGlzLm5hbWUgKyBcIiAmcmhzKXtcIjtcclxuXHJcbi8vICAgICAgICAgc3JjICs9IHRoaXMudHlwZS5iYXNlQ2xhc3NFbnRpdGllcy5tYXAoZnVuY3Rpb24oc3ViT2JqKXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHN1Yk9iai50eXBlLmNsYXNzTmFtZSArIFwiOjpvcGVyYXRvcj0ocmhzKTtcIjtcclxuLy8gICAgICAgICB9KS5qb2luKFwiXFxuXCIpO1xyXG5cclxuLy8gICAgICAgICB2YXIgbWVtcyA9IHRoaXMudHlwZS5tZW1iZXJTdWJvYmplY3RFbnRpdGllcztcclxuLy8gICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbWVtcy5sZW5ndGg7ICsraSl7XHJcbi8vICAgICAgICAgICAgIHZhciBtZW0gPSBtZW1zW2ldO1xyXG4vLyAgICAgICAgICAgICBpZiAoaXNBKG1lbS50eXBlLCBUeXBlcy5BcnJheSkpe1xyXG4vLyAgICAgICAgICAgICAgICAgdmFyIHRlbXBUeXBlID0gbWVtLnR5cGU7XHJcbi8vICAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaXB0TnVtID0gaXNBKHRlbXBUeXBlLmVsZW1UeXBlLCBUeXBlcy5BcnJheSkgPyAxIDogXCJcIjtcclxuLy8gICAgICAgICAgICAgICAgIHZhciBzdWJzY3JpcHRzID0gXCJcIjtcclxuLy8gICAgICAgICAgICAgICAgIHZhciBjbG9zZUJyYWNrZXRzID0gXCJcIjtcclxuLy8gICAgICAgICAgICAgICAgIHdoaWxlKGlzQSh0ZW1wVHlwZSwgVHlwZXMuQXJyYXkpKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzcmMgKz0gXCJmb3IoaW50IGlcIitzdWJzY3JpcHROdW0rXCI9MDsgaVwiK3N1YnNjcmlwdE51bStcIjxcIit0ZW1wVHlwZS5sZW5ndGgrXCI7ICsraVwiK3N1YnNjcmlwdE51bStcIil7XCI7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0cyArPSBcIltpXCIrc3Vic2NyaXB0TnVtK1wiXVwiO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGNsb3NlQnJhY2tldHMgKz0gXCJ9XCI7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgdGVtcFR5cGUgPSB0ZW1wVHlwZS5lbGVtVHlwZTtcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHROdW0gKz0gMTtcclxuLy8gICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgIHNyYyArPSBtZW0ubmFtZSArIHN1YnNjcmlwdHMgKyBcIiA9IHJocy5cIiArIG1lbS5uYW1lICsgXCJcIiArIHN1YnNjcmlwdHMgKyBcIjtcIjtcclxuLy8gICAgICAgICAgICAgICAgIHNyYyArPSBjbG9zZUJyYWNrZXRzO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICBzcmMgKz0gbWVtc1tpXS5uYW1lICsgXCIgPSByaHMuXCIgKyBtZW1zW2ldLm5hbWUgKyBcIjtcIjtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBzcmMgKz0gXCJyZXR1cm4gKnRoaXM7fVwiO1xyXG4vLyAgICAgICAgIHNyYyA9IExvYnN0ZXIuY1BsdXNQbHVzUGFyc2VyLnBhcnNlKHNyYywge3N0YXJ0UnVsZTpcIm1lbWJlcl9kZWNsYXJhdGlvblwifSk7XHJcbi8vICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uRGVmaW5pdGlvbi5pbnN0YW5jZShzcmMsIHtwYXJlbnQ6dGhpcywgc2NvcGU6IHRoaXMuY2xhc3NTY29wZSwgY29udGFpbmluZ0NsYXNzOiB0aGlzLnR5cGUsIGFjY2VzczpcInB1YmxpY1wiLCBpbXBsaWNpdDp0cnVlfSk7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGNyZWF0ZUltcGxpY2l0RGVzdHJ1Y3RvciA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4vLyAgICAgICAgIC8vIElmIGFueSBzdWJvYmplY3RzIGFyZSBtaXNzaW5nIGEgZGVzdHJ1Y3RvciwgZG8gbm90IGNyZWF0ZSBpbXBsaWNpdCBkZXN0cnVjdG9yXHJcbi8vICAgICAgICAgaWYgKCF0aGlzLnR5cGUuc3Vib2JqZWN0RW50aXRpZXMuZXZlcnkoZnVuY3Rpb24oc3ViT2JqKXtcclxuLy8gICAgICAgICAgICAgICAgIHJldHVybiAhaXNBKHN1Yk9iai50eXBlLCBUeXBlcy5DbGFzcykgfHxcclxuLy8gICAgICAgICAgICAgICAgICAgICBzdWJPYmoudHlwZS5kZXN0cnVjdG9yO1xyXG4vLyAgICAgICAgICAgICB9KSl7XHJcbi8vICAgICAgICAgICAgIHJldHVybjtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHZhciBzcmMgPSBcIn5cIiArIHRoaXMudHlwZS5uYW1lICsgXCIoKXt9XCI7XHJcbi8vICAgICAgICAgc3JjID0gTG9ic3Rlci5jUGx1c1BsdXNQYXJzZXIucGFyc2Uoc3JjLCB7c3RhcnRSdWxlOlwibWVtYmVyX2RlY2xhcmF0aW9uXCJ9KTtcclxuLy8gICAgICAgICByZXR1cm4gRGVzdHJ1Y3RvckRlZmluaXRpb24uaW5zdGFuY2Uoc3JjLCB7cGFyZW50OnRoaXMsIHNjb3BlOiB0aGlzLmNsYXNzU2NvcGUsIGNvbnRhaW5pbmdDbGFzczogdGhpcy50eXBlLCBhY2Nlc3M6XCJwdWJsaWNcIiwgaW1wbGljaXQ6dHJ1ZX0pO1xyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBjcmVhdGVJbnN0YW5jZSA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgIHJldHVybiBSdW50aW1lQ29uc3RydWN0Lmluc3RhbmNlKHNpbSwgdGhpcywge2RlY2w6MCwgc3RlcDpcImRlY2xcIn0sIFwic3RtdFwiLCBpbnN0KTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgdXBOZXh0IDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcblxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBzdGVwRm9yd2FyZCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG5cclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyBleHBvcnQgdmFyIE1lbWJlckRlY2xhcmF0aW9uID0gU2ltcGxlRGVjbGFyYXRpb24uZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIk1lbWJlckRlY2xhcmF0aW9uXCIsXHJcbi8vICAgICBpbml0OiBmdW5jdGlvbihhc3QsIGNvbnRleHQpe1xyXG4vLyAgICAgICAgIGFzc2VydChjb250ZXh0KTtcclxuLy8gICAgICAgICBhc3NlcnQoaXNBKGNvbnRleHQuY29udGFpbmluZ0NsYXNzLCBUeXBlcy5DbGFzcykpO1xyXG4vLyAgICAgICAgIGFzc2VydChjb250ZXh0Lmhhc093blByb3BlcnR5KFwiYWNjZXNzXCIpKTtcclxuLy8gICAgICAgICB0aGlzLmluaXRQYXJlbnQoYXN0LCBjb250ZXh0KTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgaV9jcmVhdGVGcm9tQVNUIDogZnVuY3Rpb24oYXN0LCBjb250ZXh0KSB7XHJcbi8vICAgICAgICAgTWVtYmVyRGVjbGFyYXRpb24uX3BhcmVudC5pX2NyZWF0ZUZyb21BU1QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuLy8gICAgICAgICB0aGlzLmFjY2VzcyA9IGNvbnRleHQuYWNjZXNzO1xyXG4vLyAgICAgICAgIHRoaXMuaV9jb250YWluaW5nQ2xhc3MgPSBjb250ZXh0LmNvbnRhaW5pbmdDbGFzcztcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgaV9kZXRlcm1pbmVTdG9yYWdlIDogZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICAvLyBEZXRlcm1pbmUgc3RvcmFnZSBkdXJhdGlvbiBiYXNlZCBvbiB0aGUga2luZCBvZiBzY29wZSBpbiB3aGljaCB0aGUgZGVjbGFyYXRpb25cclxuLy8gICAgICAgICAvLyBvY2N1cnMgYW5kIGFueSBzdG9yYWdlIHNwZWNpZmllcnMuXHJcbi8vICAgICAgICAgaWYodGhpcy5zdG9yYWdlU3BlYy5zdGF0aWMpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLnN0b3JhZ2VEdXJhdGlvbiA9IFwic3RhdGljXCI7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIHRoaXMuc3RvcmFnZUR1cmF0aW9uID0gXCJhdXRvbWF0aWNcIjtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIG1ha2VFbnRpdHk6IGZ1bmN0aW9uKGRlY2wpe1xyXG5cclxuLy8gICAgICAgICAvLyBOb3RlOiB3ZSBrbm93IGl0J3Mgbm90IGEgZnVuY3Rpb24gZGVmaW5pdGlvbiBiZWNhdXNlIHRoYXQgZ29lcyB0byB0aGUgRnVuY3Rpb25EZWZpbml0aW9uXHJcbi8vICAgICAgICAgLy8gY2xhc3MuICBUaHVzIGFueSBmdW5jdGlvbnMgYXJlIG5vdCBkZWZpbml0aW9ucy5cclxuLy8gICAgICAgICAvLyBEb24ndCBoYXZlIHRvIGNoZWNrIGZvciBjbGFzc2VzLCBmb3Igc2ltaWxhciByZWFzb25zLlxyXG4vLyAgICAgICAgIHZhciBpc0RlZmluaXRpb24gPSAhaXNBKGRlY2wudHlwZSwgVHlwZXMuRnVuY3Rpb24pXHJcbi8vICAgICAgICAgICAgICYmICEodGhpcy5zdG9yYWdlU3BlYy5leHRlcm4gJiYgIShkZWNsLmluaXRpYWxpemVyIHx8IGRlY2wuaW5pdGlhbGl6ZXJMaXN0KSlcclxuLy8gICAgICAgICAgICAgJiYgIXRoaXMudHlwZWRlZjtcclxuXHJcbi8vICAgICAgICAgdGhpcy5pc0RlZmluaXRpb24gPSBpc0RlZmluaXRpb247XHJcblxyXG4vLyAgICAgICAgIHZhciBlbnRpdHk7XHJcbi8vICAgICAgICAgaWYgKGlzQShkZWNsLnR5cGUsIFR5cGVzLkZ1bmN0aW9uKSl7XHJcbi8vICAgICAgICAgICAgIGVudGl0eSA9IE1lbWJlckZ1bmN0aW9uRW50aXR5Lmluc3RhbmNlKGRlY2wsIHRoaXMuaV9jb250YWluaW5nQ2xhc3MsIHRoaXMudmlydHVhbCk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2UgaWYgKHRoaXMuc3RvcmFnZUR1cmF0aW9uID09PSBcInN0YXRpY1wiKXtcclxuLy8gICAgICAgICAgICAgZW50aXR5ID0gU3RhdGljRW50aXR5Lmluc3RhbmNlKGRlY2wpO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICBlbnRpdHkgPSBNZW1iZXJWYXJpYWJsZUVudGl0eS5pbnN0YW5jZShkZWNsLCB0aGlzLmlfY29udGFpbmluZ0NsYXNzKTtcclxuLy8gICAgICAgICAgICAgdGhpcy5pc0RlZmluaXRpb24gPSBmYWxzZTsgLy8gVE9ETyBORVc6IFRoaXMgaXMgYSBoYWNrLiBTaW5jZSBpbXBsZW1lbnRpbmcgYSBwcm9wZXIgbGlua2luZyBwaGFzZSwgc3RhdGljIHN0dWZmIG1heSBiZSBicm9rZW4uXHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICBpZiAodGhpcy5pc0RlZmluaXRpb24pIHtcclxuLy8gICAgICAgICAgICAgZW50aXR5LnNldERlZmluaXRpb24odGhpcyk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICB0cnkge1xyXG4vLyAgICAgICAgICAgICB0aGlzLmVudGl0aWVzLnB1c2goZW50aXR5KTtcclxuLy8gICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7b3duOiB0cnVlfTtcclxuLy8gICAgICAgICAgICAgaWYgKGlzQShlbnRpdHksIE1lbWJlckZ1bmN0aW9uRW50aXR5KSkge1xyXG4vLyAgICAgICAgICAgICAgICAgb3B0aW9ucy5wYXJhbVR5cGVzID0gZW50aXR5LnR5cGUucGFyYW1UeXBlcztcclxuLy8gICAgICAgICAgICAgICAgIG9wdGlvbnMuZXhhY3RNYXRjaCA9IHRydWU7XHJcbi8vICAgICAgICAgICAgICAgICBvcHRpb25zLm5vQmFzZSA9IHRydWU7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgaWYgKChpc0EoZW50aXR5LCBNZW1iZXJWYXJpYWJsZUVudGl0eSkgfHwgaXNBKGVudGl0eSwgTWVtYmVyRnVuY3Rpb25FbnRpdHkpKSl7XHJcbi8vICAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBjaGVjayBpZiBhIGNvbmZsaWN0aW5nIG1lbWJlciBhbHJlYWR5IGV4aXN0cyBoZXJlIC0gdGhhdCB3aWxsIGJlXHJcbi8vICAgICAgICAgICAgICAgICAvLyBkb25lIGluc2lkZSBhZGRNZW1iZXIgYW5kIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93biBpZiB0aGVyZSBpcyBhIGNvbmZsaWN0XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmlfY29udGFpbmluZ0NsYXNzLmFkZE1lbWJlcihlbnRpdHkpOyAvLyB0aGlzIGludGVybmFsbHkgYWRkcyBpdCB0byB0aGUgY2xhc3Mgc2NvcGVcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICByZXR1cm4gZW50aXR5O1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBjYXRjaChlKSB7XHJcbi8vICAgICAgICAgICAgIGlmIChpc0EoZSwgTm90ZSkpe1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKGUpO1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZSB7XHJcbi8vICAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfVxyXG4vLyB9KTtcclxuXHJcblxyXG4vLyBleHBvcnQgdmFyIENvbnN0cnVjdG9yRGVmaW5pdGlvbiA9IEZ1bmN0aW9uRGVmaW5pdGlvbi5leHRlbmQoe1xyXG4vLyAgICAgX25hbWU6IFwiQ29uc3RydWN0b3JEZWZpbml0aW9uXCIsXHJcblxyXG4vLyAgICAgaV9jaGlsZHJlblRvRXhlY3V0ZTogW1wibWVtYmVySW5pdGlhbGl6ZXJzXCIsIFwiYm9keVwiXSwgLy8gVE9ETzogd2h5IGRvIHJlZ3VsYXIgZnVuY3Rpb25zIGhhdmUgbWVtYmVyIGluaXRpYWxpemVycz8/XHJcblxyXG5cclxuLy8gICAgIGluc3RhbmNlIDogZnVuY3Rpb24oYXN0LCBjb250ZXh0KXtcclxuLy8gICAgICAgICBhc3NlcnQoY29udGV4dCk7XHJcbi8vICAgICAgICAgYXNzZXJ0KGlzQShjb250ZXh0LmNvbnRhaW5pbmdDbGFzcywgVHlwZXMuQ2xhc3MpKTtcclxuLy8gICAgICAgICBhc3NlcnQoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShcImFjY2Vzc1wiKSk7XHJcbi8vICAgICAgICAgLy8gTWFrZSBzdXJlIGl0J3MgYWN0dWFsbHkgYSBjb25zdHJ1Y3RvclxyXG4vLyAgICAgICAgIGlmIChhc3QubmFtZS5pZGVudGlmaWVyICE9PSBjb250ZXh0LmNvbnRhaW5pbmdDbGFzcy5jbGFzc05hbWUpe1xyXG4vLyAgICAgICAgICAgICAvLyBvb3BzIHdhcyBhY3R1YWxseSBhIGZ1bmN0aW9uIHdpdGggbWlzc2luZyByZXR1cm4gdHlwZVxyXG4vLyAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb25EZWZpbml0aW9uLmluc3RhbmNlKGFzdCwgY29udGV4dCk7XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICByZXR1cm4gQ29uc3RydWN0b3JEZWZpbml0aW9uLl9wYXJlbnQuaW5zdGFuY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgY29tcGlsZURlY2xhcmF0aW9uIDogZnVuY3Rpb24oKSB7XHJcbi8vICAgICAgICAgRnVuY3Rpb25EZWZpbml0aW9uLmNvbXBpbGVEZWNsYXJhdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cclxuLy8gICAgICAgICBpZiAoIXRoaXMuaGFzRXJyb3JzKCkpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLmlfY29udGFpbmluZ0NsYXNzLmFkZENvbnN0cnVjdG9yKHRoaXMuZW50aXR5KTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGNvbXBpbGVEZWNsYXJhdG9yIDogZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICB2YXIgYXN0ID0gdGhpcy5hc3Q7XHJcblxyXG5cclxuLy8gICAgICAgICAvLyBOT1RFOiBhIGNvbnN0cnVjdG9yIGRvZXNuJ3QgaGF2ZSBhIFwibmFtZVwiLCBhbmQgc28gd2UgZG9uJ3QgbmVlZCB0byBhZGQgaXQgdG8gYW55IHNjb3BlLlxyXG4vLyAgICAgICAgIC8vIEhvd2V2ZXIsIHRvIG1ha2UgbG9va3VwIGVhc2llciwgd2UgZ2l2ZSBhbGwgY29uc3RydWN0b3JzIHRoZWlyIGNsYXNzIG5hbWUgcGx1cyB0aGUgbnVsbCBjaGFyYWN0ZXIuIExPTFxyXG4vLyAgICAgICAgIC8vIFRPRE86IHRoaXMgaXMgc2lsbHkuIHJlbW92ZSBpdCBwbHMgOilcclxuLy8gICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmlfY29udGFpbmluZ0NsYXNzLmNsYXNzTmFtZSArIFwiXFwwXCI7XHJcblxyXG4vLyAgICAgICAgIC8vIENvbXBpbGUgdGhlIHBhcmFtZXRlcnNcclxuLy8gICAgICAgICB2YXIgYXJncyA9IHRoaXMuYXN0LmFyZ3M7XHJcbi8vICAgICAgICAgdGhpcy5wYXJhbXMgPSBbXTtcclxuLy8gICAgICAgICB0aGlzLnBhcmFtVHlwZXMgPSBbXTtcclxuLy8gICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFyZ3MubGVuZ3RoOyArK2opIHtcclxuLy8gICAgICAgICAgICAgdmFyIHBhcmFtRGVjbCA9IFBhcmFtZXRlci5pbnN0YW5jZShhcmdzW2pdLCB7cGFyZW50OiB0aGlzLCBzY29wZTogdGhpcy5ib2R5U2NvcGV9KTtcclxuLy8gICAgICAgICAgICAgcGFyYW1EZWNsLmNvbXBpbGUoKTtcclxuLy8gICAgICAgICAgICAgdGhpcy5wYXJhbXMucHVzaChwYXJhbURlY2wpO1xyXG4vLyAgICAgICAgICAgICB0aGlzLnBhcmFtVHlwZXMucHVzaChwYXJhbURlY2wudHlwZSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIHRoaXMuaXNEZWZhdWx0Q29uc3RydWN0b3IgPSB0aGlzLnBhcmFtcy5sZW5ndGggPT0gMDtcclxuXHJcbi8vICAgICAgICAgdGhpcy5pc0NvcHlDb25zdHJ1Y3RvciA9IHRoaXMucGFyYW1zLmxlbmd0aCA9PSAxXHJcbi8vICAgICAgICAgJiYgKGlzQSh0aGlzLnBhcmFtVHlwZXNbMF0sIHRoaXMuaV9jb250YWluaW5nQ2xhc3MpIHx8XHJcbi8vICAgICAgICAgaXNBKHRoaXMucGFyYW1UeXBlc1swXSwgVHlwZXMuUmVmZXJlbmNlKSAmJiBpc0EodGhpcy5wYXJhbVR5cGVzWzBdLnJlZlRvLCB0aGlzLmlfY29udGFpbmluZ0NsYXNzKSk7XHJcblxyXG5cclxuLy8gICAgICAgICAvLyBHaXZlIGVycm9yIGZvciBjb3B5IGNvbnN0cnVjdG9yIHRoYXQgcGFzc2VzIGJ5IHZhbHVlXHJcbi8vICAgICAgICAgaWYgKHRoaXMuaXNDb3B5Q29uc3RydWN0b3IgJiYgaXNBKHRoaXMucGFyYW1UeXBlc1swXSwgdGhpcy5pX2NvbnRhaW5pbmdDbGFzcykpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuZGVjbGFyYXRpb24uY3Rvci5jb3B5LnBhc3NfYnlfdmFsdWUodGhpcy5wYXJhbXNbMF0sIHRoaXMucGFyYW1UeXBlc1swXSwgdGhpcy5wYXJhbXNbMF0ubmFtZSkpO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgLy8gSSBrbm93IHRoaXMgaXMgdGVjaG5pY2FsbHkgd3JvbmcgYnV0IEkgdGhpbmsgaXQgbWFrZXMgdGhpbmdzIHJ1biBzbW9vdGhlclxyXG4vLyAgICAgICAgIHRoaXMudHlwZSA9IFR5cGVzLkZ1bmN0aW9uLmluc3RhbmNlKFR5cGVzLlZvaWQuaW5zdGFuY2UoKSwgdGhpcy5wYXJhbVR5cGVzKTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgY29tcGlsZURlZmluaXRpb24gOiBmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuLy8gICAgICAgICB2YXIgYXN0ID0gdGhpcy5hc3Q7XHJcblxyXG4vLyAgICAgICAgIGlmICghYXN0LmJvZHkpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuY2xhc3NfZGVmLmN0b3JfZGVmKHRoaXMpKTtcclxuLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgdGhpcy5jb21waWxlQ3RvckluaXRpYWxpemVyKCk7XHJcblxyXG4vLyAgICAgICAgIC8vIENhbGwgcGFyZW50IGNsYXNzIHZlcnNpb24uIFdpbGwgaGFuZGxlIGJvZHksIGF1dG9tYXRpYyBvYmplY3QgZGVzdHJ1Y3Rpb24sIGV0Yy5cclxuLy8gICAgICAgICBGdW5jdGlvbkRlZmluaXRpb24uY29tcGlsZURlZmluaXRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgY29tcGlsZUN0b3JJbml0aWFsaXplciA6IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgdmFyIG1lbUluaXRzID0gdGhpcy5hc3QuaW5pdGlhbGl6ZXIgfHwgW107XHJcblxyXG4vLyAgICAgICAgIC8vIEZpcnN0LCBjaGVjayB0byBzZWUgaWYgdGhpcyBpcyBhIGRlbGVnYXRpbmcgY29uc3RydWN0b3IuXHJcbi8vICAgICAgICAgLy8gVE9ETzogY2hlY2sgb24gd2hldGhlciBzb21lb25lIGNvdWxkIHRlY2hpbmljYWxseSBkZWNsYXJlIGEgbWVtYmVyIHZhcmlhYmxlIHdpdGggdGhlIHNhbWUgbmFtZVxyXG4vLyAgICAgICAgIC8vIGFzIHRoZSBjbGFzcyBhbmQgaG93IHRoYXQgYWZmZWN0cyB0aGUgbG9naWMgaGVyZS5cclxuLy8gICAgICAgICB2YXIgdGFyZ2V0Q29uc3RydWN0b3IgPSBudWxsO1xyXG4vLyAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBtZW1Jbml0cy5sZW5ndGg7ICsraSl7XHJcbi8vICAgICAgICAgICAgIGlmIChtZW1Jbml0c1tpXS5tZW1iZXIuaWRlbnRpZmllciA9PSB0aGlzLmlfY29udGFpbmluZ0NsYXNzLmNsYXNzTmFtZSl7XHJcbi8vICAgICAgICAgICAgICAgICB0YXJnZXRDb25zdHJ1Y3RvciA9IGk7XHJcbi8vICAgICAgICAgICAgICAgICBicmVhaztcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgLy8gSXQgaXMgYSBkZWxlZ2F0aW5nIGNvbnN0cnVjdG9yXHJcbi8vICAgICAgICAgaWYgKHRhcmdldENvbnN0cnVjdG9yICE9PSBudWxsKXtcclxuLy8gICAgICAgICAgICAgdGFyZ2V0Q29uc3RydWN0b3IgPSBtZW1Jbml0cy5zcGxpY2UodGFyZ2V0Q29uc3RydWN0b3IsIDEpWzBdO1xyXG4vLyAgICAgICAgICAgICAvLyBJZiBpdCBpcyBhIGRlbGVnYXRpbmcgY29uc3RydWN0b3IsIHRoZXJlIGNhbiBiZSBubyBvdGhlciBtZW1Jbml0c1xyXG4vLyAgICAgICAgICAgICBpZiAobWVtSW5pdHMubGVuZ3RoID09PSAwKXsgLy8gc2hvdWxkIGJlIDAgc2luY2Ugb25lIHJlbW92ZWRcclxuLy8gICAgICAgICAgICAgICAgIHZhciBtZW0gPSBNZW1iZXJJbml0aWFsaXplci5pbnN0YW5jZSh0YXJnZXRDb25zdHJ1Y3Rvciwge3BhcmVudDogdGhpcywgc2NvcGU6IHRoaXMuYm9keVNjb3BlfSk7XHJcbi8vICAgICAgICAgICAgICAgICBtZW0uY29tcGlsZShSZWNlaXZlckVudGl0eS5pbnN0YW5jZSh0aGlzLmlfY29udGFpbmluZ0NsYXNzKSk7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLm1lbWJlckluaXRpYWxpemVycy5wdXNoKG1lbSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5jdG9yLmluaXQuZGVsZWdhdGluZ19vbmx5KHRoaXMpKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICByZXR1cm47XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAvLyBJdCBpcyBhIG5vbi1kZWxlZ2F0aW5nIGNvbnN0cnVjdG9yXHJcblxyXG4vLyAgICAgICAgIC8vIElmIHRoZXJlIGlzIGEgYmFzZSBjbGFzcyBzdWJvYmplY3QsIGluaXRpYWxpemUgaXRcclxuLy8gICAgICAgICB2YXIgYmFzZTtcclxuLy8gICAgICAgICBpZiAoYmFzZSA9IHRoaXMuaV9jb250YWluaW5nQ2xhc3MuZ2V0QmFzZUNsYXNzKCkpe1xyXG4vLyAgICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlcmUgaXMgYSBiYXNlIGNsYXNzIGluaXRpYWxpemVyLlxyXG4vLyAgICAgICAgICAgICB2YXIgYmFzZUluaXRzID0gbWVtSW5pdHMuZmlsdGVyKGZ1bmN0aW9uKG1lbUluaXQpe1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIG1lbUluaXQubWVtYmVyLmlkZW50aWZpZXIgPT09IGJhc2UuY2xhc3NOYW1lO1xyXG4vLyAgICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICAgICAgbWVtSW5pdHMgPSBtZW1Jbml0cy5maWx0ZXIoZnVuY3Rpb24obWVtSW5pdCl7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gbWVtSW5pdC5tZW1iZXIuaWRlbnRpZmllciAhPT0gYmFzZS5jbGFzc05hbWU7XHJcbi8vICAgICAgICAgICAgIH0pO1xyXG5cclxuLy8gICAgICAgICAgICAgaWYgKGJhc2VJbml0cy5sZW5ndGggPiAxKXtcclxuLy8gICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5jdG9yLmluaXQubXVsdGlwbGVfYmFzZV9pbml0cyh0aGlzKSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZSBpZiAoYmFzZUluaXRzLmxlbmd0aCA9PT0gMSl7XHJcbi8vICAgICAgICAgICAgICAgICB2YXIgbWVtID0gTWVtYmVySW5pdGlhbGl6ZXIuaW5zdGFuY2UoYmFzZUluaXRzWzBdLCB7cGFyZW50OiB0aGlzLCBzY29wZTogdGhpcy5ib2R5U2NvcGV9KTtcclxuLy8gICAgICAgICAgICAgICAgIG1lbS5jb21waWxlKHRoaXMuaV9jb250YWluaW5nQ2xhc3MuYmFzZUNsYXNzRW50aXRpZXNbMF0pO1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5tZW1iZXJJbml0aWFsaXplcnMucHVzaChtZW0pO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICB2YXIgbWVtID0gRGVmYXVsdE1lbWJlckluaXRpYWxpemVyLmluc3RhbmNlKHRoaXMuYXN0LCB7cGFyZW50OiB0aGlzLCBzY29wZTogdGhpcy5ib2R5U2NvcGV9KTtcclxuLy8gICAgICAgICAgICAgICAgIG1lbS5jb21waWxlKHRoaXMuaV9jb250YWluaW5nQ2xhc3MuYmFzZUNsYXNzRW50aXRpZXNbMF0pO1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5tZW1iZXJJbml0aWFsaXplcnMucHVzaChtZW0pO1xyXG4vLyAgICAgICAgICAgICAgICAgbWVtLmlzTWVtYmVySW5pdGlhbGl6ZXIgPSB0cnVlO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAvLyBJbml0aWFsaXplIG5vbi1zdGF0aWMgZGF0YSBtZW1iZXJzIG9mIHRoZSBjbGFzc1xyXG5cclxuLy8gICAgICAgICAvLyBDcmVhdGUgYSBtYXAgb2YgbmFtZSB0byBpbml0aWFsaXplci4gSW5pdGlhbGx5IGFsbCBpbml0aWFsaXplcnMgYXJlIG51bGwuXHJcbi8vICAgICAgICAgdmFyIGluaXRNYXAgPSB7fTtcclxuLy8gICAgICAgICB0aGlzLmlfY29udGFpbmluZ0NsYXNzLm1lbWJlclN1Ym9iamVjdEVudGl0aWVzLmZvckVhY2goZnVuY3Rpb24ob2JqTWVtYmVyKXtcclxuLy8gICAgICAgICAgICAgaW5pdE1hcFtvYmpNZW1iZXIubmFtZV0gPSBvYmpNZW1iZXI7XHJcbi8vICAgICAgICAgfSk7XHJcblxyXG4vLyAgICAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBhbGwgdGhlIG1lbWJlciBpbml0aWFsaXplcnMgYW5kIGFzc29jaWF0ZSB0aGVtIHdpdGggYXBwcm9wcmlhdGUgbWVtYmVyXHJcbi8vICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IG1lbUluaXRzLmxlbmd0aDsgKytpKXtcclxuLy8gICAgICAgICAgICAgdmFyIG1lbUluaXQgPSBtZW1Jbml0c1tpXTtcclxuXHJcbi8vICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGlzIHR5cGUgaGFzIGEgbWVtYmVyIG9mIHRoZSBnaXZlbiBuYW1lXHJcbi8vICAgICAgICAgICAgIHZhciBtZW1iZXJOYW1lID0gbWVtSW5pdC5tZW1iZXIuaWRlbnRpZmllcjtcclxuLy8gICAgICAgICAgICAgaWYgKGluaXRNYXAuaGFzT3duUHJvcGVydHkobWVtYmVyTmFtZSkpIHtcclxuLy8gICAgICAgICAgICAgICAgIHZhciBtZW0gPSBNZW1iZXJJbml0aWFsaXplci5pbnN0YW5jZShtZW1Jbml0LCB7cGFyZW50OiB0aGlzLCBzY29wZTogdGhpcy5ib2R5U2NvcGV9KTtcclxuLy8gICAgICAgICAgICAgICAgIG1lbS5jb21waWxlKGluaXRNYXBbbWVtYmVyTmFtZV0pO1xyXG4vLyAgICAgICAgICAgICAgICAgaW5pdE1hcFttZW1iZXJOYW1lXSA9IG1lbTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmN0b3IuaW5pdC5pbXByb3Blcl9tZW1iZXIodGhpcywgdGhpcy5pX2NvbnRhaW5pbmdDbGFzcywgbWVtYmVyTmFtZSkpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICAvLyBOb3cgaXRlcmF0ZSB0aHJvdWdoIG1lbWJlcnMgYWdhaW4gaW4gZGVjbGFyYXRpb24gb3JkZXIuIEFkZCBhc3NvY2lhdGVkIG1lbWJlciBpbml0aWFsaXplclxyXG4vLyAgICAgICAgIC8vIGZyb20gYWJvdmUgb3IgZGVmYXVsdCBpbml0aWFsaXplciBpZiB0aGVyZSB3YXNuJ3Qgb25lLlxyXG5cclxuLy8gICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbi8vICAgICAgICAgdGhpcy5pX2NvbnRhaW5pbmdDbGFzcy5tZW1iZXJTdWJvYmplY3RFbnRpdGllcy5mb3JFYWNoKGZ1bmN0aW9uKG9iak1lbWJlcil7XHJcbi8vICAgICAgICAgICAgIGlmIChpc0EoaW5pdE1hcFtvYmpNZW1iZXIubmFtZV0sIE1lbWJlckluaXRpYWxpemVyKSl7XHJcbi8vICAgICAgICAgICAgICAgICBzZWxmLm1lbWJlckluaXRpYWxpemVycy5wdXNoKGluaXRNYXBbb2JqTWVtYmVyLm5hbWVdKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNlIGlmIChpc0Eob2JqTWVtYmVyLnR5cGUsIFR5cGVzLkNsYXNzKSB8fCBpc0Eob2JqTWVtYmVyLnR5cGUsIFR5cGVzLkFycmF5KSl7XHJcbi8vICAgICAgICAgICAgICAgICB2YXIgbWVtID0gRGVmYXVsdE1lbWJlckluaXRpYWxpemVyLmluc3RhbmNlKHNlbGYuYXN0LCB7cGFyZW50OiBzZWxmLCBzY29wZTogc2VsZi5ib2R5U2NvcGV9KTtcclxuLy8gICAgICAgICAgICAgICAgIG1lbS5jb21waWxlKG9iak1lbWJlcik7XHJcbi8vICAgICAgICAgICAgICAgICBzZWxmLm1lbWJlckluaXRpYWxpemVycy5wdXNoKG1lbSk7XHJcbi8vICAgICAgICAgICAgICAgICBtZW0uaXNNZW1iZXJJbml0aWFsaXplciA9IHRydWU7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gZG8gYW55dGhpbmcgZm9yIG5vbi1jbGFzcyB0eXBlcyBzaW5jZSBkZWZhdWx0IGluaXRpYWxpemF0aW9uIGRvZXMgbm90aGluZ1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGlzVGFpbENoaWxkIDogZnVuY3Rpb24oY2hpbGQpe1xyXG4vLyAgICAgICAgIHJldHVybiB7aXNUYWlsOiBmYWxzZX07XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGRlc2NyaWJlIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgdmFyIGRlc2MgPSB7fTtcclxuLy8gICAgICAgICBpZiAodGhpcy5pc0RlZmF1bHRDb25zdHJ1Y3Rvcil7XHJcbi8vICAgICAgICAgICAgIGRlc2MubWVzc2FnZSA9IFwidGhlIGRlZmF1bHQgY29uc3RydWN0b3IgZm9yIHRoZSBcIiArIHRoaXMuaV9jb250YWluaW5nQ2xhc3MuY2xhc3NOYW1lICsgXCIgY2xhc3NcIjtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0NvcHlDb25zdHJ1Y3Rvcil7XHJcbi8vICAgICAgICAgICAgIGRlc2MubWVzc2FnZSA9IFwidGhlIGNvcHkgY29uc3RydWN0b3IgZm9yIHRoZSBcIiArIHRoaXMuaV9jb250YWluaW5nQ2xhc3MuY2xhc3NOYW1lICsgXCIgY2xhc3NcIjtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgZGVzYy5tZXNzYWdlID0gXCJhIGNvbnN0cnVjdG9yIGZvciB0aGUgXCIgKyB0aGlzLmlfY29udGFpbmluZ0NsYXNzLmNsYXNzTmFtZSArIFwiIGNsYXNzXCI7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIHJldHVybiBkZXNjXHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8gZXhwb3J0IHZhciBEZXN0cnVjdG9yRGVmaW5pdGlvbiA9IEZ1bmN0aW9uRGVmaW5pdGlvbi5leHRlbmQoe1xyXG4vLyAgICAgX25hbWU6IFwiRGVzdHJ1Y3RvckRlZmluaXRpb25cIixcclxuXHJcbi8vICAgICBpbml0IDogZnVuY3Rpb24oYXN0LCBjb250ZXh0KXtcclxuLy8gICAgICAgICBhc3NlcnQoY29udGV4dCk7XHJcbi8vICAgICAgICAgYXNzZXJ0KGlzQShjb250ZXh0LmNvbnRhaW5pbmdDbGFzcywgVHlwZXMuQ2xhc3MpKTtcclxuLy8gICAgICAgICBhc3NlcnQoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShcImFjY2Vzc1wiKSk7XHJcbi8vICAgICAgICAgdGhpcy5pbml0UGFyZW50KGFzdCwgY29udGV4dCk7XHJcbi8vICAgICAgICAgdGhpcy5hY2Nlc3MgPSBjb250ZXh0LmFjY2VzcztcclxuLy8gICAgICAgICB0aGlzLmlfY29udGFpbmluZ0NsYXNzID0gY29udGV4dC5jb250YWluaW5nQ2xhc3M7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGNvbXBpbGVEZWNsYXJhdGlvbiA6IGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgICAgIEZ1bmN0aW9uRGVmaW5pdGlvbi5jb21waWxlRGVjbGFyYXRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuLy8gICAgICAgICB0aGlzLmlfY29udGFpbmluZ0NsYXNzLmFkZERlc3RydWN0b3IodGhpcy5lbnRpdHkpO1xyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBjb21waWxlRGVjbGFyYXRvciA6IGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgICAgIHZhciBhc3QgPSB0aGlzLmFzdDtcclxuXHJcblxyXG4vLyAgICAgICAgIC8vIERlc3RydWN0b3JzIGRvIGhhdmUgbmFtZXMgYW5kIGNhbiBiZSBmb3VuZCB2aWEgbmFtZSBsb29rdXBcclxuLy8gICAgICAgICB0aGlzLm5hbWUgPSBcIn5cIiArIHRoaXMuaV9jb250YWluaW5nQ2xhc3MuY2xhc3NOYW1lO1xyXG5cclxuLy8gICAgICAgICB0aGlzLnZpcnR1YWwgPSB0aGlzLmFzdC52aXJ0dWFsO1xyXG5cclxuLy8gICAgICAgICAvLyBUaGVyZSBhcmUgbm8gcGFyYW1ldGVycyBmb3IgYSBkZXN0cnVjdG9yXHJcbi8vICAgICAgICAgdGhpcy5wYXJhbXMgPSBbXTtcclxuLy8gICAgICAgICB0aGlzLnBhcmFtVHlwZXMgPSBbXTtcclxuXHJcbi8vICAgICAgICAgLy8gSSBrbm93IHRoaXMgaXMgdGVjaG5pY2FsbHkgd3JvbmcgYnV0IEkgdGhpbmsgaXQgbWFrZXMgdGhpbmdzIHJ1biBzbW9vdGhlclxyXG4vLyAgICAgICAgIHRoaXMudHlwZSA9IFR5cGVzLkZ1bmN0aW9uLmluc3RhbmNlKFR5cGVzLlZvaWQuaW5zdGFuY2UoKSwgdGhpcy5wYXJhbVR5cGVzKTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgY29tcGlsZURlZmluaXRpb246IGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4vLyAgICAgICAgIHZhciBhc3QgPSB0aGlzLmFzdDtcclxuXHJcblxyXG4vLyAgICAgICAgIGlmICghYXN0LmJvZHkpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IuY2xhc3NfZGVmLmR0b3JfZGVmKHRoaXMpKTtcclxuLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgLy8gQ2FsbCBwYXJlbnQgY2xhc3MgdmVyc2lvbi4gV2lsbCBoYW5kbGUgYm9keSwgYXV0b21hdGljIG9iamVjdCBkZXN0cnVjdGlvbiwgZXRjLlxyXG4vLyAgICAgICAgIEZ1bmN0aW9uRGVmaW5pdGlvbi5jb21waWxlRGVmaW5pdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cclxuLy8gICAgICAgICB0aGlzLm1lbWJlcnNUb0Rlc3RydWN0ID0gdGhpcy5pX2NvbnRhaW5pbmdDbGFzcy5tZW1iZXJTdWJvYmplY3RFbnRpdGllcy5maWx0ZXIoZnVuY3Rpb24oZW50aXR5KXtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIGlzQShlbnRpdHkudHlwZSwgVHlwZXMuQ2xhc3MpO1xyXG4vLyAgICAgICAgIH0pLm1hcChmdW5jdGlvbihlbnRpdHlUb0Rlc3RydWN0KXtcclxuLy8gICAgICAgICAgICAgdmFyIGRlc3QgPSBlbnRpdHlUb0Rlc3RydWN0LnR5cGUuZGVzdHJ1Y3RvcjtcclxuLy8gICAgICAgICAgICAgaWYgKGRlc3Qpe1xyXG4vLyAgICAgICAgICAgICAgICAgdmFyIGNhbGwgPSBGdW5jdGlvbkNhbGwuaW5zdGFuY2Uoe2FyZ3M6IFtdfSwge3BhcmVudDogc2VsZn0pO1xyXG4vLyAgICAgICAgICAgICAgICAgY2FsbC5jb21waWxlKHtcclxuLy8gICAgICAgICAgICAgICAgICAgICBmdW5jOiBkZXN0LFxyXG4vLyAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyOiBlbnRpdHlUb0Rlc3RydWN0fSk7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbDtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgc2VsZi5hZGROb3RlKENQUEVycm9yLmRlY2xhcmF0aW9uLmR0b3Iubm9fZGVzdHJ1Y3Rvcl9tZW1iZXIoZW50aXR5VG9EZXN0cnVjdC5kZWNsLCBlbnRpdHlUb0Rlc3RydWN0LCBzZWxmLmlfY29udGFpbmluZ0NsYXNzKSk7XHJcbi8vICAgICAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgfSk7XHJcblxyXG4vLyAgICAgICAgIHRoaXMuYmFzZXNUb0Rlc3RydWN0ID0gdGhpcy5pX2NvbnRhaW5pbmdDbGFzcy5iYXNlQ2xhc3NFbnRpdGllcy5tYXAoZnVuY3Rpb24oZW50aXR5VG9EZXN0cnVjdCl7XHJcbi8vICAgICAgICAgICAgIHZhciBkZXN0ID0gZW50aXR5VG9EZXN0cnVjdC50eXBlLmRlc3RydWN0b3I7XHJcbi8vICAgICAgICAgICAgIGlmIChkZXN0KXtcclxuLy8gICAgICAgICAgICAgICAgIHZhciBjYWxsID0gRnVuY3Rpb25DYWxsLmluc3RhbmNlKHthcmdzOiBbXX0sIHtwYXJlbnQ6IHNlbGZ9KTtcclxuLy8gICAgICAgICAgICAgICAgIGNhbGwuY29tcGlsZSh7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgZnVuYzogZGVzdCxcclxuLy8gICAgICAgICAgICAgICAgICAgICByZWNlaXZlcjogZW50aXR5VG9EZXN0cnVjdH0pO1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGw7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgICAgIHNlbGYuYWRkTm90ZShDUFBFcnJvci5kZWNsYXJhdGlvbi5kdG9yLm5vX2Rlc3RydWN0b3JfYmFzZShlbnRpdHlUb0Rlc3RydWN0LmRlY2wsIGVudGl0eVRvRGVzdHJ1Y3QsIHNlbGYuaV9jb250YWluaW5nQ2xhc3MpKTtcclxuLy8gICAgICAgICAgICAgfVxyXG5cclxuLy8gICAgICAgICB9KTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgdXBOZXh0IDogQ2xhc3MuQkVGT1JFKGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgIGlmIChpbnN0LmluZGV4ID09PSBcImFmdGVyQ2hpbGRyZW5cIikge1xyXG4vLyAgICAgICAgICAgICAvLyBUaGVzZSBhcmUgcHVzaGVkIG9uIGEgc3RhY2sgYW5kIHNvIGVuZCB1cCBoYXBwZW5pbmdcclxuLy8gICAgICAgICAgICAgLy8gaW4gcmV2ZXJzZSBvcmRlciBvZiB0aGUgb3JkZXIgdGhleSBhcmUgcHVzaGVkIGhlcmUuXHJcbi8vICAgICAgICAgICAgIC8vIEF1dG9zIGZpcnN0LCB0aGVuIG1lbWJlcnMsIHRoZW4gYmFzZXMuXHJcbi8vICAgICAgICAgICAgIHRoaXMuYmFzZXNUb0Rlc3RydWN0LmZvckVhY2goZnVuY3Rpb24gKGRlc3Qpe1xyXG4vLyAgICAgICAgICAgICAgICAgZGVzdC5jcmVhdGVBbmRQdXNoSW5zdGFuY2Uoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICAgIHRoaXMubWVtYmVyc1RvRGVzdHJ1Y3QuZm9yRWFjaChmdW5jdGlvbiAoZGVzdCl7XHJcbi8vICAgICAgICAgICAgICAgICBkZXN0LmNyZWF0ZUFuZFB1c2hJbnN0YW5jZShzaW0sIGluc3QpO1xyXG4vLyAgICAgICAgICAgICB9KTtcclxuLy8gICAgICAgICAgICAgLy8gQXV0byBkZXN0cnVjdG9ycyBhcmUgaGFuZGxlZCBpbiBwYXJlbnQgY2xhc3NcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9KSxcclxuXHJcbi8vICAgICBzdGVwRm9yd2FyZCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgIGlmIChpbnN0LmluZGV4ID09PSBcImFmdGVyRGVzdHJ1Y3RvcnNcIil7XHJcbi8vICAgICAgICAgICAgIGluc3QuaW5kZXggPSBcImRvbmVcIjtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGlzVGFpbENoaWxkIDogZnVuY3Rpb24oY2hpbGQpe1xyXG4vLyAgICAgICAgIHJldHVybiB7aXNUYWlsOiBmYWxzZX07XHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZWxlY3RzIGEgZnVuY3Rpb24gZnJvbSB0aGUgZ2l2ZW4gb3ZlcmxvYWQgZ3JvdXAgYmFzZWQgb24gdGhlIHNpZ25hdHVyZSBvZlxyXG4gKiB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gdHlwZS4gKE5vdGUgdGhlcmUncyBubyBjb25zaWRlcmF0aW9uIG9mIGZ1bmN0aW9uIG5hbWVzIGhlcmUuKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdE92ZXJsb2FkZWREZWZpbml0aW9uKG92ZXJsb2FkR3JvdXA6IHJlYWRvbmx5IEZ1bmN0aW9uRGVmaW5pdGlvbltdLCB0eXBlOiBGdW5jdGlvblR5cGUpIHtcclxuICAgIHJldHVybiBvdmVybG9hZEdyb3VwLmZpbmQoZnVuYyA9PiB0eXBlLnNhbWVTaWduYXR1cmUoZnVuYy5kZWNsYXJhdGlvbi50eXBlKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIExpbmtlZERlZmluaXRpb24gPSBHbG9iYWxPYmplY3REZWZpbml0aW9uIHwgRnVuY3Rpb25EZWZpbml0aW9uW107IiwiaW1wb3J0IHtOb3RlSGFuZGxlciwgQ1BQRXJyb3J9IGZyb20gXCIuL2Vycm9yc1wiO1xyXG5pbXBvcnQgeyBDUFBDb25zdHJ1Y3QsIEFTVE5vZGUsIFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCB9IGZyb20gXCIuL2NvbnN0cnVjdHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBLRVlXT1JEUyA9IG5ldyBTZXQoW1xyXG4gICAgXCJhbGlnbmFzXCIsIFwiY29udGludWVcIiwgXCJmcmllbmRcIiwgXCJyZWdpc3RlclwiLCBcInRydWVcIixcclxuICAgIFwiYWxpZ25vZlwiLCBcImRlY2x0eXBlXCIsIFwiZ290b1wiLCBcInJlaW50ZXJwcmV0X2Nhc3RcIiwgXCJ0cnlcIixcclxuICAgIFwiYXNtXCIsIFwiZGVmYXVsdFwiLCBcImlmXCIsIFwicmV0dXJuXCIsIFwidHlwZWRlZlwiLFxyXG4gICAgXCJhdXRvXCIsIFwiZGVsZXRlXCIsIFwiaW5saW5lXCIsIFwic2hvcnRcIiwgXCJ0eXBlaWRcIixcclxuICAgIFwiYm9vbFwiLCBcImRvXCIsIFwiaW50XCIsIFwic2lnbmVkXCIsIFwidHlwZW5hbWVcIixcclxuICAgIFwiYnJlYWtcIiwgXCJkb3VibGVcIiwgXCJsb25nXCIsIFwic2l6ZW9mXCIsIFwidW5pb25cIixcclxuICAgIFwiY2FzZVwiLCBcImR5bmFtaWNfY2FzdFwiLCBcIm11dGFibGVcIiwgXCJzdGF0aWNcIiwgXCJ1bnNpZ25lZFwiLFxyXG4gICAgXCJjYXRjaFwiLCBcImVsc2VcIiwgXCJuYW1lc3BhY2VcIiwgXCJzdGF0aWNfYXNzZXJ0XCIsIFwidXNpbmdcIixcclxuICAgIFwiY2hhclwiLCBcImVudW1cIiwgXCJuZXdcIiwgXCJzdGF0aWNfY2FzdFwiLCBcInZpcnR1YWxcIixcclxuICAgIFwiY2hhcjE2X3RcIiwgXCJleHBsaWNpdFwiLCBcIm5vZXhjZXB0XCIsIFwic3RydWN0XCIsIFwidm9pZFwiLFxyXG4gICAgXCJjaGFyMzJfdFwiLCBcImV4cG9ydFwiLCBcIm51bGxwdHJcIiwgXCJzd2l0Y2hcIiwgXCJ2b2xhdGlsZVwiLFxyXG4gICAgXCJjbGFzc1wiLCBcImV4dGVyblwiLCBcIm9wZXJhdG9yXCIsIFwidGVtcGxhdGVcIiwgXCJ3Y2hhcl90XCIsXHJcbiAgICBcImNvbnN0XCIsIFwiZmFsc2VcIiwgXCJwcml2YXRlXCIsIFwidGhpc1wiLCBcIndoaWxlXCIsXHJcbiAgICBcImNvbnN0ZXhwclwiLCBcImZsb2F0XCIsIFwicHJvdGVjdGVkXCIsIFwidGhyZWFkX2xvY2FsXCIsXHJcbiAgICBcImNvbnN0X2Nhc3RcIiwgXCJmb3JcIiwgXCJwdWJsaWNcIiwgXCJ0aHJvd1wiXHJcbl0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFMVF9PUFMgPSBuZXcgU2V0KFtcclxuICAgIFwiYW5kXCIsIFwiYW5kX2VxXCIsIFwiYml0YW5kXCIsIFwiYml0b3JcIiwgXCJjb21wbFwiLCBcIm5vdFwiLFxyXG4gICAgXCJub3RfZXFcIiwgXCJvclwiLCBcIm9yX2VxXCIsIFwieG9yXCIsIFwieG9yX2VxXCJcclxuXSk7XHJcblxyXG4vLyBleHBvcnQgdHlwZSBVbnF1YWxpZmllZE5hbWUgPSBzdHJpbmc7XHJcbi8vIGV4cG9ydCB0eXBlIFF1YWxpZmllZE5hbWUgPSBzdHJpbmdbXTtcclxuLy8gZXhwb3J0IHR5cGUgTmFtZSA9IFVucXVhbGlmaWVkTmFtZSB8IFF1YWxpZmllZE5hbWU7XHJcblxyXG4vL1RPRE86IG5vdCBzdXJlIGlmIHRoaXMgaXMgdGhlIHJpZ2h0IHBsYWNlIGZvciB0aGlzLiBNYXkgYmUgYmV0dG9yIHN1aXRlZCBmb3IgZXJyb3IudHNcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSWRlbnRpZmllcihzcmM6IFRyYW5zbGF0aW9uVW5pdENvbnN0cnVjdCwgbmFtZTogc3RyaW5nLCBub3RlSGFuZGxlcjogTm90ZUhhbmRsZXIpIHtcclxuICAgIFxyXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBxdWFsaWZpZWQgbmFtZXNcclxuICAgIGlmIChuYW1lLmluY2x1ZGVzKFwiOjpcIikpIHtcclxuICAgICAgICBuYW1lLnNwbGl0KFwiOjpcIikuZm9yRWFjaCgoZWxlbSkgPT4gY2hlY2tJZGVudGlmaWVyKHNyYywgZWxlbSwgbm90ZUhhbmRsZXIpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgdGhhdCBpZGVudGlmaWVyIGlzIG5vdCBhIGtleXdvcmQgb3IgYW4gYWx0ZXJuYXRpdmUgcmVwcmVzZW50YXRpb24gZm9yIGFuIG9wZXJhdG9yXHJcbiAgICBpZiAoS0VZV09SRFMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgbm90ZUhhbmRsZXIuYWRkTm90ZShDUFBFcnJvci5pZGVuLmtleXdvcmQoc3JjLCBuYW1lKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoQUxUX09QUy5oYXMobmFtZSkpIHtcclxuICAgICAgICBub3RlSGFuZGxlci5hZGROb3RlKENQUEVycm9yLmlkZW4uYWx0X29wKHNyYywgbmFtZSkpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZ1bGx5UXVhbGlmaWVkTmFtZSguLi5uYW1lcyA6IHN0cmluZ1tdKSB7XHJcbiAgICByZXR1cm4gXCI6OlwiICsgbmFtZXMuam9pbihcIjo6XCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZnVsbHlRdWFsaWZpZWROYW1lVG9VbnF1YWxpZmllZChmcW5hbWU6IHN0cmluZykge1xyXG4gICAgbGV0IGkgPSBmcW5hbWUubGFzdEluZGV4T2YoXCI6OlwiKTtcclxuICAgIGlmIChpID09PSAtMSkge1xyXG4gICAgICAgIHJldHVybiBmcW5hbWU7XHJcbiAgICB9XHJcbiAgICBlbHNle1xyXG4gICAgICAgIHJldHVybiBmcW5hbWUuc2xpY2UoaSsyKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTb3VyY2VDb2RlIHtcclxuICAgIHRleHQ6IHN0cmluZztcclxuICAgIGxpbmU6IG51bWJlcjtcclxuICAgIGNvbHVtbjogbnVtYmVyO1xyXG4gICAgc3RhcnQ6IG51bWJlcjtcclxuICAgIGVuZDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElkZW50aWZpZXJBU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBpZGVudGlmaWVyOiBzdHJpbmc7XHJcbn0iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsImltcG9ydCB7IEJhc2ljQ1BQQ29uc3RydWN0LCBTdWNjZXNzZnVsbHlDb21waWxlZCwgUnVudGltZUNvbnN0cnVjdCwgVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgQVNUTm9kZSwgIENQUENvbnN0cnVjdCB9IGZyb20gXCIuL2NvbnN0cnVjdHNcIjtcclxuaW1wb3J0IHsgQ1BQRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnNcIjtcclxuaW1wb3J0IHsgRXhwcmVzc2lvbkFTVE5vZGUsIEV4cHJlc3Npb24sIENvbXBpbGVkRXhwcmVzc2lvbiwgUnVudGltZUV4cHJlc3Npb24sIGNyZWF0ZUV4cHJlc3Npb25Gcm9tQVNUIH0gZnJvbSBcIi4vZXhwcmVzc2lvbnNcIjtcclxuaW1wb3J0IHsgRGVjbGFyYXRpb25BU1ROb2RlLCBTaW1wbGVEZWNsYXJhdGlvbiwgRnVuY3Rpb25EZWZpbml0aW9uLCBDb21waWxlZFNpbXBsZURlY2xhcmF0aW9uLCBjcmVhdGVTaW1wbGVEZWNsYXJhdGlvbkZyb21BU1QsIGNyZWF0ZURlY2xhcmF0aW9uRnJvbUFTVCwgVmFyaWFibGVEZWZpbml0aW9uIH0gZnJvbSBcIi4vZGVjbGFyYXRpb25zXCI7XHJcbmltcG9ydCB7IERpcmVjdEluaXRpYWxpemVyLCBDb21waWxlZERpcmVjdEluaXRpYWxpemVyLCBSdW50aW1lRGlyZWN0SW5pdGlhbGl6ZXIgfSBmcm9tIFwiLi9pbml0aWFsaXplcnNcIjtcclxuaW1wb3J0IHsgVm9pZFR5cGUsIFJlZmVyZW5jZVR5cGUgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBSZXR1cm5CeVJlZmVyZW5jZUVudGl0eSwgUmV0dXJuT2JqZWN0RW50aXR5LCBCbG9ja1Njb3BlLCBBdXRvRW50aXR5LCBMb2NhbFJlZmVyZW5jZUVudGl0eSB9IGZyb20gXCIuL2VudGl0aWVzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVGdW5jdGlvbiwgRnVuY3Rpb25Db250ZXh0IH0gZnJvbSBcIi4vZnVuY3Rpb25zXCI7XHJcbmltcG9ydCB7IE11dGFibGUsIGFzTXV0YWJsZSB9IGZyb20gXCIuLi91dGlsL3V0aWxcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFN0YXRlbWVudEFTVE5vZGUgPVxyXG4gICAgTGFiZWxlZFN0YXRlbWVudEFTVE5vZGUgfFxyXG4gICAgQmxvY2tBU1ROb2RlIHxcclxuICAgIFNlbGVjdGlvblN0YXRlbWVudEFTVE5vZGUgfFxyXG4gICAgSXRlcmF0aW9uU3RhdGVtZW50QVNUTm9kZSB8XHJcbiAgICBKdW1wU3RhdGVtZW50QVNUTm9kZSB8XHJcbiAgICBEZWNsYXJhdGlvblN0YXRlbWVudEFTVE5vZGUgfFxyXG4gICAgRXhwcmVzc2lvblN0YXRlbWVudEFTVE5vZGUgfFxyXG4gICAgTnVsbFN0YXRlbWVudEFTVE5vZGU7XHJcblxyXG5jb25zdCBTdGF0ZW1lbnRDb25zdHJ1Y3RzTWFwID0ge1xyXG4gICAgXCJsYWJlbGVkX3N0YXRlbWVudFwiIDogKGFzdDogTGFiZWxlZFN0YXRlbWVudEFTVE5vZGUsIGNvbnRleHQ6IEJsb2NrQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkU3RhdGVtZW50KGNvbnRleHQsIFwibGFiZWxlZCBzdGF0ZW1lbnRcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcImNvbXBvdW5kX3N0YXRlbWVudFwiIDogKGFzdDogQmxvY2tBU1ROb2RlLCBjb250ZXh0OiBCbG9ja0NvbnRleHQpID0+IEJsb2NrLmNyZWF0ZUZyb21BU1QoYXN0LCBjb250ZXh0KSxcclxuICAgIFwic2VsZWN0aW9uX3N0YXRlbWVudFwiIDogKGFzdDogU2VsZWN0aW9uU3RhdGVtZW50QVNUTm9kZSwgY29udGV4dDogQmxvY2tDb250ZXh0KSA9PiBuZXcgVW5zdXBwb3J0ZWRTdGF0ZW1lbnQoY29udGV4dCwgXCJzZWxlY3Rpb24gc3RhdGVtZW50XCIpLnNldEFTVChhc3QpLFxyXG4gICAgXCJ3aGlsZV9zdGF0ZW1lbnRcIiA6IChhc3Q6IFdoaWxlU3RhdGVtZW50QVNUTm9kZSwgY29udGV4dDogQmxvY2tDb250ZXh0KSA9PiBuZXcgVW5zdXBwb3J0ZWRTdGF0ZW1lbnQoY29udGV4dCwgXCJ3aGlsZSBsb29wXCIpLnNldEFTVChhc3QpLFxyXG4gICAgXCJkb3doaWxlX3N0YXRlbWVudFwiIDogKGFzdDogRG9XaGlsZVN0YXRlbWVudEFTVE5vZGUsIGNvbnRleHQ6IEJsb2NrQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkU3RhdGVtZW50KGNvbnRleHQsIFwiZG8td2hpbGUgbG9vcFwiKS5zZXRBU1QoYXN0KSxcclxuICAgIFwiZm9yX3N0YXRlbWVudFwiIDogKGFzdDogRm9yU3RhdGVtZW50QVNUTm9kZSwgY29udGV4dDogQmxvY2tDb250ZXh0KSA9PiBuZXcgVW5zdXBwb3J0ZWRTdGF0ZW1lbnQoY29udGV4dCwgXCJmb3IgbG9vcFwiKS5zZXRBU1QoYXN0KSxcclxuICAgIFwiYnJlYWtfc3RhdGVtZW50XCIgOiAoYXN0OiBCcmVha1N0YXRlbWVudEFTVE5vZGUsIGNvbnRleHQ6IEJsb2NrQ29udGV4dCkgPT4gbmV3IFVuc3VwcG9ydGVkU3RhdGVtZW50KGNvbnRleHQsIFwiYnJlYWsgc3RhdGVtZW50XCIpLnNldEFTVChhc3QpLFxyXG4gICAgXCJjb250aW51ZV9zdGF0ZW1lbnRcIiA6IChhc3Q6IENvbnRpbnVlU3RhdGVtZW50QVNUTm9kZSwgY29udGV4dDogQmxvY2tDb250ZXh0KSA9PiBuZXcgVW5zdXBwb3J0ZWRTdGF0ZW1lbnQoY29udGV4dCwgXCJjb250aW51ZSBzdGF0ZW1lbnRcIikuc2V0QVNUKGFzdCksXHJcbiAgICBcInJldHVybl9zdGF0ZW1lbnRcIiA6IChhc3Q6IFJldHVyblN0YXRlbWVudEFTVE5vZGUsIGNvbnRleHQ6IEJsb2NrQ29udGV4dCkgPT4gUmV0dXJuU3RhdGVtZW50LmNyZWF0ZUZyb21BU1QoYXN0LCBjb250ZXh0KSxcclxuICAgIFwiZGVjbGFyYXRpb25fc3RhdGVtZW50XCIgOiAoYXN0OiBEZWNsYXJhdGlvblN0YXRlbWVudEFTVE5vZGUsIGNvbnRleHQ6IEJsb2NrQ29udGV4dCkgPT4gRGVjbGFyYXRpb25TdGF0ZW1lbnQuY3JlYXRlRnJvbUFTVChhc3QsIGNvbnRleHQpLFxyXG4gICAgXCJleHByZXNzaW9uX3N0YXRlbWVudFwiOiAoYXN0OiBFeHByZXNzaW9uU3RhdGVtZW50QVNUTm9kZSwgY29udGV4dDogQmxvY2tDb250ZXh0KSA9PiBFeHByZXNzaW9uU3RhdGVtZW50LmNyZWF0ZUZyb21BU1QoYXN0LCBjb250ZXh0KSxcclxuICAgIFwibnVsbF9zdGF0ZW1lbnRcIjogKGFzdDogTnVsbFN0YXRlbWVudEFTVE5vZGUsIGNvbnRleHQ6IEJsb2NrQ29udGV4dCkgPT4gbmV3IE51bGxTdGF0ZW1lbnQoY29udGV4dCkuc2V0QVNUKGFzdClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0YXRlbWVudEZyb21BU1Q8QVNUVHlwZSBleHRlbmRzIFN0YXRlbWVudEFTVE5vZGU+KGFzdDogQVNUVHlwZSwgY29udGV4dDogQmxvY2tDb250ZXh0KSA6IFJldHVyblR5cGU8KHR5cGVvZiBTdGF0ZW1lbnRDb25zdHJ1Y3RzTWFwKVtBU1RUeXBlW1wiY29uc3RydWN0X3R5cGVcIl1dPiB7XHJcbiAgICByZXR1cm4gPGFueT5TdGF0ZW1lbnRDb25zdHJ1Y3RzTWFwW2FzdC5jb25zdHJ1Y3RfdHlwZV0oPGFueT5hc3QsIGNvbnRleHQpO1xyXG59IFxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0YXRlbWVudDxBU1RUeXBlIGV4dGVuZHMgU3RhdGVtZW50QVNUTm9kZSA9IFN0YXRlbWVudEFTVE5vZGU+IGV4dGVuZHMgQmFzaWNDUFBDb25zdHJ1Y3Q8QmxvY2tDb250ZXh0LCBBU1RUeXBlPiB7XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IGNyZWF0ZVJ1bnRpbWVTdGF0ZW1lbnQodGhpczogQ29tcGlsZWRTdGF0ZW1lbnQsIHBhcmVudDogUnVudGltZVN0YXRlbWVudCkgOiBSdW50aW1lU3RhdGVtZW50O1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZFN0YXRlbWVudCBleHRlbmRzIFN0YXRlbWVudCwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJ1bnRpbWVTdGF0ZW1lbnQ8QyBleHRlbmRzIENvbXBpbGVkU3RhdGVtZW50ID0gQ29tcGlsZWRTdGF0ZW1lbnQ+IGV4dGVuZHMgUnVudGltZUNvbnN0cnVjdDxDPiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb246IFJ1bnRpbWVGdW5jdGlvbjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKG1vZGVsOiBDLCBwYXJlbnQ6IFJ1bnRpbWVTdGF0ZW1lbnQgfCBSdW50aW1lRnVuY3Rpb24pIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgXCJzdGF0ZW1lbnRcIiwgcGFyZW50KTtcclxuICAgICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgUnVudGltZUZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmluZ1J1bnRpbWVGdW5jdGlvbiA9IHBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmluZ1J1bnRpbWVGdW5jdGlvbiA9IHBhcmVudC5jb250YWluaW5nUnVudGltZUZ1bmN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcG9wcGVkKCkge1xyXG4gICAgICAgIHN1cGVyLnBvcHBlZCgpO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwicmVzZXRcIik7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWRTdGF0ZW1lbnQgZXh0ZW5kcyBTdGF0ZW1lbnQge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHQ6IEJsb2NrQ29udGV4dCwgdW5zdXBwb3J0ZWROYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3IubG9ic3Rlci51bnN1cHBvcnRlZF9mZWF0dXJlKHRoaXMsIHVuc3VwcG9ydGVkTmFtZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFdpbGwgbmV2ZXIgYmUgY2FsbGVkIHNpbmNlIGFuIFVuc3VwcG9ydGVkU3RhdGVtZW50IHdpbGwgYWx3YXlzIGhhdmUgZXJyb3JzIGFuZFxyXG4gICAgLy8gbmV2ZXIgc2F0aXNmeSB0aGUgcmVxdWlyZWQgdGhpcyBjb250ZXh0IG9mIENvbXBpbGVkU3RhdGVtZW50XHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZVN0YXRlbWVudCh0aGlzOiBDb21waWxlZFN0YXRlbWVudCwgcGFyZW50OiBSdW50aW1lU3RhdGVtZW50KSA6IG5ldmVyIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY3JlYXRlIGEgcnVudGltZSBpbnN0YW5jZSBvZiBhbiB1bnN1cHBvcnRlZCBjb25zdHJ1Y3QuXCIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFeHByZXNzaW9uU3RhdGVtZW50QVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwiZXhwcmVzc2lvbl9zdGF0ZW1lbnRcIjtcclxuICAgIHJlYWRvbmx5IGV4cHJlc3Npb246IEV4cHJlc3Npb25BU1ROb2RlO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblN0YXRlbWVudCBleHRlbmRzIFN0YXRlbWVudDxFeHByZXNzaW9uU3RhdGVtZW50QVNUTm9kZT4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBleHByZXNzaW9uOiBFeHByZXNzaW9uO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbUFTVChhc3Q6IEV4cHJlc3Npb25TdGF0ZW1lbnRBU1ROb2RlLCBjb250ZXh0OiBCbG9ja0NvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEV4cHJlc3Npb25TdGF0ZW1lbnQoY29udGV4dCxcclxuICAgICAgICAgICAgY3JlYXRlRXhwcmVzc2lvbkZyb21BU1QoYXN0LmV4cHJlc3Npb24sIGNvbnRleHQpXHJcbiAgICAgICAgKS5zZXRBU1QoYXN0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogQmxvY2tDb250ZXh0LCBleHByZXNzaW9uOiBFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVTdGF0ZW1lbnQodGhpczogQ29tcGlsZWRFeHByZXNzaW9uU3RhdGVtZW50LCBwYXJlbnQ6IFJ1bnRpbWVTdGF0ZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVFeHByZXNzaW9uU3RhdGVtZW50KHRoaXMsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzVGFpbENoaWxkKGNoaWxkOiBDUFBDb25zdHJ1Y3QpIHtcclxuICAgICAgICByZXR1cm4ge2lzVGFpbDogdHJ1ZX07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRFeHByZXNzaW9uU3RhdGVtZW50IGV4dGVuZHMgRXhwcmVzc2lvblN0YXRlbWVudCwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgcmVhZG9ubHkgZXhwcmVzc2lvbjogQ29tcGlsZWRFeHByZXNzaW9uO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUnVudGltZUV4cHJlc3Npb25TdGF0ZW1lbnQgZXh0ZW5kcyBSdW50aW1lU3RhdGVtZW50PENvbXBpbGVkRXhwcmVzc2lvblN0YXRlbWVudD4ge1xyXG4gICAgXHJcbiAgICBwdWJsaWMgZXhwcmVzc2lvbjogUnVudGltZUV4cHJlc3Npb247XHJcbiAgICBwcml2YXRlIGluZGV4ID0gXCJleHByXCI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRFeHByZXNzaW9uU3RhdGVtZW50LCBwYXJlbnQ6IFJ1bnRpbWVTdGF0ZW1lbnQpIHtcclxuICAgICAgICBzdXBlcihtb2RlbCwgcGFyZW50KTtcclxuICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSB0aGlzLm1vZGVsLmV4cHJlc3Npb24uY3JlYXRlUnVudGltZUV4cHJlc3Npb24odGhpcyk7XHJcbiAgICB9XHJcblxyXG5cdHByb3RlY3RlZCB1cE5leHRJbXBsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4ID09PSBcImV4cHJcIikge1xyXG4gICAgICAgICAgICB0aGlzLnNpbS5wdXNoKHRoaXMuZXhwcmVzc2lvbik7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBcImRvbmVcIjtcclxuICAgICAgICB9XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0XHJcblx0cHJvdGVjdGVkIHN0ZXBGb3J3YXJkSW1wbCgpIHtcclxuICAgICAgICB0aGlzLnNpbS5wb3AoKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOdWxsU3RhdGVtZW50QVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwibnVsbF9zdGF0ZW1lbnRcIjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE51bGxTdGF0ZW1lbnQgZXh0ZW5kcyBTdGF0ZW1lbnQ8TnVsbFN0YXRlbWVudEFTVE5vZGU+IHtcclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZVN0YXRlbWVudCh0aGlzOiBDb21waWxlZE51bGxTdGF0ZW1lbnQsIHBhcmVudDogUnVudGltZVN0YXRlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUnVudGltZU51bGxTdGF0ZW1lbnQodGhpcywgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNUYWlsQ2hpbGQoY2hpbGQ6IENQUENvbnN0cnVjdCkge1xyXG4gICAgICAgIHJldHVybiB7aXNUYWlsOiB0cnVlfTsgLy8gTm90ZTogTnVsbFN0YXRlbWVudCB3aWxsIG5ldmVyIGFjdHVhbGx5IGhhdmUgY2hpbGRyZW4sIHNvIHRoaXMgaXNuJ3QgdXNlZFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkTnVsbFN0YXRlbWVudCBleHRlbmRzIE51bGxTdGF0ZW1lbnQsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuICAgIFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUnVudGltZU51bGxTdGF0ZW1lbnQgZXh0ZW5kcyBSdW50aW1lU3RhdGVtZW50PENvbXBpbGVkTnVsbFN0YXRlbWVudD4ge1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IENvbXBpbGVkTnVsbFN0YXRlbWVudCwgcGFyZW50OiBSdW50aW1lU3RhdGVtZW50KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwTmV4dEltcGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGVwRm9yd2FyZEltcGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEZWNsYXJhdGlvblN0YXRlbWVudEFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcImRlY2xhcmF0aW9uX3N0YXRlbWVudFwiO1xyXG4gICAgcmVhZG9ubHkgZGVjbGFyYXRpb246IERlY2xhcmF0aW9uQVNUTm9kZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERlY2xhcmF0aW9uU3RhdGVtZW50IGV4dGVuZHMgU3RhdGVtZW50PERlY2xhcmF0aW9uU3RhdGVtZW50QVNUTm9kZT4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBkZWNsYXJhdGlvbnM6IHJlYWRvbmx5IFNpbXBsZURlY2xhcmF0aW9uW10gfCBGdW5jdGlvbkRlZmluaXRpb24gLyogfCBDbGFzc0RlZmluaXRpb24qLztcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21BU1QoYXN0OiBEZWNsYXJhdGlvblN0YXRlbWVudEFTVE5vZGUsIGNvbnRleHQ6IEJsb2NrQ29udGV4dCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb25TdGF0ZW1lbnQoY29udGV4dCxcclxuICAgICAgICAgICAgY3JlYXRlRGVjbGFyYXRpb25Gcm9tQVNUKGFzdC5kZWNsYXJhdGlvbiwgY29udGV4dClcclxuICAgICAgICApLnNldEFTVChhc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBCbG9ja0NvbnRleHQsIGRlY2xhcmF0aW9uczogcmVhZG9ubHkgU2ltcGxlRGVjbGFyYXRpb25bXSB8IEZ1bmN0aW9uRGVmaW5pdGlvbiAvKiB8IENsYXNzRGVmaW5pdGlvbiovKSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcblxyXG4gICAgICAgIGlmIChkZWNsYXJhdGlvbnMgaW5zdGFuY2VvZiBGdW5jdGlvbkRlZmluaXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLnN0bXQuZnVuY3Rpb25fZGVmaW5pdGlvbl9wcm9oaWJpdGVkKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2godGhpcy5kZWNsYXJhdGlvbnMgPSBkZWNsYXJhdGlvbnMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmF0dGFjaEFsbCh0aGlzLmRlY2xhcmF0aW9ucyA9IGRlY2xhcmF0aW9ucyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gZWxzZSBpZiAoZGVjbGFyYXRpb24gaW5zdGFuY2VvZiBDbGFzc0RlZmluaXRpb24pIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5hZGROb3RlKENQUEVycm9yLmxvYnN0ZXIudW5zdXBwb3J0ZWRfZmVhdHVyZSh0aGlzLCBcImxvY2FsIGNsYXNzZXNcIikpO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlUnVudGltZVN0YXRlbWVudCh0aGlzOiBDb21waWxlZERlY2xhcmF0aW9uU3RhdGVtZW50LCBwYXJlbnQ6IFJ1bnRpbWVTdGF0ZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJ1bnRpbWVEZWNsYXJhdGlvblN0YXRlbWVudCh0aGlzLCBwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc1RhaWxDaGlsZChjaGlsZDogQ1BQQ29uc3RydWN0KSB7XHJcbiAgICAgICAgcmV0dXJuIHtpc1RhaWw6IHRydWV9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkRGVjbGFyYXRpb25TdGF0ZW1lbnQgZXh0ZW5kcyBEZWNsYXJhdGlvblN0YXRlbWVudCwgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4gICAgXHJcbiAgICAvLyBuYXJyb3dzIHRvIGNvbXBpbGVkIHZlcnNpb24gYW5kIHJ1bGVzIG91dCBhIEZ1bmN0aW9uRGVmaW5pdGlvbiBvciBDbGFzc0RlZmluaXRpb25cclxuICAgIHJlYWRvbmx5IGRlY2xhcmF0aW9uczogcmVhZG9ubHkgQ29tcGlsZWRTaW1wbGVEZWNsYXJhdGlvbltdO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUnVudGltZURlY2xhcmF0aW9uU3RhdGVtZW50IGV4dGVuZHMgUnVudGltZVN0YXRlbWVudDxDb21waWxlZERlY2xhcmF0aW9uU3RhdGVtZW50PiB7XHJcblxyXG4gICAgcHJpdmF0ZSBpbmRleCA9IDA7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWREZWNsYXJhdGlvblN0YXRlbWVudCwgcGFyZW50OiBSdW50aW1lU3RhdGVtZW50KSB7XHJcbiAgICAgICAgc3VwZXIobW9kZWwsIHBhcmVudCk7XHJcbiAgICB9XHJcblx0XHJcbiAgICBwcm90ZWN0ZWQgdXBOZXh0SW1wbCgpIHtcclxuXHJcbiAgICAgICAgbGV0IGluaXRpYWxpemVycyA9IHRoaXMubW9kZWwuZGVjbGFyYXRpb25zLm1hcChkID0+IGQuaW5pdGlhbGl6ZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4IDwgaW5pdGlhbGl6ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgaW5pdCA9IGluaXRpYWxpemVyc1t0aGlzLmluZGV4XTtcclxuICAgICAgICAgICAgaWYoaW5pdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gT25seSBkZWNsYXJhdGlvbnMgd2l0aCBhbiBpbml0aWFsaXplciAoZS5nLiBhIHZhcmlhYmxlIGRlZmluaXRpb24pIGhhdmUgc29tZXRoaW5nXHJcbiAgICAgICAgICAgICAgICAvLyB0byBkbyBhdCBydW50aW1lLiBPdGhlcnMgKGUuZy4gdHlwZWRlZnMpIGRvIG5vdGhpbmcuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcImluaXRpYWxpemluZ1wiLCB0aGlzLmluZGV4KTtcclxuICAgICAgICAgICAgICAgIGxldCBydW50aW1lSW5pdCA9IGluaXQuY3JlYXRlUnVudGltZUluaXRpYWxpemVyKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaW0ucHVzaChydW50aW1lSW5pdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xyXG4gICAgICAgICAgICB0aGlzLndhaXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5zaW0ucG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGVwRm9yd2FyZEltcGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IHR5cGUgSnVtcFN0YXRlbWVudEFTVE5vZGUgPSBCcmVha1N0YXRlbWVudEFTVE5vZGUgfCBDb250aW51ZVN0YXRlbWVudEFTVE5vZGUgfCBSZXR1cm5TdGF0ZW1lbnRBU1ROb2RlO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCcmVha1N0YXRlbWVudEFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcImJyZWFrX3N0YXRlbWVudFwiO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbnRpbnVlU3RhdGVtZW50QVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwiY29udGludWVfc3RhdGVtZW50XCI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmV0dXJuU3RhdGVtZW50QVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwicmV0dXJuX3N0YXRlbWVudFwiO1xyXG4gICAgcmVhZG9ubHkgZXhwcmVzc2lvbjogRXhwcmVzc2lvbkFTVE5vZGU7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZXR1cm5TdGF0ZW1lbnQgZXh0ZW5kcyBTdGF0ZW1lbnQ8UmV0dXJuU3RhdGVtZW50QVNUTm9kZT4ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBleHByZXNzaW9uPzogRXhwcmVzc2lvbjtcclxuXHJcbiAgICAvLyBUT0RPOiBUZWNobmljYWxseSwgdGhpcyBzaG91bGQgYmUgQ29weUluaXRpYWxpemVyXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmV0dXJuSW5pdGlhbGl6ZXI/OiBEaXJlY3RJbml0aWFsaXplcjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21BU1QoYXN0OiBSZXR1cm5TdGF0ZW1lbnRBU1ROb2RlLCBjb250ZXh0OiBCbG9ja0NvbnRleHQpIHtcclxuICAgICAgICByZXR1cm4gYXN0LmV4cHJlc3Npb25cclxuICAgICAgICAgICAgPyBuZXcgUmV0dXJuU3RhdGVtZW50KGNvbnRleHQsIGNyZWF0ZUV4cHJlc3Npb25Gcm9tQVNUKGFzdC5leHByZXNzaW9uLCBjb250ZXh0KSkuc2V0QVNUKGFzdClcclxuICAgICAgICAgICAgOiBuZXcgUmV0dXJuU3RhdGVtZW50KGNvbnRleHQpLnNldEFTVChhc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBCbG9ja0NvbnRleHQsIGV4cHJlc3Npb24/OiBFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgc3VwZXIoY29udGV4dCk7XHJcbiAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcclxuXHJcbiAgICAgICAgbGV0IHJldHVyblR5cGUgPSB0aGlzLmNvbnRleHQuY29udGFpbmluZ0Z1bmN0aW9uLnR5cGUucmV0dXJuVHlwZTtcclxuXHJcbiAgICAgICAgaWYgKHJldHVyblR5cGUgaW5zdGFuY2VvZiBWb2lkVHlwZSkge1xyXG4gICAgICAgICAgICBpZiAoZXhwcmVzc2lvbikge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhbiBleHByZXNzaW9uIHRvIHJldHVybiwgYnV0IHRoZSB0eXBlIGlzIHZvaWQsIHNvIHRoYXQncyBiYWRcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5zdG10LnJldHVyblN0YXRlbWVudC5leHByVm9pZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQSByZXR1cm4gc3RhdGVtZW50IHdpdGggbm8gZXhwcmVzc2lvbiBpcyBvbmx5IGFsbG93ZWQgaW4gdm9pZCBmdW5jdGlvbnMuXHJcbiAgICAgICAgLy8gQXQgdGhlIG1vbWVudCwgY29uc3RydWN0b3JzL2Rlc3RydWN0b3JzIGFyZSBoYWNrZWQgdG8gaGF2ZSB2b2lkIHJldHVybiB0eXBlLFxyXG4gICAgICAgIC8vIHNvIHRoaXMgY2hlY2sgaXMgb2sgZm9yIHJldHVybiBzdGF0ZW1lbnRzIGluIGEgY29uc3RydWN0b3IuXHJcbiAgICAgICAgaWYgKCFleHByZXNzaW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5zdG10LnJldHVyblN0YXRlbWVudC5lbXB0eSh0aGlzKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXR1cm5UeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlVHlwZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJldHVybkluaXRpYWxpemVyID0gRGlyZWN0SW5pdGlhbGl6ZXIuY3JlYXRlKGNvbnRleHQsIG5ldyBSZXR1cm5CeVJlZmVyZW5jZUVudGl0eShyZXR1cm5UeXBlLnJlZlRvKSwgW2V4cHJlc3Npb25dKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmV0dXJuSW5pdGlhbGl6ZXIgPSBEaXJlY3RJbml0aWFsaXplci5jcmVhdGUoY29udGV4dCwgbmV3IFJldHVybk9iamVjdEVudGl0eShyZXR1cm5UeXBlKSwgW2V4cHJlc3Npb25dKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOb3RlOiBUaGUgZXhwcmVzc2lvbiBpcyBOT1QgYXR0YWNoZWQgZGlyZWN0bHkgaGVyZSwgc2luY2UgaXQncyBhdHRhY2hlZCB1bmRlciB0aGUgaW5pdGlhbGl6ZXIuXHJcbiAgICAgICAgdGhpcy5hdHRhY2godGhpcy5yZXR1cm5Jbml0aWFsaXplcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVTdGF0ZW1lbnQodGhpczogQ29tcGlsZWRSZXR1cm5TdGF0ZW1lbnQsIHBhcmVudDogUnVudGltZVN0YXRlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUnVudGltZVJldHVyblN0YXRlbWVudCh0aGlzLCBwYXJlbnQpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBpc1RhaWxDaGlsZCA6IGZ1bmN0aW9uKGNoaWxkKXtcclxuICAgIC8vICAgICByZXR1cm4ge2lzVGFpbDogdHJ1ZSxcclxuICAgIC8vICAgICAgICAgcmVhc29uOiBcIlRoZSByZWN1cnNpdmUgY2FsbCBpcyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBhIHJldHVybi5cIn07XHJcbiAgICAvLyB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRSZXR1cm5TdGF0ZW1lbnQgZXh0ZW5kcyBSZXR1cm5TdGF0ZW1lbnQsIFN1Y2Nlc3NmdWxseUNvbXBpbGVkIHtcclxuICAgIHJlYWRvbmx5IGV4cHJlc3Npb24/OiBDb21waWxlZEV4cHJlc3Npb247XHJcbiAgICByZWFkb25seSByZXR1cm5Jbml0aWFsaXplcj86IENvbXBpbGVkRGlyZWN0SW5pdGlhbGl6ZXI7XHJcbn1cclxuXHJcbmVudW0gUnVudGltZVJldHVyblN0YXRlbWVudEluZGljZXMge1xyXG4gICAgUFVTSF9JTklUSUFMSVpFUixcclxuICAgIFJFVFVSTlxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUnVudGltZVJldHVyblN0YXRlbWVudCBleHRlbmRzIFJ1bnRpbWVTdGF0ZW1lbnQ8Q29tcGlsZWRSZXR1cm5TdGF0ZW1lbnQ+IHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmV0dXJuSW5pdGlhbGl6ZXI/OiBSdW50aW1lRGlyZWN0SW5pdGlhbGl6ZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBpbmRleCA9IFJ1bnRpbWVSZXR1cm5TdGF0ZW1lbnRJbmRpY2VzLlBVU0hfSU5JVElBTElaRVI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChtb2RlbDogQ29tcGlsZWRSZXR1cm5TdGF0ZW1lbnQsIHBhcmVudDogUnVudGltZVN0YXRlbWVudCkge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsLCBwYXJlbnQpO1xyXG4gICAgICAgIGlmKG1vZGVsLnJldHVybkluaXRpYWxpemVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmV0dXJuSW5pdGlhbGl6ZXIgPSBtb2RlbC5yZXR1cm5Jbml0aWFsaXplci5jcmVhdGVSdW50aW1lSW5pdGlhbGl6ZXIodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cdFxyXG4gICAgcHJvdGVjdGVkIHVwTmV4dEltcGwoKSB7XHJcbiAgICAgICAgaWYodGhpcy5pbmRleCA9PT0gUnVudGltZVJldHVyblN0YXRlbWVudEluZGljZXMuUFVTSF9JTklUSUFMSVpFUikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yZXR1cm5Jbml0aWFsaXplcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaW0ucHVzaCh0aGlzLnJldHVybkluaXRpYWxpemVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gUnVudGltZVJldHVyblN0YXRlbWVudEluZGljZXMuUkVUVVJOO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RlcEZvcndhcmRJbXBsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4ID09PSBSdW50aW1lUmV0dXJuU3RhdGVtZW50SW5kaWNlcy5SRVRVUk4pIHtcclxuICAgICAgICAgICAgbGV0IGZ1bmMgPSB0aGlzLmNvbnRhaW5pbmdSdW50aW1lRnVuY3Rpb247XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwicmV0dXJuZWRcIiwge2NhbGw6IGZ1bmMuY2FsbGVyfSlcclxuICAgICAgICAgICAgdGhpcy5zaW0ucG9wVW50aWwoZnVuYyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJsb2NrQVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwiY29tcG91bmRfc3RhdGVtZW50XCI7XHJcbiAgICByZWFkb25seSBzdGF0ZW1lbnRzOiByZWFkb25seSBTdGF0ZW1lbnRBU1ROb2RlW107XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUJsb2NrQ29udGV4dChjb250ZXh0OiBGdW5jdGlvbkNvbnRleHQpIDogQmxvY2tDb250ZXh0IHtcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0LCB7XHJcbiAgICAgICAgY29udGV4dHVhbFNjb3BlOiBuZXcgQmxvY2tTY29wZShjb250ZXh0LmNvbnRleHR1YWxTY29wZSksXHJcbiAgICAgICAgbG9jYWxPYmplY3RzOiBbXSxcclxuICAgICAgICBsb2NhbFJlZmVyZW5jZXM6IFtdXHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCbG9ja0NvbnRleHQgZXh0ZW5kcyBGdW5jdGlvbkNvbnRleHQge1xyXG4gICAgcmVhZG9ubHkgY29udGV4dHVhbFNjb3BlOiBCbG9ja1Njb3BlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNCbG9ja0NvbnRleHQoY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dCkgOiBjb250ZXh0IGlzIEJsb2NrQ29udGV4dCB7XHJcbiAgICByZXR1cm4gY29udGV4dC5jb250ZXh0dWFsU2NvcGUgaW5zdGFuY2VvZiBCbG9ja1Njb3BlO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmxvY2sgZXh0ZW5kcyBTdGF0ZW1lbnQ8QmxvY2tBU1ROb2RlPiB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHN0YXRlbWVudHM6IHJlYWRvbmx5IFN0YXRlbWVudFtdID0gW107XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGJsb2NrQ29udGV4dDogQmxvY2tDb250ZXh0O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbUFTVChhc3Q6IEJsb2NrQVNUTm9kZSwgY29udGV4dDogRnVuY3Rpb25Db250ZXh0KSB7XHJcbiAgICAgICAgbGV0IGJsb2NrID0gbmV3IEJsb2NrKGNvbnRleHQpLnNldEFTVChhc3QpO1xyXG4gICAgICAgIGFzdC5zdGF0ZW1lbnRzLmZvckVhY2goKHN0bXRBc3QpID0+IGJsb2NrLmFkZFN0YXRlbWVudChjcmVhdGVTdGF0ZW1lbnRGcm9tQVNUKHN0bXRBc3QsIGNvbnRleHQpKSk7XHJcbiAgICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihjb250ZXh0OiBCbG9ja0NvbnRleHQpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0KTtcclxuICAgICAgICB0aGlzLmJsb2NrQ29udGV4dCA9IGNyZWF0ZUJsb2NrQ29udGV4dChjb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkU3RhdGVtZW50KHN0YXRlbWVudDogU3RhdGVtZW50KSB7XHJcbiAgICAgICAgYXNNdXRhYmxlKHRoaXMuc3RhdGVtZW50cykucHVzaChzdGF0ZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoKHN0YXRlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJ1bnRpbWVTdGF0ZW1lbnQodGhpczogQ29tcGlsZWRCbG9jaywgcGFyZW50OiBSdW50aW1lU3RhdGVtZW50IHwgUnVudGltZUZ1bmN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSdW50aW1lQmxvY2sodGhpcywgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpc1RhaWxDaGlsZCA6IGZ1bmN0aW9uKGNoaWxkKXtcclxuICAgIC8vICAgICB2YXIgbGFzdCA9IHRoaXMuc3RhdGVtZW50cy5sYXN0KCk7XHJcbiAgICAvLyAgICAgaWYgKGNoaWxkICE9PSBsYXN0KXtcclxuICAgIC8vICAgICAgICAgaWYgKGNoaWxkID09PSB0aGlzLnN0YXRlbWVudHNbdGhpcy5zdGF0ZW1lbnRzLmxlbmd0aC0yXSAmJiBpc0EobGFzdCwgU3RhdGVtZW50cy5SZXR1cm4pICYmICFsYXN0Lmhhc0V4cHJlc3Npb24pe1xyXG4gICAgLy8gICAgICAgICAgICAgcmV0dXJuIHtpc1RhaWw6IHRydWUsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcmVhc29uOiBcIlRoZSBvbmx5IHRoaW5nIGFmdGVyIHRoZSByZWN1cnNpdmUgY2FsbCBpcyBhbiBlbXB0eSByZXR1cm4uXCIsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgb3RoZXJzOiBbbGFzdF1cclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICBlbHNle1xyXG4gICAgLy8gICAgICAgICAgICAgdmFyIG90aGVycyA9IFtdO1xyXG4gICAgLy8gICAgICAgICAgICAgZm9yICh2YXIgb3RoZXJJbmRleCA9IHRoaXMuc3RhdGVtZW50cy5sZW5ndGgtMTsgdGhpcy5zdGF0ZW1lbnRzW290aGVySW5kZXhdICE9PSBjaGlsZCAmJiBvdGhlckluZGV4ID49IDA7IC0tb3RoZXJJbmRleCl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdmFyIG90aGVyID0gdGhpcy5zdGF0ZW1lbnRzW290aGVySW5kZXhdO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGlmICghKGlzQShvdGhlciwgU3RhdGVtZW50cy5SZXR1cm4pICYmICFvdGhlci5leHByZXNzaW9uKSl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIG90aGVycy51bnNoaWZ0KG90aGVyKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm4ge2lzVGFpbDogZmFsc2UsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcmVhc29uOiBcIlRoZXJlIGFyZSBvdGhlciBzdGF0ZW1lbnRzIGluIHRoaXMgYmxvY2sgdGhhdCB3aWxsIGV4ZWN1dGUgYWZ0ZXIgdGhlIHJlY3Vyc2l2ZSBjYWxsLlwiLFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIG90aGVyczogb3RoZXJzXHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHtpc1RhaWw6IHRydWV9O1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRCbG9jayBleHRlbmRzIEJsb2NrLCBTdWNjZXNzZnVsbHlDb21waWxlZCB7XHJcbiAgICByZWFkb25seSBzdGF0ZW1lbnRzOiByZWFkb25seSBDb21waWxlZFN0YXRlbWVudFtdO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUnVudGltZUJsb2NrPEMgZXh0ZW5kcyBDb21waWxlZEJsb2NrID0gQ29tcGlsZWRCbG9jaz4gZXh0ZW5kcyBSdW50aW1lU3RhdGVtZW50PEM+IHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RhdGVtZW50czogcmVhZG9ubHkgUnVudGltZVN0YXRlbWVudFtdO1xyXG5cclxuICAgIHByaXZhdGUgaW5kZXggPSAwO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAobW9kZWw6IEMsIHBhcmVudDogUnVudGltZVN0YXRlbWVudCB8IFJ1bnRpbWVGdW5jdGlvbikge1xyXG4gICAgICAgIHN1cGVyKG1vZGVsLCBwYXJlbnQpO1xyXG4gICAgICAgIHRoaXMuc3RhdGVtZW50cyA9IG1vZGVsLnN0YXRlbWVudHMubWFwKChzdG10KSA9PiBzdG10LmNyZWF0ZVJ1bnRpbWVTdGF0ZW1lbnQodGhpcykpO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgcHJvdGVjdGVkIHVwTmV4dEltcGwoKSB7XHJcbiAgICAgICAgaWYodGhpcy5pbmRleCA8IHRoaXMuc3RhdGVtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJpbmRleFwiLCB0aGlzLmluZGV4KTtcclxuICAgICAgICAgICAgdGhpcy5zaW0ucHVzaCh0aGlzLnN0YXRlbWVudHNbdGhpcy5pbmRleCsrXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNpbS5wb3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0ZXBGb3J3YXJkSW1wbCgpIHtcclxuICAgICAgICAvLyBOb3RoaW5nIHRvIGRvIGhlcmUsIGJsb2NrIGRvZXNuJ3QgYWN0dWFsbHkgZG8gYW55dGhpbmcgYnV0IHJ1biBpbmRpdmlkdWFsIHN0YXRlbWVudHMuXHJcbiAgICAgICAgLy8gVE9ETzogSG93ZXZlciwgc29tZXRoaW5nIHdpbGwgdWx0aW1hdGVseSBuZWVkIHRvIGJlIGFkZGVkIHRvIHJ1biBkZXN0cnVjdG9ycyB3aGVuIGFcclxuICAgICAgICAvLyBibG9jayBmaW5pc2hlcywgcmF0aGVyIHRoYW4ganVzdCB3aGVuIGEgZnVuY3Rpb24gZmluaXNoZXMuXHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICAvLyBpc1RhaWxDaGlsZCA6IGZ1bmN0aW9uKGNoaWxkKXtcclxuICAgIC8vICAgICByZXR1cm4ge2lzVGFpbDogdHJ1ZSxcclxuICAgIC8vICAgICAgICAgcmVhc29uOiBcIlRoZSByZWN1cnNpdmUgY2FsbCBpcyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBhIHJldHVybi5cIn07XHJcbiAgICAvLyB9XHJcbn1cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBGdW5jdGlvbkJvZHlCbG9jayBleHRlbmRzIEJsb2NrIHtcclxuXHJcbi8vICAgICBwdWJsaWMgY29uc3RydWN0b3IoY29udGV4dDogRXhlY3V0YWJsZVRyYW5zbGF0aW9uVW5pdENvbnRleHQsIGZ1bmN0aW9uQmxvY2tTY29wZTogRnVuY3Rpb25CbG9ja1Njb3BlLCBzdGF0ZW1lbnRzOiByZWFkb25seSBTdGF0ZW1lbnRbXSkge1xyXG4vLyAgICAgICAgIHN1cGVyKGNvbnRleHQsIGZ1bmN0aW9uQmxvY2tTY29wZSwgc3RhdGVtZW50cyk7XHJcbi8vICAgICB9XHJcblxyXG4vLyB9XHJcblxyXG4vLyBleHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkRnVuY3Rpb25Cb2R5QmxvY2sgZXh0ZW5kcyBGdW5jdGlvbkJvZHlCbG9jaywgU3VjY2Vzc2Z1bGx5Q29tcGlsZWQge1xyXG4vLyAgICAgcmVhZG9ubHkgc3RhdGVtZW50czogcmVhZG9ubHkgQ29tcGlsZWRTdGF0ZW1lbnRbXTtcclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IHZhciBPcGFxdWVGdW5jdGlvbkJvZHlCbG9jayA9IFN0YXRlbWVudC5leHRlbmQoe1xyXG4vLyAgICAgX25hbWU6IFwiT3BhcXVlRnVuY3Rpb25Cb2R5QmxvY2tcIixcclxuXHJcbi8vICAgICBpX2NyZWF0ZUZyb21BU1QgOiBmdW5jdGlvbihhc3Qpe1xyXG4vLyAgICAgICAgIFN0YXRlbWVudHMuT3BhcXVlRnVuY3Rpb25Cb2R5QmxvY2suX3BhcmVudC5pX2NyZWF0ZUZyb21BU1QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHJcbi8vICAgICAgICAgdGhpcy5ibG9ja1Njb3BlID0gRnVuY3Rpb25CbG9ja1Njb3BlLmluc3RhbmNlKHRoaXMuY29udGV4dHVhbFNjb3BlKTtcclxuLy8gICAgICAgICB0aGlzLmVmZmVjdHMgPSBhc3QuZWZmZWN0cztcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgLy8gdXBOZXh0IDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAvLyAgICAgaWYgKGluc3QuaW5kZXggPj0gdGhpcy5zdGF0ZW1lbnRzLmxlbmd0aCl7XHJcbi8vICAgICAvLyAgICAgICAgIHRoaXMuZG9uZShzaW0sIGluc3QpO1xyXG4vLyAgICAgLy8gICAgIH1cclxuLy8gICAgIC8vICAgICBlbHNle1xyXG4vLyAgICAgLy8gICAgICAgICBpbnN0LnNlbmQoXCJpbmRleFwiLCBpbnN0LmluZGV4KTtcclxuLy8gICAgIC8vICAgICAgICAgdmFyIG5leHRTdG10ID0gdGhpcy5zdGF0ZW1lbnRzW2luc3QuaW5kZXgrK107XHJcbi8vICAgICAvLyAgICAgICAgIGluc3QuY2hpbGRJbnN0YW5jZXMuc3RhdGVtZW50cy5wdXNoKG5leHRTdG10LmNyZWF0ZUFuZFB1c2hJbnN0YW5jZShzaW0sIGluc3QpKTtcclxuLy8gICAgIC8vICAgICB9XHJcbi8vICAgICAvLyAgICAgcmV0dXJuIHRydWU7XHJcbi8vICAgICAvLyB9LFxyXG5cclxuLy8gICAgIHN0ZXBGb3J3YXJkIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgLy8gTm8gd29yayB0byBiZSBkb25lIGhlcmU/IFNob3VsZCBiZSBlbm91Z2ggdG8gZGVsZWdhdGUgdG8gc3RhdGVtZW50c1xyXG4vLyAgICAgICAgIC8vIHZpYSB1cE5leHQuXHJcbi8vICAgICAgICAgdGhpcy5lZmZlY3RzKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgdGhpcy5kb25lKHNpbSxpbnN0KTtcclxuLy8gICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgaXNUYWlsQ2hpbGQgOiBmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgIHJldHVybiB7aXNUYWlsOiB0cnVlfTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3Rpb25TdGF0ZW1lbnRBU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJzZWxlY3Rpb25fc3RhdGVtZW50XCI7XHJcbiAgICByZWFkb25seSBjb25kaXRpb246IEV4cHJlc3Npb25BU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgdGhlbjogU3RhdGVtZW50QVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IG90aGVyd2lzZTogU3RhdGVtZW50QVNUTm9kZTtcclxufVxyXG5cclxuLy8gZXhwb3J0IHZhciBTZWxlY3Rpb24gPSBTdGF0ZW1lbnQuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIlNlbGVjdGlvblwiLFxyXG4vLyAgICAgaW5pdEluZGV4OiBcImNvbmRpdGlvblwiLFxyXG5cclxuLy8gICAgIGlfY2hpbGRyZW5Ub0NyZWF0ZSA6IFtcImNvbmRpdGlvblwiLCBcInRoZW5cIiwgXCJvdGhlcndpc2VcIl0sXHJcblxyXG4vLyAgICAgY29tcGlsZSA6IGZ1bmN0aW9uKCl7XHJcblxyXG4vLyAgICAgICAgIC8vIENvbXBpbGUgY29uZGl0aW9uLCBjb252ZXJ0IHRvIGJvb2wgaWYgbm90IGFscmVhZHksIGVycm9yIGlmIGNhbid0IGNvbnZlcnRcclxuLy8gICAgICAgICB0aGlzLmNvbmRpdGlvbi5jb21waWxlKCk7XHJcbi8vICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBzdGFuZGFyZENvbnZlcnNpb24odGhpcy5jb25kaXRpb24sIFR5cGVzLkJvb2wuaW5zdGFuY2UoKSk7XHJcbi8vICAgICAgICAgaWYgKCFpc0EodGhpcy5jb25kaXRpb24udHlwZSwgVHlwZXMuQm9vbCkpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3Iuc3RtdC5zZWxlY3Rpb24uY29uZGl0aW9uX2Jvb2wodGhpcywgdGhpcy5jb25kaXRpb24pKTtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHRoaXMudGhlbi5jb21waWxlKCk7XHJcblxyXG4vLyAgICAgICAgIC8vIGVsc2UgYnJhbmNoIG1heSBub3QgYmUgc3BlY2lmaWVkLCBzbyBvbmx5IGNvbXBpbGUgaWYgaXQgaXNcclxuLy8gICAgICAgICB0aGlzLm90aGVyd2lzZSAmJiB0aGlzLm90aGVyd2lzZS5jb21waWxlKCk7XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIHVwTmV4dCA6IGZ1bmN0aW9uKHNpbTogU2ltdWxhdGlvbiwgcnRDb25zdHJ1Y3Q6IFJ1bnRpbWVDb25zdHJ1Y3Qpe1xyXG4vLyAgICAgICAgIGlmKGluc3QuaW5kZXggPT0gXCJjb25kaXRpb25cIil7XHJcbi8vICAgICAgICAgICAgIGluc3QuY29uZGl0aW9uID0gdGhpcy5jb25kaXRpb24uY3JlYXRlQW5kUHVzaEluc3RhbmNlKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgIGluc3QuaW5kZXggPSBcImJvZHlcIjtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2UgaWYgKGluc3QuaW5kZXggPT0gXCJib2R5XCIpe1xyXG4vLyAgICAgICAgICAgICBpZihpbnN0LmNvbmRpdGlvbi5ldmFsUmVzdWx0LnZhbHVlKXtcclxuLy8gICAgICAgICAgICAgICAgIGluc3QudGhlbiA9IHRoaXMudGhlbi5jcmVhdGVBbmRQdXNoSW5zdGFuY2Uoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgICAgIGluc3QuaW5kZXggPSBcImRvbmVcIjtcclxuLy8gICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICBpZiAodGhpcy5vdGhlcndpc2UpIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICBpbnN0Lm90aGVyd2lzZSA9IHRoaXMub3RoZXJ3aXNlLmNyZWF0ZUFuZFB1c2hJbnN0YW5jZShzaW0sIGluc3QpO1xyXG4vLyAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgaW5zdC5pbmRleCA9IFwiZG9uZVwiO1xyXG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZXtcclxuLy8gICAgICAgICAgICAgdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgc3RlcEZvcndhcmQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuXHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIGlzVGFpbENoaWxkIDogZnVuY3Rpb24oY2hpbGQpe1xyXG4vLyAgICAgICAgIGlmIChjaGlsZCA9PT0gdGhpcy5jb25kaXRpb24pe1xyXG4vLyAgICAgICAgICAgICByZXR1cm4ge2lzVGFpbDogZmFsc2UsXHJcbi8vICAgICAgICAgICAgICAgICByZWFzb246IFwiQWZ0ZXIgdGhlIGZ1bmN0aW9uIHJldHVybnMsIG9uZSBvZiB0aGUgYnJhbmNoZXMgd2lsbCBydW4uXCIsXHJcbi8vICAgICAgICAgICAgICAgICBvdGhlcnM6IFt0aGlzLnRoZW4sIHRoaXMub3RoZXJ3aXNlXVxyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgIGlmICh0aGlzLm90aGVyd2lzZSl7XHJcbi8vICAgICAgICAgICAgICAgICAvL2lmIChjaGlsZCA9PT0gdGhpcy50aGVuKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2lzVGFpbDogdHJ1ZSxcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBcIk9ubHkgb25lIGJyYW5jaCBpbiBhIHNlbGVjdGlvbiBzdHJ1Y3R1cmUgKGkuZS4gaWYvZWxzZSkgY2FuIGV2ZXIgZXhlY3V0ZSwgc28gZG9uJ3Qgd29ycnkgYWJvdXQgdGhlIGNvZGUgaW4gdGhlIG90aGVyIGJyYW5jaGVzLlwiXHJcbi8vICAgICAgICAgICAgICAgICAgICAgfTtcclxuLy8gICAgICAgICAgICAgICAgIC8vfVxyXG4vLyAgICAgICAgICAgICAgICAgLy9lbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgLy8gICAgcmV0dXJuIHtpc1RhaWw6IHRydWUsXHJcbi8vICAgICAgICAgICAgICAgICAvLyAgICAgICAgcmVhc29uOiBcIkRvbid0IHdvcnJ5IGFib3V0IHRoZSBjb2RlIGluIHRoZSBpZiBicmFuY2ggLSBpZiB0aGUgcmVjdXJzaXZlIGNhbGwgZXZlbiBoYXBwZW5lZCBpdCBtZWFucyB3ZSB0b29rIHRoZSBlbHNlIGJyYW5jaC5cIlxyXG4vLyAgICAgICAgICAgICAgICAgLy8gICAgfTtcclxuLy8gICAgICAgICAgICAgICAgIC8vfVxyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4ge2lzVGFpbDogdHJ1ZVxyXG4vLyAgICAgICAgICAgICAgICAgfTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG5leHBvcnQgdHlwZSBJdGVyYXRpb25TdGF0ZW1lbnRBU1ROb2RlID0gV2hpbGVTdGF0ZW1lbnRBU1ROb2RlIHwgRG9XaGlsZVN0YXRlbWVudEFTVE5vZGUgfCBGb3JTdGF0ZW1lbnRBU1ROb2RlO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBXaGlsZVN0YXRlbWVudEFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcIndoaWxlX3N0YXRlbWVudFwiO1xyXG4gICAgcmVhZG9ubHkgY29uZGl0aW9uOiBFeHByZXNzaW9uQVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IGJvZHk6IFN0YXRlbWVudEFTVE5vZGU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRG9XaGlsZVN0YXRlbWVudEFTVE5vZGUgZXh0ZW5kcyBBU1ROb2RlIHtcclxuICAgIHJlYWRvbmx5IGNvbnN0cnVjdF90eXBlOiBcImRvd2hpbGVfc3RhdGVtZW50XCI7XHJcbiAgICByZWFkb25seSBjb25kaXRpb246IEV4cHJlc3Npb25BU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgYm9keTogU3RhdGVtZW50QVNUTm9kZTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGb3JTdGF0ZW1lbnRBU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJmb3Jfc3RhdGVtZW50XCI7XHJcbiAgICByZWFkb25seSBjb25kaXRpb246IEV4cHJlc3Npb25BU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgaW5pdGlhbDogRXhwcmVzc2lvblN0YXRlbWVudEFTVE5vZGUgfCBOdWxsU3RhdGVtZW50QVNUTm9kZSB8IERlY2xhcmF0aW9uU3RhdGVtZW50QVNUTm9kZTtcclxuICAgIHJlYWRvbmx5IHBvc3Q6IEV4cHJlc3Npb25BU1ROb2RlO1xyXG4gICAgcmVhZG9ubHkgYm9keTogU3RhdGVtZW50QVNUTm9kZTtcclxufVxyXG5cclxuLy8gZXhwb3J0IHZhciBJdGVyYXRpb24gPSBTdGF0ZW1lbnQuZXh0ZW5kKHtcclxuLy8gICAgIGlzVGFpbENoaWxkIDogZnVuY3Rpb24oY2hpbGQpe1xyXG4vLyAgICAgICAgIHJldHVybiB7XHJcbi8vICAgICAgICAgICAgIGlzVGFpbDogZmFsc2UsXHJcbi8vICAgICAgICAgICAgIHJlYXNvbjogXCJJZiB0aGUgbG9vcCBnb2VzIGFyb3VuZCBhZ2FpbiwgdGhlbiB0aGF0IHdvdWxkIGJlIG1vcmUgd29yayBhZnRlciB0aGUgcmVjdXJzaXZlIGNhbGwuXCIsXHJcbi8vICAgICAgICAgICAgIG90aGVyczogW3RoaXNdXHJcbi8vICAgICAgICAgfTtcclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG4vLyBleHBvcnQgdmFyIFdoaWxlID0gSXRlcmF0aW9uLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZTogXCJXaGlsZVwiLFxyXG4vLyAgICAgaW5pdEluZGV4OiBcImNvbmRpdGlvblwiLFxyXG5cclxuLy8gICAgIGlfY3JlYXRlRnJvbUFTVCA6IGZ1bmN0aW9uKGFzdCkge1xyXG4vLyAgICAgICAgIFN0YXRlbWVudHMuV2hpbGUuX3BhcmVudC5pX2NyZWF0ZUZyb21BU1QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHJcbi8vICAgICAgICAgdGhpcy5ib2R5ID0gdGhpcy5pX2NyZWF0ZUNoaWxkKGFzdC5ib2R5KTtcclxuXHJcbi8vICAgICAgICAgLy8gVE9ETzogdGVjaG5pY2FsbHksIHRoZSBDKysgc3RhbmRhcmQgYWxsb3dzIGEgZGVjbGFyYXRpb24gYXMgdGhlIGNvbmRpdGlvbiBmb3IgYSB3aGlsZSBsb29wLlxyXG4vLyAgICAgICAgIC8vIFRoaXMgYXBwZWFycyB0byBiZSBjdXJyZW50bHkgaW1wb3NzaWJsZSBpbiBMb2JzdGVyLCBidXQgd2hlbiBpbXBsZW1lbnRlZCBpdCB3aWxsIHJlcXVpcmVcclxuLy8gICAgICAgICAvLyBzcGVjaWFsIGltcGxlbWVudGF0aW9uIG9mIHRoZSBzY29wZSBvZiB0aGUgYm9keSBpZiBpdCdzIG5vdCBhbHJlYWR5IGEgYmxvY2suXHJcbi8vICAgICAgICAgLy8gT3IgbWF5YmUgd2UgY291bGQganVzdCBkZWNpZGUgdG8gcGFyc2UgaXQgY29ycmVjdGx5ICh3aWxsIHN0aWxsIHJlcXVpcmUgc29tZSBjaGFuZ2VzKSwgYnV0XHJcbi8vICAgICAgICAgLy8gdGhlbiBzaW1wbHkgc2F5IGl0J3Mgbm90IHN1cHBvcnRlZCBzaW5jZSBpdCdzIHN1Y2ggYSByYXJlIHRoaW5nLlxyXG4vLyAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gdGhpcy5pX2NyZWF0ZUNoaWxkKGFzdC5jb25kaXRpb24sIHtcclxuLy8gICAgICAgICAgICAgc2NvcGUgOiAoaXNBKHRoaXMuYm9keSwgU3RhdGVtZW50cy5CbG9jaykgPyB0aGlzLmJvZHkuYmxvY2tTY29wZSA6IHRoaXMuY29udGV4dHVhbFNjb3BlKVxyXG4vLyAgICAgICAgIH0pO1xyXG5cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgY29tcGlsZSA6IGZ1bmN0aW9uKCl7XHJcblxyXG4vLyAgICAgICAgIHRoaXMuY29uZGl0aW9uLmNvbXBpbGUoKTtcclxuLy8gICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IHN0YW5kYXJkQ29udmVyc2lvbih0aGlzLmNvbmRpdGlvbiwgVHlwZXMuQm9vbC5pbnN0YW5jZSgpKTtcclxuLy8gICAgICAgICBpZiAoIWlzQSh0aGlzLmNvbmRpdGlvbi50eXBlLCBUeXBlcy5Cb29sKSl7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5zdG10Lml0ZXJhdGlvbi5jb25kaXRpb25fYm9vbCh0aGlzLmNvbmRpdGlvbiwgdGhpcy5jb25kaXRpb24pKVxyXG4vLyAgICAgICAgIH1cclxuXHJcbi8vICAgICAgICAgdGhpcy5ib2R5LmNvbXBpbGUoKTtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgdXBOZXh0IDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgaWYgKGluc3QuaW5kZXggPT0gXCJ3YWl0XCIpe1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICAgIGVsc2UgaWYoaW5zdC5pbmRleCA9PSBcImNvbmRpdGlvblwiKXtcclxuLy8gICAgICAgICAgICAgaW5zdC5zZW5kKFwicmVzZXRcIik7XHJcbi8vICAgICAgICAgICAgIGluc3QuY29uZGl0aW9uID0gdGhpcy5jb25kaXRpb24uY3JlYXRlQW5kUHVzaEluc3RhbmNlKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgIGluc3QuaW5kZXggPSBcImNoZWNrQ29uZFwiO1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZSBpZiAoaW5zdC5pbmRleCA9PSBcImNoZWNrQ29uZFwiKXtcclxuLy8gICAgICAgICAgICAgaWYoaW5zdC5jb25kaXRpb24uZXZhbFJlc3VsdC52YWx1ZSkge1xyXG4vLyAgICAgICAgICAgICAgICAgaW5zdC5pbmRleCA9IFwiYm9keVwiO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmRvbmUoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZSBpZiAoaW5zdC5pbmRleCA9PSBcImJvZHlcIil7XHJcbi8vICAgICAgICAgICAgIGluc3QuYm9keSA9IHRoaXMuYm9keS5jcmVhdGVBbmRQdXNoSW5zdGFuY2Uoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgaW5zdC5pbmRleCA9IFwid2FpdFwiO1xyXG4vLyAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICB9LFxyXG5cclxuLy8gICAgIHN0ZXBGb3J3YXJkIDogZnVuY3Rpb24oc2ltOiBTaW11bGF0aW9uLCBydENvbnN0cnVjdDogUnVudGltZUNvbnN0cnVjdCl7XHJcbi8vICAgICAgICAgaWYgKGluc3QuaW5kZXggPT0gXCJ3YWl0XCIpIHtcclxuLy8gICAgICAgICAgICAgaW5zdC5pbmRleCA9IFwiY29uZGl0aW9uXCI7IC8vIHJlbW92ZSB0aGUgd2FpdCBpbmRleCBvbiBpdGVyYXRpb25zIGFmdGVyIHRoZSBmaXJzdFxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG5cclxuLy8gZXhwb3J0IHZhciBEb1doaWxlID0gV2hpbGUuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkRvV2hpbGVcIixcclxuLy8gICAgIGluaXRJbmRleDogXCJib2R5XCJcclxuLy8gfSk7XHJcblxyXG5cclxuLy8gZXhwb3J0IHZhciBGb3IgPSBJdGVyYXRpb24uZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lOiBcIkZvclwiLFxyXG4vLyAgICAgaW5pdEluZGV4OiBcImluaXRcIixcclxuXHJcbi8vICAgICBpbml0IDogZnVuY3Rpb24oYXN0LCBjb250ZXh0KSB7XHJcbi8vICAgICAgICAgdGhpcy5pbml0UGFyZW50KGFzdCwgY29udGV4dCk7XHJcblxyXG4vLyAgICAgICAgIHRoaXMuYm9keSA9IHRoaXMuaV9jcmVhdGVDaGlsZChhc3QuYm9keSk7XHJcblxyXG4vLyAgICAgICAgIC8vIElmIHRoZSBib2R5IGlzIGFscmVhZHkgYSBibG9jaywgd2UgY2FuIGp1c3QgdXNlIGl0cyBzY29wZS4gT3RoZXJ3aXNlLCBjcmVhdGUgb25lIGZvciB0aGUgZm9yIGxvb3AuXHJcbi8vICAgICAgICAgdGhpcy5ib2R5U2NvcGUgPSAoaXNBKHRoaXMuYm9keSwgU3RhdGVtZW50cy5CbG9jaykgPyB0aGlzLmJvZHkuYmxvY2tTY29wZSA6IEJsb2NrU2NvcGUuaW5zdGFuY2UodGhpcy5jb250ZXh0dWFsU2NvcGUpKTtcclxuXHJcbi8vICAgICAgICAgLy8gTm90ZTogZ3JhbW1hciBlbnN1cmVzIHRoaXMgd2lsbCBiZSBhbiBleHByZXNzaW9uIG9yIGRlY2xhcmF0aW9uIHN0YXRlbWVudFxyXG4vLyAgICAgICAgIHRoaXMuaW5pdGlhbCA9IHRoaXMuaV9jcmVhdGVDaGlsZChhc3QuaW5pdGlhbCwge3Njb3BlOiB0aGlzLmJvZHlTY29wZX0pO1xyXG5cclxuLy8gICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IHRoaXMuaV9jcmVhdGVDaGlsZChhc3QuY29uZGl0aW9uLCB7c2NvcGUgOiB0aGlzLmJvZHlTY29wZX0pO1xyXG5cclxuLy8gICAgICAgICB0aGlzLnBvc3QgPSB0aGlzLmlfY3JlYXRlQ2hpbGQoYXN0LnBvc3QsIHtzY29wZSA6IHRoaXMuYm9keVNjb3BlfSk7XHJcblxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBjb21waWxlIDogZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICB0aGlzLmluaXRpYWwuY29tcGlsZSgpO1xyXG5cclxuLy8gICAgICAgICB0aGlzLmNvbmRpdGlvbi5jb21waWxlKCk7XHJcbi8vICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBzdGFuZGFyZENvbnZlcnNpb24odGhpcy5jb25kaXRpb24sIFR5cGVzLkJvb2wuaW5zdGFuY2UoKSk7XHJcbi8vICAgICAgICAgaWYgKCFpc0EodGhpcy5jb25kaXRpb24udHlwZSwgVHlwZXMuQm9vbCkpe1xyXG4vLyAgICAgICAgICAgICB0aGlzLmFkZE5vdGUoQ1BQRXJyb3Iuc3RtdC5pdGVyYXRpb24uY29uZGl0aW9uX2Jvb2wodGhpcy5jb25kaXRpb24sIHRoaXMuY29uZGl0aW9uKSlcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHRoaXMuYm9keS5jb21waWxlKCk7XHJcblxyXG4vLyAgICAgICAgIHRoaXMucG9zdC5jb21waWxlKCk7XHJcbi8vICAgICB9LFxyXG5cclxuXHJcbi8vICAgICB1cE5leHQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICBpZiAoaW5zdC5pbmRleCA9PSBcIndhaXRcIil7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgZWxzZSBpZiAoaW5zdC5pbmRleCA9PSBcImluaXRcIil7XHJcbi8vICAgICAgICAgICAgIGluc3QuaW5pdGlhbCA9IHRoaXMuaW5pdGlhbC5jcmVhdGVBbmRQdXNoSW5zdGFuY2Uoc2ltLCBpbnN0KTtcclxuLy8gICAgICAgICAgICAgaW5zdC5pbmRleCA9IFwiY29uZGl0aW9uXCI7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIGlmKGluc3QuaW5kZXggPT0gXCJjb25kaXRpb25cIil7XHJcbi8vICAgICAgICAgICAgIGluc3Quc2VuZChcInJlc2V0XCIpO1xyXG4vLyAgICAgICAgICAgICBpbnN0LmNvbmRpdGlvbiA9IHRoaXMuY29uZGl0aW9uLmNyZWF0ZUFuZFB1c2hJbnN0YW5jZShzaW0sIGluc3QpO1xyXG4vLyAgICAgICAgICAgICBpbnN0LmluZGV4ID0gXCJib2R5XCI7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIGlmIChpbnN0LmluZGV4ID09IFwiYm9keVwiKXtcclxuLy8gICAgICAgICAgICAgaWYoaW5zdC5jb25kaXRpb24uZXZhbFJlc3VsdC52YWx1ZSl7XHJcbi8vICAgICAgICAgICAgICAgICBpbnN0LmJvZHkgPSB0aGlzLmJvZHkuY3JlYXRlQW5kUHVzaEluc3RhbmNlKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgICAgICBpbnN0LmluZGV4ID0gXCJwb3N0XCI7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICBlbHNle1xyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5kb25lKHNpbSwgaW5zdCk7XHJcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBlbHNlIGlmIChpbnN0LmluZGV4ID09IFwicG9zdFwiKXtcclxuLy8gICAgICAgICAgICAgaW5zdC5wb3N0ID0gdGhpcy5wb3N0LmNyZWF0ZUFuZFB1c2hJbnN0YW5jZShzaW0sIGluc3QpO1xyXG4vLyAgICAgICAgICAgICBpbnN0LmluZGV4ID0gXCJ3YWl0XCI7XHJcbi8vICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgc3RlcEZvcndhcmQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICBpbnN0LmluZGV4ID0gXCJjb25kaXRpb25cIjsgLy8gcmVtb3ZlIHRoZSB3YWl0IGluZGV4IG9uIGl0ZXJhdGlvbnMgYWZ0ZXIgdGhlIGZpcnN0XHJcbi8vICAgICB9XHJcbi8vIH0pO1xyXG5cclxuXHJcblxyXG4vLyBleHBvcnQgdmFyIEJyZWFrID0gU3RhdGVtZW50LmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZTogXCJCcmVha1wiLFxyXG5cclxuLy8gICAgIGNvbXBpbGUgOiBmdW5jdGlvbigpIHtcclxuLy8gICAgICAgICAvLyBUaGVvcmV0aWNhbGx5IHRoaXMgY291bGQgYmUgcHV0IGludG8gdGhlIGlfY3JlYXRlRnJvbUFTVCBmdW5jdGlvbiBzaW5jZSBpdCBvbmx5IHVzZXNcclxuLy8gICAgICAgICAvLyBzeW50YWN0aWMgaW5mb3JtYXRpb24gdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGJyZWFrIGlzIGluc2lkZSBhbiBpdGVyYXRpb24gc3RhdGVtZW50LFxyXG4vLyAgICAgICAgIC8vIGJ1dCBpdCB3b3VsZCBmZWVsIHdlaXJkIHRvIGFkZCBhbiBlcnJvciBub3RlIGJlZm9yZSB0aGUgY29tcGlsZSBmdW5jdGlvbiBldmVuIHJ1bnMuLi4gOi9cclxuXHJcbi8vICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMucGFyZW50O1xyXG4vLyAgICAgICAgIHdoaWxlKGNvbnRhaW5lciAmJiAhaXNBKGNvbnRhaW5lciwgU3RhdGVtZW50cy5JdGVyYXRpb24pKXtcclxuLy8gICAgICAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLnBhcmVudDtcclxuLy8gICAgICAgICB9XHJcblxyXG4vLyAgICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG5cclxuLy8gICAgICAgICAvLyBjb250YWluZXIgc2hvdWxkIGV4aXN0LCBvdGhlcndpc2UgdGhpcyBicmVhayBpcyBzb21ld2hlcmUgaXQgc2hvdWxkbid0IGJlXHJcbi8vICAgICAgICAgaWYgKCFjb250YWluZXIgfHwgIWlzQShjb250YWluZXIsIFN0YXRlbWVudHMuSXRlcmF0aW9uKSl7XHJcbi8vICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShDUFBFcnJvci5zdG10LmJyZWFrU3RhdGVtZW50LmxvY2F0aW9uKHRoaXMsIHRoaXMuY29uZGl0aW9uKSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSxcclxuXHJcbi8vICAgICBjcmVhdGVBbmRQdXNoSW5zdGFuY2UgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICB2YXIgaW5zdCA9IFJ1bnRpbWVDb25zdHJ1Y3QuaW5zdGFuY2Uoc2ltLCB0aGlzLCBcImJyZWFrXCIsIFwic3RtdFwiLCBpbnN0KTtcclxuLy8gICAgICAgICBzaW0ucHVzaChpbnN0KTtcclxuLy8gICAgICAgICByZXR1cm4gaW5zdDtcclxuLy8gICAgIH0sXHJcblxyXG4vLyAgICAgc3RlcEZvcndhcmQgOiBmdW5jdGlvbihzaW06IFNpbXVsYXRpb24sIHJ0Q29uc3RydWN0OiBSdW50aW1lQ29uc3RydWN0KXtcclxuLy8gICAgICAgICBpZiAoaW5zdC5pbmRleCA9PSBcImJyZWFrXCIpe1xyXG4vLyAgICAgICAgICAgICB2YXIgY29udGFpbmVySW5zdCA9IGluc3QuZmluZFBhcmVudEJ5TW9kZWwodGhpcy5jb250YWluZXIpO1xyXG4vLyAvLyAgICAgICAgICAgIGluc3Quc2VuZChcInJldHVybmVkXCIsIHtjYWxsOiBmdW5jLnBhcmVudH0pO1xyXG4vLyAgICAgICAgICAgICBjb250YWluZXJJbnN0LmRvbmUoc2ltKTsgLy8gVE9ETzogc2hvdWxkIGJlIGRvbmUgd2l0aCBzaW11bGF0aW9uIHN0YWNrIGluc3RlYWQgb2YgcGFyZW50XHJcbi8vICAgICAgICAgICAgIC8vIHJldHVybiB0cnVlO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG5cclxuLy8gZXhwb3J0IHZhciBDb250aW51ZSA9IFVuc3VwcG9ydGVkLmV4dGVuZCh7XHJcbi8vICAgICBfbmFtZTogXCJTdGF0ZW1lbnRzLkNvbnRpbnVlXCIsXHJcbi8vICAgICBlbmdsaXNoTmFtZTogXCJjb250aW51ZSBzdGF0ZW1lbnRcIlxyXG4vLyB9KTtcclxuXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMYWJlbGVkU3RhdGVtZW50QVNUTm9kZSBleHRlbmRzIEFTVE5vZGUge1xyXG4gICAgcmVhZG9ubHkgY29uc3RydWN0X3R5cGU6IFwibGFiZWxlZF9zdGF0ZW1lbnRcIjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTd2l0Y2hTdGF0ZW1lbnRBU1ROb2RlIGV4dGVuZHMgQVNUTm9kZSB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJzd2l0Y2hfc3RhdGVtZW50XCI7XHJcbn1cclxuXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanMuZm91bmRhdGlvbi8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cbjsoZnVuY3Rpb24oKSB7XG5cbiAgLyoqIFVzZWQgYXMgYSBzYWZlIHJlZmVyZW5jZSBmb3IgYHVuZGVmaW5lZGAgaW4gcHJlLUVTNSBlbnZpcm9ubWVudHMuICovXG4gIHZhciB1bmRlZmluZWQ7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLiAqL1xuICB2YXIgVkVSU0lPTiA9ICc0LjE3LjEwJztcblxuICAvKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbiAgdmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbiAgLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xuICB2YXIgQ09SRV9FUlJPUl9URVhUID0gJ1Vuc3VwcG9ydGVkIGNvcmUtanMgdXNlLiBUcnkgaHR0cHM6Ly9ucG1zLmlvL3NlYXJjaD9xPXBvbnlmaWxsLicsXG4gICAgICBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbiAgdmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nLFxuICAgICAgcmVUcmltU3RhcnQgPSAvXlxccysvLFxuICAgICAgcmVUcmltRW5kID0gL1xccyskLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3cmFwIGRldGFpbCBjb21tZW50cy4gKi9cbiAgdmFyIHJlV3JhcENvbW1lbnQgPSAvXFx7KD86XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAuK1xcXSBcXCpcXC8pP1xcbj8vLFxuICAgICAgcmVXcmFwRGV0YWlscyA9IC9cXHtcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoICguKylcXF0gXFwqLyxcbiAgICAgIHJlU3BsaXREZXRhaWxzID0gLyw/ICYgLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB3b3JkcyBjb21wb3NlZCBvZiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlQXNjaWlXb3JkID0gL1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2hcbiAgICogW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS5cbiAgICovXG4gIHZhciByZUVzVGVtcGxhdGUgPSAvXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUZsYWdzID0gL1xcdyokLztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xuICB2YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xuICB2YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIExhdGluIFVuaWNvZGUgbGV0dGVycyAoZXhjbHVkaW5nIG1hdGhlbWF0aWNhbCBvcGVyYXRvcnMpLiAqL1xuICB2YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuICAvKiogVXNlZCB0byBtYXRjaCB1bmVzY2FwZWQgY2hhcmFjdGVycyBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG4gIHZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG4gIHZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgICByc0xvd2VyUmFuZ2UgPSAnYS16XFxcXHhkZi1cXFxceGY2XFxcXHhmOC1cXFxceGZmJyxcbiAgICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgICAgcnNQdW5jdHVhdGlvblJhbmdlID0gJ1xcXFx1MjAwMC1cXFxcdTIwNmYnLFxuICAgICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnLFxuICAgICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbiAgdmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiLFxuICAgICAgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgICByc0RpZ2l0cyA9ICdcXFxcZCsnLFxuICAgICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgICAgcnNNaXNjID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyByc0JyZWFrUmFuZ2UgKyByc0RpZ2l0cyArIHJzRGluZ2JhdFJhbmdlICsgcnNMb3dlclJhbmdlICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgICAgcnNOb25Bc3RyYWwgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgICByc1VwcGVyID0gJ1snICsgcnNVcHBlclJhbmdlICsgJ10nLFxuICAgICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbiAgdmFyIHJzTWlzY0xvd2VyID0gJyg/OicgKyByc0xvd2VyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc09wdENvbnRyTG93ZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICAgIHJzT3B0Q29udHJVcHBlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OkR8TEx8TXxSRXxTfFR8VkUpKT8nLFxuICAgICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKScsXG4gICAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcSxcbiAgICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xuICB2YXIgcmVBcG9zID0gUmVnRXhwKHJzQXBvcywgJ2cnKTtcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpIGFuZFxuICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICAgKi9cbiAgdmFyIHJlQ29tYm9NYXJrID0gUmVnRXhwKHJzQ29tYm8sICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbiAgdmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGNvbXBsZXggb3IgY29tcG91bmQgd29yZHMuICovXG4gIHZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzTWlzY1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciArIHJzTWlzY0xvd2VyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gICAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgICByc09yZFVwcGVyLFxuICAgIHJzT3JkTG93ZXIsXG4gICAgcnNEaWdpdHMsXG4gICAgcnNFbW9qaVxuICBdLmpvaW4oJ3wnKSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB3aXRoIFt6ZXJvLXdpZHRoIGpvaW5lcnMgb3IgY29kZSBwb2ludHMgZnJvbSB0aGUgYXN0cmFsIHBsYW5lc10oaHR0cDovL2Vldi5lZS9ibG9nLzIwMTUvMDkvMTIvZGFyay1jb3JuZXJzLW9mLXVuaWNvZGUvKS4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezIsfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIGtleSA9PSAnX19wcm90b19fJ1xuICAgICAgPyB1bmRlZmluZWRcbiAgICAgIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IChzcmNJbmRleCAmJiBpc0Z1bmN0aW9uKG9ialZhbHVlKSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcy5sZW5ndGggPyBpdGVyYXRlZXMgOiBbaWRlbnRpdHldLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCA0MF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKCdzb3VyY2VVUkwnIGluIG9wdGlvbnNcbiAgICAgICAgICA/IG9wdGlvbnMuc291cmNlVVJMXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbUVuZCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IChsb2Rhc2hGdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgICBuYW1lcyA9IHJlYWxOYW1lc1trZXldIHx8IChyZWFsTmFtZXNba2V5XSA9IFtdKTtcblxuICAgICAgICBuYW1lcy5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsIi8qKlxuICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ubGFzdChbMSwgMiwgM10pO1xuICogLy8gPT4gM1xuICovXG5mdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxhc3Q7XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4uL3V0aWwvb2JzZXJ2ZVwiO1xyXG5pbXBvcnQgeyBQcm9ncmFtLCBDb21waWxlZFByb2dyYW0gfSBmcm9tIFwiLi9Qcm9ncmFtXCI7XHJcbmltcG9ydCB7IE1lbW9yeSwgVmFsdWUgfSBmcm9tIFwiLi9ydW50aW1lRW52aXJvbm1lbnRcIjtcclxuaW1wb3J0IHsgUnVudGltZUNvbnN0cnVjdCB9IGZyb20gXCIuL2NvbnN0cnVjdHNcIjtcclxuaW1wb3J0IHsgQ1BQUmFuZG9tLCBNdXRhYmxlLCBlc2NhcGVTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbC91dGlsXCI7XHJcbmltcG9ydCB7IER5bmFtaWNPYmplY3QsIE1haW5SZXR1cm5PYmplY3QgfSBmcm9tIFwiLi9vYmplY3RzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVGdW5jdGlvbiB9IGZyb20gXCIuL2Z1bmN0aW9uc1wiO1xyXG5pbXBvcnQgeyBJbnQsIFBvaW50ZXJUeXBlLCBDaGFyIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgSW5pdGlhbGl6ZXIgfSBmcm9tIFwiLi9pbml0aWFsaXplcnNcIjtcclxuXHJcblxyXG5leHBvcnQgZW51bSBTaW11bGF0aW9uRXZlbnQge1xyXG4gICAgVU5ERUZJTkVEX0JFSEFWSU9SID0gXCJ1bmRlZmluZWRfYmVoYXZpb3JcIixcclxuICAgIFVOU1BFQ0lGSUVEX0JFSEFWSU9SID0gXCJ1bnNwZWNpZmllZF9iZWhhdmlvclwiLFxyXG4gICAgSU1QTEVNRU5UQVRJT05fREVGSU5FRF9CRUhBVklPUiA9IFwiaW1wbGVtZW50YXRpb25fZGVmaW5lZF9iZWhhdmlvclwiLFxyXG4gICAgTUVNT1JZX0xFQUsgPSBcIm1lbW9yeV9sZWFrXCIsXHJcbiAgICBBU1NFUlRJT05fRkFJTFVSRSA9IFwiYXNzZXJ0aW9uX2ZhaWx1cmVcIixcclxuICAgIENSQVNIID0gXCJjcmFzaFwiLFxyXG59XHJcblxyXG4vLyBUT0RPOiBhZGQgb2JzZXJ2ZXIgc3R1ZmZcclxuZXhwb3J0IGNsYXNzIFNpbXVsYXRpb24ge1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGUodGhpcyk7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHByb2dyYW06IENvbXBpbGVkUHJvZ3JhbTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbWVtb3J5OiBNZW1vcnk7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZXhlY1N0YWNrOiBSdW50aW1lQ29uc3RydWN0W107XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZXhlY1N0YWNrOiByZWFkb25seSBSdW50aW1lQ29uc3RydWN0W107XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IHJhbmRvbSA9IG5ldyBDUFBSYW5kb20oKTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RlcHNUYWtlbiA6IG51bWJlcjtcclxuICAgIHB1YmxpYyByZWFkb25seSBhdEVuZDogYm9vbGVhbjtcclxuXHJcbiAgICBwcml2YXRlIHBlbmRpbmdOZXdzIDogRHluYW1pY09iamVjdFtdO1xyXG4gICAgcHJpdmF0ZSBsZWFrQ2hlY2tJbmRleCA6IG51bWJlcjtcclxuXHJcbiAgICAvLyBUT0RPOiBpcyB0aGlzIGFjdHVhbGx5IHNldCBhbndoZXJlP1xyXG4gICAgcHJpdmF0ZSBhbGVydHNPZmYgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ldmVudHNPY2N1cnJlZCA6IHtcclxuICAgICAgICBbcCBpbiBTaW11bGF0aW9uRXZlbnRdOiBzdHJpbmdbXTtcclxuICAgIH0gPSB7XHJcbiAgICAgICAgXCJ1bmRlZmluZWRfYmVoYXZpb3JcIiA6IFtdLFxyXG4gICAgICAgIFwidW5zcGVjaWZpZWRfYmVoYXZpb3JcIiA6IFtdLFxyXG4gICAgICAgIFwiaW1wbGVtZW50YXRpb25fZGVmaW5lZF9iZWhhdmlvclwiIDogW10sXHJcbiAgICAgICAgXCJtZW1vcnlfbGVha1wiIDogW10sXHJcbiAgICAgICAgXCJhc3NlcnRpb25fZmFpbHVyZVwiIDogW10sXHJcbiAgICAgICAgXCJjcmFzaFwiIDogW11cclxuICAgIH07XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSBldmVudHNPY2N1cnJlZCA6IHtcclxuICAgICAgICBbcCBpbiBTaW11bGF0aW9uRXZlbnRdOiByZWFkb25seSBzdHJpbmdbXTtcclxuICAgIH0gPSB0aGlzLl9ldmVudHNPY2N1cnJlZDtcclxuXHJcbiAgICAvLyBNQVhfU1BFRUQ6IC0xMzQ0NSwgLy8gbG9sIFRPRE9cclxuXHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG1haW5SZXR1cm5PYmplY3QhOiBNYWluUmV0dXJuT2JqZWN0O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG1haW5GdW5jdGlvbiE6IFJ1bnRpbWVGdW5jdGlvbjxJbnQ+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb2dyYW06IENvbXBpbGVkUHJvZ3JhbSkge1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XHJcblxyXG4gICAgICAgIC8vIFRPRE8gU2ltdWxhdGlvblJ1bm5lciB0aGlzLnNwZWVkID0gU2ltdWxhdGlvbi5NQVhfU1BFRUQ7XHJcblxyXG4gICAgICAgIC8vIFRoZXNlIHRoaW5ncyBuZWVkIGJlIHJlc2V0IHdoZW4gdGhlIHNpbXVsYXRpb24gaXMgcmVzZXRcclxuICAgICAgICB0aGlzLm1lbW9yeSA9IG5ldyBNZW1vcnkoKTtcclxuICAgICAgICAvLyB0aGlzLmNvbnNvbGUgPSBWYWx1ZUVudGl0eS5pbnN0YW5jZShcImNvbnNvbGVcIiwgXCJcIik7XHJcblxyXG4gICAgICAgIHRoaXMuZXhlY1N0YWNrID0gdGhpcy5fZXhlY1N0YWNrID0gW107XHJcblxyXG4gICAgICAgIHRoaXMucGVuZGluZ05ld3MgPSBbXTtcclxuICAgICAgICB0aGlzLmxlYWtDaGVja0luZGV4ID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zdGVwc1Rha2VuID0gMDtcclxuICAgICAgICB0aGlzLmF0RW5kID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IGlzUGF1c2VkID0gdHJ1ZTtcclxuXHJcblxyXG4gICAgcHVibGljIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMuYWxsb2NhdGVTdHJpbmdMaXRlcmFscygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIENoYW5nZSBzdGF0aWMgaW5pdGlhbGl6YXRpb24gc28gaXQgaXMgd3JhcHBlZCB1cCBpbiBpdHMgb3duIGNvbnN0cnVjdCBhbmRcclxuICAgICAgICAvLyBydW50aW1lIGNvbnN0cnVjdCBwYWlyIHNwZWNpZmljYWxseSBmb3IgdGhhdCBwdXJwb3NlLiBUaGF0IGNvbnN0cnVjdCBjb3VsZFxyXG4gICAgICAgIC8vIGFsc28gb3B0aW9uYWxseSBjcmVhdGUgYW5kIHB1c2ggdGhlIG1haW4gY2FsbCB0YWtpbmcgb3ZlciB3aGF0IGlzIGN1cnJlbnRseVxyXG4gICAgICAgIC8vIGluIHRoaXMuY2FsbE1haW4oKVxyXG5cclxuICAgICAgICB0aGlzLmNhbGxNYWluKCk7XHJcbiAgICAgICAgdGhpcy5wdXNoKHRoaXMucHJvZ3JhbS5nbG9iYWxPYmplY3RBbGxvY2F0b3IuY3JlYXRlUnVudGltZUNvbnN0cnVjdCh0aGlzKSk7XHJcblxyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwic3RhcnRlZFwiKTtcclxuXHJcbiAgICAgICAgLy8gTmVlZGVkIGZvciB3aGF0ZXZlciBpcyBmaXJzdCBvbiB0aGUgZXhlY3V0aW9uIHN0YWNrXHJcbiAgICAgICAgdGhpcy51cE5leHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNhbGxNYWluKCkge1xyXG4gICAgICAgICg8TXV0YWJsZTx0aGlzPj50aGlzKS5tYWluUmV0dXJuT2JqZWN0ID0gbmV3IE1haW5SZXR1cm5PYmplY3QodGhpcy5tZW1vcnkpO1xyXG4gICAgICAgICg8TXV0YWJsZTx0aGlzPj50aGlzKS5tYWluRnVuY3Rpb24gPSBuZXcgUnVudGltZUZ1bmN0aW9uKHRoaXMucHJvZ3JhbS5tYWluRnVuY3Rpb24sIHRoaXMpO1xyXG4gICAgICAgIHRoaXMubWFpbkZ1bmN0aW9uLnNldFJldHVybk9iamVjdCh0aGlzLm1haW5SZXR1cm5PYmplY3QpO1xyXG4gICAgICAgIHRoaXMubWFpbkZ1bmN0aW9uLnB1c2hTdGFja0ZyYW1lKCk7XHJcbiAgICAgICAgdGhpcy5wdXNoKHRoaXMubWFpbkZ1bmN0aW9uKTtcclxuICAgICAgICB0aGlzLm1haW5GdW5jdGlvbi5nYWluQ29udHJvbCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgcHVzaChydDogUnVudGltZUNvbnN0cnVjdCkge1xyXG4gICAgICAgIHRoaXMuX2V4ZWNTdGFjay5wdXNoKHJ0KTtcclxuICAgICAgICBydC5wdXNoZWQoKTtcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcInB1c2hlZFwiLCBydCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyB0b3AoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZXhlY1N0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhlY1N0YWNrW3RoaXMuZXhlY1N0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgdGhlIHRvcCBydW50aW1lIGNvbnN0cnVjdCBmcm9tIHRoZSBleGVjdXRpb24gc3RhY2suXHJcbiAgICAgKiBEb2VzIG5vdGhpbmcgaWYgdGhlcmUncyBub3RoaW5nIG9uIHRoZSBleGVjdXRpb24gc3RhY2suXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwb3AoKSB7XHJcbiAgICAgICAgbGV0IHBvcHBlZCA9IHRoaXMuX2V4ZWNTdGFjay5wb3AoKTtcclxuICAgICAgICAvLyBpZiAocG9wcGVkKSB7XHJcbiAgICAgICAgLy8gICAgIHBvcHBlZC5wb3BwZWQoKTtcclxuICAgICAgICAvLyAgICAgaWYgKHBvcHBlZC5zdGFja1R5cGUgPT09IFwic3RhdGVtZW50XCIgfHwgcG9wcGVkLnN0YWNrVHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLmxlYWtDaGVjaygpOyAvLyBUT0RPIGxlYWsgY2hlY2tpbmdcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICByZXR1cm4gcG9wcGVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vVE9ETzogdGhpcyBtYXkgYmUgZGFuZ2Vyb3VzIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZXJlIGFyZSBjYXNlcyB0aGlzIGNvdWxkIHNraXAgdGVtcG9yYXJ5IGRlYWxsb2NhdG9ycyBvciBkZXN0cnVjdG9yc1xyXG4gICAgcHVibGljIHBvcFVudGlsKHJ0OiBSdW50aW1lQ29uc3RydWN0KSB7XHJcbiAgICAgICAgd2hpbGUodGhpcy5fZXhlY1N0YWNrLmxlbmd0aCA+IDAgJiYgdGhpcy5fZXhlY1N0YWNrW3RoaXMuX2V4ZWNTdGFjay5sZW5ndGggLSAxXSAhPT0gcnQpIHtcclxuICAgICAgICAgICAgdGhpcy5wb3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvcEZ1bmN0aW9uKCkgOiBSdW50aW1lRnVuY3Rpb24gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmV4ZWNTdGFjay5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgICAgICBsZXQgcnVudGltZUNvbnN0cnVjdCA9IHRoaXMuZXhlY1N0YWNrW2ldO1xyXG4gICAgICAgICAgICBpZiAocnVudGltZUNvbnN0cnVjdCBpbnN0YW5jZW9mIFJ1bnRpbWVGdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ1bnRpbWVDb25zdHJ1Y3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhbGxvY2F0ZVN0cmluZ0xpdGVyYWxzKCkge1xyXG4gICAgICAgIGxldCB0dXMgPSB0aGlzLnByb2dyYW0udHJhbnNsYXRpb25Vbml0cztcclxuICAgICAgICBmb3IobGV0IHR1TmFtZSBpbiB0dXMpIHtcclxuICAgICAgICAgICAgdHVzW3R1TmFtZV0uc3RyaW5nTGl0ZXJhbHMuZm9yRWFjaCgobGl0KSA9PiB7IHRoaXMubWVtb3J5LmFsbG9jYXRlU3RyaW5nTGl0ZXJhbChsaXQpOyB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHRwdWJsaWMgc3RlcEZvcndhcmQobjogbnVtYmVyID0gMSkge1xyXG5cclxuICAgICAgICBmb3IodmFyIGkgPSAwOyAhdGhpcy5hdEVuZCAmJiBpIDwgbjsgKytpKXtcclxuICAgICAgICAgICAgdGhpcy5fc3RlcEZvcndhcmQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwiYWZ0ZXJGdWxsU3RlcFwiLCB0aGlzLmV4ZWNTdGFjay5sZW5ndGggPiAwICYmIHRoaXMuZXhlY1N0YWNrW3RoaXMuZXhlY1N0YWNrLmxlbmd0aCAtIDFdKTtcclxuXHR9XHJcblxyXG4gICAgcHJpdmF0ZSBfc3RlcEZvcndhcmQoKSB7XHJcblxyXG4gICAgICAgIC8vIFRvcCBydCBjb25zdHJ1Y3Qgd2lsbCBkbyBzdHVmZlxyXG4gICAgICAgIGxldCBydCA9IHRoaXMudG9wKCk7XHJcblxyXG4gICAgICAgIGlmICghcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU3RlcCBmb3J3YXJkIG9uIHRoZSBydCBjb25zdHJ1Y3RcclxuICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcImJlZm9yZVN0ZXBGb3J3YXJkXCIsIHtydDogcnR9KTtcclxuICAgICAgICBydC5zdGVwRm9yd2FyZCgpO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwiYWZ0ZXJTdGVwRm9yd2FyZFwiLCB7cnQ6IHJ0fSk7XHJcblxyXG4gICAgICAgICsrKDxNdXRhYmxlPHRoaXM+PnRoaXMpLnN0ZXBzVGFrZW47XHJcblxyXG4gICAgICAgIC8vIEFmdGVyIGVhY2ggc3RlcCBjYWxsIHVwTmV4dC4gTm90ZSB0aGF0IHRoZSBcInVwIG5leHRcIiBjb25zdHJ1Y3QgbWF5XHJcbiAgICAgICAgLy8gYmUgZGlmZmVyZW50IGlmIHJ0IHBvcHBlZCBpdHNlbGYgb2ZmIHRoZSBzdGFjay4gdXBOZXh0IGFsc28gY2hlY2tzXHJcbiAgICAgICAgLy8gdG8gc2VlIGlmIHRoZSBzaW11bGF0aW9uIGlzIGRvbmUuXHJcbiAgICAgICAgdGhpcy51cE5leHQoKTtcclxuXHJcbiAgICB9XHJcblxyXG5cdHByaXZhdGUgdXBOZXh0KCkge1xyXG5cclxuICAgICAgICB3aGlsZSh0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBHcmFiIHRoZSBydCBjb25zdHJ1Y3QgdGhhdCBpcyBvbiB0b3Agb2YgdGhlIGV4ZWN1dGlvbiBzdGFjayBhbmQgdXAgbmV4dFxyXG4gICAgICAgICAgICBsZXQgcnQgPSB0aGlzLnRvcCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHNpbXVsYXRpb24gaXMgZG9uZVxyXG4gICAgICAgICAgICBpZiAoIXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAoPE11dGFibGU8dGhpcz4+dGhpcykuYXRFbmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZhYmxlLnNlbmQoXCJhdEVuZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gdXAgbmV4dCBvbiB0aGUgcnQgY29uc3RydWN0XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwiYmVmb3JlVXBOZXh0XCIsIHtydDogcnR9KTtcclxuICAgICAgICAgICAgcnQudXBOZXh0KCk7XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2YWJsZS5zZW5kKFwiYWZ0ZXJVcE5leHRcIiwge2luc3Q6IHJ0fSk7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB0aGUgcnQgY29uc3RydWN0IG9uIHRvcCBvZiB0aGUgZXhlY3V0aW9uIHN0YWNrIGhhcyBjaGFuZ2VkLCBpdCBuZWVkc1xyXG4gICAgICAgICAgICAvLyB0byBiZSBub3RpZmllZCB0aGF0IGl0IGlzIG5vdyB1cCBuZXh0LCBzbyB3ZSBzaG91bGQgbGV0IHRoZSBsb29wIGdvIGFnYWluLlxyXG4gICAgICAgICAgICAvLyBIb3dldmVyLCBpZiBydCBpcyBzdGlsbCBvbiB0b3AsIHdlIHByZXN1bWUgaXQgaXMgd2FpdGluZyBmb3IgdGhlIG5leHRcclxuICAgICAgICAgICAgLy8gc3RlcEZvcndhcmQgKGFuZCBpdCBoYXNuJ3QgYWRkZWQgYW55IGNoaWxkcmVuKSwgc28gd2UganVzdCBicmVhayB0aGUgbG9vcC5cclxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IGlmIHRoZSBleGVjdXRpb24gc3RhY2sgYmVjb21lcyBlbXB0eSwgd2UgZG8gbm90IGhpdCB0aGUgYnJlYWsgKGJlY2F1c2VcclxuICAgICAgICAgICAgLy8gd2UgY2FuIGFzc3VtZSBhdCB0aGlzIHBvaW50IGl0IHdhcyBub3QgZW1wdHkgcHJldmlvdXNseSkgYW5kIHdpbGwgbG9vcCBiYWNrIHRvXHJcbiAgICAgICAgICAgIC8vIHRoZSB0b3Agd2hlcmUgdGhlIGNoZWNrIGZvciBhbiBlbXB0eSBzdGFjayBpcyBwZXJmb3JtZWQuXHJcbiAgICAgICAgICAgIGlmKHJ0ID09PSB0aGlzLnRvcCgpKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gTm90ZSB0aGlzIHdpbGwgbm90IG9jY3VyIHdoZW4gdGhlbiBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIHN0ZXBUb0VuZCgpIHtcclxuICAgICAgICB3aGlsZSAoIXRoaXMuYXRFbmQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGVwRm9yd2FyZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBzdGVwT3ZlcjogZnVuY3Rpb24ob3B0aW9ucyl7XHJcbiAgICAvLyAgICAgdmFyIHRhcmdldCA9IHRoaXMucGVlayhmdW5jdGlvbihpbnN0KXtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIGlzQShpbnN0Lm1vZGVsLCBJbml0aWFsaXplcikgfHwgaXNBKGluc3QubW9kZWwsIEV4cHJlc3Npb25zLkZ1bmN0aW9uQ2FsbEV4cHJlc3Npb24pIHx8ICFpc0EoaW5zdC5tb2RlbCwgRXhwcmVzc2lvbnMuRXhwcmVzc2lvbik7XHJcbiAgICAvLyAgICAgfSk7XHJcblxyXG4gICAgLy8gICAgIGlmICh0YXJnZXQpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy5hdXRvUnVuKGNvcHlNaXhpbihvcHRpb25zLCB7XHJcbiAgICAvLyAgICAgICAgICAgICBwYXVzZUlmOiBmdW5jdGlvbigpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiAhdGFyZ2V0LmlzQWN0aXZlO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9KSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuc3RlcEZvcndhcmQoKTtcclxuICAgIC8vICAgICAgICAgb3B0aW9ucy5hZnRlciAmJiBvcHRpb25zLmFmdGVyKCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfSxcclxuXHJcbiAgICAvLyBzdGVwT3V0OiBmdW5jdGlvbihvcHRpb25zKXtcclxuICAgIC8vICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5pX2V4ZWNTdGFjay5sYXN0KCkuY29udGFpbmluZ0Z1bmN0aW9uKCk7XHJcblxyXG4gICAgLy8gICAgIGlmICh0YXJnZXQpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy5hdXRvUnVuKGNvcHlNaXhpbihvcHRpb25zLCB7XHJcbiAgICAvLyAgICAgICAgICAgICBwYXVzZUlmOiBmdW5jdGlvbigpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHJldHVybiAhdGFyZ2V0LmlzQWN0aXZlO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9KSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuc3RlcEZvcndhcmQoKTtcclxuICAgIC8vICAgICAgICAgb3B0aW9ucy5hZnRlciAmJiBvcHRpb25zLmFmdGVyKCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfSxcclxuXHJcblxyXG5cdC8vIHN0ZXBCYWNrd2FyZCA6IGZ1bmN0aW9uKG4pe1xyXG4gICAgLy8gICAgIGlmIChuID09PSAwKXtcclxuICAgIC8vICAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBuID0gbiB8fCAxO1xyXG5cdC8vIFx0JC5meC5vZmYgPSB0cnVlO1xyXG5cdC8vIFx0T3V0bGV0cy5DUFAuQ1BQX0FOSU1BVElPTlMgPSBmYWxzZTsgLy8gVE9ETyBub3Qgc3VyZSBJIG5lZWQgdGhpc1xyXG4gICAgLy8gICAgIHRoaXMuaV9hbGVydHNPZmYgPSB0cnVlO1xyXG4gICAgLy8gICAgIHRoaXMuaV9leHBsYWluT2ZmID0gdHJ1ZTtcclxuICAgIC8vICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcIm5vVHJhbnNpdGlvbnNcIikuaGVpZ2h0KCk7IC8vIC5oZWlnaHQoKSBpcyB0byBmb3JjZSByZWZsb3dcclxuICAgIC8vICAgICAvL1J1bnRpbWVDb25zdHJ1Y3QucHJvdG90eXBlLnNpbGVudCA9IHRydWU7XHJcblx0Ly8gXHRpZiAodGhpcy5pX3N0ZXBzVGFrZW4gPiAwKXtcclxuXHQvLyBcdFx0dGhpcy5jbGVhcigpO1xyXG5cdC8vIFx0XHR2YXIgc3RlcHMgPSB0aGlzLmlfc3RlcHNUYWtlbi1uO1xyXG5cdC8vIFx0XHR0aGlzLnN0YXJ0KCk7XHJcblx0Ly8gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzdGVwczsgKytpKXtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuc3RlcEZvcndhcmQoKTtcclxuXHQvLyBcdFx0fVxyXG5cdC8vIFx0fVxyXG4gICAgLy8gICAgIC8vUnVudGltZUNvbnN0cnVjdC5wcm90b3R5cGUuc2lsZW50ID0gZmFsc2U7XHJcbiAgICAvLyAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJub1RyYW5zaXRpb25zXCIpLmhlaWdodCgpOyAvLyAuaGVpZ2h0KCkgaXMgdG8gZm9yY2UgcmVmbG93XHJcbiAgICAvLyAgICAgdGhpcy5pX2FsZXJ0c09mZiA9IGZhbHNlO1xyXG4gICAgLy8gICAgIHRoaXMuaV9leHBsYWluT2ZmID0gZmFsc2U7XHJcbiAgICAvLyAgICAgT3V0bGV0cy5DUFAuQ1BQX0FOSU1BVElPTlMgPSB0cnVlO1xyXG5cdC8vIFx0JC5meC5vZmYgPSBmYWxzZTtcclxuXHJcblx0Ly8gfSxcclxuXHRcclxuXHRcclxuXHRcclxuXHRcclxuXHQvLyBwZWVrIDogZnVuY3Rpb24ocXVlcnksIHJldHVybkFycmF5LCBvZmZzZXQpe1xyXG4gICAgLy8gICAgIGlmICh0aGlzLmlfZXhlY1N0YWNrLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgLy8gICAgIH1cclxuXHQvLyBcdG9mZnNldCA9IG9mZnNldCB8fCAwO1xyXG5cdC8vIFx0aWYgKHF1ZXJ5KXtcclxuXHQvLyBcdFx0dmFyIHBlZWtlZEFyciA9IFtdO1xyXG5cdC8vIFx0XHR2YXIgcGVla2VkO1xyXG5cdC8vIFx0XHRmb3IgKHZhciBpID0gdGhpcy5pX2V4ZWNTdGFjay5sZW5ndGggLSAxIC0gb2Zmc2V0OyBpID49IDA7IC0taSl7XHJcblx0Ly8gXHRcdFx0cGVla2VkID0gdGhpcy5pX2V4ZWNTdGFja1tpXTtcclxuXHQvLyBcdFx0XHRwZWVrZWRBcnIudW5zaGlmdChwZWVrZWQpO1xyXG4gICAgLy8gICAgICAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gXCJmdW5jdGlvblwiKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICBpZiAocXVlcnkocGVla2VkKSl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSAodHlwZW9mIHF1ZXJ5ID09IFwic3RyaW5nXCIgPyBwZWVrZWQuc3RhY2tUeXBlIDogcGVla2VkKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA9PSBxdWVyeSl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIH1cclxuXHQvLyBcdFx0fVxyXG5cdC8vIFx0XHRyZXR1cm4gKHJldHVybkFycmF5ID8gcGVla2VkQXJyIDogcGVla2VkKTtcclxuXHQvLyBcdH1cclxuXHQvLyBcdGVsc2V7XHJcblx0Ly8gXHRcdHJldHVybiB0aGlzLmlfZXhlY1N0YWNrLmxhc3QoKTtcclxuXHQvLyBcdH1cclxuXHQvLyB9LFxyXG5cdFxyXG5cdC8vIHBlZWtzIDogZnVuY3Rpb24ocXVlcnksIHJldHVybkFycmF5KXtcclxuXHQvLyBcdHZhciByZXN1bHRzID0gW107XHJcblx0Ly8gXHR2YXIgb2Zmc2V0ID0gMDtcclxuXHQvLyBcdHdoaWxlIChvZmZzZXQgPCB0aGlzLmlfZXhlY1N0YWNrLmxlbmd0aCl7XHJcblx0Ly8gXHRcdHZhciBwID0gdGhpcy5wZWVrKHF1ZXJ5LCB0cnVlLCBvZmZzZXQpO1xyXG5cdC8vIFx0XHRvZmZzZXQgKz0gcC5sZW5ndGg7XHJcblx0Ly8gXHRcdHJlc3VsdHMudW5zaGlmdChyZXR1cm5BcnJheSA/IHAgOiBwWzBdKTtcclxuXHQvLyBcdH1cclxuXHQvLyBcdHJldHVybiByZXN1bHRzO1xyXG5cdC8vIH0sXHJcblxyXG5cclxuICAgIC8vIGNsZWFyUnVuVGhyZWFkOiBmdW5jdGlvbigpe1xyXG4gICAgLy8gICAgIGlmICh0aGlzLnJ1blRocmVhZCl7XHJcbiAgICAvLyAgICAgICAgIHRoaXMucnVuVGhyZWFkQ2xlYXJlZEZsYWcgPSB0cnVlO1xyXG4gICAgLy8gICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5ydW5UaHJlYWQpO1xyXG4gICAgLy8gICAgICAgICB0aGlzLnJ1blRocmVhZCA9IG51bGw7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfSxcclxuXHJcbiAgICAvLyBzdGFydFJ1blRocmVhZDogZnVuY3Rpb24oZnVuYyl7XHJcbiAgICAvLyAgICAgdGhpcy5ydW5UaHJlYWQgPSBzZXRUaW1lb3V0KGZ1bmMsIDApO1xyXG4gICAgLy8gfSxcclxuXHJcbiAgICAvLyBhdXRvUnVuIDogZnVuY3Rpb24ob3B0aW9ucyl7XHJcbiAgICAvLyAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcblxyXG4gICAgLy8gICAgIC8vIENsZWFyIG9sZCB0aHJlYWRcclxuICAgIC8vICAgICB0aGlzLmNsZWFyUnVuVGhyZWFkKCk7XHJcblxyXG4gICAgLy8gICAgIHRoaXMuaV9wYXVzZWQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgLy8gICAgIHZhciBmdW5jID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAvLyAgICAgICAgIC8vIFRyeSB0byBjb21wbGV0ZSB0aGlzLnNwZWVkIG51bWJlciBvZiBzdGVwcyBpbiAxMG1zLlxyXG4gICAgLy8gICAgICAgICB2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIC8vICAgICAgICAgZm9yKHZhciBudW0gPSAwOyBzZWxmLnNwZWVkID09PSBTaW11bGF0aW9uLk1BWF9TUEVFRCB8fCBudW0gPCBzZWxmLnNwZWVkOyArK251bSl7XHJcblxyXG4gICAgLy8gICAgICAgICAgICAgLy8gRGlkIHdlIGZpbmlzaD9cclxuICAgIC8vICAgICAgICAgICAgIGlmIChzZWxmLmlfYXRFbmQpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlbGYuc2VuZChcImZpbmlzaGVkXCIpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIG9wdGlvbnMub25GaW5pc2ggJiYgb3B0aW9ucy5vbkZpbmlzaCgpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIG9wdGlvbnMuYWZ0ZXIgJiYgb3B0aW9ucy5hZnRlcigpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHJldHVybjsgLy8gZG8gbm90IHJlbmV3IHRpbWVvdXRcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgICAgICAvLyBEaWQgd2UgcGF1c2U/XHJcbiAgICAvLyAgICAgICAgICAgICBpZiAoc2VsZi5pX3BhdXNlZCB8fCAob3B0aW9ucy5wYXVzZUlmICYmIG9wdGlvbnMucGF1c2VJZihzZWxmKSkpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlbGYuc2VuZChcInBhdXNlZFwiKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICBvcHRpb25zLm9uUGF1c2UgJiYgb3B0aW9ucy5vblBhdXNlKCk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgb3B0aW9ucy5hZnRlciAmJiBvcHRpb25zLmFmdGVyKCk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBkbyBub3QgcmVuZXcgdGltZW91dFxyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgICAgIC8vIEFib3J0IGlmIHdlIHJ1biBvdXQgb2YgdGltZVxyXG4gICAgLy8gICAgICAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPj0gKHNlbGYuc3BlZWQgPT09IFNpbXVsYXRpb24uTUFYX1NQRUVEID8gMTAgOiAxMDApICl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIHdpbGwgcmVuZXcgdGltZW91dFxyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgICAgIHNlbGYuc3RlcEZvcndhcmQoKTtcclxuICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgLy8gUmVuZXcgdGltZW91dFxyXG4gICAgLy8gICAgICAgICBpZiAoc2VsZi5zcGVlZCA9PT0gU2ltdWxhdGlvbi5NQVhfU1BFRUQpe1xyXG4gICAgLy8gICAgICAgICAgICAgc2VsZi5ydW5UaHJlYWQgPSBzZXRUaW1lb3V0KGZ1bmMsIDApO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGVsc2V7XHJcbiAgICAvLyAgICAgICAgICAgICBzZWxmLnJ1blRocmVhZCA9IHNldFRpbWVvdXQoZnVuYywgTWF0aC5tYXgoMCwxMDAtKERhdGUubm93KCkgLSBzdGFydFRpbWUpKSk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgfTtcclxuXHJcbiAgICAvLyAgICAgLy8gU3RhcnQgdGltZW91dFxyXG4gICAgLy8gICAgIHRoaXMuc3RhcnRSdW5UaHJlYWQoZnVuYyk7XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIHB1YmxpYyBjb3V0KHZhbHVlOiBWYWx1ZSkge1xyXG4gICAgICAgIC8vIFRPRE86IHdoZW4gb3N0cmVhbXMgYXJlIGltcGxlbWVudGVkIHByb3Blcmx5IHdpdGggb3ZlcmxvYWRlZCA8PCwgbW92ZSB0aGUgc3BlY2lhbCBjYXNlIHRoZXJlXHJcbiAgICAgICAgbGV0IHRleHQgPSBcIlwiO1xyXG4gICAgICAgIGlmKHZhbHVlLnR5cGUgaW5zdGFuY2VvZiBQb2ludGVyVHlwZSAmJiB2YWx1ZS50eXBlLnB0clRvIGluc3RhbmNlb2YgQ2hhcikge1xyXG4gICAgICAgICAgICBsZXQgYWRkciA9IHZhbHVlLnJhd1ZhbHVlO1xyXG4gICAgICAgICAgICBsZXQgYyA9IHRoaXMubWVtb3J5LmdldEJ5dGUoYWRkcik7XHJcbiAgICAgICAgICAgIHdoaWxlICghQ2hhci5pc051bGxDaGFyKGMpKSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0ICs9IHZhbHVlLnR5cGUucHRyVG8udmFsdWVUb09zdHJlYW1TdHJpbmcoYyk7XHJcbiAgICAgICAgICAgICAgICBjID0gdGhpcy5tZW1vcnkuZ2V0Qnl0ZSgrK2FkZHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0ZXh0ID0gZXNjYXBlU3RyaW5nKHZhbHVlLnZhbHVlVG9Pc3RyZWFtU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhcImNvdXQ6IFwiICsgdGV4dCk7XHJcbiAgICAgICAgLy8gdGhpcy5jb25zb2xlLnNldFZhbHVlKHRoaXMuY29uc29sZS52YWx1ZSgpICsgdGV4dCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIHB1YmxpYyB1bmRlZmluZWRCZWhhdmlvciA6IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgIC8vICAgICB0aGlzLmV2ZW50T2NjdXJyZWQoU2ltdWxhdGlvbi5FVkVOVF9VTkRFRklORURfQkVIQVZJT1IsIG1lc3NhZ2UsIHRydWUpO1xyXG5cclxuICAgIC8vIH0sXHJcbiAgICAvLyBpbXBsZW1lbnRhdGlvbkRlZmluZWRCZWhhdmlvciA6IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgIC8vICAgICB0aGlzLmV2ZW50T2NjdXJyZWQoU2ltdWxhdGlvbi5FVkVOVF9JTVBMRU1FTlRBVElPTl9ERUZJTkVEX0JFSEFWSU9SLCBtZXNzYWdlLCB0cnVlKTtcclxuXHJcbiAgICAvLyB9LFxyXG4gICAgLy8gdW5zcGVjaWZpZWRCZWhhdmlvciA6IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgIC8vICAgICB0aGlzLmV2ZW50T2NjdXJyZWQoU2ltdWxhdGlvbi5FVkVOVF9VTlNQRUNJRklFRF9CRUhBVklPUiwgbWVzc2FnZSwgdHJ1ZSk7XHJcblxyXG4gICAgLy8gfSxcclxuICAgIC8vIG1lbW9yeUxlYWtlZCA6IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgIC8vICAgICB0aGlzLmV2ZW50T2NjdXJyZWQoU2ltdWxhdGlvbi5FVkVOVF9NRU1PUllfTEVBSywgbWVzc2FnZSwgdHJ1ZSk7XHJcbiAgICAvLyB9LFxyXG4gICAgLy8gYXNzZXJ0aW9uRmFpbHVyZSA6IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgIC8vICAgICB0aGlzLmV2ZW50T2NjdXJyZWQoU2ltdWxhdGlvbi5FVkVOVF9BU1NFUlRJT05fRkFJTFVSRSwgbWVzc2FnZSwgdHJ1ZSk7XHJcbiAgICAvLyB9LFxyXG4gICAgLy8gY3Jhc2ggOiBmdW5jdGlvbihtZXNzYWdlKXtcclxuICAgIC8vICAgICB0aGlzLmV2ZW50T2NjdXJyZWQoU2ltdWxhdGlvbi5FVkVOVF9DUkFTSCwgbWVzc2FnZSArIFwiXFxuXFxuIChOb3RlOiBUaGlzIGlzIGEgbmFzdHkgZXJyb3IgYW5kIEkgbWF5IG5vdCBiZSBhYmxlIHRvIHJlY292ZXIuIENvbnRpbnVlIGF0IHlvdXIgb3duIHJpc2suKVwiLCB0cnVlKTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBwdWJsaWMgZXZlbnRPY2N1cnJlZChldmVudDogU2ltdWxhdGlvbkV2ZW50LCBtZXNzYWdlOiBzdHJpbmcsIHNob3dBbGVydDogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50c09jY3VycmVkW2V2ZW50XS5wdXNoKG1lc3NhZ2UpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChzaG93QWxlcnQpIHtcclxuICAgICAgICAgICAgdGhpcy5hbGVydChtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGhhc0V2ZW50T2NjdXJyZWQoZXZlbnQ6IFNpbXVsYXRpb25FdmVudCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50c09jY3VycmVkW2V2ZW50XS5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcml2YXRlIGFsZXJ0KG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghdGhpcy5hbGVydHNPZmYpe1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuc2VuZChcImFsZXJ0XCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBleHBsYWluIDogZnVuY3Rpb24oZXhwKXtcclxuICAgIC8vICAgICAvL2FsZXJ0KGV4cC5pZ25vcmUpO1xyXG4gICAgLy8gICAgIGlmICghdGhpcy5pX2V4cGxhaW5PZmYpe1xyXG4gICAgLy8gICAgICAgICBpZiAoIWV4cC5pZ25vcmUpIHtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuc2VuZChcImV4cGxhaW5cIiwgZXhwLm1lc3NhZ2UpO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfSxcclxuICAgIC8vIGNsb3NlTWVzc2FnZSA6IGZ1bmN0aW9uKCl7XHJcbiAgICAvLyAgICAgdGhpcy5zZW5kKFwiY2xvc2VNZXNzYWdlXCIpO1xyXG4gICAgLy8gfSxcclxuICAgIC8vIHBhdXNlIDogZnVuY3Rpb24oKXtcclxuICAgIC8vICAgICB0aGlzLmlfcGF1c2VkID0gdHJ1ZTtcclxuICAgIC8vIH0sXHJcblxyXG4gICAgLy8gbmV4dFJhbmRvbSA6IGZ1bmN0aW9uKCl7XHJcbiAgICAvLyAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCk7XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIG1haW5DYWxsSW5zdGFuY2UgOiBmdW5jdGlvbigpe1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmlfbWFpbkNhbGxJbnN0O1xyXG4gICAgLy8gfSxcclxuXHJcbiAgICAvLyBsZWFrQ2hlY2tDaGlsZHJlbiA6IGZ1bmN0aW9uKG9iail7XHJcblxyXG5cclxuICAgIC8vICAgICAvLyBJZiBpdCdzIGEgcG9pbnRlciBpbnRvIGFuIGFycmF5LCBoeXBvdGhldGljYWxseSB3ZSBjYW4gZ2V0IHRvIGFueXRoaW5nIGVsc2UgaW4gdGhlIGFycmF5LFxyXG4gICAgLy8gICAgIC8vIHNvIHdlIG5lZWQgdG8gYWRkIHRoZSB3aG9sZSB0aGluZyB0byB0aGUgZnJvbnRpZXIuXHJcbiAgICAvLyAgICAgLy8gVGhpcyBhbHNvIGNvdmVycyBkeW5hbWljIGFycmF5cyAtIHdlIG5ldmVyIGhhdmUgYSBwb2ludGVyIHRvIHRoZSBhcnJheSwgYnV0IHRvIGVsZW1lbnRzIGluIGl0LlxyXG4gICAgLy8gICAgIGlmIChpc0Eob2JqLnR5cGUsIFR5cGVzLkFycmF5UG9pbnRlcikpe1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gW29iai50eXBlLmFyck9ial07XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2UgaWYgKGlzQShvYmoudHlwZSwgVHlwZXMuUG9pbnRlcikgJiYgb2JqLnR5cGUuaXNPYmplY3RQb2ludGVyKCkpe1xyXG4gICAgLy8gICAgICAgICB2YXIgcG9pbnRzVG8gPSB0aGlzLm1lbW9yeS5kZXJlZmVyZW5jZShvYmopO1xyXG4gICAgLy8gICAgICAgICBpZiAocG9pbnRzVG8gJiYgIWlzQShwb2ludHNUbywgQW5vbnltb3VzT2JqZWN0KSl7XHJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm4gW3BvaW50c1RvXTtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBlbHNlIGlmIChpc0Eob2JqLnR5cGUsIFR5cGVzLkFycmF5KSl7XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBvYmouZWxlbU9iamVjdHM7XHJcbiAgICAvLyAgICAgICAgIC8vY2hpbGRyZW4ucHVzaChvYmouZWxlbU9iamVjdHMpO1xyXG4gICAgLy8gICAgICAgICAvL3ZhciBlbGVtcyA9IG9iai5yYXdWYWx1ZSgpO1xyXG4gICAgLy8gICAgICAgICAvL3ZhciBjaGlsZHJlbiA9IFtdO1xyXG4gICAgLy8gICAgICAgICAvL2Zvcih2YXIgaSA9IDA7IGkgPCBlbGVtcy5sZW5ndGg7ICsraSl7XHJcbiAgICAvLyAgICAgICAgIC8vICAgIGNoaWxkcmVuLnB1c2goVmFsdWUuaW5zdGFuY2UoZWxlbXNbaV0sIG9iai50eXBlLmVsZW1UeXBlKSk7XHJcbiAgICAvLyAgICAgICAgIC8vfVxyXG4gICAgLy8gICAgICAgICAvL3JldHVybiBjaGlsZHJlbjtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgZWxzZSBpZiAoaXNBKG9iai50eXBlLCBUeXBlcy5DbGFzcykpe1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gb2JqLnN1Ym9iamVjdHM7XHJcbiAgICAvLyAgICAgICAgIC8vdmFyIG1lbWJlcnMgPSBvYmouc3ViT2JqZWN0cztcclxuICAgIC8vICAgICAgICAgLy92YXIgY2hpbGRyZW4gPSBbXTtcclxuICAgIC8vICAgICAgICAgLy9mb3IodmFyIGkgPSAwOyBpIDwgbWVtYmVycy5sZW5ndGg7ICsraSl7XHJcbiAgICAvLyAgICAgICAgIC8vICAgIGNoaWxkcmVuLnB1c2goVmFsdWUuaW5zdGFuY2UoZWxlbXNbaV0pKTtcclxuICAgIC8vICAgICAgICAgLy99XHJcbiAgICAvLyAgICAgICAgIC8vcmV0dXJuIGNoaWxkcmVuO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICByZXR1cm4gW107XHJcbiAgICAvLyB9LFxyXG4gICAgLy8gbGVha0NoZWNrIDogZnVuY3Rpb24oKXtcclxuICAgIC8vICAgICAvL2NvbnNvbGUubG9nKFwibGVhayBjaGVjayBydW5uaW5nIVwiKTtcclxuICAgIC8vICAgICAvLyBUZW1wb3JhcnkgcGxhY2UgZm9yIHRlc3RpbmcgbGVhayBjaGVja1xyXG4gICAgLy8gICAgIHZhciBoZWFwT2JqZWN0c01hcCA9IHRoaXMubWVtb3J5LmhlYXAub2JqZWN0TWFwO1xyXG4gICAgLy8gICAgIGZvciAodmFyIGFkZHIgaW4gaGVhcE9iamVjdHNNYXApIHtcclxuICAgIC8vICAgICAgICAgdmFyIG9iaiA9IGhlYXBPYmplY3RzTWFwW2FkZHJdO1xyXG4gICAgLy8gICAgICAgICBpZih0aGlzLmxlYWtDaGVja09iaihvYmopKXtcclxuICAgIC8vICAgICAgICAgICAgIG9iai5sZWFrZWQodGhpcyk7XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgZWxzZXtcclxuICAgIC8vICAgICAgICAgICAgIG9iai51bmxlYWtlZCh0aGlzKTtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH0sXHJcbiAgICAvLyBsZWFrQ2hlY2tPYmogOiBmdW5jdGlvbihxdWVyeSkge1xyXG4gICAgLy8gICAgICsrdGhpcy5pX2xlYWtDaGVja0luZGV4O1xyXG4gICAgLy8gICAgIHZhciBmcm9udGllciA9IFtdO1xyXG4gICAgLy8gICAgIHZhciBnbG9iYWxTY29wZSA9IHRoaXMuaV9wcm9ncmFtLmdldEdsb2JhbFNjb3BlKCk7XHJcbiAgICAvLyAgICAgZm9yICh2YXIga2V5IGluIGdsb2JhbFNjb3BlLmVudGl0aWVzKSB7XHJcbiAgICAvLyAgICAgICAgIHZhciBlbnQgPSBnbG9iYWxTY29wZS5lbnRpdGllc1trZXldO1xyXG4gICAgLy8gICAgICAgICBpZiAoaXNBKGVudCwgQ1BQT2JqZWN0KSl7XHJcbiAgICAvLyAgICAgICAgICAgICBlbnQuaV9sZWFrQ2hlY2tJbmRleCA9IHRoaXMuaV9sZWFrQ2hlY2tJbmRleDtcclxuICAgIC8vICAgICAgICAgICAgIGZyb250aWVyLnB1c2goZW50KTtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMubWVtb3J5LnN0YWNrLmZyYW1lcy5sZW5ndGg7ICsraSl7XHJcbiAgICAvLyAgICAgICAgIHZhciBmcmFtZU9ianMgPSB0aGlzLm1lbW9yeS5zdGFjay5mcmFtZXNbaV0ub2JqZWN0cztcclxuICAgIC8vICAgICAgICAgZm9yICh2YXIga2V5IGluIGZyYW1lT2Jqcykge1xyXG4gICAgLy8gICAgICAgICAgICAgdmFyIGVudCA9IGZyYW1lT2Jqc1trZXldO1xyXG4gICAgLy8gICAgICAgICAgICAgaWYgKGlzQShlbnQsIENQUE9iamVjdCkpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGVudC5pX2xlYWtDaGVja0luZGV4ID0gdGhpcy5pX2xlYWtDaGVja0luZGV4O1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGZyb250aWVyLnB1c2goZW50KTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuaV9wZW5kaW5nTmV3cy5sZW5ndGg7ICsraSl7XHJcbiAgICAvLyAgICAgICAgIHZhciBvYmogPSB0aGlzLmlfcGVuZGluZ05ld3NbaV07XHJcbiAgICAvLyAgICAgICAgIG9iai5pX2xlYWtDaGVja0luZGV4ID0gdGhpcy5pX2xlYWtDaGVja0luZGV4O1xyXG4gICAgLy8gICAgICAgICBmcm9udGllci5wdXNoKG9iaik7XHJcbiAgICAvLyAgICAgfVxyXG5cclxuICAgIC8vICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5pX2V4ZWNTdGFjay5sZW5ndGg7ICsraSl7XHJcbiAgICAvLyAgICAgICAgIHZhciBpbnN0ID0gdGhpcy5pX2V4ZWNTdGFja1tpXTtcclxuICAgIC8vICAgICAgICAgaWYgKGluc3QuZXZhbFJlc3VsdCkge1xyXG4gICAgLy8gICAgICAgICAgICAgb2JqID0gaW5zdC5ldmFsUmVzdWx0O1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGVsc2UgaWYgKGluc3QuZnVuYyAmJiAhaXNBKGluc3QuZnVuYy5tb2RlbC50eXBlLnJldHVyblR5cGUsIFR5cGVzLlZvaWQpKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBpZiAoaXNBKGluc3QuZnVuYy5tb2RlbC50eXBlLnJldHVyblR5cGUsIFR5cGVzLlJlZmVyZW5jZSkpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBvYmogPSBpbnN0LmZ1bmMubW9kZWwuZ2V0UmV0dXJuT2JqZWN0KHRoaXMsIGluc3QuZnVuYyk7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICBlbHNlIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBvYmogPSBpbnN0LmZ1bmMubW9kZWwuZ2V0UmV0dXJuT2JqZWN0KHRoaXMsIGluc3QuZnVuYykuZ2V0VmFsdWUoKTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgaWYgKG9iaiAmJiBpc0Eob2JqLCBDUFBPYmplY3QpKXtcclxuICAgIC8vICAgICAgICAgICAgIG9iai5pX2xlYWtDaGVja0luZGV4ID0gdGhpcy5pX2xlYWtDaGVja0luZGV4O1xyXG4gICAgLy8gICAgICAgICAgICAgZnJvbnRpZXIucHVzaChvYmopO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIGVsc2UgaWYgKG9iaiAmJiBpc0Eob2JqLCBWYWx1ZSkpe1xyXG4gICAgLy8gICAgICAgICAgICAgZnJvbnRpZXIucHVzaChvYmopO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG5cclxuICAgIC8vICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5tZW1vcnkudGVtcG9yYXJ5T2JqZWN0cyl7XHJcbiAgICAvLyAgICAgICAgIHZhciBvYmogPSB0aGlzLm1lbW9yeS50ZW1wb3JhcnlPYmplY3RzW2tleV07XHJcbiAgICAvLyAgICAgICAgIG9iai5pX2xlYWtDaGVja0luZGV4ID0gdGhpcy5pX2xlYWtDaGVja0luZGV4O1xyXG4gICAgLy8gICAgICAgICBmcm9udGllci5wdXNoKG9iaik7XHJcbiAgICAvLyAgICAgfVxyXG5cclxuICAgIC8vICAgICB3aGlsZSAoZnJvbnRpZXIubGVuZ3RoID4gMCkge1xyXG4gICAgLy8gICAgICAgICB2YXIgb2JqID0gZnJvbnRpZXIuc2hpZnQoKTtcclxuXHJcbiAgICAvLyAgICAgICAgIC8vIENoZWNrIGlmIGZvdW5kXHJcbiAgICAvLyAgICAgICAgIGlmIChvYmogPT09IHF1ZXJ5KXtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIC8vICAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICAgLy8gTWFyayBhcyB2aXNpdGVkXHJcbiAgICAvLyAgICAgICAgIG9iai5pX2xlYWtDaGVja0luZGV4ID0gdGhpcy5pX2xlYWtDaGVja0luZGV4O1xyXG4gICAgLy8gICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmxlYWtDaGVja0NoaWxkcmVuKG9iaik7XHJcbiAgICAvLyAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSl7XHJcbiAgICAvLyAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgIC8vICAgICAgICAgICAgIGlmIChjaGlsZC5pX2xlYWtDaGVja0luZGV4ICE9PSB0aGlzLmlfbGVha0NoZWNrSW5kZXgpe1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGZyb250aWVyLnB1c2goY2hpbGQpO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIHJldHVybiB0cnVlO1xyXG4gICAgLy8gfSxcclxufVxyXG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW5kZXhPZldpdGg7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaWN0SW5kZXhPZjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmFOO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmRJbmRleDtcbiIsInZhciBiYXNlRmluZEluZGV4ID0gcmVxdWlyZSgnLi9fYmFzZUZpbmRJbmRleCcpLFxuICAgIGJhc2VJc05hTiA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hTicpLFxuICAgIHN0cmljdEluZGV4T2YgPSByZXF1aXJlKCcuL19zdHJpY3RJbmRleE9mJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5kZXhPZmAgd2l0aG91dCBgZnJvbUluZGV4YCBib3VuZHMgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUluZGV4T2Y7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuIiwidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBiYXNlSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Jhc2VJbmRleE9mJyksXG4gICAgYmFzZUluZGV4T2ZXaXRoID0gcmVxdWlyZSgnLi9fYmFzZUluZGV4T2ZXaXRoJyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgY29weUFycmF5ID0gcmVxdWlyZSgnLi9fY29weUFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIHNlZW4gPSBhcnJheTtcblxuICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICB9XG4gIGlmIChpdGVyYXRlZSkge1xuICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHVsbEFsbDtcbiIsInZhciBiYXNlUHVsbEFsbCA9IHJlcXVpcmUoJy4vX2Jhc2VQdWxsQWxsJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gKlxuICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAqIC8vID0+IFsnYicsICdiJ11cbiAqL1xuZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICA6IGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHB1bGxBbGw7XG4iLCIvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG52YXIgSE9UX0NPVU5UID0gODAwLFxuICAgIEhPVF9TUEFOID0gMTY7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVOb3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICogbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICB2YXIgY291bnQgPSAwLFxuICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvcnRPdXQ7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnR5O1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc3RhbnQ7XG4iLCJ2YXIgY29uc3RhbnQgPSByZXF1aXJlKCcuL2NvbnN0YW50JyksXG4gICAgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0VG9TdHJpbmc7XG4iLCJ2YXIgYmFzZVNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVNldFRvU3RyaW5nJyksXG4gICAgc2hvcnRPdXQgPSByZXF1aXJlKCcuL19zaG9ydE91dCcpO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5O1xuIiwidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyUmVzdDtcbiIsInZhciBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBvdmVyUmVzdCA9IHJlcXVpcmUoJy4vX292ZXJSZXN0JyksXG4gICAgc2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19zZXRUb1N0cmluZycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUmVzdDtcbiIsInZhciBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgcHVsbEFsbCA9IHJlcXVpcmUoJy4vcHVsbEFsbCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICpcbiAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICogY29uc29sZS5sb2coYXJyYXkpO1xuICogLy8gPT4gWydiJywgJ2InXVxuICovXG52YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHB1bGw7XG4iLCIvLyB0c2xpbnQ6ZGlzYWJsZTpvbmx5LWFycm93LWZ1bmN0aW9uc1xuLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc2hvcnRoYW5kXG4vLyB0c2xpbnQ6ZGlzYWJsZTp0cmFpbGluZy1jb21tYVxuLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4vLyB0c2xpbnQ6ZGlzYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4vLyB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGhcbi8vIHRzbGludDpkaXNhYmxlOm5vLWNvbnNlY3V0aXZlLWJsYW5rLWxpbmVzXG4vLyB0c2xpbnQ6ZGlzYWJsZTphbGlnblxuXG5cbi8vIEdlbmVyYXRlZCBieSBQRUcuanMgdi4gMC4xMC4wICh0cy1wZWdqcyBwbHVnaW4gdi4gMC4yLjYgKVxuLy9cbi8vIGh0dHBzOi8vcGVnanMub3JnLyAgIGh0dHBzOi8vZ2l0aHViLmNvbS9tZXRhZGV2cHJvL3RzLXBlZ2pzXG5cblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlUG9zaXRpb24ge1xuICBvZmZzZXQ6IG51bWJlcjtcbiAgbGluZTogbnVtYmVyO1xuICBjb2x1bW46IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRmlsZVJhbmdlIHtcbiAgc3RhcnQ6IElGaWxlUG9zaXRpb247XG4gIGVuZDogSUZpbGVQb3NpdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTGl0ZXJhbEV4cGVjdGF0aW9uIHtcbiAgdHlwZTogXCJsaXRlcmFsXCI7XG4gIHRleHQ6IHN0cmluZztcbiAgaWdub3JlQ2FzZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ2xhc3NQYXJ0cyBleHRlbmRzIEFycmF5PHN0cmluZyB8IElDbGFzc1BhcnRzPiB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIElDbGFzc0V4cGVjdGF0aW9uIHtcbiAgdHlwZTogXCJjbGFzc1wiO1xuICBwYXJ0czogSUNsYXNzUGFydHM7XG4gIGludmVydGVkOiBib29sZWFuO1xuICBpZ25vcmVDYXNlOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBbnlFeHBlY3RhdGlvbiB7XG4gIHR5cGU6IFwiYW55XCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVuZEV4cGVjdGF0aW9uIHtcbiAgdHlwZTogXCJlbmRcIjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT3RoZXJFeHBlY3RhdGlvbiB7XG4gIHR5cGU6IFwib3RoZXJcIjtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgRXhwZWN0YXRpb24gPSBJTGl0ZXJhbEV4cGVjdGF0aW9uIHwgSUNsYXNzRXhwZWN0YXRpb24gfCBJQW55RXhwZWN0YXRpb24gfCBJRW5kRXhwZWN0YXRpb24gfCBJT3RoZXJFeHBlY3RhdGlvbjtcblxuZXhwb3J0IGNsYXNzIFN5bnRheEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwdWJsaWMgc3RhdGljIGJ1aWxkTWVzc2FnZShleHBlY3RlZDogRXhwZWN0YXRpb25bXSwgZm91bmQ6IHN0cmluZyB8IG51bGwpIHtcbiAgICBmdW5jdGlvbiBoZXgoY2g6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gY2guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXRlcmFsRXNjYXBlKHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gc1xuICAgICAgICAucmVwbGFjZSgvXFxcXC9nLCBcIlxcXFxcXFxcXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cIi9nLCAgXCJcXFxcXFxcIlwiKVxuICAgICAgICAucmVwbGFjZSgvXFwwL2csIFwiXFxcXDBcIilcbiAgICAgICAgLnJlcGxhY2UoL1xcdC9nLCBcIlxcXFx0XCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKVxuICAgICAgICAucmVwbGFjZSgvXFxyL2csIFwiXFxcXHJcIilcbiAgICAgICAgLnJlcGxhY2UoL1tcXHgwMC1cXHgwRl0vZywgICAgICAgICAgICAoY2gpID0+IFwiXFxcXHgwXCIgKyBoZXgoY2gpIClcbiAgICAgICAgLnJlcGxhY2UoL1tcXHgxMC1cXHgxRlxceDdGLVxceDlGXS9nLCAoY2gpID0+IFwiXFxcXHhcIiAgKyBoZXgoY2gpICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xhc3NFc2NhcGUoczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiBzXG4gICAgICAgIC5yZXBsYWNlKC9cXFxcL2csIFwiXFxcXFxcXFxcIilcbiAgICAgICAgLnJlcGxhY2UoL1xcXS9nLCBcIlxcXFxdXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXF4vZywgXCJcXFxcXlwiKVxuICAgICAgICAucmVwbGFjZSgvLS9nLCAgXCJcXFxcLVwiKVxuICAgICAgICAucmVwbGFjZSgvXFwwL2csIFwiXFxcXDBcIilcbiAgICAgICAgLnJlcGxhY2UoL1xcdC9nLCBcIlxcXFx0XCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKVxuICAgICAgICAucmVwbGFjZSgvXFxyL2csIFwiXFxcXHJcIilcbiAgICAgICAgLnJlcGxhY2UoL1tcXHgwMC1cXHgwRl0vZywgICAgICAgICAgICAoY2gpID0+IFwiXFxcXHgwXCIgKyBoZXgoY2gpIClcbiAgICAgICAgLnJlcGxhY2UoL1tcXHgxMC1cXHgxRlxceDdGLVxceDlGXS9nLCAoY2gpID0+IFwiXFxcXHhcIiAgKyBoZXgoY2gpICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVzY3JpYmVFeHBlY3RhdGlvbihleHBlY3RhdGlvbjogRXhwZWN0YXRpb24pIHtcbiAgICAgIHN3aXRjaCAoZXhwZWN0YXRpb24udHlwZSkge1xuICAgICAgICBjYXNlIFwibGl0ZXJhbFwiOlxuICAgICAgICAgIHJldHVybiBcIlxcXCJcIiArIGxpdGVyYWxFc2NhcGUoZXhwZWN0YXRpb24udGV4dCkgKyBcIlxcXCJcIjtcbiAgICAgICAgY2FzZSBcImNsYXNzXCI6XG4gICAgICAgICAgY29uc3QgZXNjYXBlZFBhcnRzID0gZXhwZWN0YXRpb24ucGFydHMubWFwKChwYXJ0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXJ0KVxuICAgICAgICAgICAgICA/IGNsYXNzRXNjYXBlKHBhcnRbMF0gYXMgc3RyaW5nKSArIFwiLVwiICsgY2xhc3NFc2NhcGUocGFydFsxXSBhcyBzdHJpbmcpXG4gICAgICAgICAgICAgIDogY2xhc3NFc2NhcGUocGFydCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gXCJbXCIgKyAoZXhwZWN0YXRpb24uaW52ZXJ0ZWQgPyBcIl5cIiA6IFwiXCIpICsgZXNjYXBlZFBhcnRzICsgXCJdXCI7XG4gICAgICAgIGNhc2UgXCJhbnlcIjpcbiAgICAgICAgICByZXR1cm4gXCJhbnkgY2hhcmFjdGVyXCI7XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gXCJlbmQgb2YgaW5wdXRcIjtcbiAgICAgICAgY2FzZSBcIm90aGVyXCI6XG4gICAgICAgICAgcmV0dXJuIGV4cGVjdGF0aW9uLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc2NyaWJlRXhwZWN0ZWQoZXhwZWN0ZWQxOiBFeHBlY3RhdGlvbltdKSB7XG4gICAgICBjb25zdCBkZXNjcmlwdGlvbnMgPSBleHBlY3RlZDEubWFwKGRlc2NyaWJlRXhwZWN0YXRpb24pO1xuICAgICAgbGV0IGk6IG51bWJlcjtcbiAgICAgIGxldCBqOiBudW1iZXI7XG5cbiAgICAgIGRlc2NyaXB0aW9ucy5zb3J0KCk7XG5cbiAgICAgIGlmIChkZXNjcmlwdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGkgPSAxLCBqID0gMTsgaSA8IGRlc2NyaXB0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChkZXNjcmlwdGlvbnNbaSAtIDFdICE9PSBkZXNjcmlwdGlvbnNbaV0pIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uc1tqXSA9IGRlc2NyaXB0aW9uc1tpXTtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVzY3JpcHRpb25zLmxlbmd0aCA9IGo7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZGVzY3JpcHRpb25zLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uc1swXTtcblxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uc1swXSArIFwiIG9yIFwiICsgZGVzY3JpcHRpb25zWzFdO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9ucy5zbGljZSgwLCAtMSkuam9pbihcIiwgXCIpXG4gICAgICAgICAgICArIFwiLCBvciBcIlxuICAgICAgICAgICAgKyBkZXNjcmlwdGlvbnNbZGVzY3JpcHRpb25zLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc2NyaWJlRm91bmQoZm91bmQxOiBzdHJpbmcgfCBudWxsKSB7XG4gICAgICByZXR1cm4gZm91bmQxID8gXCJcXFwiXCIgKyBsaXRlcmFsRXNjYXBlKGZvdW5kMSkgKyBcIlxcXCJcIiA6IFwiZW5kIG9mIGlucHV0XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiRXhwZWN0ZWQgXCIgKyBkZXNjcmliZUV4cGVjdGVkKGV4cGVjdGVkKSArIFwiIGJ1dCBcIiArIGRlc2NyaWJlRm91bmQoZm91bmQpICsgXCIgZm91bmQuXCI7XG4gIH1cblxuICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nO1xuICBwdWJsaWMgZXhwZWN0ZWQ6IEV4cGVjdGF0aW9uW107XG4gIHB1YmxpYyBmb3VuZDogc3RyaW5nIHwgbnVsbDtcbiAgcHVibGljIGxvY2F0aW9uOiBJRmlsZVJhbmdlO1xuICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZywgZXhwZWN0ZWQ6IEV4cGVjdGF0aW9uW10sIGZvdW5kOiBzdHJpbmcgfCBudWxsLCBsb2NhdGlvbjogSUZpbGVSYW5nZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gICAgdGhpcy5mb3VuZCA9IGZvdW5kO1xuICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICB0aGlzLm5hbWUgPSBcIlN5bnRheEVycm9yXCI7XG5cbiAgICBpZiAodHlwZW9mIChFcnJvciBhcyBhbnkpLmNhcHR1cmVTdGFja1RyYWNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIChFcnJvciBhcyBhbnkpLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFN5bnRheEVycm9yKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcGVnJHBhcnNlKGlucHV0OiBzdHJpbmcsIG9wdGlvbnM/OiBJUGFyc2VPcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zICE9PSB1bmRlZmluZWQgPyBvcHRpb25zIDoge307XG5cbiAgY29uc3QgcGVnJEZBSUxFRDogUmVhZG9ubHk8e30+ID0ge307XG5cbiAgY29uc3QgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uczoge1tpZDogc3RyaW5nXTogYW55fSA9IHsgc3RhcnQ6IHBlZyRwYXJzZXN0YXJ0IH07XG4gIGxldCBwZWckc3RhcnRSdWxlRnVuY3Rpb246ICgpID0+IGFueSA9IHBlZyRwYXJzZXN0YXJ0O1xuXG4gIGNvbnN0IHBlZyRjMCA9IGZ1bmN0aW9uKGQ6IGFueSk6IGFueSB7cmV0dXJuIGR9O1xuICBjb25zdCBwZWckYzEgPSBmdW5jdGlvbihkZWNsczogYW55KTogYW55IHtyZXR1cm4gZGVjbHMuZmlsdGVyKChlbGVtOiBhbnkpID0+IGVsZW0hPT1cImNvbW1lbnRcIik7fTtcbiAgY29uc3QgcGVnJGMyID0gZnVuY3Rpb24oKTogYW55IHtyZXR1cm4gXCJjb21tZW50XCI7fTtcbiAgY29uc3QgcGVnJGMzID0gXCIvL1wiO1xuICBjb25zdCBwZWckYzQgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiLy9cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzUgPSAvXlteXFxuXS87XG4gIGNvbnN0IHBlZyRjNiA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtcIlxcblwiXSwgdHJ1ZSwgZmFsc2UpO1xuICBjb25zdCBwZWckYzcgPSBcIlxcblwiO1xuICBjb25zdCBwZWckYzggPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiXFxuXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGM5ID0gXCIvKlwiO1xuICBjb25zdCBwZWckYzEwID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIi8qXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxMSA9IFwiKi9cIjtcbiAgY29uc3QgcGVnJGMxMiA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIqL1wiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTMgPSBwZWckYW55RXhwZWN0YXRpb24oKTtcbiAgY29uc3QgcGVnJGMxNCA9IGZ1bmN0aW9uKHQ6IGFueSk6IGFueSB7cmV0dXJuIHRyYWNrKHQsIGxvY2F0aW9uKCksIHRleHQoKSk7fTtcbiAgY29uc3QgcGVnJGMxNSA9IGZ1bmN0aW9uKHN0bXQ6IGFueSk6IGFueSB7cmV0dXJuIGFic29yYih7Y29uc3RydWN0X3R5cGU6XCJsYWJlbGVkX3N0YXRlbWVudFwifSwgc3RtdCk7IH07XG4gIGNvbnN0IHBlZyRjMTYgPSBcIjpcIjtcbiAgY29uc3QgcGVnJGMxNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCI6XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxOCA9IGZ1bmN0aW9uKGxhYmVsOiBhbnksIHN0bXQ6IGFueSk6IGFueSB7cmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTogXCJsYWJlbGVkX3N0YXRlbWVudFwiLCBsYWJlbDpsYWJlbCwgc3RhdGVtZW50OiBzdG10fTsgfTtcbiAgY29uc3QgcGVnJGMxOSA9IFwiY2FzZVwiO1xuICBjb25zdCBwZWckYzIwID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcImNhc2VcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzIxID0gZnVuY3Rpb24oYzogYW55LCBzdG10OiBhbnkpOiBhbnkgeyByZXR1cm4ge2NvbnN0cnVjdF90eXBlOiBcImxhYmVsZWRfc3RhdGVtZW50XCIsIGNhc2U6Yywgc3RhdGVtZW50OnN0bXR9OyB9O1xuICBjb25zdCBwZWckYzIyID0gXCJkZWZhdWx0XCI7XG4gIGNvbnN0IHBlZyRjMjMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiZGVmYXVsdFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjQgPSBmdW5jdGlvbihzdG10OiBhbnkpOiBhbnkgeyByZXR1cm4ge2NvbnN0cnVjdF90eXBlOiBcImxhYmVsZWRfc3RhdGVtZW50XCIsIGRlZmF1bHQ6dHJ1ZSwgc3RtdDpzdG10fTsgfTtcbiAgY29uc3QgcGVnJGMyNSA9IFwiO1wiO1xuICBjb25zdCBwZWckYzI2ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIjtcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzI3ID0gZnVuY3Rpb24oZXhwcjogYW55KTogYW55IHsgcmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTogXCJleHByZXNzaW9uX3N0YXRlbWVudFwiLCBleHByZXNzaW9uOmV4cHJ9OyB9O1xuICBjb25zdCBwZWckYzI4ID0gZnVuY3Rpb24oKTogYW55IHsgcmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTogXCJudWxsX3N0YXRlbWVudFwifTsgfTtcbiAgY29uc3QgcGVnJGMyOSA9IFwie1wiO1xuICBjb25zdCBwZWckYzMwID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIntcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzMxID0gZnVuY3Rpb24oc3RtdDogYW55KTogYW55IHtyZXR1cm4gc3RtdH07XG4gIGNvbnN0IHBlZyRjMzIgPSBcIn1cIjtcbiAgY29uc3QgcGVnJGMzMyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJ9XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMzNCA9IGZ1bmN0aW9uKHN0bXRzOiBhbnkpOiBhbnkgeyByZXR1cm4ge2NvbnN0cnVjdF90eXBlOiBcImJsb2NrXCIsIHN0YXRlbWVudHM6IHN0bXRzfTsgfTtcbiAgY29uc3QgcGVnJGMzNSA9IFwiaWZcIjtcbiAgY29uc3QgcGVnJGMzNiA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJpZlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMzcgPSBcIihcIjtcbiAgY29uc3QgcGVnJGMzOCA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIoXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMzOSA9IFwiKVwiO1xuICBjb25zdCBwZWckYzQwID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIilcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzQxID0gXCJlbHNlXCI7XG4gIGNvbnN0IHBlZyRjNDIgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiZWxzZVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDMgPSBmdW5jdGlvbihjb25kOiBhbnksIHRoZW46IGFueSwgZTogYW55KTogYW55IHtyZXR1cm4ge2NvbnN0cnVjdF90eXBlOlwic2VsZWN0aW9uX3N0YXRlbWVudFwiLCBjb25kaXRpb246Y29uZCwgdGhlbjp0aGVuLCBvdGhlcndpc2U6ZX07IH07XG4gIGNvbnN0IHBlZyRjNDQgPSBmdW5jdGlvbihjb25kOiBhbnksIHRoZW46IGFueSk6IGFueSB7cmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTpcInNlbGVjdGlvbl9zdGF0ZW1lbnRcIiwgY29uZGl0aW9uOmNvbmQsIHRoZW46dGhlbn07IH07XG4gIGNvbnN0IHBlZyRjNDUgPSBcIndoaWxlXCI7XG4gIGNvbnN0IHBlZyRjNDYgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwid2hpbGVcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzQ3ID0gZnVuY3Rpb24oY29uZDogYW55LCBib2R5OiBhbnkpOiBhbnkgeyByZXR1cm4ge2NvbnN0cnVjdF90eXBlOlwid2hpbGVfc3RhdGVtZW50XCIsIGNvbmRpdGlvbjpjb25kLCBib2R5OmJvZHl9OyB9O1xuICBjb25zdCBwZWckYzQ4ID0gXCJkb1wiO1xuICBjb25zdCBwZWckYzQ5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcImRvXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGM1MCA9IGZ1bmN0aW9uKGJvZHk6IGFueSwgY29uZDogYW55KTogYW55IHsgcmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTpcImRvd2hpbGVfc3RhdGVtZW50XCIsIGNvbmRpdGlvbjpjb25kLCBib2R5OmJvZHl9OyB9O1xuICBjb25zdCBwZWckYzUxID0gXCJmb3JcIjtcbiAgY29uc3QgcGVnJGM1MiA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJmb3JcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzUzID0gZnVuY3Rpb24oaW5pdDogYW55LCBjb25kOiBhbnksIHBvc3Q6IGFueSwgYm9keTogYW55KTogYW55IHsgcmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTpcImZvcl9zdGF0ZW1lbnRcIiwgY29uZGl0aW9uOmNvbmQsIGluaXRpYWw6aW5pdCwgcG9zdDpwb3N0LCBib2R5OmJvZHl9OyB9O1xuICBjb25zdCBwZWckYzU0ID0gZnVuY3Rpb24oZDogYW55KTogYW55IHsgcmV0dXJuIHRyYWNrKGQsIGxvY2F0aW9uKCksIHRleHQoKSk7IH07XG4gIGNvbnN0IHBlZyRjNTUgPSBcImJyZWFrXCI7XG4gIGNvbnN0IHBlZyRjNTYgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiYnJlYWtcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzU3ID0gZnVuY3Rpb24oKTogYW55IHsgcmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTpcImJyZWFrX3N0YXRlbWVudFwifTsgfTtcbiAgY29uc3QgcGVnJGM1OCA9IFwiY29udGludWVcIjtcbiAgY29uc3QgcGVnJGM1OSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJjb250aW51ZVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNjAgPSBmdW5jdGlvbigpOiBhbnkge3JldHVybiB7Y29uc3RydWN0X3R5cGU6XCJjb250aW51ZV9zdGF0ZW1lbnRcIn07IH07XG4gIGNvbnN0IHBlZyRjNjEgPSBcInJldHVyblwiO1xuICBjb25zdCBwZWckYzYyID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcInJldHVyblwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNjMgPSBmdW5jdGlvbihyZXQ6IGFueSk6IGFueSB7IHJldHVybiB7Y29uc3RydWN0X3R5cGU6XCJyZXR1cm5fc3RhdGVtZW50XCIsIGV4cHJlc3Npb246cmV0fTsgfTtcbiAgY29uc3QgcGVnJGM2NCA9IGZ1bmN0aW9uKGQ6IGFueSk6IGFueSB7cmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTpcImRlY2xhcmF0aW9uX3N0YXRlbWVudFwiLCBkZWNsYXJhdGlvbjogZH07IH07XG4gIGNvbnN0IHBlZyRjNjUgPSBmdW5jdGlvbihzcGVjczogYW55LCBkZWNsYXJhdG9yczogYW55KTogYW55IHsgcmV0dXJuIHRyYWNrKHtjb25zdHJ1Y3RfdHlwZTogXCJzaW1wbGVfZGVjbGFyYXRpb25cIiwgc3BlY3M6c3BlY3MsIGRlY2xhcmF0b3JzOmRlY2xhcmF0b3JzfSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGM2NiA9IFwiLFwiO1xuICBjb25zdCBwZWckYzY3ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIixcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzY4ID0gZnVuY3Rpb24oZmlyc3Q6IGFueSwgZDogYW55KTogYW55IHtyZXR1cm4gZDt9O1xuICBjb25zdCBwZWckYzY5ID0gZnVuY3Rpb24oZmlyc3Q6IGFueSwgcmVzdDogYW55KTogYW55IHtyZXN0LnVuc2hpZnQoZmlyc3QpOyByZXR1cm4gcmVzdDsgfTtcbiAgY29uc3QgcGVnJGM3MCA9IGZ1bmN0aW9uKHNwZWM6IGFueSk6IGFueSB7XHJcbiAgICAgIHJldHVybiB0cmFjayhhYnNvcmIoe2NvbnN0cnVjdF90eXBlOiBcImNsYXNzX2RlY2xhcmF0aW9uXCJ9LCBzcGVjKSwgbG9jYXRpb24oKSwgdGV4dCgpKTtcclxuICAgIH07XG4gIGNvbnN0IHBlZyRjNzEgPSBmdW5jdGlvbihzcGVjczogYW55LCBkZWNsYXJhdG9yOiBhbnksIGJvZHk6IGFueSk6IGFueSB7cmV0dXJuIHRyYWNrKHtjb25zdHJ1Y3RfdHlwZTogXCJmdW5jdGlvbl9kZWZpbml0aW9uXCIsIHNwZWNzOnNwZWNzLCBkZWNsYXJhdG9yOmRlY2xhcmF0b3IsIGJvZHk6Ym9keX0sIGxvY2F0aW9uKCksIHRleHQoKSk7IH07XG4gIGNvbnN0IHBlZyRjNzIgPSBmdW5jdGlvbihuYW1lOiBhbnksIGFyZ3M6IGFueSwgaW5pdDogYW55KTogYW55IHtyZXR1cm4gbnVsbDt9O1xuICBjb25zdCBwZWckYzczID0gZnVuY3Rpb24obmFtZTogYW55LCBhcmdzOiBhbnksIGluaXQ6IGFueSwgYm9keTogYW55KTogYW55IHtyZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcImNvbnN0cnVjdG9yX2RlZmluaXRpb25cIiwgbmFtZTpuYW1lLCBib2R5OmJvZHksIGluaXRpYWxpemVyOmluaXQsIGFyZ3M6IGFyZ3N9LCBsb2NhdGlvbigpLCB0ZXh0KCkpOyB9O1xuICBjb25zdCBwZWckYzc0ID0gXCJ+XCI7XG4gIGNvbnN0IHBlZyRjNzUgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiflwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNzYgPSBmdW5jdGlvbihuYW1lOiBhbnkpOiBhbnkge3JldHVybiBudWxsO307XG4gIGNvbnN0IHBlZyRjNzcgPSBmdW5jdGlvbihuYW1lOiBhbnksIGJvZHk6IGFueSk6IGFueSB7cmV0dXJuIHRyYWNrKHtjb25zdHJ1Y3RfdHlwZTogXCJkZXN0cnVjdG9yX2RlZmluaXRpb25cIiwgbmFtZTp7aWRlbnRpZmllcjogXCJ+XCIrbmFtZS5pZGVudGlmaWVyfSwgYm9keTpib2R5fSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGM3OCA9IFwidmlydHVhbFwiO1xuICBjb25zdCBwZWckYzc5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcInZpcnR1YWxcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzgwID0gZnVuY3Rpb24obmFtZTogYW55LCBib2R5OiBhbnkpOiBhbnkge3JldHVybiB0cmFjayh7Y29uc3RydWN0X3R5cGU6IFwiZGVzdHJ1Y3Rvcl9kZWZpbml0aW9uXCIsIG5hbWU6e2lkZW50aWZpZXI6IFwiflwiK25hbWUuaWRlbnRpZmllcn0sIGJvZHk6Ym9keSwgdmlydHVhbDp0cnVlfSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGM4MSA9IGZ1bmN0aW9uKGZpcnN0OiBhbnksIG06IGFueSk6IGFueSB7cmV0dXJuIG07fTtcbiAgY29uc3QgcGVnJGM4MiA9IGZ1bmN0aW9uKGZpcnN0OiBhbnksIHJlc3Q6IGFueSk6IGFueSB7cmVzdC51bnNoaWZ0KGZpcnN0KTsgcmV0dXJuIHJlc3Q7fTtcbiAgY29uc3QgcGVnJGM4MyA9IGZ1bmN0aW9uKGk6IGFueSwgYXJnczogYW55KTogYW55IHtyZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcIm1lbWJlcl9pbml0aWFsaXplclwiLCBtZW1iZXI6IGksIGFyZ3M6YXJncyB8fCBbXX0sIGxvY2F0aW9uKCksIHRleHQoKSk7IH07XG4gIGNvbnN0IHBlZyRjODQgPSBmdW5jdGlvbihzOiBhbnkpOiBhbnkge3JldHVybiBzfTtcbiAgY29uc3QgcGVnJGM4NSA9IGZ1bmN0aW9uKGJlZm9yZTogYW55LCB0OiBhbnksIHM6IGFueSk6IGFueSB7cmV0dXJuIHN9O1xuICBjb25zdCBwZWckYzg2ID0gZnVuY3Rpb24oYmVmb3JlOiBhbnksIHQ6IGFueSwgYWZ0ZXI6IGFueSk6IGFueSB7XHJcbiAgICAgICAgYmVmb3JlLnB1c2goe3R5cGVTcGVjOnR9KTtcclxuICAgICAgICB2YXIgcmVzdCA9IGJlZm9yZS5jb25jYXQoYWZ0ZXIpO1xyXG5cclxuICAgICAgICB2YXIgZGVjbFNwZWNzIDogYW55ID0ge1xyXG4gICAgICAgICAgdHlwZVNwZWNzOiBbXSxcclxuICAgICAgICAgIHN0b3JhZ2VTcGVjczogW11cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgcmVzdC5sZW5ndGg7ICsraSl7XHJcbiAgICAgICAgICBsZXQgc3BlYyA9IHJlc3RbaV07XHJcbiAgICAgICAgICBpZiAoc3BlYy50eXBlU3BlYyl7XHJcbiAgICAgICAgICAgIGRlY2xTcGVjcy50eXBlU3BlY3MucHVzaChzcGVjLnR5cGVTcGVjKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYgKHNwZWMuc3RvcmFnZVNwZWMpe1xyXG4gICAgICAgICAgICBkZWNsU3BlY3Muc3RvcmFnZVNwZWNzLnB1c2goc3BlYy5zdG9yYWdlU3BlYyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmIChzcGVjID09PSBcImZyaWVuZFwiKXtcclxuICAgICAgICAgICAgZGVjbFNwZWNzLmZyaWVuZCA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmIChzcGVjID09PSBcInR5cGVkZWZcIil7XHJcbiAgICAgICAgICAgIGRlY2xTcGVjcy50eXBlZGVmID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYgKHNwZWMgPT09IFwiaW5saW5lXCIpe1xyXG4gICAgICAgICAgICBkZWNsU3BlY3MuaW5saW5lID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYgKHNwZWMgPT09IFwiZXhwbGljaXRcIil7XHJcbiAgICAgICAgICAgIGRlY2xTcGVjcy5leHBsaWNpdCA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmIChzcGVjID09PSBcInZpcnR1YWxcIil7XHJcbiAgICAgICAgICAgIGRlY2xTcGVjcy52aXJ0dWFsID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cmFjayhkZWNsU3BlY3MsIGxvY2F0aW9uKCksIHRleHQoKSk7IH07XG4gIGNvbnN0IHBlZyRjODcgPSBmdW5jdGlvbih0OiBhbnkpOiBhbnkgeyByZXR1cm4ge3R5cGVTcGVjOnR9OyB9O1xuICBjb25zdCBwZWckYzg4ID0gZnVuY3Rpb24oczogYW55KTogYW55IHsgcmV0dXJuIHtzdG9yYWdlU3BlYzpzfTsgfTtcbiAgY29uc3QgcGVnJGM4OSA9IFwidHlwZWRlZlwiO1xuICBjb25zdCBwZWckYzkwID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcInR5cGVkZWZcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzkxID0gXCJmcmllbmRcIjtcbiAgY29uc3QgcGVnJGM5MiA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJmcmllbmRcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzkzID0gZnVuY3Rpb24oYmVmb3JlOiBhbnksIHQ6IGFueSwgYWZ0ZXI6IGFueSk6IGFueSB7IGJlZm9yZS5wdXNoKHQpO1xyXG4gICAgICAgIGJlZm9yZSA9IGJlZm9yZS5jb25jYXQoYWZ0ZXIpO1xyXG4gICAgICAgIHJldHVybiB0cmFjayhiZWZvcmUsIGxvY2F0aW9uKCksIHRleHQoKSk7IH07XG4gIGNvbnN0IHBlZyRjOTQgPSBcImNvbnN0XCI7XG4gIGNvbnN0IHBlZyRjOTUgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiY29uc3RcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzk2ID0gXCJ2b2xhdGlsZVwiO1xuICBjb25zdCBwZWckYzk3ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcInZvbGF0aWxlXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGM5OCA9IFwicmVnaXN0ZXJcIjtcbiAgY29uc3QgcGVnJGM5OSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJyZWdpc3RlclwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTAwID0gXCJzdGF0aWNcIjtcbiAgY29uc3QgcGVnJGMxMDEgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwic3RhdGljXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxMDIgPSBcInRocmVhZF9sb2NhbFwiO1xuICBjb25zdCBwZWckYzEwMyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJ0aHJlYWRfbG9jYWxcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzEwNCA9IFwiZXh0ZXJuXCI7XG4gIGNvbnN0IHBlZyRjMTA1ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcImV4dGVyblwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTA2ID0gXCJtdXRhYmxlXCI7XG4gIGNvbnN0IHBlZyRjMTA3ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIm11dGFibGVcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzEwOCA9IFwiaW5saW5lXCI7XG4gIGNvbnN0IHBlZyRjMTA5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcImlubGluZVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTEwID0gXCJleHBsaWNpdFwiO1xuICBjb25zdCBwZWckYzExMSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJleHBsaWNpdFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTEyID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJzaW1wbGUgdHlwZSBuYW1lXCIpO1xuICBjb25zdCBwZWckYzExMyA9IGZ1bmN0aW9uKHQ6IGFueSk6IGFueSB7cmV0dXJuIHQ7fTtcbiAgY29uc3QgcGVnJGMxMTQgPSBcImNoYXJcIjtcbiAgY29uc3QgcGVnJGMxMTUgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiY2hhclwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTE2ID0gXCJzaG9ydFwiO1xuICBjb25zdCBwZWckYzExNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJzaG9ydFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTE4ID0gXCJpbnRcIjtcbiAgY29uc3QgcGVnJGMxMTkgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiaW50XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxMjAgPSBcImJvb2xcIjtcbiAgY29uc3QgcGVnJGMxMjEgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiYm9vbFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTIyID0gXCJsb25nXCI7XG4gIGNvbnN0IHBlZyRjMTIzID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcImxvbmdcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzEyNCA9IFwic2lnbmVkXCI7XG4gIGNvbnN0IHBlZyRjMTI1ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcInNpZ25lZFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTI2ID0gXCJ1bnNpZ25lZFwiO1xuICBjb25zdCBwZWckYzEyNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJ1bnNpZ25lZFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTI4ID0gXCJmbG9hdFwiO1xuICBjb25zdCBwZWckYzEyOSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJmbG9hdFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTMwID0gXCJkb3VibGVcIjtcbiAgY29uc3QgcGVnJGMxMzEgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiZG91YmxlXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxMzIgPSBcInZvaWRcIjtcbiAgY29uc3QgcGVnJGMxMzMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwidm9pZFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTM0ID0gZnVuY3Rpb24oaWQ6IGFueSk6IGFueSB7cmV0dXJuIGlzVXNlclR5cGVOYW1lKGlkLmlkZW50aWZpZXIpO307XG4gIGNvbnN0IHBlZyRjMTM1ID0gZnVuY3Rpb24oaWQ6IGFueSk6IGFueSB7cmV0dXJuIGlkLmlkZW50aWZpZXI7fTtcbiAgY29uc3QgcGVnJGMxMzYgPSBcImVudW1cIjtcbiAgY29uc3QgcGVnJGMxMzcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiZW51bVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTM4ID0gZnVuY3Rpb24obmFtZTogYW55LCBmaXJzdDogYW55LCBlOiBhbnkpOiBhbnkge3JldHVybiBlO307XG4gIGNvbnN0IHBlZyRjMTM5ID0gZnVuY3Rpb24obmFtZTogYW55LCBmaXJzdDogYW55LCByZXN0OiBhbnkpOiBhbnkgeyByZXR1cm4gXCJlbnVtXCI7IH07XG4gIGNvbnN0IHBlZyRjMTQwID0gXCI9XCI7XG4gIGNvbnN0IHBlZyRjMTQxID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIj1cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzE0MiA9IGZ1bmN0aW9uKG5hbWU6IGFueSwgZTogYW55KTogYW55IHtyZXR1cm4gZTt9O1xuICBjb25zdCBwZWckYzE0MyA9IGZ1bmN0aW9uKG5hbWU6IGFueSwgdmFsdWU6IGFueSk6IGFueSB7cmV0dXJuIHtuYW1lOm5hbWUsIHZhbHVlOnZhbHVlfTsgfTtcbiAgY29uc3QgcGVnJGMxNDQgPSBcIkBsaWJyYXJ5X3Vuc3VwcG9ydGVkQFwiO1xuICBjb25zdCBwZWckYzE0NSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJAbGlicmFyeV91bnN1cHBvcnRlZEBcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzE0NiA9IGZ1bmN0aW9uKGQ6IGFueSk6IGFueSB7cmV0dXJuIHRyYWNrKGFic29yYihkLCB7bGlicmFyeV91bnN1cHBvcnRlZDogdHJ1ZX0pLCBsb2NhdGlvbigpLCB0ZXh0KCkpO307XG4gIGNvbnN0IHBlZyRjMTQ3ID0gZnVuY3Rpb24oZDogYW55LCBpOiBhbnkpOiBhbnkge3JldHVybiB0cmFjayhhYnNvcmIoZCwge2luaXRpYWxpemVyOiBpfSksIGxvY2F0aW9uKCksIHRleHQoKSk7fTtcbiAgY29uc3QgcGVnJGMxNDggPSBmdW5jdGlvbihhcmdzOiBhbnkpOiBhbnkge1xyXG4gICAgICByZXR1cm4ge2NvbnN0cnVjdF90eXBlOlwiZGlyZWN0X2luaXRpYWxpemVyXCIsIGFyZ3M6YXJnc307XHJcbiAgICB9O1xuICBjb25zdCBwZWckYzE0OSA9IGZ1bmN0aW9uKGluaXQ6IGFueSk6IGFueSB7cmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTpcImNvcHlfaW5pdGlhbGl6ZXJcIiwgYXJnczpbaW5pdF19O307XG4gIGNvbnN0IHBlZyRjMTUwID0gZnVuY3Rpb24oaW5pdDogYW55KTogYW55IHtyZXR1cm4gaW5pdDt9O1xuICBjb25zdCBwZWckYzE1MSA9IGZ1bmN0aW9uKGZpcnN0OiBhbnksIG9wOiBhbnksIGU6IGFueSk6IGFueSB7cmV0dXJuIGU7fTtcbiAgY29uc3QgcGVnJGMxNTIgPSBmdW5jdGlvbihmaXJzdDogYW55LCByZXN0OiBhbnkpOiBhbnkge1xyXG4gICAgICAgIHJlc3QudW5zaGlmdChmaXJzdCk7XHJcbiAgICAgICAgcmV0dXJuIHRyYWNrKHtjb25zdHJ1Y3RfdHlwZTpcImluaXRpYWxpemVyX2xpc3RcIiwgYXJnczogcmVzdH0sIGxvY2F0aW9uKCksIHRleHQoKSk7XHJcbiAgICAgIH07XG4gIGNvbnN0IHBlZyRjMTUzID0gZnVuY3Rpb24oZDogYW55KTogYW55IHtcclxuICAgICAgdmFyIGQyID0gdHJhY2soYWJzb3JiKHtjb25zdHJ1Y3RfdHlwZTpcImRlY2xhcmF0b3JcIn0sIGQpLCBsb2NhdGlvbigpLCB0ZXh0KCkpO1xyXG4gICAgIHJldHVybiBkMjtcclxuICAgIH07XG4gIGNvbnN0IHBlZyRjMTU0ID0gZnVuY3Rpb24oZDogYW55KTogYW55IHtcclxuICAgICAgdmFyIGQyID0gdHJhY2soYWJzb3JiKHtjb25zdHJ1Y3RfdHlwZTpcImRlY2xhcmF0b3JcIiwgYWJzdHJhY3Q6IHRydWV9LCBkKSwgbG9jYXRpb24oKSwgdGV4dCgpKTtcclxuICAgICAgcmV0dXJuIGQyO1xyXG4gICAgfTtcbiAgY29uc3QgcGVnJGMxNTUgPSBcIipcIjtcbiAgY29uc3QgcGVnJGMxNTYgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiKlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTU3ID0gZnVuY3Rpb24oY3Y6IGFueSwgZGVjbDogYW55KTogYW55IHsgcmV0dXJuIGFic29yYih7cG9pbnRlcjpkZWNsfSwgY3YpOyB9O1xuICBjb25zdCBwZWckYzE1OCA9IFwiJlwiO1xuICBjb25zdCBwZWckYzE1OSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCImXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxNjAgPSBmdW5jdGlvbihjdjogYW55LCBkZWNsOiBhbnkpOiBhbnkgeyByZXR1cm4gYWJzb3JiKHtyZWZlcmVuY2U6ZGVjbH0sIGN2KTsgfTtcbiAgY29uc3QgcGVnJGMxNjEgPSBmdW5jdGlvbihkZWNsOiBhbnksIHBvc3RmaXhlczogYW55KTogYW55IHsgcmV0dXJuIGFic29yYihkZWNsLCB7cG9zdGZpeGVzOiBwb3N0Zml4ZXN9KTsgfTtcbiAgY29uc3QgcGVnJGMxNjIgPSBmdW5jdGlvbihwOiBhbnkpOiBhbnkge3JldHVybiBwfTtcbiAgY29uc3QgcGVnJGMxNjMgPSBmdW5jdGlvbihhcmdzOiBhbnksIGN2OiBhbnkpOiBhbnkgeyByZXR1cm4gYWJzb3JiKHtraW5kOlwiZnVuY3Rpb25cIiwgYXJnczphcmdzfSwgY3YpOyB9O1xuICBjb25zdCBwZWckYzE2NCA9IFwiW1wiO1xuICBjb25zdCBwZWckYzE2NSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJbXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxNjYgPSBcIl1cIjtcbiAgY29uc3QgcGVnJGMxNjcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiXVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMTY4ID0gZnVuY3Rpb24oc2l6ZTogYW55KTogYW55IHsgcmV0dXJuIHtraW5kOlwiYXJyYXlcIiwgc2l6ZTpzaXplfTsgfTtcbiAgY29uc3QgcGVnJGMxNjkgPSBmdW5jdGlvbihkOiBhbnkpOiBhbnkge3JldHVybiB7bmFtZTpkfTsgfTtcbiAgY29uc3QgcGVnJGMxNzAgPSBmdW5jdGlvbihkOiBhbnkpOiBhbnkge3JldHVybiB7c3ViOmR9O307XG4gIGNvbnN0IHBlZyRjMTcxID0gXCJcIjtcbiAgY29uc3QgcGVnJGMxNzIgPSBmdW5jdGlvbigpOiBhbnkge3JldHVybiB7fTt9O1xuICBjb25zdCBwZWckYzE3MyA9IGZ1bmN0aW9uKHNwZWNzOiBhbnksIGRlY2w6IGFueSk6IGFueSB7IHJldHVybiB0cmFjayh7c3BlY3M6c3BlY3MsIGRlY2xhcmF0b3I6ZGVjbH0sIGxvY2F0aW9uKCksIHRleHQoKSk7IH07XG4gIGNvbnN0IHBlZyRjMTc0ID0gZnVuY3Rpb24oKTogYW55IHsgcmV0dXJuIHtjb25zdDogdHJ1ZSwgdm9sYXRpbGU6IHRydWV9OyB9O1xuICBjb25zdCBwZWckYzE3NSA9IGZ1bmN0aW9uKCk6IGFueSB7IHJldHVybiB7Y29uc3Q6IHRydWV9OyB9O1xuICBjb25zdCBwZWckYzE3NiA9IGZ1bmN0aW9uKCk6IGFueSB7IHJldHVybiB7dm9sYXRpbGU6IHRydWV9OyB9O1xuICBjb25zdCBwZWckYzE3NyA9IGZ1bmN0aW9uKGZpcnN0OiBhbnksIGFyZzogYW55KTogYW55IHtyZXR1cm4gYXJnO307XG4gIGNvbnN0IHBlZyRjMTc4ID0gZnVuY3Rpb24oZmlyc3Q6IGFueSwgcmVzdDogYW55KTogYW55IHsgcmVzdC51bnNoaWZ0KGZpcnN0KTsgcmV0dXJuIHJlc3Q7IH07XG4gIGNvbnN0IHBlZyRjMTc5ID0gZnVuY3Rpb24oKTogYW55IHtyZXR1cm4gW107fTtcbiAgY29uc3QgcGVnJGMxODAgPSBmdW5jdGlvbihzcGVjczogYW55LCBkZWNsOiBhbnksIGluaXQ6IGFueSk6IGFueSB7cmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTpcInBhcmFtZXRlcl9kZWNsYXJhdGlvblwiLCBkZWNsYXJhdG9yOmRlY2wsIHNwZWNzOnNwZWNzLCBpbml0aWFsaXplcjppbml0fTsgfTtcbiAgY29uc3QgcGVnJGMxODEgPSBmdW5jdGlvbihzcGVjczogYW55LCBkZWNsOiBhbnkpOiBhbnkge3JldHVybiB0cmFjayh7Y29uc3RydWN0X3R5cGU6XCJwYXJhbWV0ZXJfZGVjbGFyYXRpb25cIiwgc3BlY3M6c3BlY3MsIGRlY2xhcmF0b3I6ZGVjbH0sIGxvY2F0aW9uKCksIHRleHQoKSk7IH07XG4gIGNvbnN0IHBlZyRjMTgyID0gZnVuY3Rpb24oZmlyc3Q6IGFueSwgb3A6IGFueSwgZTogYW55KTogYW55IHtyZXR1cm4gW29wLGVdO307XG4gIGNvbnN0IHBlZyRjMTgzID0gZnVuY3Rpb24oZmlyc3Q6IGFueSwgcmVzdDogYW55KTogYW55IHsgcmV0dXJuIHRyYWNrKGNvbXBvc2VCaW5hcnlPcChmaXJzdCwgcmVzdCwgXCJsZWZ0XCIsIFwiY29tbWFfZXhwcmVzc2lvblwiKSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGMxODQgPSBmdW5jdGlvbihsaHM6IGFueSwgb3A6IGFueSwgcmhzOiBhbnkpOiBhbnkgeyByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcImFzc2lnbm1lbnRfZXhwcmVzc2lvblwiLCBsaHM6bGhzLCBvcGVyYXRvcjpvcCwgcmhzOnJoc30sIGxvY2F0aW9uKCksIHRleHQoKSk7IH07XG4gIGNvbnN0IHBlZyRjMTg1ID0gZnVuY3Rpb24obGhzOiBhbnksIG9wOiBhbnksIHJoczogYW55KTogYW55IHsgcmV0dXJuIHRyYWNrKHtjb25zdHJ1Y3RfdHlwZTogXCJjb21wb3VuZF9hc3NpZ25tZW50XCIsIGxoczpsaHMsIG9wZXJhdG9yOm9wLCByaHM6cmhzfSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGMxODYgPSBcIio9XCI7XG4gIGNvbnN0IHBlZyRjMTg3ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIio9XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxODggPSBcIi89XCI7XG4gIGNvbnN0IHBlZyRjMTg5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIi89XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxOTAgPSBcIiU9XCI7XG4gIGNvbnN0IHBlZyRjMTkxID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIiU9XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxOTIgPSBcIis9XCI7XG4gIGNvbnN0IHBlZyRjMTkzID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIis9XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxOTQgPSBcIi09XCI7XG4gIGNvbnN0IHBlZyRjMTk1ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIi09XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxOTYgPSBcIj4+PVwiO1xuICBjb25zdCBwZWckYzE5NyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCI+Pj1cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzE5OCA9IFwiPDw9XCI7XG4gIGNvbnN0IHBlZyRjMTk5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIjw8PVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjAwID0gXCImPVwiO1xuICBjb25zdCBwZWckYzIwMSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCImPVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjAyID0gXCJhbmRfZXFcIjtcbiAgY29uc3QgcGVnJGMyMDMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiYW5kX2VxXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyMDQgPSBmdW5jdGlvbigpOiBhbnkge3JldHVybiBcIiY9XCI7fTtcbiAgY29uc3QgcGVnJGMyMDUgPSBcIl49XCI7XG4gIGNvbnN0IHBlZyRjMjA2ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIl49XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyMDcgPSBcInhvcl9lcVwiO1xuICBjb25zdCBwZWckYzIwOCA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJ4b3JfZXFcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzIwOSA9IGZ1bmN0aW9uKCk6IGFueSB7cmV0dXJuIFwiXj1cIjt9O1xuICBjb25zdCBwZWckYzIxMCA9IFwifD1cIjtcbiAgY29uc3QgcGVnJGMyMTEgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwifD1cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzIxMiA9IFwib3JfZXFcIjtcbiAgY29uc3QgcGVnJGMyMTMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwib3JfZXFcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzIxNCA9IGZ1bmN0aW9uKCk6IGFueSB7cmV0dXJuIFwifD1cIjt9O1xuICBjb25zdCBwZWckYzIxNSA9IGZ1bmN0aW9uKHN1YjogYW55KTogYW55IHsgc3ViLmNvbnN0YW50ID0gdHJ1ZTsgcmV0dXJuIHN1YjsgfTtcbiAgY29uc3QgcGVnJGMyMTYgPSBcIj9cIjtcbiAgY29uc3QgcGVnJGMyMTcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiP1wiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjE4ID0gZnVuY3Rpb24oY29uZGl0aW9uOiBhbnksIHRoZW46IGFueSwgb3RoZXJ3aXNlOiBhbnkpOiBhbnkgeyByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcInRlcm5hcnlfZXhwcmVzc2lvblwiLCBjb25kaXRpb246Y29uZGl0aW9uLCB0aGVuOnRoZW4sIG90aGVyd2lzZTpvdGhlcndpc2V9LCBsb2NhdGlvbigpLCB0ZXh0KCkpOyB9O1xuICBjb25zdCBwZWckYzIxOSA9IFwifHxcIjtcbiAgY29uc3QgcGVnJGMyMjAgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwifHxcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzIyMSA9IFwib3JcIjtcbiAgY29uc3QgcGVnJGMyMjIgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwib3JcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzIyMyA9IGZ1bmN0aW9uKGZpcnN0OiBhbnksIG9wOiBhbnksIGU6IGFueSk6IGFueSB7cmV0dXJuIFtcInx8XCIsZV07fTtcbiAgY29uc3QgcGVnJGMyMjQgPSBmdW5jdGlvbihmaXJzdDogYW55LCByZXN0OiBhbnkpOiBhbnkgeyByZXR1cm4gdHJhY2soY29tcG9zZUJpbmFyeU9wKGZpcnN0LCByZXN0LCBcImxlZnRcIiwgXCJsb2dpY2FsX2JpbmFyeV9vcGVyYXRvcl9leHByZXNzaW9uXCIpLCBsb2NhdGlvbigpLCB0ZXh0KCkpOyB9O1xuICBjb25zdCBwZWckYzIyNSA9IFwiJiZcIjtcbiAgY29uc3QgcGVnJGMyMjYgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiJiZcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzIyNyA9IFwiYW5kXCI7XG4gIGNvbnN0IHBlZyRjMjI4ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcImFuZFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjI5ID0gZnVuY3Rpb24oZmlyc3Q6IGFueSwgb3A6IGFueSwgZTogYW55KTogYW55IHtyZXR1cm4gW1wiJiZcIixlXTt9O1xuICBjb25zdCBwZWckYzIzMCA9IFwifFwiO1xuICBjb25zdCBwZWckYzIzMSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJ8XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyMzIgPSBcImJpdG9yXCI7XG4gIGNvbnN0IHBlZyRjMjMzID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcImJpdG9yXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyMzQgPSBmdW5jdGlvbihmaXJzdDogYW55LCBvcDogYW55LCBlOiBhbnkpOiBhbnkge3JldHVybiBbXCJ8XCIsZV07fTtcbiAgY29uc3QgcGVnJGMyMzUgPSBmdW5jdGlvbihmaXJzdDogYW55LCByZXN0OiBhbnkpOiBhbnkgeyByZXR1cm4gdHJhY2soY29tcG9zZUJpbmFyeU9wKGZpcnN0LCByZXN0LCBcImxlZnRcIiwgXCJhcml0aG1ldGljX2JpbmFyeV9vcGVyYXRvcl9leHByZXNzaW9uXCIpLCBsb2NhdGlvbigpLCB0ZXh0KCkpOyB9O1xuICBjb25zdCBwZWckYzIzNiA9IFwiXlwiO1xuICBjb25zdCBwZWckYzIzNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJeXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyMzggPSBcInhvclwiO1xuICBjb25zdCBwZWckYzIzOSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJ4b3JcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzI0MCA9IGZ1bmN0aW9uKGZpcnN0OiBhbnksIG9wOiBhbnksIGU6IGFueSk6IGFueSB7cmV0dXJuIFtcIl5cIixlXTt9O1xuICBjb25zdCBwZWckYzI0MSA9IFwiYml0YW5kXCI7XG4gIGNvbnN0IHBlZyRjMjQyID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcImJpdGFuZFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjQzID0gZnVuY3Rpb24oZmlyc3Q6IGFueSwgb3A6IGFueSwgZTogYW55KTogYW55IHtyZXR1cm4gW1wiJlwiLGVdO307XG4gIGNvbnN0IHBlZyRjMjQ0ID0gXCI9PVwiO1xuICBjb25zdCBwZWckYzI0NSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCI9PVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjQ2ID0gXCIhPVwiO1xuICBjb25zdCBwZWckYzI0NyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIhPVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjQ4ID0gXCJub3RfZXFcIjtcbiAgY29uc3QgcGVnJGMyNDkgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwibm90X2VxXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyNTAgPSBmdW5jdGlvbihmaXJzdDogYW55KTogYW55IHtyZXR1cm4gXCIhPVwiO307XG4gIGNvbnN0IHBlZyRjMjUxID0gZnVuY3Rpb24oZmlyc3Q6IGFueSwgcmVzdDogYW55KTogYW55IHsgcmV0dXJuIHRyYWNrKGNvbXBvc2VCaW5hcnlPcChmaXJzdCwgcmVzdCwgXCJsZWZ0XCIsIFwicmVsYXRpb25hbF9iaW5hcnlfb3BlcmF0b3JfZXhwcmVzc2lvblwiKSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGMyNTIgPSBcIjw9XCI7XG4gIGNvbnN0IHBlZyRjMjUzID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIjw9XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyNTQgPSBcIj49XCI7XG4gIGNvbnN0IHBlZyRjMjU1ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIj49XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyNTYgPSBcIjxcIjtcbiAgY29uc3QgcGVnJGMyNTcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiPFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjU4ID0gXCI+XCI7XG4gIGNvbnN0IHBlZyRjMjU5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIj5cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzI2MCA9IFwiPDxcIjtcbiAgY29uc3QgcGVnJGMyNjEgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiPDxcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzI2MiA9IFwiPj5cIjtcbiAgY29uc3QgcGVnJGMyNjMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiPj5cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzI2NCA9IFwiK1wiO1xuICBjb25zdCBwZWckYzI2NSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIrXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyNjYgPSBcIi1cIjtcbiAgY29uc3QgcGVnJGMyNjcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiLVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjY4ID0gXCIvXCI7XG4gIGNvbnN0IHBlZyRjMjY5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIi9cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzI3MCA9IFwiJVwiO1xuICBjb25zdCBwZWckYzI3MSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIlXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyNzIgPSBmdW5jdGlvbihmaXJzdDogYW55LCByZXN0OiBhbnkpOiBhbnkgeyByZXR1cm4gdHJhY2soY29tcG9zZUJpbmFyeU9wKGZpcnN0LCByZXN0LCBcImxlZnRcIiwgXCJwb2ludGVyX3RvX21lbWJlcl9leHByZXNzaW9uXCIpLCBsb2NhdGlvbigpLCB0ZXh0KCkpOyB9O1xuICBjb25zdCBwZWckYzI3MyA9IFwiLipcIjtcbiAgY29uc3QgcGVnJGMyNzQgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiLipcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzI3NSA9IFwiLT4qXCI7XG4gIGNvbnN0IHBlZyRjMjc2ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIi0+KlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjc3ID0gZnVuY3Rpb24odDogYW55LCBzdWI6IGFueSk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRyYWNrKHtjb25zdHJ1Y3RfdHlwZTogXCJjX3N0eWxlX2Nhc3RfZXhwcmVzc2lvblwiLCB0eXBlOnQsIG9wZXJhbmQ6c3VifSwgbG9jYXRpb24oKSwgdGV4dCgpKTtcclxuICB9O1xuICBjb25zdCBwZWckYzI3OCA9IFwiKytcIjtcbiAgY29uc3QgcGVnJGMyNzkgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiKytcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzI4MCA9IGZ1bmN0aW9uKG9wOiBhbnksIHN1YjogYW55KTogYW55IHtcclxuICAgICAgICByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcInByZWZpeF9pbmNyZW1lbnRfZXhwcmVzc2lvblwiLCBvcGVyYXRvcjpvcCwgb3BlcmFuZDpzdWJ9LCBsb2NhdGlvbigpLCB0ZXh0KCkpO1xyXG4gIH07XG4gIGNvbnN0IHBlZyRjMjgxID0gXCItLVwiO1xuICBjb25zdCBwZWckYzI4MiA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCItLVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMjgzID0gZnVuY3Rpb24ob3A6IGFueSwgc3ViOiBhbnkpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0cmFjayh7Y29uc3RydWN0X3R5cGU6IFwicHJlZml4X2RlY3JlbWVudF9leHByZXNzaW9uXCIsIG9wZXJhdG9yOm9wLCBvcGVyYW5kOnN1Yn0sIGxvY2F0aW9uKCksIHRleHQoKSk7XHJcbiAgfTtcbiAgY29uc3QgcGVnJGMyODQgPSBmdW5jdGlvbihvcDogYW55LCBzdWI6IGFueSk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRyYWNrKGFic29yYih7b3BlcmFuZDpzdWJ9LCBvcCksIGxvY2F0aW9uKCksIHRleHQoKSk7XHJcbiAgfTtcbiAgY29uc3QgcGVnJGMyODUgPSBcInNpemVvZlwiO1xuICBjb25zdCBwZWckYzI4NiA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJzaXplb2ZcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzI4NyA9IGZ1bmN0aW9uKG9wOiBhbnksIHN1YjogYW55KTogYW55IHtcclxuICAgICAgICByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcInNpemVvZl9leHByZXNzaW9uXCIsIG9wZXJhdG9yOlwic2l6ZW9mXCIsIG9wZXJhbmQ6c3VifSwgbG9jYXRpb24oKSwgdGV4dCgpKTtcclxuICB9O1xuICBjb25zdCBwZWckYzI4OCA9IGZ1bmN0aW9uKG9wOiBhbnksIHN1YjogYW55KTogYW55IHtcclxuICAgICAgICByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcInNpemVvZl90eXBlX2V4cHJlc3Npb25cIiwgb3BlcmF0b3I6XCJzaXplb2ZcIiwgb3BlcmFuZDpzdWJ9LCBsb2NhdGlvbigpLCB0ZXh0KCkpO1xyXG4gIH07XG4gIGNvbnN0IHBlZyRjMjg5ID0gZnVuY3Rpb24oKTogYW55IHtyZXR1cm4ge2NvbnN0cnVjdF90eXBlOiBcImRlcmVmZXJlbmNlX2V4cHJlc3Npb25cIiwgb3BlcmF0b3I6IFwiKlwifTt9O1xuICBjb25zdCBwZWckYzI5MCA9IGZ1bmN0aW9uKCk6IGFueSB7cmV0dXJuIHtjb25zdHJ1Y3RfdHlwZTogXCJhZGRyZXNzX29mX2V4cHJlc3Npb25cIiwgICBvcGVyYXRvcjogXCImXCJ9O307XG4gIGNvbnN0IHBlZyRjMjkxID0gZnVuY3Rpb24oKTogYW55IHtyZXR1cm4ge2NvbnN0cnVjdF90eXBlOiBcInVuYXJ5X3BsdXNfZXhwcmVzc2lvblwiLCBvcGVyYXRvcjogXCIrXCJ9O307XG4gIGNvbnN0IHBlZyRjMjkyID0gZnVuY3Rpb24oKTogYW55IHtyZXR1cm4ge2NvbnN0cnVjdF90eXBlOiBcInVuYXJ5X21pbnVzX2V4cHJlc3Npb25cIiwgb3BlcmF0b3I6IFwiLVwifTt9O1xuICBjb25zdCBwZWckYzI5MyA9IFwiIVwiO1xuICBjb25zdCBwZWckYzI5NCA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIhXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyOTUgPSBmdW5jdGlvbigpOiBhbnkge3JldHVybiB7Y29uc3RydWN0X3R5cGU6IFwibG9naWNhbF9ub3RfZXhwcmVzc2lvblwiLCBvcGVyYXRvcjogXCIhXCJ9O307XG4gIGNvbnN0IHBlZyRjMjk2ID0gXCJub3RcIjtcbiAgY29uc3QgcGVnJGMyOTcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwibm90XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyOTggPSBmdW5jdGlvbigpOiBhbnkge3JldHVybiB7Y29uc3RydWN0X3R5cGU6IFwiYml0d2lzZV9ub3RfZXhwcmVzc2lvblwiLCBvcGVyYXRvcjogXCJ+XCJ9O307XG4gIGNvbnN0IHBlZyRjMjk5ID0gXCJjb21wbFwiO1xuICBjb25zdCBwZWckYzMwMCA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJjb21wbFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMzAxID0gXCJuZXdcIjtcbiAgY29uc3QgcGVnJGMzMDIgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwibmV3XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMzMDMgPSBmdW5jdGlvbihpZDogYW55LCBpbml0OiBhbnkpOiBhbnkge1xyXG4gICAgICByZXR1cm4gdHJhY2soYWJzb3JiKHtjb25zdHJ1Y3RfdHlwZTogXCJuZXdfZXhwcmVzc2lvblwiLCBpbml0aWFsaXplcjogaW5pdH0sIGlkKSwgbG9jYXRpb24oKSwgdGV4dCgpKTtcclxuICAgIH07XG4gIGNvbnN0IHBlZyRjMzA0ID0gZnVuY3Rpb24oaWQ6IGFueSwgaW5pdDogYW55KTogYW55IHtcclxuICAgICAgcmV0dXJuIHRyYWNrKGFic29yYih7Y29uc3RydWN0X3R5cGU6IFwibmV3X2V4cHJlc3Npb25cIiwgaW5pdGlhbGl6ZXI6IGluaXR9LCBpZCksIGxvY2F0aW9uKCksIHRleHQoKSk7XHJcbiAgfTtcbiAgY29uc3QgcGVnJGMzMDUgPSBmdW5jdGlvbihzcGVjczogYW55LCBpZDogYW55KTogYW55IHtyZXR1cm4gaWQ7fTtcbiAgY29uc3QgcGVnJGMzMDYgPSBmdW5jdGlvbihzcGVjczogYW55LCBkZWNsOiBhbnkpOiBhbnkge1xyXG4gICAgICByZXR1cm4gdHJhY2soe3NwZWNzOnNwZWNzLCBkZWNsYXJhdG9yOmRlY2x9LCBsb2NhdGlvbigpLCB0ZXh0KCkpO1xyXG4gICAgfTtcbiAgY29uc3QgcGVnJGMzMDcgPSBmdW5jdGlvbihkOiBhbnkpOiBhbnkge1xyXG4gICAgdmFyIGQyID0gdHJhY2soYWJzb3JiKHtjb25zdHJ1Y3RfdHlwZTpcImRlY2xhcmF0b3JcIn0sIGQpLCBsb2NhdGlvbigpLCB0ZXh0KCkpO1xyXG4gICAgcmV0dXJuIGQyO1xyXG5cclxuICB9O1xuICBjb25zdCBwZWckYzMwOCA9IGZ1bmN0aW9uKHBvc3RmaXhlczogYW55KTogYW55IHsgcmV0dXJuIHtwb3N0Zml4ZXM6IHBvc3RmaXhlc307IH07XG4gIGNvbnN0IHBlZyRjMzA5ID0gZnVuY3Rpb24ocDogYW55KTogYW55IHtyZXR1cm4gcDt9O1xuICBjb25zdCBwZWckYzMxMCA9IGZ1bmN0aW9uKHNpemU6IGFueSk6IGFueSB7IHJldHVybiB7dHlwZTpcImFycmF5XCIsIHNpemU6c2l6ZX07IH07XG4gIGNvbnN0IHBlZyRjMzExID0gZnVuY3Rpb24oYXJnczogYW55KTogYW55IHtyZXR1cm4ge2FyZ3M6YXJncyB8fCBbXX07fTtcbiAgY29uc3QgcGVnJGMzMTIgPSBcImRlbGV0ZVwiO1xuICBjb25zdCBwZWckYzMxMyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJkZWxldGVcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzMxNCA9IGZ1bmN0aW9uKHQ6IGFueSk6IGFueSB7XHJcbiAgICAgIHJldHVybiB0cmFjayh7Y29uc3RydWN0X3R5cGU6IFwiZGVsZXRlX2V4cHJlc3Npb25cIiwgb3BlcmFuZDogdH0sIGxvY2F0aW9uKCksIHRleHQoKSk7XHJcbiAgICB9O1xuICBjb25zdCBwZWckYzMxNSA9IGZ1bmN0aW9uKHQ6IGFueSk6IGFueSB7XHJcbiAgICAgIHJldHVybiB0cmFjayh7Y29uc3RydWN0X3R5cGU6IFwiZGVsZXRlX2FycmF5X2V4cHJlc3Npb25cIiwgb3BlcmFuZDogdH0sIGxvY2F0aW9uKCksIHRleHQoKSk7IH07XG4gIGNvbnN0IHBlZyRjMzE2ID0gXCJzdGF0aWNfY2FzdFwiO1xuICBjb25zdCBwZWckYzMxNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJzdGF0aWNfY2FzdFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMzE4ID0gZnVuY3Rpb24odDogYW55LCBzdWI6IGFueSk6IGFueSB7IHJldHVybiB0cmFjayh7Y29uc3RydWN0X3R5cGU6IFwic3RhdGljX2Nhc3RfZXhwcmVzc2lvblwiLCB0eXBlOiB0LCBvcGVyYW5kOnN1Yn0sIGxvY2F0aW9uKCksIHRleHQoKSk7fTtcbiAgY29uc3QgcGVnJGMzMTkgPSBcImR5bmFtaWNfY2FzdFwiO1xuICBjb25zdCBwZWckYzMyMCA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJkeW5hbWljX2Nhc3RcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzMyMSA9IGZ1bmN0aW9uKHQ6IGFueSwgc3ViOiBhbnkpOiBhbnkgeyByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcImR5bmFtaWNfY2FzdF9leHByZXNzaW9uXCIsIHR5cGU6IHQsIG9wZXJhbmQ6c3VifSwgbG9jYXRpb24oKSwgdGV4dCgpKTt9O1xuICBjb25zdCBwZWckYzMyMiA9IFwicmVpbnRlcnByZXRfY2FzdFwiO1xuICBjb25zdCBwZWckYzMyMyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJyZWludGVycHJldF9jYXN0XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMzMjQgPSBmdW5jdGlvbih0OiBhbnksIHN1YjogYW55KTogYW55IHsgcmV0dXJuIHRyYWNrKHtjb25zdHJ1Y3RfdHlwZTogXCJyZWludGVycHJldF9jYXN0X2V4cHJlc3Npb25cIiwgdHlwZTogdCwgb3BlcmFuZDpzdWJ9LCBsb2NhdGlvbigpLCB0ZXh0KCkpO307XG4gIGNvbnN0IHBlZyRjMzI1ID0gXCJjb25zdF9jYXN0XCI7XG4gIGNvbnN0IHBlZyRjMzI2ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcImNvbnN0X2Nhc3RcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzMyNyA9IGZ1bmN0aW9uKHQ6IGFueSwgc3ViOiBhbnkpOiBhbnkgeyByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcImNvbnN0X2Nhc3RfZXhwcmVzc2lvblwiLCB0eXBlOiB0LCBvcGVyYW5kOnN1Yn0sIGxvY2F0aW9uKCksIHRleHQoKSk7fTtcbiAgY29uc3QgcGVnJGMzMjggPSBmdW5jdGlvbihzdWI6IGFueSwgb3A6IGFueSk6IGFueSB7cmV0dXJuIG9wO307XG4gIGNvbnN0IHBlZyRjMzI5ID0gZnVuY3Rpb24oc3ViOiBhbnksIG9wczogYW55KTogYW55IHsgcmV0dXJuIG9wcy5sZW5ndGggPiAwID8gdHJhY2socG9zdGZpeEV4cChvcHMsIHN1YiksIGxvY2F0aW9uKCksIHRleHQoKSkgOiBzdWI7fTtcbiAgY29uc3QgcGVnJGMzMzAgPSBmdW5jdGlvbihzdWI6IGFueSk6IGFueSB7IHJldHVybiB0cmFjayh7Y29uc3RydWN0X3R5cGU6XCJzdWJzY3JpcHRfZXhwcmVzc2lvblwiLCBhcmc6c3VifSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGMzMzEgPSBmdW5jdGlvbihhcmdzOiBhbnkpOiBhbnkgeyByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcImZ1bmN0aW9uX2NhbGxfZXhwcmVzc2lvblwiLCBhcmdzOiBhcmdzIHx8IFtdfSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGMzMzIgPSBcIi5cIjtcbiAgY29uc3QgcGVnJGMzMzMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiLlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMzM0ID0gZnVuY3Rpb24obmFtZTogYW55KTogYW55IHsgcmV0dXJuIHRyYWNrKHtjb25zdHJ1Y3RfdHlwZTogXCJkb3RfZXhwcmVzc2lvblwiLCBtZW1iZXI6IG5hbWV9LCBsb2NhdGlvbigpLCB0ZXh0KCkpOyB9O1xuICBjb25zdCBwZWckYzMzNSA9IFwiLT5cIjtcbiAgY29uc3QgcGVnJGMzMzYgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiLT5cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzMzNyA9IGZ1bmN0aW9uKG5hbWU6IGFueSk6IGFueSB7IHJldHVybiB0cmFjayh7Y29uc3RydWN0X3R5cGU6IFwiYXJyb3dfZXhwcmVzc2lvblwiLCBtZW1iZXI6IG5hbWV9LCBsb2NhdGlvbigpLCB0ZXh0KCkpOyB9O1xuICBjb25zdCBwZWckYzMzOCA9IGZ1bmN0aW9uKCk6IGFueSB7IHJldHVybiB0cmFjayh7Y29uc3RydWN0X3R5cGU6IFwicG9zdGZpeF9pbmNyZW1lbnRfZXhwcmVzc2lvblwifSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGMzMzkgPSBmdW5jdGlvbigpOiBhbnkgeyByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcInBvc3RmaXhfZGVjcmVtZW50X2V4cHJlc3Npb25cIn0sIGxvY2F0aW9uKCksIHRleHQoKSk7IH07XG4gIGNvbnN0IHBlZyRjMzQwID0gZnVuY3Rpb24odHlwZTogYW55LCBhcmdzOiBhbnkpOiBhbnkge1xyXG4gICAgICByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcImNvbnN0cnVjdF9leHByZXNzaW9uXCIsIHR5cGU6dHlwZSwgYXJnczphcmdzIHx8IFtdfSwgbG9jYXRpb24oKSwgdGV4dCgpKTtcclxuICB9O1xuICBjb25zdCBwZWckYzM0MSA9IGZ1bmN0aW9uKGZpcnN0OiBhbnksIGU6IGFueSk6IGFueSB7cmV0dXJuIGU7fTtcbiAgY29uc3QgcGVnJGMzNDIgPSBmdW5jdGlvbihzdWI6IGFueSk6IGFueSB7cmV0dXJuIHRyYWNrKHtjb25zdHJ1Y3RfdHlwZTogXCJwYXJlbnRoZXNlc19leHByZXNzaW9uXCIsIHN1YmV4cHJlc3Npb246c3VifSwgbG9jYXRpb24oKSwgdGV4dCgpKTt9O1xuICBjb25zdCBwZWckYzM0MyA9IFwidGhpc1wiO1xuICBjb25zdCBwZWckYzM0NCA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJ0aGlzXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMzNDUgPSBmdW5jdGlvbigpOiBhbnkge3JldHVybiB0cmFjayh7Y29uc3RydWN0X3R5cGU6IFwidGhpc19leHByZXNzaW9uXCJ9LCBsb2NhdGlvbigpLCB0ZXh0KCkpOyB9O1xuICBjb25zdCBwZWckYzM0NiA9IGZ1bmN0aW9uKGlkOiBhbnkpOiBhbnkgeyByZXR1cm4gdHJhY2soYWJzb3JiKHtjb25zdHJ1Y3RfdHlwZTogXCJpZGVudGlmaWVyX2V4cHJlc3Npb25cIn0sIGlkKSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGMzNDcgPSBmdW5jdGlvbihuOiBhbnksIHU6IGFueSk6IGFueSB7XHJcbiAgICAgIG4ucHVzaCh1KTtcclxuICAgICAgcmV0dXJuIHtpZGVudGlmaWVyOiBufTtcclxuICAgIH07XG4gIGNvbnN0IHBlZyRjMzQ4ID0gXCI6OlwiO1xuICBjb25zdCBwZWckYzM0OSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCI6OlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMzUwID0gZnVuY3Rpb24oaWQ6IGFueSk6IGFueSB7cmV0dXJuIGlkO307XG4gIGNvbnN0IHBlZyRjMzUxID0gZnVuY3Rpb24oKTogYW55IHsgcmV0dXJuIFtdO307XG4gIGNvbnN0IHBlZyRjMzUyID0gZnVuY3Rpb24oaWQ6IGFueSk6IGFueSB7cmV0dXJuIHRyYWNrKHtpZGVudGlmaWVyOiBpZH0sIGxvY2F0aW9uKCksIHRleHQoKSk7fTtcbiAgY29uc3QgcGVnJGMzNTMgPSBcIm9wZXJhdG9yXCI7XG4gIGNvbnN0IHBlZyRjMzU0ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIm9wZXJhdG9yXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMzNTUgPSBmdW5jdGlvbihvcDogYW55KTogYW55IHtyZXR1cm4gdHJhY2soe2lkZW50aWZpZXI6IFwib3BlcmF0b3JcIitvcCwgb3BlcmF0b3I6IG9wfSwgbG9jYXRpb24oKSwgdGV4dCgpKTt9O1xuICBjb25zdCBwZWckYzM1NiA9IFwibmV3W11cIjtcbiAgY29uc3QgcGVnJGMzNTcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwibmV3W11cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM1OCA9IFwiZGVsZXRlW11cIjtcbiAgY29uc3QgcGVnJGMzNTkgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiZGVsZXRlW11cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM2MCA9IFwiKClcIjtcbiAgY29uc3QgcGVnJGMzNjEgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiKClcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM2MiA9IFwiW11cIjtcbiAgY29uc3QgcGVnJGMzNjMgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiW11cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM2NCA9IFwiPzpcIjtcbiAgY29uc3QgcGVnJGMzNjUgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiPzpcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM2NiA9IGZ1bmN0aW9uKGxpdDogYW55KTogYW55IHtyZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcIm51bWVyaWNfbGl0ZXJhbFwiLCB0eXBlOlwiZmxvYXRcIiwgdmFsdWU6bGl0fSwgbG9jYXRpb24oKSwgdGV4dCgpKTt9O1xuICBjb25zdCBwZWckYzM2NyA9IGZ1bmN0aW9uKGxpdDogYW55KTogYW55IHtyZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcIm51bWVyaWNfbGl0ZXJhbFwiLCB0eXBlOlwiaW50XCIsIHZhbHVlOmxpdH0sIGxvY2F0aW9uKCksIHRleHQoKSk7fTtcbiAgY29uc3QgcGVnJGMzNjggPSBmdW5jdGlvbihsaXQ6IGFueSk6IGFueSB7cmV0dXJuIHRyYWNrKHtjb25zdHJ1Y3RfdHlwZTogXCJudW1lcmljX2xpdGVyYWxcIiwgdHlwZTpcImNoYXJcIiwgdmFsdWU6bGl0fSwgbG9jYXRpb24oKSwgdGV4dCgpKTt9O1xuICBjb25zdCBwZWckYzM2OSA9IGZ1bmN0aW9uKGxpdDogYW55KTogYW55IHtyZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcInN0cmluZ19saXRlcmFsXCIsIHR5cGU6XCJzdHJpbmdcIiwgdmFsdWU6bGl0fSwgbG9jYXRpb24oKSwgdGV4dCgpKTt9O1xuICBjb25zdCBwZWckYzM3MCA9IGZ1bmN0aW9uKGxpdDogYW55KTogYW55IHtyZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcIm51bWVyaWNfbGl0ZXJhbFwiLCB0eXBlOlwiYm9vbFwiLCB2YWx1ZTpsaXR9LCBsb2NhdGlvbigpLCB0ZXh0KCkpO307XG4gIGNvbnN0IHBlZyRjMzcxID0gL15bMC05XS87XG4gIGNvbnN0IHBlZyRjMzcyID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1tcIjBcIiwgXCI5XCJdXSwgZmFsc2UsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMzNzMgPSBmdW5jdGlvbihuZWc6IGFueSwgZGlnaXRzOiBhbnkpOiBhbnkgeyByZXR1cm4gcGFyc2VJbnQoKG5lZyA/IG5lZyA6IFwiXCIpICsgZGlnaXRzLmpvaW4oXCJcIikpOyB9O1xuICBjb25zdCBwZWckYzM3NCA9IC9eWzAtOS5dLztcbiAgY29uc3QgcGVnJGMzNzUgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbW1wiMFwiLCBcIjlcIl0sIFwiLlwiXSwgZmFsc2UsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMzNzYgPSBmdW5jdGlvbihuZWc6IGFueSwgZGlnaXRzOiBhbnkpOiBhbnkge3JldHVybiBkaWdpdHMuaW5kZXhPZihcIi5cIikgPT0gZGlnaXRzLmxhc3RJbmRleE9mKFwiLlwiKSAmJiBkaWdpdHMuaW5kZXhPZihcIi5cIikgIT0gLTE7fTtcbiAgY29uc3QgcGVnJGMzNzcgPSBmdW5jdGlvbihuZWc6IGFueSwgZGlnaXRzOiBhbnkpOiBhbnkgeyByZXR1cm4gcGFyc2VGbG9hdCgobmVnID8gbmVnIDogXCJcIikgKyBkaWdpdHMuam9pbihcIlwiKSk7IH07XG4gIGNvbnN0IHBlZyRjMzc4ID0gXCInXCI7XG4gIGNvbnN0IHBlZyRjMzc5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIidcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM4MCA9IC9eW14nXFxcXFxcbl0vO1xuICBjb25zdCBwZWckYzM4MSA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtcIidcIiwgXCJcXFxcXCIsIFwiXFxuXCJdLCB0cnVlLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMzgyID0gZnVuY3Rpb24oY2hhcjogYW55KTogYW55IHsgcmV0dXJuIGNoYXI7IH07XG4gIGNvbnN0IHBlZyRjMzgzID0gXCJcXFwiXCI7XG4gIGNvbnN0IHBlZyRjMzg0ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIlxcXCJcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM4NSA9IC9eW15cIlxcXFxcXG5dLztcbiAgY29uc3QgcGVnJGMzODYgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJcXFwiXCIsIFwiXFxcXFwiLCBcIlxcblwiXSwgdHJ1ZSwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM4NyA9IGZ1bmN0aW9uKGNoYXJzOiBhbnkpOiBhbnkgeyByZXR1cm4gY2hhcnMuam9pbihcIlwiKTsgfTtcbiAgY29uc3QgcGVnJGMzODggPSBcInRydWVcIjtcbiAgY29uc3QgcGVnJGMzODkgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwidHJ1ZVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMzkwID0gZnVuY3Rpb24oKTogYW55IHtyZXR1cm4gdHJ1ZTt9O1xuICBjb25zdCBwZWckYzM5MSA9IFwiZmFsc2VcIjtcbiAgY29uc3QgcGVnJGMzOTIgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiZmFsc2VcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM5MyA9IGZ1bmN0aW9uKCk6IGFueSB7cmV0dXJuIGZhbHNlO307XG4gIGNvbnN0IHBlZyRjMzk0ID0gXCJcXFxcXFxcIlwiO1xuICBjb25zdCBwZWckYzM5NSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcXFxcIlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMzk2ID0gXCJcXFxcJ1wiO1xuICBjb25zdCBwZWckYzM5NyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcJ1wiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMzk4ID0gXCJcXFxcP1wiO1xuICBjb25zdCBwZWckYzM5OSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcP1wiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDAwID0gXCJcXFxcXFxcXFwiO1xuICBjb25zdCBwZWckYzQwMSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcXFxcXFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDAyID0gXCJcXFxcYVwiO1xuICBjb25zdCBwZWckYzQwMyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcYVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDA0ID0gXCJcXFxcYlwiO1xuICBjb25zdCBwZWckYzQwNSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcYlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDA2ID0gXCJcXFxcZlwiO1xuICBjb25zdCBwZWckYzQwNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcZlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDA4ID0gXCJcXFxcblwiO1xuICBjb25zdCBwZWckYzQwOSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcblwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDEwID0gXCJcXFxcclwiO1xuICBjb25zdCBwZWckYzQxMSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcclwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDEyID0gXCJcXFxcdFwiO1xuICBjb25zdCBwZWckYzQxMyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcdFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDE0ID0gXCJcXFxcdlwiO1xuICBjb25zdCBwZWckYzQxNSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcdlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDE2ID0gXCJcXFxcMFwiO1xuICBjb25zdCBwZWckYzQxNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJcXFxcMFwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDE4ID0gL15bMC04XS87XG4gIGNvbnN0IHBlZyRjNDE5ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1tcIjBcIiwgXCI4XCJdXSwgZmFsc2UsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGM0MjAgPSBwZWckb3RoZXJFeHBlY3RhdGlvbihcImlkZW50aWZpZXJcIik7XG4gIGNvbnN0IHBlZyRjNDIxID0gZnVuY3Rpb24oZmlyc3Q6IGFueSwgcmVzdDogYW55KTogYW55IHtyZXR1cm4gdHJhY2soe2lkZW50aWZpZXI6IGZpcnN0ICsgcmVzdC5qb2luKFwiXCIpfSwgbG9jYXRpb24oKSwgdGV4dCgpKTt9O1xuICBjb25zdCBwZWckYzQyMiA9IC9eW2EtekEtWjAtOV9dLztcbiAgY29uc3QgcGVnJGM0MjMgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbW1wiYVwiLCBcInpcIl0sIFtcIkFcIiwgXCJaXCJdLCBbXCIwXCIsIFwiOVwiXSwgXCJfXCJdLCBmYWxzZSwgZmFsc2UpO1xuICBjb25zdCBwZWckYzQyNCA9IC9eW2EtekEtWl9dLztcbiAgY29uc3QgcGVnJGM0MjUgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbW1wiYVwiLCBcInpcIl0sIFtcIkFcIiwgXCJaXCJdLCBcIl9cIl0sIGZhbHNlLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDI2ID0gcGVnJG90aGVyRXhwZWN0YXRpb24oXCJvcHRpb25hbCB3aGl0ZXNwYWNlXCIpO1xuICBjb25zdCBwZWckYzQyNyA9IC9eWyBcXHRcXG5cXHJdLztcbiAgY29uc3QgcGVnJGM0MjggPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCIgXCIsIFwiXFx0XCIsIFwiXFxuXCIsIFwiXFxyXCJdLCBmYWxzZSwgZmFsc2UpO1xuICBjb25zdCBwZWckYzQyOSA9IHBlZyRvdGhlckV4cGVjdGF0aW9uKFwid2hpdGVzcGFjZVwiKTtcbiAgY29uc3QgcGVnJGM0MzAgPSBmdW5jdGlvbihoZWFkOiBhbnkpOiBhbnkge2dldFVzZXJUeXBlTmFtZXMoKVtoZWFkLm5hbWUuaWRlbnRpZmllcl09dHJ1ZTt9O1xuICBjb25zdCBwZWckYzQzMSA9IGZ1bmN0aW9uKGhlYWQ6IGFueSwgbWVtczogYW55KTogYW55IHsgcmV0dXJuIHRyYWNrKHtoZWFkOiBoZWFkLCBtZW1iZXJfc3BlY3M6IG1lbXN9LCBsb2NhdGlvbigpLCB0ZXh0KCkpOyB9O1xuICBjb25zdCBwZWckYzQzMiA9IGZ1bmN0aW9uKGtleTogYW55LCBuYW1lOiBhbnksIGI6IGFueSk6IGFueSB7cmV0dXJuIGI7fTtcbiAgY29uc3QgcGVnJGM0MzMgPSBmdW5jdGlvbihrZXk6IGFueSwgbmFtZTogYW55LCBiYXNlczogYW55KTogYW55IHsgcmV0dXJuIHRyYWNrKHtrZXk6a2V5LCBuYW1lOm5hbWUsIGJhc2VzOmJhc2VzfSwgbG9jYXRpb24oKSwgdGV4dCgpKTsgfTtcbiAgY29uc3QgcGVnJGM0MzQgPSBcImNsYXNzXCI7XG4gIGNvbnN0IHBlZyRjNDM1ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcImNsYXNzXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGM0MzYgPSBcInN0cnVjdFwiO1xuICBjb25zdCBwZWckYzQzNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJzdHJ1Y3RcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzQzOCA9IFwidW5pb25cIjtcbiAgY29uc3QgcGVnJGM0MzkgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwidW5pb25cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzQ0MCA9IGZ1bmN0aW9uKG06IGFueSk6IGFueSB7cmV0dXJuIG19O1xuICBjb25zdCBwZWckYzQ0MSA9IGZ1bmN0aW9uKG1lbWJlcnM6IGFueSk6IGFueSB7IHJldHVybiB7bWVtYmVyczogbWVtYmVyc307IH07XG4gIGNvbnN0IHBlZyRjNDQyID0gZnVuY3Rpb24oYWNjZXNzOiBhbnksIG06IGFueSk6IGFueSB7cmV0dXJuIG19O1xuICBjb25zdCBwZWckYzQ0MyA9IGZ1bmN0aW9uKGFjY2VzczogYW55LCBtZW1iZXJzOiBhbnkpOiBhbnkgeyByZXR1cm4ge21lbWJlcnM6IG1lbWJlcnMsIGFjY2VzczogYWNjZXNzfTsgfTtcbiAgY29uc3QgcGVnJGM0NDQgPSBcInByaXZhdGVcIjtcbiAgY29uc3QgcGVnJGM0NDUgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwicHJpdmF0ZVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDQ2ID0gXCJwcm90ZWN0ZWRcIjtcbiAgY29uc3QgcGVnJGM0NDcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwicHJvdGVjdGVkXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGM0NDggPSBcInB1YmxpY1wiO1xuICBjb25zdCBwZWckYzQ0OSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJwdWJsaWNcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzQ1MCA9IGZ1bmN0aW9uKHNwZWNzOiBhbnksIGRlY2xhcmF0b3JzOiBhbnkpOiBhbnkgeyByZXR1cm4gdHJhY2soe2NvbnN0cnVjdF90eXBlOiBcIm1lbWJlcl9kZWNsYXJhdGlvblwiLCBzcGVjczpzcGVjcywgZGVjbGFyYXRvcnM6ZGVjbGFyYXRvcnN9LCBsb2NhdGlvbigpLCB0ZXh0KCkpOyB9O1xuICBjb25zdCBwZWckYzQ1MSA9IGZ1bmN0aW9uKGM6IGFueSk6IGFueSB7IHJldHVybiBjOyB9O1xuICBjb25zdCBwZWckYzQ1MiA9IGZ1bmN0aW9uKGQ6IGFueSk6IGFueSB7IHJldHVybiBkOyB9O1xuICBjb25zdCBwZWckYzQ1MyA9IGZ1bmN0aW9uKGY6IGFueSk6IGFueSB7IHJldHVybiBmOyB9O1xuICBjb25zdCBwZWckYzQ1NCA9IFwiMFwiO1xuICBjb25zdCBwZWckYzQ1NSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIwXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGM0NTYgPSBmdW5jdGlvbihkOiBhbnkpOiBhbnkge2QucHVyZVZpcnR1YWwgPSB0cnVlOyByZXR1cm4gZDt9O1xuICBjb25zdCBwZWckYzQ1NyA9IGZ1bmN0aW9uKGQ6IGFueSk6IGFueSB7ZC5saWJyYXJ5X3Vuc3VwcG9ydGVkID0gdHJ1ZTsgcmV0dXJuIGQ7fTtcbiAgY29uc3QgcGVnJGM0NTggPSBmdW5jdGlvbihkOiBhbnksIGk6IGFueSk6IGFueSB7ZC5pbml0ID0gaTsgcmV0dXJuIGQ7fTtcbiAgY29uc3QgcGVnJGM0NTkgPSBmdW5jdGlvbihiOiBhbnkpOiBhbnkge3JldHVybiBifTtcbiAgY29uc3QgcGVnJGM0NjAgPSBmdW5jdGlvbihmaXJzdDogYW55LCBiOiBhbnkpOiBhbnkge3JldHVybiBiO307XG4gIGNvbnN0IHBlZyRjNDYxID0gZnVuY3Rpb24oYTogYW55KTogYW55IHtyZXR1cm4gYTt9O1xuICBjb25zdCBwZWckYzQ2MiA9IGZ1bmN0aW9uKGE6IGFueSwgYzogYW55KTogYW55IHtcclxuICAgICAgcmV0dXJuIHtuYW1lOiBjLCB2aXJ0dWFsOiB0cnVlLCBhY2Nlc3M6IGF9O307XG4gIGNvbnN0IHBlZyRjNDYzID0gZnVuY3Rpb24oYTogYW55LCBjOiBhbnkpOiBhbnkge1xyXG4gICAgICByZXR1cm4ge25hbWU6IGMsIGFjY2VzczogYX07fTtcbiAgY29uc3QgcGVnJGM0NjQgPSBmdW5jdGlvbihjOiBhbnkpOiBhbnkge1xyXG4gICAgICByZXR1cm4ge25hbWU6IGN9O307XG4gIGNvbnN0IHBlZyRjNDY1ID0gZnVuY3Rpb24objogYW55LCBjOiBhbnkpOiBhbnkge1xyXG4gICAgICBuLnB1c2goYyk7XHJcbiAgICAgIHJldHVybiBuO307XG5cbiAgbGV0IHBlZyRjdXJyUG9zID0gMDtcbiAgbGV0IHBlZyRzYXZlZFBvcyA9IDA7XG4gIGNvbnN0IHBlZyRwb3NEZXRhaWxzQ2FjaGUgPSBbeyBsaW5lOiAxLCBjb2x1bW46IDEgfV07XG4gIGxldCBwZWckbWF4RmFpbFBvcyA9IDA7XG4gIGxldCBwZWckbWF4RmFpbEV4cGVjdGVkOiBFeHBlY3RhdGlvbltdID0gW107XG4gIGxldCBwZWckc2lsZW50RmFpbHMgPSAwO1xuXG4gIGxldCBwZWckcmVzdWx0O1xuXG4gIGlmIChvcHRpb25zLnN0YXJ0UnVsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCEob3B0aW9ucy5zdGFydFJ1bGUgaW4gcGVnJHN0YXJ0UnVsZUZ1bmN0aW9ucykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHN0YXJ0IHBhcnNpbmcgZnJvbSBydWxlIFxcXCJcIiArIG9wdGlvbnMuc3RhcnRSdWxlICsgXCJcXFwiLlwiKTtcbiAgICB9XG5cbiAgICBwZWckc3RhcnRSdWxlRnVuY3Rpb24gPSBwZWckc3RhcnRSdWxlRnVuY3Rpb25zW29wdGlvbnMuc3RhcnRSdWxlXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gaW5wdXQuc3Vic3RyaW5nKHBlZyRzYXZlZFBvcywgcGVnJGN1cnJQb3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9jYXRpb24oKTogSUZpbGVSYW5nZSB7XG4gICAgcmV0dXJuIHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBlY3RlZChkZXNjcmlwdGlvbjogc3RyaW5nLCBsb2NhdGlvbjE/OiBJRmlsZVJhbmdlKSB7XG4gICAgbG9jYXRpb24xID0gbG9jYXRpb24xICE9PSB1bmRlZmluZWRcbiAgICAgID8gbG9jYXRpb24xXG4gICAgICA6IHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyk7XG5cbiAgICB0aHJvdyBwZWckYnVpbGRTdHJ1Y3R1cmVkRXJyb3IoXG4gICAgICBbcGVnJG90aGVyRXhwZWN0YXRpb24oZGVzY3JpcHRpb24pXSxcbiAgICAgIGlucHV0LnN1YnN0cmluZyhwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKSxcbiAgICAgIGxvY2F0aW9uMVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBlcnJvcihtZXNzYWdlOiBzdHJpbmcsIGxvY2F0aW9uMT86IElGaWxlUmFuZ2UpIHtcbiAgICBsb2NhdGlvbjEgPSBsb2NhdGlvbjEgIT09IHVuZGVmaW5lZFxuICAgICAgPyBsb2NhdGlvbjFcbiAgICAgIDogcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKTtcblxuICAgIHRocm93IHBlZyRidWlsZFNpbXBsZUVycm9yKG1lc3NhZ2UsIGxvY2F0aW9uMSk7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKHRleHQxOiBzdHJpbmcsIGlnbm9yZUNhc2U6IGJvb2xlYW4pOiBJTGl0ZXJhbEV4cGVjdGF0aW9uIHtcbiAgICByZXR1cm4geyB0eXBlOiBcImxpdGVyYWxcIiwgdGV4dDogdGV4dDEsIGlnbm9yZUNhc2U6IGlnbm9yZUNhc2UgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRjbGFzc0V4cGVjdGF0aW9uKHBhcnRzOiBJQ2xhc3NQYXJ0cywgaW52ZXJ0ZWQ6IGJvb2xlYW4sIGlnbm9yZUNhc2U6IGJvb2xlYW4pOiBJQ2xhc3NFeHBlY3RhdGlvbiB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJjbGFzc1wiLCBwYXJ0czogcGFydHMsIGludmVydGVkOiBpbnZlcnRlZCwgaWdub3JlQ2FzZTogaWdub3JlQ2FzZSB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGFueUV4cGVjdGF0aW9uKCk6IElBbnlFeHBlY3RhdGlvbiB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJhbnlcIiB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGVuZEV4cGVjdGF0aW9uKCk6IElFbmRFeHBlY3RhdGlvbiB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJlbmRcIiB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJG90aGVyRXhwZWN0YXRpb24oZGVzY3JpcHRpb246IHN0cmluZyk6IElPdGhlckV4cGVjdGF0aW9uIHtcbiAgICByZXR1cm4geyB0eXBlOiBcIm90aGVyXCIsIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBvczogbnVtYmVyKSB7XG4gICAgbGV0IGRldGFpbHMgPSBwZWckcG9zRGV0YWlsc0NhY2hlW3Bvc107XG4gICAgbGV0IHA7XG5cbiAgICBpZiAoZGV0YWlscykge1xuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHAgPSBwb3MgLSAxO1xuICAgICAgd2hpbGUgKCFwZWckcG9zRGV0YWlsc0NhY2hlW3BdKSB7XG4gICAgICAgIHAtLTtcbiAgICAgIH1cblxuICAgICAgZGV0YWlscyA9IHBlZyRwb3NEZXRhaWxzQ2FjaGVbcF07XG4gICAgICBkZXRhaWxzID0ge1xuICAgICAgICBsaW5lOiBkZXRhaWxzLmxpbmUsXG4gICAgICAgIGNvbHVtbjogZGV0YWlscy5jb2x1bW5cbiAgICAgIH07XG5cbiAgICAgIHdoaWxlIChwIDwgcG9zKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHApID09PSAxMCkge1xuICAgICAgICAgIGRldGFpbHMubGluZSsrO1xuICAgICAgICAgIGRldGFpbHMuY29sdW1uID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZXRhaWxzLmNvbHVtbisrO1xuICAgICAgICB9XG5cbiAgICAgICAgcCsrO1xuICAgICAgfVxuXG4gICAgICBwZWckcG9zRGV0YWlsc0NhY2hlW3Bvc10gPSBkZXRhaWxzO1xuXG4gICAgICByZXR1cm4gZGV0YWlscztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwZWckY29tcHV0ZUxvY2F0aW9uKHN0YXJ0UG9zOiBudW1iZXIsIGVuZFBvczogbnVtYmVyKTogSUZpbGVSYW5nZSB7XG4gICAgY29uc3Qgc3RhcnRQb3NEZXRhaWxzID0gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHN0YXJ0UG9zKTtcbiAgICBjb25zdCBlbmRQb3NEZXRhaWxzID0gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKGVuZFBvcyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IHtcbiAgICAgICAgb2Zmc2V0OiBzdGFydFBvcyxcbiAgICAgICAgbGluZTogc3RhcnRQb3NEZXRhaWxzLmxpbmUsXG4gICAgICAgIGNvbHVtbjogc3RhcnRQb3NEZXRhaWxzLmNvbHVtblxuICAgICAgfSxcbiAgICAgIGVuZDoge1xuICAgICAgICBvZmZzZXQ6IGVuZFBvcyxcbiAgICAgICAgbGluZTogZW5kUG9zRGV0YWlscy5saW5lLFxuICAgICAgICBjb2x1bW46IGVuZFBvc0RldGFpbHMuY29sdW1uXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRmYWlsKGV4cGVjdGVkMTogRXhwZWN0YXRpb24pIHtcbiAgICBpZiAocGVnJGN1cnJQb3MgPCBwZWckbWF4RmFpbFBvcykgeyByZXR1cm47IH1cblxuICAgIGlmIChwZWckY3VyclBvcyA+IHBlZyRtYXhGYWlsUG9zKSB7XG4gICAgICBwZWckbWF4RmFpbFBvcyA9IHBlZyRjdXJyUG9zO1xuICAgICAgcGVnJG1heEZhaWxFeHBlY3RlZCA9IFtdO1xuICAgIH1cblxuICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQucHVzaChleHBlY3RlZDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGJ1aWxkU2ltcGxlRXJyb3IobWVzc2FnZTogc3RyaW5nLCBsb2NhdGlvbjE6IElGaWxlUmFuZ2UpIHtcbiAgICByZXR1cm4gbmV3IFN5bnRheEVycm9yKG1lc3NhZ2UsIFtdLCBcIlwiLCBsb2NhdGlvbjEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGJ1aWxkU3RydWN0dXJlZEVycm9yKGV4cGVjdGVkMTogRXhwZWN0YXRpb25bXSwgZm91bmQ6IHN0cmluZyB8IG51bGwsIGxvY2F0aW9uMTogSUZpbGVSYW5nZSkge1xuICAgIHJldHVybiBuZXcgU3ludGF4RXJyb3IoXG4gICAgICBTeW50YXhFcnJvci5idWlsZE1lc3NhZ2UoZXhwZWN0ZWQxLCBmb3VuZCksXG4gICAgICBleHBlY3RlZDEsXG4gICAgICBmb3VuZCxcbiAgICAgIGxvY2F0aW9uMVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VzdGFydCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZXdzKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgIHM0ID0gcGVnJHBhcnNlZGVjbF9vcl9jb21tZW50KCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczUgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICBzNCA9IHBlZyRjMChzNCk7XG4gICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZWRlY2xfb3JfY29tbWVudCgpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgIHM0ID0gcGVnJGMwKHM0KTtcbiAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMxKHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VkZWNsX29yX2NvbW1lbnQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWNvbW1lbnQoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzIoKTtcbiAgICB9XG4gICAgczAgPSBzMTtcbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJHBhcnNlZGVjbGFyYXRpb24oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vjb21tZW50KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzMpIHtcbiAgICAgIHMxID0gcGVnJGMzO1xuICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIGlmIChwZWckYzUudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMyA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM2KTsgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBpZiAocGVnJGM1LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICBzMyA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzYpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEwKSB7XG4gICAgICAgICAgczMgPSBwZWckYzc7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzgpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczEgPSBbczEsIHMyLCBzM107XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM5KSB7XG4gICAgICAgIHMxID0gcGVnJGM5O1xuICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTApOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBbXTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckY3VyclBvcztcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzExKSB7XG4gICAgICAgICAgczUgPSBwZWckYzExO1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMik7IH1cbiAgICAgICAgfVxuICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNDtcbiAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IHBlZyRjdXJyUG9zKSB7XG4gICAgICAgICAgICBzNSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTMpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczQgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMxMSkge1xuICAgICAgICAgICAgczUgPSBwZWckYzExO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEyKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5sZW5ndGggPiBwZWckY3VyclBvcykge1xuICAgICAgICAgICAgICBzNSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMyk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMxMSkge1xuICAgICAgICAgICAgczMgPSBwZWckYzExO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEyKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gW3MxLCBzMiwgczNdO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VzdGF0ZW1lbnQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZXN0YXRlbWVudF90cmFja2VkKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGMxNChzMSk7XG4gICAgfVxuICAgIHMwID0gczE7XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VzdGF0ZW1lbnRfdHJhY2tlZCgpOiBhbnkge1xuICAgIGxldCBzMCwgczE7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlbGFiZWxlZF9zdGF0ZW1lbnQoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzE1KHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJHBhcnNlYmxvY2soKTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZXNlbGVjdGlvbl9zdGF0ZW1lbnQoKTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczAgPSBwZWckcGFyc2VpdGVyYXRpb25fc3RhdGVtZW50KCk7XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWp1bXBfc3RhdGVtZW50KCk7XG4gICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczAgPSBwZWckcGFyc2VkZWNsYXJhdGlvbl9zdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckcGFyc2VleHByZXNzaW9uX3N0YXRlbWVudCgpO1xuICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckcGFyc2VudWxsX3N0YXRlbWVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWxhYmVsZWRfc3RhdGVtZW50KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VpZGVudGlmaWVyKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA1OCkge1xuICAgICAgICAgIHMzID0gcGVnJGMxNjtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTcpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2VzdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzE4KHMxLCBzNSk7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzE5KSB7XG4gICAgICAgIHMxID0gcGVnJGMxOTtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gNDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIwKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlV1MoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VleHBfY29uc3QoKTtcbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU4KSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckYzE2O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNyk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZXN0YXRlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjEoczMsIHM3KTtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA3KSA9PT0gcGVnJGMyMikge1xuICAgICAgICAgIHMxID0gcGVnJGMyMjtcbiAgICAgICAgICBwZWckY3VyclBvcyArPSA3O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjMpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA1OCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMTY7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNyk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlc3RhdGVtZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyNChzNSk7XG4gICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWV4cHJlc3Npb25fc3RhdGVtZW50KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWV4cHJlc3Npb24oKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU5KSB7XG4gICAgICAgICAgczMgPSBwZWckYzI1O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNik7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMjcoczEpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VudWxsX3N0YXRlbWVudCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZXdzKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU5KSB7XG4gICAgICAgIHMyID0gcGVnJGMyNTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI2KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMjgoKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VibG9jaygpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNjtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjMpIHtcbiAgICAgIHMxID0gcGVnJGMyOTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMCk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBbXTtcbiAgICAgICAgczQgPSBwZWckY3VyclBvcztcbiAgICAgICAgczUgPSBwZWckcGFyc2VzdGF0ZW1lbnQoKTtcbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczQ7XG4gICAgICAgICAgICBzNSA9IHBlZyRjMzEoczUpO1xuICAgICAgICAgICAgczQgPSBzNTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNDtcbiAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNDtcbiAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMucHVzaChzNCk7XG4gICAgICAgICAgczQgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZXN0YXRlbWVudCgpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHM0O1xuICAgICAgICAgICAgICBzNSA9IHBlZyRjMzEoczUpO1xuICAgICAgICAgICAgICBzNCA9IHM1O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNDtcbiAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyNSkge1xuICAgICAgICAgICAgczQgPSBwZWckYzMyO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMzKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzM0KHMzKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlc2VsZWN0aW9uX3N0YXRlbWVudCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczcsIHM4LCBzOSwgczEwLCBzMTEsIHMxMiwgczEzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMzNSkge1xuICAgICAgczEgPSBwZWckYzM1O1xuICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM2KTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQwKSB7XG4gICAgICAgICAgczMgPSBwZWckYzM3O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOCk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRwYXJzZWV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGMzOTtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MCk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczggIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckcGFyc2VzdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHM5ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA0KSA9PT0gcGVnJGM0MSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckYzQxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQyKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMTIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczEzID0gcGVnJHBhcnNlc3RhdGVtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNDMoczUsIHM5LCBzMTMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMzUpIHtcbiAgICAgICAgczEgPSBwZWckYzM1O1xuICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzYpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQwKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMzc7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzgpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlZXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGMzOTtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQwKTsgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckcGFyc2VzdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzQ0KHM1LCBzOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWl0ZXJhdGlvbl9zdGF0ZW1lbnQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzOCwgczksIHMxMCwgczExLCBzMTIsIHMxMywgczE0LCBzMTU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDUpID09PSBwZWckYzQ1KSB7XG4gICAgICBzMSA9IHBlZyRjNDU7XG4gICAgICBwZWckY3VyclBvcyArPSA1O1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDYpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgICAgICBzMyA9IHBlZyRjMzc7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM4KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlZXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzM5O1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQwKTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRwYXJzZXN0YXRlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNDcoczUsIHM5KTtcbiAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzQ4KSB7XG4gICAgICAgIHMxID0gcGVnJGM0ODtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQ5KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWlkZW50aWZpZXJDaGFyKCk7XG4gICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXN0YXRlbWVudCgpO1xuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNSkgPT09IHBlZyRjNDUpIHtcbiAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJGM0NTtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0Nik7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJGMzNztcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzgpOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChzOSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJHBhcnNlZXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczExICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJGMzOTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDApOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMyA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTQgPSBwZWckYzI1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczE0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjYpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM1MChzNCwgczEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMykgPT09IHBlZyRjNTEpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjNTE7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzUyKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckYzM3O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzgpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRwYXJzZWZvcl9pbml0X3N0YXRlbWVudCgpO1xuICAgICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJGMyNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI2KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM5ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTAgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckcGFyc2VleHByZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMyA9IHBlZyRjMzk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczE0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczE0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTUgPSBwZWckcGFyc2VzdGF0ZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM1MyhzNSwgczcsIHMxMSwgczE1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vmb3JfaW5pdF9zdGF0ZW1lbnQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxO1xuXG4gICAgczAgPSBwZWckcGFyc2VleHByZXNzaW9uX3N0YXRlbWVudCgpO1xuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckcGFyc2VudWxsX3N0YXRlbWVudCgpO1xuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJHBhcnNlZGVjbGFyYXRpb25fc3RhdGVtZW50KCk7XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGM1NChzMSk7XG4gICAgICAgIH1cbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VqdW1wX3N0YXRlbWVudCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNjtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNSkgPT09IHBlZyRjNTUpIHtcbiAgICAgIHMxID0gcGVnJGM1NTtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM1Nik7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICBzMyA9IHBlZyRwYXJzZWlkZW50aWZpZXJDaGFyKCk7XG4gICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTkpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJGMyNTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNik7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM1NygpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgOCkgPT09IHBlZyRjNTgpIHtcbiAgICAgICAgczEgPSBwZWckYzU4O1xuICAgICAgICBwZWckY3VyclBvcyArPSA4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTkpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTkpIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckYzI1O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjYpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGM2MCgpO1xuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDYpID09PSBwZWckYzYxKSB7XG4gICAgICAgICAgczEgPSBwZWckYzYxO1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM2Mik7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTtcbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZWV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTkpIHtcbiAgICAgICAgICAgICAgICAgICAgczYgPSBwZWckYzI1O1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjYpOyB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM2MyhzNCk7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZGVjbGFyYXRpb25fc3RhdGVtZW50KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VkZWNsYXJhdGlvbigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICBzMSA9IHBlZyRjNjQoczEpO1xuICAgIH1cbiAgICBzMCA9IHMxO1xuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZGVjbGFyYXRpb24oKTogYW55IHtcbiAgICBsZXQgczA7XG5cbiAgICBzMCA9IHBlZyRwYXJzZXNpbXBsZV9kZWNsYXJhdGlvbigpO1xuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckcGFyc2VjbGFzc19kZWNsYXJhdGlvbigpO1xuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJHBhcnNlZnVuY3Rpb25fZGVmaW5pdGlvbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZXNpbXBsZV9kZWNsYXJhdGlvbigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNjtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VkZWNsX3NwZWNpZmllcnMoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgIHMzID0gcGVnJHBhcnNlaWRlbnRpZmllcigpO1xuICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZWRlY2xhcmF0b3JfbGlzdCgpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTkpIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRjMjU7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI2KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGM2NShzMSwgczQpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VkZWNsYXJhdG9yX2xpc3QoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWRlY2xhcmF0b3JfaW5pdCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgIHM1ID0gcGVnJGM2NjtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjcpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczcgPSBwZWckcGFyc2VkZWNsYXJhdG9yX2luaXQoKTtcbiAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgczQgPSBwZWckYzY4KHMxLCBzNyk7XG4gICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgczUgPSBwZWckYzY2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY3KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWRlY2xhcmF0b3JfaW5pdCgpO1xuICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzNCA9IHBlZyRjNjgoczEsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM2OShzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWNsYXNzX2RlY2xhcmF0aW9uKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWNsYXNzX3NwZWNpZmllcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTkpIHtcbiAgICAgICAgICBzMyA9IHBlZyRjMjU7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI2KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGM3MChzMSk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWZ1bmN0aW9uX2RlZmluaXRpb24oKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczY7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlZGVjbF9zcGVjaWZpZXJzKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICBzMyA9IHBlZyRwYXJzZWlkZW50aWZpZXIoKTtcbiAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2VkZWNsYXJhdG9yKCk7XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2VibG9jaygpO1xuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNzEoczEsIHM0LCBzNik7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWNvbnN0cnVjdG9yX2RlZmluaXRpb24oKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzOCwgczksIHMxMCwgczExLCBzMTI7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlaWRlbnRpZmllcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgICAgICBzMyA9IHBlZyRjMzc7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM4KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlYXJndW1lbnRfZGVjbGFyYXRpb25fbGlzdCgpO1xuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzM5O1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQwKTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRwYXJzZWN0b3JfaW5pdGlhbGl6ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHM5ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzOSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJHBhcnNlYmxvY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTIgPSBwZWckYzI1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjYpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMxMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTIgPSBwZWckYzcyKHMxLCBzNSwgczkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHMxMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM3MyhzMSwgczUsIHM5LCBzMTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWRlc3RydWN0b3JfZGVmaW5pdGlvbigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczcsIHM4LCBzOSwgczEwLCBzMTE7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI2KSB7XG4gICAgICBzMSA9IHBlZyRjNzQ7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNzUpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VpZGVudGlmaWVyKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQwKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRjMzc7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzgpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRjMzk7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQwKTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNlYmxvY2soKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzOCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckYzI1O1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNik7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzODtcbiAgICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRjNzYoczIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHM4ID0gczk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoczggIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGM3NyhzMiwgczgpO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA3KSA9PT0gcGVnJGM3OCkge1xuICAgICAgICBzMSA9IHBlZyRjNzg7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM3OSk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZVdTKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI2KSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjNzQ7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNzUpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2VpZGVudGlmaWVyKCk7XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQwKSB7XG4gICAgICAgICAgICAgICAgICBzNiA9IHBlZyRjMzc7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzgpOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRjMzk7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQwKTsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRwYXJzZWJsb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJGMyNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI2KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczExID0gcGVnJGM3NihzNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgczEwID0gczExO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzgwKHM0LCBzMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWN0b3JfaW5pdGlhbGl6ZXIoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzOCwgczk7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTgpIHtcbiAgICAgIHMxID0gcGVnJGMxNjtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNyk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VtZW1faW5pdGlhbGl6ZXIoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBbXTtcbiAgICAgICAgICBzNSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckYzY2O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjcpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczggPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICBpZiAoczggIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzOSA9IHBlZyRwYXJzZW1lbV9pbml0aWFsaXplcigpO1xuICAgICAgICAgICAgICAgIGlmIChzOSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczU7XG4gICAgICAgICAgICAgICAgICBzNiA9IHBlZyRjODEoczMsIHM5KTtcbiAgICAgICAgICAgICAgICAgIHM1ID0gczY7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM1O1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQucHVzaChzNSk7XG4gICAgICAgICAgICBzNSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRjNjY7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY3KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICBpZiAoczggIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJHBhcnNlbWVtX2luaXRpYWxpemVyKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczU7XG4gICAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJGM4MShzMywgczkpO1xuICAgICAgICAgICAgICAgICAgICBzNSA9IHM2O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM1O1xuICAgICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM1O1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzgyKHMzLCBzNCk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZW1lbV9pbml0aWFsaXplcigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczc7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlaWRlbnRpZmllcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgICAgICBzMyA9IHBlZyRjMzc7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM4KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlZXhwX2xpc3QoKTtcbiAgICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgICAgICAgICBzNyA9IHBlZyRjMzk7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDApOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjODMoczEsIHM1KTtcbiAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZGVjbF9zcGVjaWZpZXJzKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IFtdO1xuICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgczMgPSBwZWckcGFyc2VkZWNsX3NwZWNpZmllcigpO1xuICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczQgPSBwZWckcGFyc2VXUygpO1xuICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMyO1xuICAgICAgICBzMyA9IHBlZyRjODQoczMpO1xuICAgICAgICBzMiA9IHMzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMxLnB1c2goczIpO1xuICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgIHMzID0gcGVnJHBhcnNlZGVjbF9zcGVjaWZpZXIoKTtcbiAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNCA9IHBlZyRwYXJzZVdTKCk7XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMyO1xuICAgICAgICAgIHMzID0gcGVnJGM4NChzMyk7XG4gICAgICAgICAgczIgPSBzMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNlc2ltcGxlX3R5cGVfbmFtZSgpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gW107XG4gICAgICAgIHM0ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM1ID0gcGVnJHBhcnNlV1MoKTtcbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczYgPSBwZWckcGFyc2VkZWNsX3NwZWNpZmllcigpO1xuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczQ7XG4gICAgICAgICAgICBzNSA9IHBlZyRjODUoczEsIHMyLCBzNik7XG4gICAgICAgICAgICBzNCA9IHM1O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMy5wdXNoKHM0KTtcbiAgICAgICAgICBzNCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlV1MoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlZGVjbF9zcGVjaWZpZXIoKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzNDtcbiAgICAgICAgICAgICAgczUgPSBwZWckYzg1KHMxLCBzMiwgczYpO1xuICAgICAgICAgICAgICBzNCA9IHM1O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNDtcbiAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjODYoczEsIHMyLCBzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWRlY2xfc3BlY2lmaWVyKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2V0eXBlX3NwZWNpZmllcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICBzMSA9IHBlZyRjODcoczEpO1xuICAgIH1cbiAgICBzMCA9IHMxO1xuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlc3RvcmFnZV9jbGFzc19zcGVjaWZpZXIoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzg4KHMxKTtcbiAgICAgIH1cbiAgICAgIHMwID0gczE7XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckcGFyc2VmdW5jdGlvbl9zcGVjaWZpZXIoKTtcbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNykgPT09IHBlZyRjODkpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGM4OTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5MCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGM5MSkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjOTE7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5Mik7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2V0eXBlX3NwZWNpZmllcnMoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczY7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gW107XG4gICAgczIgPSBwZWckY3VyclBvcztcbiAgICBzMyA9IHBlZyRwYXJzZXR5cGVfc3BlY2lmaWVyKCk7XG4gICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzNCA9IHBlZyRwYXJzZVdTKCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczI7XG4gICAgICAgIHMzID0gcGVnJGM4NChzMyk7XG4gICAgICAgIHMyID0gczM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEucHVzaChzMik7XG4gICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgczMgPSBwZWckcGFyc2V0eXBlX3NwZWNpZmllcigpO1xuICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNlV1MoKTtcbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczI7XG4gICAgICAgICAgczMgPSBwZWckYzg0KHMzKTtcbiAgICAgICAgICBzMiA9IHMzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VzaW1wbGVfdHlwZV9uYW1lKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBbXTtcbiAgICAgICAgczQgPSBwZWckY3VyclBvcztcbiAgICAgICAgczUgPSBwZWckcGFyc2VXUygpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNiA9IHBlZyRwYXJzZXR5cGVfc3BlY2lmaWVyKCk7XG4gICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzNDtcbiAgICAgICAgICAgIHM1ID0gcGVnJGM4NShzMSwgczIsIHM2KTtcbiAgICAgICAgICAgIHM0ID0gczU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczQ7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczQ7XG4gICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgIHM0ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2VXUygpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2V0eXBlX3NwZWNpZmllcigpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHM0O1xuICAgICAgICAgICAgICBzNSA9IHBlZyRjODUoczEsIHMyLCBzNik7XG4gICAgICAgICAgICAgIHM0ID0gczU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczQ7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGM5MyhzMSwgczIsIHMzKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNldHlwZV9zcGVjaWZpZXIoKTogYW55IHtcbiAgICBsZXQgczA7XG5cbiAgICBzMCA9IHBlZyRwYXJzZWVudW1fc3BlY2lmaWVyKCk7XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA1KSA9PT0gcGVnJGM5NCkge1xuICAgICAgICBzMCA9IHBlZyRjOTQ7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5NSk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA4KSA9PT0gcGVnJGM5Nikge1xuICAgICAgICAgIHMwID0gcGVnJGM5NjtcbiAgICAgICAgICBwZWckY3VyclBvcyArPSA4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjOTcpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VzdG9yYWdlX2NsYXNzX3NwZWNpZmllcigpOiBhbnkge1xuICAgIGxldCBzMDtcblxuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDgpID09PSBwZWckYzk4KSB7XG4gICAgICBzMCA9IHBlZyRjOTg7XG4gICAgICBwZWckY3VyclBvcyArPSA4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjOTkpOyB9XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNikgPT09IHBlZyRjMTAwKSB7XG4gICAgICAgIHMwID0gcGVnJGMxMDA7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMDEpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMTIpID09PSBwZWckYzEwMikge1xuICAgICAgICAgIHMwID0gcGVnJGMxMDI7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMTI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMDMpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNikgPT09IHBlZyRjMTA0KSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMTA0O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEwNSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA3KSA9PT0gcGVnJGMxMDYpIHtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzEwNjtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEwNyk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VmdW5jdGlvbl9zcGVjaWZpZXIoKTogYW55IHtcbiAgICBsZXQgczA7XG5cbiAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGMxMDgpIHtcbiAgICAgIHMwID0gcGVnJGMxMDg7XG4gICAgICBwZWckY3VyclBvcyArPSA2O1xuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTA5KTsgfVxuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDgpID09PSBwZWckYzExMCkge1xuICAgICAgICBzMCA9IHBlZyRjMTEwO1xuICAgICAgICBwZWckY3VyclBvcyArPSA4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTExKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDcpID09PSBwZWckYzc4KSB7XG4gICAgICAgICAgczAgPSBwZWckYzc4O1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM3OSk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZXNpbXBsZV90eXBlX25hbWUoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczM7XG5cbiAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlX3NpbXBsZV90eXBlX25hbWUoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgIHMzID0gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTtcbiAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMTEzKHMxKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTEyKTsgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZV9zaW1wbGVfdHlwZV9uYW1lKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczI7XG5cbiAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA0KSA9PT0gcGVnJGMxMTQpIHtcbiAgICAgIHMwID0gcGVnJGMxMTQ7XG4gICAgICBwZWckY3VyclBvcyArPSA0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTE1KTsgfVxuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDUpID09PSBwZWckYzExNikge1xuICAgICAgICBzMCA9IHBlZyRjMTE2O1xuICAgICAgICBwZWckY3VyclBvcyArPSA1O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTE3KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDMpID09PSBwZWckYzExOCkge1xuICAgICAgICAgIHMwID0gcGVnJGMxMTg7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzExOSk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA0KSA9PT0gcGVnJGMxMjApIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGMxMjA7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSA0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTIxKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzEyMikge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjMTIyO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTIzKTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDYpID09PSBwZWckYzEyNCkge1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJGMxMjQ7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEyNSk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA4KSA9PT0gcGVnJGMxMjYpIHtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMxMjY7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA4O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTI3KTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDUpID09PSBwZWckYzEyOCkge1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMTI4O1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA1O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTI5KTsgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDYpID09PSBwZWckYzEzMCkge1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMxMzA7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEzMSk7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA0KSA9PT0gcGVnJGMxMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMxMzI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA0O1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTMzKTsgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRwYXJzZWlkZW50aWZpZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczIgPSBwZWckYzEzNChzMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTM1KHMxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZW51bV9zcGVjaWZpZXIoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzOCwgczksIHMxMCwgczExLCBzMTI7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzEzNikge1xuICAgICAgczEgPSBwZWckYzEzNjtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMzcpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VXUygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlaWRlbnRpZmllcigpO1xuICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjMpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckYzI5O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzApOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2VlbnVtZXJhdG9yKCk7XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM3ID0gW107XG4gICAgICAgICAgICAgICAgczggPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICBzOSA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM5ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRjNjY7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjcpOyB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzMTIgPSBwZWckcGFyc2VlbnVtZXJhdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczg7XG4gICAgICAgICAgICAgICAgICAgICAgICBzOSA9IHBlZyRjMTM4KHMzLCBzNiwgczEyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM4ID0gczk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczg7XG4gICAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczg7XG4gICAgICAgICAgICAgICAgICAgICAgczggPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM4O1xuICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczg7XG4gICAgICAgICAgICAgICAgICBzOCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczcucHVzaChzOCk7XG4gICAgICAgICAgICAgICAgICBzOCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgICAgczkgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgaWYgKHM5ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckYzY2O1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgczEwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjcpOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHMxMCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczEyID0gcGVnJHBhcnNlZW51bWVyYXRvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckYzEzOChzMywgczYsIHMxMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHM4ID0gczk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczg7XG4gICAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczg7XG4gICAgICAgICAgICAgICAgICAgICAgczggPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM4O1xuICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczggPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckYzMyO1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMyk7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTM5KHMzLCBzNiwgczcpO1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VlbnVtZXJhdG9yKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWlkZW50aWZpZXIoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMyA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MSkge1xuICAgICAgICAgIHM0ID0gcGVnJGMxNDA7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE0MSk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZWV4cF9jb25zdCgpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMyO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMTQyKHMxLCBzNik7XG4gICAgICAgICAgICAgIHMyID0gczM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMxNDMoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VkZWNsYXJhdG9yX2luaXQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VkZWNsYXJhdG9yKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MSkge1xuICAgICAgICAgIHMzID0gcGVnJGMxNDA7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE0MSk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyMSkgPT09IHBlZyRjMTQ0KSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJGMxNDQ7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDIxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTQ1KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMTQ2KHMxKTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VkZWNsYXJhdG9yKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZWluaXRpYWxpemVyKCk7XG4gICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMTQ3KHMxLCBzMyk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWluaXRpYWxpemVyKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRwYXJzZWJyYWNlX29yX2VxdWFsX2luaXRpYWxpemVyKCk7XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgICBzMSA9IHBlZyRjMzc7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlZXhwX2xpc3QoKTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJGMzOTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDApOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzE0OChzMyk7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWJyYWNlX29yX2VxdWFsX2luaXRpYWxpemVyKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MSkge1xuICAgICAgczEgPSBwZWckYzE0MDtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNDEpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlZXhwX2Fzc24oKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzE0OShzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDYxKSB7XG4gICAgICAgIHMxID0gcGVnJGMxNDA7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNDEpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyMykge1xuICAgICAgICAgICAgczMgPSBwZWckYzI5O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMwKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRwYXJzZWluaXRpYWxpemVyX2xpc3QoKTtcbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjUpIHtcbiAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzMyO1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzMpOyB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxNTAoczUpO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWluaXRpYWxpemVyX2xpc3QoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWV4cF9hc3NuKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgczUgPSBwZWckYzY2O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM2Nyk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWV4cF9hc3NuKCk7XG4gICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJGMxNTEoczEsIHM1LCBzNyk7XG4gICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgczUgPSBwZWckYzY2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY3KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWV4cF9hc3NuKCk7XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJGMxNTEoczEsIHM1LCBzNyk7XG4gICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMTUyKHMxLCBzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZGVjbGFyYXRvcigpOiBhbnkge1xuICAgIGxldCBzMCwgczE7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlX2RlY2xhcmF0b3IoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzE1MyhzMSk7XG4gICAgfVxuICAgIHMwID0gczE7XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VhYnN0cmFjdF9kZWNsYXJhdG9yKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VfYWJzX2RlY2xhcmF0b3IoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzE1NChzMSk7XG4gICAgfVxuICAgIHMwID0gczE7XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VfZGVjbGFyYXRvcigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQyKSB7XG4gICAgICBzMSA9IHBlZyRjMTU1O1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE1Nik7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2Vjdl9xdWFsaWZpZXIoKTtcbiAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlX2RlY2xhcmF0b3IoKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzE1NyhzMywgczUpO1xuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM4KSB7XG4gICAgICAgIHMxID0gcGVnJGMxNTg7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNTkpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZWN2X3F1YWxpZmllcigpO1xuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRwYXJzZV9kZWNsYXJhdG9yKCk7XG4gICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxNjAoczMsIHM1KTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgczEgPSBwZWckcGFyc2VkZWNsYXJhdG9yX3NpbXBsZSgpO1xuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZWRlY2xhcmF0b3JfcG9zdGZpeGVzKCk7XG4gICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxNjEoczEsIHMyKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJHBhcnNlZGVjbGFyYXRvcl9zaW1wbGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZV9hYnNfZGVjbGFyYXRvcigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQyKSB7XG4gICAgICBzMSA9IHBlZyRjMTU1O1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE1Nik7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2Vjdl9xdWFsaWZpZXIoKTtcbiAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlX2Fic19kZWNsYXJhdG9yKCk7XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGMxNTcoczMsIHM1KTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzOCkge1xuICAgICAgICBzMSA9IHBlZyRjMTU4O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTU5KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2Vjdl9xdWFsaWZpZXIoKTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckcGFyc2VfYWJzX2RlY2xhcmF0b3IoKTtcbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzE2MChzMywgczUpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZWFic19kZWNsYXJhdG9yX3NpbXBsZSgpO1xuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZWRlY2xhcmF0b3JfcG9zdGZpeGVzKCk7XG4gICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxNjEoczEsIHMyKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJHBhcnNlYWJzX2RlY2xhcmF0b3Jfc2ltcGxlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VkZWNsYXJhdG9yX3Bvc3RmaXhlcygpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gW107XG4gICAgczEgPSBwZWckY3VyclBvcztcbiAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMyA9IHBlZyRwYXJzZWRlY2xhcmF0b3JfcG9zdGZpeCgpO1xuICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMxO1xuICAgICAgICBzMiA9IHBlZyRjMTYyKHMzKTtcbiAgICAgICAgczEgPSBzMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICB3aGlsZSAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAucHVzaChzMSk7XG4gICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VkZWNsYXJhdG9yX3Bvc3RmaXgoKTtcbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMxO1xuICAgICAgICAgICAgczIgPSBwZWckYzE2MihzMyk7XG4gICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZGVjbGFyYXRvcl9wb3N0Zml4KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgczEgPSBwZWckYzM3O1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM4KTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWFyZ3VtZW50X2RlY2xhcmF0aW9uX2xpc3QoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRjMzk7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MCk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlY3ZfcXVhbGlmaWVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM3ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzNyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTYzKHMzLCBzNyk7XG4gICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDkxKSB7XG4gICAgICAgIHMxID0gcGVnJGMxNjQ7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNjUpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZWV4cF9jb25zdCgpO1xuICAgICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDkzKSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckYzE2NjtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTY3KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxNjgoczMpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VkZWNsYXJhdG9yX3NpbXBsZSgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZW5hbWUoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzE2OShzMSk7XG4gICAgfVxuICAgIHMwID0gczE7XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgICBzMSA9IHBlZyRjMzc7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlX2RlY2xhcmF0b3IoKTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJGMzOTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDApOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzE3MChzMyk7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWFic19kZWNsYXJhdG9yX3NpbXBsZSgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQwKSB7XG4gICAgICBzMSA9IHBlZyRjMzc7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzgpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlX2Fic19kZWNsYXJhdG9yKCk7XG4gICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJGMzOTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQwKTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMTcwKHMzKTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckYzE3MTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzE3MigpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2V0eXBlX2lkKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZXR5cGVfc3BlY2lmaWVycygpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlYWJzdHJhY3RfZGVjbGFyYXRvcigpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTczKHMxLCBzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWN2X3F1YWxpZmllcigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNSkgPT09IHBlZyRjOTQpIHtcbiAgICAgIHMxID0gcGVnJGM5NDtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5NSk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZVdTKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgOCkgPT09IHBlZyRjOTYpIHtcbiAgICAgICAgICBzMyA9IHBlZyRjOTY7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gODtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzk3KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxNzQoKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDgpID09PSBwZWckYzk2KSB7XG4gICAgICAgIHMxID0gcGVnJGM5NjtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gODtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzk3KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNlV1MoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNSkgPT09IHBlZyRjOTQpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGM5NDtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5NSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxNzQoKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNSkgPT09IHBlZyRjOTQpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjOTQ7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzk1KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxNzUoKTtcbiAgICAgICAgfVxuICAgICAgICBzMCA9IHMxO1xuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDgpID09PSBwZWckYzk2KSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRjOTY7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSA4O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjOTcpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMTc2KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vhcmd1bWVudF9kZWNsYXJhdGlvbl9saXN0KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2Vhcmd1bWVudF9kZWNsYXJhdGlvbigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgIHM1ID0gcGVnJGM2NjtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjcpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczcgPSBwZWckcGFyc2Vhcmd1bWVudF9kZWNsYXJhdGlvbigpO1xuICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICBzNCA9IHBlZyRjMTc3KHMxLCBzNyk7XG4gICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgczUgPSBwZWckYzY2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY3KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWFyZ3VtZW50X2RlY2xhcmF0aW9uKCk7XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJGMxNzcoczEsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMxNzgoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckYzE3MTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzE3OSgpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vhcmd1bWVudF9kZWNsYXJhdGlvbigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczc7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlZGVjbF9zcGVjaWZpZXJzKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VkZWNsYXJhdG9yKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjEpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckYzE0MDtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE0MSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX2Fzc24oKTtcbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzE4MChzMSwgczMsIHM3KTtcbiAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlZGVjbF9zcGVjaWZpZXJzKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IHBlZyRwYXJzZWRlY2xhcmF0b3IoKTtcbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzE4MShzMSwgczMpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZWRlY2xfc3BlY2lmaWVycygpO1xuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWFic3RyYWN0X2RlY2xhcmF0b3IoKTtcbiAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjEpIHtcbiAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJGMxNDA7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTQxKTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWV4cF9hc3NuKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxODAoczEsIHMzLCBzNyk7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlZGVjbF9zcGVjaWZpZXJzKCk7XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VhYnN0cmFjdF9kZWNsYXJhdG9yKCk7XG4gICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxODEoczEsIHMzKTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZXhwcmVzc2lvbigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczc7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlZXhwX2Fzc24oKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRjNjY7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY3KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX2Fzc24oKTtcbiAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgczQgPSBwZWckYzE4MihzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRjNjY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjcpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX2Fzc24oKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzE4MihzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMxODMoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRwYXJzZWV4cF9hc3NuKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZXhwX2Fzc24oKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VleHBfdW5hcnkoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDYxKSB7XG4gICAgICAgICAgczMgPSBwZWckYzE0MDtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTQxKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlZXhwX2Fzc24oKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzE4NChzMSwgczMsIHM1KTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VleHBfdW5hcnkoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlb3BfY29tcF9hc3NuKCk7XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckcGFyc2VleHBfYXNzbigpO1xuICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTg1KHMxLCBzMywgczUpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZWV4cF9jb25kKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlb3BfY29tcF9hc3NuKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzO1xuXG4gICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMTg2KSB7XG4gICAgICBzMCA9IHBlZyRjMTg2O1xuICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE4Nyk7IH1cbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMxODgpIHtcbiAgICAgICAgczAgPSBwZWckYzE4ODtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE4OSk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMxOTApIHtcbiAgICAgICAgICBzMCA9IHBlZyRjMTkwO1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOTEpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMTkyKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMTkyO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE5Myk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMxOTQpIHtcbiAgICAgICAgICAgICAgczAgPSBwZWckYzE5NDtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE5NSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAzKSA9PT0gcGVnJGMxOTYpIHtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMTk2O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDM7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOTcpOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMykgPT09IHBlZyRjMTk4KSB7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMTk4O1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE5OSk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzIwMDtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIwMSk7IH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGMyMDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjAyO1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMDMpOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWlkZW50aWZpZXJDaGFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyMDQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzIwNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzIwNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMDYpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDYpID09PSBwZWckYzIwNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjA3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA2O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjA4KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWlkZW50aWZpZXJDaGFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjA5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzIxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMyMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIxMSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDUpID09PSBwZWckYzIxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzIxMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMTMpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczMgPSBwZWckcGFyc2VpZGVudGlmaWVyQ2hhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyMTQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VleHBfY29uc3QoKTogYW55IHtcbiAgICBsZXQgczAsIHMxO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWV4cF9jb25kKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGMyMTUoczEpO1xuICAgIH1cbiAgICBzMCA9IHMxO1xuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZXhwX2NvbmQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzOCwgczk7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlZXhwX29yKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2Mykge1xuICAgICAgICAgIHMzID0gcGVnJGMyMTY7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIxNyk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRwYXJzZWV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTgpIHtcbiAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGMxNjtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNyk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczggIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckcGFyc2VleHBfYXNzbigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjE4KHMxLCBzNSwgczkpO1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRwYXJzZWV4cF9vcigpO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWV4cF9vcigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczcsIHM4O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWV4cF9hbmQoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzIxOSkge1xuICAgICAgICAgIHM1ID0gcGVnJGMyMTk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIyMCk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzIyMSkge1xuICAgICAgICAgICAgczYgPSBwZWckYzIyMTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMjIpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczcgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgczggPSBwZWckcGFyc2VpZGVudGlmaWVyQ2hhcigpO1xuICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICBpZiAoczggPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM3O1xuICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBbczYsIHM3XTtcbiAgICAgICAgICAgICAgczUgPSBzNjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczcgPSBwZWckcGFyc2VleHBfYW5kKCk7XG4gICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJGMyMjMoczEsIHM1LCBzNyk7XG4gICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjE5KSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRjMjE5O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIyMCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjIxKSB7XG4gICAgICAgICAgICAgIHM2ID0gcGVnJGMyMjE7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMjIpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTtcbiAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICAgIGlmIChzOCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM3ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczc7XG4gICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM2ID0gW3M2LCBzN107XG4gICAgICAgICAgICAgICAgczUgPSBzNjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM1O1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWV4cF9hbmQoKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzIyMyhzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMyMjQoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VleHBfYW5kKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNywgczg7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlZXhwX29yX2JpdCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjI1KSB7XG4gICAgICAgICAgczUgPSBwZWckYzIyNTtcbiAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjI2KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMykgPT09IHBlZyRjMjI3KSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRjMjI3O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIyOCk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgICAgICBzOCA9IHBlZyRwYXJzZWlkZW50aWZpZXJDaGFyKCk7XG4gICAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICAgIGlmIChzOCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczc7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IFtzNiwgczddO1xuICAgICAgICAgICAgICBzNSA9IHM2O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHM1O1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWV4cF9vcl9iaXQoKTtcbiAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgczQgPSBwZWckYzIyOShzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMyMjUpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJGMyMjU7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjI2KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAzKSA9PT0gcGVnJGMyMjcpIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckYzIyNztcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM2ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIyOCk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICAgICAgczggPSBwZWckcGFyc2VpZGVudGlmaWVyQ2hhcigpO1xuICAgICAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICAgICAgaWYgKHM4ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNztcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczYgPSBbczYsIHM3XTtcbiAgICAgICAgICAgICAgICBzNSA9IHM2O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM1O1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX29yX2JpdCgpO1xuICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzNCA9IHBlZyRjMjI5KHMxLCBzNSwgczcpO1xuICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzIyNChzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWV4cF9vcl9iaXQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzODtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VleHBfeG9yX2JpdCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAxMjQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRjMjMwO1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMzEpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczUgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA1KSA9PT0gcGVnJGMyMzIpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJGMyMzI7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSA1O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjMzKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM3ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTtcbiAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgICAgaWYgKHM4ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNztcbiAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM2ID0gW3M2LCBzN107XG4gICAgICAgICAgICAgIHM1ID0gczY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM1O1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX3hvcl9iaXQoKTtcbiAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgczQgPSBwZWckYzIzNChzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyNCkge1xuICAgICAgICAgICAgczUgPSBwZWckYzIzMDtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMzEpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDUpID09PSBwZWckYzIzMikge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRjMjMyO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA1O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjMzKTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZWlkZW50aWZpZXJDaGFyKCk7XG4gICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgICAgICBpZiAoczggPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM3O1xuICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNiA9IFtzNiwgczddO1xuICAgICAgICAgICAgICAgIHM1ID0gczY7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VleHBfeG9yX2JpdCgpO1xuICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzNCA9IHBlZyRjMjM0KHMxLCBzNSwgczcpO1xuICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzIzNShzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWV4cF94b3JfYml0KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VleHBfYW5kX2JpdCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5NCkge1xuICAgICAgICAgIHM1ID0gcGVnJGMyMzY7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIzNyk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAzKSA9PT0gcGVnJGMyMzgpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJGMyMzg7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSAzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjM5KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWV4cF9hbmRfYml0KCk7XG4gICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJGMyNDAoczEsIHM1LCBzNyk7XG4gICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5NCkge1xuICAgICAgICAgICAgczUgPSBwZWckYzIzNjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMzcpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMykgPT09IHBlZyRjMjM4KSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJGMyMzg7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMzkpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX2FuZF9iaXQoKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzI0MChzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMyMzUoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VleHBfYW5kX2JpdCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczcsIHM4O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWV4cF9lcSgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczUgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzOCkge1xuICAgICAgICAgIHM2ID0gcGVnJGMxNTg7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE1OSk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzgpIHtcbiAgICAgICAgICAgIHM4ID0gcGVnJGMxNTg7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzOCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTU5KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICBpZiAoczggPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM3ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHM3O1xuICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gW3M2LCBzN107XG4gICAgICAgICAgICBzNSA9IHM2O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHM1O1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHM1O1xuICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDYpID09PSBwZWckYzI0MSkge1xuICAgICAgICAgICAgczYgPSBwZWckYzI0MTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNDIpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczcgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgczggPSBwZWckcGFyc2VpZGVudGlmaWVyQ2hhcigpO1xuICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICBpZiAoczggPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM3O1xuICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBbczYsIHM3XTtcbiAgICAgICAgICAgICAgczUgPSBzNjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczcgPSBwZWckcGFyc2VleHBfZXEoKTtcbiAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgczQgPSBwZWckYzI0MyhzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzgpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJGMxNTg7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTU5KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM3ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzgpIHtcbiAgICAgICAgICAgICAgczggPSBwZWckYzE1ODtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM4ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE1OSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgICAgaWYgKHM4ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNztcbiAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM2ID0gW3M2LCBzN107XG4gICAgICAgICAgICAgIHM1ID0gczY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM1O1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDYpID09PSBwZWckYzI0MSkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRjMjQxO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA2O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjQyKTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZWlkZW50aWZpZXJDaGFyKCk7XG4gICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgICAgICAgICBpZiAoczggPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM3O1xuICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNiA9IFtzNiwgczddO1xuICAgICAgICAgICAgICAgIHM1ID0gczY7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VleHBfZXEoKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzI0MyhzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMyMzUoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VleHBfZXEoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzODtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VleHBfcmVsKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMyNDQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRjMjQ0O1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNDUpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjQ2KSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRjMjQ2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI0Nyk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNikgPT09IHBlZyRjMjQ4KSB7XG4gICAgICAgICAgICAgIHM2ID0gcGVnJGMyNDg7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNDkpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTtcbiAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICAgIGlmIChzOCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM3ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczc7XG4gICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHM1O1xuICAgICAgICAgICAgICAgIHM2ID0gcGVnJGMyNTAoczEpO1xuICAgICAgICAgICAgICAgIHM1ID0gczY7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczU7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczcgPSBwZWckcGFyc2VleHBfcmVsKCk7XG4gICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJGMxODIoczEsIHM1LCBzNyk7XG4gICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjQ0KSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRjMjQ0O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI0NSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMyNDYpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckYzI0NjtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI0Nyk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGMyNDgpIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRjMjQ4O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNDkpOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczcgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZWlkZW50aWZpZXJDaGFyKCk7XG4gICAgICAgICAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgICAgICAgICAgaWYgKHM4ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzNyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNztcbiAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzNTtcbiAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJGMyNTAoczEpO1xuICAgICAgICAgICAgICAgICAgczUgPSBzNjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNTtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VleHBfcmVsKCk7XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJGMxODIoczEsIHM1LCBzNyk7XG4gICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMjUxKHMxLCBzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZXhwX3JlbCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczc7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlZXhwX3NoaWZ0KCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZW9wX3JlbCgpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWV4cF9zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICBzNCA9IHBlZyRjMTgyKHMxLCBzNSwgczcpO1xuICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlb3BfcmVsKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VleHBfc2hpZnQoKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzE4MihzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMyNTEoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VvcF9yZWwoKTogYW55IHtcbiAgICBsZXQgczA7XG5cbiAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMyNTIpIHtcbiAgICAgIHMwID0gcGVnJGMyNTI7XG4gICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjUzKTsgfVxuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzI1NCkge1xuICAgICAgICBzMCA9IHBlZyRjMjU0O1xuICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjU1KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjApIHtcbiAgICAgICAgICBzMCA9IHBlZyRjMjU2O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNTcpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2Mikge1xuICAgICAgICAgICAgczAgPSBwZWckYzI1ODtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNTkpOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZXhwX3NoaWZ0KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VleHBfYWRkKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZW9wX3NoaWZ0KCk7XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX2FkZCgpO1xuICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICBzNCA9IHBlZyRjMTgyKHMxLCBzNSwgczcpO1xuICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlb3Bfc2hpZnQoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWV4cF9hZGQoKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzE4MihzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMyMzUoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VvcF9zaGlmdCgpOiBhbnkge1xuICAgIGxldCBzMDtcblxuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzI2MCkge1xuICAgICAgczAgPSBwZWckYzI2MDtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNjEpOyB9XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjYyKSB7XG4gICAgICAgIHMwID0gcGVnJGMyNjI7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNjMpOyB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZXhwX2FkZCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczc7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlZXhwX211bHQoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM1ID0gcGVnJHBhcnNlb3BfYWRkKCk7XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX211bHQoKTtcbiAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgczQgPSBwZWckYzE4MihzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZW9wX2FkZCgpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX211bHQoKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzE4MihzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMyMzUoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VvcF9hZGQoKTogYW55IHtcbiAgICBsZXQgczA7XG5cbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQzKSB7XG4gICAgICBzMCA9IHBlZyRjMjY0O1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI2NSk7IH1cbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ1KSB7XG4gICAgICAgIHMwID0gcGVnJGMyNjY7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNjcpOyB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZXhwX211bHQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWV4cF9wbSgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczUgPSBwZWckcGFyc2VvcF9tdWx0KCk7XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX3BtKCk7XG4gICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJGMxODIoczEsIHM1LCBzNyk7XG4gICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2VvcF9tdWx0KCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VleHBfcG0oKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzE4MihzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMyMzUoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VvcF9tdWx0KCk6IGFueSB7XG4gICAgbGV0IHMwO1xuXG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0Mikge1xuICAgICAgczAgPSBwZWckYzE1NTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNTYpOyB9XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0Nykge1xuICAgICAgICBzMCA9IHBlZyRjMjY4O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjY5KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzcpIHtcbiAgICAgICAgICBzMCA9IHBlZyRjMjcwO1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNzEpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VleHBfcG0oKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWV4cF9jYXN0KCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZW9wX3BtKCk7XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX2Nhc3QoKTtcbiAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgczQgPSBwZWckYzE4MihzMSwgczUsIHM3KTtcbiAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZW9wX3BtKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VleHBfY2FzdCgpO1xuICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzNCA9IHBlZyRjMTgyKHMxLCBzNSwgczcpO1xuICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzI3MihzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZW9wX3BtKCk6IGFueSB7XG4gICAgbGV0IHMwO1xuXG4gICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjczKSB7XG4gICAgICBzMCA9IHBlZyRjMjczO1xuICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI3NCk7IH1cbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAzKSA9PT0gcGVnJGMyNzUpIHtcbiAgICAgICAgczAgPSBwZWckYzI3NTtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI3Nik7IH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VleHBfY2FzdCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczc7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgIHMxID0gcGVnJGMzNztcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOCk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2V0eXBlX2lkKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckYzM5O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDApOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWV4cF9jYXN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyNzcoczMsIHM3KTtcbiAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckcGFyc2VleHBfdW5hcnkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VleHBfdW5hcnkoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMyNzgpIHtcbiAgICAgIHMxID0gcGVnJGMyNzg7XG4gICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjc5KTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWV4cF91bmFyeSgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMjgwKHMxLCBzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMyODEpIHtcbiAgICAgICAgczEgPSBwZWckYzI4MTtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI4Mik7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlZXhwX3VuYXJ5KCk7XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMyODMoczEsIHMzKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgczEgPSBwZWckcGFyc2VvcF91bmFyeSgpO1xuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWV4cF9jYXN0KCk7XG4gICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGMyODQoczEsIHMzKTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGMyODUpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGMyODU7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSA2O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjg2KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRwYXJzZWV4cF91bmFyeSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjg3KHMxLCBzMyk7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGMyODUpIHtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzI4NTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI4Nik7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgICAgICAgICAgICAgIHMzID0gcGVnJGMzNztcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOCk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczUgPSBwZWckcGFyc2VzaW1wbGVfdHlwZV9uYW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzM5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDApOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyODgoczEsIHM1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWV4cF9uZXcoKTtcbiAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckcGFyc2VleHBfZGVsZXRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VvcF91bmFyeSgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0Mikge1xuICAgICAgczEgPSBwZWckYzE1NTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNTYpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICBzMSA9IHBlZyRjMjg5KCk7XG4gICAgfVxuICAgIHMwID0gczE7XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzOCkge1xuICAgICAgICBzMSA9IHBlZyRjMTU4O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTU5KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMjkwKCk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDMpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjMjY0O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNjUpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzI5MSgpO1xuICAgICAgICB9XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NSkge1xuICAgICAgICAgICAgczEgPSBwZWckYzI2NjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNjcpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMjkyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzMykge1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMjkzO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjk0KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMjk1KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDMpID09PSBwZWckYzI5Nikge1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyOTY7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI5Nyk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTtcbiAgICAgICAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHMyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzI5NSgpO1xuICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDEyNikge1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzc0O1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzc1KTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzI5OCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDUpID09PSBwZWckYzI5OSkge1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjk5O1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSA1O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzAwKTsgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMjk4KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWV4cF9uZXcoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3LCBzOCwgczk7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDMpID09PSBwZWckYzMwMSkge1xuICAgICAgczEgPSBwZWckYzMwMTtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMDIpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VXUygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlbmV3X3R5cGVfaWQoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2VuZXdfaW5pdGlhbGl6ZXIoKTtcbiAgICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGMzMDMoczMsIHM1KTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMykgPT09IHBlZyRjMzAxKSB7XG4gICAgICAgIHMxID0gcGVnJGMzMDE7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMDIpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQwKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMzc7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzgpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNldHlwZV9pZCgpO1xuICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGMzOTtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQwKTsgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckcGFyc2VuZXdfaW5pdGlhbGl6ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczkgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHM5ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMzMDQoczUsIHM5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlbmV3X3R5cGVfaWQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZXR5cGVfc3BlY2lmaWVycygpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgIHMzID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNCA9IHBlZyRwYXJzZW5ld19kZWNsYXJhdG9yKCk7XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMyO1xuICAgICAgICAgIHMzID0gcGVnJGMzMDUoczEsIHM0KTtcbiAgICAgICAgICBzMiA9IHMzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMzA2KHMxLCBzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlbmV3X2RlY2xhcmF0b3IoKTogYW55IHtcbiAgICBsZXQgczAsIHMxO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZV9uZXdfZGVjbGFyYXRvcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICBzMSA9IHBlZyRjMzA3KHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZV9uZXdfZGVjbGFyYXRvcigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQyKSB7XG4gICAgICBzMSA9IHBlZyRjMTU1O1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE1Nik7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2Vjdl9xdWFsaWZpZXIoKTtcbiAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlX25ld19kZWNsYXJhdG9yKCk7XG4gICAgICAgICAgICBpZiAoczUgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMTU3KHMzLCBzNSk7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzgpIHtcbiAgICAgICAgczEgPSBwZWckYzE1ODtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE1OSk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlY3ZfcXVhbGlmaWVyKCk7XG4gICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlX25ld19kZWNsYXJhdG9yKCk7XG4gICAgICAgICAgICAgIGlmIChzNSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM1ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTYwKHMzLCBzNSk7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJHBhcnNlbmV3X2RlY2xhcmF0b3JfcG9zdGZpeGVzKCk7XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMzMDgoczEpO1xuICAgICAgICB9XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlbmV3X2RlY2xhcmF0b3JfcG9zdGZpeGVzKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBbXTtcbiAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMzID0gcGVnJHBhcnNlbmV3X2RlY2xhcmF0b3JfcG9zdGZpeCgpO1xuICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMxO1xuICAgICAgICBzMiA9IHBlZyRjMzA5KHMzKTtcbiAgICAgICAgczEgPSBzMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICB3aGlsZSAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAucHVzaChzMSk7XG4gICAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2VuZXdfZGVjbGFyYXRvcl9wb3N0Zml4KCk7XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMTtcbiAgICAgICAgICAgIHMyID0gcGVnJGMzMDkoczMpO1xuICAgICAgICAgICAgczEgPSBzMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZW5ld19kZWNsYXJhdG9yX3Bvc3RmaXgoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5MSkge1xuICAgICAgczEgPSBwZWckYzE2NDtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNjUpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlZXhwX2Fzc24oKTtcbiAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTMpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckYzE2NjtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE2Nyk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzMxMChzMyk7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlbmV3X2luaXRpYWxpemVyKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgIHMxID0gcGVnJGMzNztcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOCk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VleHBfbGlzdCgpO1xuICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRjMzk7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MCk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzMxMShzMyk7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZXhwX2RlbGV0ZSgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczc7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDYpID09PSBwZWckYzMxMikge1xuICAgICAgczEgPSBwZWckYzMxMjtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMTMpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VXUygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlZXhwX2Nhc3QoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzMxNChzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGMzMTIpIHtcbiAgICAgICAgczEgPSBwZWckYzMxMjtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gNjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMxMyk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTEpIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGMxNjQ7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTY1KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDkzKSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckYzE2NjtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTY3KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlV1MoKTtcbiAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX2Nhc3QoKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczEgPSBwZWckYzMxNShzNyk7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckcGFyc2VleHBfcG9zdGZpeCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWV4cF9wb3N0Zml4KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNywgczgsIHM5LCBzMTAsIHMxMSwgczEyLCBzMTM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDExKSA9PT0gcGVnJGMzMTYpIHtcbiAgICAgIHMxID0gcGVnJGMzMTY7XG4gICAgICBwZWckY3VyclBvcyArPSAxMTtcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMxNyk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MCkge1xuICAgICAgICAgIHMzID0gcGVnJGMyNTY7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI1Nyk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRwYXJzZXNpbXBsZV90eXBlX25hbWUoKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjIpIHtcbiAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGMyNTg7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjU5KTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckYzM3O1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOCk7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTAgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRwYXJzZWV4cF9jYXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczExICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTMgPSBwZWckYzM5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMzE4KHM1LCBzMTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMTIpID09PSBwZWckYzMxOSkge1xuICAgICAgICBzMSA9IHBlZyRjMzE5O1xuICAgICAgICBwZWckY3VyclBvcyArPSAxMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMyMCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjApIHtcbiAgICAgICAgICAgIHMzID0gcGVnJGMyNTY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjU3KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRwYXJzZXNpbXBsZV90eXBlX25hbWUoKTtcbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2Mikge1xuICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRjMjU4O1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjU5KTsgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckYzM3O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM4KTsgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRwYXJzZWV4cF9jYXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEzID0gcGVnJGMzOTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMzMjEoczUsIHMxMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMTYpID09PSBwZWckYzMyMikge1xuICAgICAgICAgIHMxID0gcGVnJGMzMjI7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMTY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMjMpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MCkge1xuICAgICAgICAgICAgICBzMyA9IHBlZyRjMjU2O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjU3KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckcGFyc2VzaW1wbGVfdHlwZV9uYW1lKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2Mikge1xuICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGMyNTg7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI1OSk7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJGMzNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM4KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHM5ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMxMCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTAgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckcGFyc2VleHBfY2FzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczEyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTMgPSBwZWckYzM5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDApOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMzMjQoczUsIHMxMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDEwKSA9PT0gcGVnJGMzMjUpIHtcbiAgICAgICAgICAgIHMxID0gcGVnJGMzMjU7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSAxMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMyNik7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MCkge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGMyNTY7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI1Nyk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzNSA9IHBlZyRwYXJzZXNpbXBsZV90eXBlX25hbWUoKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGMyNTg7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjU5KTsgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzOCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckYzM3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTAgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMSA9IHBlZyRwYXJzZWV4cF9jYXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczExICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMxMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMTMgPSBwZWckYzM5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczEzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMxMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMzI3KHM1LCBzMTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgICAgczEgPSBwZWckcGFyc2VleHBfY29uc3RydWN0KCk7XG4gICAgICAgICAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczEgPSBwZWckcGFyc2VleHBfcHJpbWFyeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMyID0gW107XG4gICAgICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczUgPSBwZWckcGFyc2VvcF9wb3N0Zml4KCk7XG4gICAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJGMzMjgoczEsIHM1KTtcbiAgICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczUgPSBwZWckcGFyc2VvcF9wb3N0Zml4KCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgICAgIHM0ID0gcGVnJGMzMjgoczEsIHM1KTtcbiAgICAgICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzMyOShzMSwgczIpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VvcF9wb3N0Zml4KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTEpIHtcbiAgICAgIHMxID0gcGVnJGMxNjQ7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTY1KTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWV4cHJlc3Npb24oKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5Mykge1xuICAgICAgICAgICAgICBzNSA9IHBlZyRjMTY2O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTY3KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMzMwKHMzKTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgICBzMSA9IHBlZyRjMzc7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlZXhwX2xpc3QoKTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJGMzOTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDApOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckYzMzMShzMyk7XG4gICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDYpIHtcbiAgICAgICAgICBzMSA9IHBlZyRjMzMyO1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMzMpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2VuYW1lKCk7XG4gICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGMzMzQoczMpO1xuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzMzNSkge1xuICAgICAgICAgICAgczEgPSBwZWckYzMzNTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMzYpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJHBhcnNlbmFtZSgpO1xuICAgICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMzM3KHMzKTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzI3OCkge1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMjc4O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjc5KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMzM4KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzI4MSkge1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyODE7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI4Mik7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMzM5KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VleHBfY29uc3RydWN0KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VzaW1wbGVfdHlwZV9uYW1lKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgICAgIHMzID0gcGVnJGMzNztcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzgpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2VleHBfbGlzdCgpO1xuICAgICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM1ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJGMzOTtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MCk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMzNDAoczEsIHM1KTtcbiAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZXhwX2xpc3QoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0LCBzNSwgczYsIHM3O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWV4cF9hc3NuKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgczUgPSBwZWckYzY2O1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM2Nyk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWV4cF9hc3NuKCk7XG4gICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJGMzNDEoczEsIHM3KTtcbiAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRjNjY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjcpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlZXhwX2Fzc24oKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzM0MShzMSwgczcpO1xuICAgICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzE3OChzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWV4cF9wcmltYXJ5KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgIHMxID0gcGVnJGMzNztcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOCk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VleHByZXNzaW9uKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckYzM5O1xuICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDApOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGMzNDIoczMpO1xuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJHBhcnNlbGl0ZXJhbCgpO1xuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzM0Mykge1xuICAgICAgICAgIHMxID0gcGVnJGMzNDM7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM0NCk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTtcbiAgICAgICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMyID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzM0NSgpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczAgPSBwZWckcGFyc2VleHBfaWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWV4cF9pZCgpOiBhbnkge1xuICAgIGxldCBzMCwgczE7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlcXVhbGlmaWVkX2lkKCk7XG4gICAgaWYgKHMxID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMSA9IHBlZyRwYXJzZW5hbWUoKTtcbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGMzNDYoczEpO1xuICAgIH1cbiAgICBzMCA9IHMxO1xuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlcXVhbGlmaWVkX2lkKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZW5lc3RlZF9uYW1lX3NwZWNpZmllcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlbmFtZSgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMzQ3KHMxLCBzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZW5lc3RlZF9uYW1lX3NwZWNpZmllcigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBbXTtcbiAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgIHMyID0gcGVnJHBhcnNldHlwZV9uYW1lX2lkKCk7XG4gICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZWlkZW50aWZpZXIoKTtcbiAgICB9XG4gICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMyA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMzQ4KSB7XG4gICAgICAgICAgczQgPSBwZWckYzM0ODtcbiAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzQ5KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMxO1xuICAgICAgICAgICAgczIgPSBwZWckYzM1MChzMik7XG4gICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHdoaWxlIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMC5wdXNoKHMxKTtcbiAgICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgICAgczIgPSBwZWckcGFyc2V0eXBlX25hbWVfaWQoKTtcbiAgICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckcGFyc2VpZGVudGlmaWVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMzQ4KSB7XG4gICAgICAgICAgICAgIHM0ID0gcGVnJGMzNDg7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNDkpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMTtcbiAgICAgICAgICAgICAgICBzMiA9IHBlZyRjMzUwKHMyKTtcbiAgICAgICAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMzQ4KSB7XG4gICAgICAgIHMxID0gcGVnJGMzNDg7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNDkpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMzUxKCk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZXR5cGVfbmFtZV9pZCgpOiBhbnkge1xuICAgIGxldCBzMCwgczE7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlc2ltcGxlX3R5cGVfbmFtZSgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICBzMSA9IHBlZyRjMzUyKHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZW5hbWUoKTogYW55IHtcbiAgICBsZXQgczA7XG5cbiAgICBzMCA9IHBlZyRwYXJzZW9wZXJhdG9yX2Z1bmN0aW9uX2lkKCk7XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRwYXJzZWlkZW50aWZpZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VvcGVyYXRvcl9mdW5jdGlvbl9pZCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgOCkgPT09IHBlZyRjMzUzKSB7XG4gICAgICBzMSA9IHBlZyRjMzUzO1xuICAgICAgcGVnJGN1cnJQb3MgKz0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM1NCk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VvdmVybG9hZGFibGVfb3AoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzM1NShzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZW92ZXJsb2FkYWJsZV9vcCgpOiBhbnkge1xuICAgIGxldCBzMDtcblxuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDUpID09PSBwZWckYzM1Nikge1xuICAgICAgczAgPSBwZWckYzM1NjtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNTcpOyB9XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgOCkgPT09IHBlZyRjMzU4KSB7XG4gICAgICAgIHMwID0gcGVnJGMzNTg7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNTkpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMykgPT09IHBlZyRjMzAxKSB7XG4gICAgICAgICAgczAgPSBwZWckYzMwMTtcbiAgICAgICAgICBwZWckY3VyclBvcyArPSAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzAyKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDYpID09PSBwZWckYzMxMikge1xuICAgICAgICAgICAgczAgPSBwZWckYzMxMjtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMTMpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMykgPT09IHBlZyRjMjc1KSB7XG4gICAgICAgICAgICAgIHMwID0gcGVnJGMyNzU7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNzYpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMykgPT09IHBlZyRjMTk2KSB7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckYzE5NjtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAzO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTk3KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDMpID09PSBwZWckYzE5OCkge1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzE5ODtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOTkpOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMTkyKSB7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMxOTI7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOTMpOyB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMTk0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzE5NDtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTk1KTsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzE4Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzE4NjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxODcpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMTg4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMxODg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxODkpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMTkwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzE5MDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTkxKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzIwNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzIwNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMDYpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMyMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMDEpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzIxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjExKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzI2MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzI2MDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNjEpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjYyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMyNjI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNjMpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjQ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzI0NDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjQ1KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzI0Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzI0NjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNDcpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjUyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMyNTI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNTMpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjU0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzI1NDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjU1KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzIyNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzIyNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMjYpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjE5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMyMTk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMjApOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMjc4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzI3ODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjc5KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzI4MSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzI4MTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyODIpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMzM1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGMzMzU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMzYpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMzYwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzM2MDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzYxKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzM2Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzM2MjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNjMpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0Mykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMjY0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjY1KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMjY2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNjcpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzE1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNTYpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0Nykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMjY4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjY5KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMzcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMjcwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNzEpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5NCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzIzNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMzcpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzOCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMTU4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTU5KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzIzMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjMxKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjNzQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNzUpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMjkzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjk0KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMTQwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNDEpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckYzI1NjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNTcpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2Mikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjMjU4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjU5KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjNjY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY3KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNldW5vdmVybG9hZGFibGVfb3AoKTogYW55IHtcbiAgICBsZXQgczA7XG5cbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ2KSB7XG4gICAgICBzMCA9IHBlZyRjMzMyO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMzMyk7IH1cbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMyNzMpIHtcbiAgICAgICAgczAgPSBwZWckYzI3MztcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI3NCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMzNDgpIHtcbiAgICAgICAgICBzMCA9IHBlZyRjMzQ4O1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNDkpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMzY0KSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRjMzY0O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM2NSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VsaXRlcmFsKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VsaXRlcmFsX2Zsb2F0KCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGMzNjYoczEpO1xuICAgIH1cbiAgICBzMCA9IHMxO1xuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlbGl0ZXJhbF9pbnQoKTtcbiAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzM2NyhzMSk7XG4gICAgICB9XG4gICAgICBzMCA9IHMxO1xuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJHBhcnNlbGl0ZXJhbF9jaGFyKCk7XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMzNjgoczEpO1xuICAgICAgICB9XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2VsaXRlcmFsX3N0cmluZygpO1xuICAgICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMzY5KHMxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICBzMSA9IHBlZyRwYXJzZWxpdGVyYWxfYm9vbGVhbigpO1xuICAgICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjMzcwKHMxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlbGl0ZXJhbF9pbnQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDUpIHtcbiAgICAgIHMxID0gcGVnJGMyNjY7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjY3KTsgfVxuICAgIH1cbiAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMxID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgaWYgKHBlZyRjMzcxLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczMgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzcyKTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgIGlmIChwZWckYzM3MS50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMyA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzcyKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMzczKHMxLCBzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlbGl0ZXJhbF9mbG9hdCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NSkge1xuICAgICAgczEgPSBwZWckYzI2NjtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNjcpOyB9XG4gICAgfVxuICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBpZiAocGVnJGMzNzQudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMyA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNzUpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgICAgaWYgKHBlZyRjMzc0LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMzID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNzUpOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMzID0gcGVnJGMzNzYoczEsIHMyKTtcbiAgICAgICAgaWYgKHMzKSB7XG4gICAgICAgICAgczMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMzNzcoczEsIHMyKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlbGl0ZXJhbF9jaGFyKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM5KSB7XG4gICAgICBzMSA9IHBlZyRjMzc4O1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM3OSk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBpZiAocGVnJGMzODAudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzODEpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2Vlc2NhcGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM5KSB7XG4gICAgICAgICAgczMgPSBwZWckYzM3ODtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzc5KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMzODIoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VsaXRlcmFsX3N0cmluZygpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzNCkge1xuICAgICAgczEgPSBwZWckYzM4MztcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzODQpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIGlmIChwZWckYzM4NS50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMzID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM4Nik7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWVzY2FwZSgpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBpZiAocGVnJGMzODUudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgIHMzID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzg2KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlZXNjYXBlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM0KSB7XG4gICAgICAgICAgczMgPSBwZWckYzM4MztcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzg0KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMzODcoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VsaXRlcmFsX2Jvb2xlYW4oKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDQpID09PSBwZWckYzM4OCkge1xuICAgICAgczEgPSBwZWckYzM4ODtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzODkpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgczMgPSBwZWckcGFyc2VpZGVudGlmaWVyQ2hhcigpO1xuICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMzOTAoKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNSkgPT09IHBlZyRjMzkxKSB7XG4gICAgICAgIHMxID0gcGVnJGMzOTE7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOTIpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTtcbiAgICAgICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMzOTMoKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZXNjYXBlKCk6IGFueSB7XG4gICAgbGV0IHMwO1xuXG4gICAgczAgPSBwZWckcGFyc2VzaW1wbGVfZXNjYXBlKCk7XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRwYXJzZW9jdGFsX2VzY2FwZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZXNpbXBsZV9lc2NhcGUoKTogYW55IHtcbiAgICBsZXQgczA7XG5cbiAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGMzOTQpIHtcbiAgICAgIHMwID0gcGVnJGMzOTQ7XG4gICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzk1KTsgfVxuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzM5Nikge1xuICAgICAgICBzMCA9IHBlZyRjMzk2O1xuICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzk3KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzM5OCkge1xuICAgICAgICAgIHMwID0gcGVnJGMzOTg7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM5OSk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM0MDApIHtcbiAgICAgICAgICAgIHMwID0gcGVnJGM0MDA7XG4gICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDAxKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzQwMikge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRjNDAyO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDAzKTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzQwNCkge1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJGM0MDQ7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQwNSk7IH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM0MDYpIHtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGM0MDY7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDA3KTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzQwOCkge1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjNDA4O1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDA5KTsgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzQxMCkge1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGM0MTA7XG4gICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQxMSk7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCAyKSA9PT0gcGVnJGM0MTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGM0MTI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDEzKTsgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzQxNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRjNDE0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDE1KTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIpID09PSBwZWckYzQxNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJGM0MTY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQxNyk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZW9jdGFsX2VzY2FwZSgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMztcblxuICAgIGlmIChwZWckYzQxOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDE5KTsgfVxuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBpZiAocGVnJGM0MTgudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MTkpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKHBlZyRjNDE4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQxOSk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMSA9IFtzMSwgczJdO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBpZiAocGVnJGM0MTgudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDE5KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChwZWckYzQxOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDE5KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChwZWckYzQxOC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgICAgICAgIHMzID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQxOSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMSA9IFtzMSwgczIsIHMzXTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VpZGVudGlmaWVyKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzO1xuXG4gICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWlkZW50aWZpZXJGaXJzdENoYXIoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRwYXJzZWlkZW50aWZpZXJDaGFyKCk7XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzQyMShzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MjApOyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlaWRlbnRpZmllckNoYXIoKTogYW55IHtcbiAgICBsZXQgczA7XG5cbiAgICBpZiAocGVnJGM0MjIudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgczAgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQyMyk7IH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VpZGVudGlmaWVyRmlyc3RDaGFyKCk6IGFueSB7XG4gICAgbGV0IHMwO1xuXG4gICAgaWYgKHBlZyRjNDI0LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMwID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MjUpOyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNld3MoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczM7XG5cbiAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gW107XG4gICAgaWYgKHBlZyRjNDI3LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MjgpOyB9XG4gICAgfVxuICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEucHVzaChzMik7XG4gICAgICBpZiAocGVnJGM0MjcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MjgpOyB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2Vjb21tZW50KCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMSA9IFtzMSwgczIsIHMzXTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBbXTtcbiAgICAgIGlmIChwZWckYzQyNy50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQyOCk7IH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMC5wdXNoKHMxKTtcbiAgICAgICAgaWYgKHBlZyRjNDI3LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQyOCk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MjYpOyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlV1MoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczM7XG5cbiAgICBwZWckc2lsZW50RmFpbHMrKztcbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlY29tbWVudCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VXUygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMxID0gW3MxLCBzMl07XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gW107XG4gICAgICBpZiAocGVnJGM0MjcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMiA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MjgpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgd2hpbGUgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczEucHVzaChzMik7XG4gICAgICAgICAgaWYgKHBlZyRjNDI3LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MjgpOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2Vjb21tZW50KCk7XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMxID0gW3MxLCBzMiwgczNdO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IFtdO1xuICAgICAgICBpZiAocGVnJGM0MjcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDI4KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHdoaWxlIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczAucHVzaChzMSk7XG4gICAgICAgICAgICBpZiAocGVnJGM0MjcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MjgpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MjkpOyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlY2xhc3Nfc3BlY2lmaWVyKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNywgczg7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlY2xhc3NfaGVhZCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMiA9IHBlZyRjNDMwKHMxKTtcbiAgICAgIGlmIChzMikge1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMiA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTIzKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRjMjk7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzApOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM2ID0gW107XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlbWVtYmVyX3NwZWNpZmljYXRpb24oKTtcbiAgICAgICAgICAgICAgd2hpbGUgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczYucHVzaChzNyk7XG4gICAgICAgICAgICAgICAgczcgPSBwZWckcGFyc2VtZW1iZXJfc3BlY2lmaWNhdGlvbigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gMTI1KSB7XG4gICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJGMzMjtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzMzKTsgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjNDMxKHMxLCBzNik7XG4gICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlY2xhc3NfaGVhZCgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNjtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VjbGFzc19rZXkoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNlV1MoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWlkZW50aWZpZXIoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZVdTKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNiA9IHBlZyRwYXJzZWJhc2VfY2xhdXNlKCk7XG4gICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczQ7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJGM0MzIoczEsIHMzLCBzNik7XG4gICAgICAgICAgICAgIHM0ID0gczU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczQ7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzQzMyhzMSwgczMsIHM0KTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlY2xhc3Nfa2V5KCk6IGFueSB7XG4gICAgbGV0IHMwO1xuXG4gICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNSkgPT09IHBlZyRjNDM0KSB7XG4gICAgICBzMCA9IHBlZyRjNDM0O1xuICAgICAgcGVnJGN1cnJQb3MgKz0gNTtcbiAgICB9IGVsc2Uge1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQzNSk7IH1cbiAgICB9XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGM0MzYpIHtcbiAgICAgICAgczAgPSBwZWckYzQzNjtcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gNjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQzNyk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA1KSA9PT0gcGVnJGM0MzgpIHtcbiAgICAgICAgICBzMCA9IHBlZyRjNDM4O1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0MzkpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VtZW1iZXJfc3BlY2lmaWNhdGlvbigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczcsIHM4O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IFtdO1xuICAgIHMyID0gcGVnJGN1cnJQb3M7XG4gICAgczMgPSBwZWckcGFyc2VtZW1iZXJfZGVjbGFyYXRpb24oKTtcbiAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMjtcbiAgICAgICAgczMgPSBwZWckYzQ0MChzMyk7XG4gICAgICAgIHMyID0gczM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMyO1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgd2hpbGUgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMxLnB1c2goczIpO1xuICAgICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMyA9IHBlZyRwYXJzZW1lbWJlcl9kZWNsYXJhdGlvbigpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMjtcbiAgICAgICAgICAgIHMzID0gcGVnJGM0NDAoczMpO1xuICAgICAgICAgICAgczIgPSBzMztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMjtcbiAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzQ0MShzMSk7XG4gICAgfVxuICAgIHMwID0gczE7XG4gICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgczEgPSBwZWckcGFyc2VhY2Nlc3Nfc3BlY2lmaWVyKCk7XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU4KSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRjMTY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTcpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM1ID0gW107XG4gICAgICAgICAgICAgIHM2ID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlbWVtYmVyX2RlY2xhcmF0aW9uKCk7XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgICAgICBpZiAoczggIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHM2O1xuICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzQ0MihzMSwgczcpO1xuICAgICAgICAgICAgICAgICAgczYgPSBzNztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNjtcbiAgICAgICAgICAgICAgICAgIHM2ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNjtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgd2hpbGUgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczUucHVzaChzNik7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckY3VyclBvcztcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZW1lbWJlcl9kZWNsYXJhdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczggPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHM2O1xuICAgICAgICAgICAgICAgICAgICBzNyA9IHBlZyRjNDQyKHMxLCBzNyk7XG4gICAgICAgICAgICAgICAgICAgIHM2ID0gczc7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHM2O1xuICAgICAgICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczY7XG4gICAgICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGM0NDMoczEsIHM1KTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlYWNjZXNzX3NwZWNpZmllcigpOiBhbnkge1xuICAgIGxldCBzMDtcblxuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDcpID09PSBwZWckYzQ0NCkge1xuICAgICAgczAgPSBwZWckYzQ0NDtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0NDUpOyB9XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgOSkgPT09IHBlZyRjNDQ2KSB7XG4gICAgICAgIHMwID0gcGVnJGM0NDY7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0NDcpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNikgPT09IHBlZyRjNDQ4KSB7XG4gICAgICAgICAgczAgPSBwZWckYzQ0ODtcbiAgICAgICAgICBwZWckY3VyclBvcyArPSA2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDQ5KTsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlbWVtYmVyX2RlY2xhcmF0aW9uKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWRlY2xfc3BlY2lmaWVycygpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckY3VyclBvcztcbiAgICAgIHBlZyRzaWxlbnRGYWlscysrO1xuICAgICAgczMgPSBwZWckcGFyc2VpZGVudGlmaWVyKCk7XG4gICAgICBwZWckc2lsZW50RmFpbHMtLTtcbiAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNlbWVtYmVyX2RlY2xhcmF0b3JfbGlzdCgpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTkpIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRjMjU7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzNiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI2KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGM0NTAoczEsIHM0KTtcbiAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlY29uc3RydWN0b3JfZGVmaW5pdGlvbigpO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA1OSkge1xuICAgICAgICAgICAgczMgPSBwZWckYzI1O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI2KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczMgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM0NTEoczEpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZWRlc3RydWN0b3JfZGVmaW5pdGlvbigpO1xuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDU5KSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJGMyNTtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzI2KTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHMzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzQ1MihzMSk7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgICAgczEgPSBwZWckcGFyc2VmdW5jdGlvbl9kZWZpbml0aW9uKCk7XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICAgICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA1OSkge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJGMyNTtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjYpOyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczMgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGM0NTMoczEpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VtZW1iZXJfZGVjbGFyYXRvcl9saXN0KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VtZW1iZXJfZGVjbGFyYXRvcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgIHM1ID0gcGVnJGM2NjtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjcpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczcgPSBwZWckcGFyc2VtZW1iZXJfZGVjbGFyYXRvcigpO1xuICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICBzNCA9IHBlZyRjNjgoczEsIHM3KTtcbiAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRjNjY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjcpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM2ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlbWVtYmVyX2RlY2xhcmF0b3IoKTtcbiAgICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczQgPSBwZWckYzY4KHMxLCBzNyk7XG4gICAgICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjNjkoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VtZW1iZXJfZGVjbGFyYXRvcigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWRlY2xhcmF0b3IoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDYxKSB7XG4gICAgICAgICAgczMgPSBwZWckYzE0MDtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTQxKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDgpIHtcbiAgICAgICAgICAgICAgczUgPSBwZWckYzQ1NDtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQ1NSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzQ1NihzMSk7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgIHMxID0gcGVnJHBhcnNlZGVjbGFyYXRvcigpO1xuICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA2MSkge1xuICAgICAgICAgICAgczMgPSBwZWckYzE0MDtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNDEpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDIxKSA9PT0gcGVnJGMxNDQpIHtcbiAgICAgICAgICAgICAgICBzNSA9IHBlZyRjMTQ0O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDIxO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMTQ1KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMxID0gcGVnJGM0NTcoczEpO1xuICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzMSA9IHBlZyRwYXJzZWRlY2xhcmF0b3IoKTtcbiAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczMgPSBwZWckcGFyc2VicmFjZV9vcl9lcXVhbF9pbml0aWFsaXplcigpO1xuICAgICAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMSA9IHBlZyRjNDU4KHMxLCBzMyk7XG4gICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJHBhcnNlZGVjbGFyYXRvcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlYmFzZV9jbGF1c2UoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNTgpIHtcbiAgICAgIHMxID0gcGVnJGMxNjtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxNyk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2ViYXNlX3NwZWNpZmllcl9saXN0KCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGM0NTkoczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2ViYXNlX3NwZWNpZmllcl9saXN0KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2ViYXNlX3NwZWNpZmllcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgIHM1ID0gcGVnJGM2NjtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNjcpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczYgPSBwZWckcGFyc2V3cygpO1xuICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczcgPSBwZWckcGFyc2ViYXNlX3NwZWNpZmllcigpO1xuICAgICAgICAgICAgaWYgKHM3ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICBzNCA9IHBlZyRjNDYwKHMxLCBzNyk7XG4gICAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0NCkge1xuICAgICAgICAgICAgczUgPSBwZWckYzY2O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczUgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzY3KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNld3MoKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWJhc2Vfc3BlY2lmaWVyKCk7XG4gICAgICAgICAgICAgIGlmIChzNyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMzO1xuICAgICAgICAgICAgICAgIHM0ID0gcGVnJGM0NjAoczEsIHM3KTtcbiAgICAgICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGM2OShzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWJhc2Vfc3BlY2lmaWVyKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDcpID09PSBwZWckYzc4KSB7XG4gICAgICBzMSA9IHBlZyRjNzg7XG4gICAgICBwZWckY3VyclBvcyArPSA3O1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNzkpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VXUygpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNlYWNjZXNzX3NwZWNpZmllcigpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZVdTKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMztcbiAgICAgICAgICAgIHM0ID0gcGVnJGM0NjEoczQpO1xuICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2VxdWFsaWZpZWRfY2xhc3NfbmFtZSgpO1xuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjNDYyKHMzLCBzNCk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgczIgPSBwZWckcGFyc2VhY2Nlc3Nfc3BlY2lmaWVyKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VXUygpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMTtcbiAgICAgICAgICBzMiA9IHBlZyRjNDYxKHMyKTtcbiAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNykgPT09IHBlZyRjNzgpIHtcbiAgICAgICAgICBzMiA9IHBlZyRjNzg7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgKz0gNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzc5KTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlV1MoKTtcbiAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJHBhcnNlcXVhbGlmaWVkX2NsYXNzX25hbWUoKTtcbiAgICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczEgPSBwZWckYzQ2MihzMSwgczQpO1xuICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHMxID0gcGVnJHBhcnNlYWNjZXNzX3NwZWNpZmllcigpO1xuICAgICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZVdTKCk7XG4gICAgICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMyA9IHBlZyRwYXJzZXF1YWxpZmllZF9jbGFzc19uYW1lKCk7XG4gICAgICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGM0NjMoczEsIHMzKTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczAgPSBwZWckY3VyclBvcztcbiAgICAgICAgICBzMSA9IHBlZyRwYXJzZXF1YWxpZmllZF9jbGFzc19uYW1lKCk7XG4gICAgICAgICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM0NjQoczEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlcXVhbGlmaWVkX2NsYXNzX25hbWUoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlbmVzdGVkX25hbWVfc3BlY2lmaWVyKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VpZGVudGlmaWVyKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGM0NjUoczEsIHMzKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckcGFyc2VpZGVudGlmaWVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cblxyXG4gICAgZnVuY3Rpb24gY29tcG9zZUJpbmFyeU9wKGZpcnN0OiBhbnksIHJlc3Q6IGFueSwgYXNzb2M6IFwibGVmdFwiIHwgXCJyaWdodFwiLCBleHByVHlwZTogc3RyaW5nKSA6IGFueSB7XHJcbiAgICAgIGlmKCFyZXN0IHx8IHJlc3QubGVuZ3RoID09PSAwKXtcclxuICAgICAgICByZXR1cm4gZmlyc3Q7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGFzc29jID09PSBcImxlZnRcIil7XHJcbiAgICAgICAgbGV0IHJpZ2h0ID0gcmVzdC5wb3AoKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgY29uc3RydWN0X3R5cGU6IGV4cHJUeXBlLFxyXG4gICAgICAgICAgb3BlcmF0b3I6IHJpZ2h0WzBdLFxyXG4gICAgICAgICAgbGVmdDogY29tcG9zZUJpbmFyeU9wKGZpcnN0LCByZXN0LCBhc3NvYywgZXhwclR5cGUpLFxyXG4gICAgICAgICAgcmlnaHQ6IHJpZ2h0WzFdLFxyXG4gICAgICAgICAgYXNzb2NpYXRpdml0eTogYXNzb2NcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZXtcclxuICAgICAgICBsZXQgbGVmdCA9IHJlc3Quc2hpZnQoKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgY29uc3RydWN0X3R5cGU6IGV4cHJUeXBlLFxyXG4gICAgICAgICAgb3BlcmF0b3I6IGxlZnRbMF0sXHJcbiAgICAgICAgICBsZWZ0OiBmaXJzdCxcclxuICAgICAgICAgIHJpZ2h0OiBjb21wb3NlQmluYXJ5T3AobGVmdFsxXSwgcmVzdCwgYXNzb2MsIGV4cHJUeXBlKSxcclxuICAgICAgICAgIGFzc29jaWF0aXZpdHk6IGFzc29jXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWJzb3JiKGVhdGVyOiBhbnksIGVhdGVuOiBhbnkpe1xyXG4gICAgICBpZiAoIWVhdGVuKXsgcmV0dXJuIGVhdGVyOyB9XHJcbiAgICAgIGZvciAobGV0IGF0dHIgaW4gZWF0ZW4pe1xyXG4gICAgICAgIGlmKGF0dHIgIT0gXCJzdGFydFwiICYmIGF0dHIgIT0gXCJlbmRcIil7XHJcbiAgICAgICAgICBlYXRlclthdHRyXSA9IGVhdGVuW2F0dHJdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZWF0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdHJhY2sob2JqOiBhbnksIGxvY2F0aW9uOiBhbnksIHRleHQ6IHN0cmluZykge1xyXG4gICAgICBvYmouc291cmNlID0ge1xyXG4gICAgICAgIGxvY2F0aW9uIDogbG9jYXRpb24sXHJcbiAgICAgICAgc3RhcnQgOiBsb2NhdGlvbi5zdGFydC5vZmZzZXQsXHJcbiAgICAgICAgdGV4dCA6IHRleHQsXHJcbiAgICAgICAgbGluZSA6IGxvY2F0aW9uLnN0YXJ0LmxpbmUsXHJcbiAgICAgICAgY29sdW1uIDogbG9jYXRpb24uc3RhcnQuY29sdW1uLFxyXG4gICAgICAgIGVuZCA6IGxvY2F0aW9uLnN0YXJ0Lm9mZnNldCArIHRleHQubGVuZ3RoXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcG9zdGZpeEV4cChvcHM6IGFueSwgc3ViOiBhbnkpe1xyXG4gICAgICBpZihvcHMubGVuZ3RoID09IDApe1xyXG4gICAgICAgIHJldHVybiBzdWI7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZXtcclxuICAgICAgICBsZXQgb3AgPSBvcHMucG9wKCk7XHJcbiAgICAgICAgb3Aub3BlcmFuZCA9IHBvc3RmaXhFeHAob3BzLCBzdWIpO1xyXG4gICAgICAgIHJldHVybiBvcDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBfdXNlclR5cGVOYW1lcyA9IHt9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldFVzZXJUeXBlTmFtZXMoKSA6IGFueSB7XHJcbiAgICAgIC8vaWYgKHR5cGVvZiBUeXBlcyAhPT0gXCJ1bmRlZmluZWRcIil7XHJcbiAgICAgIC8vICByZXR1cm4gVHlwZXMudXNlclR5cGVOYW1lcztcclxuICAgICAgLy99XHJcbiAgICAgIC8vZWxzZXtcclxuICAgICAgICByZXR1cm4gX3VzZXJUeXBlTmFtZXM7XHJcbiAgICAgIC8vfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzVXNlclR5cGVOYW1lKG5hbWU6IHN0cmluZykge1xyXG4gICAgICByZXR1cm4gZ2V0VXNlclR5cGVOYW1lcygpW25hbWVdO1xyXG4gICAgfVxyXG5cclxuXG5cbiAgcGVnJHJlc3VsdCA9IHBlZyRzdGFydFJ1bGVGdW5jdGlvbigpO1xuXG4gIGlmIChwZWckcmVzdWx0ICE9PSBwZWckRkFJTEVEICYmIHBlZyRjdXJyUG9zID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICByZXR1cm4gcGVnJHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICBpZiAocGVnJHJlc3VsdCAhPT0gcGVnJEZBSUxFRCAmJiBwZWckY3VyclBvcyA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgcGVnJGZhaWwocGVnJGVuZEV4cGVjdGF0aW9uKCkpO1xuICAgIH1cblxuICAgIHRocm93IHBlZyRidWlsZFN0cnVjdHVyZWRFcnJvcihcbiAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQsXG4gICAgICBwZWckbWF4RmFpbFBvcyA8IGlucHV0Lmxlbmd0aCA/IGlucHV0LmNoYXJBdChwZWckbWF4RmFpbFBvcykgOiBudWxsLFxuICAgICAgcGVnJG1heEZhaWxQb3MgPCBpbnB1dC5sZW5ndGhcbiAgICAgICAgPyBwZWckY29tcHV0ZUxvY2F0aW9uKHBlZyRtYXhGYWlsUG9zLCBwZWckbWF4RmFpbFBvcyArIDEpXG4gICAgICAgIDogcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckbWF4RmFpbFBvcywgcGVnJG1heEZhaWxQb3MpXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQYXJzZU9wdGlvbnMge1xuICBmaWxlbmFtZT86IHN0cmluZztcbiAgc3RhcnRSdWxlPzogc3RyaW5nO1xuICB0cmFjZXI/OiBhbnk7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cbmV4cG9ydCB0eXBlIFBhcnNlRnVuY3Rpb24gPSAoaW5wdXQ6IHN0cmluZywgb3B0aW9ucz86IElQYXJzZU9wdGlvbnMpID0+IGFueTtcbmV4cG9ydCBjb25zdCBwYXJzZTogUGFyc2VGdW5jdGlvbiA9IHBlZyRwYXJzZTtcblxuIiwiXHJcbmltcG9ydCB7U3ludGF4RXJyb3IsIHBhcnNlIGFzIGNwcF9wYXJzZX0gZnJvbSBcIi4uL3BhcnNlL2NwcF9wYXJzZXJcIjtcclxuaW1wb3J0IHsgTm90ZUhhbmRsZXIsIE5vdGUsIE5vdGVLaW5kLCBTeW50YXhOb3RlLCBDUFBFcnJvciB9IGZyb20gXCIuL2Vycm9yc1wiO1xyXG5pbXBvcnQgeyBNdXRhYmxlLCBhc011dGFibGUsIGFzc2VydEZhbHNlLCBhc3NlcnQgfSBmcm9tIFwiLi4vdXRpbC91dGlsXCI7XHJcbmltcG9ydCB7IEdsb2JhbE9iamVjdERlZmluaXRpb24sIExpbmtlZERlZmluaXRpb24sIEZ1bmN0aW9uRGVmaW5pdGlvbiwgc2VsZWN0T3ZlcmxvYWRlZERlZmluaXRpb24sIENvbXBpbGVkRnVuY3Rpb25EZWZpbml0aW9uLCBDb21waWxlZEdsb2JhbE9iamVjdERlZmluaXRpb24sIERlY2xhcmF0aW9uQVNUTm9kZSwgRGVjbGFyYXRpb24sIGNyZWF0ZURlY2xhcmF0aW9uRnJvbUFTVCB9IGZyb20gXCIuL2RlY2xhcmF0aW9uc1wiO1xyXG5pbXBvcnQgeyBGdW5jdGlvbkNhbGwgfSBmcm9tIFwiLi9mdW5jdGlvbnNcIjtcclxuaW1wb3J0IHsgTGlua2VkRW50aXR5LCBOYW1lc3BhY2VTY29wZSwgU3RhdGljRW50aXR5LCBTdHJpbmdMaXRlcmFsRW50aXR5IH0gZnJvbSBcIi4vZW50aXRpZXNcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuLi91dGlsL29ic2VydmVcIjtcclxuaW1wb3J0IHsgVHJhbnNsYXRpb25Vbml0Q29udGV4dCwgQ1BQQ29uc3RydWN0LCBjcmVhdGVUcmFuc2xhdGlvblVuaXRDb250ZXh0LCBQcm9ncmFtQ29udGV4dCwgR2xvYmFsT2JqZWN0QWxsb2NhdG9yLCBDb21waWxlZEdsb2JhbE9iamVjdEFsbG9jYXRvciB9IGZyb20gXCIuL2NvbnN0cnVjdHNcIjtcclxuXHJcblxyXG5cclxuLy9UT0RPOiBSZW1vdmUgdGhpcyBvbmNlIEknbSBjb25maWRlbnQgSSBkb24ndCBuZWVkIGl0XHJcbi8vIHZhciBDb21wb3VuZE5vdGVIYW5kbGVyID0gTm90ZUhhbmRsZXIuZXh0ZW5kKHtcclxuLy8gICAgIF9uYW1lIDogXCJDb21wb3VuZE5vdGVIYW5kbGVyXCIsXHJcbi8vXHJcbi8vICAgICBpbnN0YW5jZSA6IGZ1bmN0aW9uKGhhbmRsZXIxLCBoYW5kbGVyMikge1xyXG4vLyAgICAgICAgIGlmICghaGFuZGxlcjEpIHtcclxuLy8gICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIyO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBpZiAoIWhhbmRsZXIyKSB7XHJcbi8vICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyMTtcclxuLy8gICAgICAgICB9XHJcbi8vXHJcbi8vICAgICAgICAgcmV0dXJuIHRoaXMuX2NsYXNzLl9wYXJlbnQuaW5zdGFuY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuLy8gICAgIH0sXHJcbi8vXHJcbi8vICAgICAvKipcclxuLy8gICAgICAqXHJcbi8vICAgICAgKiBAcGFyYW0ge05vdGVIYW5kbGVyfSBoYW5kbGVyMVxyXG4vLyAgICAgICogQHBhcmFtIHtOb3RlSGFuZGxlcn0gaGFuZGxlcjJcclxuLy8gICAgICAqL1xyXG4vLyAgICAgaW5pdCA6IGZ1bmN0aW9uKGhhbmRsZXIxLCBoYW5kbGVyMikge1xyXG4vLyAgICAgICAgIHRoaXMuaV9oYW5kbGVyMSA9IGhhbmRsZXIxO1xyXG4vLyAgICAgICAgIHRoaXMuaV9oYW5kbGVyMiA9IGhhbmRsZXIyO1xyXG4vLyAgICAgfSxcclxuLy9cclxuLy8gICAgIC8qKlxyXG4vLyAgICAgICpcclxuLy8gICAgICAqIEBwYXJhbSB7UHJlcHJvY2Vzc29yTm90ZX0gbm90ZVxyXG4vLyAgICAgICovXHJcbi8vICAgICBwcmVwcm9jZXNzb3JOb3RlIDogZnVuY3Rpb24obm90ZSkge1xyXG4vLyAgICAgICAgIHRoaXMuaV9oYW5kbGVyMS5wcmVwcm9jZXNzb3JOb3RlKG5vdGUpO1xyXG4vLyAgICAgICAgIHRoaXMuaV9oYW5kbGVyMi5wcmVwcm9jZXNzb3JOb3RlKG5vdGUpO1xyXG4vLyAgICAgfSxcclxuLy9cclxuLy9cclxuLy8gICAgIC8qKlxyXG4vLyAgICAgICpcclxuLy8gICAgICAqIEBwYXJhbSB7Q29tcGlsZXJOb3RlfSBub3RlXHJcbi8vICAgICAgKi9cclxuLy8gICAgIGNvbXBpbGVyTm90ZSA6IGZ1bmN0aW9uKG5vdGUpIHtcclxuLy8gICAgICAgICB0aGlzLmlfaGFuZGxlcjEuY29tcGlsZXJOb3RlKG5vdGUpO1xyXG4vLyAgICAgICAgIHRoaXMuaV9oYW5kbGVyMi5jb21waWxlck5vdGUobm90ZSk7XHJcbi8vICAgICB9LFxyXG4vL1xyXG4vL1xyXG4vL1xyXG4vLyAgICAgLyoqXHJcbi8vICAgICAgKlxyXG4vLyAgICAgICogQHBhcmFtIHtMaW5rZXJOb3RlfSBub3RlXHJcbi8vICAgICAgKi9cclxuLy8gICAgIGxpbmtlck5vdGUgOiBmdW5jdGlvbihub3RlKSB7XHJcbi8vICAgICAgICAgdGhpcy5pX2hhbmRsZXIxLmxpbmtlck5vdGUobm90ZSk7XHJcbi8vICAgICAgICAgdGhpcy5pX2hhbmRsZXIyLmxpbmtlck5vdGUobm90ZSk7XHJcbi8vICAgICB9XHJcbi8vXHJcbi8vXHJcbi8vIH0pO1xyXG5cclxuZXhwb3J0IGNsYXNzIE5vdGVSZWNvcmRlciBpbXBsZW1lbnRzIE5vdGVIYW5kbGVyIHtcclxuICAgIFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfYWxsTm90ZXM6IE5vdGVbXSA9IFtdO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGFsbE5vdGVzOiByZWFkb25seSBOb3RlW10gPSB0aGlzLl9hbGxOb3RlcztcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaGFzRXJyb3JzOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaGFzU3ludGF4RXJyb3JzOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaGFzV2FybmluZ3M6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgYWRkTm90ZShub3RlOiBOb3RlKSB7XHJcbiAgICAgICAgdGhpcy5fYWxsTm90ZXMucHVzaChub3RlKTtcclxuXHJcbiAgICAgICAgbGV0IF90aGlzID0gKDxNdXRhYmxlPHRoaXM+PnRoaXMpO1xyXG5cclxuICAgICAgICBpZiAobm90ZS5raW5kID09PSBOb3RlS2luZC5FUlJPUikge1xyXG4gICAgICAgICAgICBfdGhpcy5oYXNFcnJvcnMgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5vdGUgaW5zdGFuY2VvZiBTeW50YXhOb3RlKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5oYXNTeW50YXhFcnJvcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG5vdGUua2luZCA9PT0gTm90ZUtpbmQuV0FSTklORykge1xyXG4gICAgICAgICAgICBfdGhpcy5oYXNXYXJuaW5ncyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGROb3Rlcyhub3RlczogcmVhZG9ubHkgTm90ZVtdKSB7XHJcbiAgICAgICAgbm90ZXMuZm9yRWFjaCgobm90ZSkgPT4gdGhpcy5hZGROb3RlKG5vdGUpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xlYXJOb3RlcygpIHtcclxuICAgICAgICB0aGlzLl9hbGxOb3Rlcy5sZW5ndGggPSAwO1xyXG4gICAgICAgIGxldCBfdGhpcyA9ICg8TXV0YWJsZTx0aGlzPj50aGlzKTtcclxuICAgICAgICBfdGhpcy5oYXNFcnJvcnMgPSBmYWxzZTtcclxuICAgICAgICBfdGhpcy5oYXNTeW50YXhFcnJvcnMgPSBmYWxzZTtcclxuICAgICAgICBfdGhpcy5oYXNXYXJuaW5ncyA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqXHJcbiAqIFRoZSBwcm9ncmFtIGFsc28gbmVlZHMgdG8ga25vdyBhYm91dCBhbGwgc291cmNlIGZpbGVzIGludm9sdmVkIHNvIHRoYXQgI2luY2x1ZGUgcHJlcHJvY2Vzc29yXHJcbiAqIGRpcmVjdGl2ZXMgY2FuIGJlIHByb2Nlc3NlZC5cclxuICpcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQcm9ncmFtIHtcclxuICAgIFxyXG4gICAgLy8gcHVibGljIHJlYWRvbmx5IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSh0aGlzKTtcclxuICAgIFxyXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRleHQ6IFByb2dyYW1Db250ZXh0ID0ge3Byb2dyYW06IHRoaXN9O1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNDb21waWxhdGlvblVwVG9EYXRlOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc291cmNlRmlsZXMgOiB7IFtpbmRleDogc3RyaW5nXTogU291cmNlRmlsZSB9ID0ge307XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdHJhbnNsYXRpb25Vbml0cyA6IHsgW2luZGV4OiBzdHJpbmddOiBUcmFuc2xhdGlvblVuaXQgfSA9IHt9O1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZ2xvYmFsT2JqZWN0czogcmVhZG9ubHkgR2xvYmFsT2JqZWN0RGVmaW5pdGlvbltdID0gW107XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZ2xvYmFsT2JqZWN0QWxsb2NhdG9yITogR2xvYmFsT2JqZWN0QWxsb2NhdG9yO1xyXG4gICAgXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZ1bmN0aW9uQ2FsbHM6IHJlYWRvbmx5IEZ1bmN0aW9uQ2FsbFtdID0gW107XHJcbiAgICBcclxuICAgIHB1YmxpYyByZWFkb25seSBkZWZpbml0aW9uczoge1xyXG4gICAgICAgIFtpbmRleDogc3RyaW5nXSA6IExpbmtlZERlZmluaXRpb25cclxuICAgIH0gPSB7fTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbGlua2VkRW50aXRpZXM6IHJlYWRvbmx5IExpbmtlZEVudGl0eVtdID0gW107XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG5vdGVzID0gbmV3IE5vdGVSZWNvcmRlcigpO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBtYWluRnVuY3Rpb24/OiBGdW5jdGlvbkRlZmluaXRpb247XHJcblxyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihzb3VyY2VGaWxlczogcmVhZG9ubHkgU291cmNlRmlsZVtdLCB0cmFuc2xhdGlvblVuaXRzOiByZWFkb25seSBzdHJpbmdbXSkge1xyXG5cclxuICAgICAgICBzb3VyY2VGaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZUZpbGVzW2ZpbGUubmFtZV0gPSBmaWxlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0cmFuc2xhdGlvblVuaXRzLmZvckVhY2goKHR1TmFtZSkgPT4ge1xyXG4gICAgICAgICAgICBhc3NlcnQoISF0aGlzLnNvdXJjZUZpbGVzW3R1TmFtZV0sIGBTb3VyY2UgZmlsZSAke3R1TmFtZX0gbm90IGZvdW5kLmApO1xyXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uVW5pdHNbdHVOYW1lXSA9IG5ldyBUcmFuc2xhdGlvblVuaXQodGhpcyxcclxuICAgICAgICAgICAgICAgIG5ldyBQcmVwcm9jZXNzZWRTb3VyY2UodGhpcy5zb3VyY2VGaWxlc1t0dU5hbWVdLCB0aGlzLnNvdXJjZUZpbGVzKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yKGxldCB0dU5hbWUgaW4gdGhpcy50cmFuc2xhdGlvblVuaXRzKSB7XHJcbiAgICAgICAgICAgIGxldCB0dSA9IHRoaXMudHJhbnNsYXRpb25Vbml0c1t0dU5hbWVdO1xyXG4gICAgICAgICAgICB0aGlzLm5vdGVzLmFkZE5vdGVzKHR1Lm5vdGVzLmFsbE5vdGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCF0aGlzLm5vdGVzLmhhc1N5bnRheEVycm9ycykge1xyXG4gICAgICAgICAgICB0aGlzLmxpbmsoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICg8TXV0YWJsZTx0aGlzPj50aGlzKS5pc0NvbXBpbGF0aW9uVXBUb0RhdGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGFkZFNvdXJjZUZpbGUgOiBmdW5jdGlvbihzb3VyY2VGaWxlKSB7XHJcbiAgICAvLyAgICAgYXNzZXJ0KCF0aGlzLmlfc291cmNlRmlsZXNbc291cmNlRmlsZS5nZXROYW1lKCldKTtcclxuICAgIC8vICAgICB0aGlzLmlfc291cmNlRmlsZXNbc291cmNlRmlsZS5nZXROYW1lKCldID0gc291cmNlRmlsZTtcclxuICAgIC8vICAgICB0aGlzLmxpc3RlblRvKHNvdXJjZUZpbGUpO1xyXG4gICAgLy8gICAgIHRoaXMuc2VuZChcInNvdXJjZUZpbGVBZGRlZFwiLCBzb3VyY2VGaWxlKTtcclxuICAgIC8vIH0sXHJcblxyXG4gICAgLy8gcmVtb3ZlU291cmNlRmlsZSA6IGZ1bmN0aW9uKHNvdXJjZUZpbGUpIHtcclxuICAgIC8vICAgICBpZiAodHlwZW9mIHNvdXJjZUZpbGUgIT09IFwic3RyaW5nXCIpe1xyXG4gICAgLy8gICAgICAgICBzb3VyY2VGaWxlID0gc291cmNlRmlsZS5nZXROYW1lKCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGlmKHRoaXMuaV9zb3VyY2VGaWxlc1tzb3VyY2VGaWxlXSl7XHJcbiAgICAvLyAgICAgICAgIGRlbGV0ZSB0aGlzLmlfc291cmNlRmlsZXNbc291cmNlRmlsZV07XHJcbiAgICAvLyAgICAgfVxyXG5cclxuICAgIC8vICAgICB0aGlzLnN0b3BMaXN0ZW5pbmdUbyhzb3VyY2VGaWxlKTtcclxuXHJcbiAgICAvLyAgICAgLy8gQWxzbyByZW1vdmUgYW55IGFzc29jaWF0ZWQgdHJhbnNsYXRpb24gdW5pdCAoaWYgaXQgZXhpc3RzKVxyXG4gICAgLy8gICAgIHRoaXMucmVtb3ZlVHJhbnNsYXRpb25Vbml0KHNvdXJjZUZpbGUpO1xyXG4gICAgLy8gICAgIHRoaXMuc2VuZChcInNvdXJjZUZpbGVSZW1vdmVkXCIsIHNvdXJjZUZpbGUpO1xyXG4gICAgLy8gfSxcclxuXHJcbiAgICAvLyBnZXRTb3VyY2VGaWxlIDogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmlfc291cmNlRmlsZXNbbmFtZV07XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIGdldFNvdXJjZUZpbGVzIDogZnVuY3Rpb24oKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuaV9zb3VyY2VGaWxlcztcclxuICAgIC8vIH0sXHJcblxyXG4gICAgLy8gY3JlYXRlVHJhbnNsYXRpb25Vbml0Rm9yU291cmNlRmlsZSA6IGZ1bmN0aW9uKHNvdXJjZUZpbGVOYW1lKSB7XHJcbiAgICAvLyAgICAgaWYgKHR5cGVvZiBzb3VyY2VGaWxlTmFtZSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgLy8gICAgICAgICBzb3VyY2VGaWxlTmFtZSA9IHNvdXJjZUZpbGVOYW1lLmdldE5hbWUoKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgYXNzZXJ0KHRoaXMuaV9zb3VyY2VGaWxlc1tzb3VyY2VGaWxlTmFtZV0pO1xyXG4gICAgLy8gICAgIGFzc2VydCghdGhpcy5pX3RyYW5zbGF0aW9uVW5pdHNbc291cmNlRmlsZU5hbWVdKTtcclxuXHJcbiAgICAvLyAgICAgdmFyIHR1ID0gVHJhbnNsYXRpb25Vbml0Lmluc3RhbmNlKHRoaXMsIHRoaXMuaV9zb3VyY2VGaWxlc1tzb3VyY2VGaWxlTmFtZV0pO1xyXG4gICAgLy8gICAgIHRoaXMuaV90cmFuc2xhdGlvblVuaXRzW3R1LmdldE5hbWUoKV0gPSB0dTtcclxuXHJcbiAgICAvLyAgICAgdGhpcy5pX3NldENvbXBpbGF0aW9uVXBUb0RhdGUoZmFsc2UpO1xyXG5cclxuICAgIC8vICAgICB0aGlzLnNlbmQoXCJ0cmFuc2xhdGlvblVuaXRDcmVhdGVkXCIsIHR1KTtcclxuICAgIC8vICAgICByZXR1cm4gdHU7XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIHJlbW92ZVRyYW5zbGF0aW9uVW5pdCA6IGZ1bmN0aW9uKHRyYW5zbGF0aW9uVW5pdCkge1xyXG4gICAgLy8gICAgIGlmICh0eXBlb2YgdHJhbnNsYXRpb25Vbml0ICE9PSBcInN0cmluZ1wiKXtcclxuICAgIC8vICAgICAgICAgdHJhbnNsYXRpb25Vbml0ID0gdHJhbnNsYXRpb25Vbml0LmdldE5hbWUoKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgaWYodGhpcy5pX3RyYW5zbGF0aW9uVW5pdHNbdHJhbnNsYXRpb25Vbml0XSl7XHJcbiAgICAvLyAgICAgICAgIGRlbGV0ZSB0aGlzLmlfdHJhbnNsYXRpb25Vbml0c1t0cmFuc2xhdGlvblVuaXRdO1xyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgdGhpcy5pX3NldENvbXBpbGF0aW9uVXBUb0RhdGUoZmFsc2UpO1xyXG5cclxuICAgIC8vICAgICB0aGlzLnNlbmQoXCJ0cmFuc2xhdGlvblVuaXRSZW1vdmVkXCIsIHRyYW5zbGF0aW9uVW5pdCk7XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIGdldFRyYW5zbGF0aW9uVW5pdCA6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgIC8vICAgICByZXR1cm4gdGhpcy5pX3RyYW5zbGF0aW9uVW5pdHNbbmFtZV07XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIGdldFRyYW5zbGF0aW9uVW5pdHMgOiBmdW5jdGlvbigpIHtcclxuICAgIC8vICAgICByZXR1cm4gdGhpcy5pX3RyYW5zbGF0aW9uVW5pdHM7XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIC8vIGFkZFN0YXRpY0VudGl0eSA6IGZ1bmN0aW9uKGVudCl7XHJcbiAgICAvLyAgICAgdGhpcy5zdGF0aWNFbnRpdGllcy5wdXNoKGVudCk7XHJcbiAgICAvLyB9LFxyXG5cclxuICAgIHByaXZhdGUgbGluaygpIHtcclxuICAgICAgICAvLyB0aGlzLnNlbmQoXCJsaW5raW5nU3RhcnRlZFwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5kZWZpbmVJbnRyaW5zaWNzKCk7XHJcblxyXG4gICAgICAgIC8vIFByb3ZpZGUgZGVmaW5pdGlvbnMgdG8gZWFjaCBsaW5rZWQgZW50aXR5IGJhc2VkIG9uIHF1YWxpZmllZCBuYW1lLlxyXG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGUgZGVmaW5pdGlvbiBwcm92aWRlZCBtaWdodCBub3QgbWF0Y2ggYXQgYWxsIG9yIG1pZ2h0XHJcbiAgICAgICAgLy8gYmUgdW5kZWZpbmVkIGlmIHRoZXJlIHdhcyBubyBtYXRjaCBmb3IgdGhlIHF1YWxpZmllZCBuYW1lLiBUaGUgZW50aXRpZXNcclxuICAgICAgICAvLyB3aWxsIHRha2UgY2FyZSBvZiBhZGRpbmcgdGhlIGFwcHJvcHJpYXRlIGxpbmtlciBlcnJvcnMgaW4gdGhlc2UgY2FzZXMuXHJcbiAgICAgICAgdGhpcy5saW5rZWRFbnRpdGllcy5mb3JFYWNoKGxlID0+IFxyXG4gICAgICAgICAgICBsZS5saW5rKHRoaXMuZGVmaW5pdGlvbnNbbGUucXVhbGlmaWVkTmFtZV0pXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgbGV0IG1haW4gPSB0aGlzLmRlZmluaXRpb25zW1wiOjptYWluXCJdO1xyXG4gICAgICAgIGlmIChtYWluIGluc3RhbmNlb2YgRnVuY3Rpb25EZWZpbml0aW9uKSB7XHJcbiAgICAgICAgICAgICg8TXV0YWJsZTx0aGlzPj50aGlzKS5tYWluRnVuY3Rpb24gPSBtYWluO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgKDxNdXRhYmxlPHRoaXM+PnRoaXMpLmdsb2JhbE9iamVjdEFsbG9jYXRvciA9IG5ldyBHbG9iYWxPYmplY3RBbGxvY2F0b3IodGhpcy5jb250ZXh0LCB0aGlzLmdsb2JhbE9iamVjdHMpO1xyXG4gICAgICAgIC8vbG9vayBmb3IgbWFpbiAtIFRPRE86IHRoaXMgc2hvdWxkIGp1c3QgYmUgYSBwcmVyZXF1aXNpdGUgZm9yIGFjdHVhbGx5IHNpbXVsYXRpbmcuXHJcbiAgICAgICAgLy8gSSB0aGluayBpdCdzIGEgYml0IGFubm95aW5nIHRoYXQgYSBwcm9ncmFtIHdpdGhvdXQgbWFpbiBuZWNlc3NhcmlseSBoYXMgdGhpcyBlcnJvci5cclxuICAgICAgICAvLyB0cnl7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuaV9tYWluID0gdGhpcy5pX2dsb2JhbFNjb3BlLnJlcXVpcmVkTG9va3VwKFwibWFpblwiLCB7cGFyYW1UeXBlczogW119KTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gY2F0Y2goZSl7XHJcbiAgICAgICAgLy8gICAgIGlmIChpc0EoZSwgU2VtYW50aWNFeGNlcHRpb25zLkJhZExvb2t1cCkpe1xyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5hZGROb3RlKGUuYW5ub3RhdGlvbigpKTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vICAgICBlbHNle1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coZS5zdGFjayk7XHJcbiAgICAgICAgLy8gICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyB0aGlzLnNlbmQoXCJsaW5raW5nRmluaXNoZWRcIik7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGVmaW5lSW50cmluc2ljcygpIHtcclxuICAgICAgICAvLyBUT0RPXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlZ2lzdGVyTGlua2VkRW50aXR5KGVudGl0eTogTGlua2VkRW50aXR5KSB7XHJcbiAgICAgICAgYXNNdXRhYmxlKHRoaXMubGlua2VkRW50aXRpZXMpLnB1c2goZW50aXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXJHbG9iYWxPYmplY3REZWZpbml0aW9uKHF1YWxpZmllZE5hbWU6IHN0cmluZywgZGVmOiBHbG9iYWxPYmplY3REZWZpbml0aW9uKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRlZmluaXRpb25zW3F1YWxpZmllZE5hbWVdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmaW5pdGlvbnNbcXVhbGlmaWVkTmFtZV0gPSBkZWY7XHJcbiAgICAgICAgICAgIGFzTXV0YWJsZSh0aGlzLmdsb2JhbE9iamVjdHMpLnB1c2goZGVmKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIE9uZSBkZWZpbml0aW9uIHJ1bGUgdmlvbGF0aW9uXHJcbiAgICAgICAgICAgIHRoaXMubm90ZXMuYWRkTm90ZShDUFBFcnJvci5saW5rLm11bHRpcGxlX2RlZihkZWYsIHF1YWxpZmllZE5hbWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlZ2lzdGVyRnVuY3Rpb25EZWZpbml0aW9uKHF1YWxpZmllZE5hbWU6IHN0cmluZywgZGVmOiBGdW5jdGlvbkRlZmluaXRpb24pIHtcclxuICAgICAgICBsZXQgcHJldkRlZiA9IHRoaXMuZGVmaW5pdGlvbnNbcXVhbGlmaWVkTmFtZV07XHJcbiAgICAgICAgaWYgKCFwcmV2RGVmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmaW5pdGlvbnNbcXVhbGlmaWVkTmFtZV0gPSBbZGVmXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkocHJldkRlZikpIHtcclxuICAgICAgICAgICAgLy8gUHJldmlvdXMgZGVmaW5pdGlvbiB0aGF0IGlzbid0IGEgZnVuY3Rpb24gb3ZlcmxvYWQgZ3JvdXBcclxuICAgICAgICAgICAgdGhpcy5ub3Rlcy5hZGROb3RlKENQUEVycm9yLmxpbmsubXVsdGlwbGVfZGVmKGRlZiwgcXVhbGlmaWVkTmFtZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gQWxyZWFkeSBzb21lIGRlZmluaXRpb25zIGZvciBmdW5jdGlvbnMgd2l0aCB0aGlzIHNhbWUgbmFtZS4gQ2hlY2sgaWYgdGhlcmUnc1xyXG4gICAgICAgICAgICAvLyBhIGNvbmZsaWN0aW5nIG92ZXJsb2FkIHRoYXQgdmlvbGF0ZXMgT0RSXHJcbiAgICAgICAgICAgIGxldCBjb25mbGljdGluZ0RlZiA9IHNlbGVjdE92ZXJsb2FkZWREZWZpbml0aW9uKHByZXZEZWYsIGRlZi5kZWNsYXJhdGlvbi50eXBlKTtcclxuICAgICAgICAgICAgaWYgKGNvbmZsaWN0aW5nRGVmKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGVzLmFkZE5vdGUoQ1BQRXJyb3IubGluay5tdWx0aXBsZV9kZWYoZGVmLCBxdWFsaWZpZWROYW1lKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2RGVmLnB1c2goZGVmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8vIC8vVE9ETzogUHJvZ3JhbSBpdHNlbGYgc2hvdWxkIGp1c3QgcmVnaXN0ZXIgYWxsIHRoZSBmdW5jdGlvbiBjYWxscyBpbiBpdHMgdHJhbnNsYXRpb24gdW5pdHMuXHJcbiAgICAvLyAvLyAgICAgIEhvd2V2ZXIsIGRvbid0IHNwZW5kIHRpbWUgb24gdGhpcyB1bnRpbCBmaWd1cmluZyBvdXQgd2hlcmUgdGhlIGxpc3Qgb2YgZnVuY3Rpb24gY2FsbHNcclxuICAgIC8vIC8vICAgICAgaXMgdXNlZC4gSSB0aGluayBpdCB3YXMgdXNlZCBhcyBwYXJ0IG9mIGxpbmtpbmcgdG8gZW5zdXJlIGFsbCBmdW5jdGlvbiBjYWxscyBhcmUgZGVmaW5lZCxcclxuICAgIC8vIC8vICAgICAgYnV0IHdoZW4gbGlua2luZyBpcyBtb3JlIHByb3Blcmx5IGltcGxlbWVudGVkLCBJIHJlYWxseSBuZWVkIHRvIGNoZWNrIHRoYXQgZXZlcnl0aGluZyB3aXRoXHJcbiAgICAvLyAvLyAgICAgIGxpbmthZ2UgKHRoYXQgaXMgb2RyLXVzZWQpIGFjdHVhbGx5IGhhcyBhIGRlZmluaXRpb24uXHJcbiAgICAvLyByZWdpc3RlckZ1bmN0aW9uQ2FsbCA6IGZ1bmN0aW9uKGNhbGwpIHtcclxuICAgIC8vICAgICB0aGlzLmlfZnVuY3Rpb25DYWxscy5wdXNoKGNhbGwpO1xyXG4gICAgLy8gfSxcclxuXHJcbiAgICAvLyBfYWN0IDoge1xyXG4gICAgLy8gICAgIHRleHRDaGFuZ2VkIDogZnVuY3Rpb24obXNnKSB7XHJcbiAgICAvLyAgICAgICAgIGlmICh0aGlzLmlfaW5jbHVkZWRTb3VyY2VGaWxlc1ttc2cuc291cmNlLmdldE5hbWUoKV0pIHtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuaV9zZXRDb21waWxhdGlvblVwVG9EYXRlKGZhbHNlKTtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRQcm9ncmFtIGV4dGVuZHMgUHJvZ3JhbSB7XHJcbiAgICByZWFkb25seSBtYWluRnVuY3Rpb246IENvbXBpbGVkRnVuY3Rpb25EZWZpbml0aW9uO1xyXG4gICAgcmVhZG9ubHkgZ2xvYmFsT2JqZWN0czogcmVhZG9ubHkgQ29tcGlsZWRHbG9iYWxPYmplY3REZWZpbml0aW9uW107XHJcbiAgICByZWFkb25seSBnbG9iYWxPYmplY3RBbGxvY2F0b3I6IENvbXBpbGVkR2xvYmFsT2JqZWN0QWxsb2NhdG9yO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU291cmNlRmlsZSB7XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSh0aGlzKTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHRleHQ6IHN0cmluZztcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIHNldFRleHQgOiBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAvLyAgICAgdGhpcy5pX3RleHQgPSB0ZXh0O1xyXG4gICAgLy8gICAgIHRoaXMuc2VuZChcInRleHRDaGFuZ2VkXCIpO1xyXG4gICAgLy8gfSxcclxuXHJcbn1cclxuXHJcbmludGVyZmFjZSBTb3VyY2VSZWZlcmVuY2VJbmNsdWRlIHtcclxuICAgIHNvdXJjZUZpbGU6IFNvdXJjZUZpbGU7XHJcbiAgICBsaW5lSW5jbHVkZWQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNvdXJjZVJlZmVyZW5jZSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgd3JhcHBlciB0byByZXByZXNlbnQgYSByZWZlcmVuY2UgdG8gc291cmNlIGNvZGUgdGhhdCBoYXMgYmVlbiBpbmNsdWRlZCBpbiBhbm90aGVyIGZpbGUuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlSW5jbHVkZWQoc291cmNlRmlsZTogU291cmNlRmlsZSwgbGluZUluY2x1ZGVkOiBudW1iZXIsIG9yaWdpbmFsUmVmZXJlbmNlOiBTb3VyY2VSZWZlcmVuY2UpIHtcclxuICAgICAgICB2YXIgb2JqID0gbmV3IFNvdXJjZVJlZmVyZW5jZShvcmlnaW5hbFJlZmVyZW5jZS5zb3VyY2VGaWxlLCBvcmlnaW5hbFJlZmVyZW5jZS5saW5lLCBvcmlnaW5hbFJlZmVyZW5jZS5jb2x1bW4sXHJcbiAgICAgICAgICAgIG9yaWdpbmFsUmVmZXJlbmNlLnN0YXJ0LCBvcmlnaW5hbFJlZmVyZW5jZS5lbmQpO1xyXG4gICAgICAgIG9iai5faW5jbHVkZXMucHVzaCh7XHJcbiAgICAgICAgICAgIHNvdXJjZUZpbGU6IHNvdXJjZUZpbGUsXHJcbiAgICAgICAgICAgIGxpbmVJbmNsdWRlZDogbGluZUluY2x1ZGVkXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgb3JpZ2luYWxSZWZlcmVuY2UuaW5jbHVkZXMuZm9yRWFjaCgoaW5jKSA9PiBvYmouX2luY2x1ZGVzLnB1c2goaW5jKSk7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc291cmNlRmlsZTogU291cmNlRmlsZTtcclxuICAgIHB1YmxpYyByZWFkb25seSBsaW5lOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29sdW1uOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3RhcnQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyByZWFkb25seSBlbmQ6IG51bWJlcjtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9pbmNsdWRlczogU291cmNlUmVmZXJlbmNlSW5jbHVkZVtdID0gW107XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW5jbHVkZXM6IHJlYWRvbmx5IFNvdXJjZVJlZmVyZW5jZUluY2x1ZGVbXSA9IHRoaXMuX2luY2x1ZGVzO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihzb3VyY2VGaWxlOiBTb3VyY2VGaWxlLCBsaW5lOiBudW1iZXIsIGNvbHVtbjogbnVtYmVyLCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuc291cmNlRmlsZSA9IHNvdXJjZUZpbGU7XHJcbiAgICAgICAgdGhpcy5saW5lID0gbGluZTtcclxuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcclxuICAgICAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XHJcbiAgICAgICAgdGhpcy5lbmQgPSBlbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzSW5jbHVkZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5jbHVkZXMubGVuZ3RoID4gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXRJbmNsdWRlUHJlbHVkZSA6IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gICAgIHZhciBzdHIgPSBcIlwiO1xyXG4gICAgLy8gICAgIHZhciBwcmV2SW5jbHVkZSA9IHRoaXMuc291cmNlRmlsZTtcclxuICAgIC8vICAgICB0aGlzLmlfaW5jbHVkZXMuZm9yRWFjaChmdW5jdGlvbihpbmNsdWRlKSB7XHJcbiAgICAvLyAgICAgICAgIHN0ciArPSBcIkluIGZpbGUgXFxcIlwiICsgaW5jbHVkZS5zb3VyY2VGaWxlLmdldE5hbWUoKSArIFwiXFxcIiBpbmNsdWRlZCBmcm9tIFwiICsgcHJldkluY2x1ZGUuZ2V0TmFtZSgpICsgXCJcXFwiXCJcclxuICAgIC8vXHJcbiAgICAvLyAgICAgfSk7XHJcbiAgICAvLyB9XHJcblxyXG59XHJcblxyXG5pbnRlcmZhY2UgSW5jbHVkZU1hcHBpbmcge1xyXG4gICAgc3RhcnRMaW5lOiBudW1iZXI7XHJcbiAgICBzdGFydE9mZnNldDogbnVtYmVyO1xyXG4gICAgbnVtTGluZXM6IG51bWJlcjtcclxuICAgIGVuZExpbmU6IG51bWJlcjtcclxuICAgIGxpbmVEZWx0YTogbnVtYmVyO1xyXG4gICAgbGVuZ3RoRGVsdGE6IG51bWJlcjtcclxuICAgIGluY2x1ZGVkOiBQcmVwcm9jZXNzZWRTb3VyY2U7XHJcbiAgICBsaW5lSW5jbHVkZWQ6IG51bWJlcjtcclxufVxyXG5cclxuY2xhc3MgUHJlcHJvY2Vzc2VkU291cmNlIHtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJpbWFyeVNvdXJjZUZpbGU6IFNvdXJjZUZpbGU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGF2YWlsYWJsZVRvSW5jbHVkZToge1tpbmRleDogc3RyaW5nXTogU291cmNlRmlsZX07XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IG5vdGVzID0gbmV3IE5vdGVSZWNvcmRlcigpO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2luY2x1ZGVzOiBJbmNsdWRlTWFwcGluZ1tdID0gW107XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW5jbHVkZXM6IHJlYWRvbmx5IEluY2x1ZGVNYXBwaW5nW10gPSB0aGlzLl9pbmNsdWRlcztcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW5jbHVkZWRTb3VyY2VGaWxlczoge1tpbmRleDogc3RyaW5nXTogU291cmNlRmlsZX0gPSB7fTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJlcHJvY2Vzc2VkVGV4dDogc3RyaW5nO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG51bUxpbmVzOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbGVuZ3RoOiBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHNvdXJjZUZpbGU6IFNvdXJjZUZpbGUsIGF2YWlsYWJsZVRvSW5jbHVkZToge1tpbmRleDogc3RyaW5nXTogU291cmNlRmlsZX0sIGFscmVhZHlJbmNsdWRlZDoge1tpbmRleDogc3RyaW5nXTogYm9vbGVhbn0gPSB7fSkge1xyXG4gICAgICAgIHRoaXMucHJpbWFyeVNvdXJjZUZpbGUgPSBzb3VyY2VGaWxlO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IHNvdXJjZUZpbGUubmFtZTtcclxuICAgICAgICB0aGlzLmF2YWlsYWJsZVRvSW5jbHVkZSA9IGF2YWlsYWJsZVRvSW5jbHVkZTtcclxuXHJcbiAgICAgICAgYWxyZWFkeUluY2x1ZGVkW3RoaXMucHJpbWFyeVNvdXJjZUZpbGUubmFtZV0gPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgY29kZVN0ciA9IHNvdXJjZUZpbGUudGV4dDtcclxuXHJcbiAgICAgICAgY29kZVN0ciA9IHRoaXMuZmlsdGVyU291cmNlQ29kZShjb2RlU3RyKTtcclxuXHJcbiAgICAgICAgbGV0IGN1cnJlbnRJbmNsdWRlT2Zmc2V0ID0gMDtcclxuICAgICAgICBsZXQgY3VycmVudEluY2x1ZGVMaW5lTnVtYmVyID0gMTtcclxuICAgICAgICBsZXQgb3JpZ2luYWxJbmNsdWRlTGluZU51bWJlciA9IDE7XHJcblxyXG4gICAgICAgIHRoaXMuaW5jbHVkZWRTb3VyY2VGaWxlc1t0aGlzLnByaW1hcnlTb3VyY2VGaWxlLm5hbWVdID0gdGhpcy5wcmltYXJ5U291cmNlRmlsZTtcclxuXHJcbiAgICAgICAgLy8gRmluZCBhbmQgcmVwbGFjZSAjaW5jbHVkZSBsaW5lcy4gV2lsbCBhbHNvIHBvcHVsYXRlIGlfaW5jbHVkZXMgYXJyYXkuXHJcbiAgICAgICAgLy8gW15cXFNcXG5dIGlzIGEgY2hhcmFjdGVyIGNsYXNzIGZvciBhbGwgd2hpdGVzcGFjZSBvdGhlciB0aGFuIG5ld2xpbmVzXHJcbiAgICAgICAgdGhpcy5wcmVwcm9jZXNzZWRUZXh0ID0gY29kZVN0ci5yZXBsYWNlKC8jaW5jbHVkZVteXFxTXFxuXStcIiguKilcIi9nLFxyXG4gICAgICAgICAgICAoaW5jbHVkZUxpbmUsIGZpbGVuYW1lLCBvZmZzZXQsIG9yaWdpbmFsKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IG1hcHBpbmc6IFBhcnRpYWw8SW5jbHVkZU1hcHBpbmc+ID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgbGluZSBudW1iZXIgb2YgdGhpcyBpbmNsdWRlIGJ5IGFkZGluZyB1cCB0aGUgbnVtYmVyIG9mIG5ld2xpbmUgY2hhcmFjdGVyc1xyXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgdGhlIG9mZnNldCBvZiB0aGUgbGFzdCBtYXRjaCB1cCB0byB0aGUgY3VycmVudCBvbmUuIEFkZCB0aGlzIHRvIHRoZSBsaW5lIG51bWJlci5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBjdXJyZW50SW5jbHVkZU9mZnNldDsgaSA8IG9mZnNldDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsW2ldID09PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsrY3VycmVudEluY2x1ZGVMaW5lTnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArK29yaWdpbmFsSW5jbHVkZUxpbmVOdW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG1hcHBpbmcuc3RhcnRMaW5lID0gY3VycmVudEluY2x1ZGVMaW5lTnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgbWFwcGluZy5zdGFydE9mZnNldCA9IG9mZnNldDtcclxuXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5jbHVkZU9mZnNldCA9IG9mZnNldCArIGluY2x1ZGVMaW5lLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBJIHRoaW5rIHRoaXMgaXMgbm90IG5lZWRlZCBiZWNhdXNlIHRoZSBmaWxlbmFtZSB3YXMgYSBwYXJ0IG9mIHRoZSBvcmlnaW5hbCBtYXRjaFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgYW5kIGlzIHRodXMgcGFzc2VkIGluIHRvIHRoZSBmdW5jdGlvbiB1c2VkIGZvciByZXBsYWNlbWVudC5cclxuICAgICAgICAgICAgICAgIC8vIC8vIGV4dHJhY3QgdGhlIGZpbGVuYW1lIGZyb20gdGhlICNpbmNsdWRlIGxpbmUgbWF0Y2hcclxuICAgICAgICAgICAgICAgIC8vIC8vIFsxXSB5aWVsZHMgb25seSB0aGUgbWF0Y2ggZm9yIHRoZSBwYXJ0IG9mIHRoZSByZWdleCBpbiBwYXJlbnRoZXNlc1xyXG4gICAgICAgICAgICAgICAgLy8gdmFyIGZpbGVuYW1lID0gaW5jbHVkZUxpbmUubWF0Y2goL1wiKC4qKVwiLylbMV07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIHNlbGYgaW5jbHVzaW9uXHJcbiAgICAgICAgICAgICAgICBpZiAoYWxyZWFkeUluY2x1ZGVkW2ZpbGVuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90ZXMuYWRkTm90ZShDUFBFcnJvci5wcmVwcm9jZXNzLnJlY3Vyc2l2ZUluY2x1ZGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTb3VyY2VSZWZlcmVuY2Uoc291cmNlRmlsZSwgY3VycmVudEluY2x1ZGVMaW5lTnVtYmVyLCAwLCBvZmZzZXQsIGN1cnJlbnRJbmNsdWRlT2Zmc2V0KSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyByZXBsYWNlIHRoZSB3aG9sZSAjaW5jbHVkZSBsaW5lIHdpdGggc3BhY2VzLiBDYW4ndCBqdXN0IHJlbW92ZSBvciBpdCBtZXNzZXMgdXAgb2Zmc2V0cy5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkoaW5jbHVkZUxpbmUubGVuZ3RoICsgMSkuam9pbihcIiBcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgcHJlcHJvY2VzcyB0aGUgaW5jbHVkZWQgZmlsZVxyXG4gICAgICAgICAgICAgICAgdmFyIGluY2x1ZGVkU291cmNlRmlsZSA9IHRoaXMuYXZhaWxhYmxlVG9JbmNsdWRlW2ZpbGVuYW1lXTtcclxuICAgICAgICAgICAgICAgIC8vVE9ETzogd2hhdCBoYXBwZW5zIGlmIHRoZSBmaWxlIGRvZXNuJ3QgZXhpc3Q/XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGluY2x1ZGVkID0gbmV3IFByZXByb2Nlc3NlZFNvdXJjZShpbmNsdWRlZFNvdXJjZUZpbGUsIHRoaXMuYXZhaWxhYmxlVG9JbmNsdWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIGFscmVhZHlJbmNsdWRlZCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5pbmNsdWRlZFNvdXJjZUZpbGVzLCBpbmNsdWRlZC5pbmNsdWRlZFNvdXJjZUZpbGVzKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgbWFwcGluZy5udW1MaW5lcyA9IGluY2x1ZGVkLm51bUxpbmVzO1xyXG4gICAgICAgICAgICAgICAgbWFwcGluZy5lbmRMaW5lID0gbWFwcGluZy5zdGFydExpbmUgKyBpbmNsdWRlZC5udW1MaW5lcztcclxuXHJcbiAgICAgICAgICAgICAgICBtYXBwaW5nLmxpbmVEZWx0YSA9IGluY2x1ZGVkLm51bUxpbmVzIC0gMTtcclxuICAgICAgICAgICAgICAgIG1hcHBpbmcubGVuZ3RoRGVsdGEgPSBpbmNsdWRlZC5sZW5ndGggLSBpbmNsdWRlTGluZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5jbHVkZUxpbmVOdW1iZXIgKz0gaW5jbHVkZWQubnVtTGluZXMgLSAxOyAvLyAtMSBzaW5jZSBvbmUgbGluZSBmcm9tIG9yaWdpbmFsIHdhcyByZXBsYWNlZFxyXG4gICAgICAgICAgICAgICAgbWFwcGluZy5pbmNsdWRlZCA9IGluY2x1ZGVkO1xyXG4gICAgICAgICAgICAgICAgbWFwcGluZy5saW5lSW5jbHVkZWQgPSBvcmlnaW5hbEluY2x1ZGVMaW5lTnVtYmVyO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2luY2x1ZGVzLnB1c2goPEluY2x1ZGVNYXBwaW5nPm1hcHBpbmcpOyAvLyBUT0RPOiByZW1vdmUgY2FzdFxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBpbmNsdWRlZC5wcmVwcm9jZXNzZWRUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gQ291bnQgbGluZXMgZm9yIHRoZSByZXN0IG9mIHRoZSBmaWxlIGFmdGVyIGFueSAjaW5jbHVkZXNcclxuICAgICAgICBmb3IgKHZhciBpID0gY3VycmVudEluY2x1ZGVPZmZzZXQ7IGkgPCBjb2RlU3RyLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChjb2RlU3RyW2ldID09PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICArK2N1cnJlbnRJbmNsdWRlTGluZU51bWJlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5udW1MaW5lcyA9IGN1cnJlbnRJbmNsdWRlTGluZU51bWJlcjtcclxuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMucHJlcHJvY2Vzc2VkVGV4dC5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByaXZhdGUgZmlsdGVyU291cmNlQ29kZShjb2RlU3RyOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIGNhcnJpYWdlIHJldHVybnNcclxuICAgICAgICBjb2RlU3RyID0gY29kZVN0ci5yZXBsYWNlKC9cXHIvZywgXCJcIik7XHJcblxyXG4gICAgICAgIGlmIChjb2RlU3RyLmluY2x1ZGVzKFwiI2lmbmRlZlwiKSl7XHJcbiAgICAgICAgICAgIGNvZGVTdHIgPSBjb2RlU3RyLnJlcGxhY2UoLyNpZm5kZWYuKi9nLCBmdW5jdGlvbihtYXRjaCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkobWF0Y2gubGVuZ3RoKzEpLmpvaW4oXCIgXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gdGhpcy5zZW5kKFwib3RoZXJFcnJvclwiLCBcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHRyeWluZyB0byB1c2UgYSBwcmVwcm9jZXNzb3IgZGlyZWN0aXZlIChlLmcuIDxzcGFuIGNsYXNzPSdjb2RlJz4jZGVmaW5lPC9zcGFuPikgdGhhdCBpc24ndCBzdXBwb3J0ZWQgYXQgdGhlIG1vZW1lbnQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29kZVN0ci5pbmNsdWRlcyhcIiNkZWZpbmVcIikpe1xyXG4gICAgICAgICAgICBjb2RlU3RyID0gY29kZVN0ci5yZXBsYWNlKC8jZGVmaW5lLiovZywgZnVuY3Rpb24obWF0Y2gpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5KG1hdGNoLmxlbmd0aCsxKS5qb2luKFwiIFwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuc2VuZChcIm90aGVyRXJyb3JcIiwgXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB0cnlpbmcgdG8gdXNlIGEgcHJlcHJvY2Vzc29yIGRpcmVjdGl2ZSAoZS5nLiA8c3BhbiBjbGFzcz0nY29kZSc+I2RlZmluZTwvc3Bhbj4pIHRoYXQgaXNuJ3Qgc3VwcG9ydGVkIGF0IHRoZSBtb2VtZW50LlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvZGVTdHIuaW5jbHVkZXMoXCIjZW5kaWZcIikpe1xyXG4gICAgICAgICAgICBjb2RlU3RyID0gY29kZVN0ci5yZXBsYWNlKC8jZW5kaWYuKi9nLCBmdW5jdGlvbihtYXRjaCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkobWF0Y2gubGVuZ3RoKzEpLmpvaW4oXCIgXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gdGhpcy5zZW5kKFwib3RoZXJFcnJvclwiLCBcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHRyeWluZyB0byB1c2UgYSBwcmVwcm9jZXNzb3IgZGlyZWN0aXZlIChlLmcuIDxzcGFuIGNsYXNzPSdjb2RlJz4jZGVmaW5lPC9zcGFuPikgdGhhdCBpc24ndCBzdXBwb3J0ZWQgYXQgdGhlIG1vZW1lbnQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiAoY29kZVN0ci5jb250YWlucygvI2luY2x1ZGUuKjwuKj4vZykpe1xyXG4gICAgICAgICAgICBjb2RlU3RyID0gY29kZVN0ci5yZXBsYWNlKC8jaW5jbHVkZS4qPC4qPi9nLCBmdW5jdGlvbihtYXRjaCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkobWF0Y2gubGVuZ3RoKzEpLmpvaW4oXCIgXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gdGhpcy5zZW5kKFwib3RoZXJFcnJvclwiLCBcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHRyeWluZyB0byB1c2UgYSBwcmVwcm9jZXNzb3IgZGlyZWN0aXZlIChlLmcuIDxzcGFuIGNsYXNzPSdjb2RlJz4jZGVmaW5lPC9zcGFuPikgdGhhdCBpc24ndCBzdXBwb3J0ZWQgYXQgdGhlIG1vZW1lbnQuXCIpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICBpZiAoY29kZVN0ci5pbmNsdWRlcyhcInVzaW5nIG5hbWVzcGFjZVwiKSl7XHJcbiAgICAgICAgICAgIGNvZGVTdHIgPSBjb2RlU3RyLnJlcGxhY2UoL3VzaW5nIG5hbWVzcGFjZS4qL2csIGZ1bmN0aW9uKG1hdGNoKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheShtYXRjaC5sZW5ndGgrMSkuam9pbihcIiBcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBUT0RPIE5FVyB3aHkgaXMgdGhpcyBjb21tZW50ZWQ/XHJcbiAgICAgICAgICAgIC8vIHRoaXMuc2VuZChcIm90aGVyRXJyb3JcIiwgXCJXaGVuIHdyaXRpbmcgY29kZSBpbiBsb2JzdGVyLCB5b3UgZG9uJ3QgbmVlZCB0byBpbmNsdWRlIHVzaW5nIGRpcmVjdGl2ZXMgKGUuZy4gPHNwYW4gY2xhc3M9J2NvZGUnPnVzaW5nIG5hbWVzcGFjZSBzdGQ7PC9zcGFuPikuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29kZVN0ci5pbmNsdWRlcyhcInVzaW5nIHN0ZDo6XCIpKXtcclxuICAgICAgICAgICAgY29kZVN0ciA9IGNvZGVTdHIucmVwbGFjZSgvdXNpbmcgc3RkOjouKi9nLCBmdW5jdGlvbihtYXRjaCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkobWF0Y2gubGVuZ3RoKzEpLmpvaW4oXCIgXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gdGhpcy5zZW5kKFwib3RoZXJFcnJvclwiLCBcIkxvYnN0ZXIgZG9lc24ndCBzdXBwb3J0IHVzaW5nIGRlY2xhcmF0aW9ucyBhdCB0aGUgbW9tZW50LlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvZGVTdHI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFNvdXJjZVJlZmVyZW5jZShsaW5lOiBudW1iZXIsIGNvbHVtbjogbnVtYmVyLCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcikgOiBTb3VyY2VSZWZlcmVuY2Uge1xyXG5cclxuICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggYWxsIGluY2x1ZGVzIGFuZCBjaGVjayBpZiBhbnkgd291bGQgY29udGFpblxyXG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgICAgIGxldCBsaW5lT2Zmc2V0ID0gMTtcclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5pbmNsdWRlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBsZXQgaW5jID0gdGhpcy5pbmNsdWRlc1tpXTtcclxuICAgICAgICAgICAgaWYgKGxpbmUgPCBpbmMuc3RhcnRMaW5lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNvdXJjZVJlZmVyZW5jZSh0aGlzLnByaW1hcnlTb3VyY2VGaWxlLCBsaW5lIC0gbGluZU9mZnNldCArIDEsIGNvbHVtbiwgc3RhcnQgJiYgc3RhcnQgLSBvZmZzZXQsIGVuZCAmJiBlbmQgLSBvZmZzZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGluYy5zdGFydExpbmUgPD0gbGluZSAmJiBsaW5lIDwgaW5jLmVuZExpbmUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBTb3VyY2VSZWZlcmVuY2UuY3JlYXRlSW5jbHVkZWQodGhpcy5wcmltYXJ5U291cmNlRmlsZSwgaW5jLmxpbmVJbmNsdWRlZCxcclxuICAgICAgICAgICAgICAgICAgICBpbmMuaW5jbHVkZWQuZ2V0U291cmNlUmVmZXJlbmNlKGxpbmUgLSBpbmMuc3RhcnRMaW5lICsgMSwgY29sdW1uLCBzdGFydCAmJiBzdGFydCAtIGluYy5zdGFydE9mZnNldCwgZW5kICYmIGVuZCAtIGluYy5zdGFydE9mZnNldCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9mZnNldCArPSBpbmMubGVuZ3RoRGVsdGE7XHJcbiAgICAgICAgICAgIGxpbmVPZmZzZXQgKz0gaW5jLmxpbmVEZWx0YTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIHRoaXMgbGluZSB3YXNuJ3QgcGFydCBvZiBhbnkgb2YgdGhlIGluY2x1ZGVzLCBqdXN0IHJldHVybiBhIHJlZ3VsYXIgc291cmNlIHJlZmVyZW5jZSB0byB0aGUgb3JpZ2luYWxcclxuICAgICAgICAvLyBzb3VyY2UgZmlsZSBhc3NvY2lhdGVkIHdpdGggdGhpcyB0cmFuc2xhdGlvbiB1bml0XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTb3VyY2VSZWZlcmVuY2UodGhpcy5wcmltYXJ5U291cmNlRmlsZSwgbGluZSAtIGxpbmVPZmZzZXQgKyAxLCBjb2x1bW4sIHN0YXJ0ICYmIHN0YXJ0IC0gb2Zmc2V0LCBlbmQgJiYgZW5kIC0gb2Zmc2V0KTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zbGF0aW9uVW5pdEFTVCB7XHJcbiAgICByZWFkb25seSBjb25zdHJ1Y3RfdHlwZTogXCJ0cmFuc2xhdGlvbl91bml0XCI7XHJcbiAgICByZWFkb25seSBkZWNsYXJhdGlvbnM6IHJlYWRvbmx5IERlY2xhcmF0aW9uQVNUTm9kZVtdO1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNsYXRpb25Vbml0XHJcbiAqXHJcbiAqIEV2ZW50czpcclxuICogICBcInBhcnNlZFwiOiBhZnRlciBwYXJzaW5nIGlzIGZpbmlzaGVkICpzdWNjZXNzZnVsbHkqXHJcbiAqICAgXCJzeW50YXhFcnJvclwiOiBpZiBhIHN5bnRheCBlcnJvciBpcyBlbmNvdW50ZXJlZCBkdXJpbmcgcGFyc2luZy4gZGF0YSBjb250YWlucyBwcm9wZXJ0aWVzIGxpbmUsIGNvbHVtbiwgYW5kIG1lc3NhZ2VcclxuICogICBcImNvbXBpbGF0aW9uRmluaXNoZWRcIjogYWZ0ZXIgY29tcGlsYXRpb24gaXMgZmluaXNoZWRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvblVuaXQge1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29udGV4dDogVHJhbnNsYXRpb25Vbml0Q29udGV4dDtcclxuXHJcbiAgICAvLyBwdWJsaWMgcmVhZG9ubHkgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKHRoaXMpO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG5vdGVzID0gbmV3IE5vdGVSZWNvcmRlcigpO1xyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgc291cmNlOiBQcmVwcm9jZXNzZWRTb3VyY2U7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJvZ3JhbTogUHJvZ3JhbTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZ2xvYmFsU2NvcGU6IE5hbWVzcGFjZVNjb3BlO1xyXG4gICAgXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdG9wTGV2ZWxEZWNsYXJhdGlvbnM6IHJlYWRvbmx5IERlY2xhcmF0aW9uW10gPSBbXTtcclxuICAgIHB1YmxpYyByZWFkb25seSBzdGF0aWNFbnRpdGllczogcmVhZG9ubHkgU3RhdGljRW50aXR5W10gPSBbXTtcclxuICAgIHB1YmxpYyByZWFkb25seSBzdHJpbmdMaXRlcmFsczogcmVhZG9ubHkgU3RyaW5nTGl0ZXJhbEVudGl0eVtdID0gW107XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZnVuY3Rpb25DYWxsczogcmVhZG9ubHkgRnVuY3Rpb25DYWxsW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyc2VkQVNUPzogVHJhbnNsYXRpb25Vbml0QVNUO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXR0ZW1wdHMgdG8gY29tcGlsZWQgdGhlIGdpdmVuIHByaW1hcnkgc291cmNlIGZpbGUgYXMgYSB0cmFuc2xhdGlvbiB1bml0IGZvciBhIEMrKyBwcm9ncmFtLlxyXG4gICAgICogVGhlIGNvbXBpbGF0aW9uIGlzIGF0dGVtcHRlZCBnaXZlbiB0aGUgKipjdXJyZW50Kiogc3RhdGUgb2YgdGhlIHNvdXJjZSBmaWxlcy4gSWYgdGhlIHByaW1hcnlcclxuICAgICAqIHNvdXJjZSBvciBhbnkgb2YgdGhlIGZpbGVzIGluY2x1ZGVkIHZpYSB0aGUgcHJlcHJvY2Vzc29yIGFyZSBjaGFuZ2VkIGluIGFueSB3YXksIGEgbmV3IGBUcmFuc2xhdGlvblVuaXRgXHJcbiAgICAgKiBzaG91bGQgYmUgY29uc3RydWN0ZWQgKGl0IGlzIG5vdCBwb3NzaWJsZSB0byBcInJlLWNvbXBpbGVcIiBhIFRyYW5zbGF0aW9uVW5pdCBvYmplY3QuKVxyXG4gICAgICogQHBhcmFtIHByaW1hcnlTb3VyY2VGaWxlIENvbnRhaW5zIHRoZSBzb3VyY2UgY29kZSBmb3IgdGhpcyB0cmFuc2xhdGlvbiB1bml0LlxyXG4gICAgICogQHBhcmFtIHNvdXJjZUZpbGVzIFRoZSBzZXQgb2YgZmlsZXMgdG8gYmUgYXZhaWxhYmxlIGZvciBpbmNsdXNpb24gdmlhICNpbmNsdWRlIGRpcmVjdGl2ZXMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcm9ncmFtOiBQcm9ncmFtLCBwcmVwcm9jZXNzZWRTb3VyY2U6IFByZXByb2Nlc3NlZFNvdXJjZSkge1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBwcmVwcm9jZXNzZWRTb3VyY2U7XHJcbiAgICAgICAgdGhpcy5nbG9iYWxTY29wZSA9IG5ldyBOYW1lc3BhY2VTY29wZShwcmVwcm9jZXNzZWRTb3VyY2UucHJpbWFyeVNvdXJjZUZpbGUubmFtZSArIFwiX0dMT0JBTF9TQ09QRVwiKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBwcmVwcm9jZXNzZWRTb3VyY2UubmFtZTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjcmVhdGVUcmFuc2xhdGlvblVuaXRDb250ZXh0KHByb2dyYW0uY29udGV4dCwgdGhpcywgdGhpcy5nbG9iYWxTY29wZSk7XHJcblxyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgLy8gVGhpcyBpcyBraW5kIG9mIGEgaGFjayB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBQRUcuanMgZ2VuZXJhdGVkIHBhcnNpbmcgY29kZS5cclxuICAgICAgICAgICAgLy8gVGhpcyBib3RoIFwicmVzZXRzXCIgdGhlIHVzZXItZGVmaW5lZCB0eXBlIG5hbWVzIHRoYXQgZXhpc3QgZm9yIGVhY2ggdHJhbnNsYXRpb25cclxuICAgICAgICAgICAgLy8gdW5pdCAoZS5nLiBzbyB0aGF0IENsYXNzIG5hbWVzIGRlY2xhcmVkIGluIGFub3RoZXIgdHJhbnNsYXRpb24gdW5pdCBhcmVuJ3QgaGFuZ2luZ1xyXG4gICAgICAgICAgICAvLyBhcm91bmQpLCBhbmQgYWxzbyBlbnN1cmVzIFwiZGVmYXVsdFwiIHVzZXItZGVmaW5lZCB0eXBlIG5hbWVzIGxpa2Ugb3N0cmVhbSwgZXRjLiBhcmVcclxuICAgICAgICAgICAgLy8gcmVjb2duaXplZCBhcyBzdWNoLiBNYWtpbmcgYSBjb3B5IGlzIGltcG9ydGFudCBzbyB0aGF0IHdlIGRvbid0IG1vZGlmeSB0aGUgb3JpZ2luYWxcclxuICAgICAgICAgICAgLy8gd2hpY2ggd2lsbCBwb3RlbnRpYWxseSBiZSB1c2VkIGJ5IG90aGVyIHRyYW5zbGF0aW9uIHVuaXRzLlxyXG4gICAgICAgICAgICAvLyByZXNldFVzZXJUeXBlTmFtZXMoKTsgLy9PYmplY3QuYXNzaWduKHt9LCBUeXBlcy5kZWZhdWx0VXNlclR5cGVOYW1lcyk7IC8vIFRPRE9cclxuXHJcbiAgICAgICAgICAgIC8vIE5vdGUgdGhpcyBpcyBub3QgY2hlY2tlZCBieSB0aGUgVFMgdHlwZSBzeXN0ZW0uIFdlIGp1c3QgaGF2ZSB0byBtYW51YWxseSBlbnN1cmVcclxuICAgICAgICAgICAgLy8gdGhlIHN0cnVjdHVyZSBwcm9kdWNlZCBieSB0aGUgZ3JhbW1hci9wYXJzZXIgbWF0Y2hlcyB3aGF0IHdlIGV4cGVjdC5cclxuICAgICAgICAgICAgbGV0IHBhcnNlZEFTVCA6IFRyYW5zbGF0aW9uVW5pdEFTVCA9IGNwcF9wYXJzZSh0aGlzLnNvdXJjZS5wcmVwcm9jZXNzZWRUZXh0KTtcclxuICAgICAgICAgICAgdGhpcy5wYXJzZWRBU1QgPSBwYXJzZWRBU1Q7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUJ1aWx0SW5HbG9iYWxzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGlsZVRvcExldmVsRGVjbGFyYXRpb25zKHRoaXMucGFyc2VkQVNUKTtcclxuXHRcdH1cclxuXHRcdGNhdGNoKGVycikge1xyXG5cdFx0XHRpZiAoZXJyLm5hbWUgPT0gXCJTeW50YXhFcnJvclwiKXtcclxuXHRcdFx0XHR0aGlzLm5vdGVzLmFkZE5vdGUobmV3IFN5bnRheE5vdGUoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRTb3VyY2VSZWZlcmVuY2UoZXJyLmxvY2F0aW9uLnN0YXJ0LmxpbmUsIGVyci5sb2NhdGlvbi5zdGFydC5jb2x1bW4sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyci5sb2NhdGlvbi5zdGFydC5vZmZzZXQsIGVyci5sb2NhdGlvbi5zdGFydC5vZmZzZXQgKyAxKSxcclxuICAgICAgICAgICAgICAgICAgICBOb3RlS2luZC5FUlJPUixcclxuICAgICAgICAgICAgICAgICAgICBcInN5bnRheFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIuc3RhY2spO1xyXG5cdFx0XHRcdHRocm93IGVycjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE86IGZpZ3VyZSBvdXQgd2hlcmUgdGhpcyBzdHVmZiBzaG91bGQgcmVhbGx5IGdvIGJldHdlZW4gaGVyZSBhbmQgdGhlIHByb2dyYW0gY3JlYXRpbmdcclxuICAgIC8vIGNvbXBpbGVyIGludHJpbnNpY3MuIFNvbWV0aGluZyB3aWxsIG5lZWQgdG8gYmUgZG9uZSBhdCB0aGUgVHJhbnNsYXRpb25Vbml0IGxldmVsIHRvIGVuc3VyZVxyXG4gICAgLy8gdGhlIGFwcHJvcHJpYXRlIG5hbWVzIGFyZSBkZWNsYXJlZCBhbmQgaW4gdGhlIHJpZ2h0IHNjb3BlcywgYnV0IHRoYXQgbWlnaHQganVzdCBiZSBhIG1hdHRlclxyXG4gICAgLy8gb2YgaGF2aW5nIGxpYnJhcnkgI2luY2x1ZGVzIGFjdHVhbGx5IGltcGxlbWVudGVkIGluIGEgcmVhc29uYWJsZSB3YXkuXHJcbiAgICBwcml2YXRlIGNyZWF0ZUJ1aWx0SW5HbG9iYWxzKCkge1xyXG5cdCAgICAvLyBpZiAoVHlwZXMudXNlclR5cGVOYW1lc1tcIm9zdHJlYW1cIl0pIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5pX2dsb2JhbFNjb3BlLmFkZEVudGl0eShTdGF0aWNFbnRpdHkuaW5zdGFuY2Uoe25hbWU6XCJjb3V0XCIsIHR5cGU6VHlwZXMuT1N0cmVhbS5pbnN0YW5jZSgpfSkpO1xyXG4gICAgICAgIC8vICAgICB0aGlzLmlfZ2xvYmFsU2NvcGUuYWRkRW50aXR5KFN0YXRpY0VudGl0eS5pbnN0YW5jZSh7bmFtZTpcImNpblwiLCB0eXBlOlR5cGVzLklTdHJlYW0uaW5zdGFuY2UoKX0pKTtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vIC8vIFRPRE8gTkVXIHJld29yayBzbyB0aGF0IGVuZGxFbnRpdHkgZG9lc24ndCBoYXZlIHRvIGJlIHB1YmxpYyAob3RoZXIgcGFydHMgb2YgY29kZSBsb29rIGZvciBpdCBjdXJyZW50bHkpXHJcbiAgICAgICAgLy8gdGhpcy5lbmRsRW50aXR5ID0gU3RhdGljRW50aXR5Lmluc3RhbmNlKHtuYW1lOlwiZW5kbFwiLCB0eXBlOlR5cGVzLkNoYXIuaW5zdGFuY2UoKX0pO1xyXG4gICAgICAgIC8vIHRoaXMuZW5kbEVudGl0eS5kZWZhdWx0VmFsdWUgPSAxMDsgLy8gMTAgaXMgYXNjaWkgY29kZSBmb3IgXFxuXHJcbiAgICAgICAgLy8gdGhpcy5pX2dsb2JhbFNjb3BlLmFkZEVudGl0eSh0aGlzLmVuZGxFbnRpdHkpO1xyXG5cclxuXHJcbiAgICAgICAgLy8gdmFyIGNhc3NlcnQgPSBNYWdpY0Z1bmN0aW9uRW50aXR5Lmluc3RhbmNlKE1hZ2ljRnVuY3Rpb25EZWZpbml0aW9uLmluc3RhbmNlKFxyXG4gICAgICAgIC8vICAgICBcImFzc2VydFwiLFxyXG4gICAgICAgIC8vICAgICBUeXBlcy5GdW5jdGlvbi5pbnN0YW5jZShUeXBlcy5Wb2lkLmluc3RhbmNlKCksIFtUeXBlcy5Cb29sLmluc3RhbmNlKCldKVxyXG4gICAgICAgIC8vICkpO1xyXG4gICAgICAgIC8vIHRoaXMuaV9nbG9iYWxTY29wZS5hZGRFbnRpdHkoY2Fzc2VydCk7XHJcblxyXG4gICAgICAgIC8vIHZhciBwYXVzZSA9IE1hZ2ljRnVuY3Rpb25FbnRpdHkuaW5zdGFuY2UoTWFnaWNGdW5jdGlvbkRlZmluaXRpb24uaW5zdGFuY2UoXHJcbiAgICAgICAgLy8gICAgIFwicGF1c2VcIixcclxuICAgICAgICAvLyAgICAgVHlwZXMuRnVuY3Rpb24uaW5zdGFuY2UoVHlwZXMuVm9pZC5pbnN0YW5jZSgpLCBbXSlcclxuICAgICAgICAvLyApKTtcclxuICAgICAgICAvLyB0aGlzLmlfZ2xvYmFsU2NvcGUuYWRkRW50aXR5KHBhdXNlKTtcclxuXHJcblxyXG4gICAgICAgIC8vIHZhciBwYXVzZUlmID0gTWFnaWNGdW5jdGlvbkVudGl0eS5pbnN0YW5jZShNYWdpY0Z1bmN0aW9uRGVmaW5pdGlvbi5pbnN0YW5jZShcclxuICAgICAgICAvLyAgICAgXCJwYXVzZUlmXCIsXHJcbiAgICAgICAgLy8gICAgIFR5cGVzLkZ1bmN0aW9uLmluc3RhbmNlKFR5cGVzLlZvaWQuaW5zdGFuY2UoKSwgW1R5cGVzLkJvb2wuaW5zdGFuY2UoKV0pXHJcbiAgICAgICAgLy8gKSk7XHJcbiAgICAgICAgLy8gdGhpcy5pX2dsb2JhbFNjb3BlLmFkZEVudGl0eShwYXVzZUlmKTtcclxuXHJcblxyXG4gICAgICAgIC8vIHRoaXMuaV9nbG9iYWxTY29wZS5hZGRFbnRpdHkoTWFnaWNGdW5jdGlvbkVudGl0eS5pbnN0YW5jZShcclxuICAgICAgICAvLyAgICAgTWFnaWNGdW5jdGlvbkRlZmluaXRpb24uaW5zdGFuY2UoXCJyYW5kXCIsXHJcbiAgICAgICAgLy8gICAgICAgICBUeXBlcy5GdW5jdGlvbi5pbnN0YW5jZShUeXBlcy5JbnQuaW5zdGFuY2UoKSwgW10pKSkpO1xyXG5cclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJpdmF0ZSBjb21waWxlVG9wTGV2ZWxEZWNsYXJhdGlvbnMoYXN0OiBUcmFuc2xhdGlvblVuaXRBU1QpIHtcclxuICAgICAgICBhc3QuZGVjbGFyYXRpb25zLmZvckVhY2goKGRlY2xBU1QpID0+IHtcclxuICAgICAgICAgICAgbGV0IGRlY2xzT3JGdW5jRGVmID0gY3JlYXRlRGVjbGFyYXRpb25Gcm9tQVNUKGRlY2xBU1QsIHRoaXMuY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRlY2xzT3JGdW5jRGVmKSkge1xyXG4gICAgICAgICAgICAgICAgZGVjbHNPckZ1bmNEZWYuZm9yRWFjaChkZWNsID0+IGFzTXV0YWJsZSh0aGlzLnRvcExldmVsRGVjbGFyYXRpb25zKS5wdXNoKGRlY2wpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFzTXV0YWJsZSh0aGlzLnRvcExldmVsRGVjbGFyYXRpb25zKS5wdXNoKGRlY2xzT3JGdW5jRGVmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRTdHJpbmdMaXRlcmFsKGxpdGVyYWw6IFN0cmluZ0xpdGVyYWxFbnRpdHkpIHtcclxuICAgICAgICBhc011dGFibGUodGhpcy5zdHJpbmdMaXRlcmFscykucHVzaChsaXRlcmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXJGdW5jdGlvbkNhbGwoY2FsbDogRnVuY3Rpb25DYWxsKSB7XHJcbiAgICAgICAgYXNNdXRhYmxlKHRoaXMuZnVuY3Rpb25DYWxscykucHVzaChjYWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TmVhcmVzdFNvdXJjZVJlZmVyZW5jZUZvckNvbnN0cnVjdChjb25zdHJ1Y3Q6IENQUENvbnN0cnVjdCkge1xyXG4gICAgICAgIHdoaWxlICghY29uc3RydWN0LmFzdCAmJiBjb25zdHJ1Y3QucGFyZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdCA9IGNvbnN0cnVjdC5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghY29uc3RydWN0LmFzdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXNzZXJ0RmFsc2UoXCJDYW4ndCBmaW5kIHNvdXJjZSByZWZlcmVuY2UgZm9yIGNvbnN0cnVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHNyYyA9IGNvbnN0cnVjdC5hc3Quc291cmNlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFNvdXJjZVJlZmVyZW5jZShzcmMubGluZSwgc3JjLmNvbHVtbiwgc3JjLnN0YXJ0LCBzcmMuZW5kKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U291cmNlUmVmZXJlbmNlKGxpbmU6IG51bWJlciwgY29sdW1uOiBudW1iZXIsIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLmdldFNvdXJjZVJlZmVyZW5jZShsaW5lLCBjb2x1bW4sIHN0YXJ0LCBlbmQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgUG9pbnRlclR5cGUsIEludCB9IGZyb20gXCIuL2NvcmUvdHlwZXNcIjtcclxuaW1wb3J0IHsgcGFyc2UgYXMgY3BwX3BhcnNlIH0gZnJvbSBcIi4vcGFyc2UvY3BwX3BhcnNlclwiO1xyXG5pbXBvcnQge1J1bnRpbWVDb25zdHJ1Y3R9IGZyb20gXCIuL2NvcmUvY29uc3RydWN0c1wiO1xyXG5pbXBvcnQgeyBTb3VyY2VGaWxlLCBUcmFuc2xhdGlvblVuaXQgfSBmcm9tIFwiLi9jb3JlL1Byb2dyYW1cIjtcclxuXHJcbmNvbnNvbGUubG9nKFwiaGVsbG9cIik7XHJcbi8vIGxldCB4ID0gbmV3IFBvaW50ZXJUeXBlKG5ldyBJbnQoKSwgdHJ1ZSk7XHJcbi8vIGNvbnNvbGUubG9nKHgudG9TdHJpbmcoKSk7XHJcblxyXG5sZXQgZmlsZTEgPSBuZXcgU291cmNlRmlsZShcInRlc3QuY3BwXCIsIFwiaW50IG1haW4oKSB7aW50IHggPSAyO31cIik7XHJcbi8vIGxldCBwcm9ncmFtID0gbmV3IFByb2dyYW0oW2ZpbGUxXSwgW1widGVzdC5jcHBcIl0pO1xyXG5jb25zb2xlLmxvZyhmaWxlMSk7Il0sInNvdXJjZVJvb3QiOiIifQ==