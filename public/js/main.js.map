{"version":3,"sources":["webpack://Lobster/webpack/universalModuleDefinition","webpack://Lobster/./node_modules/he/he.js","webpack://Lobster/./node_modules/js-cookie/src/js.cookie.js","webpack://Lobster/./node_modules/lodash/_Symbol.js","webpack://Lobster/./node_modules/lodash/_apply.js","webpack://Lobster/./node_modules/lodash/_arrayMap.js","webpack://Lobster/./node_modules/lodash/_baseFindIndex.js","webpack://Lobster/./node_modules/lodash/_baseGetTag.js","webpack://Lobster/./node_modules/lodash/_baseIndexOf.js","webpack://Lobster/./node_modules/lodash/_baseIndexOfWith.js","webpack://Lobster/./node_modules/lodash/_baseIsNaN.js","webpack://Lobster/./node_modules/lodash/_baseIsNative.js","webpack://Lobster/./node_modules/lodash/_basePullAll.js","webpack://Lobster/./node_modules/lodash/_baseRest.js","webpack://Lobster/./node_modules/lodash/_baseSetToString.js","webpack://Lobster/./node_modules/lodash/_baseUnary.js","webpack://Lobster/./node_modules/lodash/_copyArray.js","webpack://Lobster/./node_modules/lodash/_coreJsData.js","webpack://Lobster/./node_modules/lodash/_defineProperty.js","webpack://Lobster/./node_modules/lodash/_freeGlobal.js","webpack://Lobster/./node_modules/lodash/_getNative.js","webpack://Lobster/./node_modules/lodash/_getRawTag.js","webpack://Lobster/./node_modules/lodash/_getValue.js","webpack://Lobster/./node_modules/lodash/_isMasked.js","webpack://Lobster/./node_modules/lodash/_objectToString.js","webpack://Lobster/./node_modules/lodash/_overRest.js","webpack://Lobster/./node_modules/lodash/_root.js","webpack://Lobster/./node_modules/lodash/_setToString.js","webpack://Lobster/./node_modules/lodash/_shortOut.js","webpack://Lobster/./node_modules/lodash/_strictIndexOf.js","webpack://Lobster/./node_modules/lodash/_toSource.js","webpack://Lobster/./node_modules/lodash/constant.js","webpack://Lobster/./node_modules/lodash/identity.js","webpack://Lobster/./node_modules/lodash/isFunction.js","webpack://Lobster/./node_modules/lodash/isObject.js","webpack://Lobster/./node_modules/lodash/last.js","webpack://Lobster/./node_modules/lodash/lodash.js","webpack://Lobster/./node_modules/lodash/pull.js","webpack://Lobster/./node_modules/lodash/pullAll.js","webpack://Lobster/./src/js/core/PotentialFullExpression.ts","webpack://Lobster/./src/js/core/Program.ts","webpack://Lobster/./src/js/core/Simulation.ts","webpack://Lobster/./src/js/core/analysis.ts","webpack://Lobster/./src/js/core/constructs.ts","webpack://Lobster/./src/js/core/declarations.ts","webpack://Lobster/./src/js/core/entities.ts","webpack://Lobster/./src/js/core/errors.ts","webpack://Lobster/./src/js/core/expressionBase.ts","webpack://Lobster/./src/js/core/expressions.ts","webpack://Lobster/./src/js/core/functionCall.ts","webpack://Lobster/./src/js/core/functions.ts","webpack://Lobster/./src/js/core/initializers.ts","webpack://Lobster/./src/js/core/lexical.ts","webpack://Lobster/./src/js/core/objects.ts","webpack://Lobster/./src/js/core/opaqueExpression.ts","webpack://Lobster/./src/js/core/predicates.ts","webpack://Lobster/./src/js/core/runtimeEnvironment.ts","webpack://Lobster/./src/js/core/statements.ts","webpack://Lobster/./src/js/core/types.ts","webpack://Lobster/./src/js/frontend/application.ts","webpack://Lobster/./src/js/frontend/octicons.ts","webpack://Lobster/./src/js/frontend/projects.ts","webpack://Lobster/./src/js/frontend/user.ts","webpack://Lobster/./src/js/lib/cstdlib.ts","webpack://Lobster/./src/js/lib/string.ts","webpack://Lobster/./src/js/lib/vector.ts","webpack://Lobster/./src/js/main.ts","webpack://Lobster/./src/js/parse/cpp_parser.ts","webpack://Lobster/./src/js/parse/cpp_parser_util.ts","webpack://Lobster/./src/js/util/observe.ts","webpack://Lobster/./src/js/util/util.ts","webpack://Lobster/./src/js/view/codeOutlets.ts","webpack://Lobster/webpack/bootstrap","webpack://Lobster/webpack/startup","webpack://Lobster/webpack/runtime/global","webpack://Lobster/webpack/runtime/node module decorator"],"names":["root","factory","exports","module","define","amd","self","freeGlobal","g","global","window","regexAstralSymbols","regexAsciiWhitelist","regexBmpWhitelist","regexEncodeNonAscii","encodeMap","'","regexEscape","escapeMap","regexInvalidEntity","regexInvalidRawCodePoint","regexDecode","decodeMap","decodeMapLegacy","decodeMapNumeric","invalidReferenceCodePoints","stringFromCharCode","String","fromCharCode","hasOwnProperty","has","object","propertyName","call","merge","options","defaults","key","result","codePointToSymbol","codePoint","strict","output","parseError","array","value","index","length","contains","hexEscape","toString","toUpperCase","decEscape","message","Error","encode","string","test","encodeEverything","useNamedReferences","allowUnsafeSymbols","escapeCodePoint","decimal","escapeBmpSymbol","symbol","charCodeAt","replace","$0","high","low","decode","html","$1","$2","$3","$4","$5","$6","$7","$8","semicolon","decDigits","hexDigits","reference","next","isAttributeValue","parseInt","he","extend","i","arguments","attributes","s","decodeURIComponent","init","converter","api","set","document","path","expires","Date","toUTCString","JSON","stringify","e","write","encodeURIComponent","escape","stringifiedAttributes","attributeName","split","cookie","get","json","jar","cookies","parts","slice","join","charAt","name","read","parse","getJSON","remove","withConverter","Symbol","func","thisArg","args","apply","iteratee","Array","predicate","fromIndex","fromRight","getRawTag","objectToString","symToStringTag","toStringTag","undefined","Object","baseFindIndex","baseIsNaN","strictIndexOf","comparator","isFunction","isMasked","isObject","toSource","reIsHostCtor","funcProto","Function","prototype","objectProto","funcToString","reIsNative","RegExp","arrayMap","baseIndexOf","baseIndexOfWith","baseUnary","copyArray","splice","values","indexOf","seen","computed","identity","overRest","setToString","start","constant","defineProperty","baseSetToString","source","coreJsData","getNative","baseIsNative","getValue","nativeObjectToString","isOwn","tag","unmasked","uid","maskSrcKey","exec","keys","IE_PROTO","nativeMax","Math","max","transform","otherArgs","this","freeSelf","shortOut","nativeNow","now","count","lastCalled","stamp","remaining","baseGetTag","type","FUNC_ERROR_TEXT","HASH_UNDEFINED","PLACEHOLDER","WRAP_PARTIAL_FLAG","WRAP_ARY_FLAG","INFINITY","MAX_SAFE_INTEGER","NAN","MAX_ARRAY_LENGTH","wrapFlags","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reEmptyStringLeading","reEmptyStringMiddle","reEmptyStringTrailing","reEscapedHtml","reUnescapedHtml","reHasEscapedHtml","reHasUnescapedHtml","reEscape","reEvaluate","reInterpolate","reIsDeepProp","reIsPlainProp","rePropName","reRegExpChar","reHasRegExpChar","reTrim","reTrimStart","reTrimEnd","reWrapComment","reWrapDetails","reSplitDetails","reAsciiWord","reEscapeChar","reEsTemplate","reFlags","reIsBadHex","reIsBinary","reIsOctal","reIsUint","reLatin","reNoMatch","reUnescapedString","rsComboRange","rsComboMarksRange","rsLowerRange","rsUpperRange","rsBreakRange","rsMathOpRange","rsBreak","rsCombo","rsDigits","rsLower","rsMisc","rsFitz","rsNonAstral","rsRegional","rsSurrPair","rsUpper","rsMiscLower","rsMiscUpper","rsOptContrLower","rsOptContrUpper","reOptMod","rsModifier","rsOptVar","rsSeq","rsEmoji","rsSymbol","reApos","reComboMark","reUnicode","reUnicodeWord","reHasUnicode","reHasUnicodeWord","contextProps","templateCounter","typedArrayTags","cloneableTags","stringEscapes","freeParseFloat","parseFloat","freeParseInt","freeExports","nodeType","freeModule","moduleExports","freeProcess","process","nodeUtil","require","types","binding","nodeIsArrayBuffer","isArrayBuffer","nodeIsDate","isDate","nodeIsMap","isMap","nodeIsRegExp","isRegExp","nodeIsSet","isSet","nodeIsTypedArray","isTypedArray","arrayAggregator","setter","accumulator","arrayEach","arrayEachRight","arrayEvery","arrayFilter","resIndex","arrayIncludes","arrayIncludesWith","arrayPush","offset","arrayReduce","initAccum","arrayReduceRight","arraySome","asciiSize","baseProperty","baseFindKey","collection","eachFunc","baseMean","baseSum","basePropertyOf","baseReduce","current","baseTimes","n","baseValues","props","cacheHas","cache","charsStartIndex","strSymbols","chrSymbols","charsEndIndex","countHolders","placeholder","deburrLetter","escapeHtmlChar","escapeStringChar","chr","hasUnicode","mapToArray","map","size","forEach","overArg","arg","replaceHolders","setToArray","setToPairs","stringSize","lastIndex","unicodeSize","stringToArray","match","unicodeToArray","asciiToArray","unescapeHtmlChar","_","runInContext","context","pick","TypeError","arrayProto","idCounter","objectCtorString","oldDash","Buffer","Uint8Array","allocUnsafe","getPrototype","getPrototypeOf","objectCreate","create","propertyIsEnumerable","spreadableSymbol","isConcatSpreadable","symIterator","iterator","ctxClearTimeout","clearTimeout","ctxNow","ctxSetTimeout","setTimeout","nativeCeil","ceil","nativeFloor","floor","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeIsFinite","isFinite","nativeJoin","nativeKeys","nativeMin","min","nativeParseInt","nativeRandom","random","nativeReverse","reverse","DataView","Map","Promise","Set","WeakMap","nativeCreate","metaMap","realNames","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","symbolToString","lodash","isObjectLike","isArray","LazyWrapper","LodashWrapper","wrapperClone","baseCreate","proto","baseLodash","chainAll","__wrapped__","__actions__","__chain__","__index__","__values__","__dir__","__filtered__","__iteratees__","__takeCount__","__views__","Hash","entries","clear","entry","ListCache","MapCache","SetCache","__data__","add","Stack","data","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","isIndex","push","arraySample","baseRandom","arraySampleSize","shuffleSelf","baseClamp","arrayShuffle","assignMergeValue","eq","baseAssignValue","assignValue","objValue","assocIndexOf","baseAggregator","baseEach","baseAssign","copyObject","baseAt","paths","skip","number","lower","upper","baseClone","bitmask","customizer","stack","isDeep","isFlat","isFull","constructor","input","initCloneArray","getTag","isFunc","cloneBuffer","initCloneObject","getSymbolsIn","copySymbolsIn","keysIn","baseAssignIn","getSymbols","copySymbols","Ctor","cloneArrayBuffer","dataView","buffer","byteOffset","byteLength","cloneDataView","cloneTypedArray","regexp","cloneRegExp","initCloneByTag","stacked","subValue","getAllKeysIn","getAllKeys","baseConformsTo","baseDelay","wait","baseDifference","includes","isCommon","valuesLength","outer","valuesIndex","templateSettings","pop","getMapData","pairs","LARGE_ARRAY_SIZE","createBaseEach","baseForOwn","baseEachRight","baseForOwnRight","baseEvery","baseExtremum","isSymbol","baseFilter","baseFlatten","depth","isStrict","isFlattenable","baseFor","createBaseFor","baseForRight","baseFunctions","baseGet","castPath","toKey","baseGetAllKeys","keysFunc","symbolsFunc","baseGt","other","baseHas","baseHasIn","baseIntersection","arrays","othLength","othIndex","caches","maxLength","Infinity","baseInvoke","parent","last","baseIsArguments","baseIsEqual","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","objStacked","othStacked","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsMatch","matchData","noCustomizer","srcValue","COMPARE_PARTIAL_FLAG","baseIteratee","baseMatchesProperty","baseMatches","property","baseKeys","isPrototype","baseLt","baseMap","isArrayLike","getMatchData","matchesStrictComparable","isKey","isStrictComparable","hasIn","baseMerge","srcIndex","mergeFunc","safeGet","newValue","isTyped","isArrayLikeObject","isPlainObject","toPlainObject","baseMergeDeep","baseNth","baseOrderBy","iteratees","orders","getIteratee","comparer","sort","objCriteria","criteria","othCriteria","ordersLength","compareAscending","compareMultiple","baseSortBy","basePickBy","baseSet","basePullAll","basePullAt","indexes","previous","baseUnset","baseRepeat","baseRest","baseSample","baseSampleSize","nested","baseSetData","baseShuffle","baseSlice","end","baseSome","baseSortedIndex","retHighest","mid","baseSortedIndexBy","valIsNaN","valIsNull","valIsSymbol","valIsUndefined","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","setLow","baseSortedUniq","baseToNumber","baseToString","baseUniq","createSet","seenIndex","baseUpdate","updater","baseWhile","isDrop","baseWrapperValue","actions","action","baseXor","baseZipObject","assignFunc","valsLength","castArrayLikeObject","castFunction","stringToPath","castRest","castSlice","id","copy","arrayBuffer","typedArray","valIsDefined","valIsReflexive","composeArgs","partials","holders","isCurried","argsIndex","argsLength","holdersLength","leftIndex","leftLength","rangeLength","isUncurried","composeArgsRight","holdersIndex","rightIndex","rightLength","isNew","createAggregator","initializer","createAssigner","assigner","sources","guard","isIterateeCall","iterable","createCaseFirst","methodName","trailing","createCompounder","callback","words","deburr","createCtor","thisBinding","createFind","findIndexFunc","createFlow","flatRest","funcs","prereq","thru","wrapper","getFuncName","funcName","getData","isLaziable","plant","createHybrid","partialsRight","holdersRight","argPos","ary","arity","isAry","isBind","isBindKey","isFlip","getHolder","holdersCount","newHolders","createRecurry","fn","reorder","createInverter","toIteratee","baseInverter","createMathOperation","operator","defaultValue","createOver","arrayFunc","createPadding","chars","charsLength","createRange","step","toFinite","baseRange","createRelationalOperation","toNumber","wrapFunc","isCurry","newData","setData","setWrapToString","createRound","precision","toInteger","pair","noop","createToPairs","baseToPairs","createWrap","srcBitmask","newBitmask","isCombo","mergeData","createCurry","createPartial","createBind","customDefaultsAssignIn","customDefaultsMerge","customOmitClone","arrLength","arrStacked","arrValue","flatten","otherFunc","stubArray","hasPath","hasFunc","isLength","ArrayBuffer","resolve","ctorString","isMaskable","stubFalse","oldArray","details","insertWrapDetails","updateWrapDetails","getWrapDetails","rand","memoize","quote","subString","clone","difference","differenceBy","differenceWith","findIndex","findLastIndex","head","intersection","mapped","intersectionBy","intersectionWith","pull","pullAll","pullAt","union","unionBy","unionWith","unzip","group","unzipWith","without","xor","xorBy","xorWith","zip","zipWith","chain","interceptor","wrapperAt","countBy","find","findLast","forEachRight","groupBy","invokeMap","keyBy","partition","sortBy","before","bind","bindKey","WRAP_BIND_FLAG","debounce","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","invokeFunc","time","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","cancel","flush","defer","delay","resolver","memoized","Cache","negate","overArgs","transforms","funcsLength","partial","partialRight","rearg","gt","gte","isError","isInteger","isNumber","isString","lt","lte","toArray","done","iteratorToArray","remainder","toLength","isBinary","assign","assignIn","assignInWith","assignWith","at","propsIndex","propsLength","defaultsDeep","mergeWith","invert","invertBy","invoke","nativeKeysIn","isProto","baseKeysIn","omit","CLONE_DEEP_FLAG","basePick","pickBy","prop","toPairs","toPairsIn","camelCase","word","toLowerCase","capitalize","upperFirst","kebabCase","lowerCase","lowerFirst","snakeCase","startCase","upperCase","pattern","hasUnicodeWord","unicodeWords","asciiWords","attempt","bindAll","methodNames","flow","flowRight","method","methodOf","mixin","over","overEvery","overSome","basePropertyDeep","range","rangeRight","augend","addend","divide","dividend","divisor","multiply","multiplier","multiplicand","round","subtract","minuend","subtrahend","after","castArray","chunk","compact","concat","cond","conforms","baseConforms","properties","curry","curryRight","drop","dropRight","dropRightWhile","dropWhile","fill","baseFill","filter","flatMap","flatMapDeep","flatMapDepth","flattenDeep","flattenDepth","flip","fromPairs","functions","functionsIn","initial","mapKeys","mapValues","matches","matchesProperty","nthArg","omitBy","once","orderBy","propertyOf","pullAllBy","pullAllWith","reject","rest","sampleSize","setWith","shuffle","sortedUniq","sortedUniqBy","separator","limit","spread","tail","take","takeRight","takeRightWhile","takeWhile","tap","throttle","toPath","isArrLike","unary","uniq","uniqBy","uniqWith","unset","update","updateWith","valuesIn","wrap","zipObject","zipObjectDeep","entriesIn","extendWith","clamp","cloneDeep","cloneDeepWith","cloneWith","conformsTo","defaultTo","endsWith","target","position","escapeRegExp","every","findKey","findLastKey","forIn","forInRight","forOwn","forOwnRight","inRange","baseInRange","isBoolean","isElement","isEmpty","isEqual","isEqualWith","isMatch","isMatchWith","isNaN","isNative","isNil","isNull","isSafeInteger","isUndefined","isWeakMap","isWeakSet","lastIndexOf","strictLastIndexOf","maxBy","mean","meanBy","minBy","stubObject","stubString","stubTrue","nth","noConflict","pad","strLength","padEnd","padStart","radix","floating","temp","reduce","reduceRight","repeat","sample","some","sortedIndex","sortedIndexBy","sortedIndexOf","sortedLastIndex","sortedLastIndexBy","sortedLastIndexOf","startsWith","sum","sumBy","template","settings","isEscaping","isEvaluating","imports","importsKeys","importsValues","interpolate","reDelimiters","evaluate","sourceURL","escapeValue","interpolateValue","esTemplateValue","evaluateValue","variable","times","toLower","toSafeInteger","toUpper","trim","trimEnd","trimStart","truncate","omission","search","substring","newEnd","unescape","uniqueId","prefix","each","eachRight","first","VERSION","isFilter","takeName","dropName","checkIteratee","isTaker","lodashFunc","retUnwrapped","isLazy","useLazy","isHybrid","isUnwrapped","onlyLazy","chainName","dir","isRight","view","getView","iterLength","takeCount","iterIndex","commit","wrapped","toJSON","PotentialFullExpression","BasicCPPConstruct","temporaryObjects","isFullExpression","fe","findFullExpression","tempEnt","addTemporaryObject","temporaryDeallocator","TemporaryDeallocator","attach","assertFalse","tempObjEnt","assert","setOwner","TemporaryObjectEntity","entityId","RuntimePotentialFullExpression","RuntimeConstruct","model","stackType","super","createRuntimeConstruct","setCleanupConstruct","containingFullExpression","rt","sourceFiles","translationUnits","program","isCompilationUpToDate","LIBRARY_FILES","globalObjects","functionCalls","linkedObjectDefinitions","linkedFunctionDefinitions","linkedClassDefinitions","linkedObjectEntities","linkedFunctionEntities","linkedClassEntities","notes","NoteRecorder","file","tuName","TranslationUnit","PreprocessedSource","hasSyntaxErrors","link","defineIntrinsics","le","definition","qualifiedName","mainLookup","definitions","mainFunction","mainDef","addNote","CPPError","main_multiple_def","declaration","globalObjectAllocator","GlobalObjectAllocator","entity","asMutable","def","multiple_def","prevDef","selectOverloadedDefinition","addDefinition","FunctionDefinitionGroup","prevDefText","ast","text","defText","class_same_tokens","hasErrors","isCompiled","note","SourceFile","isLibrary","SourceReference","sourceFile","line","column","_includes","lineIncluded","originalReference","obj","inc","availableToInclude","alreadyIncluded","includedSourceFiles","primarySourceFile","codeStr","filterSourceCode","currentIncludeOffset","currentIncludeLineNumber","originalIncludeLineNumber","preprocessedText","includeLine","filename","original","mapping","startLine","startOffset","preprocess","recursiveInclude","includedSourceFile","fileNotFound","included","addNotes","allNotes","numLines","endLine","lineDelta","lengthDelta","lineOffset","createIncluded","getSourceReference","preprocessedSource","topLevelDeclarations","staticEntities","stringLiterals","globalScope","NamespaceScope","createTranslationUnitContext","libAST","compileTopLevelDeclarations","parsedAST","createBuiltInGlobals","err","console","log","SyntaxNote","location","NoteKind","ERROR","declarations","declAST","topLevelContext","getSourceReferenceForAST","createLibraryContext","declsOrFuncDef","createTopLevelDeclarationFromAST","decl","literal","construct","src","_lobster_implicit","iostream","SimulationActionKind","SimulationOutputKind","SimulationEvent","STEP_FORWARD_ACTION","kind","STEP_FORWARD","Simulation","cin","observable","Observable","CPPRandom","_actionsTaken","actionsTaken","outputProduced","alertsOff","_eventsOccurred","eventsOccurred","memory","Memory","execStack","_execStack","pendingNews","leakCheckIndex","isPaused","stepsTaken","atEnd","isBlockingUntilCin","allOutput","SimulationInputStream","rng","newSim","takeAction","reset","_this","send","allocateStringLiterals","callMain","globalAllocator","upNext","mainReturnObject","MainReturnObject","RuntimeFunction","setReturnObject","pushStackFrame","gainControl","prevTop","top","afterPushed","popped","afterPopped","runtimeConstruct","tus","lit","allocateStringLiteral","str","stepForward","CIN_INPUT","cinInput","assertNever","inst","addToBuffer","CIN_ECHO","PointerType","ptrTo","Char","addr","rawValue","c","getByte","isNullChar","Value","CHAR","valueToOstreamString","escapeString","COUT","event","showAlert","printObjects","execStackIds","constructId","trimws","updateBuffer","contents","extractCharFromBuffer","extractWordFromBuffer","firstWhitespace","firstNewline","exploreConstructs","Program","children","child","findConstructs","found","matchedConstruct","findFirstConstruct","constructs","constructClass","projectAnalyses","avgFunc","Predicates","byFunctionName","params","parameters","CompilerNote","param","sameType","Double","DOUBLE","byKind","retType","returnType","op","childOp","exp","lhs","byIdentifierName","isClassContext","containingClass","implicit","parentContext","translationUnit","contextualScope","contextualParameterTypes","contextualReceiverType","containingFunction","functionLocals","FunctionLocals","BlockScope","withinLoop","classEntity","baseClass","templateType","ClassScope","accessLevel","CPPConstruct","NEXT_ID","sourceReference","onAttach","sim","rtConstruct","getContainedNotes","parentOrSim","runtimeId","isActive","isUpNext","isWaiting","isDone","cleanupStarted","pauses","addChild","containingRuntimeFunction","stepsTakenAtStart","contextualReceiver","receiver","stepForwardImpl","upNextImpl","cleanupConstruct","pauseWhenUpNext","explain","describe","errorFn","construct_type","localObjects","localReferences","localVariablesByEntityId","local","variableKind","RuntimeTemporaryDeallocator","justDestructed","tempObj","deallocateTemporaryObject","runtimeLookup","startCleanup","RuntimeGlobalObjectAllocator","objDef","allocateStatic","createRuntimeInitializer","StorageSpecifier","specs","numSpecs","spec","storage","static","lobster","unsupported_feature","extern","thread_local","register","mutable","incompatible","TypeSpecifier","enum","matchedSpec","typeSpecifier","typeName","one_type","unsigned","signed","signed_unsigned","isBuiltInTypeName","baseType","builtInTypes","const","volatile","customType","lookup","declarationKind","typeNotFound","cvQualified","TopLevelDeclarationConstructsMap","isBlockContext","typeSpec","createFromAST","typeSpecs","storageSpec","storageSpecs","declarators","declarator","Declarator","declaredType","friend","FriendDeclaration","typedef","TypedefDeclaration","isVoidType","VoidDeclaration","isFunctionType","FunctionDeclaration","isArrayOfUnknownBoundType","UnknownBoundArrayDeclaration","isCompleteObjectType","isReferenceType","GlobalVariableDefinition","setInitializerFromAST","IncompleteTypeVariableDefinition","UnknownTypeDeclaration","createTopLevelSimpleDeclarationFromAST","FunctionDefinition","ClassDefinition","initAST","setDirectInitializer","a","createExpressionFromAST","setCopyInitializer","setInitializerList","elements","setDefaultInitializer","LocalDeclarationConstructsMap","createLocalSimpleDeclarationFromAST","LocalVariableDefinition","MemberDeclarationConstructsMap","createMemberSimpleDeclarationFromAST","createFunctionDeclarationFromDefinitionAST","createMemberDeclarationFromAST","MemberVariableDeclaration","IncompleteTypeMemberVariableDeclaration","SimpleDeclaration","otherSpecs","storageSpecifier","otherSpecifiers","virtual","virtual_prohibited","unknown_type","VoidType","VOID","void_prohibited","length_required","isConstructor","hasConstructorName","isDestructor","hasDestructorName","declaredEntity","FunctionEntity","parameterDeclarations","isMain","paramTypes","mainParams","receiverType","isConst","ctor","const_prohibited","return_type_prohibited","entityOrError","declareFunctionEntity","registerWithLinker","VariableDefinitionBase","initializerWasSet","setInitializer","DefaultInitializer","DirectInitializer","ListInitializer","InvalidConstruct","LocalReferenceEntity","LocalObjectEntity","declareVariableEntity","registerLocalVariable","GlobalObjectEntity","registerGlobalObjectDefinition","ParameterDeclaration","parameter","storage_prohibited","isPotentialParameterType","isPotentialParameterDefinition","invalid_parameter_type","incomplete_type_definition_prohibited","pureVirtual","isPureVirtual","determineNameAndType","findName","identifier","checkIdentifier","pointer","sub","className","missing_type_specifier","postfixes","postfix","isBoundedArrayType","multidimensional_arrays_unsupported","isArrayElemType","invalid_element_type","BoundedArrayType","parseNumericLiteralValueFromAST","ArrayOfUnknownBoundType","fnType","processFunctionDeclarator","isPotentiallyCompleteObjectType","void","ref","invalid_referred_type","ReferenceType","isPotentialReturnType","return_func","isPotentiallyCompleteArrayType","return_array","paramDeclarations","argAST","attachAll","adjustToPointerType","j","paramType","void_param","FunctionType","some_invalid_parameter_types","OVERLOADABLE_OPS","ctorInitializer","body","setDefinition","registerFunctionDefinition","definition_non_function_type","functionContext","createFunctionContext","Block","bodyContext","paramDecl","addEntityToScope","isMemberFunctionContext","ctor_initializer","CtorInitializer","constructor_only","statements","sNode","addStatement","createStatementFromAST","ClassDeclaration","ClassEntity","declareClassEntity","baseSpecs","memberDeclarations","memberDeclarationsByName","constructorDeclarations","memberVariableEntities","memberObjectEntities","memberReferenceEntities","memberEntitiesByName","inlineMemberFunctionDefinitions","implicitPublicContext","createImplicitContext","createMemberSpecificationContext","baseSpecifiers","baseEntity","isComplete","class_def","multiple_inheritance","MemberObjectEntity","constructors","mem","prevCtor","sameSignature","previous_declaration","ctorEntity","returnsVoid","defaultConstructor","objectSize","isCompleteClassType","createImplicitlyDefinedDefaultConstructorIfAppropriate","registerClassDefinition","tuContext","classKey","defaultAccessLevel","bases","baseAST","BaseSpecifier","tpMatch","templateParameter","t","isAtomicType","classContext","createClassContext","memDecls","functionDefsToCompile","memberSpecs","memSpec","access","memberSpecContext","members","memberAST","decls","memDecl","classDef","defAST","attachInlineFunctionDefinition","firstDeclaration","isDefaultConstructible","isDestructible","memObj","iddc","parseFunctionDefinition","declEntity","isSuccessfullyCompiled","virtual_inheritance","lookupResult","base_class_incomplete","base_class_type","iden","not_found","MemberReferenceEntity","member","incomplete_type_declaration_prohibited","_definitions","overload","Scope","entities","hiddenClassEntities","typeEntities","newEntity","entityName","existingEntity","variableEntityCreated","symbol_mismatch","mergeInto","FunctionOverloadGroup","classEntityCreated","ent","noParent","noBase","viable","overloads","cand","sameParamTypes","registerGlobalObjectEntity","base","ownMember","baseMember","CPPEntity","_nextEntityId","NamedEntity","DeclaredEntityBase","mergeDefinitionInto","_overloads","VariableEntityBase","isParameter","variableLocation","prev_local","stackFrame","localObjectLookup","bindLocalReference","localReferenceLookup","type_mismatch","def_not_found","staticLookup","returnObject","calledFunction","num","pendingCalledFunction","topFrame","paramObj","getParameterObject","bindReferenceParameter","arrayEntity","elemType","getArrayElemSubobject","arrDesc","containingEntity","classDefinition","similarType","getBaseSubobject","getMemberObject","containingObjectDesc","MemberVariableEntityBase","prev_member","bindMemberReference","creator","owner","newOwner","creatorRt","objInst","allocateTemporaryObject","_name","isOdrUsed","isImplicit","isUserDefined","overloadGroup","matchingFunction","selectOverloadBySignature","sameReturnType","addDeclarations","returnTypesMatch","addOverload","registerFunctionEntity","no_matching_overload","isCompleteReturnType","createClassType","classes","registerClassEntity","Note","BasicNoteBase","sourceRef","primarySourceReference","allSourceReferences","PreprocessorNote","ConstructNoteBase","primaryConstruct","getNearestSourceReference","LinkerNote","_allNotes","hasWarnings","_numNotesByKind","error","warning","style","WARNING","cin_not_supported","prev_def","prev","big_three","bigThreeYes","bigThreeNo","yStr","nStr","ctor_def","dtor_def","pass_by_value","constRef","typeString","improper_name","classType","delegate_only","multiple_delegates","multiple_base_inits","multiple_member_inits","dtor","no_destructor_auto","no_destructor_temporary","invalid_return_type","op_member","op_subscript_one_param","no_return_type","nonCovariantReturnType","derived","invalid_pointed_type","memberNotSupported","zero_length","scalar_args","declType","array_string_literal","targetType","initType","list_reference_prohibited","list_atomic_prohibited","list_array_unsupported","aggregate_unsupported","list_narrowing","list_array","list_length","list_empty","list_same_type","list_arithmetic_type","matching_constructor","argTypes","desc","no_default_constructor","referencePrvalueConst","referenceType","from","to","referenceBind","referenceBindMultiple","stringLiteralLength","arrSize","uninitialized","array_default_init","array_direct_init","OTHER","typeNames","outside_class","unsigned_not_supported","expr","assignment","lhs_lvalue","lhs_not_assignable","lhs_const","rhs","binary","arithmetic_operands","left","right","integral_operands","boolean_operand","operand","arithmetic_common_type","pointer_difference","incomplete_pointed_type","pointer_offset","unsupported_type","lvalue_required","pointer_comparison","same_pointer_type_required","null_literal_comparison","null_literal_array_equality","delete","no_destructor","pointerToObjectType","dereference","subscript","invalid_operand_type","incomplete_element_type","invalid_offset_type","dot","class_type_only","incomplete_class_type_prohibited","no_such_member","ambiguous_member","class_entity_found","arrow","class_pointer_type","invalid_operand","lvalue_operand","invalid_binary_operands","isPointerType","englishString","logicalNot","operand_bool","addressOf","object_type_required","ternary","condition_bool","sameValueCategory","unaryPlus","unaryMinus","prefixIncrement","decrement_bool_prohibited","postfixIncrement","functionCall","main","numParams","invalid_operand_expression","paramReferenceType","paramReferenceLvalue","not_defined","pt","incomplete_return_type","thisExpr","memberFunc","binaryOperatorOverload","no_such_overload","ambiguous_overload","ambiguous","no_match","keyword","alt_op","thisConst","cvUnqualified","stmt","function_definition_prohibited","if","iteration","breakStatement","returnStatement","empty","exprVoid","incomplete_type","library_unsupported","ent1","ent2","newDef","feature","referencePrvalue","ternarySameType","type1","type2","ternaryNoVoid","Expression","conversionLength","valueCategory","isTail","expressions","isWellTyped","isTypedExpression","RuntimeExpression","evalResult","readValue","isValid","objDesc","msg","eventOccurred","UNDEFINED_BEHAVIOR","ExpressionConstructsMap","CommaExpression","TernaryExpression","AssignmentExpression","isPotentiallyCompleteClassType","selectOperatorOverload","UnsupportedExpression","ArithmeticBinaryOperatorExpression","RelationalBinaryOperatorExpression","LogicalBinaryOperatorExpression","PrefixIncrementExpression","DereferenceExpression","AddressOfExpression","UnaryPlusExpression","UnaryMinusExpression","LogicalNotExpression","SubscriptExpression","FunctionCallExpression","DotExpression","ArrowExpression","PostfixIncrementExpression","IdentifierExpression","NumericLiteralExpression","StringLiteralExpression","ParenthesesExpression","InitializerListExpression","OpaqueExpression","ExpressionConstructsRuntimeMap","RuntimeComma","RuntimeTernary","RuntimeAssignment","RuntimeArithmeticBinaryOperator","RuntimePointerDifference","RuntimePointerOffset","RuntimeOutputOperatorExpression","RuntimeInputOperatorExpression","RuntimeRelationalBinaryOperator","RuntimePointerComparisonExpression","RuntimeLogicalBinaryOperatorExpression","RuntimeNonMemberOperatorOverloadExpression","RuntimeMemberOperatorOverloadExpression","RuntimePrefixIncrementExpression","RuntimeDereferenceExpression","RuntimeAddressOfExpression","RuntimeUnaryPlusExpression","RuntimeUnaryMinusExpression","RuntimeLogicalNotExpression","RuntimePostfixIncrementExpression","RuntimeSubscriptExpression","RuntimeFunctionDotExpression","RuntimeObjectDotExpression","RuntimeFunctionArrowExpression","RuntimeObjectArrowExpression","RuntimeFunctionIdentifierExpression","RuntimeObjectIdentifierExpression","RuntimeNumericLiteral","RuntimeStringLiteralExpression","RuntimeParentheses","RuntimeInitializerListExpression","RuntimeOpaqueExpression","RuntimeMagicFunctionCallExpression","RuntimeFunctionCallExpression","createRuntimeExpression","unsupportedName","element","SimpleRuntimeExpression","subexpressions","subexp","operate","CommaExpressionOutlet","describeEvalResult","setSubexpressions","setEvalResult","condition","then","otherwise","compileCondition","compileConsequences","standardConversion","Bool","isPrvalue","isLvalue","convertToPRValue","TernaryExpressionOutlet","areLValuesAssignable","AssignmentExpressionOutlet","reason","others","writeValue","BinaryOperatorExpression","BinaryOperatorExpressionOutlet","mult","intDiv","trunc","floatDiv","mod","bitAnd","bitXor","bitOr","bitShiftLeft","bitShiftRight","ARITHMETIC_BINARY_OPERATIONS","combine","isIntegralType","isArithmeticType","convertedLeft","convertedRight","usualArithmeticConversions","OutputOperatorExpression","InputOperatorExpression","PointerDifferenceExpression","PointerOffsetExpression","Int","isPointerToCompleteType","pointerDifference","leftArr","ArrayPointerType","arrayObject","rightArr","rawEquals","invalidated","pointerOnLeft","pointerOffset","resultType","onePast","isStringLiteralExpression","OutputOperatorExpressionOutlet","cout","address","InputOperatorExpressionOutlet","skipws","blockUntilCin","resultOrError","extractAndParseFromBuffer","ne","RELATIONAL_BINARY_OPERATIONS","compare","BOOL","PointerComparisonExpression","isIntegerLiteralZero","NullPointerConversion","subType","ArrayToPointerConversion","leftResult","rightResult","isArrayPointerType","UNSPECIFIED_BEHAVIOR","compileLogicalSubexpression","subexpr","shortCircuitReslt","hasShortCircuited","b","UnaryOperatorExpression","UnaryOperatorExpressionOutlet","prevValue","delta","modify","v","INT","convertedOperand","ptr","CRASH","isNegative","getPointerTo","integralPromotion","arithmeticNegate","SubscriptExpressionOutlet","memberName","functionCallReceiver","getEntity","entityLookup","classScope","peelReference","receiverContext","createExpressionContextWithReceiverType","DotExpressionOutlet","operandType","ArrowExpressionOutlet","receiverCalledOn","PostfixIncrementExpressionOutlet","IdentifierOutlet","expression","scope","overloadResult","overloadResolution","selected","candidates","candidate","runtimeObjectLookup","literalJSParse","litValue","literalTypes","NumericLiteralOutlet","registerStringLiteral","StringLiteralExpressionOutlet","getStringLiteral","subexpression","ParenthesesOutlet","allWellTyped","eltType","typeEntity","simpleType","initializerList","createTemporaryObject","elementsArray","eltAST","elementIndex","objectInstance","elem","setValue","CPPObject","eltsPointer","pointerOffsetRaw","AUXILIARY_EXPRESSION_CONTEXT","AuxiliaryExpression","resultCandidates","candidateParamTypes","isMemberFunction","argType","candidateParamType","referenceCompatible","convertedArg","MAGIC_FUNCTIONS","ASSERTION_FAILURE","pause","pauseIf","MagicFunctionCallExpression","functionName","functionImpl","MagicFunctionCallExpressionOutlet","ImplicitConversion","toType","RuntimeImplicitConversion","LValueToRValueConversion","fromEvalResult","LValueToRValueOutlet","ArrayToPointerOutlet","StreamToBoolConversion","StreamToBoolOutlet","TypeConversion","TypeConversionOutlet","NoOpTypeConversion","PointerConversion","ToBooleanConversionBase","PointerToBooleanConversion","FloatingToBooleanConversion","IntegralToBooleanConversion","IntegralPromotion","IntegralConversion","FloatingPointPromotion","FloatingPointConversion","IntegralToFloatingConversion","FloatingToIntegralConversion","QualificationConversion","QualificationConversionOutlet","isVolatile","analyticFrom","typeConversion","isFloatingPointType","Float","qualificationConversion","isCvConvertible","suppressLTR","fromPrvalue","leftOrig","rightOrig","FLOAT","originalArgs","adjustedArgs","leftmost","operatorFunctionName","MemberOperatorOverloadExpression","NonMemberOperatorOverloadExpression","converted","selectedFunctionEntity","returnsCompleteType","FunctionCall","NonMemberOperatorOverloadExpressionOutlet","createRuntimeFunctionCall","retObj","receiverExpression","MemberOperatorOverloadExpressionOutlet","argInitializers","PassByReferenceParameterEntity","isCompleteParameterType","PassByValueParameterEntity","argInit","returnByValueTarget","registerFunctionCall","registerCall","RuntimeFunctionCall","INDEX_FUNCTION_CALL_PUSH","INDEX_FUNCTION_CALL_ARGUMENTS","INDEX_FUNCTION_CALL_CALL","INDEX_FUNCTION_CALL_RETURN","functionDef","aInit","createRuntimeFunction","isReturnByValue","loseControl","callReceived","LOBSTER_MAGIC_FUNCTIONS","contextualParamTypes","createExpressionContextWithParameterTypes","FunctionCallExpressionOutlet","INDEX_FUNCTION_CALL_EXPRESSION_OPERAND","INDEX_FUNCTION_CALL_EXPRESSION_CALL","INDEX_FUNCTION_CALL_EXPRESSION_RETURN","RuntimeFunctionIndices","caller","hasControl","setContainingRuntimeFunction","createRuntimeCtorInitializer","createRuntimeStatement","pushFrame","popFrame","initializeLocalObject","popStackFrame","Initializer","RuntimeInitializer","ReferenceDefaultInitializer","AtomicDefaultInitializer","ArrayDefaultInitializer","ClassDefaultInitializer","RuntimeDefaultInitializer","RuntimeAtomicDefaultInitializer","AtomicDefaultInitializerOutlet","targetDesc","AtomicType","elementInitializers","elemInit","ArraySubobjectEntity","RuntimeArrayDefaultInitializer","ArrayDefaultInitializerOutlet","ctorCall","RuntimeClassDefaultInitializer","ClassDefaultInitializerOutlet","ReferenceDirectInitializer","AtomicDirectInitializer","ArrayDirectInitializer","ClassDirectInitializer","RuntimeDirectInitializer","refTo","RuntimeReferenceDirectInitializer","ReferenceDirectInitializerOutlet","ReferenceCopyInitializerOutlet","rhsDesc","alreadyPushed","bindTo","typedArg","RuntimeAtomicDirectInitializer","AtomicDirectInitializerOutlet","AtomicCopyInitializerOutlet","firstArg","RuntimeArrayDirectInitializer","charsToWrite","NULL_CHAR","arrayElemSubobjects","getArrayElemSubobjects","RuntimeClassDirectInitializer","ClassDirectInitializerOutlet","ClassCopyInitializerOutlet","components","memberInitializers","memberInitializersByName","ReceiverEntity","comp","delegatedCtor","delegatedConstructorInitializer","baseInit","BaseSubobjectEntity","baseInitializer","memName","memEntity","memInit","initializers","memInitAST","RuntimeCtorInitializer","CtorInitializerOutlet","memberIndex","isAggregate","MAGIC_FUNCTION_NAMES","KEYWORDS","LOBSTER_KEYWORDS","ALT_OPS","noteHandler","names","fqname","ObjectData","AtomicObjectData","bytes","readBytes","bytesToValue","writeBytes","valueToBytes","ArrayObjectData","subAddr","elemObjects","ArraySubobject","outOfBoundsObj","setValidity","elemObj","kill","ClassObjectData","memberObjectMap","baseSubobjects","baseObj","BaseSubobject","memberSubobjects","subObj","MemberSubobject","subobjects","subobj","isAlive","_isValid","getArrayElemSubobjectByAddress","deallocatedBy","ObjectPointerType","val","setRawValue","_onValueSet","isValueValid","valid","Subobject","containingObject","subobjectValueWritten","arrObj","contDesc","parentDesc","description","OPAQUE_EXPRESSIONS","impl","OpaqueExpressionOutlet","constructKind","byKinds","constructKinds","byTypedExpression","typePredicate","byTypedDeclaration","isTypedDeclaration","byVariableName","byVariableInitialValue","queryValue","byVariableUpdate","byFunctionCallName","byOperatorOverloadCall","isOperatorOverloadExpression","byMemberAccessName","valueToClone","otherValue","otherRawValue","combiner","offsetValue","rawOffsetValue","modifier","x","valueString","valueToString","capacity","staticCapacity","stackCapacity","heapCapacity","staticStart","staticEnd","stackStart","stackEnd","heapStart","heapEnd","temporaryStart","temporaryCapacity","temporaryEnd","randomInteger","objects","stringLiteralMap","staticTop","staticObjects","temporaryBottom","MemoryStack","heap","MemoryHeap","isObjectPointerType","pointedObject","InvalidObject","killer","previousObj","StringLiteralObject","allocateObject","jsStringToNullTerminatedCharArray","StaticObject","staticEntity","tempEntity","TemporaryObject","killObject","objs","atomicObj","_frames","frames","rtFunc","frame","MemoryFrame","bottom","objectMap","DynamicObject","localObjectsByEntityId","localReferencesByEntityId","objEntity","AutoObject","StatementConstructsMap","UnsupportedStatement","IfStatement","WhileStatement","ForStatement","BreakStatement","ReturnStatement","DeclarationStatement","ExpressionStatement","NullStatement","StatementConstructsRuntimeMap","RuntimeBlock","RuntimeIfStatement","RuntimeWhileStatement","RuntimeForStatement","RuntimeBreakStatement","RuntimeReturnStatement","RuntimeDeclarationStatement","RuntimeExpressionStatement","RuntimeNullStatement","Statement","RuntimeStatement","ExpressionStatementOutlet","NullStatementOutlet","createLocalDeclarationFromAST","DeclarationStatementOutlet","currentDeclarationIndex","nextIndex","d","runtimeInit","BreakStatementOutlet","isIncompleteObjectType","returnInitializer","ReturnByReferenceEntity","ReturnObjectEntity","ReturnStatementOutlet","RuntimeReturnStatementIndices","PUSH_INITIALIZER","RETURN","popUntil","createBlockContext","block","stmtAst","statement","BlockOutlet","IfStatementOutlet","upNextFns","outerContext","whileContext","createLoopContext","WhileStatementOutlet","post","forContext","ForStatementOutlet","vowels","isVowel","isDerivedFrom","typeOrCtor","TypeBase","covariantType","dc","bc","isClassType","isReferenceCompatible","fromType","getCompoundNext","t2AllConst","ArithmeticType","IntegralType","FloatingPointType","ClassTypeBase","isIncompleteClassType","isReferenceRelated","varname","_cvQualifiedImpl","parenthesize","thisType","outside","precedence","isPointerToType","isArrayPointerToType","type_kind","excludeBase","decorated","plural","ObjectTypeBase","ValueType","isAtomic","userDefinedOnly","SimpleType","typeStr","getCVString","htmlDecoratedType","createSuccessParsingResult","unescapeString","p","Number","ZERO","Size_t","sizeExpressionAST","classId","shared","templateParameters","otherClass","defaultCtor","destructor","memEnt","ctorDecl","nextClassId","ptype","paramStrType","paramStrEnglish","otherParamTypes","sameReceiverType","builtInTypeNames","LobsterApplication","myProjects","MyProjects","$","user","User","logInButtonElem","checkLogin","listenTo","response","fetch","headers","projects","setProjects","ICON_PERSON","email","refreshProjects","messageResponse","listElem","appendTo","project","status","newUser","currentUser","logout","oldUser","registerLibraryHeader","registerOpaqueExpression","setRandomSeed","getLocal","extractCharsFromCString","ptrValue","nToCopy","ptrType","charValues","validLength","charValuesToCopy","outOfBounds","seenInvalidChar","isValueDereferenceable","subRaw","copyFromCString","charsToCopy","getCapacity","getSize","allocateNewArray","getDataPtr","extractStringValue","cstr","addFromCStrings","deleteOld","leftChars","leftValidLength","rightChars","rightValidLength","newChars","newCapacity","newSize","deleteObject","compareStrings","compareStringCstring","compareCstringString","rec","arrElems","allocateNewObject","numChars","char","addRaw","arrElem","equals","pos","unshift","lookupTypeInContext","extractLineFromBuffer","oldArrAddr","orig","instantiateVectorTemplate","element_type","elt_type","initialCapacity","arr","n_raw","elems","otherSize","otherArr","cap","oldArr","SyntaxError","expected","captureStackTrace","hex","ch","literalEscape","classEscape","describeExpectation","expectation","escapedParts","part","inverted","expected1","descriptions","describeExpected","found1","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$parsedeclaration","peg$parsedeclarator","function_definition","peg$parsefunction_definition","peg$startRuleFunction","peg$c4","peg$literalExpectation","peg$c5","peg$c6","peg$classExpectation","peg$c8","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c17","peg$c18","peg$c20","peg$c21","peg$c23","peg$c24","peg$c27","peg$c28","peg$c30","peg$c31","peg$c33","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c43","peg$c44","peg$c47","peg$c50","peg$c52","peg$c53","peg$c55","peg$c56","peg$c58","peg$c59","peg$c62","peg$c64","peg$c65","peg$c66","peg$c67","peg$c69","track","peg$c71","m","peg$c74","nonTypeDeclSpecs","firstTypeSpec","peg$c76","peg$c78","peg$c79","peg$c80","peg$c81","peg$c82","peg$c83","peg$c84","peg$c85","peg$c87","peg$c88","peg$c93","peg$c94","peg$c95","peg$c100","peg$c101","peg$c102","peg$c103","peg$c104","peg$c105","peg$c106","peg$c107","peg$c108","peg$c109","peg$c110","peg$c111","peg$c112","peg$c113","peg$c114","peg$c115","peg$c116","peg$otherExpectation","peg$c118","peg$c119","peg$c120","peg$c121","peg$c122","peg$c123","peg$c124","peg$c125","peg$c126","peg$c127","peg$c128","peg$c129","peg$c130","peg$c131","peg$c132","peg$c133","peg$c134","peg$c135","peg$c136","peg$c137","peg$c138","peg$c139","peg$c141","peg$c142","peg$c143","peg$c145","peg$c146","peg$c149","peg$c150","peg$c156","peg$c160","peg$c161","peg$c162","cv","absorb","peg$c163","peg$c164","peg$c165","peg$c166","peg$c169","peg$c170","peg$c171","peg$c172","peg$c175","peg$c184","peg$c185","peg$c187","peg$c188","peg$c189","peg$c193","peg$c194","peg$c195","peg$c196","peg$c197","peg$c198","peg$c199","peg$c200","peg$c201","peg$c202","peg$c203","peg$c204","peg$c205","peg$c206","peg$c207","peg$c208","peg$c209","peg$c210","peg$c212","peg$c213","peg$c214","peg$c215","peg$c217","peg$c218","peg$c219","peg$c220","peg$c224","peg$c226","peg$c227","peg$c228","peg$c229","peg$c230","peg$c231","composeBinaryOp","peg$c232","peg$c233","peg$c234","peg$c235","peg$c236","peg$c238","peg$c239","peg$c240","peg$c241","peg$c242","peg$c244","peg$c245","peg$c246","peg$c247","peg$c248","peg$c249","peg$c250","peg$c251","peg$c252","peg$c253","peg$c254","peg$c255","peg$c256","peg$c258","peg$c259","peg$c260","peg$c261","peg$c262","peg$c263","peg$c264","peg$c265","peg$c266","peg$c267","peg$c268","peg$c269","peg$c270","peg$c272","peg$c273","peg$c274","peg$c276","peg$c278","peg$c281","peg$c282","peg$c283","peg$c285","peg$c286","peg$c287","peg$c288","peg$c289","peg$c291","peg$c292","peg$c300","peg$c303","peg$c305","peg$c307","peg$c308","peg$c309","peg$c310","peg$c320","peg$c321","peg$c324","peg$c325","peg$c327","peg$c328","peg$c330","peg$c331","peg$c333","peg$c334","peg$c336","peg$c337","ops","postfixExp","peg$c341","peg$c343","peg$c344","peg$c349","peg$c351","peg$c352","peg$c356","peg$c357","peg$c361","peg$c362","peg$c364","peg$c365","peg$c366","peg$c367","peg$c369","peg$c371","peg$c379","peg$c380","peg$c382","peg$c383","peg$c387","peg$c388","peg$c389","peg$c392","peg$c393","peg$c394","peg$c396","peg$c397","peg$c399","peg$c400","peg$c403","peg$c405","peg$c407","peg$c409","peg$c411","peg$c413","peg$c415","peg$c417","peg$c419","peg$c421","peg$c423","peg$c425","peg$c426","peg$c427","peg$c428","peg$c430","peg$c431","peg$c432","peg$c433","peg$c436","peg$c437","peg$c438","peg$c440","peg$c441","peg$c442","peg$c443","peg$c444","getUserTypeNames","peg$c450","peg$c451","peg$c452","peg$c453","peg$c454","peg$c455","peg$c456","peg$c460","peg$c461","peg$c462","peg$c463","peg$c464","peg$c465","peg$c466","peg$c470","peg$c475","peg$c477","peg$currPos","peg$savedPos","peg$posDetailsCache","peg$result","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","peg$computeLocation","text1","ignoreCase","peg$computePosDetails","startPos","endPos","startPosDetails","endPosDetails","peg$fail","s0","s1","s2","s3","s4","s5","peg$parsews","peg$parsedecl_or_comment","peg$parsecomment","substr","peg$parsestatement","s6","s7","peg$parseidentifier","label","peg$parseWS","peg$parseexp_const","case","default","peg$c22","peg$parselabeled_statement","peg$parseblock","s8","s9","s10","s11","s12","s13","peg$parseexpression","peg$parseselection_statement","s14","s15","peg$parseidentifierChar","peg$parseexpression_statement","peg$parsenull_statement","peg$parsedeclaration_statement","peg$parsefor_init_statement","peg$c51","peg$parseiteration_statement","peg$parsejump_statement","peg$parsedecl_specifiers","peg$parsedeclarator_init","peg$parsedeclarator_list","peg$parsesimple_declaration","peg$parseclass_specifier","peg$parseclass_definition","peg$parsedecl_specifiers_prohibit_class_name","peg$parsector_initializer","emptyDeclSpecs","peg$parsemem_initializer","peg$parseexp_list","peg$parsedecl_specifier_non_type","peg$parse_decl_specifiers_non_type","peg$parsetype_specifier","peg$parsestorage_class_specifier","peg$parsefunction_specifier","peg$parsedecl_specifier","peg$parsedecl_specifier_non_user_type_name","declSpecs","inline","explicit","peg$c75","peg$parse_simple_type_name_non_user","peg$parsesimple_type_name_non_user","peg$parseelaborated_type_specifier","peg$parseenum_specifier","prohibitOwnClassName","peg$parsetype_specifiers","peg$parsesimple_type_name","classNameStack","peg$parsetrailing_type_specifier","peg$parseclass_key","peg$parseclass_name","peg$parse_simple_type_name","peg$parseenumerator","peg$parsebrace_or_equal_initializer","peg$parseinitializer","peg$parseexp_assn","peg$parseinitializer_list","peg$parse_declarator","peg$parseabstract_declarator","peg$parse_abs_declarator","abstract","peg$parsecv_qualifier","peg$parsedeclarator_simple","peg$parsedeclarator_postfixes","peg$parseabs_declarator_simple","peg$parsedeclarator_postfix","peg$parseargument_declaration","peg$parseargument_declaration_list","peg$parsename","peg$parsedname","peg$parsetype_id","peg$parseexp_unary","peg$parseop_comp_assn","peg$parseexp_cond","peg$parseexp_or","peg$parseexp_and","peg$parseexp_or_bit","peg$parseexp_xor_bit","peg$parseexp_and_bit","peg$parseexp_eq","peg$parseexp_rel","peg$parseexp_shift","peg$parseop_rel","peg$parseexp_add","peg$parseop_shift","peg$parseexp_mult","peg$parseop_add","peg$parseexp_pm","peg$parseop_mult","peg$parseexp_cast","peg$parseop_pm","peg$parseop_unary","peg$c294","peg$parse_new_declarator","peg$parsenew_declarator","peg$parsenew_type_id","peg$parsenew_initializer","peg$parseexp_new","peg$c326","peg$c329","peg$c332","peg$c335","peg$parseexp_construct","peg$c350","digits","neg","peg$c385","peg$parseliteral_float","peg$parseliteral_int","peg$parseescape","peg$parseliteral_char","peg$c376","peg$parseliteral_string","peg$c377","peg$parseliteral_boolean","peg$c378","peg$parseliteral","u","peg$parsenested_name_specifier","peg$parsequalified_id","peg$parseexp_id","peg$parseoverloadable_op","peg$parseopaque_expression","peg$parseexp_primary","peg$parseop_postfix","peg$parseexp_postfix","peg$parseexp_delete","peg$parsenew_declarator_postfix","peg$parsenew_declarator_postfixes","peg$parsetype_name_id","peg$parseoperator_function_id","peg$parsesimple_escape","peg$parseoctal_escape","peg$parseidentifierFirstChar","peg$parsetemplate_identifier","peg$parseclass_head","peg$parsemember_specification","mems","peg$c446","peg$parseclass_head_name","peg$parsebase_specifier","peg$parsebase_specifier_list","peg$parsebase_clause","peg$parseaccess_specifier","peg$parsemember_declaration","peg$parsemember_declarator_list","peg$parsemember_declarator","peg$c472","peg$c473","peg$parsequalified_class_name","assoc","exprType","associativity","shift","eater","eaten","attr","_userTypeNames","location1","buildMessage","receiveMessage","observer","_act","catAct","category","_default","objWithObservable","listener","addListener","removeListener","messageCategory","unwrap","propertyKey","descriptor","universalObservers","observers","silent","sendMessageToObservers","listenerAdded","listenerRemoved","cat","mix","targetProto","cssClass","escapes","escaped","newStr","seed","newSeed","seededRandom","rnd","getValueString","toIndex","CODE_ANIMATIONS","ConstructOutlet","outletID","_ID","addChildOutlet","addClass","append","removeInstance","setChildInstance","instanceSet","toggleClass","stopListeningTo","oldInst","instanceRemoved","removeClass","childInst","childOutlet","setRuntimeInstance","PotentialFullExpressionOutlet","FunctionOutlet","parameterOutlets","returnTypeElem","nameElem","paramsElem","bodyElem","paramDefs","paramDef","paramOutlet","ParameterOutlet","passedValueElem","htmlDecoratedName","createDefaultOutlet","innerElem","lineElem","createStatementOutlet","StatementOutlet","initializerOutlets","declaratorElems","declarationElem","allLocalVariableDefinitions","declElem","declaratorString","createInitializerOutlet","setCurrentDeclarationIndex","addChildExpressionOutlet","hideEvalValueRecursive","htmlDecoratedKeyword","addChildStatementOutlet","ReturnInitializerOutlet","htmlDecoratedValue","InitializerOutlet","elementInitializerOutlets","ctorCallOutlet","FunctionCallOutlet","argOutlet","ExpressionOutlet","animateEvaluation","showingEvalResult","evalResultElem","wrapperElem","exprElem","suppressAnimation","r","htmlDecoratedObject","getObjectString","showEvalResult","animate","width","css","fadeTo","finish","removeEvalValue","cKey","ASSIGNMENT_OP_HTML","htmlDecoratedOperator","TERNARY_OP_HTML1","TERNARY_OP_HTML2","COMMA_OP_HTML","returnDestinationElement","operandOutlet","createExpressionOutlet","callOutlet","returnOutlet","argumentSeparator","argInitializerOutlets","ArgumentInitializerOutlet","registerCallOutlet","outlet","expressionOutlet","parentElement","indented","childElem","isBlock","argOutlets","receiverOutlet","__webpack_module_cache__","__webpack_require__","moduleId","loaded","__webpack_modules__","globalThis","nmd"],"mappings":"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O,GAAe,MAAM,GAAe,OAAO,EAAO,OAAO,EAAO,SAAS,EAAO,SAAS,EAAO,SAAS,EAAO,SAAS,EAAO,QAAQ,EAAO,QAAQ,EAAO,OAAO,EAAO,OAAO,EAAS,SAAS,EAAS,SAAS,EAAO,SAAS,EAAO,SAAS,EAAO,SAAS,EAAO,SAAS,EAAS,QAAQ,EAAS,QAAQ,EAAS,QAAQ,EAAS,QAAQ,GAAe,MAAM,GAAe,OAAO,GAAe,OAAO,EAAS,OAAO,GAAe,MAAM,GAAe,OAAO,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,GAAe,OAAO,GAAe,MAAM,EAAS,OAAO,EAAS,SAAS,GAAe,MAAM,GAAe,OAAO,GAAe,OAAO,EAAS,OAAO,EAAS,KAAK,EAAS,OAAO,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,GAAe,OAAO,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,IAAS,KAAK,EAAS,SAAS,EAAS,SAAS,EAAS,QAAQ,EAAS,QAAQ,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,EAAO,QAAQ,GAAe,MAAM,GAAe,OAAO,GAAe,OAAO,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,IAAS,QAAQ,EAAS,SAAS,EAAS,SAAS,GAAe,OAAO,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,EAAO,SAAS,EAAO,SAAS,EAAO,SAAS,EAAO,SAAS,EAAS,SAAS,EAAS,SAAS,EAAO,QAAQ,EAAO,QAAQ,EAAS,QAAQ,EAAS,QAAQ,EAAO,OAAO,EAAO,OAAO,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,EAAS,QAAQ,EAAS,QAAQ,EAAS,QAAQ,EAAS,QAAQ,GAAe,MAAM,GAAe,OAAO,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,GAAe,OAAO,GAAe,OAAO,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,GAAe,OAAO,GAAe,MAAM,EAAS,QAAQ,EAAS,QAAQ,GAAe,MAAM,GAAe,OAAO,GAAe,OAAO,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,GAAe,OAAO,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,EAAO,SAAS,EAAO,SAAS,EAAS,QAAQ,EAAS,QAAQ,EAAO,OAAO,EAAS,OAAO,GAAe,OAAO,GAAe,MAAM,GAAe,OAAO,EAAS,MAAM,EAAS,OAAO,GAAe,OAAO,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,EAAS,SAAS,EAAS,OAAO,EAAS,OAAO,EAAS,QAAQ,EAAO,QAAQ,EAAO,QAAQ,EAAS,QAAQ,EAAS,QAAQ,EAAS,QAAQ,EAAS,OAAO,EAAS,OAAO,EAAS,QAAQ,EAAS,QAAQ,EAAS,QAAQ,EAAS,QAAQ,EAAS,OAAO,EAAS,QAAQ,EAAS,UAAU,EAAS,SAAS,EAAS,SAAS,EAAS,OAAO,EAAS,OAAO,EAAS,MAAM,EAAS,MAAM,EAAS,QAAQ,EAAS,SAAS,EAAS,QAAQ,EAAS,OAAO,EAAS,OAAO,EAAS,QAAQ,EAAS,SAAS,EAAS,QAAQ,EAAS,SAAS,EAAS,SAAS,EAAS,KAAK,EAAO,QAAQ,EAAS,KAAK,EAAS,KAAK,EAAS,KAAK,EAAS,KAAK,EAAS,KAAK,EAAS,UAAU,EAAS,UAAU,EAAS,KAAK,EAAS,MAAM,EAAS,KAAK,EAAS,MAAM,EAAS,OAAO,EAAS,MAAM,EAAS,QAAQ,EAAS,QAAQ,EAAS,SAAS,EAAS,MAAM,EAAS,MAAM,EAAS,OAAO,EAAS,UAAU,EAAS,OAAO,EAAS,MAAM,EAAS,OAAO,EAAS,MAAM,EAAS,MAAM,EAAS,MAAM,EAAS,MAAM,EAAS,MAAM,EAAS,QAAQ,EAAS,MAAM,EAAS,MAAM,EAAS,MAAM,EAAS,MAAM,EAAS,MAAM,EAAS,MAAM,EAAS,MAAM,EAAS,MAAM,EAAS,MAAM,EAAS,OAAO,EAAS,OAAO,EAAS,MAAM,EAAS,MAAM,EAAS,OAAO,EAAS,OAAO,EAAS,OAAO,EAAS,OAAO,EAAS,OAAO,EAAS,OAAO,EAAS,QAAQ,EAAS,QAAQ,EAAS,OAAO,EAAS,OAAO,EAAS,MAAM,EAAS,MAAM,EAAS,OAAO,EAAS,OAAO,EAAS,MAAM,EAAS,MAAM,EAAS,QAAQ,EAAS,QAAQ,EAAS,OAAO,EAAS,OAA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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Lobster\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Lobster\"] = factory();\n\telse\n\t\troot[\"Lobster\"] = factory();\n})(self, function() {\nreturn ","/*! https://mths.be/he v1.2.0 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t// All astral symbols.\n\tvar regexAstralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\t// All ASCII symbols (not just printable ASCII) except those listed in the\n\t// first column of the overrides table.\n\t// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides\n\tvar regexAsciiWhitelist = /[\\x01-\\x7F]/g;\n\t// All BMP symbols that are not ASCII newlines, printable ASCII symbols, or\n\t// code points listed in the first column of the overrides table on\n\t// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides.\n\tvar regexBmpWhitelist = /[\\x01-\\t\\x0B\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g;\n\n\tvar regexEncodeNonAscii = /<\\u20D2|=\\u20E5|>\\u20D2|\\u205F\\u200A|\\u219D\\u0338|\\u2202\\u0338|\\u2220\\u20D2|\\u2229\\uFE00|\\u222A\\uFE00|\\u223C\\u20D2|\\u223D\\u0331|\\u223E\\u0333|\\u2242\\u0338|\\u224B\\u0338|\\u224D\\u20D2|\\u224E\\u0338|\\u224F\\u0338|\\u2250\\u0338|\\u2261\\u20E5|\\u2264\\u20D2|\\u2265\\u20D2|\\u2266\\u0338|\\u2267\\u0338|\\u2268\\uFE00|\\u2269\\uFE00|\\u226A\\u0338|\\u226A\\u20D2|\\u226B\\u0338|\\u226B\\u20D2|\\u227F\\u0338|\\u2282\\u20D2|\\u2283\\u20D2|\\u228A\\uFE00|\\u228B\\uFE00|\\u228F\\u0338|\\u2290\\u0338|\\u2293\\uFE00|\\u2294\\uFE00|\\u22B4\\u20D2|\\u22B5\\u20D2|\\u22D8\\u0338|\\u22D9\\u0338|\\u22DA\\uFE00|\\u22DB\\uFE00|\\u22F5\\u0338|\\u22F9\\u0338|\\u2933\\u0338|\\u29CF\\u0338|\\u29D0\\u0338|\\u2A6D\\u0338|\\u2A70\\u0338|\\u2A7D\\u0338|\\u2A7E\\u0338|\\u2AA1\\u0338|\\u2AA2\\u0338|\\u2AAC\\uFE00|\\u2AAD\\uFE00|\\u2AAF\\u0338|\\u2AB0\\u0338|\\u2AC5\\u0338|\\u2AC6\\u0338|\\u2ACB\\uFE00|\\u2ACC\\uFE00|\\u2AFD\\u20E5|[\\xA0-\\u0113\\u0116-\\u0122\\u0124-\\u012B\\u012E-\\u014D\\u0150-\\u017E\\u0192\\u01B5\\u01F5\\u0237\\u02C6\\u02C7\\u02D8-\\u02DD\\u0311\\u0391-\\u03A1\\u03A3-\\u03A9\\u03B1-\\u03C9\\u03D1\\u03D2\\u03D5\\u03D6\\u03DC\\u03DD\\u03F0\\u03F1\\u03F5\\u03F6\\u0401-\\u040C\\u040E-\\u044F\\u0451-\\u045C\\u045E\\u045F\\u2002-\\u2005\\u2007-\\u2010\\u2013-\\u2016\\u2018-\\u201A\\u201C-\\u201E\\u2020-\\u2022\\u2025\\u2026\\u2030-\\u2035\\u2039\\u203A\\u203E\\u2041\\u2043\\u2044\\u204F\\u2057\\u205F-\\u2063\\u20AC\\u20DB\\u20DC\\u2102\\u2105\\u210A-\\u2113\\u2115-\\u211E\\u2122\\u2124\\u2127-\\u2129\\u212C\\u212D\\u212F-\\u2131\\u2133-\\u2138\\u2145-\\u2148\\u2153-\\u215E\\u2190-\\u219B\\u219D-\\u21A7\\u21A9-\\u21AE\\u21B0-\\u21B3\\u21B5-\\u21B7\\u21BA-\\u21DB\\u21DD\\u21E4\\u21E5\\u21F5\\u21FD-\\u2205\\u2207-\\u2209\\u220B\\u220C\\u220F-\\u2214\\u2216-\\u2218\\u221A\\u221D-\\u2238\\u223A-\\u2257\\u2259\\u225A\\u225C\\u225F-\\u2262\\u2264-\\u228B\\u228D-\\u229B\\u229D-\\u22A5\\u22A7-\\u22B0\\u22B2-\\u22BB\\u22BD-\\u22DB\\u22DE-\\u22E3\\u22E6-\\u22F7\\u22F9-\\u22FE\\u2305\\u2306\\u2308-\\u2310\\u2312\\u2313\\u2315\\u2316\\u231C-\\u231F\\u2322\\u2323\\u232D\\u232E\\u2336\\u233D\\u233F\\u237C\\u23B0\\u23B1\\u23B4-\\u23B6\\u23DC-\\u23DF\\u23E2\\u23E7\\u2423\\u24C8\\u2500\\u2502\\u250C\\u2510\\u2514\\u2518\\u251C\\u2524\\u252C\\u2534\\u253C\\u2550-\\u256C\\u2580\\u2584\\u2588\\u2591-\\u2593\\u25A1\\u25AA\\u25AB\\u25AD\\u25AE\\u25B1\\u25B3-\\u25B5\\u25B8\\u25B9\\u25BD-\\u25BF\\u25C2\\u25C3\\u25CA\\u25CB\\u25EC\\u25EF\\u25F8-\\u25FC\\u2605\\u2606\\u260E\\u2640\\u2642\\u2660\\u2663\\u2665\\u2666\\u266A\\u266D-\\u266F\\u2713\\u2717\\u2720\\u2736\\u2758\\u2772\\u2773\\u27C8\\u27C9\\u27E6-\\u27ED\\u27F5-\\u27FA\\u27FC\\u27FF\\u2902-\\u2905\\u290C-\\u2913\\u2916\\u2919-\\u2920\\u2923-\\u292A\\u2933\\u2935-\\u2939\\u293C\\u293D\\u2945\\u2948-\\u294B\\u294E-\\u2976\\u2978\\u2979\\u297B-\\u297F\\u2985\\u2986\\u298B-\\u2996\\u299A\\u299C\\u299D\\u29A4-\\u29B7\\u29B9\\u29BB\\u29BC\\u29BE-\\u29C5\\u29C9\\u29CD-\\u29D0\\u29DC-\\u29DE\\u29E3-\\u29E5\\u29EB\\u29F4\\u29F6\\u2A00-\\u2A02\\u2A04\\u2A06\\u2A0C\\u2A0D\\u2A10-\\u2A17\\u2A22-\\u2A27\\u2A29\\u2A2A\\u2A2D-\\u2A31\\u2A33-\\u2A3C\\u2A3F\\u2A40\\u2A42-\\u2A4D\\u2A50\\u2A53-\\u2A58\\u2A5A-\\u2A5D\\u2A5F\\u2A66\\u2A6A\\u2A6D-\\u2A75\\u2A77-\\u2A9A\\u2A9D-\\u2AA2\\u2AA4-\\u2AB0\\u2AB3-\\u2AC8\\u2ACB\\u2ACC\\u2ACF-\\u2ADB\\u2AE4\\u2AE6-\\u2AE9\\u2AEB-\\u2AF3\\u2AFD\\uFB00-\\uFB04]|\\uD835[\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDD6B]/g;\n\tvar encodeMap = {'\\xAD':'shy','\\u200C':'zwnj','\\u200D':'zwj','\\u200E':'lrm','\\u2063':'ic','\\u2062':'it','\\u2061':'af','\\u200F':'rlm','\\u200B':'ZeroWidthSpace','\\u2060':'NoBreak','\\u0311':'DownBreve','\\u20DB':'tdot','\\u20DC':'DotDot','\\t':'Tab','\\n':'NewLine','\\u2008':'puncsp','\\u205F':'MediumSpace','\\u2009':'thinsp','\\u200A':'hairsp','\\u2004':'emsp13','\\u2002':'ensp','\\u2005':'emsp14','\\u2003':'emsp','\\u2007':'numsp','\\xA0':'nbsp','\\u205F\\u200A':'ThickSpace','\\u203E':'oline','_':'lowbar','\\u2010':'dash','\\u2013':'ndash','\\u2014':'mdash','\\u2015':'horbar',',':'comma',';':'semi','\\u204F':'bsemi',':':'colon','\\u2A74':'Colone','!':'excl','\\xA1':'iexcl','?':'quest','\\xBF':'iquest','.':'period','\\u2025':'nldr','\\u2026':'mldr','\\xB7':'middot','\\'':'apos','\\u2018':'lsquo','\\u2019':'rsquo','\\u201A':'sbquo','\\u2039':'lsaquo','\\u203A':'rsaquo','\"':'quot','\\u201C':'ldquo','\\u201D':'rdquo','\\u201E':'bdquo','\\xAB':'laquo','\\xBB':'raquo','(':'lpar',')':'rpar','[':'lsqb',']':'rsqb','{':'lcub','}':'rcub','\\u2308':'lceil','\\u2309':'rceil','\\u230A':'lfloor','\\u230B':'rfloor','\\u2985':'lopar','\\u2986':'ropar','\\u298B':'lbrke','\\u298C':'rbrke','\\u298D':'lbrkslu','\\u298E':'rbrksld','\\u298F':'lbrksld','\\u2990':'rbrkslu','\\u2991':'langd','\\u2992':'rangd','\\u2993':'lparlt','\\u2994':'rpargt','\\u2995':'gtlPar','\\u2996':'ltrPar','\\u27E6':'lobrk','\\u27E7':'robrk','\\u27E8':'lang','\\u27E9':'rang','\\u27EA':'Lang','\\u27EB':'Rang','\\u27EC':'loang','\\u27ED':'roang','\\u2772':'lbbrk','\\u2773':'rbbrk','\\u2016':'Vert','\\xA7':'sect','\\xB6':'para','@':'commat','*':'ast','/':'sol','undefined':null,'&':'amp','#':'num','%':'percnt','\\u2030':'permil','\\u2031':'pertenk','\\u2020':'dagger','\\u2021':'Dagger','\\u2022':'bull','\\u2043':'hybull','\\u2032':'prime','\\u2033':'Prime','\\u2034':'tprime','\\u2057':'qprime','\\u2035':'bprime','\\u2041':'caret','`':'grave','\\xB4':'acute','\\u02DC':'tilde','^':'Hat','\\xAF':'macr','\\u02D8':'breve','\\u02D9':'dot','\\xA8':'die','\\u02DA':'ring','\\u02DD':'dblac','\\xB8':'cedil','\\u02DB':'ogon','\\u02C6':'circ','\\u02C7':'caron','\\xB0':'deg','\\xA9':'copy','\\xAE':'reg','\\u2117':'copysr','\\u2118':'wp','\\u211E':'rx','\\u2127':'mho','\\u2129':'iiota','\\u2190':'larr','\\u219A':'nlarr','\\u2192':'rarr','\\u219B':'nrarr','\\u2191':'uarr','\\u2193':'darr','\\u2194':'harr','\\u21AE':'nharr','\\u2195':'varr','\\u2196':'nwarr','\\u2197':'nearr','\\u2198':'searr','\\u2199':'swarr','\\u219D':'rarrw','\\u219D\\u0338':'nrarrw','\\u219E':'Larr','\\u219F':'Uarr','\\u21A0':'Rarr','\\u21A1':'Darr','\\u21A2':'larrtl','\\u21A3':'rarrtl','\\u21A4':'mapstoleft','\\u21A5':'mapstoup','\\u21A6':'map','\\u21A7':'mapstodown','\\u21A9':'larrhk','\\u21AA':'rarrhk','\\u21AB':'larrlp','\\u21AC':'rarrlp','\\u21AD':'harrw','\\u21B0':'lsh','\\u21B1':'rsh','\\u21B2':'ldsh','\\u21B3':'rdsh','\\u21B5':'crarr','\\u21B6':'cularr','\\u21B7':'curarr','\\u21BA':'olarr','\\u21BB':'orarr','\\u21BC':'lharu','\\u21BD':'lhard','\\u21BE':'uharr','\\u21BF':'uharl','\\u21C0':'rharu','\\u21C1':'rhard','\\u21C2':'dharr','\\u21C3':'dharl','\\u21C4':'rlarr','\\u21C5':'udarr','\\u21C6':'lrarr','\\u21C7':'llarr','\\u21C8':'uuarr','\\u21C9':'rrarr','\\u21CA':'ddarr','\\u21CB':'lrhar','\\u21CC':'rlhar','\\u21D0':'lArr','\\u21CD':'nlArr','\\u21D1':'uArr','\\u21D2':'rArr','\\u21CF':'nrArr','\\u21D3':'dArr','\\u21D4':'iff','\\u21CE':'nhArr','\\u21D5':'vArr','\\u21D6':'nwArr','\\u21D7':'neArr','\\u21D8':'seArr','\\u21D9':'swArr','\\u21DA':'lAarr','\\u21DB':'rAarr','\\u21DD':'zigrarr','\\u21E4':'larrb','\\u21E5':'rarrb','\\u21F5':'duarr','\\u21FD':'loarr','\\u21FE':'roarr','\\u21FF':'hoarr','\\u2200':'forall','\\u2201':'comp','\\u2202':'part','\\u2202\\u0338':'npart','\\u2203':'exist','\\u2204':'nexist','\\u2205':'empty','\\u2207':'Del','\\u2208':'in','\\u2209':'notin','\\u220B':'ni','\\u220C':'notni','\\u03F6':'bepsi','\\u220F':'prod','\\u2210':'coprod','\\u2211':'sum','+':'plus','\\xB1':'pm','\\xF7':'div','\\xD7':'times','<':'lt','\\u226E':'nlt','<\\u20D2':'nvlt','=':'equals','\\u2260':'ne','=\\u20E5':'bne','\\u2A75':'Equal','>':'gt','\\u226F':'ngt','>\\u20D2':'nvgt','\\xAC':'not','|':'vert','\\xA6':'brvbar','\\u2212':'minus','\\u2213':'mp','\\u2214':'plusdo','\\u2044':'frasl','\\u2216':'setmn','\\u2217':'lowast','\\u2218':'compfn','\\u221A':'Sqrt','\\u221D':'prop','\\u221E':'infin','\\u221F':'angrt','\\u2220':'ang','\\u2220\\u20D2':'nang','\\u2221':'angmsd','\\u2222':'angsph','\\u2223':'mid','\\u2224':'nmid','\\u2225':'par','\\u2226':'npar','\\u2227':'and','\\u2228':'or','\\u2229':'cap','\\u2229\\uFE00':'caps','\\u222A':'cup','\\u222A\\uFE00':'cups','\\u222B':'int','\\u222C':'Int','\\u222D':'tint','\\u2A0C':'qint','\\u222E':'oint','\\u222F':'Conint','\\u2230':'Cconint','\\u2231':'cwint','\\u2232':'cwconint','\\u2233':'awconint','\\u2234':'there4','\\u2235':'becaus','\\u2236':'ratio','\\u2237':'Colon','\\u2238':'minusd','\\u223A':'mDDot','\\u223B':'homtht','\\u223C':'sim','\\u2241':'nsim','\\u223C\\u20D2':'nvsim','\\u223D':'bsim','\\u223D\\u0331':'race','\\u223E':'ac','\\u223E\\u0333':'acE','\\u223F':'acd','\\u2240':'wr','\\u2242':'esim','\\u2242\\u0338':'nesim','\\u2243':'sime','\\u2244':'nsime','\\u2245':'cong','\\u2247':'ncong','\\u2246':'simne','\\u2248':'ap','\\u2249':'nap','\\u224A':'ape','\\u224B':'apid','\\u224B\\u0338':'napid','\\u224C':'bcong','\\u224D':'CupCap','\\u226D':'NotCupCap','\\u224D\\u20D2':'nvap','\\u224E':'bump','\\u224E\\u0338':'nbump','\\u224F':'bumpe','\\u224F\\u0338':'nbumpe','\\u2250':'doteq','\\u2250\\u0338':'nedot','\\u2251':'eDot','\\u2252':'efDot','\\u2253':'erDot','\\u2254':'colone','\\u2255':'ecolon','\\u2256':'ecir','\\u2257':'cire','\\u2259':'wedgeq','\\u225A':'veeeq','\\u225C':'trie','\\u225F':'equest','\\u2261':'equiv','\\u2262':'nequiv','\\u2261\\u20E5':'bnequiv','\\u2264':'le','\\u2270':'nle','\\u2264\\u20D2':'nvle','\\u2265':'ge','\\u2271':'nge','\\u2265\\u20D2':'nvge','\\u2266':'lE','\\u2266\\u0338':'nlE','\\u2267':'gE','\\u2267\\u0338':'ngE','\\u2268\\uFE00':'lvnE','\\u2268':'lnE','\\u2269':'gnE','\\u2269\\uFE00':'gvnE','\\u226A':'ll','\\u226A\\u0338':'nLtv','\\u226A\\u20D2':'nLt','\\u226B':'gg','\\u226B\\u0338':'nGtv','\\u226B\\u20D2':'nGt','\\u226C':'twixt','\\u2272':'lsim','\\u2274':'nlsim','\\u2273':'gsim','\\u2275':'ngsim','\\u2276':'lg','\\u2278':'ntlg','\\u2277':'gl','\\u2279':'ntgl','\\u227A':'pr','\\u2280':'npr','\\u227B':'sc','\\u2281':'nsc','\\u227C':'prcue','\\u22E0':'nprcue','\\u227D':'sccue','\\u22E1':'nsccue','\\u227E':'prsim','\\u227F':'scsim','\\u227F\\u0338':'NotSucceedsTilde','\\u2282':'sub','\\u2284':'nsub','\\u2282\\u20D2':'vnsub','\\u2283':'sup','\\u2285':'nsup','\\u2283\\u20D2':'vnsup','\\u2286':'sube','\\u2288':'nsube','\\u2287':'supe','\\u2289':'nsupe','\\u228A\\uFE00':'vsubne','\\u228A':'subne','\\u228B\\uFE00':'vsupne','\\u228B':'supne','\\u228D':'cupdot','\\u228E':'uplus','\\u228F':'sqsub','\\u228F\\u0338':'NotSquareSubset','\\u2290':'sqsup','\\u2290\\u0338':'NotSquareSuperset','\\u2291':'sqsube','\\u22E2':'nsqsube','\\u2292':'sqsupe','\\u22E3':'nsqsupe','\\u2293':'sqcap','\\u2293\\uFE00':'sqcaps','\\u2294':'sqcup','\\u2294\\uFE00':'sqcups','\\u2295':'oplus','\\u2296':'ominus','\\u2297':'otimes','\\u2298':'osol','\\u2299':'odot','\\u229A':'ocir','\\u229B':'oast','\\u229D':'odash','\\u229E':'plusb','\\u229F':'minusb','\\u22A0':'timesb','\\u22A1':'sdotb','\\u22A2':'vdash','\\u22AC':'nvdash','\\u22A3':'dashv','\\u22A4':'top','\\u22A5':'bot','\\u22A7':'models','\\u22A8':'vDash','\\u22AD':'nvDash','\\u22A9':'Vdash','\\u22AE':'nVdash','\\u22AA':'Vvdash','\\u22AB':'VDash','\\u22AF':'nVDash','\\u22B0':'prurel','\\u22B2':'vltri','\\u22EA':'nltri','\\u22B3':'vrtri','\\u22EB':'nrtri','\\u22B4':'ltrie','\\u22EC':'nltrie','\\u22B4\\u20D2':'nvltrie','\\u22B5':'rtrie','\\u22ED':'nrtrie','\\u22B5\\u20D2':'nvrtrie','\\u22B6':'origof','\\u22B7':'imof','\\u22B8':'mumap','\\u22B9':'hercon','\\u22BA':'intcal','\\u22BB':'veebar','\\u22BD':'barvee','\\u22BE':'angrtvb','\\u22BF':'lrtri','\\u22C0':'Wedge','\\u22C1':'Vee','\\u22C2':'xcap','\\u22C3':'xcup','\\u22C4':'diam','\\u22C5':'sdot','\\u22C6':'Star','\\u22C7':'divonx','\\u22C8':'bowtie','\\u22C9':'ltimes','\\u22CA':'rtimes','\\u22CB':'lthree','\\u22CC':'rthree','\\u22CD':'bsime','\\u22CE':'cuvee','\\u22CF':'cuwed','\\u22D0':'Sub','\\u22D1':'Sup','\\u22D2':'Cap','\\u22D3':'Cup','\\u22D4':'fork','\\u22D5':'epar','\\u22D6':'ltdot','\\u22D7':'gtdot','\\u22D8':'Ll','\\u22D8\\u0338':'nLl','\\u22D9':'Gg','\\u22D9\\u0338':'nGg','\\u22DA\\uFE00':'lesg','\\u22DA':'leg','\\u22DB':'gel','\\u22DB\\uFE00':'gesl','\\u22DE':'cuepr','\\u22DF':'cuesc','\\u22E6':'lnsim','\\u22E7':'gnsim','\\u22E8':'prnsim','\\u22E9':'scnsim','\\u22EE':'vellip','\\u22EF':'ctdot','\\u22F0':'utdot','\\u22F1':'dtdot','\\u22F2':'disin','\\u22F3':'isinsv','\\u22F4':'isins','\\u22F5':'isindot','\\u22F5\\u0338':'notindot','\\u22F6':'notinvc','\\u22F7':'notinvb','\\u22F9':'isinE','\\u22F9\\u0338':'notinE','\\u22FA':'nisd','\\u22FB':'xnis','\\u22FC':'nis','\\u22FD':'notnivc','\\u22FE':'notnivb','\\u2305':'barwed','\\u2306':'Barwed','\\u230C':'drcrop','\\u230D':'dlcrop','\\u230E':'urcrop','\\u230F':'ulcrop','\\u2310':'bnot','\\u2312':'profline','\\u2313':'profsurf','\\u2315':'telrec','\\u2316':'target','\\u231C':'ulcorn','\\u231D':'urcorn','\\u231E':'dlcorn','\\u231F':'drcorn','\\u2322':'frown','\\u2323':'smile','\\u232D':'cylcty','\\u232E':'profalar','\\u2336':'topbot','\\u233D':'ovbar','\\u233F':'solbar','\\u237C':'angzarr','\\u23B0':'lmoust','\\u23B1':'rmoust','\\u23B4':'tbrk','\\u23B5':'bbrk','\\u23B6':'bbrktbrk','\\u23DC':'OverParenthesis','\\u23DD':'UnderParenthesis','\\u23DE':'OverBrace','\\u23DF':'UnderBrace','\\u23E2':'trpezium','\\u23E7':'elinters','\\u2423':'blank','\\u2500':'boxh','\\u2502':'boxv','\\u250C':'boxdr','\\u2510':'boxdl','\\u2514':'boxur','\\u2518':'boxul','\\u251C':'boxvr','\\u2524':'boxvl','\\u252C':'boxhd','\\u2534':'boxhu','\\u253C':'boxvh','\\u2550':'boxH','\\u2551':'boxV','\\u2552':'boxdR','\\u2553':'boxDr','\\u2554':'boxDR','\\u2555':'boxdL','\\u2556':'boxDl','\\u2557':'boxDL','\\u2558':'boxuR','\\u2559':'boxUr','\\u255A':'boxUR','\\u255B':'boxuL','\\u255C':'boxUl','\\u255D':'boxUL','\\u255E':'boxvR','\\u255F':'boxVr','\\u2560':'boxVR','\\u2561':'boxvL','\\u2562':'boxVl','\\u2563':'boxVL','\\u2564':'boxHd','\\u2565':'boxhD','\\u2566':'boxHD','\\u2567':'boxHu','\\u2568':'boxhU','\\u2569':'boxHU','\\u256A':'boxvH','\\u256B':'boxVh','\\u256C':'boxVH','\\u2580':'uhblk','\\u2584':'lhblk','\\u2588':'block','\\u2591':'blk14','\\u2592':'blk12','\\u2593':'blk34','\\u25A1':'squ','\\u25AA':'squf','\\u25AB':'EmptyVerySmallSquare','\\u25AD':'rect','\\u25AE':'marker','\\u25B1':'fltns','\\u25B3':'xutri','\\u25B4':'utrif','\\u25B5':'utri','\\u25B8':'rtrif','\\u25B9':'rtri','\\u25BD':'xdtri','\\u25BE':'dtrif','\\u25BF':'dtri','\\u25C2':'ltrif','\\u25C3':'ltri','\\u25CA':'loz','\\u25CB':'cir','\\u25EC':'tridot','\\u25EF':'xcirc','\\u25F8':'ultri','\\u25F9':'urtri','\\u25FA':'lltri','\\u25FB':'EmptySmallSquare','\\u25FC':'FilledSmallSquare','\\u2605':'starf','\\u2606':'star','\\u260E':'phone','\\u2640':'female','\\u2642':'male','\\u2660':'spades','\\u2663':'clubs','\\u2665':'hearts','\\u2666':'diams','\\u266A':'sung','\\u2713':'check','\\u2717':'cross','\\u2720':'malt','\\u2736':'sext','\\u2758':'VerticalSeparator','\\u27C8':'bsolhsub','\\u27C9':'suphsol','\\u27F5':'xlarr','\\u27F6':'xrarr','\\u27F7':'xharr','\\u27F8':'xlArr','\\u27F9':'xrArr','\\u27FA':'xhArr','\\u27FC':'xmap','\\u27FF':'dzigrarr','\\u2902':'nvlArr','\\u2903':'nvrArr','\\u2904':'nvHarr','\\u2905':'Map','\\u290C':'lbarr','\\u290D':'rbarr','\\u290E':'lBarr','\\u290F':'rBarr','\\u2910':'RBarr','\\u2911':'DDotrahd','\\u2912':'UpArrowBar','\\u2913':'DownArrowBar','\\u2916':'Rarrtl','\\u2919':'latail','\\u291A':'ratail','\\u291B':'lAtail','\\u291C':'rAtail','\\u291D':'larrfs','\\u291E':'rarrfs','\\u291F':'larrbfs','\\u2920':'rarrbfs','\\u2923':'nwarhk','\\u2924':'nearhk','\\u2925':'searhk','\\u2926':'swarhk','\\u2927':'nwnear','\\u2928':'toea','\\u2929':'tosa','\\u292A':'swnwar','\\u2933':'rarrc','\\u2933\\u0338':'nrarrc','\\u2935':'cudarrr','\\u2936':'ldca','\\u2937':'rdca','\\u2938':'cudarrl','\\u2939':'larrpl','\\u293C':'curarrm','\\u293D':'cularrp','\\u2945':'rarrpl','\\u2948':'harrcir','\\u2949':'Uarrocir','\\u294A':'lurdshar','\\u294B':'ldrushar','\\u294E':'LeftRightVector','\\u294F':'RightUpDownVector','\\u2950':'DownLeftRightVector','\\u2951':'LeftUpDownVector','\\u2952':'LeftVectorBar','\\u2953':'RightVectorBar','\\u2954':'RightUpVectorBar','\\u2955':'RightDownVectorBar','\\u2956':'DownLeftVectorBar','\\u2957':'DownRightVectorBar','\\u2958':'LeftUpVectorBar','\\u2959':'LeftDownVectorBar','\\u295A':'LeftTeeVector','\\u295B':'RightTeeVector','\\u295C':'RightUpTeeVector','\\u295D':'RightDownTeeVector','\\u295E':'DownLeftTeeVector','\\u295F':'DownRightTeeVector','\\u2960':'LeftUpTeeVector','\\u2961':'LeftDownTeeVector','\\u2962':'lHar','\\u2963':'uHar','\\u2964':'rHar','\\u2965':'dHar','\\u2966':'luruhar','\\u2967':'ldrdhar','\\u2968':'ruluhar','\\u2969':'rdldhar','\\u296A':'lharul','\\u296B':'llhard','\\u296C':'rharul','\\u296D':'lrhard','\\u296E':'udhar','\\u296F':'duhar','\\u2970':'RoundImplies','\\u2971':'erarr','\\u2972':'simrarr','\\u2973':'larrsim','\\u2974':'rarrsim','\\u2975':'rarrap','\\u2976':'ltlarr','\\u2978':'gtrarr','\\u2979':'subrarr','\\u297B':'suplarr','\\u297C':'lfisht','\\u297D':'rfisht','\\u297E':'ufisht','\\u297F':'dfisht','\\u299A':'vzigzag','\\u299C':'vangrt','\\u299D':'angrtvbd','\\u29A4':'ange','\\u29A5':'range','\\u29A6':'dwangle','\\u29A7':'uwangle','\\u29A8':'angmsdaa','\\u29A9':'angmsdab','\\u29AA':'angmsdac','\\u29AB':'angmsdad','\\u29AC':'angmsdae','\\u29AD':'angmsdaf','\\u29AE':'angmsdag','\\u29AF':'angmsdah','\\u29B0':'bemptyv','\\u29B1':'demptyv','\\u29B2':'cemptyv','\\u29B3':'raemptyv','\\u29B4':'laemptyv','\\u29B5':'ohbar','\\u29B6':'omid','\\u29B7':'opar','\\u29B9':'operp','\\u29BB':'olcross','\\u29BC':'odsold','\\u29BE':'olcir','\\u29BF':'ofcir','\\u29C0':'olt','\\u29C1':'ogt','\\u29C2':'cirscir','\\u29C3':'cirE','\\u29C4':'solb','\\u29C5':'bsolb','\\u29C9':'boxbox','\\u29CD':'trisb','\\u29CE':'rtriltri','\\u29CF':'LeftTriangleBar','\\u29CF\\u0338':'NotLeftTriangleBar','\\u29D0':'RightTriangleBar','\\u29D0\\u0338':'NotRightTriangleBar','\\u29DC':'iinfin','\\u29DD':'infintie','\\u29DE':'nvinfin','\\u29E3':'eparsl','\\u29E4':'smeparsl','\\u29E5':'eqvparsl','\\u29EB':'lozf','\\u29F4':'RuleDelayed','\\u29F6':'dsol','\\u2A00':'xodot','\\u2A01':'xoplus','\\u2A02':'xotime','\\u2A04':'xuplus','\\u2A06':'xsqcup','\\u2A0D':'fpartint','\\u2A10':'cirfnint','\\u2A11':'awint','\\u2A12':'rppolint','\\u2A13':'scpolint','\\u2A14':'npolint','\\u2A15':'pointint','\\u2A16':'quatint','\\u2A17':'intlarhk','\\u2A22':'pluscir','\\u2A23':'plusacir','\\u2A24':'simplus','\\u2A25':'plusdu','\\u2A26':'plussim','\\u2A27':'plustwo','\\u2A29':'mcomma','\\u2A2A':'minusdu','\\u2A2D':'loplus','\\u2A2E':'roplus','\\u2A2F':'Cross','\\u2A30':'timesd','\\u2A31':'timesbar','\\u2A33':'smashp','\\u2A34':'lotimes','\\u2A35':'rotimes','\\u2A36':'otimesas','\\u2A37':'Otimes','\\u2A38':'odiv','\\u2A39':'triplus','\\u2A3A':'triminus','\\u2A3B':'tritime','\\u2A3C':'iprod','\\u2A3F':'amalg','\\u2A40':'capdot','\\u2A42':'ncup','\\u2A43':'ncap','\\u2A44':'capand','\\u2A45':'cupor','\\u2A46':'cupcap','\\u2A47':'capcup','\\u2A48':'cupbrcap','\\u2A49':'capbrcup','\\u2A4A':'cupcup','\\u2A4B':'capcap','\\u2A4C':'ccups','\\u2A4D':'ccaps','\\u2A50':'ccupssm','\\u2A53':'And','\\u2A54':'Or','\\u2A55':'andand','\\u2A56':'oror','\\u2A57':'orslope','\\u2A58':'andslope','\\u2A5A':'andv','\\u2A5B':'orv','\\u2A5C':'andd','\\u2A5D':'ord','\\u2A5F':'wedbar','\\u2A66':'sdote','\\u2A6A':'simdot','\\u2A6D':'congdot','\\u2A6D\\u0338':'ncongdot','\\u2A6E':'easter','\\u2A6F':'apacir','\\u2A70':'apE','\\u2A70\\u0338':'napE','\\u2A71':'eplus','\\u2A72':'pluse','\\u2A73':'Esim','\\u2A77':'eDDot','\\u2A78':'equivDD','\\u2A79':'ltcir','\\u2A7A':'gtcir','\\u2A7B':'ltquest','\\u2A7C':'gtquest','\\u2A7D':'les','\\u2A7D\\u0338':'nles','\\u2A7E':'ges','\\u2A7E\\u0338':'nges','\\u2A7F':'lesdot','\\u2A80':'gesdot','\\u2A81':'lesdoto','\\u2A82':'gesdoto','\\u2A83':'lesdotor','\\u2A84':'gesdotol','\\u2A85':'lap','\\u2A86':'gap','\\u2A87':'lne','\\u2A88':'gne','\\u2A89':'lnap','\\u2A8A':'gnap','\\u2A8B':'lEg','\\u2A8C':'gEl','\\u2A8D':'lsime','\\u2A8E':'gsime','\\u2A8F':'lsimg','\\u2A90':'gsiml','\\u2A91':'lgE','\\u2A92':'glE','\\u2A93':'lesges','\\u2A94':'gesles','\\u2A95':'els','\\u2A96':'egs','\\u2A97':'elsdot','\\u2A98':'egsdot','\\u2A99':'el','\\u2A9A':'eg','\\u2A9D':'siml','\\u2A9E':'simg','\\u2A9F':'simlE','\\u2AA0':'simgE','\\u2AA1':'LessLess','\\u2AA1\\u0338':'NotNestedLessLess','\\u2AA2':'GreaterGreater','\\u2AA2\\u0338':'NotNestedGreaterGreater','\\u2AA4':'glj','\\u2AA5':'gla','\\u2AA6':'ltcc','\\u2AA7':'gtcc','\\u2AA8':'lescc','\\u2AA9':'gescc','\\u2AAA':'smt','\\u2AAB':'lat','\\u2AAC':'smte','\\u2AAC\\uFE00':'smtes','\\u2AAD':'late','\\u2AAD\\uFE00':'lates','\\u2AAE':'bumpE','\\u2AAF':'pre','\\u2AAF\\u0338':'npre','\\u2AB0':'sce','\\u2AB0\\u0338':'nsce','\\u2AB3':'prE','\\u2AB4':'scE','\\u2AB5':'prnE','\\u2AB6':'scnE','\\u2AB7':'prap','\\u2AB8':'scap','\\u2AB9':'prnap','\\u2ABA':'scnap','\\u2ABB':'Pr','\\u2ABC':'Sc','\\u2ABD':'subdot','\\u2ABE':'supdot','\\u2ABF':'subplus','\\u2AC0':'supplus','\\u2AC1':'submult','\\u2AC2':'supmult','\\u2AC3':'subedot','\\u2AC4':'supedot','\\u2AC5':'subE','\\u2AC5\\u0338':'nsubE','\\u2AC6':'supE','\\u2AC6\\u0338':'nsupE','\\u2AC7':'subsim','\\u2AC8':'supsim','\\u2ACB\\uFE00':'vsubnE','\\u2ACB':'subnE','\\u2ACC\\uFE00':'vsupnE','\\u2ACC':'supnE','\\u2ACF':'csub','\\u2AD0':'csup','\\u2AD1':'csube','\\u2AD2':'csupe','\\u2AD3':'subsup','\\u2AD4':'supsub','\\u2AD5':'subsub','\\u2AD6':'supsup','\\u2AD7':'suphsub','\\u2AD8':'supdsub','\\u2AD9':'forkv','\\u2ADA':'topfork','\\u2ADB':'mlcp','\\u2AE4':'Dashv','\\u2AE6':'Vdashl','\\u2AE7':'Barv','\\u2AE8':'vBar','\\u2AE9':'vBarv','\\u2AEB':'Vbar','\\u2AEC':'Not','\\u2AED':'bNot','\\u2AEE':'rnmid','\\u2AEF':'cirmid','\\u2AF0':'midcir','\\u2AF1':'topcir','\\u2AF2':'nhpar','\\u2AF3':'parsim','\\u2AFD':'parsl','\\u2AFD\\u20E5':'nparsl','\\u266D':'flat','\\u266E':'natur','\\u266F':'sharp','\\xA4':'curren','\\xA2':'cent','$':'dollar','\\xA3':'pound','\\xA5':'yen','\\u20AC':'euro','\\xB9':'sup1','\\xBD':'half','\\u2153':'frac13','\\xBC':'frac14','\\u2155':'frac15','\\u2159':'frac16','\\u215B':'frac18','\\xB2':'sup2','\\u2154':'frac23','\\u2156':'frac25','\\xB3':'sup3','\\xBE':'frac34','\\u2157':'frac35','\\u215C':'frac38','\\u2158':'frac45','\\u215A':'frac56','\\u215D':'frac58','\\u215E':'frac78','\\uD835\\uDCB6':'ascr','\\uD835\\uDD52':'aopf','\\uD835\\uDD1E':'afr','\\uD835\\uDD38':'Aopf','\\uD835\\uDD04':'Afr','\\uD835\\uDC9C':'Ascr','\\xAA':'ordf','\\xE1':'aacute','\\xC1':'Aacute','\\xE0':'agrave','\\xC0':'Agrave','\\u0103':'abreve','\\u0102':'Abreve','\\xE2':'acirc','\\xC2':'Acirc','\\xE5':'aring','\\xC5':'angst','\\xE4':'auml','\\xC4':'Auml','\\xE3':'atilde','\\xC3':'Atilde','\\u0105':'aogon','\\u0104':'Aogon','\\u0101':'amacr','\\u0100':'Amacr','\\xE6':'aelig','\\xC6':'AElig','\\uD835\\uDCB7':'bscr','\\uD835\\uDD53':'bopf','\\uD835\\uDD1F':'bfr','\\uD835\\uDD39':'Bopf','\\u212C':'Bscr','\\uD835\\uDD05':'Bfr','\\uD835\\uDD20':'cfr','\\uD835\\uDCB8':'cscr','\\uD835\\uDD54':'copf','\\u212D':'Cfr','\\uD835\\uDC9E':'Cscr','\\u2102':'Copf','\\u0107':'cacute','\\u0106':'Cacute','\\u0109':'ccirc','\\u0108':'Ccirc','\\u010D':'ccaron','\\u010C':'Ccaron','\\u010B':'cdot','\\u010A':'Cdot','\\xE7':'ccedil','\\xC7':'Ccedil','\\u2105':'incare','\\uD835\\uDD21':'dfr','\\u2146':'dd','\\uD835\\uDD55':'dopf','\\uD835\\uDCB9':'dscr','\\uD835\\uDC9F':'Dscr','\\uD835\\uDD07':'Dfr','\\u2145':'DD','\\uD835\\uDD3B':'Dopf','\\u010F':'dcaron','\\u010E':'Dcaron','\\u0111':'dstrok','\\u0110':'Dstrok','\\xF0':'eth','\\xD0':'ETH','\\u2147':'ee','\\u212F':'escr','\\uD835\\uDD22':'efr','\\uD835\\uDD56':'eopf','\\u2130':'Escr','\\uD835\\uDD08':'Efr','\\uD835\\uDD3C':'Eopf','\\xE9':'eacute','\\xC9':'Eacute','\\xE8':'egrave','\\xC8':'Egrave','\\xEA':'ecirc','\\xCA':'Ecirc','\\u011B':'ecaron','\\u011A':'Ecaron','\\xEB':'euml','\\xCB':'Euml','\\u0117':'edot','\\u0116':'Edot','\\u0119':'eogon','\\u0118':'Eogon','\\u0113':'emacr','\\u0112':'Emacr','\\uD835\\uDD23':'ffr','\\uD835\\uDD57':'fopf','\\uD835\\uDCBB':'fscr','\\uD835\\uDD09':'Ffr','\\uD835\\uDD3D':'Fopf','\\u2131':'Fscr','\\uFB00':'fflig','\\uFB03':'ffilig','\\uFB04':'ffllig','\\uFB01':'filig','fj':'fjlig','\\uFB02':'fllig','\\u0192':'fnof','\\u210A':'gscr','\\uD835\\uDD58':'gopf','\\uD835\\uDD24':'gfr','\\uD835\\uDCA2':'Gscr','\\uD835\\uDD3E':'Gopf','\\uD835\\uDD0A':'Gfr','\\u01F5':'gacute','\\u011F':'gbreve','\\u011E':'Gbreve','\\u011D':'gcirc','\\u011C':'Gcirc','\\u0121':'gdot','\\u0120':'Gdot','\\u0122':'Gcedil','\\uD835\\uDD25':'hfr','\\u210E':'planckh','\\uD835\\uDCBD':'hscr','\\uD835\\uDD59':'hopf','\\u210B':'Hscr','\\u210C':'Hfr','\\u210D':'Hopf','\\u0125':'hcirc','\\u0124':'Hcirc','\\u210F':'hbar','\\u0127':'hstrok','\\u0126':'Hstrok','\\uD835\\uDD5A':'iopf','\\uD835\\uDD26':'ifr','\\uD835\\uDCBE':'iscr','\\u2148':'ii','\\uD835\\uDD40':'Iopf','\\u2110':'Iscr','\\u2111':'Im','\\xED':'iacute','\\xCD':'Iacute','\\xEC':'igrave','\\xCC':'Igrave','\\xEE':'icirc','\\xCE':'Icirc','\\xEF':'iuml','\\xCF':'Iuml','\\u0129':'itilde','\\u0128':'Itilde','\\u0130':'Idot','\\u012F':'iogon','\\u012E':'Iogon','\\u012B':'imacr','\\u012A':'Imacr','\\u0133':'ijlig','\\u0132':'IJlig','\\u0131':'imath','\\uD835\\uDCBF':'jscr','\\uD835\\uDD5B':'jopf','\\uD835\\uDD27':'jfr','\\uD835\\uDCA5':'Jscr','\\uD835\\uDD0D':'Jfr','\\uD835\\uDD41':'Jopf','\\u0135':'jcirc','\\u0134':'Jcirc','\\u0237':'jmath','\\uD835\\uDD5C':'kopf','\\uD835\\uDCC0':'kscr','\\uD835\\uDD28':'kfr','\\uD835\\uDCA6':'Kscr','\\uD835\\uDD42':'Kopf','\\uD835\\uDD0E':'Kfr','\\u0137':'kcedil','\\u0136':'Kcedil','\\uD835\\uDD29':'lfr','\\uD835\\uDCC1':'lscr','\\u2113':'ell','\\uD835\\uDD5D':'lopf','\\u2112':'Lscr','\\uD835\\uDD0F':'Lfr','\\uD835\\uDD43':'Lopf','\\u013A':'lacute','\\u0139':'Lacute','\\u013E':'lcaron','\\u013D':'Lcaron','\\u013C':'lcedil','\\u013B':'Lcedil','\\u0142':'lstrok','\\u0141':'Lstrok','\\u0140':'lmidot','\\u013F':'Lmidot','\\uD835\\uDD2A':'mfr','\\uD835\\uDD5E':'mopf','\\uD835\\uDCC2':'mscr','\\uD835\\uDD10':'Mfr','\\uD835\\uDD44':'Mopf','\\u2133':'Mscr','\\uD835\\uDD2B':'nfr','\\uD835\\uDD5F':'nopf','\\uD835\\uDCC3':'nscr','\\u2115':'Nopf','\\uD835\\uDCA9':'Nscr','\\uD835\\uDD11':'Nfr','\\u0144':'nacute','\\u0143':'Nacute','\\u0148':'ncaron','\\u0147':'Ncaron','\\xF1':'ntilde','\\xD1':'Ntilde','\\u0146':'ncedil','\\u0145':'Ncedil','\\u2116':'numero','\\u014B':'eng','\\u014A':'ENG','\\uD835\\uDD60':'oopf','\\uD835\\uDD2C':'ofr','\\u2134':'oscr','\\uD835\\uDCAA':'Oscr','\\uD835\\uDD12':'Ofr','\\uD835\\uDD46':'Oopf','\\xBA':'ordm','\\xF3':'oacute','\\xD3':'Oacute','\\xF2':'ograve','\\xD2':'Ograve','\\xF4':'ocirc','\\xD4':'Ocirc','\\xF6':'ouml','\\xD6':'Ouml','\\u0151':'odblac','\\u0150':'Odblac','\\xF5':'otilde','\\xD5':'Otilde','\\xF8':'oslash','\\xD8':'Oslash','\\u014D':'omacr','\\u014C':'Omacr','\\u0153':'oelig','\\u0152':'OElig','\\uD835\\uDD2D':'pfr','\\uD835\\uDCC5':'pscr','\\uD835\\uDD61':'popf','\\u2119':'Popf','\\uD835\\uDD13':'Pfr','\\uD835\\uDCAB':'Pscr','\\uD835\\uDD62':'qopf','\\uD835\\uDD2E':'qfr','\\uD835\\uDCC6':'qscr','\\uD835\\uDCAC':'Qscr','\\uD835\\uDD14':'Qfr','\\u211A':'Qopf','\\u0138':'kgreen','\\uD835\\uDD2F':'rfr','\\uD835\\uDD63':'ropf','\\uD835\\uDCC7':'rscr','\\u211B':'Rscr','\\u211C':'Re','\\u211D':'Ropf','\\u0155':'racute','\\u0154':'Racute','\\u0159':'rcaron','\\u0158':'Rcaron','\\u0157':'rcedil','\\u0156':'Rcedil','\\uD835\\uDD64':'sopf','\\uD835\\uDCC8':'sscr','\\uD835\\uDD30':'sfr','\\uD835\\uDD4A':'Sopf','\\uD835\\uDD16':'Sfr','\\uD835\\uDCAE':'Sscr','\\u24C8':'oS','\\u015B':'sacute','\\u015A':'Sacute','\\u015D':'scirc','\\u015C':'Scirc','\\u0161':'scaron','\\u0160':'Scaron','\\u015F':'scedil','\\u015E':'Scedil','\\xDF':'szlig','\\uD835\\uDD31':'tfr','\\uD835\\uDCC9':'tscr','\\uD835\\uDD65':'topf','\\uD835\\uDCAF':'Tscr','\\uD835\\uDD17':'Tfr','\\uD835\\uDD4B':'Topf','\\u0165':'tcaron','\\u0164':'Tcaron','\\u0163':'tcedil','\\u0162':'Tcedil','\\u2122':'trade','\\u0167':'tstrok','\\u0166':'Tstrok','\\uD835\\uDCCA':'uscr','\\uD835\\uDD66':'uopf','\\uD835\\uDD32':'ufr','\\uD835\\uDD4C':'Uopf','\\uD835\\uDD18':'Ufr','\\uD835\\uDCB0':'Uscr','\\xFA':'uacute','\\xDA':'Uacute','\\xF9':'ugrave','\\xD9':'Ugrave','\\u016D':'ubreve','\\u016C':'Ubreve','\\xFB':'ucirc','\\xDB':'Ucirc','\\u016F':'uring','\\u016E':'Uring','\\xFC':'uuml','\\xDC':'Uuml','\\u0171':'udblac','\\u0170':'Udblac','\\u0169':'utilde','\\u0168':'Utilde','\\u0173':'uogon','\\u0172':'Uogon','\\u016B':'umacr','\\u016A':'Umacr','\\uD835\\uDD33':'vfr','\\uD835\\uDD67':'vopf','\\uD835\\uDCCB':'vscr','\\uD835\\uDD19':'Vfr','\\uD835\\uDD4D':'Vopf','\\uD835\\uDCB1':'Vscr','\\uD835\\uDD68':'wopf','\\uD835\\uDCCC':'wscr','\\uD835\\uDD34':'wfr','\\uD835\\uDCB2':'Wscr','\\uD835\\uDD4E':'Wopf','\\uD835\\uDD1A':'Wfr','\\u0175':'wcirc','\\u0174':'Wcirc','\\uD835\\uDD35':'xfr','\\uD835\\uDCCD':'xscr','\\uD835\\uDD69':'xopf','\\uD835\\uDD4F':'Xopf','\\uD835\\uDD1B':'Xfr','\\uD835\\uDCB3':'Xscr','\\uD835\\uDD36':'yfr','\\uD835\\uDCCE':'yscr','\\uD835\\uDD6A':'yopf','\\uD835\\uDCB4':'Yscr','\\uD835\\uDD1C':'Yfr','\\uD835\\uDD50':'Yopf','\\xFD':'yacute','\\xDD':'Yacute','\\u0177':'ycirc','\\u0176':'Ycirc','\\xFF':'yuml','\\u0178':'Yuml','\\uD835\\uDCCF':'zscr','\\uD835\\uDD37':'zfr','\\uD835\\uDD6B':'zopf','\\u2128':'Zfr','\\u2124':'Zopf','\\uD835\\uDCB5':'Zscr','\\u017A':'zacute','\\u0179':'Zacute','\\u017E':'zcaron','\\u017D':'Zcaron','\\u017C':'zdot','\\u017B':'Zdot','\\u01B5':'imped','\\xFE':'thorn','\\xDE':'THORN','\\u0149':'napos','\\u03B1':'alpha','\\u0391':'Alpha','\\u03B2':'beta','\\u0392':'Beta','\\u03B3':'gamma','\\u0393':'Gamma','\\u03B4':'delta','\\u0394':'Delta','\\u03B5':'epsi','\\u03F5':'epsiv','\\u0395':'Epsilon','\\u03DD':'gammad','\\u03DC':'Gammad','\\u03B6':'zeta','\\u0396':'Zeta','\\u03B7':'eta','\\u0397':'Eta','\\u03B8':'theta','\\u03D1':'thetav','\\u0398':'Theta','\\u03B9':'iota','\\u0399':'Iota','\\u03BA':'kappa','\\u03F0':'kappav','\\u039A':'Kappa','\\u03BB':'lambda','\\u039B':'Lambda','\\u03BC':'mu','\\xB5':'micro','\\u039C':'Mu','\\u03BD':'nu','\\u039D':'Nu','\\u03BE':'xi','\\u039E':'Xi','\\u03BF':'omicron','\\u039F':'Omicron','\\u03C0':'pi','\\u03D6':'piv','\\u03A0':'Pi','\\u03C1':'rho','\\u03F1':'rhov','\\u03A1':'Rho','\\u03C3':'sigma','\\u03A3':'Sigma','\\u03C2':'sigmaf','\\u03C4':'tau','\\u03A4':'Tau','\\u03C5':'upsi','\\u03A5':'Upsilon','\\u03D2':'Upsi','\\u03C6':'phi','\\u03D5':'phiv','\\u03A6':'Phi','\\u03C7':'chi','\\u03A7':'Chi','\\u03C8':'psi','\\u03A8':'Psi','\\u03C9':'omega','\\u03A9':'ohm','\\u0430':'acy','\\u0410':'Acy','\\u0431':'bcy','\\u0411':'Bcy','\\u0432':'vcy','\\u0412':'Vcy','\\u0433':'gcy','\\u0413':'Gcy','\\u0453':'gjcy','\\u0403':'GJcy','\\u0434':'dcy','\\u0414':'Dcy','\\u0452':'djcy','\\u0402':'DJcy','\\u0435':'iecy','\\u0415':'IEcy','\\u0451':'iocy','\\u0401':'IOcy','\\u0454':'jukcy','\\u0404':'Jukcy','\\u0436':'zhcy','\\u0416':'ZHcy','\\u0437':'zcy','\\u0417':'Zcy','\\u0455':'dscy','\\u0405':'DScy','\\u0438':'icy','\\u0418':'Icy','\\u0456':'iukcy','\\u0406':'Iukcy','\\u0457':'yicy','\\u0407':'YIcy','\\u0439':'jcy','\\u0419':'Jcy','\\u0458':'jsercy','\\u0408':'Jsercy','\\u043A':'kcy','\\u041A':'Kcy','\\u045C':'kjcy','\\u040C':'KJcy','\\u043B':'lcy','\\u041B':'Lcy','\\u0459':'ljcy','\\u0409':'LJcy','\\u043C':'mcy','\\u041C':'Mcy','\\u043D':'ncy','\\u041D':'Ncy','\\u045A':'njcy','\\u040A':'NJcy','\\u043E':'ocy','\\u041E':'Ocy','\\u043F':'pcy','\\u041F':'Pcy','\\u0440':'rcy','\\u0420':'Rcy','\\u0441':'scy','\\u0421':'Scy','\\u0442':'tcy','\\u0422':'Tcy','\\u045B':'tshcy','\\u040B':'TSHcy','\\u0443':'ucy','\\u0423':'Ucy','\\u045E':'ubrcy','\\u040E':'Ubrcy','\\u0444':'fcy','\\u0424':'Fcy','\\u0445':'khcy','\\u0425':'KHcy','\\u0446':'tscy','\\u0426':'TScy','\\u0447':'chcy','\\u0427':'CHcy','\\u045F':'dzcy','\\u040F':'DZcy','\\u0448':'shcy','\\u0428':'SHcy','\\u0449':'shchcy','\\u0429':'SHCHcy','\\u044A':'hardcy','\\u042A':'HARDcy','\\u044B':'ycy','\\u042B':'Ycy','\\u044C':'softcy','\\u042C':'SOFTcy','\\u044D':'ecy','\\u042D':'Ecy','\\u044E':'yucy','\\u042E':'YUcy','\\u044F':'yacy','\\u042F':'YAcy','\\u2135':'aleph','\\u2136':'beth','\\u2137':'gimel','\\u2138':'daleth'};\n\n\tvar regexEscape = /[\"&'<>`]/g;\n\tvar escapeMap = {\n\t\t'\"': '&quot;',\n\t\t'&': '&amp;',\n\t\t'\\'': '&#x27;',\n\t\t'<': '&lt;',\n\t\t// See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the\n\t\t// following is not strictly necessary unless it’s part of a tag or an\n\t\t// unquoted attribute value. We’re only escaping it to support those\n\t\t// situations, and for XML support.\n\t\t'>': '&gt;',\n\t\t// In Internet Explorer ≤ 8, the backtick character can be used\n\t\t// to break out of (un)quoted attribute values or HTML comments.\n\t\t// See http://html5sec.org/#102, http://html5sec.org/#108, and\n\t\t// http://html5sec.org/#133.\n\t\t'`': '&#x60;'\n\t};\n\n\tvar regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;\n\tvar regexInvalidRawCodePoint = /[\\0-\\x08\\x0B\\x0E-\\x1F\\x7F-\\x9F\\uFDD0-\\uFDEF\\uFFFE\\uFFFF]|[\\uD83F\\uD87F\\uD8BF\\uD8FF\\uD93F\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uDA7F\\uDABF\\uDAFF\\uDB3F\\uDB7F\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\tvar regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;\n\tvar decodeMap = {'aacute':'\\xE1','Aacute':'\\xC1','abreve':'\\u0103','Abreve':'\\u0102','ac':'\\u223E','acd':'\\u223F','acE':'\\u223E\\u0333','acirc':'\\xE2','Acirc':'\\xC2','acute':'\\xB4','acy':'\\u0430','Acy':'\\u0410','aelig':'\\xE6','AElig':'\\xC6','af':'\\u2061','afr':'\\uD835\\uDD1E','Afr':'\\uD835\\uDD04','agrave':'\\xE0','Agrave':'\\xC0','alefsym':'\\u2135','aleph':'\\u2135','alpha':'\\u03B1','Alpha':'\\u0391','amacr':'\\u0101','Amacr':'\\u0100','amalg':'\\u2A3F','amp':'&','AMP':'&','and':'\\u2227','And':'\\u2A53','andand':'\\u2A55','andd':'\\u2A5C','andslope':'\\u2A58','andv':'\\u2A5A','ang':'\\u2220','ange':'\\u29A4','angle':'\\u2220','angmsd':'\\u2221','angmsdaa':'\\u29A8','angmsdab':'\\u29A9','angmsdac':'\\u29AA','angmsdad':'\\u29AB','angmsdae':'\\u29AC','angmsdaf':'\\u29AD','angmsdag':'\\u29AE','angmsdah':'\\u29AF','angrt':'\\u221F','angrtvb':'\\u22BE','angrtvbd':'\\u299D','angsph':'\\u2222','angst':'\\xC5','angzarr':'\\u237C','aogon':'\\u0105','Aogon':'\\u0104','aopf':'\\uD835\\uDD52','Aopf':'\\uD835\\uDD38','ap':'\\u2248','apacir':'\\u2A6F','ape':'\\u224A','apE':'\\u2A70','apid':'\\u224B','apos':'\\'','ApplyFunction':'\\u2061','approx':'\\u2248','approxeq':'\\u224A','aring':'\\xE5','Aring':'\\xC5','ascr':'\\uD835\\uDCB6','Ascr':'\\uD835\\uDC9C','Assign':'\\u2254','ast':'*','asymp':'\\u2248','asympeq':'\\u224D','atilde':'\\xE3','Atilde':'\\xC3','auml':'\\xE4','Auml':'\\xC4','awconint':'\\u2233','awint':'\\u2A11','backcong':'\\u224C','backepsilon':'\\u03F6','backprime':'\\u2035','backsim':'\\u223D','backsimeq':'\\u22CD','Backslash':'\\u2216','Barv':'\\u2AE7','barvee':'\\u22BD','barwed':'\\u2305','Barwed':'\\u2306','barwedge':'\\u2305','bbrk':'\\u23B5','bbrktbrk':'\\u23B6','bcong':'\\u224C','bcy':'\\u0431','Bcy':'\\u0411','bdquo':'\\u201E','becaus':'\\u2235','because':'\\u2235','Because':'\\u2235','bemptyv':'\\u29B0','bepsi':'\\u03F6','bernou':'\\u212C','Bernoullis':'\\u212C','beta':'\\u03B2','Beta':'\\u0392','beth':'\\u2136','between':'\\u226C','bfr':'\\uD835\\uDD1F','Bfr':'\\uD835\\uDD05','bigcap':'\\u22C2','bigcirc':'\\u25EF','bigcup':'\\u22C3','bigodot':'\\u2A00','bigoplus':'\\u2A01','bigotimes':'\\u2A02','bigsqcup':'\\u2A06','bigstar':'\\u2605','bigtriangledown':'\\u25BD','bigtriangleup':'\\u25B3','biguplus':'\\u2A04','bigvee':'\\u22C1','bigwedge':'\\u22C0','bkarow':'\\u290D','blacklozenge':'\\u29EB','blacksquare':'\\u25AA','blacktriangle':'\\u25B4','blacktriangledown':'\\u25BE','blacktriangleleft':'\\u25C2','blacktriangleright':'\\u25B8','blank':'\\u2423','blk12':'\\u2592','blk14':'\\u2591','blk34':'\\u2593','block':'\\u2588','bne':'=\\u20E5','bnequiv':'\\u2261\\u20E5','bnot':'\\u2310','bNot':'\\u2AED','bopf':'\\uD835\\uDD53','Bopf':'\\uD835\\uDD39','bot':'\\u22A5','bottom':'\\u22A5','bowtie':'\\u22C8','boxbox':'\\u29C9','boxdl':'\\u2510','boxdL':'\\u2555','boxDl':'\\u2556','boxDL':'\\u2557','boxdr':'\\u250C','boxdR':'\\u2552','boxDr':'\\u2553','boxDR':'\\u2554','boxh':'\\u2500','boxH':'\\u2550','boxhd':'\\u252C','boxhD':'\\u2565','boxHd':'\\u2564','boxHD':'\\u2566','boxhu':'\\u2534','boxhU':'\\u2568','boxHu':'\\u2567','boxHU':'\\u2569','boxminus':'\\u229F','boxplus':'\\u229E','boxtimes':'\\u22A0','boxul':'\\u2518','boxuL':'\\u255B','boxUl':'\\u255C','boxUL':'\\u255D','boxur':'\\u2514','boxuR':'\\u2558','boxUr':'\\u2559','boxUR':'\\u255A','boxv':'\\u2502','boxV':'\\u2551','boxvh':'\\u253C','boxvH':'\\u256A','boxVh':'\\u256B','boxVH':'\\u256C','boxvl':'\\u2524','boxvL':'\\u2561','boxVl':'\\u2562','boxVL':'\\u2563','boxvr':'\\u251C','boxvR':'\\u255E','boxVr':'\\u255F','boxVR':'\\u2560','bprime':'\\u2035','breve':'\\u02D8','Breve':'\\u02D8','brvbar':'\\xA6','bscr':'\\uD835\\uDCB7','Bscr':'\\u212C','bsemi':'\\u204F','bsim':'\\u223D','bsime':'\\u22CD','bsol':'\\\\','bsolb':'\\u29C5','bsolhsub':'\\u27C8','bull':'\\u2022','bullet':'\\u2022','bump':'\\u224E','bumpe':'\\u224F','bumpE':'\\u2AAE','bumpeq':'\\u224F','Bumpeq':'\\u224E','cacute':'\\u0107','Cacute':'\\u0106','cap':'\\u2229','Cap':'\\u22D2','capand':'\\u2A44','capbrcup':'\\u2A49','capcap':'\\u2A4B','capcup':'\\u2A47','capdot':'\\u2A40','CapitalDifferentialD':'\\u2145','caps':'\\u2229\\uFE00','caret':'\\u2041','caron':'\\u02C7','Cayleys':'\\u212D','ccaps':'\\u2A4D','ccaron':'\\u010D','Ccaron':'\\u010C','ccedil':'\\xE7','Ccedil':'\\xC7','ccirc':'\\u0109','Ccirc':'\\u0108','Cconint':'\\u2230','ccups':'\\u2A4C','ccupssm':'\\u2A50','cdot':'\\u010B','Cdot':'\\u010A','cedil':'\\xB8','Cedilla':'\\xB8','cemptyv':'\\u29B2','cent':'\\xA2','centerdot':'\\xB7','CenterDot':'\\xB7','cfr':'\\uD835\\uDD20','Cfr':'\\u212D','chcy':'\\u0447','CHcy':'\\u0427','check':'\\u2713','checkmark':'\\u2713','chi':'\\u03C7','Chi':'\\u03A7','cir':'\\u25CB','circ':'\\u02C6','circeq':'\\u2257','circlearrowleft':'\\u21BA','circlearrowright':'\\u21BB','circledast':'\\u229B','circledcirc':'\\u229A','circleddash':'\\u229D','CircleDot':'\\u2299','circledR':'\\xAE','circledS':'\\u24C8','CircleMinus':'\\u2296','CirclePlus':'\\u2295','CircleTimes':'\\u2297','cire':'\\u2257','cirE':'\\u29C3','cirfnint':'\\u2A10','cirmid':'\\u2AEF','cirscir':'\\u29C2','ClockwiseContourIntegral':'\\u2232','CloseCurlyDoubleQuote':'\\u201D','CloseCurlyQuote':'\\u2019','clubs':'\\u2663','clubsuit':'\\u2663','colon':':','Colon':'\\u2237','colone':'\\u2254','Colone':'\\u2A74','coloneq':'\\u2254','comma':',','commat':'@','comp':'\\u2201','compfn':'\\u2218','complement':'\\u2201','complexes':'\\u2102','cong':'\\u2245','congdot':'\\u2A6D','Congruent':'\\u2261','conint':'\\u222E','Conint':'\\u222F','ContourIntegral':'\\u222E','copf':'\\uD835\\uDD54','Copf':'\\u2102','coprod':'\\u2210','Coproduct':'\\u2210','copy':'\\xA9','COPY':'\\xA9','copysr':'\\u2117','CounterClockwiseContourIntegral':'\\u2233','crarr':'\\u21B5','cross':'\\u2717','Cross':'\\u2A2F','cscr':'\\uD835\\uDCB8','Cscr':'\\uD835\\uDC9E','csub':'\\u2ACF','csube':'\\u2AD1','csup':'\\u2AD0','csupe':'\\u2AD2','ctdot':'\\u22EF','cudarrl':'\\u2938','cudarrr':'\\u2935','cuepr':'\\u22DE','cuesc':'\\u22DF','cularr':'\\u21B6','cularrp':'\\u293D','cup':'\\u222A','Cup':'\\u22D3','cupbrcap':'\\u2A48','cupcap':'\\u2A46','CupCap':'\\u224D','cupcup':'\\u2A4A','cupdot':'\\u228D','cupor':'\\u2A45','cups':'\\u222A\\uFE00','curarr':'\\u21B7','curarrm':'\\u293C','curlyeqprec':'\\u22DE','curlyeqsucc':'\\u22DF','curlyvee':'\\u22CE','curlywedge':'\\u22CF','curren':'\\xA4','curvearrowleft':'\\u21B6','curvearrowright':'\\u21B7','cuvee':'\\u22CE','cuwed':'\\u22CF','cwconint':'\\u2232','cwint':'\\u2231','cylcty':'\\u232D','dagger':'\\u2020','Dagger':'\\u2021','daleth':'\\u2138','darr':'\\u2193','dArr':'\\u21D3','Darr':'\\u21A1','dash':'\\u2010','dashv':'\\u22A3','Dashv':'\\u2AE4','dbkarow':'\\u290F','dblac':'\\u02DD','dcaron':'\\u010F','Dcaron':'\\u010E','dcy':'\\u0434','Dcy':'\\u0414','dd':'\\u2146','DD':'\\u2145','ddagger':'\\u2021','ddarr':'\\u21CA','DDotrahd':'\\u2911','ddotseq':'\\u2A77','deg':'\\xB0','Del':'\\u2207','delta':'\\u03B4','Delta':'\\u0394','demptyv':'\\u29B1','dfisht':'\\u297F','dfr':'\\uD835\\uDD21','Dfr':'\\uD835\\uDD07','dHar':'\\u2965','dharl':'\\u21C3','dharr':'\\u21C2','DiacriticalAcute':'\\xB4','DiacriticalDot':'\\u02D9','DiacriticalDoubleAcute':'\\u02DD','DiacriticalGrave':'`','DiacriticalTilde':'\\u02DC','diam':'\\u22C4','diamond':'\\u22C4','Diamond':'\\u22C4','diamondsuit':'\\u2666','diams':'\\u2666','die':'\\xA8','DifferentialD':'\\u2146','digamma':'\\u03DD','disin':'\\u22F2','div':'\\xF7','divide':'\\xF7','divideontimes':'\\u22C7','divonx':'\\u22C7','djcy':'\\u0452','DJcy':'\\u0402','dlcorn':'\\u231E','dlcrop':'\\u230D','dollar':'$','dopf':'\\uD835\\uDD55','Dopf':'\\uD835\\uDD3B','dot':'\\u02D9','Dot':'\\xA8','DotDot':'\\u20DC','doteq':'\\u2250','doteqdot':'\\u2251','DotEqual':'\\u2250','dotminus':'\\u2238','dotplus':'\\u2214','dotsquare':'\\u22A1','doublebarwedge':'\\u2306','DoubleContourIntegral':'\\u222F','DoubleDot':'\\xA8','DoubleDownArrow':'\\u21D3','DoubleLeftArrow':'\\u21D0','DoubleLeftRightArrow':'\\u21D4','DoubleLeftTee':'\\u2AE4','DoubleLongLeftArrow':'\\u27F8','DoubleLongLeftRightArrow':'\\u27FA','DoubleLongRightArrow':'\\u27F9','DoubleRightArrow':'\\u21D2','DoubleRightTee':'\\u22A8','DoubleUpArrow':'\\u21D1','DoubleUpDownArrow':'\\u21D5','DoubleVerticalBar':'\\u2225','downarrow':'\\u2193','Downarrow':'\\u21D3','DownArrow':'\\u2193','DownArrowBar':'\\u2913','DownArrowUpArrow':'\\u21F5','DownBreve':'\\u0311','downdownarrows':'\\u21CA','downharpoonleft':'\\u21C3','downharpoonright':'\\u21C2','DownLeftRightVector':'\\u2950','DownLeftTeeVector':'\\u295E','DownLeftVector':'\\u21BD','DownLeftVectorBar':'\\u2956','DownRightTeeVector':'\\u295F','DownRightVector':'\\u21C1','DownRightVectorBar':'\\u2957','DownTee':'\\u22A4','DownTeeArrow':'\\u21A7','drbkarow':'\\u2910','drcorn':'\\u231F','drcrop':'\\u230C','dscr':'\\uD835\\uDCB9','Dscr':'\\uD835\\uDC9F','dscy':'\\u0455','DScy':'\\u0405','dsol':'\\u29F6','dstrok':'\\u0111','Dstrok':'\\u0110','dtdot':'\\u22F1','dtri':'\\u25BF','dtrif':'\\u25BE','duarr':'\\u21F5','duhar':'\\u296F','dwangle':'\\u29A6','dzcy':'\\u045F','DZcy':'\\u040F','dzigrarr':'\\u27FF','eacute':'\\xE9','Eacute':'\\xC9','easter':'\\u2A6E','ecaron':'\\u011B','Ecaron':'\\u011A','ecir':'\\u2256','ecirc':'\\xEA','Ecirc':'\\xCA','ecolon':'\\u2255','ecy':'\\u044D','Ecy':'\\u042D','eDDot':'\\u2A77','edot':'\\u0117','eDot':'\\u2251','Edot':'\\u0116','ee':'\\u2147','efDot':'\\u2252','efr':'\\uD835\\uDD22','Efr':'\\uD835\\uDD08','eg':'\\u2A9A','egrave':'\\xE8','Egrave':'\\xC8','egs':'\\u2A96','egsdot':'\\u2A98','el':'\\u2A99','Element':'\\u2208','elinters':'\\u23E7','ell':'\\u2113','els':'\\u2A95','elsdot':'\\u2A97','emacr':'\\u0113','Emacr':'\\u0112','empty':'\\u2205','emptyset':'\\u2205','EmptySmallSquare':'\\u25FB','emptyv':'\\u2205','EmptyVerySmallSquare':'\\u25AB','emsp':'\\u2003','emsp13':'\\u2004','emsp14':'\\u2005','eng':'\\u014B','ENG':'\\u014A','ensp':'\\u2002','eogon':'\\u0119','Eogon':'\\u0118','eopf':'\\uD835\\uDD56','Eopf':'\\uD835\\uDD3C','epar':'\\u22D5','eparsl':'\\u29E3','eplus':'\\u2A71','epsi':'\\u03B5','epsilon':'\\u03B5','Epsilon':'\\u0395','epsiv':'\\u03F5','eqcirc':'\\u2256','eqcolon':'\\u2255','eqsim':'\\u2242','eqslantgtr':'\\u2A96','eqslantless':'\\u2A95','Equal':'\\u2A75','equals':'=','EqualTilde':'\\u2242','equest':'\\u225F','Equilibrium':'\\u21CC','equiv':'\\u2261','equivDD':'\\u2A78','eqvparsl':'\\u29E5','erarr':'\\u2971','erDot':'\\u2253','escr':'\\u212F','Escr':'\\u2130','esdot':'\\u2250','esim':'\\u2242','Esim':'\\u2A73','eta':'\\u03B7','Eta':'\\u0397','eth':'\\xF0','ETH':'\\xD0','euml':'\\xEB','Euml':'\\xCB','euro':'\\u20AC','excl':'!','exist':'\\u2203','Exists':'\\u2203','expectation':'\\u2130','exponentiale':'\\u2147','ExponentialE':'\\u2147','fallingdotseq':'\\u2252','fcy':'\\u0444','Fcy':'\\u0424','female':'\\u2640','ffilig':'\\uFB03','fflig':'\\uFB00','ffllig':'\\uFB04','ffr':'\\uD835\\uDD23','Ffr':'\\uD835\\uDD09','filig':'\\uFB01','FilledSmallSquare':'\\u25FC','FilledVerySmallSquare':'\\u25AA','fjlig':'fj','flat':'\\u266D','fllig':'\\uFB02','fltns':'\\u25B1','fnof':'\\u0192','fopf':'\\uD835\\uDD57','Fopf':'\\uD835\\uDD3D','forall':'\\u2200','ForAll':'\\u2200','fork':'\\u22D4','forkv':'\\u2AD9','Fouriertrf':'\\u2131','fpartint':'\\u2A0D','frac12':'\\xBD','frac13':'\\u2153','frac14':'\\xBC','frac15':'\\u2155','frac16':'\\u2159','frac18':'\\u215B','frac23':'\\u2154','frac25':'\\u2156','frac34':'\\xBE','frac35':'\\u2157','frac38':'\\u215C','frac45':'\\u2158','frac56':'\\u215A','frac58':'\\u215D','frac78':'\\u215E','frasl':'\\u2044','frown':'\\u2322','fscr':'\\uD835\\uDCBB','Fscr':'\\u2131','gacute':'\\u01F5','gamma':'\\u03B3','Gamma':'\\u0393','gammad':'\\u03DD','Gammad':'\\u03DC','gap':'\\u2A86','gbreve':'\\u011F','Gbreve':'\\u011E','Gcedil':'\\u0122','gcirc':'\\u011D','Gcirc':'\\u011C','gcy':'\\u0433','Gcy':'\\u0413','gdot':'\\u0121','Gdot':'\\u0120','ge':'\\u2265','gE':'\\u2267','gel':'\\u22DB','gEl':'\\u2A8C','geq':'\\u2265','geqq':'\\u2267','geqslant':'\\u2A7E','ges':'\\u2A7E','gescc':'\\u2AA9','gesdot':'\\u2A80','gesdoto':'\\u2A82','gesdotol':'\\u2A84','gesl':'\\u22DB\\uFE00','gesles':'\\u2A94','gfr':'\\uD835\\uDD24','Gfr':'\\uD835\\uDD0A','gg':'\\u226B','Gg':'\\u22D9','ggg':'\\u22D9','gimel':'\\u2137','gjcy':'\\u0453','GJcy':'\\u0403','gl':'\\u2277','gla':'\\u2AA5','glE':'\\u2A92','glj':'\\u2AA4','gnap':'\\u2A8A','gnapprox':'\\u2A8A','gne':'\\u2A88','gnE':'\\u2269','gneq':'\\u2A88','gneqq':'\\u2269','gnsim':'\\u22E7','gopf':'\\uD835\\uDD58','Gopf':'\\uD835\\uDD3E','grave':'`','GreaterEqual':'\\u2265','GreaterEqualLess':'\\u22DB','GreaterFullEqual':'\\u2267','GreaterGreater':'\\u2AA2','GreaterLess':'\\u2277','GreaterSlantEqual':'\\u2A7E','GreaterTilde':'\\u2273','gscr':'\\u210A','Gscr':'\\uD835\\uDCA2','gsim':'\\u2273','gsime':'\\u2A8E','gsiml':'\\u2A90','gt':'>','Gt':'\\u226B','GT':'>','gtcc':'\\u2AA7','gtcir':'\\u2A7A','gtdot':'\\u22D7','gtlPar':'\\u2995','gtquest':'\\u2A7C','gtrapprox':'\\u2A86','gtrarr':'\\u2978','gtrdot':'\\u22D7','gtreqless':'\\u22DB','gtreqqless':'\\u2A8C','gtrless':'\\u2277','gtrsim':'\\u2273','gvertneqq':'\\u2269\\uFE00','gvnE':'\\u2269\\uFE00','Hacek':'\\u02C7','hairsp':'\\u200A','half':'\\xBD','hamilt':'\\u210B','hardcy':'\\u044A','HARDcy':'\\u042A','harr':'\\u2194','hArr':'\\u21D4','harrcir':'\\u2948','harrw':'\\u21AD','Hat':'^','hbar':'\\u210F','hcirc':'\\u0125','Hcirc':'\\u0124','hearts':'\\u2665','heartsuit':'\\u2665','hellip':'\\u2026','hercon':'\\u22B9','hfr':'\\uD835\\uDD25','Hfr':'\\u210C','HilbertSpace':'\\u210B','hksearow':'\\u2925','hkswarow':'\\u2926','hoarr':'\\u21FF','homtht':'\\u223B','hookleftarrow':'\\u21A9','hookrightarrow':'\\u21AA','hopf':'\\uD835\\uDD59','Hopf':'\\u210D','horbar':'\\u2015','HorizontalLine':'\\u2500','hscr':'\\uD835\\uDCBD','Hscr':'\\u210B','hslash':'\\u210F','hstrok':'\\u0127','Hstrok':'\\u0126','HumpDownHump':'\\u224E','HumpEqual':'\\u224F','hybull':'\\u2043','hyphen':'\\u2010','iacute':'\\xED','Iacute':'\\xCD','ic':'\\u2063','icirc':'\\xEE','Icirc':'\\xCE','icy':'\\u0438','Icy':'\\u0418','Idot':'\\u0130','iecy':'\\u0435','IEcy':'\\u0415','iexcl':'\\xA1','iff':'\\u21D4','ifr':'\\uD835\\uDD26','Ifr':'\\u2111','igrave':'\\xEC','Igrave':'\\xCC','ii':'\\u2148','iiiint':'\\u2A0C','iiint':'\\u222D','iinfin':'\\u29DC','iiota':'\\u2129','ijlig':'\\u0133','IJlig':'\\u0132','Im':'\\u2111','imacr':'\\u012B','Imacr':'\\u012A','image':'\\u2111','ImaginaryI':'\\u2148','imagline':'\\u2110','imagpart':'\\u2111','imath':'\\u0131','imof':'\\u22B7','imped':'\\u01B5','Implies':'\\u21D2','in':'\\u2208','incare':'\\u2105','infin':'\\u221E','infintie':'\\u29DD','inodot':'\\u0131','int':'\\u222B','Int':'\\u222C','intcal':'\\u22BA','integers':'\\u2124','Integral':'\\u222B','intercal':'\\u22BA','Intersection':'\\u22C2','intlarhk':'\\u2A17','intprod':'\\u2A3C','InvisibleComma':'\\u2063','InvisibleTimes':'\\u2062','iocy':'\\u0451','IOcy':'\\u0401','iogon':'\\u012F','Iogon':'\\u012E','iopf':'\\uD835\\uDD5A','Iopf':'\\uD835\\uDD40','iota':'\\u03B9','Iota':'\\u0399','iprod':'\\u2A3C','iquest':'\\xBF','iscr':'\\uD835\\uDCBE','Iscr':'\\u2110','isin':'\\u2208','isindot':'\\u22F5','isinE':'\\u22F9','isins':'\\u22F4','isinsv':'\\u22F3','isinv':'\\u2208','it':'\\u2062','itilde':'\\u0129','Itilde':'\\u0128','iukcy':'\\u0456','Iukcy':'\\u0406','iuml':'\\xEF','Iuml':'\\xCF','jcirc':'\\u0135','Jcirc':'\\u0134','jcy':'\\u0439','Jcy':'\\u0419','jfr':'\\uD835\\uDD27','Jfr':'\\uD835\\uDD0D','jmath':'\\u0237','jopf':'\\uD835\\uDD5B','Jopf':'\\uD835\\uDD41','jscr':'\\uD835\\uDCBF','Jscr':'\\uD835\\uDCA5','jsercy':'\\u0458','Jsercy':'\\u0408','jukcy':'\\u0454','Jukcy':'\\u0404','kappa':'\\u03BA','Kappa':'\\u039A','kappav':'\\u03F0','kcedil':'\\u0137','Kcedil':'\\u0136','kcy':'\\u043A','Kcy':'\\u041A','kfr':'\\uD835\\uDD28','Kfr':'\\uD835\\uDD0E','kgreen':'\\u0138','khcy':'\\u0445','KHcy':'\\u0425','kjcy':'\\u045C','KJcy':'\\u040C','kopf':'\\uD835\\uDD5C','Kopf':'\\uD835\\uDD42','kscr':'\\uD835\\uDCC0','Kscr':'\\uD835\\uDCA6','lAarr':'\\u21DA','lacute':'\\u013A','Lacute':'\\u0139','laemptyv':'\\u29B4','lagran':'\\u2112','lambda':'\\u03BB','Lambda':'\\u039B','lang':'\\u27E8','Lang':'\\u27EA','langd':'\\u2991','langle':'\\u27E8','lap':'\\u2A85','Laplacetrf':'\\u2112','laquo':'\\xAB','larr':'\\u2190','lArr':'\\u21D0','Larr':'\\u219E','larrb':'\\u21E4','larrbfs':'\\u291F','larrfs':'\\u291D','larrhk':'\\u21A9','larrlp':'\\u21AB','larrpl':'\\u2939','larrsim':'\\u2973','larrtl':'\\u21A2','lat':'\\u2AAB','latail':'\\u2919','lAtail':'\\u291B','late':'\\u2AAD','lates':'\\u2AAD\\uFE00','lbarr':'\\u290C','lBarr':'\\u290E','lbbrk':'\\u2772','lbrace':'{','lbrack':'[','lbrke':'\\u298B','lbrksld':'\\u298F','lbrkslu':'\\u298D','lcaron':'\\u013E','Lcaron':'\\u013D','lcedil':'\\u013C','Lcedil':'\\u013B','lceil':'\\u2308','lcub':'{','lcy':'\\u043B','Lcy':'\\u041B','ldca':'\\u2936','ldquo':'\\u201C','ldquor':'\\u201E','ldrdhar':'\\u2967','ldrushar':'\\u294B','ldsh':'\\u21B2','le':'\\u2264','lE':'\\u2266','LeftAngleBracket':'\\u27E8','leftarrow':'\\u2190','Leftarrow':'\\u21D0','LeftArrow':'\\u2190','LeftArrowBar':'\\u21E4','LeftArrowRightArrow':'\\u21C6','leftarrowtail':'\\u21A2','LeftCeiling':'\\u2308','LeftDoubleBracket':'\\u27E6','LeftDownTeeVector':'\\u2961','LeftDownVector':'\\u21C3','LeftDownVectorBar':'\\u2959','LeftFloor':'\\u230A','leftharpoondown':'\\u21BD','leftharpoonup':'\\u21BC','leftleftarrows':'\\u21C7','leftrightarrow':'\\u2194','Leftrightarrow':'\\u21D4','LeftRightArrow':'\\u2194','leftrightarrows':'\\u21C6','leftrightharpoons':'\\u21CB','leftrightsquigarrow':'\\u21AD','LeftRightVector':'\\u294E','LeftTee':'\\u22A3','LeftTeeArrow':'\\u21A4','LeftTeeVector':'\\u295A','leftthreetimes':'\\u22CB','LeftTriangle':'\\u22B2','LeftTriangleBar':'\\u29CF','LeftTriangleEqual':'\\u22B4','LeftUpDownVector':'\\u2951','LeftUpTeeVector':'\\u2960','LeftUpVector':'\\u21BF','LeftUpVectorBar':'\\u2958','LeftVector':'\\u21BC','LeftVectorBar':'\\u2952','leg':'\\u22DA','lEg':'\\u2A8B','leq':'\\u2264','leqq':'\\u2266','leqslant':'\\u2A7D','les':'\\u2A7D','lescc':'\\u2AA8','lesdot':'\\u2A7F','lesdoto':'\\u2A81','lesdotor':'\\u2A83','lesg':'\\u22DA\\uFE00','lesges':'\\u2A93','lessapprox':'\\u2A85','lessdot':'\\u22D6','lesseqgtr':'\\u22DA','lesseqqgtr':'\\u2A8B','LessEqualGreater':'\\u22DA','LessFullEqual':'\\u2266','LessGreater':'\\u2276','lessgtr':'\\u2276','LessLess':'\\u2AA1','lesssim':'\\u2272','LessSlantEqual':'\\u2A7D','LessTilde':'\\u2272','lfisht':'\\u297C','lfloor':'\\u230A','lfr':'\\uD835\\uDD29','Lfr':'\\uD835\\uDD0F','lg':'\\u2276','lgE':'\\u2A91','lHar':'\\u2962','lhard':'\\u21BD','lharu':'\\u21BC','lharul':'\\u296A','lhblk':'\\u2584','ljcy':'\\u0459','LJcy':'\\u0409','ll':'\\u226A','Ll':'\\u22D8','llarr':'\\u21C7','llcorner':'\\u231E','Lleftarrow':'\\u21DA','llhard':'\\u296B','lltri':'\\u25FA','lmidot':'\\u0140','Lmidot':'\\u013F','lmoust':'\\u23B0','lmoustache':'\\u23B0','lnap':'\\u2A89','lnapprox':'\\u2A89','lne':'\\u2A87','lnE':'\\u2268','lneq':'\\u2A87','lneqq':'\\u2268','lnsim':'\\u22E6','loang':'\\u27EC','loarr':'\\u21FD','lobrk':'\\u27E6','longleftarrow':'\\u27F5','Longleftarrow':'\\u27F8','LongLeftArrow':'\\u27F5','longleftrightarrow':'\\u27F7','Longleftrightarrow':'\\u27FA','LongLeftRightArrow':'\\u27F7','longmapsto':'\\u27FC','longrightarrow':'\\u27F6','Longrightarrow':'\\u27F9','LongRightArrow':'\\u27F6','looparrowleft':'\\u21AB','looparrowright':'\\u21AC','lopar':'\\u2985','lopf':'\\uD835\\uDD5D','Lopf':'\\uD835\\uDD43','loplus':'\\u2A2D','lotimes':'\\u2A34','lowast':'\\u2217','lowbar':'_','LowerLeftArrow':'\\u2199','LowerRightArrow':'\\u2198','loz':'\\u25CA','lozenge':'\\u25CA','lozf':'\\u29EB','lpar':'(','lparlt':'\\u2993','lrarr':'\\u21C6','lrcorner':'\\u231F','lrhar':'\\u21CB','lrhard':'\\u296D','lrm':'\\u200E','lrtri':'\\u22BF','lsaquo':'\\u2039','lscr':'\\uD835\\uDCC1','Lscr':'\\u2112','lsh':'\\u21B0','Lsh':'\\u21B0','lsim':'\\u2272','lsime':'\\u2A8D','lsimg':'\\u2A8F','lsqb':'[','lsquo':'\\u2018','lsquor':'\\u201A','lstrok':'\\u0142','Lstrok':'\\u0141','lt':'<','Lt':'\\u226A','LT':'<','ltcc':'\\u2AA6','ltcir':'\\u2A79','ltdot':'\\u22D6','lthree':'\\u22CB','ltimes':'\\u22C9','ltlarr':'\\u2976','ltquest':'\\u2A7B','ltri':'\\u25C3','ltrie':'\\u22B4','ltrif':'\\u25C2','ltrPar':'\\u2996','lurdshar':'\\u294A','luruhar':'\\u2966','lvertneqq':'\\u2268\\uFE00','lvnE':'\\u2268\\uFE00','macr':'\\xAF','male':'\\u2642','malt':'\\u2720','maltese':'\\u2720','map':'\\u21A6','Map':'\\u2905','mapsto':'\\u21A6','mapstodown':'\\u21A7','mapstoleft':'\\u21A4','mapstoup':'\\u21A5','marker':'\\u25AE','mcomma':'\\u2A29','mcy':'\\u043C','Mcy':'\\u041C','mdash':'\\u2014','mDDot':'\\u223A','measuredangle':'\\u2221','MediumSpace':'\\u205F','Mellintrf':'\\u2133','mfr':'\\uD835\\uDD2A','Mfr':'\\uD835\\uDD10','mho':'\\u2127','micro':'\\xB5','mid':'\\u2223','midast':'*','midcir':'\\u2AF0','middot':'\\xB7','minus':'\\u2212','minusb':'\\u229F','minusd':'\\u2238','minusdu':'\\u2A2A','MinusPlus':'\\u2213','mlcp':'\\u2ADB','mldr':'\\u2026','mnplus':'\\u2213','models':'\\u22A7','mopf':'\\uD835\\uDD5E','Mopf':'\\uD835\\uDD44','mp':'\\u2213','mscr':'\\uD835\\uDCC2','Mscr':'\\u2133','mstpos':'\\u223E','mu':'\\u03BC','Mu':'\\u039C','multimap':'\\u22B8','mumap':'\\u22B8','nabla':'\\u2207','nacute':'\\u0144','Nacute':'\\u0143','nang':'\\u2220\\u20D2','nap':'\\u2249','napE':'\\u2A70\\u0338','napid':'\\u224B\\u0338','napos':'\\u0149','napprox':'\\u2249','natur':'\\u266E','natural':'\\u266E','naturals':'\\u2115','nbsp':'\\xA0','nbump':'\\u224E\\u0338','nbumpe':'\\u224F\\u0338','ncap':'\\u2A43','ncaron':'\\u0148','Ncaron':'\\u0147','ncedil':'\\u0146','Ncedil':'\\u0145','ncong':'\\u2247','ncongdot':'\\u2A6D\\u0338','ncup':'\\u2A42','ncy':'\\u043D','Ncy':'\\u041D','ndash':'\\u2013','ne':'\\u2260','nearhk':'\\u2924','nearr':'\\u2197','neArr':'\\u21D7','nearrow':'\\u2197','nedot':'\\u2250\\u0338','NegativeMediumSpace':'\\u200B','NegativeThickSpace':'\\u200B','NegativeThinSpace':'\\u200B','NegativeVeryThinSpace':'\\u200B','nequiv':'\\u2262','nesear':'\\u2928','nesim':'\\u2242\\u0338','NestedGreaterGreater':'\\u226B','NestedLessLess':'\\u226A','NewLine':'\\n','nexist':'\\u2204','nexists':'\\u2204','nfr':'\\uD835\\uDD2B','Nfr':'\\uD835\\uDD11','nge':'\\u2271','ngE':'\\u2267\\u0338','ngeq':'\\u2271','ngeqq':'\\u2267\\u0338','ngeqslant':'\\u2A7E\\u0338','nges':'\\u2A7E\\u0338','nGg':'\\u22D9\\u0338','ngsim':'\\u2275','ngt':'\\u226F','nGt':'\\u226B\\u20D2','ngtr':'\\u226F','nGtv':'\\u226B\\u0338','nharr':'\\u21AE','nhArr':'\\u21CE','nhpar':'\\u2AF2','ni':'\\u220B','nis':'\\u22FC','nisd':'\\u22FA','niv':'\\u220B','njcy':'\\u045A','NJcy':'\\u040A','nlarr':'\\u219A','nlArr':'\\u21CD','nldr':'\\u2025','nle':'\\u2270','nlE':'\\u2266\\u0338','nleftarrow':'\\u219A','nLeftarrow':'\\u21CD','nleftrightarrow':'\\u21AE','nLeftrightarrow':'\\u21CE','nleq':'\\u2270','nleqq':'\\u2266\\u0338','nleqslant':'\\u2A7D\\u0338','nles':'\\u2A7D\\u0338','nless':'\\u226E','nLl':'\\u22D8\\u0338','nlsim':'\\u2274','nlt':'\\u226E','nLt':'\\u226A\\u20D2','nltri':'\\u22EA','nltrie':'\\u22EC','nLtv':'\\u226A\\u0338','nmid':'\\u2224','NoBreak':'\\u2060','NonBreakingSpace':'\\xA0','nopf':'\\uD835\\uDD5F','Nopf':'\\u2115','not':'\\xAC','Not':'\\u2AEC','NotCongruent':'\\u2262','NotCupCap':'\\u226D','NotDoubleVerticalBar':'\\u2226','NotElement':'\\u2209','NotEqual':'\\u2260','NotEqualTilde':'\\u2242\\u0338','NotExists':'\\u2204','NotGreater':'\\u226F','NotGreaterEqual':'\\u2271','NotGreaterFullEqual':'\\u2267\\u0338','NotGreaterGreater':'\\u226B\\u0338','NotGreaterLess':'\\u2279','NotGreaterSlantEqual':'\\u2A7E\\u0338','NotGreaterTilde':'\\u2275','NotHumpDownHump':'\\u224E\\u0338','NotHumpEqual':'\\u224F\\u0338','notin':'\\u2209','notindot':'\\u22F5\\u0338','notinE':'\\u22F9\\u0338','notinva':'\\u2209','notinvb':'\\u22F7','notinvc':'\\u22F6','NotLeftTriangle':'\\u22EA','NotLeftTriangleBar':'\\u29CF\\u0338','NotLeftTriangleEqual':'\\u22EC','NotLess':'\\u226E','NotLessEqual':'\\u2270','NotLessGreater':'\\u2278','NotLessLess':'\\u226A\\u0338','NotLessSlantEqual':'\\u2A7D\\u0338','NotLessTilde':'\\u2274','NotNestedGreaterGreater':'\\u2AA2\\u0338','NotNestedLessLess':'\\u2AA1\\u0338','notni':'\\u220C','notniva':'\\u220C','notnivb':'\\u22FE','notnivc':'\\u22FD','NotPrecedes':'\\u2280','NotPrecedesEqual':'\\u2AAF\\u0338','NotPrecedesSlantEqual':'\\u22E0','NotReverseElement':'\\u220C','NotRightTriangle':'\\u22EB','NotRightTriangleBar':'\\u29D0\\u0338','NotRightTriangleEqual':'\\u22ED','NotSquareSubset':'\\u228F\\u0338','NotSquareSubsetEqual':'\\u22E2','NotSquareSuperset':'\\u2290\\u0338','NotSquareSupersetEqual':'\\u22E3','NotSubset':'\\u2282\\u20D2','NotSubsetEqual':'\\u2288','NotSucceeds':'\\u2281','NotSucceedsEqual':'\\u2AB0\\u0338','NotSucceedsSlantEqual':'\\u22E1','NotSucceedsTilde':'\\u227F\\u0338','NotSuperset':'\\u2283\\u20D2','NotSupersetEqual':'\\u2289','NotTilde':'\\u2241','NotTildeEqual':'\\u2244','NotTildeFullEqual':'\\u2247','NotTildeTilde':'\\u2249','NotVerticalBar':'\\u2224','npar':'\\u2226','nparallel':'\\u2226','nparsl':'\\u2AFD\\u20E5','npart':'\\u2202\\u0338','npolint':'\\u2A14','npr':'\\u2280','nprcue':'\\u22E0','npre':'\\u2AAF\\u0338','nprec':'\\u2280','npreceq':'\\u2AAF\\u0338','nrarr':'\\u219B','nrArr':'\\u21CF','nrarrc':'\\u2933\\u0338','nrarrw':'\\u219D\\u0338','nrightarrow':'\\u219B','nRightarrow':'\\u21CF','nrtri':'\\u22EB','nrtrie':'\\u22ED','nsc':'\\u2281','nsccue':'\\u22E1','nsce':'\\u2AB0\\u0338','nscr':'\\uD835\\uDCC3','Nscr':'\\uD835\\uDCA9','nshortmid':'\\u2224','nshortparallel':'\\u2226','nsim':'\\u2241','nsime':'\\u2244','nsimeq':'\\u2244','nsmid':'\\u2224','nspar':'\\u2226','nsqsube':'\\u22E2','nsqsupe':'\\u22E3','nsub':'\\u2284','nsube':'\\u2288','nsubE':'\\u2AC5\\u0338','nsubset':'\\u2282\\u20D2','nsubseteq':'\\u2288','nsubseteqq':'\\u2AC5\\u0338','nsucc':'\\u2281','nsucceq':'\\u2AB0\\u0338','nsup':'\\u2285','nsupe':'\\u2289','nsupE':'\\u2AC6\\u0338','nsupset':'\\u2283\\u20D2','nsupseteq':'\\u2289','nsupseteqq':'\\u2AC6\\u0338','ntgl':'\\u2279','ntilde':'\\xF1','Ntilde':'\\xD1','ntlg':'\\u2278','ntriangleleft':'\\u22EA','ntrianglelefteq':'\\u22EC','ntriangleright':'\\u22EB','ntrianglerighteq':'\\u22ED','nu':'\\u03BD','Nu':'\\u039D','num':'#','numero':'\\u2116','numsp':'\\u2007','nvap':'\\u224D\\u20D2','nvdash':'\\u22AC','nvDash':'\\u22AD','nVdash':'\\u22AE','nVDash':'\\u22AF','nvge':'\\u2265\\u20D2','nvgt':'>\\u20D2','nvHarr':'\\u2904','nvinfin':'\\u29DE','nvlArr':'\\u2902','nvle':'\\u2264\\u20D2','nvlt':'<\\u20D2','nvltrie':'\\u22B4\\u20D2','nvrArr':'\\u2903','nvrtrie':'\\u22B5\\u20D2','nvsim':'\\u223C\\u20D2','nwarhk':'\\u2923','nwarr':'\\u2196','nwArr':'\\u21D6','nwarrow':'\\u2196','nwnear':'\\u2927','oacute':'\\xF3','Oacute':'\\xD3','oast':'\\u229B','ocir':'\\u229A','ocirc':'\\xF4','Ocirc':'\\xD4','ocy':'\\u043E','Ocy':'\\u041E','odash':'\\u229D','odblac':'\\u0151','Odblac':'\\u0150','odiv':'\\u2A38','odot':'\\u2299','odsold':'\\u29BC','oelig':'\\u0153','OElig':'\\u0152','ofcir':'\\u29BF','ofr':'\\uD835\\uDD2C','Ofr':'\\uD835\\uDD12','ogon':'\\u02DB','ograve':'\\xF2','Ograve':'\\xD2','ogt':'\\u29C1','ohbar':'\\u29B5','ohm':'\\u03A9','oint':'\\u222E','olarr':'\\u21BA','olcir':'\\u29BE','olcross':'\\u29BB','oline':'\\u203E','olt':'\\u29C0','omacr':'\\u014D','Omacr':'\\u014C','omega':'\\u03C9','Omega':'\\u03A9','omicron':'\\u03BF','Omicron':'\\u039F','omid':'\\u29B6','ominus':'\\u2296','oopf':'\\uD835\\uDD60','Oopf':'\\uD835\\uDD46','opar':'\\u29B7','OpenCurlyDoubleQuote':'\\u201C','OpenCurlyQuote':'\\u2018','operp':'\\u29B9','oplus':'\\u2295','or':'\\u2228','Or':'\\u2A54','orarr':'\\u21BB','ord':'\\u2A5D','order':'\\u2134','orderof':'\\u2134','ordf':'\\xAA','ordm':'\\xBA','origof':'\\u22B6','oror':'\\u2A56','orslope':'\\u2A57','orv':'\\u2A5B','oS':'\\u24C8','oscr':'\\u2134','Oscr':'\\uD835\\uDCAA','oslash':'\\xF8','Oslash':'\\xD8','osol':'\\u2298','otilde':'\\xF5','Otilde':'\\xD5','otimes':'\\u2297','Otimes':'\\u2A37','otimesas':'\\u2A36','ouml':'\\xF6','Ouml':'\\xD6','ovbar':'\\u233D','OverBar':'\\u203E','OverBrace':'\\u23DE','OverBracket':'\\u23B4','OverParenthesis':'\\u23DC','par':'\\u2225','para':'\\xB6','parallel':'\\u2225','parsim':'\\u2AF3','parsl':'\\u2AFD','part':'\\u2202','PartialD':'\\u2202','pcy':'\\u043F','Pcy':'\\u041F','percnt':'%','period':'.','permil':'\\u2030','perp':'\\u22A5','pertenk':'\\u2031','pfr':'\\uD835\\uDD2D','Pfr':'\\uD835\\uDD13','phi':'\\u03C6','Phi':'\\u03A6','phiv':'\\u03D5','phmmat':'\\u2133','phone':'\\u260E','pi':'\\u03C0','Pi':'\\u03A0','pitchfork':'\\u22D4','piv':'\\u03D6','planck':'\\u210F','planckh':'\\u210E','plankv':'\\u210F','plus':'+','plusacir':'\\u2A23','plusb':'\\u229E','pluscir':'\\u2A22','plusdo':'\\u2214','plusdu':'\\u2A25','pluse':'\\u2A72','PlusMinus':'\\xB1','plusmn':'\\xB1','plussim':'\\u2A26','plustwo':'\\u2A27','pm':'\\xB1','Poincareplane':'\\u210C','pointint':'\\u2A15','popf':'\\uD835\\uDD61','Popf':'\\u2119','pound':'\\xA3','pr':'\\u227A','Pr':'\\u2ABB','prap':'\\u2AB7','prcue':'\\u227C','pre':'\\u2AAF','prE':'\\u2AB3','prec':'\\u227A','precapprox':'\\u2AB7','preccurlyeq':'\\u227C','Precedes':'\\u227A','PrecedesEqual':'\\u2AAF','PrecedesSlantEqual':'\\u227C','PrecedesTilde':'\\u227E','preceq':'\\u2AAF','precnapprox':'\\u2AB9','precneqq':'\\u2AB5','precnsim':'\\u22E8','precsim':'\\u227E','prime':'\\u2032','Prime':'\\u2033','primes':'\\u2119','prnap':'\\u2AB9','prnE':'\\u2AB5','prnsim':'\\u22E8','prod':'\\u220F','Product':'\\u220F','profalar':'\\u232E','profline':'\\u2312','profsurf':'\\u2313','prop':'\\u221D','Proportion':'\\u2237','Proportional':'\\u221D','propto':'\\u221D','prsim':'\\u227E','prurel':'\\u22B0','pscr':'\\uD835\\uDCC5','Pscr':'\\uD835\\uDCAB','psi':'\\u03C8','Psi':'\\u03A8','puncsp':'\\u2008','qfr':'\\uD835\\uDD2E','Qfr':'\\uD835\\uDD14','qint':'\\u2A0C','qopf':'\\uD835\\uDD62','Qopf':'\\u211A','qprime':'\\u2057','qscr':'\\uD835\\uDCC6','Qscr':'\\uD835\\uDCAC','quaternions':'\\u210D','quatint':'\\u2A16','quest':'?','questeq':'\\u225F','quot':'\"','QUOT':'\"','rAarr':'\\u21DB','race':'\\u223D\\u0331','racute':'\\u0155','Racute':'\\u0154','radic':'\\u221A','raemptyv':'\\u29B3','rang':'\\u27E9','Rang':'\\u27EB','rangd':'\\u2992','range':'\\u29A5','rangle':'\\u27E9','raquo':'\\xBB','rarr':'\\u2192','rArr':'\\u21D2','Rarr':'\\u21A0','rarrap':'\\u2975','rarrb':'\\u21E5','rarrbfs':'\\u2920','rarrc':'\\u2933','rarrfs':'\\u291E','rarrhk':'\\u21AA','rarrlp':'\\u21AC','rarrpl':'\\u2945','rarrsim':'\\u2974','rarrtl':'\\u21A3','Rarrtl':'\\u2916','rarrw':'\\u219D','ratail':'\\u291A','rAtail':'\\u291C','ratio':'\\u2236','rationals':'\\u211A','rbarr':'\\u290D','rBarr':'\\u290F','RBarr':'\\u2910','rbbrk':'\\u2773','rbrace':'}','rbrack':']','rbrke':'\\u298C','rbrksld':'\\u298E','rbrkslu':'\\u2990','rcaron':'\\u0159','Rcaron':'\\u0158','rcedil':'\\u0157','Rcedil':'\\u0156','rceil':'\\u2309','rcub':'}','rcy':'\\u0440','Rcy':'\\u0420','rdca':'\\u2937','rdldhar':'\\u2969','rdquo':'\\u201D','rdquor':'\\u201D','rdsh':'\\u21B3','Re':'\\u211C','real':'\\u211C','realine':'\\u211B','realpart':'\\u211C','reals':'\\u211D','rect':'\\u25AD','reg':'\\xAE','REG':'\\xAE','ReverseElement':'\\u220B','ReverseEquilibrium':'\\u21CB','ReverseUpEquilibrium':'\\u296F','rfisht':'\\u297D','rfloor':'\\u230B','rfr':'\\uD835\\uDD2F','Rfr':'\\u211C','rHar':'\\u2964','rhard':'\\u21C1','rharu':'\\u21C0','rharul':'\\u296C','rho':'\\u03C1','Rho':'\\u03A1','rhov':'\\u03F1','RightAngleBracket':'\\u27E9','rightarrow':'\\u2192','Rightarrow':'\\u21D2','RightArrow':'\\u2192','RightArrowBar':'\\u21E5','RightArrowLeftArrow':'\\u21C4','rightarrowtail':'\\u21A3','RightCeiling':'\\u2309','RightDoubleBracket':'\\u27E7','RightDownTeeVector':'\\u295D','RightDownVector':'\\u21C2','RightDownVectorBar':'\\u2955','RightFloor':'\\u230B','rightharpoondown':'\\u21C1','rightharpoonup':'\\u21C0','rightleftarrows':'\\u21C4','rightleftharpoons':'\\u21CC','rightrightarrows':'\\u21C9','rightsquigarrow':'\\u219D','RightTee':'\\u22A2','RightTeeArrow':'\\u21A6','RightTeeVector':'\\u295B','rightthreetimes':'\\u22CC','RightTriangle':'\\u22B3','RightTriangleBar':'\\u29D0','RightTriangleEqual':'\\u22B5','RightUpDownVector':'\\u294F','RightUpTeeVector':'\\u295C','RightUpVector':'\\u21BE','RightUpVectorBar':'\\u2954','RightVector':'\\u21C0','RightVectorBar':'\\u2953','ring':'\\u02DA','risingdotseq':'\\u2253','rlarr':'\\u21C4','rlhar':'\\u21CC','rlm':'\\u200F','rmoust':'\\u23B1','rmoustache':'\\u23B1','rnmid':'\\u2AEE','roang':'\\u27ED','roarr':'\\u21FE','robrk':'\\u27E7','ropar':'\\u2986','ropf':'\\uD835\\uDD63','Ropf':'\\u211D','roplus':'\\u2A2E','rotimes':'\\u2A35','RoundImplies':'\\u2970','rpar':')','rpargt':'\\u2994','rppolint':'\\u2A12','rrarr':'\\u21C9','Rrightarrow':'\\u21DB','rsaquo':'\\u203A','rscr':'\\uD835\\uDCC7','Rscr':'\\u211B','rsh':'\\u21B1','Rsh':'\\u21B1','rsqb':']','rsquo':'\\u2019','rsquor':'\\u2019','rthree':'\\u22CC','rtimes':'\\u22CA','rtri':'\\u25B9','rtrie':'\\u22B5','rtrif':'\\u25B8','rtriltri':'\\u29CE','RuleDelayed':'\\u29F4','ruluhar':'\\u2968','rx':'\\u211E','sacute':'\\u015B','Sacute':'\\u015A','sbquo':'\\u201A','sc':'\\u227B','Sc':'\\u2ABC','scap':'\\u2AB8','scaron':'\\u0161','Scaron':'\\u0160','sccue':'\\u227D','sce':'\\u2AB0','scE':'\\u2AB4','scedil':'\\u015F','Scedil':'\\u015E','scirc':'\\u015D','Scirc':'\\u015C','scnap':'\\u2ABA','scnE':'\\u2AB6','scnsim':'\\u22E9','scpolint':'\\u2A13','scsim':'\\u227F','scy':'\\u0441','Scy':'\\u0421','sdot':'\\u22C5','sdotb':'\\u22A1','sdote':'\\u2A66','searhk':'\\u2925','searr':'\\u2198','seArr':'\\u21D8','searrow':'\\u2198','sect':'\\xA7','semi':';','seswar':'\\u2929','setminus':'\\u2216','setmn':'\\u2216','sext':'\\u2736','sfr':'\\uD835\\uDD30','Sfr':'\\uD835\\uDD16','sfrown':'\\u2322','sharp':'\\u266F','shchcy':'\\u0449','SHCHcy':'\\u0429','shcy':'\\u0448','SHcy':'\\u0428','ShortDownArrow':'\\u2193','ShortLeftArrow':'\\u2190','shortmid':'\\u2223','shortparallel':'\\u2225','ShortRightArrow':'\\u2192','ShortUpArrow':'\\u2191','shy':'\\xAD','sigma':'\\u03C3','Sigma':'\\u03A3','sigmaf':'\\u03C2','sigmav':'\\u03C2','sim':'\\u223C','simdot':'\\u2A6A','sime':'\\u2243','simeq':'\\u2243','simg':'\\u2A9E','simgE':'\\u2AA0','siml':'\\u2A9D','simlE':'\\u2A9F','simne':'\\u2246','simplus':'\\u2A24','simrarr':'\\u2972','slarr':'\\u2190','SmallCircle':'\\u2218','smallsetminus':'\\u2216','smashp':'\\u2A33','smeparsl':'\\u29E4','smid':'\\u2223','smile':'\\u2323','smt':'\\u2AAA','smte':'\\u2AAC','smtes':'\\u2AAC\\uFE00','softcy':'\\u044C','SOFTcy':'\\u042C','sol':'/','solb':'\\u29C4','solbar':'\\u233F','sopf':'\\uD835\\uDD64','Sopf':'\\uD835\\uDD4A','spades':'\\u2660','spadesuit':'\\u2660','spar':'\\u2225','sqcap':'\\u2293','sqcaps':'\\u2293\\uFE00','sqcup':'\\u2294','sqcups':'\\u2294\\uFE00','Sqrt':'\\u221A','sqsub':'\\u228F','sqsube':'\\u2291','sqsubset':'\\u228F','sqsubseteq':'\\u2291','sqsup':'\\u2290','sqsupe':'\\u2292','sqsupset':'\\u2290','sqsupseteq':'\\u2292','squ':'\\u25A1','square':'\\u25A1','Square':'\\u25A1','SquareIntersection':'\\u2293','SquareSubset':'\\u228F','SquareSubsetEqual':'\\u2291','SquareSuperset':'\\u2290','SquareSupersetEqual':'\\u2292','SquareUnion':'\\u2294','squarf':'\\u25AA','squf':'\\u25AA','srarr':'\\u2192','sscr':'\\uD835\\uDCC8','Sscr':'\\uD835\\uDCAE','ssetmn':'\\u2216','ssmile':'\\u2323','sstarf':'\\u22C6','star':'\\u2606','Star':'\\u22C6','starf':'\\u2605','straightepsilon':'\\u03F5','straightphi':'\\u03D5','strns':'\\xAF','sub':'\\u2282','Sub':'\\u22D0','subdot':'\\u2ABD','sube':'\\u2286','subE':'\\u2AC5','subedot':'\\u2AC3','submult':'\\u2AC1','subne':'\\u228A','subnE':'\\u2ACB','subplus':'\\u2ABF','subrarr':'\\u2979','subset':'\\u2282','Subset':'\\u22D0','subseteq':'\\u2286','subseteqq':'\\u2AC5','SubsetEqual':'\\u2286','subsetneq':'\\u228A','subsetneqq':'\\u2ACB','subsim':'\\u2AC7','subsub':'\\u2AD5','subsup':'\\u2AD3','succ':'\\u227B','succapprox':'\\u2AB8','succcurlyeq':'\\u227D','Succeeds':'\\u227B','SucceedsEqual':'\\u2AB0','SucceedsSlantEqual':'\\u227D','SucceedsTilde':'\\u227F','succeq':'\\u2AB0','succnapprox':'\\u2ABA','succneqq':'\\u2AB6','succnsim':'\\u22E9','succsim':'\\u227F','SuchThat':'\\u220B','sum':'\\u2211','Sum':'\\u2211','sung':'\\u266A','sup':'\\u2283','Sup':'\\u22D1','sup1':'\\xB9','sup2':'\\xB2','sup3':'\\xB3','supdot':'\\u2ABE','supdsub':'\\u2AD8','supe':'\\u2287','supE':'\\u2AC6','supedot':'\\u2AC4','Superset':'\\u2283','SupersetEqual':'\\u2287','suphsol':'\\u27C9','suphsub':'\\u2AD7','suplarr':'\\u297B','supmult':'\\u2AC2','supne':'\\u228B','supnE':'\\u2ACC','supplus':'\\u2AC0','supset':'\\u2283','Supset':'\\u22D1','supseteq':'\\u2287','supseteqq':'\\u2AC6','supsetneq':'\\u228B','supsetneqq':'\\u2ACC','supsim':'\\u2AC8','supsub':'\\u2AD4','supsup':'\\u2AD6','swarhk':'\\u2926','swarr':'\\u2199','swArr':'\\u21D9','swarrow':'\\u2199','swnwar':'\\u292A','szlig':'\\xDF','Tab':'\\t','target':'\\u2316','tau':'\\u03C4','Tau':'\\u03A4','tbrk':'\\u23B4','tcaron':'\\u0165','Tcaron':'\\u0164','tcedil':'\\u0163','Tcedil':'\\u0162','tcy':'\\u0442','Tcy':'\\u0422','tdot':'\\u20DB','telrec':'\\u2315','tfr':'\\uD835\\uDD31','Tfr':'\\uD835\\uDD17','there4':'\\u2234','therefore':'\\u2234','Therefore':'\\u2234','theta':'\\u03B8','Theta':'\\u0398','thetasym':'\\u03D1','thetav':'\\u03D1','thickapprox':'\\u2248','thicksim':'\\u223C','ThickSpace':'\\u205F\\u200A','thinsp':'\\u2009','ThinSpace':'\\u2009','thkap':'\\u2248','thksim':'\\u223C','thorn':'\\xFE','THORN':'\\xDE','tilde':'\\u02DC','Tilde':'\\u223C','TildeEqual':'\\u2243','TildeFullEqual':'\\u2245','TildeTilde':'\\u2248','times':'\\xD7','timesb':'\\u22A0','timesbar':'\\u2A31','timesd':'\\u2A30','tint':'\\u222D','toea':'\\u2928','top':'\\u22A4','topbot':'\\u2336','topcir':'\\u2AF1','topf':'\\uD835\\uDD65','Topf':'\\uD835\\uDD4B','topfork':'\\u2ADA','tosa':'\\u2929','tprime':'\\u2034','trade':'\\u2122','TRADE':'\\u2122','triangle':'\\u25B5','triangledown':'\\u25BF','triangleleft':'\\u25C3','trianglelefteq':'\\u22B4','triangleq':'\\u225C','triangleright':'\\u25B9','trianglerighteq':'\\u22B5','tridot':'\\u25EC','trie':'\\u225C','triminus':'\\u2A3A','TripleDot':'\\u20DB','triplus':'\\u2A39','trisb':'\\u29CD','tritime':'\\u2A3B','trpezium':'\\u23E2','tscr':'\\uD835\\uDCC9','Tscr':'\\uD835\\uDCAF','tscy':'\\u0446','TScy':'\\u0426','tshcy':'\\u045B','TSHcy':'\\u040B','tstrok':'\\u0167','Tstrok':'\\u0166','twixt':'\\u226C','twoheadleftarrow':'\\u219E','twoheadrightarrow':'\\u21A0','uacute':'\\xFA','Uacute':'\\xDA','uarr':'\\u2191','uArr':'\\u21D1','Uarr':'\\u219F','Uarrocir':'\\u2949','ubrcy':'\\u045E','Ubrcy':'\\u040E','ubreve':'\\u016D','Ubreve':'\\u016C','ucirc':'\\xFB','Ucirc':'\\xDB','ucy':'\\u0443','Ucy':'\\u0423','udarr':'\\u21C5','udblac':'\\u0171','Udblac':'\\u0170','udhar':'\\u296E','ufisht':'\\u297E','ufr':'\\uD835\\uDD32','Ufr':'\\uD835\\uDD18','ugrave':'\\xF9','Ugrave':'\\xD9','uHar':'\\u2963','uharl':'\\u21BF','uharr':'\\u21BE','uhblk':'\\u2580','ulcorn':'\\u231C','ulcorner':'\\u231C','ulcrop':'\\u230F','ultri':'\\u25F8','umacr':'\\u016B','Umacr':'\\u016A','uml':'\\xA8','UnderBar':'_','UnderBrace':'\\u23DF','UnderBracket':'\\u23B5','UnderParenthesis':'\\u23DD','Union':'\\u22C3','UnionPlus':'\\u228E','uogon':'\\u0173','Uogon':'\\u0172','uopf':'\\uD835\\uDD66','Uopf':'\\uD835\\uDD4C','uparrow':'\\u2191','Uparrow':'\\u21D1','UpArrow':'\\u2191','UpArrowBar':'\\u2912','UpArrowDownArrow':'\\u21C5','updownarrow':'\\u2195','Updownarrow':'\\u21D5','UpDownArrow':'\\u2195','UpEquilibrium':'\\u296E','upharpoonleft':'\\u21BF','upharpoonright':'\\u21BE','uplus':'\\u228E','UpperLeftArrow':'\\u2196','UpperRightArrow':'\\u2197','upsi':'\\u03C5','Upsi':'\\u03D2','upsih':'\\u03D2','upsilon':'\\u03C5','Upsilon':'\\u03A5','UpTee':'\\u22A5','UpTeeArrow':'\\u21A5','upuparrows':'\\u21C8','urcorn':'\\u231D','urcorner':'\\u231D','urcrop':'\\u230E','uring':'\\u016F','Uring':'\\u016E','urtri':'\\u25F9','uscr':'\\uD835\\uDCCA','Uscr':'\\uD835\\uDCB0','utdot':'\\u22F0','utilde':'\\u0169','Utilde':'\\u0168','utri':'\\u25B5','utrif':'\\u25B4','uuarr':'\\u21C8','uuml':'\\xFC','Uuml':'\\xDC','uwangle':'\\u29A7','vangrt':'\\u299C','varepsilon':'\\u03F5','varkappa':'\\u03F0','varnothing':'\\u2205','varphi':'\\u03D5','varpi':'\\u03D6','varpropto':'\\u221D','varr':'\\u2195','vArr':'\\u21D5','varrho':'\\u03F1','varsigma':'\\u03C2','varsubsetneq':'\\u228A\\uFE00','varsubsetneqq':'\\u2ACB\\uFE00','varsupsetneq':'\\u228B\\uFE00','varsupsetneqq':'\\u2ACC\\uFE00','vartheta':'\\u03D1','vartriangleleft':'\\u22B2','vartriangleright':'\\u22B3','vBar':'\\u2AE8','Vbar':'\\u2AEB','vBarv':'\\u2AE9','vcy':'\\u0432','Vcy':'\\u0412','vdash':'\\u22A2','vDash':'\\u22A8','Vdash':'\\u22A9','VDash':'\\u22AB','Vdashl':'\\u2AE6','vee':'\\u2228','Vee':'\\u22C1','veebar':'\\u22BB','veeeq':'\\u225A','vellip':'\\u22EE','verbar':'|','Verbar':'\\u2016','vert':'|','Vert':'\\u2016','VerticalBar':'\\u2223','VerticalLine':'|','VerticalSeparator':'\\u2758','VerticalTilde':'\\u2240','VeryThinSpace':'\\u200A','vfr':'\\uD835\\uDD33','Vfr':'\\uD835\\uDD19','vltri':'\\u22B2','vnsub':'\\u2282\\u20D2','vnsup':'\\u2283\\u20D2','vopf':'\\uD835\\uDD67','Vopf':'\\uD835\\uDD4D','vprop':'\\u221D','vrtri':'\\u22B3','vscr':'\\uD835\\uDCCB','Vscr':'\\uD835\\uDCB1','vsubne':'\\u228A\\uFE00','vsubnE':'\\u2ACB\\uFE00','vsupne':'\\u228B\\uFE00','vsupnE':'\\u2ACC\\uFE00','Vvdash':'\\u22AA','vzigzag':'\\u299A','wcirc':'\\u0175','Wcirc':'\\u0174','wedbar':'\\u2A5F','wedge':'\\u2227','Wedge':'\\u22C0','wedgeq':'\\u2259','weierp':'\\u2118','wfr':'\\uD835\\uDD34','Wfr':'\\uD835\\uDD1A','wopf':'\\uD835\\uDD68','Wopf':'\\uD835\\uDD4E','wp':'\\u2118','wr':'\\u2240','wreath':'\\u2240','wscr':'\\uD835\\uDCCC','Wscr':'\\uD835\\uDCB2','xcap':'\\u22C2','xcirc':'\\u25EF','xcup':'\\u22C3','xdtri':'\\u25BD','xfr':'\\uD835\\uDD35','Xfr':'\\uD835\\uDD1B','xharr':'\\u27F7','xhArr':'\\u27FA','xi':'\\u03BE','Xi':'\\u039E','xlarr':'\\u27F5','xlArr':'\\u27F8','xmap':'\\u27FC','xnis':'\\u22FB','xodot':'\\u2A00','xopf':'\\uD835\\uDD69','Xopf':'\\uD835\\uDD4F','xoplus':'\\u2A01','xotime':'\\u2A02','xrarr':'\\u27F6','xrArr':'\\u27F9','xscr':'\\uD835\\uDCCD','Xscr':'\\uD835\\uDCB3','xsqcup':'\\u2A06','xuplus':'\\u2A04','xutri':'\\u25B3','xvee':'\\u22C1','xwedge':'\\u22C0','yacute':'\\xFD','Yacute':'\\xDD','yacy':'\\u044F','YAcy':'\\u042F','ycirc':'\\u0177','Ycirc':'\\u0176','ycy':'\\u044B','Ycy':'\\u042B','yen':'\\xA5','yfr':'\\uD835\\uDD36','Yfr':'\\uD835\\uDD1C','yicy':'\\u0457','YIcy':'\\u0407','yopf':'\\uD835\\uDD6A','Yopf':'\\uD835\\uDD50','yscr':'\\uD835\\uDCCE','Yscr':'\\uD835\\uDCB4','yucy':'\\u044E','YUcy':'\\u042E','yuml':'\\xFF','Yuml':'\\u0178','zacute':'\\u017A','Zacute':'\\u0179','zcaron':'\\u017E','Zcaron':'\\u017D','zcy':'\\u0437','Zcy':'\\u0417','zdot':'\\u017C','Zdot':'\\u017B','zeetrf':'\\u2128','ZeroWidthSpace':'\\u200B','zeta':'\\u03B6','Zeta':'\\u0396','zfr':'\\uD835\\uDD37','Zfr':'\\u2128','zhcy':'\\u0436','ZHcy':'\\u0416','zigrarr':'\\u21DD','zopf':'\\uD835\\uDD6B','Zopf':'\\u2124','zscr':'\\uD835\\uDCCF','Zscr':'\\uD835\\uDCB5','zwj':'\\u200D','zwnj':'\\u200C'};\n\tvar decodeMapLegacy = {'aacute':'\\xE1','Aacute':'\\xC1','acirc':'\\xE2','Acirc':'\\xC2','acute':'\\xB4','aelig':'\\xE6','AElig':'\\xC6','agrave':'\\xE0','Agrave':'\\xC0','amp':'&','AMP':'&','aring':'\\xE5','Aring':'\\xC5','atilde':'\\xE3','Atilde':'\\xC3','auml':'\\xE4','Auml':'\\xC4','brvbar':'\\xA6','ccedil':'\\xE7','Ccedil':'\\xC7','cedil':'\\xB8','cent':'\\xA2','copy':'\\xA9','COPY':'\\xA9','curren':'\\xA4','deg':'\\xB0','divide':'\\xF7','eacute':'\\xE9','Eacute':'\\xC9','ecirc':'\\xEA','Ecirc':'\\xCA','egrave':'\\xE8','Egrave':'\\xC8','eth':'\\xF0','ETH':'\\xD0','euml':'\\xEB','Euml':'\\xCB','frac12':'\\xBD','frac14':'\\xBC','frac34':'\\xBE','gt':'>','GT':'>','iacute':'\\xED','Iacute':'\\xCD','icirc':'\\xEE','Icirc':'\\xCE','iexcl':'\\xA1','igrave':'\\xEC','Igrave':'\\xCC','iquest':'\\xBF','iuml':'\\xEF','Iuml':'\\xCF','laquo':'\\xAB','lt':'<','LT':'<','macr':'\\xAF','micro':'\\xB5','middot':'\\xB7','nbsp':'\\xA0','not':'\\xAC','ntilde':'\\xF1','Ntilde':'\\xD1','oacute':'\\xF3','Oacute':'\\xD3','ocirc':'\\xF4','Ocirc':'\\xD4','ograve':'\\xF2','Ograve':'\\xD2','ordf':'\\xAA','ordm':'\\xBA','oslash':'\\xF8','Oslash':'\\xD8','otilde':'\\xF5','Otilde':'\\xD5','ouml':'\\xF6','Ouml':'\\xD6','para':'\\xB6','plusmn':'\\xB1','pound':'\\xA3','quot':'\"','QUOT':'\"','raquo':'\\xBB','reg':'\\xAE','REG':'\\xAE','sect':'\\xA7','shy':'\\xAD','sup1':'\\xB9','sup2':'\\xB2','sup3':'\\xB3','szlig':'\\xDF','thorn':'\\xFE','THORN':'\\xDE','times':'\\xD7','uacute':'\\xFA','Uacute':'\\xDA','ucirc':'\\xFB','Ucirc':'\\xDB','ugrave':'\\xF9','Ugrave':'\\xD9','uml':'\\xA8','uuml':'\\xFC','Uuml':'\\xDC','yacute':'\\xFD','Yacute':'\\xDD','yen':'\\xA5','yuml':'\\xFF'};\n\tvar decodeMapNumeric = {'0':'\\uFFFD','128':'\\u20AC','130':'\\u201A','131':'\\u0192','132':'\\u201E','133':'\\u2026','134':'\\u2020','135':'\\u2021','136':'\\u02C6','137':'\\u2030','138':'\\u0160','139':'\\u2039','140':'\\u0152','142':'\\u017D','145':'\\u2018','146':'\\u2019','147':'\\u201C','148':'\\u201D','149':'\\u2022','150':'\\u2013','151':'\\u2014','152':'\\u02DC','153':'\\u2122','154':'\\u0161','155':'\\u203A','156':'\\u0153','158':'\\u017E','159':'\\u0178'};\n\tvar invalidReferenceCodePoints = [1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65000,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\tvar object = {};\n\tvar hasOwnProperty = object.hasOwnProperty;\n\tvar has = function(object, propertyName) {\n\t\treturn hasOwnProperty.call(object, propertyName);\n\t};\n\n\tvar contains = function(array, value) {\n\t\tvar index = -1;\n\t\tvar length = array.length;\n\t\twhile (++index < length) {\n\t\t\tif (array[index] == value) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\tvar merge = function(options, defaults) {\n\t\tif (!options) {\n\t\t\treturn defaults;\n\t\t}\n\t\tvar result = {};\n\t\tvar key;\n\t\tfor (key in defaults) {\n\t\t\t// A `hasOwnProperty` check is not needed here, since only recognized\n\t\t\t// option names are used anyway. Any others are ignored.\n\t\t\tresult[key] = has(options, key) ? options[key] : defaults[key];\n\t\t}\n\t\treturn result;\n\t};\n\n\t// Modified version of `ucs2encode`; see https://mths.be/punycode.\n\tvar codePointToSymbol = function(codePoint, strict) {\n\t\tvar output = '';\n\t\tif ((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF) {\n\t\t\t// See issue #4:\n\t\t\t// “Otherwise, if the number is in the range 0xD800 to 0xDFFF or is\n\t\t\t// greater than 0x10FFFF, then this is a parse error. Return a U+FFFD\n\t\t\t// REPLACEMENT CHARACTER.”\n\t\t\tif (strict) {\n\t\t\t\tparseError('character reference outside the permissible Unicode range');\n\t\t\t}\n\t\t\treturn '\\uFFFD';\n\t\t}\n\t\tif (has(decodeMapNumeric, codePoint)) {\n\t\t\tif (strict) {\n\t\t\t\tparseError('disallowed character reference');\n\t\t\t}\n\t\t\treturn decodeMapNumeric[codePoint];\n\t\t}\n\t\tif (strict && contains(invalidReferenceCodePoints, codePoint)) {\n\t\t\tparseError('disallowed character reference');\n\t\t}\n\t\tif (codePoint > 0xFFFF) {\n\t\t\tcodePoint -= 0x10000;\n\t\t\toutput += stringFromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);\n\t\t\tcodePoint = 0xDC00 | codePoint & 0x3FF;\n\t\t}\n\t\toutput += stringFromCharCode(codePoint);\n\t\treturn output;\n\t};\n\n\tvar hexEscape = function(codePoint) {\n\t\treturn '&#x' + codePoint.toString(16).toUpperCase() + ';';\n\t};\n\n\tvar decEscape = function(codePoint) {\n\t\treturn '&#' + codePoint + ';';\n\t};\n\n\tvar parseError = function(message) {\n\t\tthrow Error('Parse error: ' + message);\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar encode = function(string, options) {\n\t\toptions = merge(options, encode.options);\n\t\tvar strict = options.strict;\n\t\tif (strict && regexInvalidRawCodePoint.test(string)) {\n\t\t\tparseError('forbidden code point');\n\t\t}\n\t\tvar encodeEverything = options.encodeEverything;\n\t\tvar useNamedReferences = options.useNamedReferences;\n\t\tvar allowUnsafeSymbols = options.allowUnsafeSymbols;\n\t\tvar escapeCodePoint = options.decimal ? decEscape : hexEscape;\n\n\t\tvar escapeBmpSymbol = function(symbol) {\n\t\t\treturn escapeCodePoint(symbol.charCodeAt(0));\n\t\t};\n\n\t\tif (encodeEverything) {\n\t\t\t// Encode ASCII symbols.\n\t\t\tstring = string.replace(regexAsciiWhitelist, function(symbol) {\n\t\t\t\t// Use named references if requested & possible.\n\t\t\t\tif (useNamedReferences && has(encodeMap, symbol)) {\n\t\t\t\t\treturn '&' + encodeMap[symbol] + ';';\n\t\t\t\t}\n\t\t\t\treturn escapeBmpSymbol(symbol);\n\t\t\t});\n\t\t\t// Shorten a few escapes that represent two symbols, of which at least one\n\t\t\t// is within the ASCII range.\n\t\t\tif (useNamedReferences) {\n\t\t\t\tstring = string\n\t\t\t\t\t.replace(/&gt;\\u20D2/g, '&nvgt;')\n\t\t\t\t\t.replace(/&lt;\\u20D2/g, '&nvlt;')\n\t\t\t\t\t.replace(/&#x66;&#x6A;/g, '&fjlig;');\n\t\t\t}\n\t\t\t// Encode non-ASCII symbols.\n\t\t\tif (useNamedReferences) {\n\t\t\t\t// Encode non-ASCII symbols that can be replaced with a named reference.\n\t\t\t\tstring = string.replace(regexEncodeNonAscii, function(string) {\n\t\t\t\t\t// Note: there is no need to check `has(encodeMap, string)` here.\n\t\t\t\t\treturn '&' + encodeMap[string] + ';';\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Note: any remaining non-ASCII symbols are handled outside of the `if`.\n\t\t} else if (useNamedReferences) {\n\t\t\t// Apply named character references.\n\t\t\t// Encode `<>\"'&` using named character references.\n\t\t\tif (!allowUnsafeSymbols) {\n\t\t\t\tstring = string.replace(regexEscape, function(string) {\n\t\t\t\t\treturn '&' + encodeMap[string] + ';'; // no need to check `has()` here\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Shorten escapes that represent two symbols, of which at least one is\n\t\t\t// `<>\"'&`.\n\t\t\tstring = string\n\t\t\t\t.replace(/&gt;\\u20D2/g, '&nvgt;')\n\t\t\t\t.replace(/&lt;\\u20D2/g, '&nvlt;');\n\t\t\t// Encode non-ASCII symbols that can be replaced with a named reference.\n\t\t\tstring = string.replace(regexEncodeNonAscii, function(string) {\n\t\t\t\t// Note: there is no need to check `has(encodeMap, string)` here.\n\t\t\t\treturn '&' + encodeMap[string] + ';';\n\t\t\t});\n\t\t} else if (!allowUnsafeSymbols) {\n\t\t\t// Encode `<>\"'&` using hexadecimal escapes, now that they’re not handled\n\t\t\t// using named character references.\n\t\t\tstring = string.replace(regexEscape, escapeBmpSymbol);\n\t\t}\n\t\treturn string\n\t\t\t// Encode astral symbols.\n\t\t\t.replace(regexAstralSymbols, function($0) {\n\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\tvar high = $0.charCodeAt(0);\n\t\t\t\tvar low = $0.charCodeAt(1);\n\t\t\t\tvar codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;\n\t\t\t\treturn escapeCodePoint(codePoint);\n\t\t\t})\n\t\t\t// Encode any remaining BMP symbols that are not printable ASCII symbols\n\t\t\t// using a hexadecimal escape.\n\t\t\t.replace(regexBmpWhitelist, escapeBmpSymbol);\n\t};\n\t// Expose default options (so they can be overridden globally).\n\tencode.options = {\n\t\t'allowUnsafeSymbols': false,\n\t\t'encodeEverything': false,\n\t\t'strict': false,\n\t\t'useNamedReferences': false,\n\t\t'decimal' : false\n\t};\n\n\tvar decode = function(html, options) {\n\t\toptions = merge(options, decode.options);\n\t\tvar strict = options.strict;\n\t\tif (strict && regexInvalidEntity.test(html)) {\n\t\t\tparseError('malformed character reference');\n\t\t}\n\t\treturn html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {\n\t\t\tvar codePoint;\n\t\t\tvar semicolon;\n\t\t\tvar decDigits;\n\t\t\tvar hexDigits;\n\t\t\tvar reference;\n\t\t\tvar next;\n\n\t\t\tif ($1) {\n\t\t\t\treference = $1;\n\t\t\t\t// Note: there is no need to check `has(decodeMap, reference)`.\n\t\t\t\treturn decodeMap[reference];\n\t\t\t}\n\n\t\t\tif ($2) {\n\t\t\t\t// Decode named character references without trailing `;`, e.g. `&amp`.\n\t\t\t\t// This is only a parse error if it gets converted to `&`, or if it is\n\t\t\t\t// followed by `=` in an attribute context.\n\t\t\t\treference = $2;\n\t\t\t\tnext = $3;\n\t\t\t\tif (next && options.isAttributeValue) {\n\t\t\t\t\tif (strict && next == '=') {\n\t\t\t\t\t\tparseError('`&` did not start a character reference');\n\t\t\t\t\t}\n\t\t\t\t\treturn $0;\n\t\t\t\t} else {\n\t\t\t\t\tif (strict) {\n\t\t\t\t\t\tparseError(\n\t\t\t\t\t\t\t'named character reference was not terminated by a semicolon'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// Note: there is no need to check `has(decodeMapLegacy, reference)`.\n\t\t\t\t\treturn decodeMapLegacy[reference] + (next || '');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($4) {\n\t\t\t\t// Decode decimal escapes, e.g. `&#119558;`.\n\t\t\t\tdecDigits = $4;\n\t\t\t\tsemicolon = $5;\n\t\t\t\tif (strict && !semicolon) {\n\t\t\t\t\tparseError('character reference was not terminated by a semicolon');\n\t\t\t\t}\n\t\t\t\tcodePoint = parseInt(decDigits, 10);\n\t\t\t\treturn codePointToSymbol(codePoint, strict);\n\t\t\t}\n\n\t\t\tif ($6) {\n\t\t\t\t// Decode hexadecimal escapes, e.g. `&#x1D306;`.\n\t\t\t\thexDigits = $6;\n\t\t\t\tsemicolon = $7;\n\t\t\t\tif (strict && !semicolon) {\n\t\t\t\t\tparseError('character reference was not terminated by a semicolon');\n\t\t\t\t}\n\t\t\t\tcodePoint = parseInt(hexDigits, 16);\n\t\t\t\treturn codePointToSymbol(codePoint, strict);\n\t\t\t}\n\n\t\t\t// If we’re still here, `if ($7)` is implied; it’s an ambiguous\n\t\t\t// ampersand for sure. https://mths.be/notes/ambiguous-ampersands\n\t\t\tif (strict) {\n\t\t\t\tparseError(\n\t\t\t\t\t'named character reference was not terminated by a semicolon'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn $0;\n\t\t});\n\t};\n\t// Expose default options (so they can be overridden globally).\n\tdecode.options = {\n\t\t'isAttributeValue': false,\n\t\t'strict': false\n\t};\n\n\tvar escape = function(string) {\n\t\treturn string.replace(regexEscape, function($0) {\n\t\t\t// Note: there is no need to check `has(escapeMap, $0)` here.\n\t\t\treturn escapeMap[$0];\n\t\t});\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar he = {\n\t\t'version': '1.2.0',\n\t\t'encode': encode,\n\t\t'decode': decode,\n\t\t'escape': escape,\n\t\t'unescape': decode\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn he;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = he;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (var key in he) {\n\t\t\t\thas(he, key) && (freeExports[key] = he[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.he = he;\n\t}\n\n}(this));\n","/*!\n * JavaScript Cookie v2.2.1\n * https://github.com/js-cookie/js-cookie\n *\n * Copyright 2006, 2015 Klaus Hartl & Fagner Brack\n * Released under the MIT license\n */\n;(function (factory) {\n\tvar registeredInModuleLoader;\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t\tregisteredInModuleLoader = true;\n\t}\n\tif (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t\tregisteredInModuleLoader = true;\n\t}\n\tif (!registeredInModuleLoader) {\n\t\tvar OldCookies = window.Cookies;\n\t\tvar api = window.Cookies = factory();\n\t\tapi.noConflict = function () {\n\t\t\twindow.Cookies = OldCookies;\n\t\t\treturn api;\n\t\t};\n\t}\n}(function () {\n\tfunction extend () {\n\t\tvar i = 0;\n\t\tvar result = {};\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar attributes = arguments[ i ];\n\t\t\tfor (var key in attributes) {\n\t\t\t\tresult[key] = attributes[key];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction decode (s) {\n\t\treturn s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n\t}\n\n\tfunction init (converter) {\n\t\tfunction api() {}\n\n\t\tfunction set (key, value, attributes) {\n\t\t\tif (typeof document === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tattributes = extend({\n\t\t\t\tpath: '/'\n\t\t\t}, api.defaults, attributes);\n\n\t\t\tif (typeof attributes.expires === 'number') {\n\t\t\t\tattributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);\n\t\t\t}\n\n\t\t\t// We're using \"expires\" because \"max-age\" is not supported by IE\n\t\t\tattributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';\n\n\t\t\ttry {\n\t\t\t\tvar result = JSON.stringify(value);\n\t\t\t\tif (/^[\\{\\[]/.test(result)) {\n\t\t\t\t\tvalue = result;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\n\t\t\tvalue = converter.write ?\n\t\t\t\tconverter.write(value, key) :\n\t\t\t\tencodeURIComponent(String(value))\n\t\t\t\t\t.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);\n\n\t\t\tkey = encodeURIComponent(String(key))\n\t\t\t\t.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)\n\t\t\t\t.replace(/[\\(\\)]/g, escape);\n\n\t\t\tvar stringifiedAttributes = '';\n\t\t\tfor (var attributeName in attributes) {\n\t\t\t\tif (!attributes[attributeName]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tstringifiedAttributes += '; ' + attributeName;\n\t\t\t\tif (attributes[attributeName] === true) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Considers RFC 6265 section 5.2:\n\t\t\t\t// ...\n\t\t\t\t// 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n\t\t\t\t//     character:\n\t\t\t\t// Consume the characters of the unparsed-attributes up to,\n\t\t\t\t// not including, the first %x3B (\";\") character.\n\t\t\t\t// ...\n\t\t\t\tstringifiedAttributes += '=' + attributes[attributeName].split(';')[0];\n\t\t\t}\n\n\t\t\treturn (document.cookie = key + '=' + value + stringifiedAttributes);\n\t\t}\n\n\t\tfunction get (key, json) {\n\t\t\tif (typeof document === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar jar = {};\n\t\t\t// To prevent the for loop in the first place assign an empty array\n\t\t\t// in case there are no cookies at all.\n\t\t\tvar cookies = document.cookie ? document.cookie.split('; ') : [];\n\t\t\tvar i = 0;\n\n\t\t\tfor (; i < cookies.length; i++) {\n\t\t\t\tvar parts = cookies[i].split('=');\n\t\t\t\tvar cookie = parts.slice(1).join('=');\n\n\t\t\t\tif (!json && cookie.charAt(0) === '\"') {\n\t\t\t\t\tcookie = cookie.slice(1, -1);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar name = decode(parts[0]);\n\t\t\t\t\tcookie = (converter.read || converter)(cookie, name) ||\n\t\t\t\t\t\tdecode(cookie);\n\n\t\t\t\t\tif (json) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tcookie = JSON.parse(cookie);\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t}\n\n\t\t\t\t\tjar[name] = cookie;\n\n\t\t\t\t\tif (key === name) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn key ? jar[key] : jar;\n\t\t}\n\n\t\tapi.set = set;\n\t\tapi.get = function (key) {\n\t\t\treturn get(key, false /* read as raw */);\n\t\t};\n\t\tapi.getJSON = function (key) {\n\t\t\treturn get(key, true /* read as json */);\n\t\t};\n\t\tapi.remove = function (key, attributes) {\n\t\t\tset(key, '', extend(attributes, {\n\t\t\t\texpires: -1\n\t\t\t}));\n\t\t};\n\n\t\tapi.defaults = {};\n\n\t\tapi.withConverter = init;\n\n\t\treturn api;\n\t}\n\n\treturn init(function () {});\n}));\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n","/**\n * This function is like `baseIndexOf` except that it accepts a comparator.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOfWith(array, value, fromIndex, comparator) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (comparator(array[index], value)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseIndexOfWith;\n","/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var arrayMap = require('./_arrayMap'),\n    baseIndexOf = require('./_baseIndexOf'),\n    baseIndexOfWith = require('./_baseIndexOfWith'),\n    baseUnary = require('./_baseUnary'),\n    copyArray = require('./_copyArray');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * The base implementation of `_.pullAllBy` without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n */\nfunction basePullAll(array, values, iteratee, comparator) {\n  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n      index = -1,\n      length = values.length,\n      seen = array;\n\n  if (array === values) {\n    values = copyArray(values);\n  }\n  if (iteratee) {\n    seen = arrayMap(array, baseUnary(iteratee));\n  }\n  while (++index < length) {\n    var fromIndex = 0,\n        value = values[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n      if (seen !== array) {\n        splice.call(seen, fromIndex, 1);\n      }\n      splice.call(array, fromIndex, 1);\n    }\n  }\n  return array;\n}\n\nmodule.exports = basePullAll;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nmodule.exports = last;\n","/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.19';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      if (iteratees.length) {\n        iteratees = arrayMap(iteratees, function(iteratee) {\n          if (isArray(iteratee)) {\n            return function(value) {\n              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n            }\n          }\n          return iteratee;\n        });\n      } else {\n        iteratees = [identity];\n      }\n\n      var index = -1;\n      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n          return object;\n        }\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      var low = 0,\n          high = array == null ? 0 : array.length;\n      if (high === 0) {\n        return 0;\n      }\n\n      value = iteratee(value);\n      var valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     *\n     * // Combining several predicates using `_.overEvery` or `_.overSome`.\n     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n     * // => objects for ['fred', 'barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 30 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\n      // and escape the comment, thus injecting code that gets evaled.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/\\s/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     *\n     * // Checking for several possible values\n     * _.filter(users, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     *\n     * // Checking for several possible values\n     * _.filter(users, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     *\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return _;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n","var baseRest = require('./_baseRest'),\n    pullAll = require('./pullAll');\n\n/**\n * Removes all given values from `array` using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n * to remove elements from an array by predicate.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {...*} [values] The values to remove.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n *\n * _.pull(array, 'a', 'c');\n * console.log(array);\n * // => ['b', 'b']\n */\nvar pull = baseRest(pullAll);\n\nmodule.exports = pull;\n","var basePullAll = require('./_basePullAll');\n\n/**\n * This method is like `_.pull` except that it accepts an array of values to remove.\n *\n * **Note:** Unlike `_.difference`, this method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n *\n * _.pullAll(array, ['a', 'c']);\n * console.log(array);\n * // => ['b', 'b']\n */\nfunction pullAll(array, values) {\n  return (array && array.length && values && values.length)\n    ? basePullAll(array, values)\n    : array;\n}\n\nmodule.exports = pullAll;\n","import { TemporaryObjectEntity } from \"./entities\";\nimport { Mutable, assertFalse, assert } from \"../util/util\";\nimport { CompleteObjectType } from \"./types\";\nimport { TemporaryObject } from \"./objects\";\nimport { TranslationUnitContext, ASTNode, BasicCPPConstruct, TemporaryDeallocator, SuccessfullyCompiled, CompiledTemporaryDeallocator, RuntimeConstruct, RuntimeTemporaryDeallocator, StackType, CPPConstruct } from \"./constructs\";\n\nexport abstract class PotentialFullExpression<ContextType extends TranslationUnitContext = TranslationUnitContext, ASTType extends ASTNode = ASTNode> extends BasicCPPConstruct<ContextType, ASTType> {\n    public readonly temporaryObjects: TemporaryObjectEntity[] = [];\n    public readonly temporaryDeallocator?: TemporaryDeallocator;\n    public onAttach(parent: CPPConstruct) {\n        (<Mutable<this>>this).parent = parent;\n        // This may no longer be a full expression. If so, move temporary entities to\n        // their new full expression.\n        if (!this.isFullExpression()) {\n            let fe = this.findFullExpression();\n            this.temporaryObjects.forEach((tempEnt) => {\n                fe.addTemporaryObject(tempEnt);\n            });\n            this.temporaryObjects.length = 0; // clear array\n        }\n        // Now that we are attached, the assumption is no more temporary entities\n        // will be added to this construct or its attached children. (There's an\n        // assert in addTemporaryObject() to prevent this.) That means it is now\n        // safe to compile and add the temporary deallocator construct as a child.\n        if (this.temporaryObjects.length > 0) {\n            (<TemporaryDeallocator>this.temporaryDeallocator) = new TemporaryDeallocator(this.context, this.temporaryObjects);\n            this.attach(this.temporaryDeallocator!);\n        }\n    }\n    public isFullExpression(): boolean {\n        return !this.parent || !(this.parent instanceof PotentialFullExpression);\n    }\n    // TODO: this function can probably be cleaned up so that it doesn't require these ugly runtime checks\n    /**\n     * Returns the nearest full expression containing this expression (possibly itself).\n     * @param inst\n     */\n    public findFullExpression(): PotentialFullExpression {\n        if (this.isFullExpression()) {\n            return this;\n        }\n        if (!this.parent || !(this.parent instanceof PotentialFullExpression)) {\n            return assertFalse(\"failed to find full expression for \" + this);\n        }\n        return this.parent.findFullExpression();\n    }\n    private addTemporaryObject(tempObjEnt: TemporaryObjectEntity) {\n        assert(!this.parent, \"Temporary objects may not be added to a full expression after it has been attached.\");\n        this.temporaryObjects.push(tempObjEnt);\n        tempObjEnt.setOwner(this);\n    }\n    public createTemporaryObject<T extends CompleteObjectType>(type: T, name: string): TemporaryObjectEntity<T> {\n        let fe = this.findFullExpression();\n        var tempObjEnt = new TemporaryObjectEntity(type, this, fe, name);\n        this.temporaryObjects[tempObjEnt.entityId] = tempObjEnt;\n        return tempObjEnt;\n    }\n}\n\nexport interface CompiledPotentialFullExpression extends PotentialFullExpression, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator;\n}\n\nexport abstract class RuntimePotentialFullExpression<C extends CompiledPotentialFullExpression = CompiledPotentialFullExpression> extends RuntimeConstruct<C> {\n    public readonly temporaryDeallocator?: RuntimeTemporaryDeallocator;\n\n    public readonly temporaryObjects: {\n        [index: number]: TemporaryObject | undefined;\n    } = {};\n\n    public readonly containingFullExpression: RuntimePotentialFullExpression;\n\n    public constructor(model: C, stackType: StackType, parent: RuntimeConstruct) {\n        super(model, stackType, parent);\n        if (this.model.temporaryDeallocator) {\n            this.temporaryDeallocator = this.model.temporaryDeallocator.createRuntimeConstruct(this);\n            this.setCleanupConstruct(this.temporaryDeallocator);\n        }\n        this.containingFullExpression = this.findFullExpression();\n    }\n    \n    private findFullExpression(): RuntimePotentialFullExpression {\n        let rt: RuntimeConstruct = this;\n        while (rt instanceof RuntimePotentialFullExpression && !rt.model.isFullExpression() && rt.parent) {\n            rt = rt.parent;\n        }\n        if (rt instanceof RuntimePotentialFullExpression) {\n            return rt;\n        }\n        else {\n            return assertFalse();\n        }\n    }\n}\n","\nimport { parse as cpp_parse } from \"../parse/cpp_parser\";\nimport { NoteKind, SyntaxNote, CPPError, NoteRecorder, Note } from \"./errors\";\nimport { Mutable, asMutable, assertFalse, assert } from \"../util/util\";\nimport { GlobalVariableDefinition, LinkedDefinition, FunctionDefinition, CompiledFunctionDefinition, CompiledGlobalVariableDefinition, DeclarationASTNode, FunctionDeclaration, TypeSpecifier, StorageSpecifier, Declarator, FunctionDefinitionGroup, ClassDefinition, TopLevelDeclarationASTNode, TopLevelDeclaration, createTopLevelDeclarationFromAST, SimpleDeclaration, ClassDefinitionASTNode, SimpleDeclarationASTNode, NonMemberSimpleDeclarationASTNode, DeclaratorASTNode } from \"./declarations\";\nimport { NamespaceScope, GlobalObjectEntity, selectOverloadedDefinition, FunctionEntity, ClassEntity } from \"./entities\";\nimport { Observable } from \"../util/observe\";\nimport { TranslationUnitContext, CPPConstruct, createTranslationUnitContext, ProgramContext, GlobalObjectAllocator, CompiledGlobalObjectAllocator, ASTNode, createLibraryContext } from \"./constructs\";\nimport { FunctionCall } from \"./functionCall\";\nimport { StringLiteralExpression } from \"./expressions\";\nimport { FunctionType, Int, VoidType, CompleteClassType, Double } from \"./types\";\nimport { startCase } from \"lodash\";\nimport { registerOpaqueExpression, RuntimeOpaqueExpression } from \"./opaqueExpression\";\nimport { getDataPtr } from \"../lib/string\";\nimport { Value } from \"./runtimeEnvironment\";\n\n\n\n/**\n *\n * The program also needs to know about all source files involved so that #include preprocessor\n * directives can be processed.\n *\n */\nexport class Program {\n\n    // public readonly observable = new Observable(this);\n\n    public readonly context: ProgramContext = { program: this };\n\n    public readonly isCompilationUpToDate: boolean = true;\n\n    public readonly sourceFiles: { [index: string]: SourceFile } = Object.assign({}, LIBRARY_FILES);\n    public readonly translationUnits: { [index: string]: TranslationUnit } = {};\n\n    public readonly globalObjects: readonly GlobalVariableDefinition[] = [];\n    public readonly globalObjectAllocator!: GlobalObjectAllocator;\n\n    private readonly functionCalls: readonly FunctionCall[] = [];\n\n    public readonly linkedObjectDefinitions: { [index: string]: GlobalVariableDefinition | undefined } = {};\n    public readonly linkedFunctionDefinitions: { [index: string]: FunctionDefinitionGroup | undefined } = {};\n    public readonly linkedClassDefinitions: { [index: string]: ClassDefinition | undefined } = {};\n\n    public readonly linkedObjectEntities: readonly GlobalObjectEntity[] = [];\n    public readonly linkedFunctionEntities: readonly FunctionEntity[] = [];\n    public readonly linkedClassEntities: readonly ClassEntity[] = [];\n\n    public readonly notes = new NoteRecorder();\n\n    public readonly mainFunction?: FunctionDefinition;\n\n\n    public constructor(sourceFiles: readonly SourceFile[], translationUnits: Set<string>) {\n\n        sourceFiles.forEach(file => {\n            this.sourceFiles[file.name] = file;\n        });\n\n        translationUnits.forEach((tuName) => {\n            assert(!!this.sourceFiles[tuName], `Source file ${tuName} not found.`);\n\n            let tu = this.translationUnits[tuName] = new TranslationUnit(this,\n                new PreprocessedSource(this.sourceFiles[tuName], this.sourceFiles));\n        });\n\n        if (!this.notes.hasSyntaxErrors) {\n            this.link();\n        }\n\n        (<Mutable<this>>this).isCompilationUpToDate = true;\n    }\n\n    // addSourceFile : function(sourceFile) {\n    //     assert(!this.i_sourceFiles[sourceFile.getName()]);\n    //     this.i_sourceFiles[sourceFile.getName()] = sourceFile;\n    //     this.listenTo(sourceFile);\n    //     this.send(\"sourceFileAdded\", sourceFile);\n    // },\n\n    // removeSourceFile : function(sourceFile) {\n    //     if (typeof sourceFile !== \"string\"){\n    //         sourceFile = sourceFile.getName();\n    //     }\n    //     if(this.i_sourceFiles[sourceFile]){\n    //         delete this.i_sourceFiles[sourceFile];\n    //     }\n\n    //     this.stopListeningTo(sourceFile);\n\n    //     // Also remove any associated translation unit (if it exists)\n    //     this.removeTranslationUnit(sourceFile);\n    //     this.send(\"sourceFileRemoved\", sourceFile);\n    // },\n\n    // getSourceFile : function(name) {\n    //     return this.i_sourceFiles[name];\n    // },\n\n    // getSourceFiles : function() {\n    //     return this.i_sourceFiles;\n    // },\n\n    // createTranslationUnitForSourceFile : function(sourceFileName) {\n    //     if (typeof sourceFileName !== \"string\") {\n    //         sourceFileName = sourceFileName.getName();\n    //     }\n    //     assert(this.i_sourceFiles[sourceFileName]);\n    //     assert(!this.i_translationUnits[sourceFileName]);\n\n    //     var tu = TranslationUnit.instance(this, this.i_sourceFiles[sourceFileName]);\n    //     this.i_translationUnits[tu.getName()] = tu;\n\n    //     this.i_setCompilationUpToDate(false);\n\n    //     this.send(\"translationUnitCreated\", tu);\n    //     return tu;\n    // },\n\n    // removeTranslationUnit : function(translationUnit) {\n    //     if (typeof translationUnit !== \"string\"){\n    //         translationUnit = translationUnit.getName();\n    //     }\n    //     if(this.i_translationUnits[translationUnit]){\n    //         delete this.i_translationUnits[translationUnit];\n    //     }\n\n    //     this.i_setCompilationUpToDate(false);\n\n    //     this.send(\"translationUnitRemoved\", translationUnit);\n    // },\n\n    // getTranslationUnit : function(name) {\n    //     return this.i_translationUnits[name];\n    // },\n\n    // getTranslationUnits : function() {\n    //     return this.i_translationUnits;\n    // },\n\n    // addStaticEntity : function(ent){\n    //     this.staticEntities.push(ent);\n    // },\n\n    private link() {\n        // this.send(\"linkingStarted\");\n\n        this.defineIntrinsics();\n\n        // Provide definitions to each linked entity based on qualified name.\n        // Note that the definition provided might not match at all or might\n        // be undefined if there was no match for the qualified name. The entities\n        // will take care of adding the appropriate linker errors in these cases.\n        this.linkedObjectEntities.forEach(le =>\n            le.definition ?? le.link(this.linkedObjectDefinitions[le.qualifiedName])\n        );\n        this.linkedFunctionEntities.forEach(le =>\n            le.definition ?? le.link(this.linkedFunctionDefinitions[le.qualifiedName])\n        );\n        this.linkedClassEntities.forEach(le =>\n            le.definition ?? le.link(this.linkedClassDefinitions[le.qualifiedName])\n        );\n\n        let mainLookup = this.linkedFunctionDefinitions[\"::main\"];\n        if (mainLookup) {\n            if (mainLookup.definitions.length === 1) {\n                (<Mutable<this>>this).mainFunction = mainLookup.definitions[0];\n            }\n            else {\n                mainLookup.definitions.forEach(mainDef => this.addNote(CPPError.link.main_multiple_def(mainDef.declaration)));\n            }\n        }\n\n        (<Mutable<this>>this).globalObjectAllocator = new GlobalObjectAllocator(this.context, this.globalObjects);\n\n    }\n\n    private defineIntrinsics() {\n\n        // let intrinsicsTU = new TranslationUnit(this, new PreprocessedSource(new SourceFile(\"_intrinsics.cpp\", \"\"), {}));\n\n        // let assertDecl = <FunctionDeclaration>createDeclarationFromAST(cpp_parse(\"void assert(bool);\", {startRule: \"declaration\"}), intrinsicsTU.context)[0];\n        // let functionContext = createFunctionContext(intrinsicsTU.context, assertDecl.declaredEntity);\n        // let assertDef = new FunctionDefinition(this.context, assertDecl, \n        //     )\n\n    }\n\n    public registerGlobalObjectEntity(entity: GlobalObjectEntity) {\n        asMutable(this.linkedObjectEntities).push(entity);\n    }\n\n    public registerFunctionEntity(entity: FunctionEntity) {\n        asMutable(this.linkedFunctionEntities).push(entity);\n    }\n\n    public registerClassEntity(entity: ClassEntity) {\n        asMutable(this.linkedClassEntities).push(entity);\n    }\n\n    public registerGlobalObjectDefinition(qualifiedName: string, def: GlobalVariableDefinition) {\n        if (!this.linkedObjectDefinitions[qualifiedName]) {\n            this.linkedObjectDefinitions[qualifiedName] = def;\n            asMutable(this.globalObjects).push(def);\n        }\n        else {\n            // One definition rule violation\n            this.addNote(CPPError.link.multiple_def(def, qualifiedName));\n        }\n    }\n\n    public registerFunctionDefinition(qualifiedName: string, def: FunctionDefinition) {\n        let prevDef = this.linkedFunctionDefinitions[qualifiedName];\n        if (!prevDef) {\n            this.linkedFunctionDefinitions[qualifiedName] = new FunctionDefinitionGroup([def]);\n        }\n        else {\n            // Already some definitions for functions with this same name. Check if there's\n            // a conflicting overload that violates ODR\n            let conflictingDef = selectOverloadedDefinition(prevDef.definitions, def.declaration.type);\n            if (conflictingDef) {\n                this.addNote(CPPError.link.multiple_def(def, qualifiedName));\n            }\n            else {\n                prevDef.addDefinition(def);\n            }\n        }\n    }\n\n    /**\n     * TODO: reword this more nicely. registers definition. if there was already one, returns that.\n     * this is important since the code attempting to register the duplicate defintion can instead\n     * use the existing one, to avoid multiple instances of identical definitions. If there was a\n     * conflict, returns the newly added definition.\n     * @param qualifiedName \n     * @param def \n     */\n    public registerClassDefinition(qualifiedName: string, def: ClassDefinition) {\n        let prevDef = this.linkedClassDefinitions[qualifiedName];\n        if (!prevDef) {\n            return this.linkedClassDefinitions[qualifiedName] = def;\n        }\n        else {\n            // Multiple definitions. If they are from the same translation unit, this is always\n            // prohibited, but the error will be generated by the scope in that translation unit,\n            // so we do not need to handle it here. However, multiple definitions in different\n            // translation units are only allowed if the definitions consist of exactly the same tokens.\n\n            // Literally same definition object - ok\n            if (def === prevDef) {\n                return prevDef;\n            }\n\n            // Same tokens - ok\n            let prevDefText = prevDef.ast?.source.text;\n            let defText = def.ast?.source.text;\n            if (prevDefText && defText && prevDefText.replace(/\\s/g, '') === defText.replace(/\\s/g, '')) {\n                return prevDef;\n            }\n\n            def.addNote(CPPError.link.class_same_tokens(def, prevDef));\n            return def;\n        }\n    }\n\n    public hasSyntaxErrors() {\n        return this.notes.hasSyntaxErrors;\n    }\n\n    public hasErrors() {\n        return this.notes.hasErrors;\n    }\n\n    public isCompiled() : this is CompiledProgram {\n        return !this.notes.hasErrors;\n    }\n\n    public isRunnable() : this is RunnableProgram {\n        return this.isCompiled() && !!this.mainFunction;\n    }\n\n    public addNote(note: Note) {\n        this.notes.addNote(note);\n    }\n\n    // //TODO: Program itself should just register all the function calls in its translation units.\n    // //      However, don't spend time on this until figuring out where the list of function calls\n    // //      is used. I think it was used as part of linking to ensure all function calls are defined,\n    // //      but when linking is more properly implemented, I really need to check that everything with\n    // //      linkage (that is odr-used) actually has a definition.\n    // registerFunctionCall : function(call) {\n    //     this.i_functionCalls.push(call);\n    // },\n\n    // _act : {\n    //     textChanged : function(msg) {\n    //         if (this.i_includedSourceFiles[msg.source.getName()]) {\n    //             this.i_setCompilationUpToDate(false);\n    //         }\n    //     }\n    // }\n};\n\nexport interface CompiledProgram extends Program {\n    readonly mainFunction?: CompiledFunctionDefinition;\n    readonly globalObjects: readonly CompiledGlobalVariableDefinition[];\n    readonly globalObjectAllocator: CompiledGlobalObjectAllocator;\n}\n\nexport interface RunnableProgram extends CompiledProgram {\n    readonly mainFunction: CompiledFunctionDefinition<FunctionType<Int>>;\n}\n\n/**\n * A simple, immutable object that contains a filename and its text contents.\n * Because it is immutable, don't grab a reference to someone's source file\n * and expect it to update - changes to a file's context require a completely new object.\n */\nexport class SourceFile {\n\n    public readonly name: string;\n    public readonly text: string;\n    public readonly isLibrary: boolean;\n\n    public constructor(name: string, text: string, isLibrary: boolean = false) {\n        this.name = name;\n        this.text = text;\n        this.isLibrary = isLibrary;\n    }\n\n    // setText : function(text) {\n    //     this.i_text = text;\n    //     this.send(\"textChanged\");\n    // },\n\n}\n\ninterface SourceReferenceInclude {\n    sourceFile: SourceFile;\n    lineIncluded: number;\n}\n\nexport class SourceReference {\n\n    /**\n     * Creates a wrapper to represent a reference to source code that has been included in another file.\n     */\n    public static createIncluded(sourceFile: SourceFile, lineIncluded: number, originalReference: SourceReference) {\n        var obj = new SourceReference(originalReference.sourceFile, originalReference.line, originalReference.column,\n            originalReference.start, originalReference.end);\n        obj._includes.push({\n            sourceFile: sourceFile,\n            lineIncluded: lineIncluded\n        });\n        originalReference.includes.forEach((inc) => obj._includes.push(inc));\n        return obj;\n    }\n\n    public readonly sourceFile: SourceFile;\n    public readonly line: number;\n    public readonly column: number;\n    public readonly start: number;\n    public readonly end: number;\n\n    private readonly _includes: SourceReferenceInclude[] = [];\n    public readonly includes: readonly SourceReferenceInclude[] = this._includes;\n\n    public constructor(sourceFile: SourceFile, line: number, column: number, start: number, end: number) {\n        this.sourceFile = sourceFile;\n        this.line = line;\n        this.column = column;\n        this.start = start;\n        this.end = end;\n    }\n\n    get isIncluded() {\n        return this.includes.length > 0;\n    }\n\n    // getIncludePrelude : function() {\n    //     var str = \"\";\n    //     var prevInclude = this.sourceFile;\n    //     this.i_includes.forEach(function(include) {\n    //         str += \"In file \\\"\" + include.sourceFile.getName() + \"\\\" included from \" + prevInclude.getName() + \"\\\"\"\n    //\n    //     });\n    // }\n\n}\n\ninterface IncludeMapping {\n    readonly startLine: number;\n    readonly startOffset: number;\n    readonly numLines: number;\n    readonly endLine: number;\n    readonly lineDelta: number;\n    readonly lengthDelta: number;\n    readonly included: PreprocessedSource;\n    readonly lineIncluded: number;\n}\n\nclass PreprocessedSource {\n\n    public readonly primarySourceFile: SourceFile;\n    public readonly name: string;\n    public readonly availableToInclude: { [index: string]: SourceFile | undefined };\n\n    public readonly notes = new NoteRecorder();\n\n    private readonly _includes: IncludeMapping[] = [];\n    public readonly includes: readonly IncludeMapping[] = this._includes;\n\n    public readonly includedSourceFiles: { [index: string]: SourceFile } = {};\n\n    public readonly preprocessedText: string;\n    public readonly numLines: number;\n    public readonly length: number;\n\n    public constructor(sourceFile: SourceFile, availableToInclude: { [index: string]: SourceFile | undefined }, alreadyIncluded: { [index: string]: boolean } = {}) {\n        this.primarySourceFile = sourceFile;\n        this.name = sourceFile.name;\n        this.availableToInclude = availableToInclude;\n\n        alreadyIncluded[this.primarySourceFile.name] = true;\n\n        let codeStr = sourceFile.text;\n\n        codeStr = this.filterSourceCode(codeStr);\n\n        let currentIncludeOffset = 0;\n        let currentIncludeLineNumber = 1;\n        let originalIncludeLineNumber = 1;\n\n        this.includedSourceFiles[this.primarySourceFile.name] = this.primarySourceFile;\n\n        // Find and replace #include lines. Will also populate i_includes array.\n        // [^\\S\\n] is a character class for all whitespace other than newlines\n        this.preprocessedText = codeStr.replace(/#include[^\\S\\n]+[\"<](.*)[\">]/g,\n            (includeLine, filename, offset, original) => {\n\n                let mapping: Mutable<Partial<IncludeMapping>> = {};\n\n                // Find the line number of this include by adding up the number of newline characters\n                // since the offset of the last match up to the current one. Add this to the line number.\n                for (let i = currentIncludeOffset; i < offset; ++i) {\n                    if (original[i] === \"\\n\") {\n                        ++currentIncludeLineNumber;\n                        ++originalIncludeLineNumber;\n                    }\n                }\n\n                mapping.startLine = currentIncludeLineNumber;\n                mapping.startOffset = offset;\n\n                currentIncludeOffset = offset + includeLine.length;\n\n                // TODO: I think this is not needed because the filename was a part of the original match\n                //       and is thus passed in to the function used for replacement.\n                // // extract the filename from the #include line match\n                // // [1] yields only the match for the part of the regex in parentheses\n                // var filename = includeLine.match(/\"(.*)\"/)[1];\n\n                // check for self inclusion\n                if (alreadyIncluded[filename]) {\n                    this.notes.addNote(CPPError.preprocess.recursiveInclude(\n                        new SourceReference(sourceFile, currentIncludeLineNumber, 0, offset, currentIncludeOffset)));\n\n                    // replace the whole #include line with spaces. Can't just remove or it messes up offsets.\n                    return Array(includeLine.length + 1).join(\" \");\n                }\n\n                // Recursively preprocess the included file\n                let includedSourceFile = this.availableToInclude[filename];\n                //TODO: what happens if the file doesn't exist?\n                if (!includedSourceFile) {\n                    this.notes.addNote(CPPError.preprocess.fileNotFound(\n                        new SourceReference(sourceFile, currentIncludeLineNumber, 0, offset, currentIncludeOffset), filename));\n\n                    // replace the whole #include line with spaces. Can't just remove or it messes up offsets.\n                    return Array(includeLine.length + 1).join(\" \");\n                }\n\n                let included = new PreprocessedSource(includedSourceFile, this.availableToInclude,\n                    Object.assign({}, alreadyIncluded));\n\n                Object.assign(this.includedSourceFiles, included.includedSourceFiles);\n                this.notes.addNotes(included.notes.allNotes);\n\n                mapping.numLines = included.numLines;\n                mapping.endLine = mapping.startLine + included.numLines;\n\n                mapping.lineDelta = included.numLines - 1;\n                mapping.lengthDelta = included.length - includeLine.length;\n                currentIncludeLineNumber += included.numLines - 1; // -1 since one line from original was replaced\n                mapping.included = included;\n                mapping.lineIncluded = originalIncludeLineNumber;\n\n                this._includes.push(<IncludeMapping>mapping); // TODO: remove cast\n\n                return included.preprocessedText;\n            }\n        );\n\n        // Count lines for the rest of the file after any #includes\n        for (var i = currentIncludeOffset; i < codeStr.length; ++i) {\n            if (codeStr[i] === \"\\n\") {\n                ++currentIncludeLineNumber;\n            }\n        }\n\n        this.numLines = currentIncludeLineNumber;\n        this.length = this.preprocessedText.length;\n    }\n\n    private filterSourceCode(codeStr: string) {\n\n        // remove carriage returns\n        codeStr = codeStr.replace(/\\r/g, \"\");\n\n        if (codeStr.includes(\"#ifndef\")) {\n            codeStr = codeStr.replace(/#ifndef.*/g, function (match) {\n                return Array(match.length + 1).join(\" \");\n            });\n            // this.send(\"otherError\", \"It looks like you're trying to use a preprocessor directive (e.g. <span class='code'>#define</span>) that isn't supported at the moement.\");\n        }\n        if (codeStr.includes(\"#define\")) {\n            codeStr = codeStr.replace(/#define.*/g, function (match) {\n                return Array(match.length + 1).join(\" \");\n            });\n            // this.send(\"otherError\", \"It looks like you're trying to use a preprocessor directive (e.g. <span class='code'>#define</span>) that isn't supported at the moement.\");\n        }\n        if (codeStr.includes(\"#endif\")) {\n            codeStr = codeStr.replace(/#endif.*/g, function (match) {\n                return Array(match.length + 1).join(\" \");\n            });\n            // this.send(\"otherError\", \"It looks like you're trying to use a preprocessor directive (e.g. <span class='code'>#define</span>) that isn't supported at the moement.\");\n        }\n        // if (codeStr.contains(/#include.*<.*>/g)){\n        // codeStr = codeStr.replace(/#include.*<.*>/g, function (match) {\n        //     return Array(match.length + 1).join(\" \");\n        // });\n        // this.send(\"otherError\", \"It looks like you're trying to use a preprocessor directive (e.g. <span class='code'>#define</span>) that isn't supported at the moement.\");\n        // }\n        if (codeStr.includes(\"using namespace\")) {\n            codeStr = codeStr.replace(/using namespace.*/g, function (match) {\n                return Array(match.length + 1).join(\" \");\n            });\n            // TODO NEW why is this commented?\n            // this.send(\"otherError\", \"When writing code in lobster, you don't need to include using directives (e.g. <span class='code'>using namespace std;</span>).\");\n        }\n        if (codeStr.includes(\"using std::\")) {\n            codeStr = codeStr.replace(/using std::.*/g, function (match) {\n                return Array(match.length + 1).join(\" \");\n            });\n            // this.send(\"otherError\", \"Lobster doesn't support using declarations at the moment.\");\n        }\n        return codeStr;\n    }\n\n    public getSourceReference(line: number, column: number, start: number, end: number): SourceReference {\n\n        // Iterate through all includes and check if any would contain\n        let offset = 0;\n        let lineOffset = 1;\n        for (let i = 0; i < this.includes.length; ++i) {\n            let inc = this.includes[i];\n            if (line < inc.startLine) {\n                return new SourceReference(this.primarySourceFile, line - lineOffset + 1, column, start && start - offset, end && end - offset);\n            }\n            else if (inc.startLine <= line && line < inc.endLine) {\n                return SourceReference.createIncluded(this.primarySourceFile, inc.lineIncluded,\n                    inc.included.getSourceReference(line - inc.startLine + 1, column, start && start - inc.startOffset, end && end - inc.startOffset));\n            }\n            offset += inc.lengthDelta;\n            lineOffset += inc.lineDelta;\n        }\n\n        // If this line wasn't part of any of the includes, just return a regular source reference to the original\n        // source file associated with this translation unit\n        return new SourceReference(this.primarySourceFile, line - lineOffset + 1, column, start && start - offset, end && end - offset);\n    }\n\n}\n\n\nexport interface TranslationUnitAST {\n    readonly construct_type: \"translation_unit\";\n    readonly declarations: readonly TopLevelDeclarationASTNode[];\n}\n\n/**\n * TranslationUnit\n *\n * Events:\n *   \"parsed\": after parsing is finished *successfully*\n *   \"syntaxError\": if a syntax error is encountered during parsing. data contains properties line, column, and message\n *   \"compilationFinished\": after compilation is finished\n */\nexport class TranslationUnit {\n\n    public readonly context: TranslationUnitContext;\n\n    // public readonly observable = new Observable(this);\n    public readonly notes = new NoteRecorder();\n\n    public readonly name: string;\n    public readonly source: PreprocessedSource;\n    public readonly program: Program;\n\n    public readonly globalScope: NamespaceScope;\n\n    public readonly topLevelDeclarations: readonly TopLevelDeclaration[] = [];\n    public readonly staticEntities: readonly GlobalObjectEntity[] = [];\n    public readonly stringLiterals: readonly StringLiteralExpression[] = [];\n    public readonly functionCalls: readonly FunctionCall[] = [];\n\n    public readonly parsedAST?: TranslationUnitAST;\n\n    /**\n     * Attempts to compiled the given primary source file as a translation unit for a C++ program.\n     * The compilation is attempted given the **current** state of the source files. If the primary\n     * source or any of the files included via the preprocessor are changed in any way, a new `TranslationUnit`\n     * should be constructed (it is not possible to \"re-compile\" a TranslationUnit object.)\n     * @param primarySourceFile Contains the source code for this translation unit.\n     * @param sourceFiles The set of files to be available for inclusion via #include directives.\n     */\n    public constructor(program: Program, preprocessedSource: PreprocessedSource) {\n        this.program = program;\n        this.source = preprocessedSource;\n        preprocessedSource.notes.allNotes.forEach(note => this.addNote(note)); // Don't use this.notes.addNotes here since that would miss adding them to the program as well\n        this.globalScope = new NamespaceScope(this, preprocessedSource.primarySourceFile.name + \"_GLOBAL_SCOPE\");\n        this.name = preprocessedSource.name;\n        this.context = createTranslationUnitContext(program.context, this, this.globalScope);\n\n        try {\n            // This is kind of a hack to communicate with the PEG.js generated parsing code.\n            // This both \"resets\" the user-defined type names that exist for each translation\n            // unit (e.g. so that Class names declared in another translation unit aren't hanging\n            // around), and also ensures \"default\" user-defined type names like ostream, etc. are\n            // recognized as such. Making a copy is important so that we don't modify the original\n            // which will potentially be used by other translation units.\n            // resetUserTypeNames(); //Object.assign({}, Types.defaultUserTypeNames); // TODO\n\n            let libAST = cpp_parse(LIBRARY_FILES[\"_lobster_implicit\"].text);\n            this.compileTopLevelDeclarations(libAST);\n\n            // Note this is not checked by the TS type system. We just have to manually ensure\n            // the structure produced by the grammar/parser matches what we expect.\n            let parsedAST: TranslationUnitAST = cpp_parse(this.source.preprocessedText);\n            this.parsedAST = parsedAST;\n\n            this.createBuiltInGlobals();\n            this.compileTopLevelDeclarations(this.parsedAST);\n        }\n        catch (err) {\n            if (err.name == \"SyntaxError\") {\n                this.addNote(new SyntaxNote(\n                    this.getSourceReference(err.location.start.line, err.location.start.column,\n                        err.location.start.offset, err.location.start.offset + 1),\n                    NoteKind.ERROR,\n                    \"syntax\",\n                    \"A syntax error was detected on this line. If there doesn't appear to be an issue here, the error might have occurred on a previous line that caused the compiler to get off track.\"));\n            }\n            else {\n                console.log(err.stack);\n                throw err;\n            }\n        }\n    }\n\n    // TODO: figure out where this stuff should really go between here and the program creating\n    // compiler intrinsics. Something will need to be done at the TranslationUnit level to ensure\n    // the appropriate names are declared and in the right scopes, but that might just be a matter\n    // of having library #includes actually implemented in a reasonable way.\n    private createBuiltInGlobals() {\n        // if (Types.userTypeNames[\"ostream\"]) {\n        //     this.i_globalScope.addEntity(StaticEntity.instance({name:\"cout\", type:Types.OStream.instance()}));\n        //     this.i_globalScope.addEntity(StaticEntity.instance({name:\"cin\", type:Types.IStream.instance()}));\n        // }\n\n        // asMutable(this.topLevelDeclarations).push(createTopLevelDeclarationFromAST(\n        //     <ClassDefinitionASTNode>cpp_parse(\"class ostream { };\", {startRule: \"declaration\"}),\n        //     this.context));\n\n        // asMutable(this.topLevelDeclarations).push(createTopLevelDeclarationFromAST(\n        //     <NonMemberSimpleDeclarationASTNode>{\n        //         construct_type: \"simple_declaration\",\n        //         declarators: [<DeclaratorASTNode>cpp_parse(\"cout\", {startRule: \"declarator\"})],\n        //         source: {column: 1, line: 1, end: 1, start: 1, text: \"ostream cout;\"},\n        //         specs: {typeSpecs: [\"ostream\"], classSpecifiers: [], storageSpecs: [], elaboratedTypeSpecifiers: []},\n        //     },\n        //     this.context)[0]);\n\n        // // TODO NEW rework so that endlEntity doesn't have to be public (other parts of code look for it currently)\n        // this.endlEntity = StaticEntity.instance({name:\"endl\", type:Types.Char.instance()});\n        // this.endlEntity.defaultValue = 10; // 10 is ascii code for \\n\n        // this.i_globalScope.addEntity(this.endlEntity);\n\n\n        // var cassert = MagicFunctionEntity.instance(MagicFunctionDefinition.instance(\n        //     \"assert\",\n        //     Types.Function.instance(Types.Void.instance(), [Types.Bool.instance()])\n        // ));\n        // this.i_globalScope.addEntity(cassert);\n\n        // var pause = MagicFunctionEntity.instance(MagicFunctionDefinition.instance(\n        //     \"pause\",\n        //     Types.Function.instance(Types.Void.instance(), [])\n        // ));\n        // this.i_globalScope.addEntity(pause);\n\n\n        // var pauseIf = MagicFunctionEntity.instance(MagicFunctionDefinition.instance(\n        //     \"pauseIf\",\n        //     Types.Function.instance(Types.Void.instance(), [Types.Bool.instance()])\n        // ));\n        // this.i_globalScope.addEntity(pauseIf);\n\n\n        // this.i_globalScope.addEntity(MagicFunctionEntity.instance(\n        //     MagicFunctionDefinition.instance(\"rand\",\n        //         Types.Function.instance(Types.Int.instance(), []))));\n\n    }\n\n    private compileTopLevelDeclarations(ast: TranslationUnitAST) {\n        ast.declarations.forEach((declAST) => {\n            let sourceRef = this.getSourceReferenceForAST(declAST);\n            let topLevelContext = sourceRef.sourceFile.isLibrary\n                ? createLibraryContext(this.context) : this.context;\n            \n            let declsOrFuncDef = createTopLevelDeclarationFromAST(declAST, topLevelContext);\n            if (Array.isArray(declsOrFuncDef)) {\n                declsOrFuncDef.forEach(decl => {\n                    asMutable(this.topLevelDeclarations).push(decl);\n                });\n            }\n            else {\n                asMutable(this.topLevelDeclarations).push(declsOrFuncDef);\n            }\n        });\n    }\n\n    public registerStringLiteral(literal: StringLiteralExpression) {\n        asMutable(this.stringLiterals).push(literal);\n    }\n\n    public registerFunctionCall(call: FunctionCall) {\n        asMutable(this.functionCalls).push(call);\n    }\n\n    public getNearestSourceReferenceForConstruct(construct: CPPConstruct) {\n        while (!construct.ast && construct.parent) {\n            construct = construct.parent;\n        }\n        if (!construct.ast) {\n            return assertFalse(\"Can't find source reference for construct\");\n        }\n        let src = construct.ast.source;\n        return this.getSourceReference(src.line, src.column, src.start, src.end);\n    }\n\n    public getSourceReferenceForAST(ast: ASTNode) {\n        let src = ast.source;\n        return this.getSourceReference(src.line, src.column, src.start, src.end);\n    }\n\n    public getSourceReference(line: number, column: number, start: number, end: number) {\n        return this.source.getSourceReference(line, column, start, end);\n    }\n\n    public addNote(note: Note) {\n        this.notes.addNote(note);\n        this.program.addNote(note);\n    }\n}\n\n\n\nconst LIBRARY_FILES : {[index:string]: SourceFile} = {\n    _lobster_implicit: new SourceFile(\"_lobster_implicit.h\", `\n        class initializer_list<int> {\n          const int *begin;\n          const int *end;\n\n          initializer_list(const initializer_list<int> &other)\n           : begin(other.begin), end(other.end) {}\n        };\n\n        class initializer_list<double> {\n          const double *begin;\n          const double *end;\n\n          initializer_list(const initializer_list<double> &other)\n           : begin(other.begin), end(other.end) {}\n        };\n\n        class initializer_list<char> {\n          const char *begin;\n          const char *end;\n\n          initializer_list(const initializer_list<char> &other)\n           : begin(other.begin), end(other.end) {}\n        };\n\n        class initializer_list<bool> {\n          const bool *begin;\n          const bool *end;\n\n          initializer_list(const initializer_list<bool> &other)\n           : begin(other.begin), end(other.end) {}\n        };\n        \n    `, true),\n    iostream: new SourceFile(\"iostream.h\", `\n        class ostream {};\n        ostream cout;\n        const char endl = '\\\\n';\n        class istream {};\n        istream cin;\n    `, true)\n}\n\nexport function registerLibraryHeader(name: string, file: SourceFile) {\n    assert(!LIBRARY_FILES[name]);\n    LIBRARY_FILES[name] = file;\n}","import { Observable } from \"../util/observe\";\nimport { RunnableProgram } from \"./Program\";\nimport { Memory, Value } from \"./runtimeEnvironment\";\nimport { RuntimeConstruct, RuntimeGlobalObjectAllocator } from \"./constructs\";\nimport { CPPRandom, Mutable, escapeString, asMutable, assertNever } from \"../util/util\";\nimport { DynamicObject, MainReturnObject } from \"./objects\";\nimport { Int, PointerType, Char, CompleteObjectType, AtomicType, FunctionType, PotentiallyCompleteObjectType, ReferenceType, ReferredType, ArithmeticType, AnalyticArithmeticType, isType } from \"./types\";\nimport { Initializer, RuntimeDirectInitializer } from \"./initializers\";\nimport { PassByReferenceParameterEntity, PassByValueParameterEntity } from \"./entities\";\nimport { CompiledExpression, RuntimeExpression } from \"./expressionBase\";\nimport { RuntimeFunction } from \"./functions\";\nimport { first, clone, trimStart } from \"lodash\";\n\n\nexport enum SimulationEvent {\n    UNDEFINED_BEHAVIOR = \"undefined_behavior\",\n    UNSPECIFIED_BEHAVIOR = \"unspecified_behavior\",\n    IMPLEMENTATION_DEFINED_BEHAVIOR = \"implementation_defined_behavior\",\n    MEMORY_LEAK = \"memory_leak\",\n    ASSERTION_FAILURE = \"assertion_failure\",\n    CRASH = \"crash\",\n}\n\nexport enum SimulationActionKind {\n    STEP_FORWARD,\n    CIN_INPUT\n}\n\nexport interface StepForwardAction {\n    kind: SimulationActionKind.STEP_FORWARD;\n}\n\nexport interface CinInputAction {\n    kind: SimulationActionKind.CIN_INPUT;\n    text: string;\n}\n\nexport type SimulationAction = \n    StepForwardAction |\n    CinInputAction;\n\nexport const STEP_FORWARD_ACTION : StepForwardAction = {\n    kind: SimulationActionKind.STEP_FORWARD\n};\n\nexport enum SimulationOutputKind {\n    COUT,\n    CIN_ECHO\n}\n\nexport interface CoutOutput {\n    kind: SimulationOutputKind.COUT;\n    text: string;\n}\n\nexport interface CinEchoOutput {\n    kind: SimulationOutputKind.CIN_ECHO;\n    text: string;\n}\n\nexport type SimulationOutput = \n    CoutOutput |\n    CinEchoOutput;\n\nexport type SimulationMessages =\n    \"started\" |\n    \"reset\" |\n    \"mainCalled\" |\n    \"pushed\" |\n    \"popped\" |\n    \"beforeUpNext\" |\n    \"afterUpNext\" |\n    \"beforeStepForward\" |\n    \"afterStepForward\" |\n    \"afterFullStep\" |\n    \"atEnded\" |\n    \"parameterPassedByReference\" |\n    \"parameterPassedByAtomicValue\" |\n    \"returnPassed\" |\n    \"istreamBufferUpdated\" | \n    \"cout\" |\n    \"cinInput\" |\n    \"eventOccurred\";\n\n// TODO: add observer stuff\nexport class Simulation {\n\n    public readonly observable = new Observable<SimulationMessages>(this);\n\n    public readonly program: RunnableProgram;\n\n    public readonly memory: Memory;\n\n    private readonly _execStack: RuntimeConstruct[];\n    public readonly execStack: readonly RuntimeConstruct[];\n\n    public readonly random = new CPPRandom();\n\n    public readonly stepsTaken: number;\n    private readonly _actionsTaken: SimulationAction[] = [];\n    public readonly actionsTaken: readonly SimulationAction[] = this._actionsTaken;\n    public readonly allOutput: string;\n    public readonly outputProduced: readonly SimulationOutput[] = [];\n\n    public readonly cin: SimulationInputStream;\n\n    public readonly rng: CPPRandom;\n\n    public readonly isPaused: boolean;\n    public readonly atEnd: boolean;\n    public readonly isBlockingUntilCin: boolean;\n\n    private readonly pendingNews: DynamicObject[];\n    private leakCheckIndex: number;\n\n    // TODO: is this actually set anwhere?\n    private alertsOff = false;\n\n    private readonly _eventsOccurred: {\n        [p in SimulationEvent]: string[];\n    } = {\n            \"undefined_behavior\": [],\n            \"unspecified_behavior\": [],\n            \"implementation_defined_behavior\": [],\n            \"memory_leak\": [],\n            \"assertion_failure\": [],\n            \"crash\": []\n        };\n\n    public readonly eventsOccurred: {\n        [p in SimulationEvent]: readonly string[];\n    } = this._eventsOccurred;\n\n    // MAX_SPEED: -13445, // lol TODO\n\n\n    public readonly mainReturnObject!: MainReturnObject;\n    public readonly mainFunction!: RuntimeFunction<FunctionType<Int>>;\n    public readonly globalAllocator!: RuntimeGlobalObjectAllocator;\n\n    constructor(program: RunnableProgram, cin?: SimulationInputStream) {\n        this.program = program;\n\n        // TODO SimulationRunner this.speed = Simulation.MAX_SPEED;\n\n        // These things need be reset when the simulation is reset\n        this.memory = new Memory();\n        // this.console = ValueEntity.instance(\"console\", \"\");\n\n        this.execStack = this._execStack = [];\n\n        this.pendingNews = [];\n        this.leakCheckIndex = 0;\n\n        this.isPaused = true;\n        this.stepsTaken = 0;\n        this._actionsTaken.length = 0;\n        this.atEnd = false;\n        this.isBlockingUntilCin = false;\n\n        this.allOutput = \"\";\n        asMutable(this.outputProduced).length = 0;\n        this.cin = cin ?? new SimulationInputStream();\n        this.rng = new CPPRandom();\n\n        this.start();\n    }\n\n    public clone(stepsTaken = this.stepsTaken) {\n        let newSim = new Simulation(this.program);\n        this.actionsTaken.slice(0, stepsTaken).forEach(action => newSim.takeAction(action));\n        return newSim;\n    }\n\n    public reset() {\n        this.memory.reset();\n        this._execStack.length = 0;\n\n        this.pendingNews.length = 0;\n        this.leakCheckIndex = 0;\n\n        let _this = <Mutable<this>>this;\n        _this.isPaused = true;\n        _this.stepsTaken = 0;\n        this._actionsTaken.length = 0;\n        _this.atEnd = false;\n        _this.isBlockingUntilCin = false;\n\n        (<Mutable<this>>this).allOutput = \"\";\n        asMutable(this.outputProduced).length = 0;\n        (<Mutable<this>>this).cin.reset();\n        (<Mutable<this>>this).rng = new CPPRandom();\n\n        this.observable.send(\"reset\");\n\n        this.start();\n    }\n\n    private start() {\n        this.allocateStringLiterals();\n\n        // Change static initialization so it is wrapped up in its own construct and\n        // runtime construct pair specifically for that purpose. That construct could\n        // also optionally create and push the main call taking over what is currently\n        // in this.callMain()\n\n        this.callMain();\n        (<Mutable<this>>this).globalAllocator = this.program.globalObjectAllocator.createRuntimeConstruct(this);\n        this.push(this.globalAllocator);\n\n        this.observable.send(\"started\");\n\n        // Needed for whatever is first on the execution stack\n        this.upNext();\n    }\n\n    private callMain() {\n        (<Mutable<this>>this).mainReturnObject = new MainReturnObject(this.memory);\n        (<Mutable<this>>this).mainFunction = new RuntimeFunction(this.program.mainFunction, this, null);\n        this.mainFunction.setReturnObject(this.mainReturnObject);\n        this.mainFunction.pushStackFrame();\n        this.push(this.mainFunction);\n        this.observable.send(\"mainCalled\", this.mainFunction);\n        this.mainFunction.gainControl();\n    }\n\n    public push(rt: RuntimeConstruct) {\n\n        // whatever was previously on top of the stack is now waiting\n        let prevTop = this.top();\n        if (prevTop) {\n            prevTop.wait();\n        }\n\n        this._execStack.push(rt);\n        this.observable.send(\"pushed\", rt);\n        rt.afterPushed();\n    }\n\n    public top() {\n        if (this.execStack.length > 0) {\n            return this.execStack[this.execStack.length - 1];\n        }\n    }\n\n    /**\n     * Removes the top runtime construct from the execution stack.\n     * Does nothing if there's nothing on the execution stack.\n     */\n    public pop() {\n        let popped = this._execStack.pop();\n        if (popped) {\n            popped.afterPopped();\n            //     if (popped.stackType === \"statement\" || popped.stackType === \"function\") {\n            //         this.leakCheck(); // TODO leak checking\n            //     }\n            this.observable.send(\"popped\", popped);\n        }\n        return popped;\n    }\n\n    //TODO: this may be dangerous depending on whether there are cases this could skip temporary deallocators or destructors\n    public popUntil(rt: RuntimeConstruct) {\n        while (this._execStack.length > 0 && this._execStack[this._execStack.length - 1] !== rt) {\n            this.pop();\n        }\n    }\n\n    public topFunction(): RuntimeFunction | undefined {\n        for (let i = this.execStack.length - 1; i >= 0; --i) {\n            let runtimeConstruct = this.execStack[i];\n            if (runtimeConstruct instanceof RuntimeFunction) {\n                return runtimeConstruct;\n            }\n        }\n    }\n\n    private allocateStringLiterals() {\n        let tus = this.program.translationUnits;\n        for (let tuName in tus) {\n            tus[tuName].stringLiterals.forEach((lit) => { this.memory.allocateStringLiteral(lit.str); });\n        };\n    }\n\n    public takeAction(action: SimulationAction) {\n        switch(action.kind) {\n            case SimulationActionKind.STEP_FORWARD:\n                this.stepForward();\n                break;\n            case SimulationActionKind.CIN_INPUT:\n                this.cinInput(action.text);\n                break;\n            default:\n                assertNever(action);\n        }\n    }\n\n    public stepForward() {\n        if (this.isBlockingUntilCin) {\n            return;\n        }\n\n        ++(<Mutable<this>>this).stepsTaken;\n        this._actionsTaken.push({kind: SimulationActionKind.STEP_FORWARD});\n\n        // Top rt construct will do stuff\n        let rt = this.top();\n\n        if (!rt) {\n            return;\n        }\n\n        // Step forward on the rt construct\n        this.observable.send(\"beforeStepForward\", rt);\n        rt.stepForward();\n        this.observable.send(\"afterStepForward\", rt);\n\n        // After each step call upNext. Note that the \"up next\" construct may\n        // be different if rt popped itself off the stack. upNext also checks\n        // to see if the simulation is done.\n        this.upNext();\n\n        this.observable.send(\"afterFullStep\", this.execStack.length > 0 && this.execStack[this.execStack.length - 1]);\n    }\n\n    private upNext() {\n\n        while (true) {\n\n            // Grab the rt construct that is on top of the execution stack and up next\n            let rt = this.top();\n\n            // Check to see if simulation is done\n            if (!rt) {\n                (<Mutable<this>>this).atEnd = true;\n                this.observable.send(\"atEnded\");\n                return;\n            }\n\n\n            // up next on the rt construct\n            this.observable.send(\"beforeUpNext\", { rt: rt });\n            rt.upNext();\n            this.observable.send(\"afterUpNext\", { inst: rt });\n\n            // If the rt construct on top of the execution stack has changed, it needs\n            // to be notified that it is now up next, so we should let the loop go again.\n            // However, if rt is still on top, we presume it is waiting for the next\n            // stepForward (and it hasn't added any children), so we just break the loop.\n            // Note that if the execution stack becomes empty, we do not hit the break (because\n            // we can assume at this point it was not empty previously) and will loop back to\n            // the top where the check for an empty stack is performed.\n            if (rt === this.top()) {\n                break; // Note this will not occur when then \n            }\n        }\n    }\n\n    public stepToEnd() {\n        while (!this.atEnd && !this.isBlockingUntilCin) {\n            this.stepForward();\n        }\n    }\n\n    // stepOver: function(options){\n    //     var target = this.peek(function(inst){\n    //         return isA(inst.model, Initializer) || isA(inst.model, Expressions.FunctionCallExpression) || !isA(inst.model, Expressions.Expression);\n    //     });\n\n    //     if (target) {\n    //         this.autoRun(copyMixin(options, {\n    //             pauseIf: function(){\n    //                 return !target.isActive;\n    //             }\n    //         }));\n    //     }\n    //     else{\n    //         this.stepForward();\n    //         options.after && options.after();\n    //     }\n    // },\n\n    // stepOut: function(options){\n    //     var target = this.i_execStack.last().containingFunction();\n\n    //     if (target) {\n    //         this.autoRun(copyMixin(options, {\n    //             pauseIf: function(){\n    //                 return !target.isActive;\n    //             }\n    //         }));\n    //     }\n    //     else{\n    //         this.stepForward();\n    //         options.after && options.after();\n    //     }\n    // },\n\n\n    // stepBackward : function(n){\n    //     if (n === 0){\n    //         return;\n    //     }\n    //     n = n || 1;\n    // \t$.fx.off = true;\n    // \tOutlets.CPP.CPP_ANIMATIONS = false; // TODO not sure I need this\n    //     this.i_alertsOff = true;\n    //     this.i_explainOff = true;\n    //     $(\"body\").addClass(\"noTransitions\").height(); // .height() is to force reflow\n    //     //RuntimeConstruct.prototype.silent = true;\n    // \tif (this.i_stepsTaken > 0){\n    // \t\tthis.clear();\n    // \t\tvar steps = this.i_stepsTaken-n;\n    // \t\tthis.start();\n    // \t\tfor(var i = 0; i < steps; ++i){\n    //             this.stepForward();\n    // \t\t}\n    // \t}\n    //     //RuntimeConstruct.prototype.silent = false;\n    //     $(\"body\").removeClass(\"noTransitions\").height(); // .height() is to force reflow\n    //     this.i_alertsOff = false;\n    //     this.i_explainOff = false;\n    //     Outlets.CPP.CPP_ANIMATIONS = true;\n    // \t$.fx.off = false;\n\n    // },\n\n\n\n\n    // peek : function(query, returnArray, offset){\n    //     if (this.i_execStack.length === 0){\n    //         return null;\n    //     }\n    // \toffset = offset || 0;\n    // \tif (query){\n    // \t\tvar peekedArr = [];\n    // \t\tvar peeked;\n    // \t\tfor (var i = this.i_execStack.length - 1 - offset; i >= 0; --i){\n    // \t\t\tpeeked = this.i_execStack[i];\n    // \t\t\tpeekedArr.unshift(peeked);\n    //             if (typeof query === \"function\"){\n    //                 if (query(peeked)){\n    //                     break;\n    //                 }\n    //             }\n    //             else{\n    //                 var current = (typeof query == \"string\" ? peeked.stackType : peeked);\n    //                 if (current == query){\n    //                     break;\n    //                 }\n    //             }\n    // \t\t}\n    // \t\treturn (returnArray ? peekedArr : peeked);\n    // \t}\n    // \telse{\n    // \t\treturn this.i_execStack.last();\n    // \t}\n    // },\n\n    // peeks : function(query, returnArray){\n    // \tvar results = [];\n    // \tvar offset = 0;\n    // \twhile (offset < this.i_execStack.length){\n    // \t\tvar p = this.peek(query, true, offset);\n    // \t\toffset += p.length;\n    // \t\tresults.unshift(returnArray ? p : p[0]);\n    // \t}\n    // \treturn results;\n    // },\n\n\n    // clearRunThread: function(){\n    //     if (this.runThread){\n    //         this.runThreadClearedFlag = true;\n    //         clearTimeout(this.runThread);\n    //         this.runThread = null;\n    //     }\n    // },\n\n    // startRunThread: function(func){\n    //     this.runThread = setTimeout(func, 0);\n    // },\n\n    // autoRun : function(options){\n    //     options = options || {};\n\n    //     // Clear old thread\n    //     this.clearRunThread();\n\n    //     this.i_paused = false;\n\n    //     var self = this;\n    //     var func = function(){\n\n    //         // Try to complete this.speed number of steps in 10ms.\n    //         var startTime = Date.now();\n    //         for(var num = 0; self.speed === Simulation.MAX_SPEED || num < self.speed; ++num){\n\n    //             // Did we finish?\n    //             if (self.i_atEnd){\n    //                 self.send(\"finished\");\n    //                 options.onFinish && options.onFinish();\n    //                 options.after && options.after();\n    //                 return; // do not renew timeout\n    //             }\n\n    //             // Did we pause?\n    //             if (self.i_paused || (options.pauseIf && options.pauseIf(self))){\n    //                 self.send(\"paused\");\n    //                 options.onPause && options.onPause();\n    //                 options.after && options.after();\n    //                 return; // do not renew timeout\n    //             }\n\n    //             // Abort if we run out of time\n    //             if (Date.now() - startTime >= (self.speed === Simulation.MAX_SPEED ? 10 : 100) ){\n    //                 break; // will renew timeout\n    //             }\n\n    //             self.stepForward();\n    //         }\n\n    //         // Renew timeout\n    //         if (self.speed === Simulation.MAX_SPEED){\n    //             self.runThread = setTimeout(func, 0);\n    //         }\n    //         else{\n    //             self.runThread = setTimeout(func, Math.max(0,100-(Date.now() - startTime)));\n    //         }\n\n    //     };\n\n    //     // Start timeout\n    //     this.startRunThread(func);\n    // },\n\n    public parameterPassedByReference<T extends ReferenceType<PotentiallyCompleteObjectType>>(target: PassByReferenceParameterEntity<T>, arg: RuntimeExpression<ReferredType<T>, \"lvalue\">) {\n        this.observable.send(\"parameterPassedByReference\", { target: target, arg: arg });\n    }\n\n    public parameterPassedByAtomicValue<T extends AtomicType>(target: PassByValueParameterEntity<T>, arg: RuntimeExpression<T, \"prvalue\">) {\n        this.observable.send(\"parameterPassedByAtomicValue\", { target: target, arg: arg });\n    }\n\n    public returnPassed(rt: RuntimeDirectInitializer) {\n        this.observable.send(\"returnPassed\", rt);\n    }\n\n    public cinInput(text: string) {\n        ++(<Mutable<this>>this).stepsTaken;\n        this._actionsTaken.push({kind: SimulationActionKind.CIN_INPUT, text: text});\n        this.cin.addToBuffer(text);\n        asMutable(this.outputProduced).push({kind: SimulationOutputKind.CIN_ECHO, text: text});\n        (<Mutable<this>>this).isBlockingUntilCin = false;\n        this.observable.send(\"cinInput\", text);\n    }\n\n    public blockUntilCin() {\n        (<Mutable<this>>this).isBlockingUntilCin = true;\n    }\n\n    public cout(value: Value) {\n        // TODO: when ostreams are implemented properly with overloaded <<, move the special case there\n        let text = \"\";\n        if (value.type instanceof PointerType && value.type.ptrTo instanceof Char) {\n            let addr = value.rawValue;\n            let c = this.memory.getByte(addr);\n            while (!Char.isNullChar(new Value(c, Char.CHAR))) {\n                text += value.type.ptrTo.valueToOstreamString(c);\n                c = this.memory.getByte(++addr);\n            }\n        }\n        else {\n            text = escapeString(value.valueToOstreamString());\n        }\n        (<Mutable<this>>this).allOutput += text;\n        asMutable(this.outputProduced).push({kind: SimulationOutputKind.COUT, text: text});\n        this.observable.send(\"cout\", text);\n    }\n\n    public eventOccurred(event: SimulationEvent, message: string, showAlert: boolean = false) {\n        this._eventsOccurred[event].push(message);\n\n        this.observable.send(\"eventOccurred\", { event, message });\n    }\n\n    public hasEventOccurred(event: SimulationEvent) {\n        return this.eventsOccurred[event].length > 0;\n    }\n\n    public printState() {\n        return JSON.stringify({\n            memory: this.memory.printObjects(),\n            execStackIds: this.execStack.map(rt => rt.model.constructId)\n        }, null, 4);\n    }\n\n    // explain : function(exp){\n    //     //alert(exp.ignore);\n    //     if (!this.i_explainOff){\n    //         if (!exp.ignore) {\n    //             this.send(\"explain\", exp.message);\n    //         }\n    //     }\n    // },\n    // closeMessage : function(){\n    //     this.send(\"closeMessage\");\n    // },\n    // pause : function(){\n    //     this.i_paused = true;\n    // },\n\n    // nextRandom : function(){\n    //     return Math.random();\n    // },\n\n    // mainCallInstance : function(){\n    //     return this.i_mainCallInst;\n    // },\n\n    // leakCheckChildren : function(obj){\n\n\n    //     // If it's a pointer into an array, hypothetically we can get to anything else in the array,\n    //     // so we need to add the whole thing to the frontier.\n    //     // This also covers dynamic arrays - we never have a pointer to the array, but to elements in it.\n    //     if (isA(obj.type, Types.ArrayPointer)){\n    //         return [obj.type.arrObj];\n    //     }\n    //     else if (isA(obj.type, Types.Pointer) && obj.type.isObjectPointer()){\n    //         var pointsTo = this.memory.dereference(obj);\n    //         if (pointsTo && !isA(pointsTo, AnonymousObject)){\n    //             return [pointsTo];\n    //         }\n    //     }\n    //     else if (isA(obj.type, Types.Array)){\n    //         return obj.elemObjects;\n    //         //children.push(obj.elemObjects);\n    //         //var elems = obj.rawValue();\n    //         //var children = [];\n    //         //for(var i = 0; i < elems.length; ++i){\n    //         //    children.push(Value.instance(elems[i], obj.type.elemType));\n    //         //}\n    //         //return children;\n    //     }\n    //     else if (isA(obj.type, Types.Class)){\n    //         return obj.subobjects;\n    //         //var members = obj.subObjects;\n    //         //var children = [];\n    //         //for(var i = 0; i < members.length; ++i){\n    //         //    children.push(Value.instance(elems[i]));\n    //         //}\n    //         //return children;\n    //     }\n    //     return [];\n    // },\n    // leakCheck : function(){\n    //     //console.log(\"leak check running!\");\n    //     // Temporary place for testing leak check\n    //     var heapObjectsMap = this.memory.heap.objectMap;\n    //     for (var addr in heapObjectsMap) {\n    //         var obj = heapObjectsMap[addr];\n    //         if(this.leakCheckObj(obj)){\n    //             obj.leaked(this);\n    //         }\n    //         else{\n    //             obj.unleaked(this);\n    //         }\n    //     }\n    // },\n    // leakCheckObj : function(query) {\n    //     ++this.i_leakCheckIndex;\n    //     var frontier = [];\n    //     var globalScope = this.i_program.getGlobalScope();\n    //     for (var key in globalScope.entities) {\n    //         var ent = globalScope.entities[key];\n    //         if (isA(ent, CPPObject)){\n    //             ent.i_leakCheckIndex = this.i_leakCheckIndex;\n    //             frontier.push(ent);\n    //         }\n    //     }\n\n    //     for(var i = 0; i < this.memory.stack.frames.length; ++i){\n    //         var frameObjs = this.memory.stack.frames[i].objects;\n    //         for (var key in frameObjs) {\n    //             var ent = frameObjs[key];\n    //             if (isA(ent, CPPObject)){\n    //                 ent.i_leakCheckIndex = this.i_leakCheckIndex;\n    //                 frontier.push(ent);\n    //             }\n    //         }\n    //     }\n\n    //     for(var i = 0; i < this.i_pendingNews.length; ++i){\n    //         var obj = this.i_pendingNews[i];\n    //         obj.i_leakCheckIndex = this.i_leakCheckIndex;\n    //         frontier.push(obj);\n    //     }\n\n    //     for(var i = 0; i < this.i_execStack.length; ++i){\n    //         var inst = this.i_execStack[i];\n    //         if (inst.evalResult) {\n    //             obj = inst.evalResult;\n    //         }\n    //         else if (inst.func && !isA(inst.func.model.type.returnType, Types.Void)) {\n    //             if (isA(inst.func.model.type.returnType, Types.Reference)) {\n    //                 obj = inst.func.model.getReturnObject(this, inst.func);\n    //             }\n    //             else {\n    //                 obj = inst.func.model.getReturnObject(this, inst.func).getValue();\n    //             }\n    //         }\n\n    //         if (obj && isA(obj, CPPObject)){\n    //             obj.i_leakCheckIndex = this.i_leakCheckIndex;\n    //             frontier.push(obj);\n    //         }\n    //         else if (obj && isA(obj, Value)){\n    //             frontier.push(obj);\n    //         }\n    //     }\n\n    //     for (var key in this.memory.temporaryObjects){\n    //         var obj = this.memory.temporaryObjects[key];\n    //         obj.i_leakCheckIndex = this.i_leakCheckIndex;\n    //         frontier.push(obj);\n    //     }\n\n    //     while (frontier.length > 0) {\n    //         var obj = frontier.shift();\n\n    //         // Check if found\n    //         if (obj === query){\n    //             return false;\n    //         }\n\n    //         // Mark as visited\n    //         obj.i_leakCheckIndex = this.i_leakCheckIndex;\n    //         var children = this.leakCheckChildren(obj);\n    //         for(var i = 0; i < children.length; ++i){\n    //             var child = children[i];\n    //             if (child.i_leakCheckIndex !== this.i_leakCheckIndex){\n    //                 frontier.push(child);\n    //             }\n    //         }\n    //     }\n    //     return true;\n    // },\n}\n\n\ntype SimulationInputStreamMessages =\n    \"bufferUpdated\";\n\nexport class SimulationInputStream {\n\n    public readonly observable = new Observable<SimulationInputStreamMessages>(this);\n\n    public readonly trimws: boolean = true;\n\n    public readonly buffer: string = \"\";\n\n    // public readonly bufferAdditionRecord : readonly {readonly stepsTaken: number; readonly contents: string}[] = [];\n    \n    // public clone() {\n    //     let dup = new SimulationInputStream();\n    //     (<Mutable<SimulationInputStream>>dup).buffer = this.buffer;\n    //     (<Mutable<SimulationInputStream>>dup).bufferAdditionRecord = clone(this.bufferAdditionRecord)\n    //     return dup;\n    // }\n\n    public reset() {\n        this.updateBuffer(\"\");\n        // (<Mutable<this>>this).bufferAdditionRecord = [];\n        return this;\n    }\n    \n    // public rewind(stepsTaken: number) {\n    //     let i = this.bufferAdditionRecord.length;\n    //     while (i > 0 && this.bufferAdditionRecord[i-1].stepsTaken >= stepsTaken+1) {\n    //         --i;\n    //     }\n\n    //     (<Mutable<this>>this).bufferAdditionRecord = this.bufferAdditionRecord.slice(0, i);\n    //     this.updateBuffer(this.bufferAdditionRecord.map(record => record.contents).join(\"\"));\n    //     return this;\n    // }\n\n    public addToBuffer(s: string) {\n        this.updateBuffer(this.buffer + s);\n        // asMutable(this.bufferAdditionRecord).push({stepsTaken:stepsTaken, contents: s});\n        return this;\n    }\n\n    private updateBuffer(contents: string) {\n        (<Mutable<this>>this).buffer = contents;\n        this.observable.send(\"bufferUpdated\", this.buffer);\n    }\n\n    public skipws() {\n        (<Mutable<this>>this).buffer = trimStart(this.buffer);\n    }\n\n\n    public extractAndParseFromBuffer(type: ArithmeticType) {\n        if (isType(type, Char)) {\n            return type.parse(this.extractCharFromBuffer());\n        }\n        else {\n            return type.parse(this.extractWordFromBuffer());\n        }\n    }\n\n    public extractCharFromBuffer() {\n        let c = this.buffer.charAt(0);\n        this.updateBuffer(this.buffer.substring(1));\n        return c;\n    }\n\n    public extractWordFromBuffer() {\n        let firstWhitespace = this.buffer.search(/\\s/g);\n        if (firstWhitespace === -1) {\n            // no spaces, whole buffer is one word\n            let word = this.buffer;\n            this.updateBuffer(\"\");\n            return word;\n        }\n        else {\n            // extract first word, up to but not including whitespace\n            let word = this.buffer.substring(0, firstWhitespace);\n\n            // remove from buffer, including space.\n            this.updateBuffer(this.buffer.substring(firstWhitespace + 1));\n            return word;\n        }\n    }\n\n    public extractLineFromBuffer() {\n        let firstNewline = this.buffer.indexOf(\"\\n\");\n        if (firstNewline === -1) {\n            // no spaces, whole buffer is one word\n            let word = this.buffer;\n            this.updateBuffer(\"\");\n            return word;\n        }\n        else {\n            // extract first word, up to but not including newline\n            let word = this.buffer.substring(0, firstNewline);\n\n            // remove from buffer, including space.\n            this.updateBuffer(this.buffer.substring(firstNewline + 1));\n            return word;\n        }\n    }\n}","import { CPPConstruct } from \"./constructs\";\nimport { Program, TranslationUnit } from \"./Program\";\nimport { AssignmentExpression, AnalyticBinaryOperatorExpression, NumericLiteralExpression, IdentifierExpression, AnalyticExpression } from \"./expressions\";\nimport { CPPError, Note, NoteKind, CompilerNote } from \"./errors\";\nimport { Constructor } from \"../util/util\";\nimport { FunctionCallExpression } from \"./functionCall\";\nimport { VariableDefinition, FunctionDefinition, LocalVariableDefinition, TypedLocalVariableDefinition } from \"./declarations\";\nimport { DirectInitializer } from \"./initializers\";\nimport { ForStatement, CompiledForStatement, UnsupportedStatement } from \"./statements\";\nimport { BoundedArrayType, isBoundedArrayType, CompleteObjectType, Type, ReferenceType, isVoidType, isAtomicType, isCompleteObjectType, isPotentiallyCompleteClassType, isIntegralType, isPointerType, isFunctionType, isType, Int, sameType, Double } from \"./types\";\nimport { Expression } from \"./expressionBase\";\nimport { Predicates, AnalyticConstruct } from \"./predicates\";\n\nexport type CPPConstructTest<Original extends CPPConstruct, T extends Original> = (construct: Original) => construct is T;\n\nexport type CPPConstructFunctor<T extends CPPConstruct> = (construct: T) => void;\n\nexport function constructTest<Original extends CPPConstruct, T extends Original>(constructClass: Function & { prototype: T }) {\n    return <CPPConstructTest<Original, T>>((construct: Original) => construct instanceof constructClass);\n}\n\nexport function exploreConstructs<T extends CPPConstruct>(root: CPPConstruct | TranslationUnit | Program, test: CPPConstructTest<CPPConstruct, T>, fn: CPPConstructFunctor<T>) {\n\n    if (root instanceof Program) {\n        for (let tuName in root.translationUnits) {\n            exploreConstructs(root.translationUnits[tuName], test, fn);\n        }\n        return;\n    }\n\n    if (root instanceof TranslationUnit) {\n        root.topLevelDeclarations.forEach(decl => exploreConstructs(decl, test, fn));\n        return;\n    }\n\n    if (test(root)) {\n        fn(root);\n    }\n\n    root.children.forEach(child => exploreConstructs(child, test, fn));\n}\n\nexport function findConstructs<T extends AnalyticConstruct>(root: CPPConstruct | TranslationUnit | Program, test: CPPConstructTest<AnalyticConstruct, T>) {\n    let found: T[] = [];\n    exploreConstructs(root, test, (matchedConstruct: T) => {\n        found.push(matchedConstruct);\n    });\n    return found;\n}\n\nexport function findFirstConstruct<T extends AnalyticConstruct>(root: CPPConstruct | TranslationUnit | Program, test: CPPConstructTest<AnalyticConstruct, T>) {\n    let constructs = findConstructs(root, test);\n    if (constructs.length > 0) {\n        return constructs[0];\n    }\n    else {\n        return undefined;\n    }\n}\n\nexport function containsConstruct<T extends AnalyticConstruct>(root: CPPConstruct | TranslationUnit | Program, test: CPPConstructTest<AnalyticConstruct, T>) {\n    return !!findFirstConstruct(root, test);\n}\n\n// type TypedFilterable<Original extends CPPConstruct, Narrowed extends Original> = Original & {\n//     typedPredicate<T extends Type>(typePredicate: (o: Type) => o is T) : (decl: Original) => decl is Narrowed;\n// }\n\n// export function filterConstructsByType<T extends Type, Original extends CPPConstruct, Narrowed extends Original>(typePredicate: (o: Type) => o is T, constructs: readonly Original[] & readonly TypedFilterable<Original, Narrowed>[]) {\n//     if (constructs.length === 0) {\n//         return [];\n//     }\n\n//     return constructs.filter(createTypeConstructFilter(typePredicate));\n// }\n\n// // export function createTypeConstructFilter<OriginalT extends Type, T extends OriginalT>(typePredicate: (o: OriginalT) => o is T) {\n// //     return <Original extends CPPConstruct, Narrowed extends Original>(arr: readonly (OriginalT & TypedFilterable<Original, Narrowed, OriginalT>)[]) => arr.filter(typePredicate);\n// // }\n\n// interface TypeConstructFilter<Original extends CPPConstruct, Narrowed extends Original> {\n//     (original: Original) : original is Narrowed;\n// }\n\n// export function createTypeConstructFilter<OriginalT extends Type, T extends OriginalT>(typePredicate: (o: OriginalT) => o is T) {\n//     return <Original extends CPPConstruct, Narrowed extends Original>(original: TypedFilterable<Original, Narrowed, OriginalT>) => original.typedPredicate(typePredicate)(original);\n// }\n\n// export function filterConstructs<Original extends CPPConstruct, T extends Original>(constructs: readonly Original[], test: CPPConstructTest<Original, T>) {\n//     return constructs.filter(test);\n// }\n\n// Why is explicit type declaration necessary? otherwise I get string can't be used to index into object of type blah\nexport const projectAnalyses: { [projectName: string]: (p: Program) => void } = {\n    // \"Test Project\": analyze_wip\n}\n\n// export function analyze(program: Program) {\n\n//     let swapPtdInts = findConstructs(program, constructTest(FunctionDefinition))\n//         .find(def => def.declaration.name === \"swap\");\n//     let main = findConstructs(program, constructTest(FunctionDefinition))\n//         .find(def => def.declaration.name === \"main\");\n\n//     if (!swapPtdInts || !main) {\n//         return;\n//     }\n\n//     let assignments = findConstructs(swapPtdInts, constructTest(AssignmentExpression));\n//     let pointerAssignments = findConstructs(swapPtdInts, constructTest(AssignmentExpression))\n//         .filter(assn => assn.isPointerTyped());\n\n//     let localDefs = findConstructs(swapPtdInts, constructTest(VariableDefinition));\n//     let pointerDefs = localDefs.filter(def => def.type && def.type.isPointerType());\n//     let nonPointerDefs = localDefs.filter(def => def.type && !def.type.isPointerType());\n\n//     let passByValueParams = swapPtdInts.parameters.filter(\n//         param => param.type && param.type.isObjectType() && !param.type.isPointerType()\n//     );\n\n//     // Heuristic 1\n//     // At least two assignments, but no variable declarations. Forgot a temporary?\n//     if (assignments.length >= 2 && localDefs.length == 0) {\n//         assignments.forEach(assn => assn.addNote(new CompilerNote(assn, NoteKind.STYLE, \"analysis.1\", \"It's just a guess, but one of these assignments might end up accidentally overwriting some important data when you run your code. Check out the simulation to see ;).\")));\n//     }\n\n//     // Heuristic 2\n//     // Only one variable declaration and it's a pointer. Also at least one assignment in terms of pointers.\n//     if (program.isRunnable() && localDefs.length === 1\n//         && localDefs[0].type && localDefs[0].type.isPointerType()\n//         && pointerAssignments.length >= 1) {\n\n//         swapPtdInts.declaration.addNote(new CompilerNote(swapPtdInts.declaration, NoteKind.STYLE, \"analysis.2\", \"Check out the visualization of your code. What kinds of things are being swapped? Is it the arrows (i.e. pointers) or the values? Which do you want? What does that mean about where you should have the * operator in your code?\"));\n//     }\n\n//     // Heuristic 3\n//     // Declare a non-pointer but assign a pointer to it.\n//     nonPointerDefs.filter(def => {\n//         return def.initializer && def.initializer instanceof DirectInitializer && def.initializer.args[0].isPointerTyped();\n//     }).forEach(def => {\n//         def.addNote(new CompilerNote(def, NoteKind.STYLE, \"analysis.3\",\n//             `This line is trying to put an address into a variable that declared to hold ${def.type!.englishString(false)} value. Pointers (which have addresses for values) can't be stored into variables that hold plain values.`));\n//     });\n\n//     // Heuristic 4\n//     // Parameters that are pass-by-value (and not pass-by-pointer)\n//     if (program.isRunnable() && assignments.length >= 2) {\n//         if (passByValueParams.length >= 2) {\n\n//             swapPtdInts.declaration.addNote(new CompilerNote(swapPtdInts.declaration, NoteKind.STYLE, \"analysis.4\",\n//                 `It looks like you've got a fair bit of code written to do the swap. But take a moment now to go ahead and simulate what you have. Look at the variables on the stack frames for main and your swap function as it runs. Are the variables in main getting changed, as desired? If not, why not? Does it have anything to do with the way you're passing the function parameters?`));\n//         }\n//     }\n\n//     // Heuristic 5\n//     // Pass by value paramParam in swap with same name as param in main\n//     passByValueParams.filter(\n//         param => findConstructs(main!, constructTest(VariableDefinition)).find(def => def.name === param.name)\n//     ).forEach(\n//         param => param.addNote(new CompilerNote(param, NoteKind.STYLE, \"analysis.4\",\n//             `Note that the parameter ${param.name} is not the same variable as the ${param.name} declared in main(). The two variables have different scopes and correspond to separate objects at runtime.`))\n//     );\n\n//     // for (let tuName in program.translationUnits) {\n//     //     program.translationUnits[tuName].topLevelDeclarations.forEach(\n//     //         decl => exploreConstructs(decl,\n//     //             constructTest(AssignmentExpression),\n//     //             (assn: AssignmentExpression) => assn.addNote(CPPError.lobster.unsupported_feature(assn, \"crabs\"))\n//     //         )\n//     //     );\n//     // }\n// }\n\nfunction analyze2(program: Program) {\n\n    // 1. Find all local variable definitions in the program\n    let pointerTypedConstructs = findConstructs(program, Predicates.byTypedExpression(isPointerType));\n    let localDefs = findConstructs(program, Predicates.byKinds([\"local_variable_definition\", \"global_variable_definition\"]));\n\n    // 2. Narrow those down to only the ones that define pointer variables\n    let pointerDefs = findConstructs(program, Predicates.byTypedDeclaration(isPointerType))\n        .filter(Predicates.byKind(\"local_variable_definition\"));\n    let pointerDef2 = localDefs.filter(Predicates.byTypedDeclaration(isPointerType));\n\n    // 3. Find everything with a function type (e.g. a parentheses expression around a function identifier)\n    let funcDecls2 = findConstructs(program, Predicates.byTypedExpression(isFunctionType));\n\n    // 4. An impossible ask, filter our pointer definitions down to those with class type.\n    //    Our predicates are smart enough to rule this out! The type returned from filter is never[]!\n    let whichPointerDefsAreSecretlyClasses = pointerDefs.filter(Predicates.byTypedDeclaration(isPotentiallyCompleteClassType));\n\n    // 5.a. Find all logical binary operators\n    let binOps = findConstructs(program, Predicates.byKind(\"logical_binary_operator_expression\"));\n    let t5 = binOps[0].type; // type is Bool\n\n    // type of left5 is Expression. While the compiler knows a logical binary operator (e.g. &&) will always\n    // yield a bool, it doesn't know that the operands it was given are any particular type\n    let left5 = binOps[0].left;\n\n\n}\n\nexport function eecs183_l03_03(program: Program) {\n\n    // Find average function\n    let avgFunc = findFirstConstruct(program, Predicates.byFunctionName(\"average\"));\n    if (!avgFunc) {\n        return;\n    }\n\n    // Check function params -> TODO should probably be common helper\n    let params = avgFunc.parameters;\n    if (params.length !== 2) {\n        avgFunc.addNote(new CompilerNote(avgFunc, NoteKind.ERROR, \"EECS183.L04_02.incorrect_param_count\", \"Need 2 params.\"));\n    } else {\n        params.forEach(param => {\n            if (param.type && !sameType(param.type, Double.DOUBLE)) {\n                param.addNote(new CompilerNote(param, NoteKind.ERROR, \"EECS183.L04_02.incorrect_param_count\", \"Incorrect param type.\"));\n            }\n        })\n    }\n\n    // Check for lack of return statement -> TODO should probably be common helper\n    // let localVars = findConstructs(avgFunc, Predicates.byKind(\"local_variable_definition\"));\n    let returnStatement = findConstructs(avgFunc, Predicates.byKind(\"return_statement\"));\n    if (!returnStatement) {\n        avgFunc.addNote(new CompilerNote(avgFunc, NoteKind.ERROR, \"EECS183.L04_02.no_return_stmt\", \"No return stmt found.\"));\n    }\n\n    // Ensure student enters correct return type to function\n    let retType = avgFunc.type.returnType;\n    if (!sameType(retType, Double.DOUBLE)) {\n        avgFunc.addNote(new CompilerNote(avgFunc, NoteKind.ERROR, \"EECS183.L04_02.incorrect_return_type\", \"Return type should be double.\"));\n    }\n\n    // Check that the student wraps division in parens\n    findConstructs(avgFunc, Predicates.byKind(\"arithmetic_binary_operator_expression\"))\n        .forEach(op => {\n            if (op.operator === \"+\") {\n                (<AnalyticExpression[]>op.children)\n                    .filter(Predicates.byKind(\"arithmetic_binary_operator_expression\"))\n                    .filter(childOp => childOp.operator === \"/\")\n                    .forEach(childOp => childOp.addNote(new CompilerNote(childOp, NoteKind.ERROR, \"EECS183.L04_02.order_of_operations\", \"Use parentheses!\")))\n            }\n        });\n\n    // Find local variable ints initialized by a narrowing conversion from a double\n    // localVars.filter(Predicates.byTypedDeclaration(isType(Int)))\n    //     .filter(def => {\n    //         let init = def.initializer;\n    //         if(init && init instanceof AtomicDirectInitializer) {\n    //             let arg = init.arg;\n    //             if (arg && Predicates.byKind(\"ImplicitConversion\")(<AnalyticExpression>arg)) {\n    //                 arg.from.type == int\n    //                 arg.toType == double\n    //             }\n    //         }\n    //     });\n}\n\nexport function isUpdateAssignment(exp: AnalyticConstruct): exp is AssignmentExpression {\n\n    // if (Predicates.byKind(\"assignment_expression\")(exp)) {\n    //     let lhs = <AnalyticExpression>exp.lhs;\n\n    //     if (Predicates.byKind(\"identifier_expression\")(lhs)) {\n    //         let rhs_id = findConstructs(exp.rhs, Predicates.byIdentifierName(lhs.name));\n    //         return rhs_id.length !== 0;\n    //     }\n    // }\n\n    // return true;\n    let lhs: IdentifierExpression;\n    return Predicates.byKind(\"assignment_expression\")(exp) &&\n        Predicates.byKind(\"identifier_expression\")(exp.lhs) && (lhs = exp.lhs) &&\n        findConstructs(lhs, Predicates.byIdentifierName(lhs.name)).length !== 0;\n}\n\n// ASK JAMES -> ok to have CPPConstruct param type? Is there a better fit for this? (AnalyticConstruct caused analyzer errors)\n// export function hasIncrement(construct: CPPConstruct) {\n//     // Proof of concept one-liner\n//     /* let inc = findConstructs(loop,\n//         // Predicates.byKinds([\"prefix_increment_expression\", \"prefix_decrement_expression\",\n//         //                     \"postfix_increment_expression\", \"postfix_decrement_expression\",\n//         //                     \"compound_assignment_expression\"]) ||\n//         (e) : e is IdentifierExpression | AssignmentExpression => Predicates.byKind(\"identifier_expression\")(e) ||\n//         isUpdateAssignment(e)\n//         ); */\n\n//     // Find increments -> includes post/prefix inc/dec, compound assg, all constructs for which isUpdateAssignment returns true for\n//     // As of right now, only update assignments are implemented, so TODO is also include the others\n//     return findConstructs(construct, isUpdateAssignment).length !== 0; // TODO include other incr types when they're implemented\n// }\n\n// function hasDoubleIncrement(loop: ForStatement) {\n//     // return findConstructs(loop.body, isUpdateAssignment).length !== 0 && findConstructs(loop.post, isUpdateAssignment).length !== 0;\n//     return hasIncrement(loop.body) && hasIncrement(loop.post);\n// }\n\n// function analyze_wip(program: Program) {\n//     // EECS183.L07_01\n//     const loop = findFirstConstruct(program, Predicates.byKinds([\"for_statement\", \"while_statement\"]));\n//     if (!loop) {\n//         return;\n//     }\n//     if (!hasIncrement(loop)) {\n//         loop.addNote(new CompilerNote(loop, NoteKind.ERROR, \"EECS183.L04_02.no_loop_increment\", \"Loop doesn't have an increment!\"));\n//     } else if (Predicates.byKind(\"for_statement\")(loop) && hasDoubleIncrement(loop)) {\n//         loop.addNote(new CompilerNote(loop, NoteKind.ERROR, \"EECS183.L04_02.double_loop_increment\", \"Loop has two increments!\"));\n//     }\n\n// }\n\n// function analyze2(program: Program) {\n\n//     // 1. Find all local variable definitions in the program\n//     let pointerTypedConstructs = findConstructs(program, Predicates.byTypedExpression(isPointerType));\n//     let localDefs = findConstructs(program, Predicates.byKind(\"local_variable_definition\"));\n\n//     // 2. Narrow those down to only the ones that define pointer variables\n//     let pointerDefs = pointerTypedConstructs.filter(Predicates.byKind(\"local_variable_definition\"));\n//     let pointerDef2 = localDefs.filter(Predicates.byTypedExpression(isPointerType));\n\n//     // 3. Find everything with a function type. This could be a function declaration or definition,\n//     // or curiously enough some kinds of expressions (e.g. a parentheses expression around a function identifier)\n//     let funcDecls2 = findConstructs(program, Predicates.byTypedExpression(isFunctionType));\n\n//     // 4. An impossible ask, filter our pointer definitions down to those with class type.\n//     //    Our predicates are smart enough to rule this out! The type returned from filter is never[]!\n//     let whichPointerDefsAreSecretlyClasses = pointerDefs.filter(Predicates.byTypedExpression(isClassType));\n\n//     // 5.a. Find all logical binary operators\n//     let binOps = findConstructs(program, Predicates.byKind(\"logical_binary_operator_expression\"));\n//     let t5 = binOps[0].type; // type is Bool\n\n//     // type is Expression. While the compiler knows a logical binary operator (e.g. &&) will always\n//     // yield a bool, it doesn't know that the operands it was given are any particular type \n//     let left5 = binOps[0].left;\n\n//     // 5.b.\n//     // let compiledBinOps = binOps.filter();\n\n//     // let forLoops = findConstructs(program, Predicates.byKind(\"for_statement\"));\n//     // forLoops.forEach(forLoop => {\n//     //     forLoop.condition // <--- Type of .condition here is Expression\n//     //     forLoop.condition.type\n//     //     // ^ Type of .type here is VoidType | AtomicType | BoundedArrayType<ArrayElemType> |\n//     //     //                         ClassType | FunctionType | ReferenceType<ObjectType> |\n//     //     //                         ArrayOfUnknownBoundType<ArrayElemType> | undefined\n\n//     //     if (forLoop.isSuccessfullyCompiled()) { // Inside this if, TS does type inference based on a proper for loop\n//     //         forLoop.condition // <--- Type of .condition here is CompiledExpression<Bool, \"prvalue\">\n//     //         forLoop.condition.type // <--- Type of .type here is Bool\n\n//     //     }\n//     // });\n\n//     // let x!: never;\n//     // let y = 3 / x;\n//     // // // let arrayDefs = filterConstructsByType<LocalVariableDefinition, TypedLocalVariableDefinition<ObjectType | ReferenceType>, ObjectType | ReferenceType, BoundedArrayType>(isBoundedArrayType, varDefs);\n//     // // // arrayDefs[0].type\n//     // // let arrayDefs = filterConstructsByType<BoundedArrayType>(isBoundedArrayType, varDefs);\n//     // arrayDefs[0].type.length\n//     // let x!: LocalVariableDefinition;\n\n//     // if (x.isTypedDeclaration(isBoundedArrayType)()) {\n//     //     x.type\n//     // }\n\n//     // isBoundedArrayTypedDeclaration(x);\n//     // let blah = varDefs.filter(isBoundedArrayTypedDeclaration);\n//     // blah[0].type\n//     // arrayDefs[0].type\n//     // if (arrayDefs.length === 0) {\n//     //     return;\n//     // }\n//     // let arrayDef = arrayDefs[0];\n//     // if (!arrayDef.isBoundedArrayTyped()) {\n//     //     return;\n//     // }\n//     // let arraySize = arrayDef.type.length;\n\n//     // // let forLoops = findConstructs(program, constructTest(ForStatement));\n//     // // let compiledForLoops = forLoops.filter(isSuccessfullyCompiled);\n//     // let compiledForLoops = findConstructs(program, compiledConstructTest(ForStatement));\n\n//     // let targets = compiledForLoops.filter((fl) => {\n//     //     let cond = fl.condition;\n//     //     if (!(cond instanceof BinaryOperatorExpression)) {\n//     //         return false;\n//     //     }\n//     //     return cond.operator === \"<=\" && cond.right instanceof NumericLiteralExpression && cond.right.value.rawValue === arraySize;\n//     // });\n//     // targets.forEach(target => target.addNote(new CompilerNote(target, NoteKind.WARNING, \"blah\", \"Oops\")));\n\n//     // let test!: AssignmentExpression[];\n//     // let sdf = test.filter((t) => t.isBoundedArrayTyped());\n\n\n\n// }","import { Program, TranslationUnit, SourceReference } from \"./Program\";\nimport { Scope, TemporaryObjectEntity, FunctionEntity, LocalObjectEntity, LocalVariableEntity, LocalReferenceEntity, BlockScope, ClassEntity, MemberVariableEntity, ClassScope, CompleteClassEntity } from \"./entities\";\nimport { Note, NoteKind, CPPError, NoteRecorder } from \"./errors\";\nimport { asMutable, Mutable, assertFalse, assert } from \"../util/util\";\nimport { Simulation } from \"./Simulation\";\nimport { Observable } from \"../util/observe\";\nimport { CompleteObjectType, ReferenceType, PeelReference, VoidType, PotentialReturnType, Type, AtomicType, FunctionType, CompleteClassType, ExpressionType } from \"./types\";\nimport { GlobalVariableDefinition, CompiledGlobalVariableDefinition, CompiledFunctionDefinition, ClassDefinition, Declarator, FunctionDefinition, ClassDeclaration, AccessSpecifier } from \"./declarations\";\nimport { PotentialFullExpression, RuntimePotentialFullExpression } from \"./PotentialFullExpression\";\nimport { RuntimeFunction } from \"./functions\";\nimport { CPPObject } from \"./objects\";\nimport { ForStatement, WhileStatement } from \"./statements\";\n\n\n\n\nexport interface ConstructDescription {\n    name?: string;\n    message: string;\n}\n\nexport interface Explanation {\n    message: string;\n}\n\n\nexport interface ASTNode {\n    // readonly construct_type: string;\n    readonly source: {\n        readonly start: number;\n        readonly end: number;\n        readonly text: string;\n        readonly line: number;\n        readonly column: number;\n    };\n    readonly library_id?: number;\n    readonly library_unsupported?: boolean;\n};\n\nexport interface ProgramContext {\n    readonly program: Program;\n    readonly translationUnit?: TranslationUnit;\n    readonly implicit?: boolean;\n    readonly libraryId?: number;\n    readonly libraryUnsupported?: boolean;\n}\n\nexport function createImplicitContext<ContextType extends ProgramContext>(context: ContextType): ContextType {\n    return Object.assign({}, context, { implicit: true });\n}\n\n\nexport interface TranslationUnitContext extends ProgramContext {\n    readonly translationUnit: TranslationUnit;\n    readonly contextualScope: Scope;\n    readonly containingClass?: CompleteClassEntity;\n    readonly isLibrary: boolean;\n}\n\nexport function createTranslationUnitContext(parentContext: ProgramContext, translationUnit: TranslationUnit, contextualScope: Scope): TranslationUnitContext {\n    return Object.assign({}, parentContext, { translationUnit: translationUnit, contextualScope: contextualScope, isLibrary: false });\n}\n\nexport function createLibraryContext(parentContext: TranslationUnitContext): TranslationUnitContext {\n    return Object.assign({}, parentContext, { isLibrary: true });\n}\n\nexport interface ExpressionContext extends TranslationUnitContext {\n    readonly contextualParameterTypes?: readonly (ExpressionType | undefined)[];\n    readonly contextualReceiverType?: CompleteClassType;\n}\n\nexport function createExpressionContextWithParameterTypes(parentContext: TranslationUnitContext, contextualParameterTypes: readonly (ExpressionType | undefined)[]): ExpressionContext {\n    return Object.assign({}, parentContext, { contextualParameterTypes: contextualParameterTypes });\n}\n\nexport function createExpressionContextWithReceiverType(parentContext: TranslationUnitContext, contextualReceiverType: CompleteClassType): ExpressionContext {\n    return Object.assign({}, parentContext, { contextualReceiverType: contextualReceiverType });\n}\n\nexport interface FunctionContext extends TranslationUnitContext {\n    readonly containingFunction: FunctionEntity;\n    readonly functionLocals: FunctionLocals;\n    readonly contextualReceiverType?: CompleteClassType;\n}\n\nexport function createFunctionContext(parentContext: TranslationUnitContext, containingFunction: FunctionEntity, contextualReceiverType: CompleteClassType): MemberFunctionContext;\nexport function createFunctionContext(parentContext: TranslationUnitContext, containingFunction: FunctionEntity, contextualReceiverType?: CompleteClassType): FunctionContext;\nexport function createFunctionContext(parentContext: TranslationUnitContext, containingFunction: FunctionEntity, contextualReceiverType?: CompleteClassType): FunctionContext {\n    return Object.assign({}, parentContext, {\n        containingFunction: containingFunction,\n        functionLocals: new FunctionLocals(),\n        contextualReceiverType: contextualReceiverType\n    });\n}\n\nexport function isMemberFunctionContext(context: FunctionContext) : context is MemberFunctionContext {\n    return !!context.contextualReceiverType;\n}\n\nexport interface MemberFunctionContext extends FunctionContext {\n    readonly contextualReceiverType: CompleteClassType;\n}\n\nexport interface BlockContext extends FunctionContext {\n    readonly contextualScope: BlockScope;\n    readonly withinLoop?: true;\n}\n\nexport interface MemberBlockContext extends BlockContext {\n    readonly contextualReceiverType: CompleteClassType;\n}\n\nexport function isBlockContext(context: TranslationUnitContext): context is BlockContext {\n    return context.contextualScope instanceof BlockScope;\n}\n\nexport function createLoopContext<C extends BlockContext>(parentContext: C) {\n    return Object.assign({}, parentContext, {\n        withinLoop: true\n    });\n}\n\n// export class ClassMembers {\n\n//     // public readonly localObjects: readonly AutoEntity[] = [];\n//     // public readonly localReferences: readonly LocalReferenceEntity[] = [];\n//     // public readonly localVariablesByEntityId: {\n//     //     [index: number] : LocalVariableEntity\n//     // } = {};\n\n//     public registerMemberVariable(member: MemberVariableEntity) {\n//         // assert(!this.localVariablesByEntityId[local.entityId]);\n//         // this.localVariablesByEntityId[local.entityId] = local;\n//         // if (local.kind === \"AutoEntity\") {\n//         //     asMutable(this.localObjects).push(local)\n//         // }\n//         // else {\n//         //     asMutable(this.localReferences).push(local);\n//         // }\n//     }\n// }\n\nexport function isClassContext(context: TranslationUnitContext) : context is ClassContext {\n    return !!(context as ClassContext).containingClass; // && !!(context as ClassContext).classMembers;\n}\n\nexport interface ClassContext extends TranslationUnitContext {\n    readonly contextualScope: ClassScope;\n    readonly containingClass: CompleteClassEntity;\n    readonly templateType?: AtomicType;\n}\n\nexport function createClassContext(\n    parentContext: TranslationUnitContext, classEntity: ClassEntity,\n    baseClass?: ClassEntity, templateType?: AtomicType): ClassContext {\n    return Object.assign({}, parentContext, {\n        contextualScope: new ClassScope(parentContext.translationUnit, classEntity.name, parentContext.contextualScope, baseClass?.definition?.context.contextualScope),\n        containingClass: classEntity,\n        templateType: templateType\n    });\n}\n\nexport function isMemberSpecificationContext(context: TranslationUnitContext) : context is MemberSpecificationContext {\n    return isClassContext(context) && !!(context as MemberSpecificationContext).accessLevel;\n}\n\nexport interface MemberSpecificationContext extends ClassContext {\n    readonly accessLevel: AccessSpecifier;\n}\n\nexport function createMemberSpecificationContext(parentContext: ClassContext, accessLevel: AccessSpecifier): MemberSpecificationContext {\n    return Object.assign({}, parentContext, {\n        accessLevel: accessLevel\n    });\n}\n\nexport abstract class CPPConstruct<ContextType extends ProgramContext = ProgramContext, ASTType extends ASTNode = ASTNode> {\n    public abstract readonly construct_type: string;\n    private static NEXT_ID = 0;\n    // initIndex: \"pushChildren\",\n\n    // i_childrenToCreate : [],\n    // i_childrenToConvert : {},\n    // i_childrenToExecute : [],\n    //\n    // createWithChildren : function(children, context) {\n    //     var construct = this.instance(context);\n    //     this.i_createWithChildrenImpl(construct, children, context);\n    //\n    //     return construct;\n    // },\n\n    public readonly constructId: number;\n\n    public readonly notes = new NoteRecorder();\n\n    public readonly context: ContextType;\n\n    public readonly ast?: ASTType;\n    public readonly sourceReference?: SourceReference;\n\n    // public readonly libraryId?: number;\n    // public readonly isLibraryUnsupported?: boolean;\n\n    public abstract readonly parent?: CPPConstruct;\n    public readonly children: readonly CPPConstruct[] = [];\n\n    protected constructor(context: ContextType, ast: ASTType | undefined) {\n        this.constructId = CPPConstruct.NEXT_ID++;\n\n        this.context = context;\n\n        if (ast) {\n            this.ast = ast;\n    \n            assert(ast.source, \"AST source is undefined. A track() call is likely missing in the grammar.\");\n    \n            if (this.context.translationUnit) {\n                asMutable(this).sourceReference = this.context.translationUnit.getSourceReference(ast.source.line, ast.source.column, ast.source.start, ast.source.end);\n            }\n        }\n\n        // TODO: figure out library stuff\n        // if (context.libraryId) {\n        //     this.libraryId = context.libraryId;\n        // }\n        // if (context.libraryUnsupported) {\n        //     this.isLibraryUnsupported = true;\n        // }\n\n\n        // TODO: figure out library stuff\n        // If the parent is an usupported library construct, so are its children (including this one)\n        // if (this.parent && this.parent.library_unsupported) {\n        //     this.i_library_unsupported = true;\n        // }\n\n        // If this contruct is NOT auxiliary WITH RESPECT TO ITS PARENT (as indicated by context.auxiliary), then we should\n        // add it as a child. Otherwise, if this construct is auxiliary in that sense we don't.\n        // if (context.parent) {\n        //     // This cast here is a hack to get around the type system not liking\n        //     // the fact that addChild is public in GlobalProgramConstruct but private in CPPConstruct\n        //     // (the union type only contains the public methods)\n        //     (<CPPConstruct>this.parent).addChild(this);\n        // }\n    }\n\n    public attach(child: CPPConstruct) {\n        asMutable(this.children).push(child);\n        child.onAttach(this);\n        // TODO: add notes from child?\n    }\n\n    public attachAll(children: readonly CPPConstruct[]) {\n        children.forEach((child) => this.attach(child));\n    }\n\n    protected abstract onAttach(parent: this[\"parent\"]): void;\n\n    // public getSourceText() {\n    //     return this.ast.code ? this.ast.code.text : \"an expression\";\n    // }\n\n    // public isLibraryConstruct() {\n    //     return this.libraryId !== undefined;\n    // }\n\n    // public getLibraryId() {\n    //     return this.libraryId;\n    // }\n\n    public explain(sim: Simulation, rtConstruct: RuntimeConstruct): Explanation {\n        return { message: \"[No explanation available.]\" };\n    }\n\n    public describe(sim: Simulation, rtConstruct: RuntimeConstruct): ConstructDescription {\n        return { message: \"[No description available.]\" };\n    }\n\n    public addNote(note: Note) {\n        this.notes.addNote(note);\n        if (this.context.translationUnit) { this.context.translationUnit.addNote(note); }\n        // if (this.parent && this.i_auxiliaryLevel === this.parent.i_auxiliaryLevel) {\n        //     this.parent.addNote(note);\n        // }\n    }\n\n    public getContainedNotes() {\n        let allNotes = new NoteRecorder();\n        allNotes.addNotes(this.notes.allNotes);\n        this.children.forEach(child => allNotes.addNotes(child.getContainedNotes().allNotes));\n        return allNotes;\n    }\n\n    // getNotes : function() {\n    //     return this.i_notes;\n    // },\n    public getNearestSourceReference(this: CPPConstruct<TranslationUnitContext>) {\n        let construct: CPPConstruct = this;\n        while (!construct.sourceReference && construct.parent) {\n            construct = construct.parent;\n        }\n        return construct.sourceReference || this.context.translationUnit.getSourceReference(0, 0, 0, 0);\n    }\n\n    // public abstract readonly _t: {\n    //     compiled: CompiledConstruct\n    // };\n\n    public isSuccessfullyCompiled(): this is CompiledConstruct {\n        return !this.getContainedNotes().hasErrors;\n    }\n}\n\nexport type TranslationUnitConstruct<ASTType extends ASTNode = ASTNode> = CPPConstruct<TranslationUnitContext, ASTType>;\n\nexport interface SuccessfullyCompiled {\n\n    // _t_isCompiled is here to prevent (otherwise) structurally equivalent non-compiled constructs\n    // from being assignable to a compiled expression type\n    // TODO: maybe better to use a symbol here?\n    readonly _t_isCompiled: never;\n}\n\n\nexport interface CompiledConstruct extends CPPConstruct, SuccessfullyCompiled {\n\n}\n\n\n\n\n\n\n\n\nexport type StackType = \"statement\" | \"expression\" | \"function\" | \"initializer\" | \"call\" | \"ctor-initializer\";\n\nexport abstract class RuntimeConstruct<C extends CompiledConstruct = CompiledConstruct> {\n\n    public readonly observable = new Observable(this);\n\n    public readonly sim: Simulation;\n    public readonly model: C;\n    public readonly stackType: StackType;\n\n    public readonly children: { [index: string]: RuntimeConstruct } = {};\n\n    public readonly parent?: RuntimeConstruct;\n\n    private static NEXT_ID = 0;\n    public readonly runtimeId: number = RuntimeConstruct.NEXT_ID++;\n\n    /**\n     * WARNING: The containingRuntimeFunction property may be undefined, even though it's type suggests it will always\n     * be defined. In most places where it is accessed, there is an implicit assumption that a runtime construct\n     * situated inside a function is being used (e.g. looking up an entity that depends on a local function) and the\n     * client code would end up needing a non-null assertion anyway. Those non-null assertions are annoying, so\n     * instead we trick the type system and trust that this property will be used appropriately by the programmer.\n     */\n    public readonly containingRuntimeFunction!: RuntimeFunction;\n\n    public readonly stepsTakenAtStart: number;\n    public readonly isActive: boolean = false;\n    public readonly isUpNext: boolean = false;\n    public readonly isWaiting: boolean = false;\n    public readonly isDone: boolean = false;\n\n    private cleanupConstruct?: RuntimeConstruct;\n    public readonly cleanupStarted: boolean = false;\n\n    // TODO: refactor pauses. maybe move them to the implementation\n    private pauses: { [index: string]: any } = {}; // TODO: remove any type\n\n    public constructor(model: C, stackType: StackType, parentOrSim: RuntimeConstruct | Simulation) {\n        this.model = model;\n        this.stackType = stackType;\n\n        if (parentOrSim instanceof RuntimeConstruct) {\n            assert(this.parent !== this, \"Code instance may not be its own parent\");\n\n            this.sim = parentOrSim.sim;\n            assert(parentOrSim.sim === this.sim, \"Runtime construct may not belong to a different simulation than its parent.\")\n\n            this.parent = parentOrSim;\n            this.parent.addChild(this);\n\n            if (parentOrSim.containingRuntimeFunction) {\n                this.containingRuntimeFunction = parentOrSim.containingRuntimeFunction;\n            }\n        }\n        else {\n            this.sim = parentOrSim;\n        }\n\n        this.stepsTakenAtStart = this.sim.stepsTaken;\n    }\n\n    protected setContainingRuntimeFunction(func: RuntimeFunction) {\n        (<Mutable<this>>this).containingRuntimeFunction = func;\n    }\n\n    protected setContextualReceiver(obj: CPPObject<CompleteClassType>) {\n        (<Mutable<this>>this).contextualReceiver = obj;\n    }\n\n    /**\n     * WARNING: The contextualReceiver property may be undefined, even though it's type suggests it will always\n     * be defined. In most places where it is accessed, there is an implicit assumption that the runtime construct\n     * for whom the lookup is being performed is situated in a context where there is a contextual receiver (e.g.\n     * inside a member function) and the client code would end up needing a non-null assertion anyway. Those\n     * non-null assertions are annoying, so instead we trick the type system and trust that this property will\n     * be used appropriately by the programmer.\n     */\n    public get contextualReceiver() {\n        return this.containingRuntimeFunction?.receiver!;\n    }\n\n    /**\n     * REQUIRES: this instance is on the top of the execution stack\n     */\n    public stepForward() {\n        this.observable.send(\"stepForward\");\n        return this.stepForwardImpl();\n    }\n\n    protected abstract stepForwardImpl(): void;\n\n    public upNext() {\n        (<Mutable<this>>this).isUpNext = true;\n        this.observable.send(\"upNext\");\n\n        // for(var key in this.pauses){\n        //     var p = this.pauses[key];\n        //     if (p.pauseWhenUpNext //||\n        //         // p.pauseAtIndex !== undefined && this.index == p.pauseAtIndex){\n        //     ){\n        //         this.sim.pause();\n        //         p.callback && p.callback();\n        //         delete this.pauses[key];\n        //         break;\n        //     }\n        // }\n        if (this.cleanupStarted) {\n            if (this.cleanupConstruct && !this.cleanupConstruct.isDone) {\n                this.sim.push(this.cleanupConstruct);\n            }\n            else {\n                this.sim.pop();\n            }\n        }\n        else {\n            return this.upNextImpl();\n        }\n    }\n\n    protected abstract upNextImpl(): void;\n\n    public setPauseWhenUpNext() {\n        this.pauses[\"upNext\"] = { pauseWhenUpNext: true };\n    }\n\n    public wait() {\n        (<Mutable<this>>this).isUpNext = false;\n        (<Mutable<this>>this).isWaiting = true;\n        this.observable.send(\"wait\");\n    }\n\n    public afterPushed() {\n        (<boolean>this.isActive) = true;\n        this.observable.send(\"pushed\");\n    }\n\n    protected setCleanupConstruct(cleanupConstruct: RuntimeConstruct) {\n        this.cleanupConstruct = cleanupConstruct;\n    }\n\n    public startCleanup() {\n\n        (<Mutable<this>>this).cleanupStarted = true;\n\n        // If we're on top of the stack, go ahead and start the cleanup\n        // (otherwise, wait until the next time we're on top and receive an upNext)\n        // We do need to do this now, since startCleanup() could be called from\n        // somewhere where we don't immediately get another upNext()\n        if (this === this.sim.top()) {\n            if (this.cleanupConstruct) {\n                this.sim.push(this.cleanupConstruct);\n            }\n            else {\n                this.sim.pop();\n            }\n        }\n    }\n\n    public afterPopped() {\n        (<Mutable<this>>this).isActive = false;\n        (<Mutable<this>>this).isUpNext = false;\n        (<Mutable<this>>this).isWaiting = false;\n        (<Mutable<this>>this).isDone = true;\n        this.observable.send(\"popped\", this);\n    }\n\n    private addChild(child: RuntimeConstruct) {\n        this.children[child.model.constructId] = child;\n        this.observable.send(\"childInstanceCreated\", child);\n    }\n\n    // findParent : function(stackType){\n    //     if (stackType){\n    //         var parent = this.parent;\n    //         while(parent && parent.stackType != stackType){\n    //             parent = parent.parent;\n    //         }\n    //         return parent;\n    //     }\n    //     else{\n    //         return this.parent;\n    //     }\n    // },\n\n    public findParentByModel(model: CPPConstruct) {\n        var parent = this.parent;\n        while (parent && parent.model.constructId != model.constructId) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    public explain(): Explanation {\n        return this.model.explain(this.sim, this);\n    }\n\n    public describe(): ConstructDescription {\n        return this.model.describe(this.sim, this);\n    }\n}\n\n\n\n\n\nexport abstract class BasicCPPConstruct<ContextType extends TranslationUnitContext, ASTType extends ASTNode> extends CPPConstruct<ContextType, ASTType> {\n\n    public parent?: CPPConstruct;\n\n    public constructor(context: ContextType, ast: ASTType | undefined) {\n        super(context, ast);\n    }\n\n    public onAttach(parent: CPPConstruct) {\n        (<Mutable<this>>this).parent = parent;\n    }\n}\n\nexport class InvalidConstruct extends BasicCPPConstruct<TranslationUnitContext, ASTNode> {\n    public readonly construct_type = \"invalid_construct\";\n\n    public readonly note: Note;\n    public readonly type: undefined;\n\n    public constructor(context: TranslationUnitContext, ast: ASTNode | undefined, errorFn: (construct: CPPConstruct) => Note, children?: readonly CPPConstruct[]) {\n        super(context, ast);\n        this.addNote(this.note = errorFn(this));\n        children?.forEach(child => this.attach(child));\n    }\n\n}\n\nexport class FunctionLocals {\n\n    public readonly localObjects: readonly LocalObjectEntity[] = [];\n    public readonly localReferences: readonly LocalReferenceEntity[] = [];\n    public readonly localVariablesByEntityId: {\n        [index: number]: LocalVariableEntity\n    } = {};\n\n    public registerLocalVariable(local: LocalVariableEntity) {\n        assert(!this.localVariablesByEntityId[local.entityId]);\n        this.localVariablesByEntityId[local.entityId] = local;\n        if (local.variableKind === \"object\") {\n            asMutable(this.localObjects).push(local);\n        }\n        else {\n            asMutable(this.localReferences).push(local);\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport class TemporaryDeallocator extends BasicCPPConstruct<TranslationUnitContext, ASTNode> {\n    public readonly construct_type = \"TemporaryDeallacator\";\n\n    public readonly parent?: PotentialFullExpression;\n    public readonly temporaryObjects: TemporaryObjectEntity[];\n\n    // public readonly dtors: (MemberFunctionCall | null)[];\n\n    public constructor(context: TranslationUnitContext, temporaryObjects: TemporaryObjectEntity[]) {\n        super(context, undefined); // Has no AST\n        this.temporaryObjects = temporaryObjects;\n\n        // TODO CLASSES: add back in destructor calls and dtors member function above\n        // this.dtors = temporaryObjects.map((tempEnt) => {\n        //     if (tempEnt.type instanceof ClassType) {\n        //         var dtor = tempEnt.type.cppClass.destructor;\n        //         if (dtor) {\n        //             //MemberFunctionCall args are: context, function to call, empty args, receiver\n        //             let dtorCall = new MemberFunctionCall(context, dtor, [], <TemporaryObjectEntity<ClassType>>tempEnt);\n        //             this.attach(dtorCall);\n        //             return dtorCall;\n        //         }\n        //         else{\n        //             this.addNote(CPPError.declaration.dtor.no_destructor_temporary(tempEnt.creator, tempEnt));\n        //             return null;\n        //         }\n        //     }\n        // });\n    }\n\n    public createRuntimeConstruct(this: CompiledTemporaryDeallocator, parent: RuntimePotentialFullExpression) {\n        return new RuntimeTemporaryDeallocator(this, parent);\n    }\n\n    // public isTailChild(child: ExecutableConstruct) {\n    //     return {isTail: true};\n    // }\n}\n\nexport interface CompiledTemporaryDeallocator extends TemporaryDeallocator, SuccessfullyCompiled {\n\n    // readonly dtors: (CompiledMemberFunctionCall | null)[];\n\n}\n\nexport class RuntimeTemporaryDeallocator extends RuntimeConstruct<CompiledTemporaryDeallocator> {\n\n    private index = 0;\n    private justDestructed: boolean = false;\n    public readonly parent!: RuntimePotentialFullExpression; // narrows type from base class\n\n    public constructor(model: CompiledTemporaryDeallocator, parent: RuntimePotentialFullExpression) {\n        super(model, \"expression\", parent);\n    }\n\n    protected upNextImpl() {\n\n        // for (var key in this.temporaries){\n        //     var tempObjInst = this.temporaries[key].runtimeLookup(sim, inst.parent);\n        //     if (tempObjInst) {\n        //         sim.memory.deallocateTemporaryObject(tempObjInst, inst);\n        //     }\n        // }\n        // this.done(sim, inst);\n        // return true;\n\n        // TEMPORARY CODE THAT JUST DESTROYS ALL TEMPORARY OBJECTS ASSUMING NO DTORS\n        this.model.temporaryObjects.forEach(tempObj => this.sim.memory.deallocateTemporaryObject(tempObj.runtimeLookup(this.parent)));\n\n\n        // let dtors = this.model.dtors;\n        // let dtors : readonly null[] = this.model.temporaryObjects.map(t => null); // TODO CLASSES: replace this hack with above\n        // if (this.index < dtors.length) {\n        //     // let dtor = dtors[this.index];\n        //     // if (!this.justDestructed && dtor) {\n        //     //     dtor.createRuntimeConstruct(this);\n        //     //     this.sim.push(dtor);\n        //     //     this.justDestructed = true;\n        //     // }\n        //     // else {\n        //         this.sim.memory.deallocateTemporaryObject(this.model.temporaryObjects[this.index].runtimeLookup(this.parent));\n        //         ++this.index;\n        //         // this.justDestructed = false;\n        //     // }\n        // }\n        // else{\n        this.startCleanup();\n        // }\n    }\n\n    public stepForwardImpl() {\n\n    }\n}\n\n// TODO: FakeConstruct and FakeDeclaration are never used\n// var FakeConstruct = Class.extend({\n//     _name : \"FakeConstruct\",\n\n//     init: function () {\n\n//         this.id = CPPConstruct._nextId++;\n//         this.children = [];\n\n//         // this.i_notes = [];\n//         // this.i_hasErrors = false;\n\n//         // this.i_setContext(context);\n//     },\n\n\n//     getSourceReference : function() {\n//         return null;\n//     }\n// });\n\n// var FakeDeclaration = FakeConstruct.extend({\n//     _name : FakeDeclaration,\n\n//     init : function(name, type) {\n//         this.initParent();\n//         this.name = name;\n//         this.type = type;\n//     }\n// });\n\n\n\n\n// TODO: this is just the same as RuntimeConstruct right now\n// export type ExecutableRuntimeConstruct = RuntimeConstruct; // RuntimeFunction | RuntimeInstruction;\n// export interface ExecutableRuntimeConstruct extends RuntimeConstruct {\n//     // readonly containingRuntimeFunction : RuntimeFunction;\n// }\n// export abstract class RuntimeInstruction<C extends CompiledInstructionConstruct = CompiledInstructionConstruct> extends RuntimeConstruct<C> {\n\n//     public readonly containingRuntimeFunction: RuntimeFunction;\n//     public readonly parent!: ExecutableRuntimeConstruct; // narrows type from base class to be for sure defined\n\n//     public constructor (model: C, stackType: StackType, parent: ExecutableRuntimeConstruct) {\n//         super(model, stackType, parent);\n//         this.containingRuntimeFunction = parent.containingRuntimeFunction;\n//     }\n// }\n\n// export interface \n\n\n\n\n\n\n\n\n\n\n\n\n\n// /**\n//  * Represents either a dot or arrow operator at runtime.\n//  * Provides a context that may change how entities are looked up based\n//  * on the object the member is being accessed from. e.g. A virtual member\n//  * function lookup depends on the actual (i.e. dynamic) type of the object\n//  * on which it was called.\n//  */\n// export var RuntimeMemberAccess = RuntimeConstruct.extend({\n//     _name : \"RuntimeMemberAccess\",\n\n//     setObjectAccessedFrom : function(obj) {\n//         this.i_objectAccessedFrom = obj;\n//     },\n\n//     contextualReceiver : function(){\n//         return this.i_objectAccessedFrom;\n//     }\n// });\n\n// export var RuntimeNewInitializer = RuntimeConstruct.extend({\n//     _name : \"RuntimeNewInitializer\",\n\n//     setAllocatedObject : function(obj) {\n//         this.i_allocatedObject = obj;\n//     },\n//     getAllocatedObject : function() {\n//         return this.i_allocatedObject;\n//     }\n// });\n\n\n\n\nexport class GlobalObjectAllocator extends CPPConstruct {\n    public readonly construct_type = \"GlobalObjectAllocator\";\n\n\n    public readonly parent?: undefined;\n    public readonly globalObjects: readonly GlobalVariableDefinition[];\n\n    public constructor(context: ProgramContext, globalObjects: readonly GlobalVariableDefinition[]) {\n        super(context, undefined); // Has no AST\n        this.globalObjects = globalObjects;\n    }\n\n    protected onAttach(parent: this[\"parent\"]): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public createRuntimeConstruct(this: CompiledGlobalObjectAllocator, sim: Simulation) {\n        return new RuntimeGlobalObjectAllocator(this, sim);\n    }\n\n    // public isTailChild(child: ExecutableConstruct) {\n    //     return {isTail: true};\n    // }\n}\n\nexport interface CompiledGlobalObjectAllocator extends GlobalObjectAllocator, SuccessfullyCompiled {\n    readonly globalObjects: readonly CompiledGlobalVariableDefinition[];\n}\n\nexport class RuntimeGlobalObjectAllocator extends RuntimeConstruct<CompiledGlobalObjectAllocator> {\n\n    private index = 0;\n\n    public constructor(model: CompiledGlobalObjectAllocator, sim: Simulation) {\n        super(model, \"statement\", sim); // TODO: is \"statement\" the right stack type here? should I make a new one?\n    }\n\n    protected upNextImpl() {\n\n        // let dtors = this.model.dtors;\n        if (this.index < this.model.globalObjects.length) {\n            let objDef = this.model.globalObjects[this.index];\n            this.sim.memory.allocateStatic(objDef);\n            if (objDef.initializer) {\n                this.sim.push(objDef.initializer.createRuntimeInitializer(this));\n            }\n            ++this.index;\n        }\n        else {\n            this.startCleanup();\n        }\n    }\n\n    public stepForwardImpl() {\n        return false;\n    }\n}\n","import { BasicCPPConstruct, ASTNode, CPPConstruct, SuccessfullyCompiled, InvalidConstruct, TranslationUnitContext, FunctionContext, createFunctionContext, isBlockContext, BlockContext, createClassContext, ClassContext, isClassContext, createMemberSpecificationContext, MemberSpecificationContext, isMemberSpecificationContext, createImplicitContext, isMemberFunctionContext } from \"./constructs\";\nimport { CPPError, Note, CompilerNote, NoteHandler } from \"./errors\";\nimport { asMutable, assertFalse, assert, Mutable, Constructor, assertNever, DiscriminateUnion } from \"../util/util\";\nimport { Type, VoidType, ArrayOfUnknownBoundType, FunctionType, CompleteObjectType, ReferenceType, PotentialParameterType, BoundedArrayType, PointerType, builtInTypes, isBuiltInTypeName, PotentialReturnType, PeelReference, AtomicType, ArithmeticType, IntegralType, FloatingPointType, CompleteClassType, PotentiallyCompleteClassType, IncompleteClassType, PotentiallyCompleteObjectType, ReferredType, CompleteParameterType, IncompleteObjectType, CompleteReturnType, isAtomicType } from \"./types\";\nimport { Initializer, DefaultInitializer, DirectInitializer, InitializerASTNode, CompiledInitializer, DirectInitializerASTNode, CopyInitializerASTNode, CtorInitializer, CompiledCtorInitializer, ListInitializer, ListInitializerASTNode } from \"./initializers\";\nimport { LocalObjectEntity, LocalReferenceEntity, GlobalObjectEntity, NamespaceScope, VariableEntity, CPPEntity, FunctionEntity, BlockScope, ClassEntity, MemberObjectEntity, MemberReferenceEntity, MemberVariableEntity, ObjectEntityType } from \"./entities\";\nimport { ExpressionASTNode, NumericLiteralASTNode, createExpressionFromAST, parseNumericLiteralValueFromAST } from \"./expressions\";\nimport { BlockASTNode, Block, createStatementFromAST, CompiledBlock } from \"./statements\";\nimport { IdentifierASTNode, checkIdentifier } from \"./lexical\";\nimport { CPPObject, ArraySubobject } from \"./objects\";\nimport { RuntimeFunctionCall } from \"./functionCall\";\nimport { Expression } from \"./expressionBase\";\nimport { RuntimeFunction } from \"./functions\";\nimport { parseDeclarator, parseFunctionDefinition } from \"../parse/cpp_parser_util\";\n\nexport type StorageSpecifierKey = \"register\" | \"static\" | \"thread_local\" | \"extern\" | \"mutable\";\n\nexport type StorageSpecifierASTNode = readonly StorageSpecifierKey[];\n\nexport class StorageSpecifier extends BasicCPPConstruct<TranslationUnitContext, ASTNode> {\n    public readonly construct_type = \"storage_specifier\";\n\n    public readonly register?: true;\n    public readonly static?: true;\n    public readonly thread_local?: true;\n    public readonly extern?: true;\n    public readonly mutable?: true;\n\n    public readonly isEmpty: boolean;\n\n    public static createFromAST(ast: StorageSpecifierASTNode, context: TranslationUnitContext) {\n        return new StorageSpecifier(context, ast);\n\n    }\n\n    public constructor(context: TranslationUnitContext, specs: readonly StorageSpecifierKey[]) {\n        super(context, undefined)\n\n        let numSpecs = 0; // count specs separately to get a count without duplicates\n        specs.forEach((spec) => {\n            if (this[spec]) {\n                // If it was already true, we must be processing a duplicate\n                this.addNote(CPPError.declaration.storage.once(this, spec));\n            }\n            else {\n                asMutable(this)[spec] = true;\n                ++numSpecs;\n            }\n        });\n\n        if (this.static) {\n            this.addNote(CPPError.lobster.unsupported_feature(this, \"static\"));\n        }\n\n        if (this.extern) {\n            this.addNote(CPPError.lobster.unsupported_feature(this, \"extern\"));\n        }\n\n        if (this.thread_local) {\n            this.addNote(CPPError.lobster.unsupported_feature(this, \"thread_local\"));\n        }\n\n        if (this.register) {\n            this.addNote(CPPError.lobster.unsupported_feature(this, \"register\"));\n        }\n\n        if (this.mutable) {\n            this.addNote(CPPError.lobster.unsupported_feature(this, \"mutable\"));\n        }\n\n        // 0 specifiers is ok\n        // 1 specifier is ok\n        // 2 specifiers only ok if one is thread_local and the other is static/extern\n        // 3 or more specifiers are always incompatible\n        if (numSpecs < 2 ||\n            numSpecs == 2 && this.thread_local && (this.static || this.extern)) {\n            //ok\n        }\n        else {\n            this.addNote(CPPError.declaration.storage.incompatible(this, specs));\n        }\n\n        this.isEmpty = (numSpecs === 0);\n    }\n}\n\nexport interface CompiledStorageSpecifier extends StorageSpecifier, SuccessfullyCompiled {\n\n}\n\nexport type SimpleTypeName = string | \"char\" | \"short\" | \"int\" | \"bool\" | \"long\" | \"signed\" | \"unsigned\" | \"float\" | \"double\" | \"void\";\nexport type TypeSpecifierKey = \"const\" | \"volatile\" | \"signed\" | \"unsigned\" | \"enum\";\n\nexport type TypeSpecifierASTNode = readonly (TypeSpecifierKey | SimpleTypeName | ElaboratedTypeSpecifierASTNode | ClassDefinitionASTNode)[];\n\nexport class TypeSpecifier extends BasicCPPConstruct<TranslationUnitContext, ASTNode> {\n    public readonly construct_type = \"type_specifier\";\n\n    public readonly const?: true;\n    public readonly volatile?: true;\n    public readonly signed?: true;\n    public readonly unsigned?: true;\n    public readonly enum?: true;\n\n    public readonly typeName?: string;\n\n    public readonly baseType?: Type;\n\n    public static createFromAST(ast: TypeSpecifierASTNode, context: TranslationUnitContext) {\n        return new TypeSpecifier(context, ast);\n\n    }\n\n    public constructor(context: TranslationUnitContext, specs: TypeSpecifierASTNode) {\n        super(context, undefined);\n\n        let constCount = 0;\n        let volatileCount = 0;\n\n        specs.forEach((spec) => {\n\n            if (spec instanceof Object && spec.construct_type === \"elaborated_type_specifier\") {\n                this.addNote(CPPError.lobster.unsupported_feature(this, \"class declarations or elaborated type specifiers\"));\n                return;\n            }\n\n            if (spec instanceof Object && spec.construct_type === \"class_definition\") {\n                this.addNote(CPPError.lobster.unsupported_feature(this, \"inline class definitions\"));\n                return;\n            }\n\n            if (spec === \"enum\") {\n                asMutable(this).enum = true;\n                this.addNote(CPPError.lobster.unsupported_feature(this, \"mutable\"));\n                return;\n            }\n\n            // check to see if it's one of the possible type specifiers\n            let possibleSpecs: readonly TypeSpecifierKey[] = [\"const\", \"volatile\", \"signed\", \"unsigned\", \"enum\"];\n            let matchedSpec = possibleSpecs.find(s => s === spec);\n\n            if (matchedSpec) { // found a type specifier\n                if (this[matchedSpec]) {\n                    // it was a duplicate\n                    this.addNote(CPPError.declaration.typeSpecifier.once(this, matchedSpec));\n                }\n                else {\n                    // first time this spec seen, set to true\n                    asMutable(this)[matchedSpec] = true;\n                }\n            }\n            else { // It's a typename\n                if (this.typeName) { // already had a typename, this is a duplicate\n                    this.addNote(CPPError.declaration.typeSpecifier.one_type(this, [this.typeName, spec]));\n                }\n                else {\n                    asMutable(this).typeName = spec;\n                }\n            }\n        })\n\n        if (this.unsigned && this.signed) {\n            this.addNote(CPPError.declaration.typeSpecifier.signed_unsigned(this));\n        }\n\n        // If unsigned/signed specifier is present and there is no type name, default to int\n        if ((this.unsigned || this.signed) && !this.typeName) {\n            this.typeName = \"int\";\n        }\n\n        // If we don't have a typeName by now, it means the declaration didn't specify a type.\n        if (!this.typeName) {\n            return;\n        }\n\n        // Check to see if type name is one of the built in types\n        if (this.typeName && isBuiltInTypeName(this.typeName)) {\n            asMutable(this).baseType = new builtInTypes[this.typeName](this.const, this.volatile);\n            return;\n        }\n\n        // Otherwise, check to see if the type name is in scope\n        let customType = this.context.contextualScope.lookup(this.typeName);\n        if (customType?.declarationKind === \"class\") {\n            asMutable(this).baseType = customType.type.cvQualified(this.const, this.volatile);\n            return;\n        }\n\n        this.addNote(CPPError.type.typeNotFound(this, this.typeName));\n    }\n};\n\nexport interface CompiledTypeSpecifier<BaseType extends Type = Type> extends TypeSpecifier, SuccessfullyCompiled {\n    readonly baseType?: BaseType;\n}\n\ninterface OtherSpecifiers {\n    readonly friend?: boolean;\n    readonly typedef?: boolean;\n    readonly inline?: boolean;\n    readonly explicit?: boolean;\n    readonly virtual?: boolean;\n}\n\nexport interface DeclarationSpecifiersASTNode {\n    readonly typeSpecs: TypeSpecifierASTNode;\n    readonly storageSpecs: StorageSpecifierASTNode;\n    readonly elaboratedTypeSpecifiers: readonly ElaboratedTypeSpecifierASTNode[];\n    readonly classSpecifiers: readonly ClassDefinitionASTNode[];\n    readonly friend?: boolean;\n    readonly typedef?: boolean;\n    readonly inline?: boolean;\n    readonly explicit?: boolean;\n    readonly virtual?: boolean;\n}\n\nexport type DeclarationASTNode = TopLevelDeclarationASTNode | MemberDeclarationASTNode;\n\nexport type TopLevelDeclarationASTNode = NonMemberSimpleDeclarationASTNode | FunctionDefinitionASTNode | ClassDefinitionASTNode;\n\nexport type LocalDeclarationASTNode = NonMemberSimpleDeclarationASTNode | FunctionDefinitionASTNode | ClassDefinitionASTNode;\n\nexport type SimpleDeclarationASTNode = NonMemberSimpleDeclarationASTNode | MemberSimpleDeclarationASTNode;\n\nexport type Declaration = TopLevelSimpleDeclaration | LocalSimpleDeclaration | MemberDeclaration | FunctionDefinition | ClassDefinition | InvalidConstruct;\n\nexport type TopLevelDeclaration = TopLevelSimpleDeclaration | FunctionDefinition | ClassDefinition | InvalidConstruct;\n\nexport type TopLevelSimpleDeclaration =\n    NonObjectDeclaration |\n    GlobalVariableDefinition |\n    IncompleteTypeVariableDefinition;\n\nexport type LocalDeclaration = LocalSimpleDeclaration | FunctionDefinition | ClassDefinition | InvalidConstruct;\n\nexport type LocalSimpleDeclaration =\n    NonObjectDeclaration |\n    LocalVariableDefinition |\n    IncompleteTypeVariableDefinition;\n\nexport type MemberDeclaration = MemberSimpleDeclaration | FunctionDefinition | ClassDefinition | InvalidConstruct;\n\nexport type MemberSimpleDeclaration =\n    NonObjectDeclaration |\n    MemberVariableDeclaration |\n    IncompleteTypeMemberVariableDeclaration;// |\n    // ConstructorDeclaration |\n    // DestructorDeclaration;\n\nexport type NonObjectDeclaration = \n    UnknownTypeDeclaration |\n    VoidDeclaration |\n    TypedefDeclaration |\n    FriendDeclaration |\n    UnknownBoundArrayDeclaration |\n    FunctionDeclaration;\n\nexport type VariableDefinition = LocalVariableDefinition | GlobalVariableDefinition;\n\n\n\nconst TopLevelDeclarationConstructsMap = {\n    \"simple_declaration\": (ast: NonMemberSimpleDeclarationASTNode, context: TranslationUnitContext) => createTopLevelSimpleDeclarationFromAST(ast, context),\n    \"function_definition\": (ast: FunctionDefinitionASTNode, context: TranslationUnitContext) => {\n        return FunctionDefinition.createFromAST(ast, context);\n    },\n    \"class_definition\": (ast: ClassDefinitionASTNode, context: TranslationUnitContext) => ClassDefinition.createFromAST(ast, context)\n};\n\nexport function createTopLevelDeclarationFromAST<ASTType extends TopLevelDeclarationASTNode>(ast: ASTType, context: TranslationUnitContext) : ReturnType<(typeof TopLevelDeclarationConstructsMap)[ASTType[\"construct_type\"]]> {\n    return <any>TopLevelDeclarationConstructsMap[ast.construct_type](<any>ast, context);\n}\n\nfunction createTopLevelSimpleDeclarationFromAST(ast: NonMemberSimpleDeclarationASTNode, context: TranslationUnitContext) {\n    assert(!isBlockContext(context), \"Cannot create a top level declaration in a block context.\");\n    assert(!isClassContext(context), \"Cannot create a top level declaration in a class context.\");\n\n    // Need to create TypeSpecifier first to get the base type for the declarators\n    let typeSpec = TypeSpecifier.createFromAST(ast.specs.typeSpecs, context);\n    let baseType = typeSpec.baseType;\n    let storageSpec = StorageSpecifier.createFromAST(ast.specs.storageSpecs, context);\n\n    // Create an array of the individual declarations (multiple on the same line\n    // will be parsed as a single AST node and need to be broken up)\n    return ast.declarators.map((declAST) => {\n\n        // Create declarator and determine declared type\n        let declarator = Declarator.createFromAST(declAST, context, baseType);\n        let declaredType = declarator.type;\n\n        // Create the declaration itself. Which kind depends on the declared type\n        let declaration: TopLevelSimpleDeclaration;\n        if (!declaredType) {\n            declaration = new UnknownTypeDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (ast.specs.friend) {\n            declaration = new FriendDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (ast.specs.typedef) {\n            declaration = new TypedefDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (declaredType.isVoidType()) {\n            declaration = new VoidDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (declaredType.isFunctionType()) {\n            declaration = new FunctionDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n        }\n        else if (declaredType.isArrayOfUnknownBoundType()) {\n            // TODO: it may be possible to determine the bound from the initializer\n            declaration = new UnknownBoundArrayDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n        }\n        else if (declaredType.isCompleteObjectType() || declaredType.isReferenceType()) {\n            declaration = new GlobalVariableDefinition(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n            setInitializerFromAST(declaration, declAST.initializer, context);\n        }\n        else {\n            declaration = new IncompleteTypeVariableDefinition(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n        }\n\n        return declaration;\n    });\n}\n\nexport function setInitializerFromAST(declaration: VariableDefinition | MemberVariableDeclaration, initAST: DirectInitializerASTNode | CopyInitializerASTNode | ListInitializerASTNode | undefined, context: TranslationUnitContext) {\n    if (!initAST) {\n        declaration.setDefaultInitializer();\n    }\n    else if (initAST.construct_type === \"direct_initializer\") {\n        declaration.setDirectInitializer(initAST.args.map((a) => createExpressionFromAST(a, context)));\n    }\n    else if (initAST.construct_type === \"copy_initializer\") {\n        declaration.setCopyInitializer(initAST.args.map((a) => createExpressionFromAST(a, context)));\n    }\n    else if (initAST.construct_type === \"list_initializer\") {\n        declaration.setInitializerList(initAST.arg.elements.map((a) => createExpressionFromAST(a, context)));\n    }\n}\n\nconst LocalDeclarationConstructsMap = {\n    \"simple_declaration\": (ast: NonMemberSimpleDeclarationASTNode, context: BlockContext) => createLocalSimpleDeclarationFromAST(ast, context),\n    \"function_definition\": (ast: FunctionDefinitionASTNode, context: BlockContext) => FunctionDefinition.createFromAST(ast, context),\n    \"class_definition\": (ast: ClassDefinitionASTNode, context: BlockContext) => ClassDefinition.createFromAST(ast, context)\n};\n\nexport function createLocalDeclarationFromAST<ASTType extends LocalDeclarationASTNode>(ast: ASTType, context: BlockContext) : ReturnType<(typeof LocalDeclarationConstructsMap)[ASTType[\"construct_type\"]]>{\n    return <any>LocalDeclarationConstructsMap[ast.construct_type](<any>ast, context);\n}\n\nexport function createLocalSimpleDeclarationFromAST(ast: NonMemberSimpleDeclarationASTNode, context: TranslationUnitContext) {\n    assert(isBlockContext(context), \"A local declaration must be created in a block context.\");\n\n    // Need to create TypeSpecifier first to get the base type for the declarators\n    let typeSpec = TypeSpecifier.createFromAST(ast.specs.typeSpecs, context);\n    let baseType = typeSpec.baseType;\n    let storageSpec = StorageSpecifier.createFromAST(ast.specs.storageSpecs, context);\n\n    // Create an array of the individual declarations (multiple on the same line\n    // will be parsed as a single AST node and need to be broken up)\n    return ast.declarators.map((declAST) => {\n\n        // Create declarator and determine declared type\n        let declarator = Declarator.createFromAST(declAST, context, baseType);\n        let declaredType = declarator.type;\n\n        // Create the declaration itself. Which kind depends on the declared type\n        let declaration: LocalSimpleDeclaration;\n        if (!declaredType) {\n            declaration = new UnknownTypeDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (ast.specs.friend) {\n            declaration = new FriendDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (ast.specs.typedef) {\n            declaration = new TypedefDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (declaredType.isVoidType()) {\n            declaration = new VoidDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (declaredType.isFunctionType()) {\n            declaration = new FunctionDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n        }\n        else if (declaredType.isArrayOfUnknownBoundType()) {\n            // TODO: it may be possible to determine the bound from the initializer\n            declaration = new UnknownBoundArrayDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n        }\n        else if (declaredType.isCompleteObjectType() || declaredType.isReferenceType()) {\n            declaration = new LocalVariableDefinition(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n            setInitializerFromAST(declaration, declAST.initializer, context);\n        }\n        else {\n            declaration = new IncompleteTypeVariableDefinition(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n        }\n\n        return declaration;\n    });\n}\n\nconst MemberDeclarationConstructsMap = {\n    \"simple_member_declaration\": (ast: MemberSimpleDeclarationASTNode, context: MemberSpecificationContext) => createMemberSimpleDeclarationFromAST(ast, context),\n    \"function_definition\": (ast: FunctionDefinitionASTNode, context: MemberSpecificationContext) => createFunctionDeclarationFromDefinitionAST(ast, context)\n    // Note: function_definition includes ctor and dtor definitions\n};\n\nexport function createMemberDeclarationFromAST<ASTType extends MemberDeclarationASTNode>(ast: ASTType, context: MemberSpecificationContext) : ReturnType<(typeof MemberDeclarationConstructsMap)[ASTType[\"construct_type\"]]>{\n    return <any>MemberDeclarationConstructsMap[ast.construct_type](<any>ast, context);\n}\n\nexport function createMemberSimpleDeclarationFromAST(ast: MemberSimpleDeclarationASTNode, context: MemberSpecificationContext) {\n    // assert(isMemberSpecificationContext(context), \"A Member declaration must be created in a member specification context.\");\n\n    // Need to create TypeSpecifier first to get the base type for the declarators\n    let typeSpec = TypeSpecifier.createFromAST(ast.specs.typeSpecs, context);\n    let baseType = typeSpec.baseType;\n    let storageSpec = StorageSpecifier.createFromAST(ast.specs.storageSpecs, context);\n\n    // A constructor may have been parsed incorrectly due to an ambiguity in the grammar.\n    // For example, A(); might have been parsed as a function returning an A with a declarator\n    // that is missing its name. In that case, A would be the type specifier.\n    // So, we check the first declarator. If it has no name, and the type specifier\n    // identified the contextual class type, we know this mistake has occurred and we fix it.\n    if (baseType?.sameType(context.containingClass.type)) {\n        let testDeclarator = Declarator.createFromAST(ast.declarators[0], context, baseType);\n        if (!testDeclarator.name) {\n            typeSpec = TypeSpecifier.createFromAST(ast.specs.typeSpecs.filter(spec => spec !== context.containingClass.name), context);\n        }\n    }\n\n\n    // Create an array of the individual declarations (multiple on the same line\n    // will be parsed as a single AST node and need to be broken up)\n    return ast.declarators.map((declAST) => {\n\n        // Create declarator and determine declared type\n        let declarator = Declarator.createFromAST(declAST, context, baseType);\n        let declaredType = declarator.type;\n\n        // Create the declaration itself. Which kind depends on the declared type\n        let declaration: MemberSimpleDeclaration;\n        if (!declaredType) {\n            declaration = new UnknownTypeDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (ast.specs.friend) {\n            declaration = new FriendDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (ast.specs.typedef) {\n            declaration = new TypedefDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (declaredType.isVoidType()) {\n            declaration = new VoidDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n        }\n        else if (declaredType.isFunctionType()) {\n            declaration = new FunctionDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n        }\n        else if (declaredType.isArrayOfUnknownBoundType()) {\n            // TODO: it may be possible to determine the bound from the initializer\n            declaration = new UnknownBoundArrayDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n        }\n        else if (declaredType.isCompleteObjectType() || declaredType.isReferenceType()) {\n            declaration = new MemberVariableDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n            if (declAST.initializer) {\n                // member variables don't get anything set for a default initializer,\n                // so this if keeps us from doing anything unless there's an explicit\n                // initialization in the AST\n                setInitializerFromAST(declaration, declAST.initializer, context);\n            }\n        }\n        else {\n            declaration = new IncompleteTypeMemberVariableDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n        }\n\n        return declaration;\n    });\n}\n\nexport type AnalyticDeclaration = Declaration | Declarator | ParameterDeclaration;\n\nexport type TypedDeclarationKinds<T extends Type> = {\n    \"invalid_construct\": T extends undefined ? InvalidConstruct : never\n    \"unknown_type_declaration\": T extends undefined ? UnknownTypeDeclaration : never;\n    \"void_declaration\": T extends VoidType ? VoidDeclaration : never;\n    \"storage_specifier\": never;\n    \"friend_declaration\": never;\n    \"unknown_array_bound_declaration\": T extends ArrayOfUnknownBoundType ? TypedUnknownBoundArrayDeclaration<T> : never;\n    \"function_declaration\": T extends FunctionDeclaration[\"type\"] ? TypedFunctionDeclaration<T> : never;\n    \"global_variable_definition\": T extends GlobalVariableDefinition[\"type\"] ? TypedGlobalVariableDefinition<T> : never;\n    \"local_variable_definition\": T extends LocalVariableDefinition[\"type\"] ? TypedLocalVariableDefinition<T> : never;\n    \"incomplete_type_variable_definition\": T extends IncompleteTypeVariableDefinition[\"type\"] ? TypedIncompleteTypeVariableDefinition<T> : never;\n    \"parameter_declaration\": T extends ParameterDeclaration[\"type\"] ? TypedParameterDeclaration<T> : never;\n    \"declarator\": T extends Declarator[\"type\"] ? TypedDeclarator<T> : never;\n    \"function_definition\": T extends FunctionDeclaration[\"type\"] ? TypedFunctionDefinition<T> : never;\n    \"class_declaration\": T extends ClassDeclaration[\"type\"] ? TypedClassDeclaration<T> : never;\n    \"class_definition\": T extends ClassDefinition[\"type\"] ? TypedClassDefinition<T> : never;\n    \"member_variable_declaration\": T extends MemberVariableDeclaration[\"type\"] ? TypedMemberVariableDeclaration<T> : never;\n    \"incomplete_type_member_variable_declaration\": T extends IncompleteTypeMemberVariableDeclaration[\"type\"] ? TypedIncompleteTypeMemberVariableDeclaration<T> : never;\n    \n    // TODO: add rest of discriminants and their types\n};\n\nfunction test<T extends Type>() {\n    let x! : T & FunctionType;\n    let y! : FunctionType;\n    y = x;\n}\n\nexport type CompiledDeclarationKinds<T extends Type> = {\n    \"invalid_construct\": never; // these never compile\n    \"unknown_type_declaration\": never; // these never compile\n    \"void_declaration\": never; // these never compile\n    \"storage_specifier\": never; // currently unsupported\n    \"friend_declaration\": never; // currently unsupported\n    \"unknown_array_bound_declaration\": never;  // TODO: should this ever be supported? Can you ever have one of these compile?\n    \"function_declaration\": T extends FunctionDeclaration[\"type\"] ? CompiledFunctionDeclaration<T> : never;\n    \"global_variable_definition\": T extends GlobalVariableDefinition[\"type\"] ? CompiledGlobalVariableDefinition<T> : never;\n    \"local_variable_definition\": T extends LocalVariableDefinition[\"type\"] ? CompiledLocalVariableDefinition<T> : never;\n    \"incomplete_type_variable_definition\": never;\n    \"parameter_declaration\": T extends ParameterDeclaration[\"type\"] ? CompiledParameterDeclaration<T> : never;\n    \"declarator\": T extends Declarator[\"type\"] ? CompiledDeclarator<T> : never;\n    \"function_definition\": T extends FunctionDeclaration[\"type\"] ? CompiledFunctionDefinition<T> : never;\n    \"class_declaration\": T extends ClassDeclaration[\"type\"] ? CompiledClassDeclaration<T> : never;\n    \"class_definition\": T extends ClassDefinition[\"type\"] ? CompiledClassDefinition<T> : never;\n    \"member_variable_declaration\": T extends MemberVariableDeclaration[\"type\"] ? CompiledMemberVariableDeclaration<T> : never;\n    \"incomplete_type_member_variable_declaration\": never;\n    // TODO: add rest of discriminants and their types\n};\n\nexport type AnalyticTypedDeclaration<C extends AnalyticDeclaration, T extends Type = NonNullable<C[\"type\"]>> = TypedDeclarationKinds<T>[C[\"construct_type\"]];\nexport type AnalyticCompiledDeclaration<C extends AnalyticDeclaration, T extends Type = NonNullable<C[\"type\"]>> = CompiledDeclarationKinds<T>[C[\"construct_type\"]];\n\n\n\nexport interface NonMemberSimpleDeclarationASTNode extends ASTNode {\n    readonly construct_type: \"simple_declaration\";\n    readonly specs: DeclarationSpecifiersASTNode;\n    readonly declarators: readonly DeclaratorInitASTNode[];\n}\n\nexport abstract class SimpleDeclaration<ContextType extends TranslationUnitContext = TranslationUnitContext> extends BasicCPPConstruct<ContextType, SimpleDeclarationASTNode> {\n    // public readonly construct_type = \"simple_declaration\";\n    \n    public readonly typeSpecifier: TypeSpecifier;\n    public readonly storageSpecifier: StorageSpecifier;\n    public readonly declarator: Declarator;\n    public readonly otherSpecifiers: OtherSpecifiers;\n\n    public abstract readonly type?: Type;\n    public readonly name: string;\n\n    public readonly initializer?: Initializer;\n    public abstract readonly declaredEntity?: CPPEntity;\n\n    protected constructor(context: ContextType, ast: SimpleDeclarationASTNode | undefined, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers) {\n        super(context, ast);\n\n        this.attach(this.typeSpecifier = typeSpec);\n        this.attach(this.storageSpecifier = storageSpec);\n        this.otherSpecifiers = otherSpecs;\n        this.attach(this.declarator = declarator);\n\n        this.name = declarator.name!; // TODO: remove non-null assertion here once typescript supports assert based control flow analysis (soon)\n        if (!declarator.name) {\n            return assertFalse(\"Simple declarations must have a name.\");\n        }\n\n        // None of the simple declarations are member function declarations\n        // and thus none support the virtual keyword\n        if (otherSpecs.virtual) {\n            this.addNote(CPPError.declaration.virtual_prohibited(this));\n        }\n    }\n\n}\n\nexport interface TypedSimpleDeclaration<T extends Type> extends SimpleDeclaration {\n    readonly type: T;\n    readonly declaredEntity: CPPEntity<T>;\n}\n\nexport interface CompiledSimpleDeclaration<T extends Type = Type> extends TypedSimpleDeclaration<T>, SuccessfullyCompiled {\n    readonly typeSpecifier: CompiledTypeSpecifier;\n    readonly storageSpecifier: CompiledStorageSpecifier;\n    readonly declarator: CompiledDeclarator;\n\n    readonly initializer?: CompiledInitializer;\n}\n\nexport class UnknownTypeDeclaration extends SimpleDeclaration {\n    public readonly construct_type = \"unknown_type_declaration\";\n\n    public readonly type: undefined;\n    public readonly declaredEntity: undefined;\n\n    public constructor(context: TranslationUnitContext, ast: SimpleDeclarationASTNode | MemberSimpleDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n\n        // Add an error, but only if the declarator doesn't have one for some reason.\n        // It should already have one, assuming that's why there's no type.\n        // This will probably never be used.\n        if (!declarator.getContainedNotes().hasErrors) {\n            this.addNote(CPPError.declaration.unknown_type(this));\n        }\n    }\n\n}\n\nexport class VoidDeclaration extends SimpleDeclaration {\n    public readonly construct_type = \"void_declaration\";\n\n    public readonly type = VoidType.VOID;\n    public readonly declaredEntity: undefined;\n\n    public constructor(context: TranslationUnitContext, ast: SimpleDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n        this.addNote(CPPError.declaration.void_prohibited(this));\n    }\n\n}\n\nexport class TypedefDeclaration extends SimpleDeclaration {\n    public readonly construct_type = \"storage_specifier\";\n\n    public readonly type: undefined; // will change when typedef is implemented\n    public readonly declaredEntity: undefined;\n\n    public constructor(context: TranslationUnitContext, ast: SimpleDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n        this.addNote(CPPError.lobster.unsupported_feature(this, \"typedef\"));\n\n\n        // ADD THIS BACK IN WHEN TYPEDEFS ARE SUPPORTED\n        // if (this.storageSpecifier.numSpecs > 0 && this.isTypedef) {\n        //     this.addNote(CPPError.declaration.storage.typedef(this, this.storageSpec.ast))\n        // }\n    }\n\n}\n\nexport class FriendDeclaration extends SimpleDeclaration {\n    public readonly construct_type = \"friend_declaration\";\n\n    public readonly type: undefined; // will change when friend is implemented\n    public readonly declaredEntity: undefined;\n\n    public constructor(context: TranslationUnitContext, ast: SimpleDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n        this.addNote(CPPError.lobster.unsupported_feature(this, \"friend\"));\n\n        // TODO: Add back in when classes are supported\n        // if (!(this.contextualScope instanceof ClassScope)) {\n        //     this.addNote(CPPError.declaration.friend.outside_class(this));\n        // }\n\n        if (otherSpecs.virtual) {\n            this.addNote(CPPError.declaration.friend.virtual_prohibited(this));\n        }\n    }\n\n}\n\nexport class UnknownBoundArrayDeclaration extends SimpleDeclaration {\n    public readonly construct_type = \"unknown_array_bound_declaration\";\n\n    public readonly type: ArrayOfUnknownBoundType;\n    public readonly declaredEntity: undefined;\n\n    public constructor(context: TranslationUnitContext, ast: SimpleDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers, type: ArrayOfUnknownBoundType) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n\n        this.type = type;\n        this.addNote(CPPError.declaration.array.length_required(this));\n    }\n\n}\n\nexport interface TypedUnknownBoundArrayDeclaration<T extends ArrayOfUnknownBoundType> extends UnknownBoundArrayDeclaration {\n    readonly type: T;\n}\n\nexport class FunctionDeclaration extends SimpleDeclaration {\n    public readonly construct_type = \"function_declaration\";\n\n    public readonly type: FunctionType;\n    public readonly declaredEntity: FunctionEntity;\n    public readonly initializer: undefined;\n\n    public readonly parameterDeclarations: readonly ParameterDeclaration[];\n\n    public readonly isConstructor: boolean;\n    public readonly isDestructor: boolean;\n\n    public constructor(context: TranslationUnitContext, ast: SimpleDeclarationASTNode | undefined, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers, type: FunctionType) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n\n        this.type = type;\n        this.isConstructor = this.declarator.hasConstructorName;\n        this.isDestructor = this.declarator.hasDestructorName;\n        this.declaredEntity = new FunctionEntity(type, this);\n\n        assert(!!this.declarator.parameters, \"The declarator for a function declaration must contain declarators for its parameters as well.\");\n        this.parameterDeclarations = this.declarator.parameters!;\n\n        // If main, should have no parameters\n        // TODO: this check should be moved elsewhere\n        if (this.declaredEntity.isMain() && this.type.paramTypes.length > 0) {\n            this.addNote(CPPError.declaration.func.mainParams(this.declarator));\n        }\n\n\n        if (this.isConstructor) {\n            // constructors are not added to their scope. they technically \"have no name\"\n            // and can't be found through name lookup\n\n            if (this.type.receiverType?.isConst) {\n                this.addNote(CPPError.declaration.ctor.const_prohibited(this));\n            }\n\n            if (this.declarator.baseType) {\n                this.addNote(CPPError.declaration.ctor.return_type_prohibited(this));\n            }\n\n\n        }\n        else {\n            let entityOrError = this.context.contextualScope.declareFunctionEntity(this.declaredEntity);\n\n            if (entityOrError instanceof FunctionEntity) {\n                this.declaredEntity = entityOrError;\n            }\n            else {\n                this.addNote(entityOrError);\n            }\n        }\n\n        \n        // A function declaration has linkage. The linkage is presumed to be external, because Lobster does not\n        // support using the static keyword or unnamed namespaces to specify internal linkage.\n        // It has linkage regardless of whether this is a namespace scope or a block scope.\n        this.declaredEntity.registerWithLinker();\n\n        // if (!this.isMemberFunction && this.virtual){\n        //     this.addNote(CPPError.declaration.func.virtual_not_allowed(this));\n        // }\n\n        // this.checkOverloadSemantics();\n\n        \n    }\n\n\n\n    // checkOverloadSemantics : function(){\n    //     if (this.name === \"operator=\" || this.name === \"operator()\" || this.name === \"operator[]\"){\n    //         if (!this.isMemberFunction){\n    //             this.addNote(CPPError.declaration.func.op_member(this));\n    //         }\n    //     }\n\n    //     if (this.name === \"operator[]\" && this.params.length !== 1){\n    //         this.addNote(CPPError.declaration.func.op_subscript_one_param(this));\n    //     }\n    // },\n\n}\n\nexport interface TypedFunctionDeclaration<T extends FunctionType> extends FunctionDeclaration {\n    readonly type: T;\n    readonly declaredEntity: FunctionEntity<T>;\n    readonly declarator: TypedDeclarator<T>;\n}\n\nexport interface CompiledFunctionDeclaration<T extends FunctionType = FunctionType> extends TypedFunctionDeclaration<T>, SuccessfullyCompiled {\n    readonly typeSpecifier: CompiledTypeSpecifier;\n    readonly storageSpecifier: CompiledStorageSpecifier;\n\n    readonly declarator: CompiledDeclarator<T>;\n\n    readonly parameterDeclarations: readonly CompiledParameterDeclaration[];\n}\n\n\n        // constructors are not added to their scope. they technically \"have no name\"\n        // and can't be found through name lookup. Lobster achieves that by not adding\n        // them to the scope.\n\n\n// export class ConstructorDeclaration extends SimpleDeclaration implements FunctionDeclaration {\n//     public readonly construct_type = \"function_declaration\";\n\n//     public readonly type: FunctionType<VoidType>;\n//     public readonly declaredEntity: FunctionEntity;\n//     public readonly initializer: undefined;\n\n//     public readonly parameterDeclarations: readonly ParameterDeclaration[];\n\n//     public constructor(context: TranslationUnitContext, ast: SimpleDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n//         declarator: Declarator, otherSpecs: OtherSpecifiers, type: FunctionType<VoidType>) {\n\n//         super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n\n//         this.type = type;\n//         this.declaredEntity = new FunctionEntity(type, this);\n\n//         assert(this.declarator.hasConstructorName);\n        \n//         assert(!!this.declarator.parameters, \"The declarator for a constructor declaration must contain declarators for its parameters as well.\");\n//         this.parameterDeclarations = this.declarator.parameters!;\n\n//         // constructors are not added to their scope. they technically \"have no name\"\n//         // and can't be found through name lookup\n//     }\n\n// }\n\n// export interface TypedConstructorDeclaration extends ConstructorDeclaration {\n//     readonly type: FunctionType<VoidType>;\n//     readonly declaredEntity: FunctionEntity<FunctionType<VoidType>>;\n//     readonly declarator: TypedDeclarator<FunctionType<VoidType>>;\n// }\n\n// export interface CompiledConstructorDeclaration extends TypedConstructorDeclaration, SuccessfullyCompiled {\n//     readonly typeSpecifier: CompiledTypeSpecifier;\n//     readonly storageSpecifier: CompiledStorageSpecifier;\n    \n//     readonly declarator: CompiledDeclarator<FunctionType<VoidType>>;\n\n//     readonly parameterDeclarations: readonly CompiledParameterDeclaration[];\n// }\n\n\nexport type VariableDefinitionType = CompleteObjectType | ReferenceType;\n\nabstract class VariableDefinitionBase<ContextType extends TranslationUnitContext = TranslationUnitContext> extends SimpleDeclaration<ContextType> {\n\n    public readonly initializer?: Initializer;\n\n    public abstract readonly type: VariableDefinitionType;\n    public abstract readonly declaredEntity: VariableEntity;\n\n    private setInitializer(init: Initializer) {\n        assert(!this.initializer); // should only be called once\n        (<Mutable<this>>this).initializer = init;\n        this.attach(init);\n        this.initializerWasSet(init);\n        return this;\n    }\n\n    protected initializerWasSet(init: Initializer) {\n        // hook for subclasses\n    }\n\n    public setDefaultInitializer() {\n        return this.setInitializer(DefaultInitializer.create(this.context, this.declaredEntity));\n    }\n\n    public setDirectInitializer(args: readonly Expression[]) {\n        return this.setInitializer(DirectInitializer.create(this.context, this.declaredEntity, args, \"direct\"));\n    }\n\n    public setCopyInitializer(args: readonly Expression[]) {\n        return this.setInitializer(DirectInitializer.create(this.context, this.declaredEntity, args, \"copy\"));\n    }\n\n    public setInitializerList(args: readonly Expression[]) {\n        // TODO implement initializer lists\n        let init = ListInitializer.create(this.context, this.declaredEntity, args);\n        if (init instanceof InvalidConstruct) {\n            this.attach(init);\n            return;\n        }\n        return this.setInitializer(init);\n    }\n}\n\n// interface CompiledVariableDefinitionBase<ContextType extends TranslationUnitContext = TranslationUnitContext, T extends ObjectType | ReferenceType = ObjectType | ReferenceType> extends VariableDefinitionBase<ContextType>, SuccessfullyCompiled {\n\n//     readonly typeSpecifier: CompiledTypeSpecifier;\n//     readonly storageSpecifier: CompiledStorageSpecifier;\n//     readonly declarator: CompiledDeclarator<T>;\n\n//     readonly declaredEntity: VariableEntity<NoRefType<T>>;\n//     readonly initializer?: CompiledInitializer<NoRefType<T>>;\n// }\n\n\nexport class LocalVariableDefinition extends VariableDefinitionBase<BlockContext> {\n    public readonly construct_type = \"local_variable_definition\";\n\n\n    public readonly type: VariableDefinitionType;\n    public readonly declaredEntity: LocalObjectEntity | LocalReferenceEntity;\n\n    // public static predicate() : (decl: LocalVariableDefinition) => decl is TypedLocalVariableDefinition<T> {\n    //     return <(decl: CPPConstruct) => decl is TypedLocalVariableDefinition<T>>((decl) => decl instanceof LocalVariableDefinition);\n    // }\n\n    // public static typedPredicate<T extends VariableDefinitionType>(typePredicate: (o: VariableDefinitionType) => o is T) {\n    //     return <(decl: CPPConstruct) => decl is TypedLocalVariableDefinition<T>>((decl) => decl instanceof LocalVariableDefinition && !!decl.type && !!decl.declaredEntity && typePredicate(decl.type));\n    // }\n\n    public constructor(context: BlockContext, ast: NonMemberSimpleDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers, type: VariableDefinitionType) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n\n        this.type = type;\n\n        this.declaredEntity =\n            type.isReferenceType() ? new LocalReferenceEntity(type, this) : new LocalObjectEntity(type, this);\n\n\n        // Note extern unsupported error is added in the base Declaration class, so no need to add here\n\n        // All local declarations are also definitions, with the exception of a local declaration of a function\n        // or a local declaration with the extern storage specifier, but those are not currently supported by Lobster.\n        // This means a locally declared variable does not have linkage, and we don't need to do any linking stuff here.\n\n        // Attempt to add the declared entity to the scope. If it fails, note the error.\n        let entityOrError = context.contextualScope.declareVariableEntity(this.declaredEntity);\n\n        if (entityOrError instanceof LocalObjectEntity || entityOrError instanceof LocalReferenceEntity) {\n            this.declaredEntity = entityOrError;\n            this.context.functionLocals.registerLocalVariable(this.declaredEntity);\n        }\n        else {\n            this.addNote(entityOrError);\n        }\n    }\n\n\n    // public static kindPredicate = <(decl: CPPConstruct) => decl is LocalVariableDefinition>((decl) => decl instanceof LocalVariableDefinition);\n\n}\n\nexport interface TypedLocalVariableDefinition<T extends VariableDefinitionType> extends LocalVariableDefinition {\n    readonly type: T;\n    readonly declarator: TypedDeclarator<T>;\n    readonly declaredEntity: LocalObjectEntity<Exclude<T, ReferenceType>> | LocalReferenceEntity<Extract<T, ReferenceType>>;\n}\n\nexport interface CompiledLocalVariableDefinition<T extends VariableDefinitionType = VariableDefinitionType> extends TypedLocalVariableDefinition<T>, SuccessfullyCompiled {\n\n    readonly typeSpecifier: CompiledTypeSpecifier;\n    readonly storageSpecifier: CompiledStorageSpecifier;\n    readonly declarator: CompiledDeclarator<T>;\n\n    readonly initializer?: CompiledInitializer<T>;\n}\n\n\nexport class GlobalVariableDefinition extends VariableDefinitionBase<TranslationUnitContext> {\n    public readonly construct_type = \"global_variable_definition\";\n\n    public readonly type: VariableDefinitionType;\n    public readonly declaredEntity!: GlobalObjectEntity<CompleteObjectType>; // TODO definite assignment assertion can be removed when global references are supported\n\n    public constructor(context: TranslationUnitContext, ast: NonMemberSimpleDeclarationASTNode | undefined, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers, type: VariableDefinitionType) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n\n        this.type = type;\n\n        if (type.isReferenceType()) {\n            this.addNote(CPPError.lobster.unsupported_feature(this, \"globally scoped references\"));\n            return;\n        }\n\n        this.declaredEntity = new GlobalObjectEntity(type, this);\n\n        let entityOrError = context.contextualScope.declareVariableEntity(this.declaredEntity);\n\n        if (entityOrError instanceof GlobalObjectEntity) {\n            this.declaredEntity = entityOrError;\n            this.context.translationUnit.program.registerGlobalObjectDefinition(this.declaredEntity.qualifiedName, this);\n        }\n        else {\n            this.addNote(entityOrError);\n        }\n\n    }\n\n}\n\nexport interface TypedGlobalVariableDefinition<T extends VariableDefinitionType> extends GlobalVariableDefinition {\n    readonly type: T;\n    readonly declarator: TypedDeclarator<T>;\n    readonly declaredEntity: GlobalObjectEntity<Exclude<T, ReferenceType>>;\n}\n\nexport interface CompiledGlobalVariableDefinition<T extends VariableDefinitionType = VariableDefinitionType> extends TypedGlobalVariableDefinition<T>, SuccessfullyCompiled {\n\n    readonly typeSpecifier: CompiledTypeSpecifier;\n    readonly storageSpecifier: CompiledStorageSpecifier;\n    readonly declarator: CompiledDeclarator<T>;\n\n    readonly initializer?: CompiledInitializer<Exclude<T, ReferenceType>>;\n}\n\n/**\n * ParameterDeclarations are a bit different than other declarations because\n * they do not introduce an entity into their contextual scope. For example,\n * in the context of a function declaration that contains several parameter\n * declarations, there is no function body (as there would be for a function\n * definition) into whose scope the entities would even be introduced.\n * This contrasts to ParameterDefinitions that may introduce an entity.\n */\nexport class ParameterDeclaration extends BasicCPPConstruct<TranslationUnitContext, ParameterDeclarationASTNode> {\n    public readonly construct_type = \"parameter_declaration\";\n\n    public readonly typeSpecifier: TypeSpecifier;\n    public readonly storageSpecifier: StorageSpecifier;\n    public readonly declarator: Declarator;\n    public readonly otherSpecifiers: OtherSpecifiers;\n\n    public readonly name?: string; // parameter declarations need not provide a name\n    public readonly type?: PotentialParameterType;\n    public readonly declaredEntity?: LocalObjectEntity | LocalReferenceEntity;\n\n    public constructor(context: TranslationUnitContext, ast: ParameterDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers) {\n\n        super(context, ast);\n\n        this.attach(this.typeSpecifier = typeSpec);\n        this.attach(this.storageSpecifier = storageSpec);\n        this.attach(this.declarator = declarator);\n        this.otherSpecifiers = otherSpecs;\n\n        this.name = declarator.name;\n\n        if (!storageSpec.isEmpty) {\n            storageSpec.addNote(CPPError.declaration.parameter.storage_prohibited(storageSpec));\n        }\n\n        let type = declarator.type;\n\n        if (type && !type.isPotentialParameterType()) {\n            this.addNote(CPPError.declaration.parameter.invalid_parameter_type(this, type));\n            return;\n        }\n\n        this.type = type;\n\n        if (this.isPotentialParameterDefinition()) {\n            (<Mutable<this>>this).declaredEntity =\n                this.type.isReferenceType() ? new LocalReferenceEntity(this.type, this, true) :\n                    new LocalObjectEntity(this.type, this, true);\n        }\n\n    }\n\n    public static createFromAST(ast: ParameterDeclarationASTNode, context: TranslationUnitContext): ParameterDeclaration {\n\n        let storageSpec = StorageSpecifier.createFromAST(ast.specs.storageSpecs, context);\n\n        // Need to create TypeSpecifier first to get the base type first for the declarators\n        let typeSpec = TypeSpecifier.createFromAST(ast.specs.typeSpecs, context);\n\n        // Compile declarator for each parameter (of the function-type argument itself)\n        let declarator = Declarator.createFromAST(ast.declarator, context, typeSpec.baseType);\n\n        return new ParameterDeclaration(context, ast, typeSpec, storageSpec, declarator, ast.specs);\n    }\n\n    public isPotentialParameterDefinition(): this is ParameterDefinition {\n        return !!this.name && !!this.type && this.type.isPotentialParameterType();\n    }\n\n    public addEntityToScope(this: ParameterDefinition, context: BlockContext) {\n\n        // If there's no type, we can't introduce an entity. If there's no name, we don't either.\n        // A parameter in a function definition with no name is technically allowed (e.g. this may\n        // indicate the programmer intends not to use the parameter in the function implementation).\n\n\n        // Attempt to add the declared entity to the scope. If it fails, note the error.\n        let entityOrError = context.contextualScope.declareVariableEntity(this.declaredEntity);\n\n        if (entityOrError instanceof LocalObjectEntity || entityOrError instanceof LocalReferenceEntity) {\n            (<Mutable<ParameterDefinition>>this).declaredEntity = entityOrError;\n            context.functionLocals.registerLocalVariable(this.declaredEntity);\n        }\n        else {\n            this.addNote(entityOrError);\n        }\n    }\n}\n\nexport interface TypedParameterDeclaration<T extends PotentialParameterType = PotentialParameterType> extends ParameterDeclaration {\n    readonly type: T;\n    readonly declarator: TypedDeclarator<T>;\n    // readonly declaredEntity?: LocalObjectEntity<Exclude<T, ReferenceType>> | LocalReferenceEntity<Extract<T, ReferenceType>>;\n}\n\nexport interface CompiledParameterDeclaration<T extends PotentialParameterType = PotentialParameterType> extends TypedParameterDeclaration<T>, SuccessfullyCompiled {\n    readonly typeSpecifier: CompiledTypeSpecifier;\n    readonly storageSpecifier: CompiledStorageSpecifier;\n    readonly declarator: CompiledDeclarator<T>;\n\n}\n\nexport interface ParameterDefinition extends ParameterDeclaration {\n    readonly name: string;\n    readonly type: CompleteParameterType;\n    readonly declaredEntity: LocalObjectEntity | LocalReferenceEntity;\n}\n\nexport interface TypedParameterDefinition<T extends CompleteParameterType = CompleteParameterType> extends ParameterDeclaration {\n    readonly type: T;\n    readonly declarator: TypedDeclarator<T>;\n    readonly declaredEntity: LocalObjectEntity<Exclude<T, ReferenceType>> | LocalReferenceEntity<Extract<T, ReferenceType>>;\n}\n\nexport interface CompiledParameterDefinition<T extends CompleteParameterType = CompleteParameterType> extends TypedParameterDefinition<T>, SuccessfullyCompiled {\n    readonly typeSpecifier: CompiledTypeSpecifier;\n    readonly storageSpecifier: CompiledStorageSpecifier;\n    readonly declarator: CompiledDeclarator<T>;\n}\n\n\n\n\n/**\n * This class represents a definition of a variable with incomplete type. Such a definition is\n * ill-formed, because necessary details (such as object size) are missing from an incomplete type.\n * As such, this class always compiles with an error and does not create any entities. In effect,\n * the attempted definition of such a variable is acknowledged, but the variable is otherwise ignored\n * as if it was never declared.\n */\nexport class IncompleteTypeVariableDefinition extends SimpleDeclaration<TranslationUnitContext> {\n    public readonly construct_type = \"incomplete_type_variable_definition\";\n\n    public readonly type: IncompleteObjectType;\n    public readonly declaredEntity: undefined;\n\n    public constructor(context: TranslationUnitContext, ast: NonMemberSimpleDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers, type: IncompleteObjectType) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n\n        this.type = type;\n\n        this.addNote(CPPError.declaration.incomplete_type_definition_prohibited(this));\n    }\n}\n\nexport interface TypedIncompleteTypeVariableDefinition<T extends IncompleteObjectType> extends IncompleteTypeVariableDefinition {\n    readonly type: T;\n    readonly declarator: TypedDeclarator<T>;\n}\n\n\n\n\ninterface ArrayPostfixDeclaratorASTNode {\n    readonly kind: \"array\";\n    readonly size?: ExpressionASTNode;\n}\n\nexport interface ParameterDeclarationASTNode extends ASTNode {\n    readonly declarator: DeclaratorASTNode;\n    readonly specs: DeclarationSpecifiersASTNode;\n    readonly initializer?: InitializerASTNode;\n}\n\ninterface FunctionPostfixDeclaratorASTNode {\n    readonly kind: \"function\";\n    readonly size: ExpressionASTNode;\n    readonly args: readonly ParameterDeclarationASTNode[];\n    readonly const?: boolean;\n}\n\nexport interface DeclaratorASTNode extends ASTNode {\n    readonly pureVirtual?: boolean;\n    readonly sub?: DeclaratorASTNode; // parentheses\n    readonly pointer?: DeclaratorASTNode;\n    readonly reference?: DeclaratorASTNode;\n    readonly const?: boolean;\n    readonly volatile?: boolean;\n    readonly name?: IdentifierASTNode;\n    readonly postfixes?: readonly (ArrayPostfixDeclaratorASTNode | FunctionPostfixDeclaratorASTNode)[];\n}\n\ninterface DeclaratorInitASTNode extends DeclaratorASTNode {\n    readonly initializer?: InitializerASTNode;\n}\n\n// TODO: take baseType as a parameter to compile rather than init\nexport class Declarator extends BasicCPPConstruct<TranslationUnitContext, DeclaratorASTNode> {\n    public readonly construct_type = \"declarator\";\n\n    public readonly name?: string;\n    public readonly type?: Type;\n\n    public readonly baseType?: Type;\n    public readonly isPureVirtual?: true;\n\n    public readonly hasConstructorName : boolean = false;\n    public readonly hasDestructorName : boolean = false;\n\n    public readonly parameters?: readonly ParameterDeclaration[]; // defined if this is a declarator of function type\n\n    public static createFromAST(ast: DeclaratorASTNode, context: TranslationUnitContext, baseType: Type | undefined) {\n        return new Declarator(context, ast, baseType);\n    }\n\n    /**\n     * `Declarator.createFromAST()` should always be used to create Declarators, which delegates\n     * to this private constructor. Directly calling the constructor from the outside is not allowed.\n     * Since declarators are largely about processing an AST, it doesn't make much sense to create\n     * one without an AST.\n     */\n    private constructor(context: TranslationUnitContext, ast: DeclaratorASTNode, baseType: Type | undefined) {\n        super(context, ast);\n        this.baseType = baseType;\n\n        // let isMember = isA(this.parent, Declarations.Member);\n\n        if (ast.pureVirtual) { this.isPureVirtual = true; }\n\n        this.determineNameAndType(ast);\n    }\n\n    private determineNameAndType(ast: DeclaratorASTNode) {\n\n        let findName: DeclaratorASTNode | undefined = ast;\n        while (findName) {\n            if (findName.name) {\n                (<Mutable<this>>this).name = findName.name.identifier;\n                checkIdentifier(this, findName.name.identifier, this.notes);\n                break;\n            }\n            findName = findName.pointer || findName.reference || findName.sub;\n        }\n\n        if (this.name && isClassContext(this.context)) {\n            let className = this.context.containingClass.name;\n            className = className.replace(/<.*>/g, \"\"); // remove template parameters\n            if (this.name === className) {\n                (<Mutable<this>>this).hasConstructorName = true;\n            }\n            else if (this.name === \"~\" + className){\n                (<Mutable<this>>this).hasDestructorName = true;\n            }\n        }\n\n        let type: Type;\n\n        // If it's a ctor or dtor, then we'll implicitly add void.\n        // This is a bit of a Lobster hack, since technically in C++ ctors and dtors\n        // don't have any return type at all, but the effects are mostly the same.\n        if (this.baseType) {\n            type = this.baseType;\n        }\n        else if (this.hasConstructorName) {\n            type = VoidType.VOID;\n        }\n        else if (this.hasDestructorName) {\n            type = VoidType.VOID;\n        }\n        else {\n            // If there's no base type, we really can't do much.\n            this.addNote(CPPError.declaration.missing_type_specifier(this));\n            return;\n        }\n\n        \n        let first = true;\n        // let prevKind : \"function\" | \"reference\" | \"pointer\" | \"array\" | \"none\" = \"none\";\n\n        let decl: DeclaratorASTNode | undefined = ast;\n\n\n\n        while (decl) {\n\n            if (decl.postfixes) {\n\n                for (let i = decl.postfixes.length - 1; i >= 0; --i) {\n\n                    // A postfix portion of a declarator is only innermost if it's the leftmost one,\n                    // which would be closest to where the name would occur in the declarator. (Note\n                    // that this is also the last one processed here, since we iterate backward down to 0.)\n                    let postfix = decl.postfixes[i];\n\n                    if (postfix.kind === \"array\") {\n                        if (type.isBoundedArrayType()) {\n                            this.addNote(CPPError.declaration.array.multidimensional_arrays_unsupported(this));\n                            return;\n                        }\n\n                        if (!type.isArrayElemType()) {\n                            this.addNote(CPPError.declaration.array.invalid_element_type(this, type));\n                            return;\n                        }\n\n                        if (postfix.size) {\n\n                            if (postfix.size.construct_type === \"numeric_literal_expression\") {\n                                // If the size specified is a literal, just use its value as array length\n                                type = new BoundedArrayType(type, parseNumericLiteralValueFromAST(postfix.size));\n                            }\n                            else {\n                                // If a size is specified, that is not a literal, it must be an expression (via the grammar).\n                                // This size expression could e.g. be used for a dynamically allocated array. In that case,\n                                // we provide the AST of the size expression as part of the type so it can be used later by\n                                // a new expression to construct the size subexpression for the allocated array.\n                                type = new ArrayOfUnknownBoundType(type, postfix.size);\n\n                                // TODO: It is also possible the size is a compile-time constant expression, in which case\n                                // it should be evaluated to determine the size.\n                            }\n\n                            // TODO: move these errors elsewhere\n                            // if (postfix.size.construct_type !== \"literal\" && !(isInnermost && isA(this.parent, Expressions.NewExpression))){\n                            // //TODO need to evaluate size of array if it's a compile-time constant expression\n                            //     this.addNote(CPPError.declaration.array.literal_length_only(this));\n                            // }\n                            // else if (postfix.size.construct_type === \"literal\" && postfix.size.value == 0 && !(innermost && isA(this.parent, Expressions.NewExpression))){\n                            //     this.addNote(CPPError.declaration.array.zero_length(this));\n                            // }\n                            // else size was fine and nothing needs to be done\n                        }\n                        else {\n                            type = new ArrayOfUnknownBoundType(type);\n                        }\n\n                    }\n                    else if (postfix.kind === \"function\") {\n                        let fnType = this.processFunctionDeclarator(postfix, type, this);\n                        if (fnType) {\n                            type = fnType;\n                        }\n                        else {\n                            return;\n                        }\n                    }\n                    else {\n                        assertNever(postfix);\n                    }\n\n                    first = false;\n                }\n            }\n\n            // Process pointers/references next\n            // NOTE: this line should NOT be else if since the same AST node may\n            // have both postfixes and a pointer/reference\n            if (decl.pointer) {\n                if (!type.isPotentiallyCompleteObjectType()) {\n                    if (type.isReferenceType()) {\n                        this.addNote(CPPError.declaration.pointer.reference(this));\n                    }\n                    else if (type.isVoidType()) {\n                        this.addNote(CPPError.declaration.pointer.void(this))\n                    }\n                    else if (type.isFunctionType()) {\n                        this.addNote(CPPError.lobster.unsupported_feature(this, \"function pointers\"));\n                    }\n                    else {\n                        assertNever(type);\n                    }\n                    return;\n                }\n                type = new PointerType(type, decl[\"const\"], decl[\"volatile\"]);\n                decl = decl.pointer;\n            }\n            else if (decl.reference) {\n                if (!type.isPotentiallyCompleteObjectType()) {\n                    if (type.isReferenceType()) {\n                        this.addNote(CPPError.declaration.ref.ref(this));\n                    }\n                    else if (type.isVoidType() || type.isFunctionType()) {\n                        this.addNote(CPPError.declaration.ref.invalid_referred_type(this, type));\n                    }\n                    else {\n                        assertNever(type);\n                    }\n                    return;\n                }\n                type = new ReferenceType(type);\n                decl = decl.reference;\n            }\n            else if (decl.hasOwnProperty(\"sub\")) {\n                decl = decl.sub;\n            }\n            else {\n                break;\n            }\n\n            first = false;\n        }\n\n        (<Mutable<this>>this).type = type;\n\n        // If it's not a function type, the recorded parameters aren't meaningful\n        if (!type.isFunctionType()) {\n            delete (<Mutable<this>>this).parameters;\n        }\n\n        // if there wasn't any base type and we don't end up with a function type\n        // it means we have an attempt at declaring a member variable\n        // with the same name as the class that got defaulted to void as if\n        // it was a constructor without a type specifier, but then turned out\n        // not to be a viable constructor from the rest of the syntax. In\n        // this case, we want to add back in the missing type specifier\n        if (!this.baseType && !this.type?.isFunctionType()) {\n            delete (<Mutable<this>>this).type;\n            this.addNote(CPPError.declaration.missing_type_specifier(this));\n        }\n    }\n\n    private processFunctionDeclarator(postfix: FunctionPostfixDeclaratorASTNode, type: Type, notes: NoteHandler) : FunctionType | undefined {\n\n        if (type && !type.isPotentialReturnType()) {\n            if (type.isFunctionType()) {\n                notes.addNote(CPPError.declaration.func.return_func(this));\n            }\n            else if (type.isPotentiallyCompleteArrayType()) {\n                notes.addNote(CPPError.declaration.func.return_array(this));\n            }\n            else {\n                assertNever(type);\n            }\n            return;\n        }\n\n        let paramDeclarations = postfix.args.map((argAST) => ParameterDeclaration.createFromAST(argAST, this.context));\n        (<Mutable<this>>this).parameters = paramDeclarations;\n        this.attachAll(paramDeclarations);\n\n        let paramTypes = paramDeclarations.map(decl => {\n            if (!decl.type) { return decl.type; }\n            if (!decl.type.isBoundedArrayType()) { return decl.type; }\n            return decl.type.adjustToPointerType();\n        });\n\n        // A parameter list of just (void) specifies no parameters\n        if (paramTypes.length == 1 && paramTypes[0] && paramTypes[0].isVoidType()) {\n            paramTypes = [];\n        }\n        else {\n            // Otherwise void parameters are bad\n            for (let j = 0; j < paramTypes.length; ++j) {\n                let paramType = paramTypes[j];\n                if (paramType && paramType.isVoidType()) {\n                    notes.addNote(CPPError.declaration.func.void_param(paramDeclarations[j]));\n                }\n            }\n        }\n\n        if (!paramTypes.every(paramType => paramType)) {\n            return; // if some paramTypes aren't defined, can't do anything\n        }\n\n        if (!paramTypes.every(paramType => paramType && paramType.isPotentialParameterType())) {\n            notes.addNote(CPPError.declaration.func.some_invalid_parameter_types(this));\n            return;\n        }\n\n        // TODO clean up error immediately above and get rid of yucky cast below\n        return new FunctionType(type, <PotentialParameterType[]>paramTypes, this.context.containingClass && this.context.containingClass.type.cvQualified(!!postfix.const));\n    }\n\n}\n\nexport interface TypedDeclarator<T extends Type> extends Declarator {\n    type: T;\n}\n\nexport interface CompiledDeclarator<T extends Type = Type> extends TypedDeclarator<T>, SuccessfullyCompiled {\n    readonly parameters?: readonly CompiledParameterDeclaration[]; // defined if this is a declarator of function type\n}\n\n\nlet OVERLOADABLE_OPS: { [index: string]: true | undefined } = {};\n\n[\"new[]\"\n    , \"delete[]\"\n    , \"new\"\n    , \"delete\"\n    , \"->*\", \">>=\", \"<<=\"\n    , \"+=\", \"-=\", \"*=\", \",=\", \"%=\", \"^=\"\n    , \"&=\", \"|=\", \"<<\", \">>\", \"==\", \"!=\"\n    , \"<=\", \">=\", \"&&\", \"||\", \"++\", \"--\"\n    , \"->\", \"()\", \"[]\"\n    , \"+\", \"-\", \"*\", \"/\", \"%\", \"^\", \"&\"\n    , \"|\", \"~\", \"!\", \"=\", \"<\", \">\", \",\"].forEach(function (op) {\n        OVERLOADABLE_OPS[\"operator\" + op] = true;\n    });\n\nexport type FunctionBodyASTNode = BlockASTNode;\n\nexport interface FunctionDefinitionASTNode extends ASTNode {\n    readonly construct_type: \"function_definition\";\n    readonly specs: DeclarationSpecifiersASTNode;\n    readonly declarator: DeclaratorASTNode;\n    readonly ctor_initializer?: CtorInitializerASTNode;\n    readonly body: FunctionBodyASTNode;\n}\n\nexport class FunctionDefinition extends BasicCPPConstruct<FunctionContext, FunctionDefinitionASTNode> {\n    public readonly construct_type = \"function_definition\";\n    public readonly kind = \"FunctionDefinition\";\n\n    public readonly declaration: FunctionDeclaration;\n    public readonly name: string;\n    public readonly type: FunctionType;\n    public readonly parameters: readonly ParameterDeclaration[];\n    public readonly ctorInitializer?: CtorInitializer | InvalidConstruct;\n    public readonly body: Block;\n\n    public static createFromAST(ast: FunctionDefinitionASTNode, context: TranslationUnitContext, declaration: FunctionDeclaration) : FunctionDefinition;\n    public static createFromAST(ast: FunctionDefinitionASTNode, context: TranslationUnitContext, declaration?: FunctionDeclaration) : FunctionDefinition | InvalidConstruct;\n    public static createFromAST(ast: FunctionDefinitionASTNode, context: TranslationUnitContext, declaration?: FunctionDeclaration) {\n\n        if (!declaration) {\n            let decl = createFunctionDeclarationFromDefinitionAST(ast, context);\n            if (!(decl.construct_type === \"function_declaration\")) {\n                return new InvalidConstruct(context, ast, CPPError.declaration.func.definition_non_function_type);\n            }\n            declaration = decl;\n        }\n\n        // Create implementation and body block (before params and body statements added yet)\n        let functionContext = createFunctionContext(context, declaration.declaredEntity, context.containingClass?.type);\n        let body = new Block(functionContext, ast.body);\n        let bodyContext = body.context;\n\n        // Add declared entities from the parameters to the body block's context.\n        // As the context refers back to the implementation, local objects/references will be registerd there.\n        declaration.parameterDeclarations.forEach(paramDecl => {\n            if (paramDecl.isPotentialParameterDefinition()) {\n                paramDecl.addEntityToScope(bodyContext);\n            }\n            else {\n                paramDecl.addNote(CPPError.lobster.unsupported_feature(paramDecl, \"Unnamed parameter definitions.\"));\n            }\n        });\n\n        let ctorInitializer: CtorInitializer | InvalidConstruct | undefined;\n        if (declaration.isConstructor && isMemberFunctionContext(bodyContext)) {\n            if (ast.ctor_initializer) {\n                ctorInitializer = CtorInitializer.createFromAST(ast.ctor_initializer, bodyContext);\n            }\n            else {\n                ctorInitializer = new CtorInitializer(bodyContext, undefined, []);\n            }\n        }\n        else {\n            if (ast.ctor_initializer) {\n                ctorInitializer = new InvalidConstruct(bodyContext, ast.ctor_initializer, CPPError.declaration.ctor.init.constructor_only);\n            }\n        }\n        \n\n        // Manually add statements to body. (This hasn't been done because the body block was crated manually, not\n        // from the AST through the Block.createFromAST function. And we wait until now to do it so they will be\n        // added after the parameters.)\n        ast.body.statements.forEach(sNode => body.addStatement(createStatementFromAST(sNode, bodyContext)));\n\n        return new FunctionDefinition(functionContext, ast, declaration, declaration.parameterDeclarations, ctorInitializer, body);\n    }\n\n    // i_childrenToExecute: [\"memberInitializers\", \"body\"], // TODO: why do regular functions have member initializers??\n\n    public constructor(context: FunctionContext, ast: FunctionDefinitionASTNode, declaration: FunctionDeclaration, parameters: readonly ParameterDeclaration[], ctorInitializer: CtorInitializer | InvalidConstruct | undefined, body: Block) {\n        super(context, ast);\n\n        this.attach(this.declaration = declaration);\n        this.attachAll(this.parameters = parameters);\n        if (ctorInitializer) {\n            this.attach(this.ctorInitializer = ctorInitializer);\n        }\n        this.attach(this.body = body);\n\n        this.name = declaration.name;\n        this.type = declaration.type;\n\n        this.declaration.declaredEntity.setDefinition(this);\n\n        this.context.translationUnit.program.registerFunctionDefinition(this.declaration.declaredEntity.qualifiedName, this);\n\n        // TODO CLASSES: Add destructors, but this should be moved to Block, not just FunctionDefinition\n        // this.autosToDestruct = this.bodyScope.automaticObjects.filter(function(obj){\n        //     return isA(obj.type, Types.Class);\n        // });\n\n        // this.bodyScope.automaticObjects.filter(function(obj){\n        //   return isA(obj.type, Types.Array) && isA(obj.type.elemType, Types.Class);\n        // }).map(function(arr){\n        //   for(var i = 0; i < arr.type.length; ++i){\n        //     self.autosToDestruct.push(ArraySubobjectEntity.instance(arr, i));\n        //   }\n        // });\n\n        // this.autosToDestruct = this.autosToDestruct.map(function(entityToDestruct){\n        //     var dest = entityToDestruct.type.destructor;\n        //     if (dest){\n        //         var call = FunctionCall.instance({args: []}, {parent: self, scope: self.bodyScope});\n        //         call.compile({\n        //             func: dest,\n        //             receiver: entityToDestruct});\n        //         return call;\n        //     }\n        //     else{\n        //         self.addNote(CPPError.declaration.dtor.no_destructor_auto(entityToDestruct.decl, entityToDestruct));\n        //     }\n\n        // });\n    }\n\n    public createRuntimeFunction<T extends FunctionType<CompleteReturnType>>(this: CompiledFunctionDefinition<T>, parent: RuntimeFunctionCall, receiver?: CPPObject<CompleteClassType>): RuntimeFunction<T> {\n        return new RuntimeFunction(this, parent.sim, parent, receiver);\n    }\n\n    // callSearch : function(callback, options){\n    //     options = options || {};\n    //     // this.calls will be filled when the body is being compiled\n    //     // We assume this has already been done for all functions.\n\n    //     this.callClosure = {};\n\n    //     var queue = [];\n    //     queue.unshiftAll(this.calls.map(function(call){\n    //         return {call: call, from: null};\n    //     }));\n\n    //     var search = {\n    //         chain: []\n    //     };\n    //     while (queue.length > 0){\n    //         var next = (options.searchType === \"dfs\" ? queue.pop() : queue.shift());\n    //         var call = next.call;\n    //         search.chain = next;\n    //         if (search.stop){\n    //             break;\n    //         }\n    //         else if (search.skip){\n\n    //         }\n    //         else if (call.func.isLinked() && call.func.isStaticallyBound()){\n\n    //             if (call.staticFunction.decl === this){\n    //                 search.cycle = true;\n    //             }\n    //             else{\n    //                 search.cycle = false;\n    //                 for(var c = next.from; c; c = c.from){\n    //                     if (c.call.staticFunction.entityId === call.staticFunction.entityId){\n    //                         search.cycle = true;\n    //                         break;\n    //                     }\n    //                 }\n    //             }\n\n    //             callback && callback(search);\n\n    //             // If there's no cycle, we can push children\n    //             if (!search.cycle && isA(call.staticFunction.decl, FunctionDefinition)) {\n    //                 for(var i = call.staticFunction.decl.calls.length-1; i >= 0; --i){\n    //                     queue.push({call: call.staticFunction.decl.calls[i], from: next});\n    //                 }\n    //             }\n\n    //             this.callClosure[call.staticFunction.entityId] = true;\n    //         }\n\n    //     }\n    // },\n\n    // tailRecursionAnalysis : function(annotatedCalls){\n\n    //     // Assume not recursive at first, will be set to true if it is\n    //     this.isRecursive = false;\n\n    //     // Assume we can use constant stack space at first, will be set to false if not\n    //     this.constantStackSpace = true;\n\n    //     //from = from || {start: this, from: null};\n\n    //     // The from parameter sort of represents all functions which, if seen again, constitute recursion\n\n\n    //     //console.log(\"tail recursion analysis for: \" + this.name);\n    //     var self = this;\n    //     this.callSearch(function(search){\n\n    //         // Ignore non-cycles\n    //         if (!search.cycle){\n    //             return;\n    //         }\n\n    //         var str = \" )\";\n    //         var chain = search.chain;\n    //         var cycleStart = chain.call;\n    //         var first = true;\n    //         var inCycle = true;\n    //         var tailCycle = true;\n    //         var nonTailCycleCalls = [];\n    //         var firstCall = chain.call;\n    //         while (chain){\n    //             var call = chain.call;\n\n    //             // Mark all calls in the cycle as part of a cycle, except the original\n    //             if (chain.from || first){\n    //                 call.isPartOfCycle = true;\n    //             }\n\n    //             // Make sure we know whether it's a tail call\n    //             call.tailRecursionCheck();\n\n    //             // At time of writing, this will always be true due to the way call search works\n    //             if (call.staticFunction){\n    //                 // If we know what the call is calling\n\n\n    //                 str = (call.staticFunction.name + \", \") + str;\n    //                 if (call.isTail){\n    //                     str = \"t-\" + str;\n    //                 }\n    //                 if (!first && call.staticFunction === cycleStart.staticFunction){\n    //                     inCycle = false;\n    //                     str = \"( \" + str;\n    //                 }\n\n    //                 // This comes after possible change in inCycle because first part of cycle doesn't have to be tail\n    //                 if (inCycle){\n    //                     if (!annotatedCalls[call.id]){\n    //                         // TODO: fix this to not use semanticProblems\n    //                         // self.semanticProblems.addWidget(RecursiveCallAnnotation.instance(call, call.isTail, call.isTailReason, call.isTailOthers));\n    //                         annotatedCalls[call.id] = true;\n    //                     }\n    //                 }\n    //                 if (inCycle && !call.isTail){\n    //                     tailCycle = false;\n    //                     nonTailCycleCalls.push(call);\n    //                 }\n    //             }\n    //             else if (call.staticFunctionType){\n    //                 // Ok at least we know the type we're calling\n\n    //             }\n    //             else{\n    //                 // Uhh we don't know anything. This really shouldn't happen.\n    //             }\n    //             first = false;\n    //             chain = chain.from;\n    //         }\n    //         //console.log(str + (tailCycle ? \" tail\" : \" non-tail\"));\n\n    //         // We found a cycle so it's certainly recursive\n    //         self.isRecursive = true;\n\n    //         // If we found a non-tail cycle, it's not tail recursive\n    //         if (!tailCycle){\n    //             self.constantStackSpace = false;\n    //             if (!self.nonTailCycles){\n    //                 self.nonTailCycles = [];\n    //             }\n    //             self.nonTailCycles.push(search.chain);\n    //             self.nonTailCycle = search.chain;\n    //             self.nonTailCycleReason = str;\n\n    //             if(!self.nonTailCycleCalls){\n    //                 self.nonTailCycleCalls = [];\n    //             }\n    //             self.nonTailCycleCalls.pushAll(nonTailCycleCalls);\n    //         }\n    //     },{\n    //         searchType: \"dfs\"\n    //     });\n    //     //console.log(\"\");\n    //     //console.log(\"\");\n\n    //     self.tailRecursionAnalysisDone = true;\n\n\n    //     // TODO: fix this to not use semanticProblems\n    //     // this.semanticProblems.addWidget(RecursiveFunctionAnnotation.instance(this));\n    // },\n\n    // isTailChild : function(child){\n    //     if (child !== this.body){\n    //         return {isTail: false};\n    //     }\n    //     else if (this.autosToDestruct.length > 0){\n    //         return {\n    //             isTail: false,\n    //             reason: \"The highlighted local variables (\"\n\n    //             +\n    //             this.bodyScope.automaticObjects.filter(function(obj){\n    //                 return isA(obj.type, Types.Class);\n    //             }).map(function(obj){\n\n    //                 return obj.name;\n\n    //             }).join(\",\")\n    //                 +\n\n    //             \") have destructors that will run at the end of the function body (i.e. after any possible recursive call).\",\n    //             others: this.bodyScope.automaticObjects.filter(function(obj){\n    //                 return isA(obj.type, Types.Class);\n    //             }).map(function(obj){\n\n    //                 var decl = obj.decl;\n    //                 if (isA(decl, Declarator)){\n    //                     decl = decl.parent;\n    //                 }\n    //                 return decl;\n\n    //             })\n    //         }\n    //     }\n    //     else {\n    //         return {isTail: true};\n    //     }\n    // },\n    // describe : function(){\n    //     var exp = {};\n    //     exp.message = \"a function definition\";\n    //     return exp;\n    // }\n}\n\n/**\n * Attempts to create a `FunctionDeclaration` from the given function definition AST. Note this may\n * return an InvalidConstrucct if the given AST was malformed such that the declarator didn't actually specify\n * a function (e.g. missing parentheses). This is unfortunately allowed by the language grammar, so\n * we have to account for it.\n * @param ast \n * @param context \n */\nfunction createFunctionDeclarationFromDefinitionAST(ast: FunctionDefinitionASTNode, context: TranslationUnitContext) {\n\n    // Need to create TypeSpecifier first to get the base type for the declarators\n    let typeSpec = TypeSpecifier.createFromAST(ast.specs.typeSpecs, context);\n    let baseType = typeSpec.baseType;\n    let storageSpec = StorageSpecifier.createFromAST(ast.specs.storageSpecs, context);\n\n    let declarator = Declarator.createFromAST(ast.declarator, context, baseType);\n    let declaredType = declarator.type;\n\n    if (!declaredType?.isFunctionType()) {\n        return new InvalidConstruct(context, ast, CPPError.declaration.func.definition_non_function_type);\n    }\n    \n    let declAST: SimpleDeclarationASTNode = {\n        construct_type: \"simple_declaration\",\n        declarators: [ast.declarator],\n        specs: ast.specs,\n        source: ast.declarator.source\n    };\n\n    // if (declarator.hasConstructorName) {\n    //     assert(declaredType.isFunctionType());\n    //     assert(declaredType.returnType.isVoidType());\n    //     return new ConstructorDeclaration(context, declAST, typeSpec, storageSpec, declarator, ast.specs, <FunctionType<VoidType>>declaredType);\n    // }\n    // else {\n        return new FunctionDeclaration(context, declAST, typeSpec, storageSpec, declarator, ast.specs, declaredType);\n    // }\n\n}\n\nexport interface TypedFunctionDefinition<T extends FunctionType> extends FunctionDefinition {\n    readonly type: T;\n    readonly declaration: TypedFunctionDeclaration<T>;\n}\n\n\nexport interface CompiledFunctionDefinition<T extends FunctionType = FunctionType> extends TypedFunctionDefinition<T>, SuccessfullyCompiled {\n    readonly declaration: CompiledFunctionDeclaration<T>;\n    readonly name: string;\n    readonly parameters: readonly CompiledParameterDeclaration[];\n    readonly ctorInitializer?: CompiledCtorInitializer;\n    readonly body: CompiledBlock;\n}\n\n\n\n\nexport class ClassDeclaration extends BasicCPPConstruct<TranslationUnitContext, ASTNode> {\n    public readonly construct_type = \"class_declaration\";\n\n    public readonly name: string;\n    public readonly key: ClassKey;\n    public readonly type: PotentiallyCompleteClassType;\n    public readonly declaredEntity: ClassEntity;\n\n    public constructor(context: TranslationUnitContext, name: string, key: ClassKey) {\n        super(context, undefined);\n\n        this.name = name;\n        this.key = key;\n\n        this.declaredEntity = new ClassEntity(this);\n        this.type = this.declaredEntity.type;\n\n        let entityOrError = context.contextualScope.declareClassEntity(this.declaredEntity);\n\n        if (entityOrError instanceof ClassEntity) {\n            this.declaredEntity = entityOrError;\n        }\n        else {\n            this.addNote(entityOrError);\n        }\n\n\n    }\n}\n\nexport interface TypedClassDeclaration<T extends PotentiallyCompleteClassType> extends ClassDeclaration, SuccessfullyCompiled {\n    readonly type: T;\n}\n\nexport interface CompiledClassDeclaration<T extends PotentiallyCompleteClassType = PotentiallyCompleteClassType> extends TypedClassDeclaration<T>, SuccessfullyCompiled {\n\n}\n\n\nexport type ClassKey = \"struct\" | \"class\";\nexport interface ElaboratedTypeSpecifierASTNode extends ASTNode {\n    readonly construct_type: \"elaborated_type_specifier\";\n    readonly classKey: ClassKey;\n    readonly name: IdentifierASTNode;\n}\n\nexport interface ClassHeadASTNode extends ASTNode {\n    readonly construct_type: \"class_head\";\n    readonly classKey: ClassKey;\n    readonly name: IdentifierASTNode;\n    readonly bases: readonly BaseSpecifierASTNode[];\n}\n\nexport interface BaseSpecifierASTNode extends ASTNode {\n    readonly name: string;\n    readonly virtual?: true;\n    readonly access?: AccessSpecifier;\n}\n\nexport interface ClassDefinitionASTNode extends ASTNode {\n    readonly construct_type: \"class_definition\";\n    readonly head: ClassHeadASTNode;\n    readonly memberSpecs: readonly MemberSpecificationASTNode[];\n}\n\nexport type AccessSpecifier = \"private\" | \"protected\" | \"public\";\nexport interface MemberSpecificationASTNode extends ASTNode {\n    readonly construct_type: \"member_specification\";\n    readonly access?: AccessSpecifier;\n    readonly members: readonly MemberDeclarationASTNode[];\n}\n\nexport type MemberDeclarationASTNode =\n    MemberSimpleDeclarationASTNode |\n    FunctionDefinitionASTNode;\n\nexport interface MemberSimpleDeclarationASTNode extends ASTNode {\n    readonly construct_type: \"simple_member_declaration\";\n    readonly specs: DeclarationSpecifiersASTNode;\n    readonly declarators: readonly DeclaratorInitASTNode[];\n}\n\nexport interface CtorInitializerASTNode extends ASTNode {\n    readonly construct_type: \"ctor_initializer\";\n    readonly initializers: readonly MemberInitializerASTNode[];\n}\n\nexport interface MemberInitializerASTNode extends ASTNode {\n    readonly construct_type: \"member_initializer\";\n    readonly member: IdentifierASTNode;\n    readonly args: readonly ExpressionASTNode[];\n}\n\nexport class ClassDefinition extends BasicCPPConstruct<ClassContext, ClassDefinitionASTNode> {\n    public readonly construct_type = \"class_definition\";\n\n    // public readonly name: number = 2;\n    public readonly declaration: ClassDeclaration;\n    public readonly name: string;\n    public readonly type: CompleteClassType;\n\n    public readonly baseSpecifiers: readonly BaseSpecifier[];\n    public readonly memberDeclarations: readonly MemberDeclaration[];\n    public readonly memberDeclarationsByName: { [index: string] : MemberDeclaration | undefined } = {};\n    public readonly constructorDeclarations: readonly FunctionDeclaration[] = [];\n    \n    public readonly baseClass?: CompleteClassType;\n    \n    public readonly memberVariableEntities: readonly MemberVariableEntity[] = [];\n    public readonly memberObjectEntities: readonly MemberObjectEntity[] = [];\n    public readonly memberReferenceEntities: readonly MemberReferenceEntity[] = [];\n    public readonly memberEntitiesByName: { [index: string] : MemberVariableEntity | undefined } = {};\n    \n    public readonly defaultConstructor?: FunctionEntity<FunctionType<VoidType>>;\n    public readonly constructors: readonly FunctionEntity<FunctionType<VoidType>>[];\n\n    public readonly destructor?: FunctionEntity<FunctionType<VoidType>>;\n    \n    public readonly objectSize: number;\n\n    public readonly inlineMemberFunctionDefinitions: readonly FunctionDefinition[] = [];\n\n    private readonly implicitPublicContext: MemberSpecificationContext;\n    \n    //     public readonly members: MemberVariableDeclaration | MemberFunctionDeclaration | MemberFunctionDefinition;\n\n\n    // export interface SimpleDeclarationASTNode extends ASTNode {\n    //     readonly construct_type: \"simple_declaration\";\n    //     readonly specs: DeclarationSpecifiersASTNode;\n    //     readonly declarators: readonly DeclaratorInitASTNode[];\n    // }\n\n    public static createFromAST(ast: ClassDefinitionASTNode, tuContext: TranslationUnitContext) {\n\n        let classKey = ast.head.classKey;\n\n        // Default access level is private for class, public for struct\n        let defaultAccessLevel: AccessSpecifier = (classKey === \"class\" ? \"private\" : \"public\");\n\n        // Base specifiers are NOT created in the class context, since the base class\n        // entity it refers to is looked up without regard to what follows in the class.\n        // (And if it were dependent on the class scope, which is dependent on the base\n        // class scope, etc. there's circular problems.)\n        let bases = ast.head.bases.map(\n            baseAST => BaseSpecifier.createFromAST(baseAST, tuContext, defaultAccessLevel));\n\n        let declaration = new ClassDeclaration(tuContext, ast.head.name.identifier, classKey);\n\n        let templateType : AtomicType | undefined = undefined;\n        let tpMatch = ast.head.name.identifier.match(/<.*>/);\n        if (tpMatch) {\n            let templateParameter = tpMatch[0].slice(1, -1); // remove the < >\n            let t = new TypeSpecifier(tuContext, [templateParameter]).baseType;\n            if (t && isAtomicType(t)) {\n                templateType = t;\n            }\n        }\n\n        // Create class context based on class entity from the declaration\n        let classContext = createClassContext(tuContext, declaration.declaredEntity, bases[0]?.baseEntity, templateType);\n\n        let memDecls : MemberDeclaration[] = []\n        let functionDefsToCompile : [FunctionDefinitionASTNode, MemberSpecificationContext, FunctionDeclaration][] = [];\n\n        // Create and compile declarations for all members\n        ast.memberSpecs.forEach(memSpec => {\n            // This outer forEach goes through all \"sections\" of public, private, etc.\n\n            // Access level is as specified or the default\n            let accessLevel = memSpec.access ?? defaultAccessLevel;\n            let memberSpecContext = createMemberSpecificationContext(classContext, accessLevel);\n\n            // Compilation of a class definition occurs in two phases. First, declarations are\n            // compiled from top to bottom, such that order of declaration is significant. However,\n            // the definitions for functions that are defined inline are not compiled at this point\n            // and are instead compiled in a second phase. This allows the order of declaration of\n            // members to not matter with respect to places they are used inside the definition of\n            // other members, e.g. calling one member function within another member function's body.\n\n            // Phase 1: Initially create member declarations. This will NOT create/compile definitions.\n\n            memSpec.members.forEach((memberAST) => {\n                let decls = createMemberDeclarationFromAST(memberAST, memberSpecContext);\n                if (Array.isArray(decls)) {\n                    decls.forEach(memDecl => memDecls.push(memDecl))\n                }\n                else {\n                    memDecls.push(decls);\n                    if (decls.construct_type === \"function_declaration\" && memberAST.construct_type === \"function_definition\") {\n                        functionDefsToCompile.push([memberAST, memberSpecContext, decls]);\n                    }\n                }\n            });\n\n        });\n\n        // Create the actual class definition. This should exist before compiling member\n        // function definitions, in line with the treatment of the class type as complete\n        // inside those definitions.\n        let classDef = new ClassDefinition(classContext, ast, declaration, bases, memDecls);\n\n        // Phase 2: Go back through and compile member function definitions, and let the\n        // class know about them\n        functionDefsToCompile.forEach(([defAST, memberSpecContext, decl]) => {\n           classDef.attachInlineFunctionDefinition(FunctionDefinition.createFromAST(defAST, memberSpecContext, decl));\n        });\n\n        return classDef;\n    }\n\n    public constructor(context: ClassContext, ast: ClassDefinitionASTNode | undefined, declaration: ClassDeclaration, baseSpecs: readonly BaseSpecifier[], memberDeclarations: readonly MemberDeclaration[]) {\n        super(context, ast);\n\n        this.name = declaration.name;\n        this.implicitPublicContext = createImplicitContext(createMemberSpecificationContext(context, \"public\"));\n\n        this.attach(this.declaration = declaration);\n\n        this.attachAll(this.baseSpecifiers = baseSpecs);\n        \n        if (baseSpecs.length > 0 && baseSpecs[0].baseEntity?.isComplete()) {\n            this.baseClass = baseSpecs[0].baseEntity.type;\n        }\n\n        if (baseSpecs.length > 1) {\n            this.addNote(CPPError.class_def.multiple_inheritance(this));\n        }\n\n        this.attachAll(this.memberDeclarations = memberDeclarations);\n\n        // Identify member objects and member references\n        this.memberDeclarations.forEach(decl => {\n            if (decl.construct_type === \"member_variable_declaration\") {\n\n                asMutable(this.memberVariableEntities).push(decl.declaredEntity);\n\n                if (decl.declaredEntity instanceof MemberObjectEntity) {\n                    asMutable(this.memberObjectEntities).push(decl.declaredEntity);\n                }\n                else {\n                    asMutable(this.memberReferenceEntities).push(decl.declaredEntity);\n                }\n\n                // It's possible we have multiple declarations with the same name (if so,\n                // an error is generated elsewhere when they are added to the same scope).\n                // Here we only record the first one we find.\n                if (!this.memberDeclarationsByName[decl.name]) {\n                    this.memberDeclarationsByName[decl.name] = decl;\n                    this.memberEntitiesByName[decl.name] = decl.declaredEntity;\n                }\n            }\n        });\n\n        // CONSTRUCTORS\n        this.constructors = [];\n        memberDeclarations.forEach(mem => {\n            if (mem.construct_type === \"function_declaration\" && mem.isConstructor) {\n                asMutable(this.constructorDeclarations).push(mem);\n                // Need to check for redeclaration here since the constructors don't get\n                // added to a scope where we would normally detect that.\n                if (this.constructors.some(prevCtor => prevCtor.type.sameSignature(mem.type))) {\n                    mem.addNote(CPPError.declaration.ctor.previous_declaration(mem));\n                }\n                else {\n                    // Only add the unique ones to the list of constructors.\n                    // If we allowed duplicates with the same signature, it might\n                    // cause headaches later when e.g. this list is used as a set\n                    // of candidates for overload resolution.\n                    let ctorEntity = mem.declaredEntity;\n\n                    if (ctorEntity.returnsVoid()) {\n                        // If it doesn't have a void (dummy) return type, it's\n                        // not a valid ctor and we don't add it to the ctor entities\n                        asMutable(this.constructors).push(ctorEntity);\n    \n                        if (ctorEntity.type.paramTypes.length === 0) {\n                            (<Mutable<this>>this).defaultConstructor = ctorEntity;\n                        }\n                    }\n                }\n            }\n        });\n\n\n        // Compute size of objects of this class\n        let size = 0;\n        if (this.baseClass) {\n            size += this.baseClass.size;\n        }\n        this.memberObjectEntities.forEach(mem => size += mem.type.size);\n        this.objectSize = size;\n\n        // Set the definition for our declared entity, which also \n        this.declaration.declaredEntity.setDefinition(this);\n        assert(declaration.type.isCompleteClassType());\n        this.type = declaration.type;\n        \n        // This needs to happen after setting the definition on the entity above\n        this.createImplicitlyDefinedDefaultConstructorIfAppropriate();\n\n        this.context.program.registerClassDefinition(this.declaration.declaredEntity.qualifiedName, this);\n    }\n\n    public attachInlineFunctionDefinition(def: FunctionDefinition) {\n        asMutable(this.inlineMemberFunctionDefinitions).push(def);\n        this.attach(def);\n    }\n\n    private createImplicitlyDefinedDefaultConstructorIfAppropriate() {\n\n        // If there are any user-provided ctors, do not create the implicit\n        // default constructor.\n        if (this.constructors.some(ctor => !ctor.firstDeclaration.context.implicit)) {\n            return;\n        }\n\n        // If any data members are of reference type, do not create the\n        // implicit default constructor. (This would need to change if\n        // member variable initializers are added.)\n        if (this.memberReferenceEntities.length > 0) {\n            return;\n        }\n\n        // If base class is not default constructible\n        if (this.baseClass && !this.baseClass.isDefaultConstructible()) {\n            return;\n        }\n\n        // If base class is not default destructible\n        if (this.baseClass && !this.baseClass.isDestructible()) {\n            return;\n        }\n\n        // If any members are not default constructible\n        if (this.memberObjectEntities.some(memObj => !memObj.type.isDefaultConstructible())) {\n            return;\n        }\n\n        // If any members are not destructible\n        if (this.memberObjectEntities.some(memObj => !memObj.type.isDefaultConstructible())) {\n            return;\n        }\n        \n\n        // If any const data members do not have a user-provided\n        // default constructor, do not create the implicitly default constructor\n        // (this includes const non-class type objects).\n        // ^That's the language from the standard. But the basic idea of it is that\n        // we don't want any const members being default-initialized unless it's\n        // done in a way the user specified (e.g. atomic objects are initialized\n        // with junk, which is permanent since they're const).\n        if (this.memberObjectEntities.some(memObj => memObj.type.isConst && !memObj.type.isDefaultConstructible(true))) {\n            return;\n        }\n\n        let src = `${this.name}() {}`;\n        let iddc = <FunctionDefinition>FunctionDefinition.createFromAST(\n            parseFunctionDefinition(src),\n            this.implicitPublicContext);\n        this.attach(iddc);\n        let declEntity = iddc.declaration.declaredEntity;\n        assert(declEntity.returnsVoid()); // check cast above with assertion\n        (<Mutable<this>>this).defaultConstructor = declEntity;\n        asMutable(this.constructors).push(declEntity);\n    }\n\n    //     compileDeclaration : function(){\n    //         var ast = this.ast;\n\n\n    //         // Check that no other type with the same name already exists\n    //         try {\n    // //            console.log(\"addingEntity \" + this.name);\n    //             // class type. will be incomplete initially, but made complete at end of class declaration\n    //             this.type = Types.Class.createClassType(this.name, this.contextualScope, this.base && this.base.type, []);\n    //             this.classTypeClass = this.type;\n\n    //             this.classScope = this.type.classScope;\n\n    //             this.entity = TypeEntity.instance(this);\n\n    //             this.entity.setDefinition(this); // TODO add exception that allows a class to be defined more than once\n\n    //             this.contextualScope.addDeclaredEntity(this.entity);\n    //         }\n    //         catch(e){\n    //             if (isA(e, Note)){\n    //                 this.addNote(e);\n    //                 return;\n    //             }\n    //             else {\n    //                 throw e;\n    //             }\n    //         }\n\n\n\n\n    //         // Compile the members\n\n\n\n    //         // If there are no constructors, then we need an implicit default constructor\n    //         if(this.type.constructors.length == 0){\n    //             var idc = this.createImplicitDefaultConstructor();\n    //             if (idc){\n    //                 idc.compile();\n    //                 assert(!idc.hasErrors());\n    //             }\n    //         }\n\n    //         let hasCopyConstructor = false;\n    //         for(var i = 0; i < this.type.constructors.length; ++i){\n    //             if (this.type.constructors[i].decl.isCopyConstructor){\n    //                 hasCopyConstructor = true;\n    //                 break;\n    //             }\n    //         }\n\n\n    //         var hasUserDefinedAssignmentOperator = this.type.hasMember(\"operator=\", {paramTypes: [this.type], isThisConst:false});\n\n    //         // Rule of the Big Three\n    //         var bigThreeYes = [];\n    //         var bigThreeNo = [];\n    //         (hasCopyConstructor ? bigThreeYes : bigThreeNo).push(\"copy constructor\");\n    //         (hasUserDefinedAssignmentOperator ? bigThreeYes : bigThreeNo).push(\"assignment operator\");\n    //         (this.type.destructor ? bigThreeYes : bigThreeNo).push(\"destructor\");\n\n    //         if (0 < bigThreeYes.length && bigThreeYes.length < 3){\n    //             // If it's only because of an empty destructor, suppress warning\n    //             if (bigThreeYes.length === 1 && this.type.destructor && this.type.destructor.decl.emptyBody()){\n\n    //             }\n    //             else{\n    //                 this.addNote(CPPError.class_def.big_three(this, bigThreeYes, bigThreeNo));\n    //             }\n    //         }\n\n    //         this.customBigThree = bigThreeYes.length > 0;\n\n    //         if (!hasCopyConstructor) {\n    //             // Create implicit copy constructor\n    //             var icc = this.createImplicitCopyConstructor();\n    //             if (icc) {\n    //                 icc.compile();\n    //                 assert(!icc.hasErrors());\n    //             }\n    //         }\n\n    //         if (!this.type.destructor) {\n    //             // Create implicit destructor\n    //             var idd = this.createImplicitDestructor();\n    //             if (idd) {\n    //                 idd.compile();\n    //                 assert(!idd.hasErrors());\n    //             }\n    //         }\n    //         if (!hasUserDefinedAssignmentOperator){\n\n    //             // Create implicit assignment operator\n    //             var iao = this.createImplicitAssignmentOperator();\n    //             if (iao){\n    //                 iao.compile();\n    //                 assert(!iao.hasErrors());\n    //             }\n    //         }\n    //     },\n\n\n\n\n\n    //     createImplicitCopyConstructor : function(){\n    //         var self = this;\n    //         // If any subobjects are missing a copy constructor, do not create implicit copy ctor\n    //         if (!this.type.subobjectEntities.every(function(subObj){\n    //                 return !isA(subObj.type, Types.Class) ||\n    //                     subObj.type.getCopyConstructor(subObj.type.isConst);\n    //             })){\n    //             return;\n    //         }\n\n    //         // If any subobjects are missing a destructor, do not create implicit copy ctor\n    //         if (!this.type.subobjectEntities.every(function(subObj){\n    //                 return !isA(subObj.type, Types.Class) ||\n    //                     subObj.type.destructor;\n    //             })){\n    //             return;\n    //         }\n\n    //         var src = this.name + \"(const \" + this.name + \" &other)\";\n\n    //         if (this.type.subobjectEntities.length > 0){\n    //             src += \"\\n : \";\n    //         }\n    //         src += this.type.baseClassEntities.map(function(subObj){\n    //             return subObj.type.className + \"(other)\";\n    //         }).concat(this.type.memberEntities.map(function(subObj){\n    //             return subObj.name + \"(other.\" + subObj.name + \")\";\n    //         })).join(\", \");\n\n    //         src += \" {}\";\n    //         src = Lobster.cPlusPlusParser.parse(src, {startRule:\"member_declaration\"});\n\n    //         return ConstructorDefinition.instance(src, {parent:this, scope: this.classScope, containingClass: this.type, access:\"public\", implicit:true});\n    //     },\n\n    //     createImplicitAssignmentOperator : function () {\n    //         var self = this;\n    //         // Parameter will only be const if all subobjects have assignment ops that take const params\n    //         var canMakeConst = this.type.subobjectEntities.every(function(subObj){\n    //             return !isA(subObj.type, Types.Class) ||\n    //                 subObj.type.getAssignmentOperator(true);\n    //         });\n\n    //         var canMakeNonConst = canMakeConst || this.type.subobjectEntities.every(function(subObj){\n    //             return !isA(subObj.type, Types.Class) ||\n    //                 subObj.type.getAssignmentOperator(false);\n    //         });\n\n    //         // If we can't make non-const, we also can't make const, and we can't make any implicit assignment op\n    //         if (!canMakeNonConst){\n    //             return;\n    //         }\n    //         var constPart = canMakeConst ? \"const \" : \"\";\n\n    //         // If any data member is a reference, we can't make implicit assignment operator\n    //         if (!this.type.memberSubobjectEntities.every(function(subObj){\n    //                 return !isA(subObj.type, Types.Reference);\n    //             })){\n    //             return;\n    //         }\n\n    //         // If any non-class member is const (or array thereof), we can't make implicit assignment operator\n    //         if (!this.type.memberSubobjectEntities.every(function(subObj){\n    //                 //return (isA(subObj.type, Types.Class) || !subObj.type.isConst)\n    //                 //    && (!isA(subObj.type, Types.Array) || isA(subObj.type.elemType, Types.Class) || !subObj.type.elemType.isConst);\n    //                 return !subObj.type.isConst\n    //                     && (!isA(subObj.type, Types.Array) || !subObj.type.elemType.isConst);\n    //             })){\n    //             return;\n    //         }\n\n    //         var src = this.name + \" &operator=(\" + constPart + this.name + \" &rhs){\";\n\n    //         src += this.type.baseClassEntities.map(function(subObj){\n    //             return subObj.type.className + \"::operator=(rhs);\";\n    //         }).join(\"\\n\");\n\n    //         var mems = this.type.memberSubobjectEntities;\n    //         for(var i = 0; i < mems.length; ++i){\n    //             var mem = mems[i];\n    //             if (isA(mem.type, Types.Array)){\n    //                 var tempType = mem.type;\n    //                 var subscriptNum = isA(tempType.elemType, Types.Array) ? 1 : \"\";\n    //                 var subscripts = \"\";\n    //                 var closeBrackets = \"\";\n    //                 while(isA(tempType, Types.Array)){\n    //                     src += \"for(int i\"+subscriptNum+\"=0; i\"+subscriptNum+\"<\"+tempType.length+\"; ++i\"+subscriptNum+\"){\";\n    //                     subscripts += \"[i\"+subscriptNum+\"]\";\n    //                     closeBrackets += \"}\";\n    //                     tempType = tempType.elemType;\n    //                     subscriptNum += 1;\n    //                 }\n    //                 src += mem.name + subscripts + \" = rhs.\" + mem.name + \"\" + subscripts + \";\";\n    //                 src += closeBrackets;\n    //             }\n    //             else{\n    //                 src += mems[i].name + \" = rhs.\" + mems[i].name + \";\";\n    //             }\n    //         }\n    //         src += \"return *this;}\";\n    //         src = Lobster.cPlusPlusParser.parse(src, {startRule:\"member_declaration\"});\n    //         return FunctionDefinition.instance(src, {parent:this, scope: this.classScope, containingClass: this.type, access:\"public\", implicit:true});\n    //     },\n\n    //     createImplicitDestructor : function(){\n    //         var self = this;\n    //         // If any subobjects are missing a destructor, do not create implicit destructor\n    //         if (!this.type.subobjectEntities.every(function(subObj){\n    //                 return !isA(subObj.type, Types.Class) ||\n    //                     subObj.type.destructor;\n    //             })){\n    //             return;\n    //         }\n\n    //         var src = \"~\" + this.type.name + \"(){}\";\n    //         src = Lobster.cPlusPlusParser.parse(src, {startRule:\"member_declaration\"});\n    //         return DestructorDefinition.instance(src, {parent:this, scope: this.classScope, containingClass: this.type, access:\"public\", implicit:true});\n    //     },\n\n    //     createInstance : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    //         return RuntimeConstruct.instance(sim, this, {decl:0, step:\"decl\"}, \"stmt\", inst);\n    //     },\n\n    //     upNext : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n\n    //     },\n\n    //     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n\n    //     }\n\n    public isSuccessfullyCompiled() : this is CompiledClassDefinition {\n        return super.isSuccessfullyCompiled()\n    }\n}\n\nexport interface TypedClassDefinition<T extends CompleteClassType> extends ClassDefinition, SuccessfullyCompiled {\n    readonly type: T;\n    readonly declaration: TypedClassDeclaration<T>;\n}\n\nexport interface CompiledClassDefinition<T extends CompleteClassType = CompleteClassType> extends TypedClassDefinition<T>, SuccessfullyCompiled {\n    readonly declaration: CompiledClassDeclaration<T>;\n    readonly baseSpecifiers: readonly CompiledBaseSpecifier[];\n    // readonly memberDeclarations: readonly CompiledMemberDeclaration[]; // TODO\n}\n\nexport class BaseSpecifier extends BasicCPPConstruct<TranslationUnitContext, BaseSpecifierASTNode> {\n    public readonly construct_type = \"base_specifier\";\n\n    public readonly name: string;\n    public readonly accessLevel: AccessSpecifier;\n    public readonly virtual: boolean;\n    public readonly baseEntity?: ClassEntity;\n\n    public constructor(context: TranslationUnitContext, ast: BaseSpecifierASTNode, defaultAccessLevel: AccessSpecifier) {\n        super(context, ast);\n        this.name = ast.name;\n        this.accessLevel = ast.access ?? defaultAccessLevel;\n        this.virtual = !!ast.virtual;\n\n        if (this.virtual) {\n            this.addNote(CPPError.class_def.virtual_inheritance(this));\n        }\n\n        checkIdentifier(this, this.name, this);\n\n        let lookupResult = this.context.contextualScope.lookup(this.name);\n\n        if (!lookupResult) {\n            this.addNote(CPPError.iden.not_found(this, this.name));\n        }\n        else if (lookupResult.declarationKind === \"class\") {\n            this.baseEntity = lookupResult;\n\n            if (!this.baseEntity.type.isComplete(context)) {\n                this.addNote(CPPError.class_def.base_class_incomplete(this));\n            }\n        }\n        else {\n            this.addNote(CPPError.class_def.base_class_type(this));\n        }\n    }\n\n    public static createFromAST(ast: BaseSpecifierASTNode, context: TranslationUnitContext, defaultAccessLevel: AccessSpecifier) {\n        return new BaseSpecifier(context, ast, defaultAccessLevel);\n    }\n\n}\n\nexport interface CompiledBaseSpecifier extends BaseSpecifier, SuccessfullyCompiled {\n    readonly baseEntity: ClassEntity;\n}\n\nexport class MemberVariableDeclaration extends VariableDefinitionBase<MemberSpecificationContext> {\n    public readonly construct_type = \"member_variable_declaration\";\n\n    public readonly type: CompleteObjectType | ReferenceType;\n    public readonly declaredEntity: MemberVariableEntity;\n\n    public constructor(context: MemberSpecificationContext, ast: MemberSimpleDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers, type: CompleteObjectType | ReferenceType) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n\n        this.type = type;\n\n        this.declaredEntity =\n            type.isReferenceType() ? new MemberReferenceEntity(type, this) : new MemberObjectEntity(type, this);\n\n        // Attempt to add the declared entity to the scope. If it fails, note the error.\n        let entityOrError = context.contextualScope.declareVariableEntity(this.declaredEntity);\n\n        if (entityOrError instanceof MemberObjectEntity || entityOrError instanceof MemberReferenceEntity) {\n            this.declaredEntity = entityOrError;\n            \n            // No need to \"register\" the member declaration here as we might \"register\" a local\n            // variable definition with its containing function, since they will be accounted\n            // for when the class definition is created from the list of member declarations\n        }\n        else {\n            this.addNote(entityOrError);\n        }\n    }\n\n    protected initializerWasSet(init: Initializer) {\n        // Default initializers are allowed\n        if (!(init instanceof DefaultInitializer)) {\n            this.addNote(CPPError.lobster.unsupported_feature(this, \"member variable initializers\"));\n        }\n    }\n\n}\n\nexport interface TypedMemberVariableDeclaration<T extends ObjectEntityType> extends MemberVariableDeclaration {\n    readonly type: T;\n    readonly declarator: TypedDeclarator<T>;\n    readonly declaredEntity: MemberObjectEntity<Exclude<T, ReferenceType>> | MemberReferenceEntity<Extract<T, ReferenceType>>;\n}\n\nexport interface CompiledMemberVariableDeclaration<T extends ObjectEntityType = ObjectEntityType> extends TypedMemberVariableDeclaration<T>, SuccessfullyCompiled {\n\n    readonly typeSpecifier: CompiledTypeSpecifier;\n    readonly storageSpecifier: CompiledStorageSpecifier;\n    readonly declarator: CompiledDeclarator<T>;\n\n    readonly initializer?: CompiledInitializer<T>;\n}\n\n\n\n/**\n * This class represents a declaration of a member variable with incomplete type. Such a declaration is\n * ill-formed, because necessary details (such as object size) are missing from an incomplete type.\n * As such, this class always compiles with an error and does not create any entities. In effect,\n * the attempted declaration of such a member variable is acknowledged, but the member variable\n * is otherwise ignored as if it was never declared.\n */\nexport class IncompleteTypeMemberVariableDeclaration extends SimpleDeclaration<TranslationUnitContext> {\n    public readonly construct_type = \"incomplete_type_member_variable_declaration\";\n\n    public readonly type: IncompleteObjectType;\n    public readonly declaredEntity: undefined;\n\n    public constructor(context: MemberSpecificationContext, ast: MemberSimpleDeclarationASTNode, typeSpec: TypeSpecifier, storageSpec: StorageSpecifier,\n        declarator: Declarator, otherSpecs: OtherSpecifiers, type: IncompleteObjectType) {\n\n        super(context, ast, typeSpec, storageSpec, declarator, otherSpecs);\n\n        this.type = type;\n\n        this.addNote(CPPError.declaration.member.incomplete_type_declaration_prohibited(this));\n    }\n}\n\nexport interface TypedIncompleteTypeMemberVariableDeclaration<T extends IncompleteObjectType> extends IncompleteTypeMemberVariableDeclaration {\n    readonly type: T;\n    readonly declarator: TypedDeclarator<T>;\n}\n\n// export var MemberDeclaration = SimpleDeclaration.extend({\n//     _name: \"MemberDeclaration\",\n//     init: function(ast, context){\n//         assert(context);\n//         assert(isA(context.containingClass, Types.Class));\n//         assert(context.hasOwnProperty(\"access\"));\n//         this.initParent(ast, context);\n//     },\n\n//     i_createFromAST : function(ast, context) {\n//         MemberDeclaration._parent.i_createFromAST.apply(this, arguments);\n//         this.access = context.access;\n//         this.i_containingClass = context.containingClass;\n//     },\n\n//     i_determineStorage : function(){\n//         // Determine storage duration based on the kind of scope in which the declaration\n//         // occurs and any storage specifiers.\n//         if(this.storageSpec.static){\n//             this.storageDuration = \"static\";\n//         }\n//         else{\n//             this.storageDuration = \"automatic\";\n//         }\n//     },\n\n//     makeEntity: function(decl){\n\n//         // Note: we know it's not a function definition because that goes to the FunctionDefinition\n//         // class.  Thus any functions are not definitions.\n//         // Don't have to check for classes, for similar reasons.\n//         var isDefinition = !isA(decl.type, Types.Function)\n//             && !(this.storageSpec.extern && !(decl.initializer || decl.initializerList))\n//             && !this.typedef;\n\n//         this.isDefinition = isDefinition;\n\n//         var entity;\n//         if (isA(decl.type, Types.Function)){\n//             entity = MemberFunctionEntity.instance(decl, this.i_containingClass, this.virtual);\n//         }\n//         else if (this.storageDuration === \"static\"){\n//             entity = StaticEntity.instance(decl);\n//         }\n//         else{\n//             entity = MemberVariableEntity.instance(decl, this.i_containingClass);\n//             this.isDefinition = false; // TODO NEW: This is a hack. Since implementing a proper linking phase, static stuff may be broken.\n//         }\n\n//         if (this.isDefinition) {\n//             entity.setDefinition(this);\n//         }\n\n//         try {\n//             this.entities.push(entity);\n//             var options = {own: true};\n//             if (isA(entity, MemberFunctionEntity)) {\n//                 options.paramTypes = entity.type.paramTypes;\n//                 options.exactMatch = true;\n//                 options.noBase = true;\n//             }\n//             if ((isA(entity, MemberVariableEntity) || isA(entity, MemberFunctionEntity))){\n//                 // We don't check if a conflicting member already exists here - that will be\n//                 // done inside addMember and an exception will be thrown if there is a conflict\n//                 this.i_containingClass.addMember(entity); // this internally adds it to the class scope\n//             }\n//             return entity;\n//         }\n//         catch(e) {\n//             if (isA(e, Note)){\n//                 this.addNote(e);\n//                 return null;\n//             }\n//             else {\n//                 throw e;\n//             }\n//         }\n//     }\n// });\n\n\n// export var ConstructorDefinition = FunctionDefinition.extend({\n//     _name: \"ConstructorDefinition\",\n\n//     i_childrenToExecute: [\"memberInitializers\", \"body\"], // TODO: why do regular functions have member initializers??\n\n\n//     instance : function(ast, context){\n//         assert(context);\n//         assert(isA(context.containingClass, Types.Class));\n//         assert(context.hasOwnProperty(\"access\"));\n//         // Make sure it's actually a constructor\n//         if (ast.name.identifier !== context.containingClass.className){\n//             // oops was actually a function with missing return type\n//             return FunctionDefinition.instance(ast, context);\n//         }\n\n//         return ConstructorDefinition._parent.instance.apply(this, arguments);\n//     },\n\n//     compileDeclaration : function() {\n//         FunctionDefinition.compileDeclaration.apply(this, arguments);\n\n//         if (!this.hasErrors()){\n//             this.i_containingClass.addConstructor(this.entity);\n//         }\n//     },\n\n//     compileDeclarator : function(){\n//         var ast = this.ast;\n\n\n//         // NOTE: a constructor doesn't have a \"name\", and so we don't need to add it to any scope.\n//         // However, to make lookup easier, we give all constructors their class name plus the null character. LOL\n//         // TODO: this is silly. remove it pls :)\n//         this.name = this.i_containingClass.className + \"\\0\";\n\n//         // Compile the parameters\n//         var args = this.ast.args;\n//         this.params = [];\n//         this.paramTypes = [];\n//         for (var j = 0; j < args.length; ++j) {\n//             var paramDecl = Parameter.instance(args[j], {parent: this, scope: this.bodyScope});\n//             paramDecl.compile();\n//             this.params.push(paramDecl);\n//             this.paramTypes.push(paramDecl.type);\n//         }\n//         this.isDefaultConstructor = this.params.length == 0;\n\n//         this.isCopyConstructor = this.params.length == 1\n//         && (isA(this.paramTypes[0], this.i_containingClass) ||\n//         isA(this.paramTypes[0], Types.Reference) && isA(this.paramTypes[0].refTo, this.i_containingClass));\n\n\n//         // Give error for copy constructor that passes by value\n//         if (this.isCopyConstructor && isA(this.paramTypes[0], this.i_containingClass)){\n//             this.addNote(CPPError.declaration.ctor.copy.pass_by_value(this.params[0], this.paramTypes[0], this.params[0].name));\n//         }\n\n//         // I know this is technically wrong but I think it makes things run smoother\n//         this.type = Types.Function.instance(Types.Void.instance(), this.paramTypes);\n//     },\n\n//     compileDefinition : function(){\n//         var self = this;\n//         var ast = this.ast;\n\n//         if (!ast.body){\n//             this.addNote(CPPError.class_def.ctor_def(this));\n//             return;\n//         }\n\n//         this.compileCtorInitializer();\n\n//         // Call parent class version. Will handle body, automatic object destruction, etc.\n//         FunctionDefinition.compileDefinition.apply(this, arguments);\n//     },\n\n//     compileCtorInitializer : function(){\n//         var memInits = this.ast.initializer || [];\n\n//         // First, check to see if this is a delegating constructor.\n//         // TODO: check on whether someone could techinically declare a member variable with the same name\n//         // as the class and how that affects the logic here.\n//         var targetConstructor = null;\n//         for(var i = 0; i < memInits.length; ++i){\n//             if (memInits[i].member.identifier == this.i_containingClass.className){\n//                 targetConstructor = i;\n//                 break;\n//             }\n//         }\n\n//         // It is a delegating constructor\n//         if (targetConstructor !== null){\n//             targetConstructor = memInits.splice(targetConstructor, 1)[0];\n//             // If it is a delegating constructor, there can be no other memInits\n//             if (memInits.length === 0){ // should be 0 since one removed\n//                 var mem = MemberInitializer.instance(targetConstructor, {parent: this, scope: this.bodyScope});\n//                 mem.compile(ReceiverEntity.instance(this.i_containingClass));\n//                 this.memberInitializers.push(mem);\n//             }\n//             else{\n//                 this.addNote(CPPError.declaration.ctor.init.delegating_only(this));\n//             }\n//             return;\n//         }\n\n//         // It is a non-delegating constructor\n\n//         // If there is a base class subobject, initialize it\n//         var base;\n//         if (base = this.i_containingClass.getBaseClass()){\n//             // Check to see if there is a base class initializer.\n//             var baseInits = memInits.filter(function(memInit){\n//                 return memInit.member.identifier === base.className;\n//             });\n//             memInits = memInits.filter(function(memInit){\n//                 return memInit.member.identifier !== base.className;\n//             });\n\n//             if (baseInits.length > 1){\n//                 this.addNote(CPPError.declaration.ctor.init.multiple_base_inits(this));\n//             }\n//             else if (baseInits.length === 1){\n//                 var mem = MemberInitializer.instance(baseInits[0], {parent: this, scope: this.bodyScope});\n//                 mem.compile(this.i_containingClass.baseClassEntities[0]);\n//                 this.memberInitializers.push(mem);\n//             }\n//             else{\n//                 var mem = DefaultMemberInitializer.instance(this.ast, {parent: this, scope: this.bodyScope});\n//                 mem.compile(this.i_containingClass.baseClassEntities[0]);\n//                 this.memberInitializers.push(mem);\n//                 mem.isMemberInitializer = true;\n//             }\n//         }\n\n//         // Initialize non-static data members of the class\n\n//         // Create a map of name to initializer. Initially all initializers are null.\n//         var initMap = {};\n//         this.i_containingClass.memberSubobjectEntities.forEach(function(objMember){\n//             initMap[objMember.name] = objMember;\n//         });\n\n//         // Iterate through all the member initializers and associate them with appropriate member\n//         for(var i = 0; i < memInits.length; ++i){\n//             var memInit = memInits[i];\n\n//             // Make sure this type has a member of the given name\n//             var memberName = memInit.member.identifier;\n//             if (initMap.hasOwnProperty(memberName)) {\n//                 var mem = MemberInitializer.instance(memInit, {parent: this, scope: this.bodyScope});\n//                 mem.compile(initMap[memberName]);\n//                 initMap[memberName] = mem;\n//             }\n//             else{\n//                 this.addNote(CPPError.declaration.ctor.init.improper_member(this, this.i_containingClass, memberName));\n//             }\n//         }\n\n//         // Now iterate through members again in declaration order. Add associated member initializer\n//         // from above or default initializer if there wasn't one.\n\n//         var self = this;\n//         this.i_containingClass.memberSubobjectEntities.forEach(function(objMember){\n//             if (isA(initMap[objMember.name], MemberInitializer)){\n//                 self.memberInitializers.push(initMap[objMember.name]);\n//             }\n//             else if (isA(objMember.type, Types.Class) || isA(objMember.type, Types.Array)){\n//                 var mem = DefaultMemberInitializer.instance(self.ast, {parent: self, scope: self.bodyScope});\n//                 mem.compile(objMember);\n//                 self.memberInitializers.push(mem);\n//                 mem.isMemberInitializer = true;\n//             }\n//             else{\n//                 // No need to do anything for non-class types since default initialization does nothing\n//             }\n//         });\n//     },\n\n//     isTailChild : function(child){\n//         return {isTail: false};\n//     },\n\n//     describe : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         var desc = {};\n//         if (this.isDefaultConstructor){\n//             desc.message = \"the default constructor for the \" + this.i_containingClass.className + \" class\";\n//         }\n//         else if (this.isCopyConstructor){\n//             desc.message = \"the copy constructor for the \" + this.i_containingClass.className + \" class\";\n//         }\n//         else{\n//             desc.message = \"a constructor for the \" + this.i_containingClass.className + \" class\";\n//         }\n//         return desc\n//     }\n// });\n\n\n\n\n\n\n\n// export var DestructorDefinition = FunctionDefinition.extend({\n//     _name: \"DestructorDefinition\",\n\n//     init : function(ast, context){\n//         assert(context);\n//         assert(isA(context.containingClass, Types.Class));\n//         assert(context.hasOwnProperty(\"access\"));\n//         this.initParent(ast, context);\n//         this.access = context.access;\n//         this.i_containingClass = context.containingClass;\n//     },\n\n//     compileDeclaration : function() {\n//         FunctionDefinition.compileDeclaration.apply(this, arguments);\n//         this.i_containingClass.addDestructor(this.entity);\n//     },\n\n//     compileDeclarator : function() {\n//         var ast = this.ast;\n\n\n//         // Destructors do have names and can be found via name lookup\n//         this.name = \"~\" + this.i_containingClass.className;\n\n//         this.virtual = this.ast.virtual;\n\n//         // There are no parameters for a destructor\n//         this.params = [];\n//         this.paramTypes = [];\n\n//         // I know this is technically wrong but I think it makes things run smoother\n//         this.type = Types.Function.instance(Types.Void.instance(), this.paramTypes);\n//     },\n\n//     compileDefinition: function(){\n//         var self = this;\n//         var ast = this.ast;\n\n\n//         if (!ast.body){\n//             this.addNote(CPPError.class_def.dtor_def(this));\n//             return;\n//         }\n\n//         // Call parent class version. Will handle body, automatic object destruction, etc.\n//         FunctionDefinition.compileDefinition.apply(this, arguments);\n\n//         this.membersToDestruct = this.i_containingClass.memberSubobjectEntities.filter(function(entity){\n//             return isA(entity.type, Types.Class);\n//         }).map(function(entityToDestruct){\n//             var dest = entityToDestruct.type.destructor;\n//             if (dest){\n//                 var call = FunctionCall.instance({args: []}, {parent: self});\n//                 call.compile({\n//                     func: dest,\n//                     receiver: entityToDestruct});\n//                 return call;\n//             }\n//             else{\n//                 self.addNote(CPPError.declaration.dtor.no_destructor_member(entityToDestruct.decl, entityToDestruct, self.i_containingClass));\n//             }\n\n//         });\n\n//         this.basesToDestruct = this.i_containingClass.baseClassEntities.map(function(entityToDestruct){\n//             var dest = entityToDestruct.type.destructor;\n//             if (dest){\n//                 var call = FunctionCall.instance({args: []}, {parent: self});\n//                 call.compile({\n//                     func: dest,\n//                     receiver: entityToDestruct});\n//                 return call;\n//             }\n//             else{\n//                 self.addNote(CPPError.declaration.dtor.no_destructor_base(entityToDestruct.decl, entityToDestruct, self.i_containingClass));\n//             }\n\n//         });\n//     },\n\n//     upNext : Class.BEFORE(function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         if (inst.index === \"afterChildren\") {\n//             // These are pushed on a stack and so end up happening\n//             // in reverse order of the order they are pushed here.\n//             // Autos first, then members, then bases.\n//             this.basesToDestruct.forEach(function (dest){\n//                 dest.createAndPushInstance(sim, inst);\n//             });\n//             this.membersToDestruct.forEach(function (dest){\n//                 dest.createAndPushInstance(sim, inst);\n//             });\n//             // Auto destructors are handled in parent class\n//         }\n//     }),\n\n//     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         if (inst.index === \"afterDestructors\"){\n//             inst.index = \"done\";\n//         }\n//     },\n\n//     isTailChild : function(child){\n//         return {isTail: false};\n//     }\n// });\n\n\n\nexport class FunctionDefinitionGroup {\n    public readonly name: string;\n    private readonly _definitions: FunctionDefinition[];\n    public readonly definitions: readonly FunctionDefinition[];\n\n    public constructor(definitions: readonly FunctionDefinition[]) {\n        this.name = definitions[0].name;\n        this.definitions = this._definitions = definitions.slice();\n    }\n\n    public addDefinition(overload: FunctionDefinition) {\n        this._definitions.push(overload);\n    }\n}\n\nexport type LinkedDefinition = GlobalVariableDefinition | FunctionDefinitionGroup | ClassDefinition;","import { PotentialParameterType, Type, CompleteObjectType, sameType, ReferenceType, BoundedArrayType, Char, ArrayElemType, FunctionType, referenceCompatible, createClassType, PotentiallyCompleteClassType, CompleteClassType, PotentiallyCompleteObjectType, PeelReference, Completed, VoidType, CompleteReturnType } from \"./types\";\nimport { assert, Mutable, unescapeString, assertFalse, asMutable, assertNever } from \"../util/util\";\nimport { Observable } from \"../util/observe\";\nimport { RuntimeConstruct, isClassContext } from \"./constructs\";\nimport { PotentialFullExpression, RuntimePotentialFullExpression } from \"./PotentialFullExpression\";\nimport { LocalVariableDefinition, ParameterDefinition, GlobalVariableDefinition, LinkedDefinition, FunctionDefinition, ParameterDeclaration, FunctionDeclaration, ClassDefinition, FunctionDefinitionGroup, ClassDeclaration, MemberVariableDeclaration, SimpleDeclaration, CompiledClassDefinition } from \"./declarations\";\nimport { CPPObject, AutoObject, StaticObject, StringLiteralObject, TemporaryObject, ObjectDescription, MemberSubobject, ArraySubobject, BaseSubobject } from \"./objects\";\nimport { CPPError, CompilerNote } from \"./errors\";\nimport { Memory } from \"./runtimeEnvironment\";\nimport { Expression } from \"./expressionBase\";\nimport { TranslationUnit } from \"./Program\";\nimport { RuntimeFunction } from \"./functions\";\nimport { FunctionCall } from \"./functionCall\";\n\n\n\ninterface NormalLookupOptions {\n    readonly kind: \"normal\";\n    readonly noParent?: boolean;\n    readonly noBase?: boolean;\n}\n\ninterface ExactLookupOptions {\n    readonly kind: \"exact\";\n    readonly noParent?: boolean;\n    readonly noBase?: boolean;\n    readonly paramTypes: readonly PotentialParameterType[]\n    readonly receiverType?: CompleteClassType;\n}\n\nexport type NameLookupOptions = NormalLookupOptions | ExactLookupOptions;\n\n\n/**\n * Discriminated union over entities introduced into a scope by a declaration.\n * Discriminated by .declarationKind property.\n */\nexport type DeclaredEntity = VariableEntity | FunctionEntity | ClassEntity;\n\n/**\n * Possible results of name lookup.\n */\nexport type DeclaredScopeEntry = VariableEntity | FunctionOverloadGroup | ClassEntity;\n\n\nexport class Scope {\n\n    // private static HIDDEN = Symbol(\"HIDDEN\");\n    // private static NO_MATCH = Symbol(\"NO_MATCH\");\n\n    private readonly entities: { [index: string]: DeclaredScopeEntry | undefined } = {};\n    private readonly hiddenClassEntities: { [index: string]: ClassEntity | undefined } = {};\n    private readonly typeEntities: { [index: string]: ClassEntity | undefined } = {};\n\n    public readonly translationUnit: TranslationUnit;\n    public readonly parent?: Scope;\n\n    public constructor(translationUnit: TranslationUnit, parent?: Scope) {\n        assert(!parent || translationUnit === parent.translationUnit);\n        this.translationUnit = translationUnit;\n        this.parent = parent;\n    }\n\n    /** Attempts to declare a variable in this scope.\n     * @param newEntity The variable being declared.\n     * @returns Either the entity that was added, or an existing one already there, assuming it was compatible.\n     * If an error prevents the entity being added successfully, returns the error instead. (e.g. A previous\n     * declaration with the same name but a different type.)\n     */\n    public declareVariableEntity<EntityT extends VariableEntity>(newEntity: EntityT): EntityT | CompilerNote {\n        let entityName = newEntity.name;\n        let existingEntity = this.entities[entityName];\n\n        // No previous declaration for this name\n        if (!existingEntity) {\n            this.variableEntityCreated(newEntity);\n            return this.entities[entityName] = newEntity;\n        }\n\n        // If there is an existing class entity, it may be displaced and effectively hidden.\n        if (existingEntity.declarationKind === \"class\") {\n            // Note: because a class entity cannot displace another class entity, we can\n            // assume that there is no hidden class entity already\n            this.hiddenClassEntities[entityName] = existingEntity;\n            this.variableEntityCreated(newEntity);\n            return this.entities[entityName] = newEntity;\n        }\n\n        // Previous declaration for this name, but different kind of symbol\n        if (existingEntity.declarationKind !== \"variable\") {\n            return CPPError.declaration.symbol_mismatch(newEntity.firstDeclaration, newEntity);\n        }\n\n        // Previous declaration of variable with same name, attempt to merge\n        let entityOrError = newEntity.mergeInto(existingEntity);\n\n        // If we got the new entity back, it means it was added to the scope for the first time\n        if (entityOrError === newEntity) {\n            this.variableEntityCreated(newEntity);\n        }\n\n        // Cast below is based on trusting mergeInto will only ever return the\n        // existing entity if the types and types of entities matched.\n        return <EntityT | CompilerNote>entityOrError;\n    }\n\n    protected variableEntityCreated(newEntity: VariableEntity) {\n        // Do nothing. Subclasses may choose to register entities.\n        // e.g. Namespace scopes will register global object entities with linker.\n    }\n\n    /** Attempts to declare a function in this scope.\n     * @param newEntity - The function being declared.\n     * @returns Either the entity that was added, or an existing one already there, assuming it was compatible.\n     * If an error prevents the entity being added successfully, returns the error instead. (e.g. A previous\n     * function declaration with the same signature but a different return type.)\n     */\n    public declareFunctionEntity(newEntity: FunctionEntity) {\n        let entityName = newEntity.name;\n        let existingEntity = this.entities[entityName];\n\n        // No previous declaration for this name\n        if (!existingEntity) {\n            this.entities[entityName] = new FunctionOverloadGroup([newEntity]);\n            // this.functionEntityCreated(newEntity);\n            return newEntity;\n        }\n\n        // If there is an existing class entity, it may be displaced and effectively hidden.\n        if (existingEntity.declarationKind === \"class\") {\n            // Note: because a class entity cannot displace another class entity, we can\n            // assume that there is no hidden class entity already\n            this.hiddenClassEntities[entityName] = existingEntity;\n            this.entities[entityName] = new FunctionOverloadGroup([newEntity]);\n            // this.functionEntityCreated(newEntity);\n            return newEntity;\n        }\n\n        // Previous declaration for this name, but different kind of symbol\n        if (!(existingEntity instanceof FunctionOverloadGroup)) {\n            return CPPError.declaration.symbol_mismatch(newEntity.firstDeclaration, newEntity);\n        }\n\n        // Function overload group of previously existing functions, attempt to merge\n        let entityOrError = newEntity.mergeInto(existingEntity);\n\n        // If we got the new entity back, it means it was added to the scope for the first time\n        // if (entityOrError === newEntity) {\n        //     this.functionEntityCreated(newEntity);\n        // }\n\n        return entityOrError;\n    }\n\n    // protected functionEntityCreated(newEntity: FunctionEntity) {\n\n    // }\n\n    /** Attempts to declare a class in this scope. TODO docs: this documentation is out of date\n     * @param newEntity - The class being declared.\n     * @returns Either the entity that was added, or an existing one already there, assuming it was compatible.\n     * If an error prevents the entity being added successfully. (e.g. An error due to\n     * multiple definitions of the same class within a single translation unit.)\n     */\n    public declareClassEntity(newEntity: ClassEntity) {\n        let entityName = newEntity.name;\n        let existingEntity = this.entities[entityName];\n\n        // No previous declaration for this name\n        if (!existingEntity) {\n            this.classEntityCreated(newEntity);\n            return this.entities[entityName] = newEntity;\n        }\n\n        // Previous declaration for this name, but different kind of symbol\n        if (!(existingEntity instanceof ClassEntity)) {\n            return CPPError.declaration.symbol_mismatch(newEntity.firstDeclaration, newEntity);\n        }\n\n        // Note that we don't displace existing class entities as new variables or functions do.\n        // Instead, either the new/existing class entities are compatible (i.e. they do result in\n        // a multiple definition error), or they will generate an error.\n\n        // There was a previous class declaration, attempt to merge\n        let entityOrError = newEntity.mergeInto(existingEntity);\n\n        // If we got the new entity back, it means it was added to the scope for the first time\n        if (entityOrError === newEntity) {\n            this.classEntityCreated(newEntity);\n        }\n\n        return entityOrError;\n    }\n\n    protected classEntityCreated(newEntity: ClassEntity) {\n        // A function declaration has linkage. The linkage is presumed to be external, because Lobster does not\n        // support using the static keyword or unnamed namespaces to specify internal linkage.\n        // It has linkage regardless of whether this is a namespace scope or a block scope.\n        newEntity.registerWithLinker();\n    }\n\n    // protected declaredEntityAdded(ent: DeclaredEntity) {\n\n    // }\n\n    // public singleLookup(name: string, options: NameLookupOptions) {\n    //     var result = this.lookup(name, options);\n    //     if (Array.isArray(result)){\n    //         return result[0];\n    //     }\n    //     else{\n    //         return result;\n    //     }\n    // }\n\n    // public requiredLookup(name, options){\n    //     return this.i_requiredLookupImpl(this.lookup(name, options), name, options);\n    // }\n    // private i_requiredLookupImpl(res, name, options) {\n    //     options = options || {};\n    //     if (!res){\n    //         if (options.paramTypes || options.params){\n    //             throw SemanticExceptions.NoMatch.instance(this, name,\n    //                 options.paramTypes || options.params && options.params.map(function(p){return p.type;}),\n    //                 options.isThisConst\n    //             );\n    //         }\n    //         else{\n    //             throw SemanticExceptions.NotFound.instance(this, name);\n    //         }\n    //     }\n    //     else if(Array.isArray(res)){\n    //         if (res === Scope.HIDDEN){\n    //             throw SemanticExceptions.Hidden.instance(this, name,\n    //                 options.paramTypes || options.params && options.params.map(function(p){return p.type;}),\n    //                 options.isThisConst);\n    //         }\n    //         if (res.length === 0){\n    //             throw SemanticExceptions.NoMatch.instance(this, name,\n    //                 options.paramTypes || options.params && options.params.map(function(p){return p.type;}),\n    //                 options.isThisConst\n    //             );\n    //         }\n    //         if (res.length > 1){\n    //             throw SemanticExceptions.Ambiguity.instance(this, name);\n    //         }\n    //         return res[0];\n    //     }\n\n    //     return res;\n    // }\n\n    // // TODO: this should be a member function of the Program class\n    // public qualifiedLookup(names, options){\n    //     assert(Array.isArray(names) && names.length > 0);\n    //     var scope = this.sim.getGlobalScope();\n    //     for(var i = 0; scope && i < names.length - 1; ++i){\n    //         scope = scope.children[names[i].identifier];\n    //     }\n\n    //     if (!scope){\n    //         return null;\n    //     }\n\n    //     var name = names.last().identifier;\n    //     var result = scope.lookup(name, copyMixin(options, {qualified:true}));\n\n    //     // Qualified lookup suppresses virtual function call mechanism, so if we\n    //     // just looked up a MemberFunctionEntity, we create a proxy to do that.\n    //     if (Array.isArray(result)){\n    //         result = result.map(function(elem){\n    //             return elem instanceof MemberFunctionEntity ? elem.suppressedVirtualProxy() : elem;\n    //         });\n    //     }\n    //     return result;\n    // }\n\n    /**\n     * Performs unqualified name lookup of a given name in this scope. Returns the entity found, or undefined\n     * if no entity can be found. Note that the entity found may be a function overload group. Lookup may\n     * may search through parent scopes. The lookup process can be customized by providing a set of `NameLookupOptions` (\n     * see documentation for the `NameLookupOptions` type for more details.) If the entity found is not a\n     * function overload group, \"normal\" lookup is the same as \"exact lookup\" (the contextual parameter types\n     * and receiver type are ignored at that point even if provided.)\n     * @param name An unqualified name to be looked up.\n     * @param options A set of options to customize the lookup process.\n     * @returns \n     */\n    public lookup(name: string, options: NameLookupOptions = { kind: \"normal\" }): DeclaredScopeEntry | undefined {\n        options = options || {};\n\n        assert(!name.includes(\"::\"), \"Qualified name used with unqualified lookup function.\");\n\n        // Note: We do not need to check this.hiddenClassEntities here. If a class entity\n        // is hidden by another entity of the same name in the same scope, the only way to\n        // access it is through an elaborated type specifier\n        let ent = this.entities[name];\n\n        // If we don't have an entity in this scope and we didn't specify we\n        // wanted an own entity, look in parent scope (if there is one)\n        if (!ent && !options.noParent && this.parent) {\n            return this.parent.lookup(name, Object.assign({}, options, {noBase: true}));\n        }\n\n        // If we didn't find anything, return undefined\n        if (!ent) {\n            return undefined;\n        }\n\n        if (!(ent instanceof FunctionOverloadGroup)) {\n            // If it's not an function overload group, it's a single entity so return it\n            return ent;\n        }\n        else {\n            let viable = ent.overloads; // a set of potentially viable function overloads\n\n            // If we're looking for an exact match of parameter types\n            if (options.kind === \"exact\") {\n                const paramTypes = options.paramTypes;\n                const receiverType = options.receiverType;\n                viable = ent.overloads.filter((cand) => {\n\n                    // Check that parameter types match\n                    if (!cand.type.sameParamTypes(paramTypes))\n\n                        if (receiverType) {\n                            // if receiver type is defined, candidate must also have\n                            // a receiver and the presence/absence of const must match\n                            // NOTE: the actual receiver type does not need to match, just the constness\n                            return cand.type.receiverType && receiverType.isConst === cand.type.isConst;\n                        }\n                        else {\n                            // if no receiver type is defined, candidate must not have a receiver\n                            return !cand.type.receiverType;\n                        }\n                    return cand.type.sameParamTypes(paramTypes);\n                });\n\n                return new FunctionOverloadGroup(viable);\n            }\n\n            // // If we're looking for something that could be called with given parameter types, including conversions\n            // else if (options.paramTypes) {\n            //     // var params = options.params || options.paramTypes && fakeExpressionsFromTypes(options.paramTypes);\n            //     viable = overloadResolution(ent, options.paramTypes, options.receiverType).viable || [];\n            //     return viable[0];\n            //     // TODO - should give error if there's multiple elements i.e. an ambiguity\n            // }\n\n            return new FunctionOverloadGroup(viable);\n\n            // // If viable is empty, not found.\n            // if (viable && viable.length === 0){\n            //     // Check to see if we could have found it except for name hiding\n            //     if (!options.own && this.parent){\n            //         var couldHave = this.parent.lookup(name, options);\n            //         if (couldHave && (!Array.isArray(couldHave) || couldHave.length === 1 || couldHave === Scope.HIDDEN)){\n            //             if (options.noNameHiding){\n            //                 return couldHave;\n            //             }\n            //             else{\n            //                 return Scope.HIDDEN;\n            //             }\n            //         }\n            //     }\n            //     return Scope.NO_MATCH;\n            // }\n            // else{\n            //     return viable;\n            // }\n\n        }\n    }\n}\n\nexport class BlockScope extends Scope {\n\n}\n\nexport class NamespaceScope extends Scope {\n\n    public readonly name: string;\n    // private readonly children: { [index: string]: NamespaceScope | undefined };\n\n    public constructor(translationUnit: TranslationUnit, name: string, parent?: NamespaceScope) {\n        super(translationUnit, parent);\n        this.name = name;\n        // this.children = {};\n        // if (parent) {\n        //     parent.addChild(this);\n        // }\n    }\n\n    protected variableEntityCreated(newEntity: VariableEntity) {\n        super.variableEntityCreated(newEntity);\n        if (newEntity instanceof GlobalObjectEntity) {\n            this.translationUnit.context.program.registerGlobalObjectEntity(newEntity);\n        }\n    }\n\n    // private addChild(child: NamespaceScope) {\n    //     if (child.name) {\n    //         this.children[child.name] = child;\n    //     }\n    // }\n}\n\nexport class ClassScope extends Scope {\n\n    public readonly name: string;\n    public readonly base?: ClassScope;\n\n    /**\n     * \n     * @param translationUnit \n     * @param name The unqualified name of the class\n     * @param parent \n     * @param base \n     */\n    public constructor(translationUnit: TranslationUnit, name: string, parent?: Scope | ClassScope, base?: ClassScope) {\n        super(translationUnit, parent);\n        this.name = name;\n        this.base = base;\n    }\n\n    protected variableEntityCreated(newEntity: VariableEntity) {\n        super.variableEntityCreated(newEntity);\n        // TODO: add linkage when static members are implemented\n        // if (newEntity instanceof StaticMemberObjectEntity) {\n        //     this.translationUnit.context.program.registerGlobalObjectEntity(newEntity);\n        // }\n    }\n\n    /**\n     * Performs unqualified name lookup of a given name in this class scope. The\n     * behavior and customization options are similar to `lookup()` in the Scope\n     * class, except that the base class scope (if it exists) will be searched\n     * before parent scopes.\n     * @param name An unqualified name to be looked up.\n     * @param options A set of options to customize the lookup process.\n     */\n    public lookup(name: string, options: NameLookupOptions = { kind: \"normal\" }): DeclaredScopeEntry | undefined {\n        let ownMember = super.lookup(name, Object.assign({}, options, {noBase: true, noParent: true}));\n        if (ownMember) {\n            return ownMember;\n        }\n\n        let baseMember = this.base && !options.noBase && this.base.lookup(name, Object.assign({}, options, {noParent: true}));\n        if (baseMember) {\n            return baseMember;\n        }\n\n        let parentMember = this.parent && !options.noParent && this.parent.lookup(name, Object.assign({}, options, {noBase: true}));\n        if (parentMember) {\n            return parentMember;\n        }\n\n        // returns undefined\n    }\n\n    // /**\n    //  * Performs member name lookup of a given name in this class scope. Only names\n    //  * declared in this scope and potentially the base class scope will be considered.\n    //  * Parent scopes will not be considered. The lookup process can be customized\n    //  * by providing a set of `NameLookupOptions` (see documentation for the\n    //  * `NameLookupOptions` type for more details.)\n    //  * @param name An unqualified name to be looked up.\n    //  * @param options A set of options to customize the lookup process.\n    //  */\n    // public memberLookup(name: string, options: NameLookupOptions = { kind: \"normal\" }): DeclaredScopeEntry | undefined {\n    //     let ownMember = super.lookup(name, Object.assign({}, options, {noParent: true});\n    //     if (ownMember) {\n    //         return ownMember;\n    //     }\n    //     else {\n    //         return \n    //     }\n    // }\n}\n\nexport interface EntityDescription {\n    name: string;\n    message: string;\n}\n\nexport type EntityID = number;\n\nexport abstract class CPPEntity<T extends Type = Type> {\n    private static _nextEntityId = 0;\n\n    public readonly observable = new Observable(this);\n\n    public readonly entityId: number;\n    public readonly type: T;\n\n\n    /**\n     * Most entities will have a natural type, but a few will not (e.g. namespaces). In this case,\n     * I haven't decided what to do.\n     * TODO: fix this - there should probably be a subtype or interface for a TypedEntity\n     */\n    public constructor(type: T) {\n        this.entityId = CPPEntity._nextEntityId++;\n        this.type = type;\n    }\n\n    public abstract describe(): EntityDescription;\n\n    // // TODO: does this belong here?\n    // public isLibraryConstruct() {\n    //     return false\n    // }\n\n    // // TODO: does this belong here?\n    // public isLibraryUnsupported() {\n    //     return false;\n    // }\n\n    //TODO: function for isOdrUsed()?\n}\n\nexport abstract class NamedEntity<T extends Type = Type> extends CPPEntity<T> {\n\n    public readonly name: string;\n\n    /**\n     * All NamedEntitys will have a name, but in some cases this might be \"\". e.g. an unnamed namespace.\n     */\n    public constructor(type: T, name: string) {\n        super(type);\n        this.name = name;\n    }\n}\n\nexport type DeclarationKind = \"variable\" | \"function\" | \"class\";\n\nabstract class DeclaredEntityBase<T extends Type = Type> extends NamedEntity<T> {\n\n    // /**\n    //  * If neither entity is defined, does nothing.\n    //  * If exactly one entity is defined, gives that definition to the other one as well.\n    //  * If both entities are defined, throws an exception. If the entities are functions with\n    //  * the same signature and different return types, throws an exception.\n    //  * REQUIRES: Both entities should have the same type. (for functions, the same signature)\n    //  * @param entity1 - An entity already present in a scope.\n    //  * @param entity2 - A new entity matching the original one.\n    //  * @throws {Note}\n    //  */\n    // public static merge(entity1: DeclaredEntity, entity2: DeclaredEntity) {\n\n    //     // TODO: Add support for \"forward declarations\" of a class/struct\n\n    //     // Special case: ignore magic functions\n    //     if (entity1 instanceof MagicFunctionEntity || entity2 instanceof MagicFunctionEntity) {\n    //         return;\n    //     }\n\n    //     // Special case: if both are definitions for the same class, it's ok ONLY if they have exactly the same tokens\n    //     if (entity1.decl instanceof ClassDeclaration && entity2.decl instanceof ClassDeclaration\n    //         && entity1.type.className === entity2.type.className) {\n    //         if (entity1.decl.isLibraryConstruct() && entity2.decl.isLibraryConstruct() !== undefined\n    //             && entity1.decl.getLibraryId() === entity2.decl.getLibraryId() ||\n    //             entity1.decl.hasSourceCode() && entity2.decl.hasSourceCode() &&\n    //             entity1.decl.getSourceText().replace(/\\s/g,'') === entity2.decl.getSourceText().replace(/\\s/g,'')) {\n    //             // exactly same tokens, so it's fine\n\n    //             // merge the types too, so that the type system recognizes them as the same\n    //             Types.Class.merge(entity1.type, entity2.type);\n\n    //             return;\n    //         }\n    //         else {\n    //             throw CPPError.link.class_same_tokens([entity1.decl, entity2.decl], entity1, entity2);\n    //         }\n    //     }\n\n    //     // If they're not the same type, that's a problem\n    //     if (!sameType(entity1.type, entity2.type)) {\n    //         throw CPPError.link.type_mismatch(entity1.decl, entity1, entity2);\n    //     }\n\n    //     // Special case: if both are definitions of a member inside the same class, ignore them. (The class definitions\n    //     // have already been checked above and must be the same at this point, so it's pointless and will cause errors\n    //     // to try to merge them.)\n    //     if (entity1.decl instanceof MemberDeclaration) {\n    //         return;\n    //     }\n    //     if (entity1.decl instanceof FunctionDefinition && entity1.decl.isInlineMemberFunction) {\n    //         return; // TODO: Should we be checking this?\n    //     }\n\n    //     // Attempt to merge the two\n    //     if (!entity2.isDefined() && !entity1.isDefined()) {\n    //         // If both are declarations, just keep the old one\n    //     }\n    //     else if (entity2.isDefined() && entity1.isDefined()) {\n    //         // If both are definitions, that's a problem.\n    //         throw CPPError.link.multiple_def([entity1.decl, entity2.decl], entity1.name);\n    //     }\n    //     else { // one of them is defined and one is undefined\n    //         var undefinedEntity = entity1;\n    //         var definedEntity = entity2;\n    //         if (entity1.isDefined()) {\n    //             undefinedEntity = entity2;\n    //             definedEntity = entity1;\n    //         }\n\n    //         // Check return types for functions\n    //         if (entity1 instanceof FunctionEntity) {\n    //             // If they have mismatched return types, that's a problem.\n    //             if (!entity1.type.sameReturnType(entity2.type)){\n    //                 throw CPPError.link.func.returnTypesMatch([entity1.decl, entity2.decl], entity1.name);\n    //             }\n    //         }\n\n    //         // If a previous declaration, and now a new definition, merge\n    //         undefinedEntity.setDefinition(definedEntity.definition);\n    //     }\n    // }\n\n    public abstract readonly declarationKind: DeclarationKind;\n\n    // TODO: not sure this should really be here as an abstract property?\n    // public abstract readonly firstDeclaration: SimpleDeclaration | ParameterDeclaration | ClassDeclaration;\n    // public abstract readonly declarations: readonly NonMemberSimpleDeclaration[] | readonly ParameterDefinition[] | readonly ClassDeclaration[];\n    // public readonly definition?: SimpleDeclaration;\n\n    public constructor(type: T, name: string) {\n        super(type, name);\n    }\n\n    // public setDefinition(definition: SimpleDeclaration) {\n    //     (<SimpleDeclaration>this.definition) = definition;\n    // }\n\n    // public isDefined() {\n    //     return !!this.definition;\n    // }\n\n\n    // public isLibraryConstruct() {\n    //     return this.decl.isLibraryConstruct();\n    // }\n\n    // public isLibraryUnsupported() {\n    //     return this.decl.isLibraryUnsupported();\n    // }\n};\n\n/**\n * Attempts to merge definitions. If neither entity is defined, does nothing and returns\n * the existing entity. If exactly one entity is defined, sets the definition for the\n * other one to match and returns the existing entity. If both are defined, this is an error\n * condition, so does nothing and returns false.\n * @param newEntity \n * @param existingEntity \n */\nfunction mergeDefinitionInto<T extends DeclaredEntity>(newEntity: T, existingEntity: T) {\n\n    if (newEntity.definition && existingEntity.definition) {\n        if (newEntity.definition === existingEntity.definition) {\n            // literally the same definition, that's fine.\n            return existingEntity;\n        }\n        else {\n            // not literally same definition, so this is an error\n            return undefined;\n        }\n    }\n\n    // One of them may have a definition, if so copy it over\n    if (newEntity.definition) {\n        // we have a definition but they don't\n        asMutable(existingEntity).definition = newEntity.definition;\n    }\n    else if (existingEntity.definition) {\n        // they have a definition but we don't\n        asMutable(newEntity).definition = existingEntity.definition;\n    }\n    return existingEntity;\n}\n\nexport class FunctionOverloadGroup {\n    public readonly declarationKind = \"function\";\n\n    public readonly name: string;\n    private readonly _overloads: FunctionEntity[];\n    public readonly overloads: readonly FunctionEntity[];\n\n    public constructor(overloads: readonly FunctionEntity[]) {\n        this.name = overloads[0].name;\n        this.overloads = this._overloads = overloads.slice();\n    }\n\n    public addOverload(overload: FunctionEntity) {\n        this._overloads.push(overload);\n    }\n\n    /**\n     * Selects a function from the given overload group based on the signature of\n     * the provided function type. (Note there's no consideration of function names here.)\n     * WARNING: This function does NOT perform overload resolution. For example, it does\n     * not consider the possibility of implicit conversions, which is a part of full overload\n     * resolution. It simply looks for an overload with a matching signature.\n     */\n    public selectOverloadBySignature(type: FunctionType): FunctionEntity | undefined {\n        return this.overloads.find(func => type.sameSignature(func.type));\n    }\n}\n\nexport type ObjectEntityType = CompleteObjectType | ReferenceType;\n\nexport interface ObjectEntity<T extends CompleteObjectType = CompleteObjectType> extends CPPEntity<T> {\n    runtimeLookup(rtConstruct: RuntimeConstruct): CPPObject<T>;\n    readonly variableKind: \"object\";\n}\n\nexport interface BoundReferenceEntity<T extends ReferenceType = ReferenceType> extends CPPEntity<T> {\n    runtimeLookup<X extends CompleteObjectType>(this: BoundReferenceEntity<ReferenceType<X>>, rtConstrcut: RuntimeConstruct): CPPObject<X>;\n    readonly variableKind: \"reference\";\n}\n\nexport interface UnboundReferenceEntity<T extends ReferenceType = ReferenceType> extends CPPEntity<T> {\n    bindTo<X extends CompleteObjectType>(this: UnboundReferenceEntity<ReferenceType<X>>, rtConstruct: RuntimeConstruct, obj: CPPObject<X>): void;\n}\n\nexport function runtimeObjectLookup<T extends CompleteObjectType>(entity: ObjectEntity<T> | BoundReferenceEntity<ReferenceType<T>>, rtConstruct: RuntimeConstruct) {\n    if (entity.variableKind === \"object\") {\n        return entity.runtimeLookup(rtConstruct);\n    }\n    else if (entity.variableKind === \"reference\") {\n        return entity.runtimeLookup(rtConstruct);\n    }\n    else {\n        assertNever(entity);\n    }\n}\n\nabstract class VariableEntityBase<T extends ObjectEntityType = ObjectEntityType> extends DeclaredEntityBase<T> {\n    public readonly declarationKind = \"variable\";\n    public abstract readonly variableKind: \"reference\" | \"object\";\n    public abstract readonly variableLocation: \"local\" | \"global\" | \"member\";\n}\n\nexport class LocalObjectEntity<T extends CompleteObjectType = CompleteObjectType> extends VariableEntityBase<T> implements ObjectEntity<T> {\n    public readonly variableKind = \"object\";\n    public readonly variableLocation = \"local\";\n    public readonly isParameter: boolean;\n\n    public readonly firstDeclaration: LocalVariableDefinition | ParameterDefinition;\n    public readonly declarations: readonly LocalVariableDefinition[] | readonly ParameterDefinition[];\n    public readonly definition: LocalVariableDefinition | ParameterDefinition;\n\n    public constructor(type: T, def: LocalVariableDefinition | ParameterDefinition, isParameter: boolean = false) {\n        super(type, def.name);\n        this.firstDeclaration = def;\n        this.declarations = <readonly LocalVariableDefinition[] | readonly ParameterDefinition[]>[def];\n        this.definition = def;\n\n        this.isParameter = isParameter;\n    }\n\n    public toString() {\n        return this.name + \" (\" + this.type + \")\";\n    }\n\n    public mergeInto(existingEntity: VariableEntity) {\n        // Redeclaration of local is never ok\n        return CPPError.declaration.prev_local(this.firstDeclaration, this.name);\n    }\n\n    public runtimeLookup(rtConstruct: RuntimeConstruct): AutoObject<T> {\n        // TODO: revisit the non-null assertion below\n        return rtConstruct.containingRuntimeFunction.stackFrame!.localObjectLookup(this);\n    }\n\n    public describe() {\n        return { name: this.name, message: `the ${this.isParameter ? \"parameter\" : \"local variable\"} ${this.name}` };\n    }\n};\n\nexport class LocalReferenceEntity<T extends ReferenceType = ReferenceType> extends VariableEntityBase<T> implements BoundReferenceEntity<T>, UnboundReferenceEntity<T> {\n    public readonly variableKind = \"reference\";\n    public readonly variableLocation = \"local\";\n    public readonly isParameter: boolean;\n\n    public readonly firstDeclaration: LocalVariableDefinition | ParameterDefinition;\n    public readonly declarations: readonly LocalVariableDefinition[] | readonly ParameterDefinition[];\n    public readonly definition: LocalVariableDefinition | ParameterDefinition;\n\n    public constructor(type: T, def: LocalVariableDefinition | ParameterDefinition, isParameter: boolean = false) {\n        super(type, def.name);\n        this.firstDeclaration = def;\n        this.declarations = <readonly LocalVariableDefinition[] | readonly ParameterDefinition[]>[def];\n        this.definition = def;\n\n        this.isParameter = isParameter;\n    }\n\n    public mergeInto(existingEntity: VariableEntity) {\n        // Redeclaration of local is never ok\n        return CPPError.declaration.prev_local(this.firstDeclaration, this.name);\n    }\n\n    public bindTo<X extends CompleteObjectType>(this: LocalReferenceEntity<ReferenceType<X>>, rtConstruct: RuntimeConstruct, obj: CPPObject<X>) {\n        rtConstruct.containingRuntimeFunction.stackFrame!.bindLocalReference(this, obj);\n    }\n\n    public runtimeLookup<X extends CompleteObjectType>(this: LocalReferenceEntity<ReferenceType<X>>, rtConstruct: RuntimeConstruct): CPPObject<X> {\n        // TODO: revisit the non-null assertions below\n        return rtConstruct.containingRuntimeFunction.stackFrame!.localReferenceLookup<X>(this);\n    }\n\n    public describe() {\n        return { name: this.name, message: `the ${this.isParameter ? \"reference parameter\" : \"reference\"} ${this.name}` };\n    }\n};\nexport type LocalVariableEntity = LocalObjectEntity | LocalReferenceEntity;\n\nexport class GlobalObjectEntity<T extends CompleteObjectType = CompleteObjectType> extends VariableEntityBase<T> {\n    public readonly variableKind = \"object\";\n    public readonly variableLocation = \"global\";\n\n    public readonly qualifiedName: string;\n    public readonly firstDeclaration: GlobalVariableDefinition;\n    public readonly declarations: readonly GlobalVariableDefinition[];\n    public readonly definition?: GlobalVariableDefinition;\n\n    // storage: \"static\",\n    constructor(type: T, decl: GlobalVariableDefinition) {\n        super(type, decl.name);\n        this.firstDeclaration = decl;\n        this.declarations = [decl];\n        // Note: this.definition is not set here because it is set later during the linking process.\n        // Eventually, this constructor will take in a GlobalObjectDeclaration instead, but that would\n        // require support for the extern keyword or static member variables (although that might be\n        // a separate class entirely)\n        this.qualifiedName = \"::\" + this.name;\n    }\n\n    public toString() {\n        return this.name + \" (\" + this.type + \")\";\n    }\n\n    public mergeInto(existingEntity: VariableEntity): VariableEntity | CompilerNote {\n        if (!sameType(this.type, existingEntity.type)) {\n            return CPPError.declaration.type_mismatch(this.firstDeclaration, this, existingEntity);\n        }\n        return mergeDefinitionInto(this, existingEntity) ??\n            CPPError.declaration.variable.multiple_def(this.definition!, existingEntity.definition!);\n    }\n\n    public registerWithLinker() {\n        this.firstDeclaration.context.translationUnit.program.registerGlobalObjectEntity(this);\n    }\n\n    public link(def: GlobalVariableDefinition | undefined) {\n        assert(!this.definition, \"link() should not be called for an entity that is already defined.\");\n        if (def) {\n            (<Mutable<this>>this).definition = def;\n        }\n        else {\n            this.declarations.forEach((decl) => decl.addNote(CPPError.link.def_not_found(decl, this)));\n        }\n\n    }\n\n    public runtimeLookup(rtConstruct: RuntimeConstruct): StaticObject<T> {\n        return rtConstruct.sim.memory.staticLookup(this);\n    }\n\n    public describe() {\n        return { name: this.name, message: \"the variable \" + this.name };\n    }\n};\n\n\n\nexport type MemberVariableEntity = MemberObjectEntity | MemberReferenceEntity;\n\nexport type VariableEntity = LocalVariableEntity | GlobalObjectEntity | MemberVariableEntity;\n\n\n// TODO: implement global references\n// export class GlobalReferenceEntity<T extends ObjectType = ObjectType> extends DeclaredEntity<T> implements BoundReferenceEntity<T>, UnboundReferenceEntity<T> {\n\n//     public bindTo(rtConstruct : RuntimeConstruct, obj: CPPObject<T>) {\n//         rtConstruct.containingRuntimeFunction.stackFrame!.bindReference(this, obj);\n//     }\n\n//     public runtimeLookup(rtConstruct: RuntimeConstruct) : CPPObject<T> {\n//         // TODO: revisit the non-null assertion below\n//         return rtConstruct.containingRuntimeFunction.stackFrame!.referenceLookup(this);\n//     }\n\n//     public describe() {\n//         if (this.decl instanceof Declarations.Parameter){\n//             return {message: \"the reference parameter \" + this.name};\n//         }\n//         else{\n//             return {message: \"the reference \" + this.name};\n//         }\n//     }\n// };\n\n/**\n * Looking this entity up at runtime yields the return object of the containing runtime function.\n * Note this is generally only something you would want in the context of a return-by-value\n * function, in which case the return object is a temporary object created to eventually be initialized\n * with the returned value. In a pass-by-reference function, the return object will only exist once the\n * return has been processed and it is set to the returned object. In void function, there is no return\n * object.\n * @throws Throws an exception if the return object does not exist.\n */\nexport class ReturnObjectEntity<T extends CompleteObjectType = CompleteObjectType> extends CPPEntity<T> implements ObjectEntity<T> {\n    public readonly variableKind = \"object\";\n\n    public runtimeLookup(rtConstruct: RuntimeConstruct): CPPObject<T> {\n        let returnObject = rtConstruct.containingRuntimeFunction.returnObject;\n        if (!returnObject) {\n            throw \"Error: Runtime lookup performed for the return object of a function, but the return object does not currently exist.\";\n        }\n        return <CPPObject<T>>returnObject;\n    }\n\n    public describe() {\n        // TODO: add info about which function? would need to be specified when the return value is created\n        return { name: \"[return]\", message: \"the return object\" };\n    }\n};\n\nexport class ReturnByReferenceEntity<T extends ReferenceType = ReferenceType> extends CPPEntity<T> implements UnboundReferenceEntity<T> {\n\n    public bindTo<X extends CompleteObjectType>(this: ReturnByReferenceEntity<ReferenceType<X>>, rtConstruct: RuntimeConstruct, obj: CPPObject<X>) {\n        // Assume a ReturnByReferenceEntity will only be bound in the context of a return\n        // for a return-by-reference function, thus the cast\n        let func = <RuntimeFunction<FunctionType<ReferenceType<X>>>>rtConstruct.containingRuntimeFunction;\n        func.setReturnObject(<any>obj);\n    }\n\n    public describe() {\n        // TODO: add info about which function? would need to be specified when the return value is created\n        return { name: \"[&return]\", message: \"the object returned by reference\" };\n    }\n};\n\n// TODO: determine what should actually be the base class here\n// TODO: I think this should be an object?\n// TODO: I don't think this should be an object! Move to runtimeEnvironment.ts?\n// TODO: Is this needed? Can wherever uses it just keep track of the actual objects?\n// export class RuntimeReference<T extends ObjectType = ObjectType> {\n\n//     public readonly observable = new Observable(this);\n\n//     public readonly entity: BoundReferenceEntity<T>;\n//     public readonly refersTo: CPPObject<T>;\n\n//     public constructor(entity: BoundReferenceEntity<T>, refersTo: CPPObject<T>) {\n//         this.entity = entity;\n\n\n//         this.refersTo = refersTo;\n//         // Initially refers to a dead object at address 0\n//         // TODO: this is a bad idea, so I removed it\n//         // this.refersTo = new AnonymousObject(this.entity.type, memory, 0);\n//     }\n\n//     // public bindTo(refersTo: CPPObject) {\n//     //     (<typeof RuntimeReference.prototype.refersTo>this.refersTo) = refersTo;\n//     //     this.observable.send(\"bound\");\n//     // }\n\n//     public describe() {\n//         if (this.refersTo) {\n//             return {message: \"the reference \" + this.entity.name + \" (which is bound to \" + this.refersTo.describe().message + \")\"};\n//         }\n//         else {\n//             return {message: \"the reference \" + this.entity.name + \" (which has not yet been bound to an object)\"};\n//         }\n//     }\n// };\n\n// TODO: will need to add a class for ReferenceParameterEntity\nexport class PassByValueParameterEntity<T extends CompleteObjectType = CompleteObjectType> extends CPPEntity<T> implements ObjectEntity<T> {\n    public readonly variableKind = \"object\";\n\n    public readonly calledFunction: FunctionEntity;\n    public readonly type: T;\n    public readonly num: number;\n\n    public constructor(calledFunction: FunctionEntity, type: T, num: number) {\n        super(type);\n        this.calledFunction = calledFunction;\n        this.type = type;\n        this.num = num;\n        assert(sameType(calledFunction.type.paramTypes[num], type), \"Inconsistent type for parameter entity.\");\n    }\n\n    public runtimeLookup(rtConstruct: RuntimeConstruct) {\n\n        let pendingCalledFunction = rtConstruct.sim.memory.stack.topFrame()?.func;\n        assert(pendingCalledFunction);\n        assert(pendingCalledFunction.model === this.calledFunction.definition);\n\n        let paramObj = pendingCalledFunction.getParameterObject(this.num);\n        assert(sameType(paramObj.type, this.type));\n        return <AutoObject<T>>paramObj;\n    }\n\n    public describe() {\n        let definition = this.calledFunction.definition;\n        if (definition) {\n            return definition.parameters[this.num].declaredEntity!.describe();\n        }\n        else {\n            return { name: `Parameter #${this.num + 1}`, message: `Parameter #${this.num + 1} of the called function` };\n        }\n    }\n\n};\n\nexport class PassByReferenceParameterEntity<T extends ReferenceType = ReferenceType> extends CPPEntity<T> implements UnboundReferenceEntity<T> {\n\n    public readonly calledFunction: FunctionEntity;\n    public readonly num: number;\n\n    public constructor(calledFunction: FunctionEntity, type: T, num: number) {\n        super(type);\n        this.calledFunction = calledFunction;\n        this.num = num;\n        assert(sameType(calledFunction.type.paramTypes[num], type), \"Inconsistent type for parameter entity.\");\n    }\n\n    public bindTo<X extends CompleteObjectType>(this: PassByReferenceParameterEntity<ReferenceType<X>>, rtConstruct: RuntimeConstruct, obj: CPPObject<X>) {\n        let pendingCalledFunction = rtConstruct.sim.memory.stack.topFrame()?.func;\n        assert(pendingCalledFunction);\n        assert(pendingCalledFunction.model === this.calledFunction.definition);\n\n        pendingCalledFunction.bindReferenceParameter(this.num, obj);\n    }\n\n    public describe() {\n        let definition = this.calledFunction.definition;\n        if (definition) {\n            return definition.parameters[this.num].declaredEntity!.describe();\n        }\n        else {\n            return { name: `Parameter #${this.num + 1}`, message: `Parameter #${this.num + 1} of the called function` };\n        }\n    }\n};\n\nexport class ReceiverEntity extends CPPEntity<CompleteClassType> implements ObjectEntity<CompleteClassType> {\n    public readonly variableKind = \"object\";\n\n    constructor(type: CompleteClassType) {\n        super(type);\n    }\n\n    public toString() {\n        return \"function receiver (\" + this.type + \")\";\n    }\n\n    public runtimeLookup(rtConstruct: RuntimeConstruct) {\n        return rtConstruct.contextualReceiver;\n    }\n\n    public describe() {\n        // if (rtConstruct){\n        //     return {message: \"the receiver of this call to \" + rtConstruct.containingRuntimeFunction().describe().message + \" (i.e. *this) \"};\n        // }\n        // else {\n            return {name: \"*this\", message: \"the receiver of this call (i.e. *this)\"};\n        // }\n    }\n};\n\n\n\n// export class NewObjectEntity<T extends ObjectType = ObjectType> extends CPPEntity<T> implements ObjectEntity<T> {\n//     protected static readonly _name = \"NewObjectEntity\";\n\n//     // storage: \"automatic\",\n\n//     public toString() {\n//         return \"object (\" + this.type + \")\";\n//     }\n\n//     public runtimeLookup(rtConstruct: RuntimeConstruct) {\n//         // no additional runtimeLookup() needed on the object since it will never be a reference\n//         return rtConstruct.getAllocatedObject();\n//     }\n\n//     public describe() {\n//         return {message: \"the dynamically allocated object (of type \"+this.type+\") created by new\"};\n//     }\n\n// };\n\nexport class ArraySubobjectEntity<T extends ArrayElemType = ArrayElemType> extends CPPEntity<T> implements ObjectEntity<T> {\n    public readonly variableKind = \"object\";\n\n    public readonly arrayEntity: ObjectEntity<BoundedArrayType<T>>;\n    public readonly index: number;\n\n    constructor(arrayEntity: ObjectEntity<BoundedArrayType<T>>, index: number) {\n        super(arrayEntity.type.elemType);\n        this.arrayEntity = arrayEntity;\n        this.index = index;\n    }\n\n    public runtimeLookup(rtConstruct: RuntimeConstruct) {\n        return this.arrayEntity.runtimeLookup(rtConstruct).getArrayElemSubobject(this.index);\n    }\n\n    public describe() {\n        let arrDesc = this.arrayEntity.describe();\n        return {\n            name: arrDesc.name + \"[\" + this.index + \"]\",\n            message: \"element \" + this.index + \" of \" + arrDesc.message\n        };\n    }\n}\n\nexport class BaseSubobjectEntity extends CPPEntity<CompleteClassType> implements ObjectEntity<CompleteClassType> {\n    public readonly variableKind = \"object\";\n\n    public readonly containingEntity: ObjectEntity<CompleteClassType>;\n\n    constructor(containingEntity: ObjectEntity<CompleteClassType>, type: CompleteClassType) {\n        super(type);\n        this.containingEntity = containingEntity;\n\n        // This should always be true as long as we don't allow multiple inheritance\n        assert(this.containingEntity.type.classDefinition.baseClass?.similarType(type))\n    }\n\n    public runtimeLookup(rtConstruct: RuntimeConstruct) {\n        return this.containingEntity.runtimeLookup(rtConstruct).getBaseSubobject()!;\n    }\n\n    public describe() {\n        return {\n            name: this.containingEntity.describe().name + \".[\" + this.type.className + \" base]\",\n            message: \"the \" + this.type.className + \" base class subobject of \" + this.containingEntity.describe()\n        };\n    }\n}\n\n\n\nexport class MemberAccessEntity<T extends CompleteObjectType = CompleteObjectType> extends CPPEntity<T> implements ObjectEntity<T> {\n    public readonly variableKind = \"object\";\n\n    public readonly containingEntity: ObjectEntity<CompleteClassType>;\n    public readonly name: string;\n\n    constructor(containingEntity: ObjectEntity<CompleteClassType>, type: T, name: string) {\n        super(type);\n        this.containingEntity = containingEntity;\n        this.name = name;\n    }\n\n    public runtimeLookup(rtConstruct: RuntimeConstruct) {\n        // Cast below should be <CPPObject<T>>, NOT MemberSubobject<T>.\n        // See return type and documentation for getMemberSubobject()\n        return <CPPObject<T>>this.containingEntity.runtimeLookup(rtConstruct).getMemberObject(this.name);\n    }\n\n    public describe() {\n        let containingObjectDesc = this.containingEntity.describe();\n        return {\n            name: containingObjectDesc.name + \".\" + this.name,\n            message: \"the \" + this.name + \" member of \" + containingObjectDesc.message\n        };\n    }\n}\n\n// export class BaseClassEntity extends CPPEntity<ClassType> implements ObjectEntity<ClassType> {\n//     protected static readonly _name = \"BaseClassEntity\";\n//     // storage: \"none\",\n\n//     public readonly access: string;\n//     public readonly memberOfType: ClassType;\n\n//     constructor(type: ClassType, memberOfType: ClassType, access: string) {\n//         super(type);\n//         this.memberOfType = memberOfType;\n//         this.access = access;\n//     }\n\n//     public toString() {\n//         return \"the \" + this.type.className + \" base object of \" + this.memberOfType.className;\n//     }\n\n//     public runtimeLookup(rtConstruct: RuntimeConstruct) {\n//         var recObj = rtConstruct.contextualReceiver();\n\n//         while(recObj && !(recObj.type instanceof this.type)){ // TODO: this isA should probably be changed to a type function\n//             recObj = recObj.type.getBaseClass() && recObj.i_baseSubobjects[0];\n//         }\n//         Util.assert(recObj, \"Internal lookup failed to find subobject in class or base classes.\");\n\n//         return recObj;\n//     }\n\n//     public objectInstance(parentObj: CPPObject<ClassType>, memory: Memory, address: number) {\n//         return new BaseSubobject(parentObj, this.type, memory, address);\n//     }\n\n//     public describe() {\n//         return {message: \"the \" + this.type.className + \" base object of \" + this.memberOfType.className};\n//     }\n// };\n\nabstract class MemberVariableEntityBase<T extends ObjectEntityType = ObjectEntityType> extends VariableEntityBase<T> {\n\n    public readonly variableLocation = \"member\";\n\n    public readonly firstDeclaration: MemberVariableDeclaration;\n    public readonly declarations: readonly MemberVariableDeclaration[];\n    public readonly definition: undefined; // non-static member variables never have definitions\n\n    public constructor(type: T, decl: MemberVariableDeclaration) {\n        super(type, decl.name);\n        this.firstDeclaration = decl;\n        this.declarations = [decl];\n    }\n\n    public toString() {\n        return this.name + \" (\" + this.type + \")\";\n    }\n\n    public mergeInto(existingEntity: VariableEntity) {\n        // Redeclaration of member variable is never ok\n        return CPPError.declaration.prev_member(this.firstDeclaration, this.name);\n    }\n\n    public describe() {\n        return { name: this.name, message: `the member ${this.name}` };\n        // if (rtConstruct){\n        //     var recObj = rtConstruct.contextualReceiver();\n        //     if (recObj.name){\n        //         return {message: recObj.name + \".\" + this.name};\n        //     }\n        //     else{\n        //         return {message: \"the member \" + this.name + \" of \" + recObj.describe().message};\n        //     }\n        // }\n        // else{\n        //     return {\n        //         name: this.memberOfType.className + \".\" + this.name,\n        //         message: \"the \" + this.name + \" member of the \" + this.memberOfType.className + \" class\"\n        //     };\n        // }\n    }\n};\n\nexport class MemberObjectEntity<T extends CompleteObjectType = CompleteObjectType> extends MemberVariableEntityBase<T> {\n    public readonly variableKind = \"object\";\n    \n    public runtimeLookup(rtConstruct: RuntimeConstruct) {\n        // Cast below should be <CPPObject<T>>, NOT MemberSubobject<T>.\n        // See return type and documentation for getMemberSubobject()\n        return <CPPObject<T>>rtConstruct.contextualReceiver.getMemberObject(this.name);\n    }\n\n}\n\nexport class MemberReferenceEntity<T extends ReferenceType = ReferenceType> extends MemberVariableEntityBase<T> implements BoundReferenceEntity<T>, UnboundReferenceEntity<T> {\n\n    public readonly variableKind = \"reference\";\n    \n\n    public runtimeLookup<X extends CompleteObjectType>(this: MemberReferenceEntity<ReferenceType<X>>, rtConstruct: RuntimeConstruct) {\n        // Cast below should be <CPPObject<T>>, NOT MemberSubobject<T>.\n        // See return type and documentation for getMemberSubobject()\n        return <CPPObject<X>>rtConstruct.contextualReceiver.getMemberObject(this.name);\n    }\n\n    public bindTo<X extends CompleteObjectType>(this: MemberReferenceEntity<ReferenceType<X>>, rtConstruct: RuntimeConstruct, obj: CPPObject<X>) {\n        rtConstruct.contextualReceiver.bindMemberReference(this.name, obj)\n    }\n\n};\n\nexport class TemporaryObjectEntity<T extends CompleteObjectType = CompleteObjectType> extends CPPEntity<T> implements ObjectEntity<T> {\n    public readonly variableKind = \"object\";\n    protected static readonly _name = \"TemporaryObjectEntity\";\n    // storage: \"temp\",\n\n    public readonly creator: PotentialFullExpression;\n    public readonly owner: PotentialFullExpression;\n    public readonly name: string;\n\n    constructor(type: T, creator: PotentialFullExpression, owner: PotentialFullExpression, name: string) {\n        super(type);\n        this.creator = creator;\n        this.owner = owner;\n        this.name = name;\n    }\n\n    public setOwner(newOwner: PotentialFullExpression) {\n        (<Mutable<this>>this).owner = newOwner;\n    }\n\n    public objectInstance(creatorRt: RuntimePotentialFullExpression) {\n\n        let objInst: TemporaryObject<T> = creatorRt.sim.memory.allocateTemporaryObject(this);\n\n        let owner = creatorRt.containingFullExpression;\n        owner.temporaryObjects[this.entityId] = objInst;\n        return objInst;\n    }\n\n    public runtimeLookup(rtConstruct: RuntimeConstruct) {\n        // Some hacky casts and assertions in this implementation\n        // if (!(rtConstruct instanceof RuntimePotentialFullExpression)) { // removed since it causes an issue with a circular import dependency\n        //     return assertFalse();\n        // }\n        return <TemporaryObject<T>>(<RuntimePotentialFullExpression>rtConstruct).containingFullExpression.temporaryObjects[this.entityId];\n    }\n\n    public describe() {\n        return { name: this.name, message: this.name }; // TOOD: eventually change implementation when I remove name\n    }\n\n}\n\n\n\nexport class FunctionEntity<T extends FunctionType = FunctionType> extends DeclaredEntityBase<T> {\n    public readonly declarationKind = \"function\";\n\n    public readonly qualifiedName: string;\n    public readonly firstDeclaration: FunctionDeclaration;\n    public readonly declarations: readonly FunctionDeclaration[];\n    public readonly definition?: FunctionDefinition;\n\n    public readonly isConstructor: boolean;\n\n    public readonly isOdrUsed: boolean = false;\n\n    public readonly isImplicit: boolean;\n    public readonly isUserDefined: boolean;\n\n    // storage: \"static\",\n    constructor(type: T, decl: FunctionDeclaration) {\n        super(type, decl.name);\n        this.firstDeclaration = decl;\n        this.declarations = [decl];\n        this.isConstructor = decl.isConstructor;\n        this.qualifiedName = \"::\" + this.name;\n\n        this.isImplicit = !!decl.context.implicit;\n        this.isUserDefined = !decl.context.implicit;\n    }\n\n    public addDeclaration(decl: FunctionDeclaration) {\n        asMutable(this.declarations).push(decl);\n    }\n\n    public addDeclarations(decls: readonly FunctionDeclaration[]) {\n        decls.forEach((decl) => asMutable(this.declarations).push(decl));\n    }\n\n    public isStaticallyBound() {\n        return true;\n    }\n\n    public get isVirtual() {// TODO: why do we have this for non-member functions as well?\n        return false;\n    }\n\n    public toString() {\n        return this.name;\n    }\n\n    public mergeInto(overloadGroup: FunctionOverloadGroup): FunctionEntity | CompilerNote {\n        //check each other function found\n        let matchingFunction = overloadGroup.selectOverloadBySignature(this.type);\n\n        if (!matchingFunction) {\n            // If none were found with the same signature, this is a new overload, so go ahead and add it\n            overloadGroup.addOverload(this);\n            return this;\n        }\n\n        // If they have mismatched return types, that's a problem.\n        if (!this.type.sameReturnType(matchingFunction.type)) {\n            return CPPError.declaration.func.returnTypesMatch([this.firstDeclaration, matchingFunction.firstDeclaration], this.name);\n        }\n\n        // As a sanity check, make sure they're the same type.\n        // But this should already be true, given that they have the same signature and return type.\n        if (!sameType(this.type, matchingFunction.type)) {\n            return CPPError.declaration.type_mismatch(this.firstDeclaration, this, matchingFunction);\n        }\n\n        matchingFunction.addDeclarations(this.declarations);\n\n        return mergeDefinitionInto(this, matchingFunction) ??\n            CPPError.declaration.func.multiple_def(this.definition!, matchingFunction.definition!);\n    }\n\n    public setDefinition(def: FunctionDefinition) {\n        if (!this.definition) {\n            (<Mutable<this>>this).definition = def;\n        }\n        else {\n            def.addNote(CPPError.declaration.func.multiple_def(def, this.definition));\n        }\n    }\n\n    public registerWithLinker() {\n        this.firstDeclaration.context.program.registerFunctionEntity(this);\n    }\n\n    public link(def: FunctionDefinitionGroup | undefined) {\n        assert(!this.definition, \"link() should not be called for an entity that is already defined.\");\n\n        if (def) {\n            // found an overload group of function definitions, check for one\n            // with matching signature to the given linked entity\n            let overload = selectOverloadedDefinition(def.definitions, this.type);\n            if (!overload) {\n                if (this.isOdrUsed) {\n                    this.declarations.forEach((decl) => decl.addNote(CPPError.link.func.no_matching_overload(decl, this)));\n                }\n                return;\n            }\n\n            // check return type\n            if (!this.type.sameReturnType(overload.declaration.type)) {\n                this.declarations.forEach((decl) => decl.addNote(CPPError.link.func.returnTypesMatch(decl, this)));\n                return;\n            }\n\n            (<Mutable<this>>this).definition = overload;\n        }\n        else {\n            if (this.isOdrUsed) {\n                this.declarations.forEach((decl) => decl.addNote(CPPError.link.func.def_not_found(decl, this)));\n            }\n        }\n\n    }\n\n    public isMain() {\n        return this.qualifiedName === \"::main\";\n    }\n\n    public isMemberFunction() {\n        return isClassContext(this.firstDeclaration.context);\n    }\n\n    public registerCall(call: FunctionCall) {\n        (<Mutable<this>>this).isOdrUsed = true;\n    }\n\n    public returnsVoid() : this is FunctionEntity<FunctionType<VoidType>> {\n        return this.type.returnType.isVoidType();\n    }\n\n    public returnsCompleteType() : this is FunctionEntity<FunctionType<CompleteReturnType>> {\n        return this.type.returnType.isCompleteReturnType();\n    }\n\n    public describe(): EntityDescription {\n        return {\n            name: this.name,\n            message: `the ${this.name} function`\n        };\n    }\n}\n\nexport class ClassEntity extends DeclaredEntityBase<PotentiallyCompleteClassType> {\n    public readonly declarationKind = \"class\";\n\n    public readonly qualifiedName: string;\n    public readonly firstDeclaration: ClassDeclaration;\n    public readonly declarations: readonly ClassDeclaration[];\n    public readonly definition?: ClassDefinition;\n\n    public constructor(decl: ClassDeclaration) {\n\n        // Ask the type system for the appropriate type.\n        // Because Lobster only supports mechanisms for class declaration that yield\n        // classes with external linkage, it is sufficient to use the fully qualified\n        // class name to distinguish types from each other. But, because Lobster does\n        // not support namespaces, the unqualified name is also sufficient.\n\n        super(createClassType(decl.name), decl.name);\n        this.firstDeclaration = decl;\n        this.declarations = [decl];\n        this.qualifiedName = \"::\" + this.name;\n    }\n\n    public isComplete() : this is CompleteClassEntity {\n        return !!this.definition && this.type.isCompleteClassType();\n    }\n\n    public toString() {\n        return this.name;\n    }\n\n    public addDeclaration(decl: ClassDeclaration) {\n        asMutable(this.declarations).push(decl);\n    }\n\n    public addDeclarations(decls: readonly ClassDeclaration[]) {\n        decls.forEach((decl) => asMutable(this.declarations).push(decl));\n    }\n\n    /**\n     * Merge this class entity into a previous existing class entity.\n     * If exactly one of the entities has a definition, the other one assumes\n     * that definition as well. If both have a definition, an error is returned\n     * unless the two are literally the same definition. (Note that an error\n     * is thrown in the case of separate definitions with the same exact source\n     * tokens, because the use of `mergeInto` means these definitions occur in the\n     * same translation unit, which is prohibited.)\n     * @param existingEntity\n     */\n    public mergeInto(existingEntity: ClassEntity) {\n\n        existingEntity.addDeclarations(this.declarations);\n\n        return mergeDefinitionInto(this, existingEntity) ??\n            CPPError.declaration.classes.multiple_def(this.definition!, existingEntity.definition!);\n    }\n\n    public setDefinition(def: ClassDefinition) {\n        if (!this.definition) {\n            (<Mutable<this>>this).definition = def;\n            this.type.setDefinition(def);\n        }\n        else {\n            def.addNote(CPPError.declaration.classes.multiple_def(def, this.definition));\n        }\n    }\n\n    public registerWithLinker() {\n        this.firstDeclaration.context.translationUnit.program.registerClassEntity(this);\n    }\n\n    public link(def: ClassDefinition | undefined) {\n        assert(!this.definition, \"link() should not be called for an entity that is already defined.\");\n        if (def) {\n            this.setDefinition(def);\n        }\n        else {\n            this.declarations.forEach((decl) => decl.addNote(CPPError.link.classes.def_not_found(decl, this)));\n        }\n    }\n\n    public isMain() {\n        return this.qualifiedName === \"::main\";\n    }\n\n    public describe(): EntityDescription {\n        return {\n            name: this.name,\n            message: `the ${this.name} function`\n        };\n    }\n}\n\nexport interface CompleteClassEntity extends ClassEntity {\n    readonly type: CompleteClassType;\n    readonly definition: ClassDefinition;\n}\n\n\n// export class MagicFunctionEntity extends FunctionEntity {\n//     public constructor(decl: SimpleDeclaration) {\n//         super(decl);\n//         this.setDefinition(decl);\n//     }\n\n//     public describe() {\n//         return {message: \"no description available\"};\n//     }\n// }\n\n\n// export class MemberFunctionEntity extends FunctionEntity {\n\n//     public readonly containingClass: Types.Class;\n//     public readonly isVirtual: boolean;\n//     public readonly pureVirtual: boolean;\n\n//     constructor(decl: SimpleDeclaration, containingClass: Types.Class, isVirtual: boolean) {\n//         super(decl);\n//         this.containingClass = containingClass;\n//         this.isVirtual = isVirtual;\n//         this.pureVirtual = decl.pureVirtual;\n//         // May also be set to virtual later if it's discovered to be an overrider\n//         // for a virtual function in a base class\n\n//         this.checkForOverride();\n//     }\n\n//     private checkForOverride() {\n//         if (!this.containingClass.getBaseClass()) {\n//             return;\n//         }\n\n//         // Find the nearest overrider of a hypothetical virtual function.\n//         // If any are virtual, this one would have already been set to be\n//         // also virtual by this same procedure, so checking this one is sufficient.\n//         // If we override any virtual function, this one is too.\n//         var overridden = this.containingClass.getBaseClass().classScope.singleLookup(this.name, {\n//             paramTypes: this.type.paramTypes, isThisConst: this.type.isThisConst,\n//             exactMatch:true, own:true, noNameHiding:true});\n\n//         if (overridden && overridden instanceof FunctionEntity && overridden.isVirtual){\n//             (<boolean>this.isVirtual) = true;\n//             // Check to make sure that the return types are covariant\n//             if (!covariantType(this.type.returnType, overridden.type.returnType)){\n//                 throw SemanticExceptions.NonCovariantReturnTypes.instance(this, overridden);\n//             }\n//         }\n//     }\n\n//     public isStaticallyBound() {\n//         return !this.isVirtual;\n//     }\n\n//     public isLinked() {\n//         return this.virtual && this.pureVirtual || this.isDefined();\n//     }\n\n//     public runtimeLookup(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//         if (this.isVirtual){\n//             // If it's a virtual function start from the class scope of the dynamic type\n//             var receiver = rtConstruct.contextualReceiver();\n//             Util.assert(receiver, \"dynamic function lookup requires receiver\");\n//             var dynamicType = receiver.type;\n\n//             // Sorry this is hacky :(\n//             // If it's a destructor, we look instead for the destructor of the dynamic type\n//             var func;\n//             if (this.definition instanceof DestructorDefinition) {\n//                 func = dynamicType.destructor;\n//             }\n//             else{\n//                 func = dynamicType.classScope.singleLookup(this.name, {\n//                     paramTypes: this.type.paramTypes, isThisConst: this.type.isThisConst,\n//                     exactMatch:true, own:true, noNameHiding:true});\n//             }\n//             Util.assert(func, \"Failed to find virtual function implementation during lookup.\");\n//             return func;\n//         }\n//         else{\n//             return this;\n//         }\n//     }\n\n//     public suppressedVirtualProxy() : MemberFunctionEntity {\n//         var proxy = Object.create(this);\n//         proxy.isVirtual = false;\n//         return proxy;\n//     }\n\n// };\n\n// export class ConstructorEntity extends MemberFunctionEntity {\n\n// }\n\n\n// export class PointedFunctionEntity extends CPPEntity {\n//     protected static readonly _name = \"FunctionEntity\";\n\n//     private readonly desc: string;\n\n//     constructor(type: Type) {\n//         super(type);\n//         this.desc = \"Unknown function of type \" + type;\n//     }\n\n//     public isStaticallyBound() {\n//         return true;\n//     }\n\n//     public toString() {\n//         return this.desc;\n//     }\n\n//     public runtimeLookup(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//         return rtConstruct.pointedFunction.runtimeLookup(sim, rtConstruct);\n//     }\n\n//     public isLinked() {\n//         return true;\n//     }\n\n//     public describe() {\n//         return {message: \"no description available\"};\n//     }\n// }\n\n\n\n// export class TypeEntity extends DeclaredEntity {\n//     protected static readonly _name = \"TypeEntity\";\n\n//     public toString() {\n//         return \"TypeEntity: \" + this.type.instanceString();\n//     }\n\n//     public describe() {\n//         return this.type.describe();\n//     }\n// };\n\n\nfunction convLen(args: readonly Expression[]) {\n    return args.reduce((res, exp) => res + exp.conversionLength, 0);\n};\n\n// Selects from candidates the function that is the best match\n// for the arguments in the args array. Also modifies args so\n// that each argument is amended with any implicit conversions\n// necessary for the match.\n// Options:\n//   problems - an array that will be filled with an entry for each candidate\n//              consisting of an array of any semantic problems that prevent it\n//              from being chosen.\n\n\n\n\n\n\n/**\n * Selects a function from the given overload group based on the signature of\n * the provided function type. (Note there's no consideration of function names here.)\n */\nexport function selectOverloadedDefinition(overloadGroup: readonly FunctionDefinition[], type: FunctionType) {\n    return overloadGroup.find(func => type.sameSignature(func.declaration.type));\n}","import { TranslationUnitConstruct, CPPConstruct } from \"./constructs\";\nimport { SourceReference } from \"./Program\";\nimport { ReferenceType, CompleteObjectType, Type, BoundedArrayType, ArrayOfUnknownBoundType, AtomicType, sameType, PotentialParameterType, CompleteClassType, PointerType, PotentiallyCompleteObjectType, IncompleteObjectType, PotentialReturnType, ExpressionType } from \"./types\";\nimport { CPPEntity, DeclaredEntity, ObjectEntity, LocalObjectEntity, TemporaryObjectEntity, FunctionEntity, GlobalObjectEntity, ClassEntity } from \"./entities\";\nimport { VoidDeclaration, StorageSpecifierKey, TypeSpecifierKey, SimpleTypeName, FunctionDeclaration, ClassDefinition, ClassDeclaration, StorageSpecifier, FunctionDefinition, VariableDefinition, ParameterDefinition, SimpleDeclaration, BaseSpecifier, IncompleteTypeVariableDefinition, IncompleteTypeMemberVariableDeclaration } from \"./declarations\";\nimport { Expression, TypedExpression } from \"./expressionBase\";\nimport { Mutable } from \"../util/util\";\nimport { IdentifierExpression, PointerDifferenceExpression } from \"./expressions\";\n\nexport enum NoteKind {\n    ERROR = \"error\",\n    WARNING = \"warning\",\n    STYLE = \"style\",\n    OTHER = \"other\"\n}\n\nexport abstract class Note {\n\n    public readonly kind: NoteKind;\n    public readonly id: string;\n    public readonly message: string;\n\n    public constructor(kind: NoteKind, id: string, message: string) {\n        this.kind = kind;\n        this.id = id;\n        this.message = message;\n    }\n\n    /**\n     * The primary source reference for this note, although more than one may exist.\n     * Use the allSourceReferences property to retrieve an array of all source references.\n     * May be undefined if the note doesn't concern any particular part of the source.\n     */\n    public abstract readonly primarySourceReference?: SourceReference;\n\n    /**\n     * An array of all source references for this note.\n     * May be empty if the note doesn't concern any particular part of the source.\n     */\n    public abstract readonly allSourceReferences: readonly SourceReference[];\n\n\n}\n\n\n\nabstract class BasicNoteBase extends Note {\n\n    public primarySourceReference: SourceReference;\n    public allSourceReferences: readonly SourceReference[];\n\n    public constructor(sourceRef: SourceReference, kind: NoteKind, id: string, message: string) {\n        super(kind, id, message);\n        this.primarySourceReference = sourceRef;\n        this.allSourceReferences = [sourceRef];\n    }\n}\n\nexport class PreprocessorNote extends BasicNoteBase {\n\n}\n\nexport class SyntaxNote extends BasicNoteBase {\n\n}\n\nclass ConstructNoteBase extends Note {\n\n    public primaryConstruct: TranslationUnitConstruct;\n    public readonly constructs: readonly TranslationUnitConstruct[];\n\n    /**\n     * Initializes a note associated with the provided constructs.\n     * @param constructs A single code construct or array of constructs.\n     */\n    public constructor(constructs: TranslationUnitConstruct | readonly TranslationUnitConstruct[], kind: NoteKind, id: string, message: string) {\n        super(kind, id, message);\n        this.constructs = constructs instanceof CPPConstruct ? [constructs] : constructs;\n        this.primaryConstruct = this.constructs[0];\n    }\n\n    public get primarySourceReference() {\n        return this.primaryConstruct.getNearestSourceReference();\n    }\n\n    public get allSourceReferences() {\n        return this.constructs.map(c => c.getNearestSourceReference());\n    }\n}\n\nexport class CompilerNote extends ConstructNoteBase {\n\n}\n\nexport class LinkerNote extends ConstructNoteBase {\n\n}\n\n\n//TODO: Remove this once I'm confident I don't need it\n// var CompoundNoteHandler = NoteHandler.extend({\n//     _name : \"CompoundNoteHandler\",\n//\n//     instance : function(handler1, handler2) {\n//         if (!handler1) {\n//             return handler2;\n//         }\n//         if (!handler2) {\n//             return handler1;\n//         }\n//\n//         return this._class._parent.instance.apply(this, arguments);\n//     },\n//\n//     /**\n//      *\n//      * @param {NoteHandler} handler1\n//      * @param {NoteHandler} handler2\n//      */\n//     init : function(handler1, handler2) {\n//         this.i_handler1 = handler1;\n//         this.i_handler2 = handler2;\n//     },\n//\n//     /**\n//      *\n//      * @param {PreprocessorNote} note\n//      */\n//     preprocessorNote : function(note) {\n//         this.i_handler1.preprocessorNote(note);\n//         this.i_handler2.preprocessorNote(note);\n//     },\n//\n//\n//     /**\n//      *\n//      * @param {CompilerNote} note\n//      */\n//     compilerNote : function(note) {\n//         this.i_handler1.compilerNote(note);\n//         this.i_handler2.compilerNote(note);\n//     },\n//\n//\n//\n//     /**\n//      *\n//      * @param {LinkerNote} note\n//      */\n//     linkerNote : function(note) {\n//         this.i_handler1.linkerNote(note);\n//         this.i_handler2.linkerNote(note);\n//     }\n//\n//\n// });\n\nexport class NoteRecorder implements NoteHandler {\n\n    private readonly _allNotes: Note[] = [];\n    public readonly allNotes: readonly Note[] = this._allNotes;\n\n    public readonly hasErrors: boolean = false;\n    public readonly hasSyntaxErrors: boolean = false;\n    public readonly hasWarnings: boolean = false;\n\n    private _numNotesByKind: { [K in NoteKind]: number } = {\n        error: 0,\n        warning: 0,\n        style: 0,\n        other: 0\n    }\n\n    public addNote(note: Note) {\n        this._allNotes.push(note);\n\n        let _this = (<Mutable<this>>this);\n\n        if (note.kind === NoteKind.ERROR) {\n            _this.hasErrors = true;\n\n            if (note instanceof SyntaxNote) {\n                _this.hasSyntaxErrors = true;\n            }\n        }\n        else if (note.kind === NoteKind.WARNING) {\n            _this.hasWarnings = true;\n        }\n\n        ++this._numNotesByKind[note.kind];\n    }\n\n    public addNotes(notes: readonly Note[]) {\n        notes.forEach((note) => this.addNote(note));\n    }\n\n    public clearNotes() {\n        this._allNotes.length = 0;\n        let _this = (<Mutable<this>>this);\n        _this.hasErrors = false;\n        _this.hasSyntaxErrors = false;\n        _this.hasWarnings = false;\n    }\n\n    public numNotes(kind?: NoteKind) {\n        return kind ? this._numNotesByKind[kind] : this.allNotes.length;\n    }\n}\n\nexport const CPPError = {\n    // attributeEmptyTo : function(problems, code) {\n    // \tfor(var key in problems) {\n    // \t\tvar prob = problems[key];\n    // \t\tprob.code = prob.code || code;\n    // \t}\n    // },\n    // summary : function(problems) {\n    // \tvar str = \"\";\n    // \tfor(var i = 0; i < problems.length; ++i) {\n    // \t\tvar prob = problems[i];\n    // \t\tstr += \"<span style=\\\"background-color:\"+prob.color+\"\\\">\"+prob.sentence + \"</span><br />\";\n    // \t}\n    // \treturn str;\n    // },\n    other: {\n        cin_not_supported: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"other.cin_not_supported\", \"Sorry, <span class='code'>cin</span> is not supported yet :(.\");\n        }\n    },\n    class_def: {\n        prev_def: function (construct: TranslationUnitConstruct, name: string, prev: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"class_def.prev_def\", name + \" cannot be defined more than once. Note that Lobster just puts all class names (i.e. types) in one global sort of namespace, so you can't ever have two classes of the same name.\");\n        },\n        base_class_type: function (construct: BaseSpecifier) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"class_def.base_class_type\", \"I cannot find a suitable class called \\\"\" + construct.name + \"\\\" to use as a base.\");\n        },\n        base_class_incomplete: function (construct: BaseSpecifier) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"class_def.base_class_incomplete\", `The class ${construct.name} is incomplete at this point and may not be used as a base class.`);\n        },\n        big_three: function (construct: TranslationUnitConstruct, bigThreeYes: readonly string[], bigThreeNo: readonly string[]) {\n            var yStr = bigThreeYes.join(\" and \");\n            var nStr = bigThreeNo.join(\" and \");\n            return new CompilerNote(construct, NoteKind.WARNING, \"class_def.big_three\", \"This class does not follow the rule of the Big Three. It has a custom implementation for the \" + yStr + \" but not for the \" + nStr + \". The compiler will provide implicit versions of the missing ones, but they will almost certainly work \\\"incorrectly\\\" (e.g. make shallow copies or neglect to delete dynamic memory).\");\n        },\n        multiple_inheritance: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"class_def.multiple_inheritance\", \"Sorry, but Lobster does not support multiple inheritance.\");\n        },\n        virtual_inheritance: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"class_def.virtual_inheritance\", \"Sorry, but Lobster does not support virtual inheritance.\");\n        },\n        ctor_def: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"class_def.ctor_def\", \"Sorry, but for now Lobster only supports constructors that are defined inline. (i.e. You need a body.)\");\n        },\n        dtor_def: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"class_def.dtor_def\", \"Sorry, but for now Lobster only supports destructors that are defined inline. (i.e. You need a body.)\");\n        }\n    },\n    declaration: {\n        ctor: {\n            copy: {\n                pass_by_value: function (construct: TranslationUnitConstruct, type: CompleteObjectType, name: string) {\n                    var constRef = new ReferenceType(type.cvQualified(true));\n                    return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ctor.copy.pass_by_value\", \"A copy constructor cannot take its parameter by value. Because pass-by-value itself uses the copy constructor, this would cause infinite recursion if it were allowed. Try passing by reference-to-const instead! (i.e. \" + constRef.typeString(false, name, false) + \")\");\n                }\n            },\n            init: {\n                constructor_only: function (construct: TranslationUnitConstruct) {\n                    return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ctor.init.constructor_only\", \"Constructor-initializer syntax may only be used with constructors. (This function is not a constructor.)\");\n                },\n                improper_name: function (construct: TranslationUnitConstruct, classType: CompleteClassType, name: string) {\n                    return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ctor.init.improper_name\", \"A member initializer can only be used for non-static data members or base classes. There is no such member or base class named \" + name + \" in the \" + classType.className + \" class.\");\n                },\n                delegate_only: function (construct: TranslationUnitConstruct) {\n                    return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ctor.init.delegating_only\", \"This constructor-initializer delegates to another constructor from the same class. In this case, no other base or member initializers are allowed, because that would mean those members get initialized twice - once in the delegated-to constructor and again here.\");\n                },\n                multiple_delegates: function (construct: TranslationUnitConstruct) {\n                    return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ctor.init.multiple_delegates\", \"A constructor may not delegate to more than one other constructor.\");\n                },\n                multiple_base_inits: function (construct: TranslationUnitConstruct) {\n                    return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ctor.init.multiple_base_inits\", \"A constructor's initializer list cannot specify more than one base class constructor to use.\");\n                },\n                multiple_member_inits: function (construct: TranslationUnitConstruct) {\n                    return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ctor.init.multiple_member_inits\", \"A constructor's initializer list cannot specify more than one initializer for each member.\");\n                }\n            },\n            return_type_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ctor.return_type_prohibited\", \"A constructor is not allowed to specify a return type.\");\n            },\n            const_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ctor.const_prohibited\", \"A constructor is not allowed to have a const specification.\");\n            },\n            previous_declaration: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ctor.previous_declaration\", `Re-declaration of a constructor is not allowed (a previous declaration of a constructor with the same parameter types exists).`);\n            },\n        },\n        dtor: {\n            no_destructor_auto: function (construct: TranslationUnitConstruct, entity: LocalObjectEntity) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.dtor.no_destructor_auto\", \"The local variable \" + entity.name + \" needs to be destroyed when it \\\"goes out of scope\\\", but I can't find a destructor for the \" + entity.type + \" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)\");\n            },\n            // no_destructor_member : function(construct: TranslationUnitConstruct, entity: ObjectEntity, containingClass) {\n            //     return new CompilerNote(construct, NoteKind.ERROR, \"declaration.dtor.no_destructor_member\", \"The member variable \" + entity.name + \" needs to be destroyed as part of the \" + containingClass.className + \" destructor, but I can't find a destructor for the \" + entity.type + \" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)\");\n            // },\n            // no_destructor_base : function(construct: TranslationUnitConstruct, entity, containingClass) {\n            //     return new CompilerNote(construct, NoteKind.ERROR, \"declaration.dtor.no_destructor_base\", \"The base class \" + entity.name + \" needs to be destroyed as part of the \" + containingClass.className + \" destructor, but I can't find a destructor for the \" + entity.type + \" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)\");\n            // },\n            no_destructor_temporary: function (construct: TranslationUnitConstruct, entity: TemporaryObjectEntity) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.dtor.no_destructor_temporary\", \"This expression creates a temporary object of type \" + entity.type + \" that needs to be destroyed, but I can't find a destructor for the \" + entity.type + \" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)\");\n            },\n            return_type_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.dtor.return_type_prohibited\", \"A destructor is not allowed to specify a return type.\");\n            }\n            // TODO Add warning for non-virtual destructor if derived classes exist\n        },\n        // no_type : function(construct: TranslationUnitConstruct) {\n        //     return new CompilerNote(construct, NoteKind.ERROR, \"declaration.no_type\", \"ISO C++ forbids declaration with no type.\");\n        // },\n        // prev_decl : function(construct: TranslationUnitConstruct, name, prev) {\n        //     return new CompilerNote(construct, NoteKind.ERROR, \"declaration.prev_decl\", name + \" cannot be declared more than once in this scope.\");\n        // },\n        prev_def: function (construct: TranslationUnitConstruct, name: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"declaration.prev_def\", name + \" cannot be defined more than once in this scope.\");\n        },\n        prev_local: function (construct: TranslationUnitConstruct, name: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"declaration.prev_local\", `This re-declaration of a local variable ${name} is not allowed - ${name} was already declared earlier in the same scope.`);\n        },\n        prev_member: function (construct: TranslationUnitConstruct, name: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"declaration.prev_member\", `This re-declaration of a member variable ${name} is not allowed - ${name} was already declared as a member earlier.`);\n        },\n        // prev_main : function(construct: TranslationUnitConstruct, name, prev) {\n        //     return new CompilerNote(construct, NoteKind.ERROR, \"declaration.prev_main\", name + \" cannot be defined more than once in this scope.\");\n        // },\n        func: {\n            return_array: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.return_array\", \"Cannot declare a function that returns an array.\");\n            },\n            return_func: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.return_func\", \"Cannot declare a function that returns a function. Try returning a function pointer?\");\n            },\n            invalid_return_type: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.invalid_return_type\", `The type ${type.toString()} is not allowed as a return type.`);\n            },\n            some_invalid_parameter_types: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.some_invalid_parameter_types\", `This function type contains some invalid parameter types.`);\n            },\n            array: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.array\", \"Cannot declare an array of functions.\");\n            },\n            void_param: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.void_param\", \"Function parameters may not have void type.\");\n            },\n            op_member: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.op_member\", \"This operator must be overloaded as a non-static member function.\");\n            },\n            op_subscript_one_param: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.op_subscript_one_param\", \"An overloaded subscript ([]) operator must take exactly one parameter.\");\n            },\n            returnTypesMatch: function (declarations: SimpleDeclaration[], name: string) {\n                return new CompilerNote(declarations, NoteKind.ERROR, \"declaration.func.returnTypesMatch\", \"Cannot redeclare function \" + name + \" with the same parameter types but a different return type.\");\n            },\n            mainParams: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.mainParams\", \"Sorry, but for now command line arguments (and thus parameters for main) are not supported in Lobster.\");\n            },\n            no_return_type: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.no_return_type\", \"You must specify a return type for this function. (Or if you meant it to be a constructor, did you misspell the name?)\");\n            },\n            nonCovariantReturnType: function (construct: TranslationUnitConstruct, derived: Type, base: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.nonCovariantReturnType\", \"Return types in overridden virtual functions must either be the same or covariant (i.e. follow the Liskov Substitution Principle). Both return types must be pointers/references to class types, and the class type in the overriding function must be the same or a derived type. There are also restrictions on the cv-qualifications of the return types. In this case, returning a \" + derived + \" in place of a \" + base + \" violates covariance.\");\n            },\n            definition_non_function_type: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.func.definition_non_function_type\", \"This appears to be a function definition, but the declarator does not indicate a function type. Maybe you forgot the parentheses?\");\n            },\n            multiple_def: function (def: FunctionDefinition, prevDef: FunctionDefinition) {\n                return new CompilerNote(def, NoteKind.ERROR, \"declaration.func.multiple_def\", `The function ${def.name} cannot be defined more than once.`);\n            }\n        },\n        variable: {\n            multiple_def: function (def: VariableDefinition | ParameterDefinition, prevDef: VariableDefinition | ParameterDefinition) {\n                return new CompilerNote(def, NoteKind.ERROR, \"declaration.variable.multiple_def\", `The function ${def.name} cannot be defined more than once.`);\n            }\n        },\n        classes: {\n            multiple_def: function (construct: ClassDefinition, prev: ClassDefinition) : CompilerNote {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.classes.multiple_def\", `The class ${construct.name} cannot be defined more than once.`);\n            },\n            storage_prohibited: function (construct: StorageSpecifier) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.classes.storage_prohibited\", `Storage specifiers are not permitted in class declarations.`);\n            }\n        },\n        pointer: {\n            reference: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.pointer.reference\", \"Cannot declare a pointer to a reference.\");\n            },\n            void: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.pointer.void\", \"Sorry, Lobster does not support void pointers.\");\n            },\n            invalid_pointed_type: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.pointer.invalid_pointed_type\", `A pointer to type ${type.toString()} is not allowed.`);\n            }\n        },\n        ref: {\n            ref: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ref.ref\", \"A reference to a reference is not allowed.\");\n            },\n            // TODO: move this to array section instead\n            array: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ref.array\", \"Cannot declare an array of references.\");\n            },\n            invalid_referred_type: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ref.invalid_referred_type\", `A reference to type ${type.toString()} is not allowed.`);\n            },\n            memberNotSupported: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.ref.memberNotSupported\", \"Sorry, reference members are not supported at the moment.\");\n            }\n        },\n        array: {\n            length_required: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.array.length_required\", \"Must specify length as an integer literal when declaring an array. (Sorry, but Lobster requires this for now even if it could hypothetically be deduced from the initializer.)\");\n            },\n            zero_length: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.array.zero_length\", \"Although technically allowed in C++, arrays with zero length are prohibited in Lobster.\");\n            },\n            multidimensional_arrays_unsupported: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.array.multidimensional_arrays_unsupported\", \"Sorry, Lobster currently doesn't support multidimensional arrays.\");\n            },\n            invalid_element_type: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.array.invalid_element_type\", `The type ${type.toString()} is not allowed as an array parameter.`);\n            }\n        },\n        init: {\n            scalar_args: function (construct: TranslationUnitConstruct, declType: AtomicType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.scalar_args\", \"Invalid initialization of scalar type \" + declType + \" from multiple values.\");\n            },\n            array_string_literal: function (construct: TranslationUnitConstruct, targetType: BoundedArrayType | ArrayOfUnknownBoundType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.array_string_literal\", \"Cannot direct/copy initialize an array of type \" + targetType + \". The only allowed direct/copy initialization of an array is to initialize an array of char from a string literal.\");\n            },\n            convert: function (construct: TranslationUnitConstruct, initType: Type, declType: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.convert\", \"Invalid conversion from \" + initType + \" to \" + declType + \".\");\n            },\n            list_reference_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.list_reference_prohibited\", \"A reference may not be initialized using list-initialization.\");\n            },\n            list_atomic_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.list_atomic_prohibited\", \"An atomic type may not be initialized using list-initialization.\");\n            },\n            list_array_unsupported: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.list_array_prohibited\", \"Sorry, Lobster doesn't currently support using list-initialization for arrays.\");\n            },\n            aggregate_unsupported: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.aggregate_unsupported\", \"Sorry, Lobster doesn't currently support aggregate initialization for compound objects.\");\n            },\n            list_narrowing: function (construct: TranslationUnitConstruct, initType: Type, declType: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.list_narrowing\", \"Implicit narrowing conversion from \" + initType + \" to \" + declType + \" is not allowed in initializer list.\");\n            },\n            list_array: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.list_array\", \"Initializer list syntax only supported for arrays.\");\n            },\n            list_length: function (construct: TranslationUnitConstruct, length: number) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.list_length\", \"Length of initializer list must match length of array (\" + length + \").\");\n            },\n            list_empty: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.list_empty\", \"Sorry, lobster does not currently support empty list initialization.\");\n            },\n            list_same_type: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.list_same_type\", \"All elements of an initializer-list must have the same type in Lobster.\");\n            },\n            list_arithmetic_type: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.list_arithmetic_type\", \"Sorry, for now Lobster only supports initializer lists with arithmetic types.\");\n            },\n            matching_constructor: function (construct: TranslationUnitConstruct, entity: ObjectEntity<CompleteClassType>, argTypes: readonly Type[]) {\n                var desc = entity.describe();\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.matching_constructor\", \"Trying to initialize \" + (desc.name || desc.message) + \", but unable to find a matching constructor definition for the \" + entity.type.className + \" class using the given arguments (\" + argTypes.join(\", \") + \").\");\n            },\n            no_default_constructor: function (construct: TranslationUnitConstruct, entity: ObjectEntity<CompleteClassType>) {\n                var desc = entity.describe();\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.no_default_constructor\", \"This calls for the default initialization of \" + (desc.name || desc.message) + \", but I can't find a default constructor (i.e. taking no arguments) for the \" + entity.type.className + \" class. The compiler usually provides an implicit one for you, but not if you have declared other constructors (under the assumption you would want to use one of those).\");\n            },\n            referencePrvalueConst: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.referencePrvalueConst\", \"You cannot bind a non-const reference to a prvalue (e.g. a temporary object).\");\n            },\n            referenceType: function (construct: TranslationUnitConstruct, from: Type, to: ReferenceType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.referenceType\", \"A reference (of type \" + to + \") cannot be bound to an object of a different type (\" + from + \").\");\n            },\n            referenceBind: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.referenceBind\", \"References must be bound to something when they are declared.\");\n            },\n            referenceBindMultiple: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.referenceBindMultiple\", \"References cannot be bound to multiple objects.\");\n            },\n            stringLiteralLength: function (construct: TranslationUnitConstruct, stringSize: number, arrSize: number) {\n                if (arrSize === stringSize - 1) {\n                    return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.stringLiteralLength\", \"Your array is one element too short. Remember, when initializing a character array (i.e. a c-string) with a string literal, an extra \\\\0 (null character) is automatically appended.\");\n                }\n                else if (arrSize > stringSize) {\n                    return new CompilerNote(construct, NoteKind.WARNING, \"declaration.init.stringLiteralLength\", \"Your array (length \" + arrSize + \") is longer than it needs to be to hold the string literal (length \" + stringSize + \"). The remaining character elements will be zero-initialized.\");\n                }\n                else {\n                    return new CompilerNote(construct, NoteKind.ERROR, \"declaration.init.stringLiteralLength\", \"The string literal used for initialization (length \" + stringSize + \") cannot fit in the declared array (length \" + arrSize + \").\");\n                }\n            },\n            uninitialized: function (construct: TranslationUnitConstruct, ent: ObjectEntity) {\n                return new CompilerNote(construct, NoteKind.WARNING, \"declaration.init.uninitialized\", (ent.describe().name || ent.describe().message) + \" is uninitialized, so it will start with whatever value happens to be in memory (i.e. memory junk). If you try to use this variable before initializing it, who knows what will happen!\");\n            },\n            array_default_init: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.WARNING, \"declaration.init.array_default_init\", \"Note: Default initialization of an array requires default initialization of each of its elements.\");\n            },\n            array_direct_init: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.OTHER, \"declaration.init.array_direct_init\", \"Note: initialization of an array requires initialization of each of its elements.\");\n            }\n\n        },\n        storage: {\n            once: function (construct: TranslationUnitConstruct, spec: StorageSpecifierKey) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.storage.once\", \"Storage specifier (\" + spec + \") may only be used once.\");\n            },\n            incompatible: function (construct: TranslationUnitConstruct, specs: readonly StorageSpecifierKey[]) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.storage.incompatible\", \"Storage specifiers ( \" + specs.join(\" \") + \") are incompatible with each other.\");\n            },\n            // typedef : function(construct: TranslationUnitConstruct, specs) {\n            //     return new CompilerNote(construct, NoteKind.ERROR, \"declaration.storage.typedef\", \"Storage specifiers may not be used in a typedef. (\" + specs + \" were found.)\");\n            // }\n        },\n        typeSpecifier: {\n            once: function (construct: TranslationUnitConstruct, spec: TypeSpecifierKey) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.typeSpecifier.once\", \"Type specifier (\" + spec + \") may only be used once.\");\n            },\n            one_type: function (construct: TranslationUnitConstruct, typeNames: readonly SimpleTypeName[]) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.typeSpecifier.one_type\", `Type specifier must only specify one type. Found: ${typeNames}.`);\n            },\n            signed_unsigned: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"type.signed_unsigned\", \"Type specifier may not indicate both signed and unsigned.\");\n            },\n        },\n        friend: {\n            outside_class: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.friend.outside_class\", \"Friend declarations are not allowed here.\");\n            },\n            virtual_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.friend.virtual_prohibited\", \"A virtual function may not be declared as a friend.\");\n            }\n        },\n        parameter: {\n            storage_prohibited: function (construct: StorageSpecifier) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.parameter.storage_prohibited\", \"Storage specifiers are not permitted in parameter declarations.\");\n            },\n            invalid_parameter_type: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.parameter.invalid_parameter_type\", `The type ${type} is not a valid parameter type.`);\n            },\n            virtual_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.friend.virtual_prohibited\", \"A virtual function may not be declared as a friend.\");\n            }\n        },\n        missing_type_specifier: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"declaration.missing_type_specifier\", \"This declaration appears to be missing a type specifier.\");\n        },\n        unknown_type: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"declaration.unknown_type\", \"Unable to determine the type declared here.\");\n        },\n        void_prohibited: function (construct: VoidDeclaration) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"declaration.void_prohibited\", `The variable ${construct.declarator.name || \"here\"} may not be declared as type void.`);\n        },\n        incomplete_type_definition_prohibited: function (construct: IncompleteTypeVariableDefinition) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"declaration.incomplete_type_definition_prohibited\", `Because the type ${construct.type} is incomplete, defining a variable with that type is not allowed.`);\n        },\n        virtual_prohibited: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"declaration.virtual_prohibited\", \"The virtual keyword may only be used in member function declarations.\");\n        },\n        type_mismatch: function (construct: TranslationUnitConstruct, newEntity: DeclaredEntity, existingEntity: DeclaredEntity) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"declaration.type_mismatch\", `Type mismatch. This declaration for ${newEntity.name} has type ${newEntity.type}, but a previous declaration of ${existingEntity.name} has type ${existingEntity.type}`);\n        },\n        symbol_mismatch: function (construct: TranslationUnitConstruct, newEntity: DeclaredEntity) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"declaration.symbol_mismatch\", `Cannot redeclare ${newEntity.name} as a different kind of symbol.`);\n        },\n        member : {\n            incomplete_type_declaration_prohibited: function (construct: IncompleteTypeMemberVariableDeclaration) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"declaration.member.incomplete_type_declaration_prohibited\", `Because the type ${construct.type} is incomplete, declaring a member variable with that type is not allowed.`);\n            },\n        }\n    },\n    type: {\n\n        unsigned_not_supported: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.WARNING, \"type.unsigned_not_supported\", \"Sorry, unsigned integral types are not supported yet. It will just be treated like a normal int.\");\n        },\n        storage: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.WARNING, \"type.storage\", \"Because of the way Lobster works, storage class specifiers (e.g. static) have no effect.\");\n        },\n        typeNotFound: function (construct: TranslationUnitConstruct, typeName: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"type.typeNotFound\", \"Oops, this is embarassing... I feel like \" + typeName + \" should be a type, but I can't figure out what it is.\");\n        }\n    },\n    expr: {\n        // overloadLookup : function(construct: TranslationUnitConstruct, op) {\n        //     return new CompilerNote(construct, NoteKind.ERROR, \"expr.overloadLookup\", \"Trying to find a function implementing an overloaded \" + op + \" operator...\");\n        // },\n        assignment: {\n            lhs_lvalue: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.assignment.lhs_lvalue\", \"Lvalue required as left operand of assignment.\");\n            },\n            lhs_not_assignable: function (construct: TranslationUnitConstruct, lhs: TypedExpression) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.assignment.lhs_not_assignable\", `The left hand side of this expression has type ${lhs.type}, which is not assignable.`);\n            },\n            lhs_const: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.assignment.lhs_const\", \"Left hand side of assignment is not modifiable.\");\n            },\n            convert: function (construct: TranslationUnitConstruct, lhs: TypedExpression, rhs: TypedExpression) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.assignment.convert\", \"Cannot convert \" + rhs.type + \" to \" + lhs.type + \" in assignment.\");\n            },\n            self: function (construct: TranslationUnitConstruct, entity: ObjectEntity) {\n                return new CompilerNote(construct, NoteKind.WARNING, \"expr.assignment.self\", \"Self assignment from \" + (entity.describe().name || entity.describe().message) + \" to itself.\");\n            }\n            // not_defined : function(construct: TranslationUnitConstruct, type) {\n            //     return new CompilerNote(construct, NoteKind.ERROR, \"expr.assignment.not_defined\", \"An assignment operator for the type \" + type + \" cannot be found.\");\n            // }\n\n        },\n        binary: {\n            // overload_not_found : function(construct: TranslationUnitConstruct, op, operands) {\n            //     return new CompilerNote(construct, NoteKind.ERROR, \"expr.binary.overload_not_found\", \"An overloaded \" + op + \" operator for the types (\" + operands.map((op)=>{return op.type;}).join(\", \") + \") cannot be found.\");\n            // },\n            arithmetic_operands: function (construct: TranslationUnitConstruct, operator: string, left: TypedExpression, right: TypedExpression) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.binary.arithmetic_operands\", \"Invalid operand types (\" + left.type + \", \" + right.type + \") for operator \" + operator + \", which requires operands of arithmetic type.\");\n            },\n            integral_operands: function (construct: TranslationUnitConstruct, operator: string, left: TypedExpression, right: TypedExpression) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.binary.integral_operands\", \"Invalid operand types (\" + left.type + \", \" + right.type + \") for operator \" + operator + \", which requires operands of integral type.\");\n            },\n            boolean_operand: function (construct: TranslationUnitConstruct, operator: string, operand: TypedExpression) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.binary.boolean_operand\", \"Invalid operand type (\" + operand.type + \") for operator \" + operator + \", which requires operands that may be converted to boolean type.\");\n            },\n            arithmetic_common_type: function (construct: TranslationUnitConstruct, operator: string, left: TypedExpression, right: TypedExpression) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.binary.arithmetic_common_type\", \"Performing the usual arithmetic conversions yielded operands of types (\" + left.type + \", \" + right.type + \") for operator \" + operator + \", but a common arithmetic type could not be found.\");\n            }\n        },\n        pointer_difference: {\n            incomplete_pointed_type: function (construct: TranslationUnitConstruct, type: PointerType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.pointer_difference.incomplete_pointed_type\", `Pointer subtraction is not allowed in this case, because the pointers point to an incomplete type, ${type}. (The size of objects of an incomplete type is unknown, which prevents the subtraction.)`);\n            }\n        },\n        pointer_offset: {\n            incomplete_pointed_type: function (construct: TranslationUnitConstruct, type: PointerType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.pointer_offset.incomplete_pointed_type\", `Computing a pointer offset is not allowed in this case, because the pointer points to an incomplete type, ${type}. (The size of objects of an incomplete type is unknown, which prevents the subtraction.)`);\n            }\n        },\n        output: {\n            unsupported_type: function (construct: TranslationUnitConstruct, type: ExpressionType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.output.unsupported_type\", `The built-in << operator does not support the type: ${type}`);\n            }\n        },\n        input: {\n            unsupported_type: function (construct: TranslationUnitConstruct, type: ExpressionType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.input.unsupported_type\", `The built-in >> operator does not support the type: ${type}`);\n            },\n            lvalue_required: function (construct: TranslationUnitConstruct, type: ExpressionType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.input.lvalue_required\", `An input operation using >> must have an object as its right operand so that the data has a place to be read into.`);\n            }\n        },\n        pointer_comparison: {\n            same_pointer_type_required: function (construct: TranslationUnitConstruct, left: TypedExpression, right: TypedExpression) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.pointer_comparison.same_pointer_type_requried\", `Comparing the addresses of pointers to different types is prohibited (${left.type} and ${right.type}).`);\n            },\n            null_literal_comparison: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.pointer_comparison.null_literal_comparison\", `Comparing against a null pointer literal with <, <=, >, or >= is technically prohibited by the C++ language standard (although some compilers may allow it). If you're trying to check for a null pointer, use == or != instead.`);\n            },\n            null_literal_array_equality: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.WARNING, \"expr.pointer_comparison.null_literal_array_equality\", `The address at the start of an array will never be 0, so this comparison is not meaningful.`);\n            },\n        },\n        unary: {\n            // overload_not_found : function(construct: TranslationUnitConstruct, op, type) {\n            //     return new CompilerNote(construct, NoteKind.ERROR, \"expr.unary.overload_not_found\", \"An overloaded \" + op + \" operator for the type \" + type + \" cannot be found.\");\n            // }\n        },\n        delete: {\n            no_destructor: function (construct: TranslationUnitConstruct, type: CompleteClassType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.delete.no_destructor\", \"I can't find a destructor for the \" + type + \" class. The compiler sometimes provides one implicitly for you, but not if one of its members or its base class are missing a destructor. (Or, if you've violated the rule of the Big Three.)\");\n            },\n            pointer: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.delete.pointer\", \"The delete operator requires an operand of pointer type. (Current operand is \" + type + \" ).\");\n            },\n            pointerToObjectType: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.delete.pointerToObjectType\", \"The delete operator cannot be used with a pointer to a non-object type (e.g. void pointers, function pointers). (Current operand is \" + type + \" ).\");\n            }\n        },\n        dereference: {\n            pointer: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.dereference.pointer\", \"The dereference operator (*) requires an operand of pointer type. (Current operand is \" + type + \" ).\");\n            },\n            pointerToObjectType: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.dereference.pointerToObjectType\", \"Pointers to a non-object, non-function type (e.g. void pointers) cannot be dereferenced. (Current operand is \" + type + \" ).\");\n            }\n        },\n        subscript: {\n            invalid_operand_type: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.subscript.invalid_operand_type\", \"Type \" + type + \" cannot be subscripted.\");\n            },\n            incomplete_element_type: function (construct: TranslationUnitConstruct, type: PointerType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.subscript.invalid_operand_type\", \"This subscript operation is not allowed, becasue the element type of \" + type.ptrTo + \" is incomplete. Since an incomplete type does not have a known size, the pointer arithmetic necessary for the subscript cannot be done.\");\n            },\n            invalid_offset_type: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.subscript.invalid_offset_type\", \"Invalid type (\" + type + \") for array subscript offset.\");\n            }\n        },\n        dot: {\n            class_type_only: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.dot.class_type_only\", \"The dot operator can only be used to access members of an operand with class type.\");\n            },\n            incomplete_class_type_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.dot.incomplete_class_type_prohibited\", \"The dot operator may not be used to access members from an incomplete type. (Since it's incomplete, the compiler doesn't know what members it has yet!)\");\n            },\n            no_such_member: function (construct: TranslationUnitConstruct, classType: CompleteClassType, name: string) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.dot.no_such_member\", \"The type \" + classType + \" has no member named \" + name + \".\");\n            },\n            ambiguous_member: function (construct: TranslationUnitConstruct, name: string) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.dot.ambiguous\", \"The member \\\"\" + name + \"\\\" is ambiguous. (There is not enough contextual type information for name lookup to figure out which member this refers to.)\");\n            },\n            class_entity_found: function (construct: TranslationUnitConstruct, name: string) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.dot.class_entity_found\", `The name \"${name}\" refers to a type member in this context. The type itself cannot be used in an expression.`);\n            }\n        },\n        arrow: {\n            class_pointer_type: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.arrow.class_pointer_type\", \"The arrow operator can only be used to access members of an operand with pointer-to-class type.\");\n            },\n            no_such_member: function (construct: TranslationUnitConstruct, classType: CompleteClassType, name: string) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.arrow.no_such_member\", \"The type \" + classType + \" has no member named \" + name + \".\");\n            },\n            ambiguous_member: function (construct: TranslationUnitConstruct, name: string) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.arrow.ambiguous\", \"The member \\\"\" + name + \"\\\" is ambiguous. (There is not enough contextual type information for name lookup to figure out which member this refers to.)\");\n            },\n            class_entity_found: function (construct: TranslationUnitConstruct, name: string) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.arrow.class_entity_found\", `The name \"${name}\" refers to a type member in this context. The type itself cannot be used in an expression.`);\n            },\n            incomplete_class_type_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.arrow.incomplete_class_type_prohibited\", \"The arrow operator may not be used to access members from an incomplete type. (Since it's incomplete, the compiler doesn't know what members it has yet!)\");\n            }\n        },\n        invalid_operand: function (construct: TranslationUnitConstruct, operator: string, operand: TypedExpression) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"expr.invalid_operand\", \"Invalid operand type (\" + operand.type + \") for operator \" + operator + \".\");\n        },\n        lvalue_operand: function (construct: TranslationUnitConstruct, operator: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"expr.lvalue_operand\", \"The \" + operator + \" operator requires an lvalue operand.\");\n        },\n        invalid_binary_operands: function (construct: TranslationUnitConstruct, operator: string, left: TypedExpression, right: TypedExpression) {\n\n            if (left.type.isPointerType() && sameType(left.type.ptrTo, right.type)) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.invalid_binary_operands\", \"The types of the operands used for the \" + operator + \" operator \" +\n                    \"aren't quite compatible. The one on the right is \" + right.type.englishString(false) + \", but the left is a pointer to that type. Think about whether you want to compare pointers (addresses) or the objects they point to.\");\n            }\n            else if (right.type.isPointerType() && sameType(right.type.ptrTo, left.type)) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.invalid_binary_operands\", \"The types of the operands used for the \" + operator + \" operator \" +\n                    \"aren't quite compatible. The one on the left is \" + left.type.englishString(false) + \", but the right is a pointer to that type.  Think about whether you want to compare pointers (addresses) or the objects they point to.\");\n            }\n\n            return new CompilerNote(construct, NoteKind.ERROR, \"expr.invalid_binary_operands\", \"Invalid operand types (\" + left.type + \", \" + right.type + \") for operator \" + operator + \".\");\n        },\n        logicalNot: {\n            operand_bool: function (construct: TranslationUnitConstruct, operand: TypedExpression) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.logicalNot.operand_bool\", \"Expression of type (\" + operand.type + \") cannot be converted to boolean (as required for the operand of logical not).\");\n            }\n        },\n        addressOf: {\n            lvalue_required: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.addressOf.lvalue_required\", \"Operand for address-of operator (&) must be an lvalue.\");\n            },\n            object_type_required: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.addressOf.object_type_required\", \"The address-of operator (&) may not be applied to an operand of this type.\");\n            }\n        },\n        ternary: {\n            condition_bool: function (construct: TranslationUnitConstruct, type: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.ternary.condition_bool\", \"Expression of type (\" + type + \") cannot be converted to boolean condition.\");\n            },\n            sameValueCategory: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.ternary.sameValueCategory\", \"The second and third operands of the ternary operator must yield a common value category.\");\n            }\n        },\n        unaryPlus: {\n            operand: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.unaryPlus.operand\", \"The unary plus operator (+) requires an operand of arithmetic or pointer type.\");\n            }\n        },\n        unaryMinus: {\n            operand: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.unaryMinus.operand\", \"The unary minus operator (-) requires an operand of arithmetic type.\");\n            }\n        },\n        prefixIncrement: {\n            lvalue_required: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.prefixIncrement.lvalue_required\", \"The operand of the prefix increment/decrement operators must be an lvalue.\");\n            },\n            operand: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.prefixIncrement.operand\", \"The prefix increment/decrement operators requires an operand whose type is arithmetic or a pointer to a completely-defined object type.\");\n            },\n            decrement_bool_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.prefixIncrement.decrement_bool_prohibited\", \"The -- operator may not be used on an object of boolean type.\");\n            },\n            const_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.prefixIncrement.const_prohibited\", \"The prefix increment/decrement operator may not be used on a const object.\");\n            }\n        },\n        postfixIncrement: {\n            lvalue_required: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.postfixIncrement.lvalue_required\", \"The operand of the postfix increment/decrement operators must be an lvalue.\");\n            },\n            operand: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.postfixIncrement.operand\", \"The postfix increment/decrement operators requires an operand whose type is arithmetic or a pointer to a completely-defined object type.\");\n            },\n            decrement_bool_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.postfixIncrement.decrement_bool_prohibited\", \"The -- operator may not be used on an object of boolean type.\");\n            },\n            const_prohibited: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.postfixIncrement.const_prohibited\", \"The -- operator may not be used on a const object.\");\n            }\n        },\n        functionCall: {\n            main: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.functionCall.main\", \"You can't explicitly call main.\");\n            },\n            numParams: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.functionCall.numParams\", \"Improper number of arguments for this function call.\");\n            },\n            invalid_operand_expression: function (construct: TranslationUnitConstruct, operand: Expression) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.functionCall.invalid_operand_expression\", \"This expression cannot be called as a function.\");\n            },\n            operand: function (construct: TranslationUnitConstruct, operand: CPPEntity) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.functionCall.operand\", \"Operand of type \" + operand.type + \" cannot be called as a function.\");\n            },\n            paramType: function (construct: TranslationUnitConstruct, from: Type, to: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.functionCall.paramType\", \"Cannot convert \" + from + \" to \" + to + \" in function call parameter.\");\n            },\n            paramReferenceType: function (construct: TranslationUnitConstruct, from: Type, to: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.functionCall.paramReferenceType\", \"The given argument (of type \" + from + \") cannot be bound to a reference parameter of a different type (\" + to + \").\");\n            },\n            paramReferenceLvalue: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.functionCall.paramReferenceLvalue\", \"For now, you cannot bind a non-lvalue as a reference parameter in Lobster. (i.e. you have to bind a variable)\");\n            },\n            not_defined: function (construct: TranslationUnitConstruct, type: Type, paramTypes: readonly PotentialParameterType[]) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.functionCall.not_defined\", \"A function call operator with parameters of types (\" +\n                    paramTypes.map(function (pt) {\n                        return pt.toString();\n                    }).join(\", \")\n                    + \") for the class type \" + type + \" has not been defined.\");\n            },\n            incomplete_return_type: function (construct: TranslationUnitConstruct, returnType: PotentialReturnType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.functionCall.incomplete_return_type\", \"Calling a function with an incomplete return type is not allowed. (The type \" + returnType + \" is incomplete.\");\n            }\n            //,\n            //tail_recursive : function(construct: TranslationUnitConstruct, reason) {\n            //    return WidgetAnnotation.instance(src, \"tailRecursive\", \"This function call is tail recursive!\" + (reason ? \" \"+reason : \"\"));\n            //},\n            //not_tail_recursive : function(construct: TranslationUnitConstruct, reason) {\n            //    return WidgetAnnotation.instance(src, \"recursive\", \"This function call is recursive, but NOT tail recursive!\" + (reason ? \" \"+reason : \"\"));\n            //}\n\n        },\n        thisExpr: {\n            memberFunc: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.thisExpr.memberFunc\", \"You may only use the </span class='code'>this</span> keyword in non-static member functions.\");\n            }\n        },\n        binaryOperatorOverload: {\n            no_such_overload: function (construct: TranslationUnitConstruct, operator: string) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.binaryOperatorOverload.no_such_overload\", `The ${operator} operator cannot be used with these arguments (and a suitable operator overload function was not found for these types)`);\n            },\n            ambiguous_overload: function (construct: TranslationUnitConstruct, operator: string) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.binaryOperatorOverload.ambiguous_overload\", `The operator ${operator} is ambiguous in this expression. (Several potential operator overloads were found, but there is not enough contextual type information to determine which overload to select.)`);\n            },\n            incomplete_return_type: function (construct: TranslationUnitConstruct, returnType: PotentialReturnType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"expr.binaryOperatorOverload.incomplete_return_type\", \"Calling a function with an incomplete return type is not allowed. (The type \" + returnType + \" is incomplete.\");\n            }\n        },\n\n\n    },\n    iden: {\n        ambiguous: function (construct: TranslationUnitConstruct, name: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"iden.ambiguous\", \"\\\"\" + name + \"\\\" is ambiguous. (There is not enough contextual type information for name lookup to figure out which entity this identifier refers to.)\");\n        },\n        no_match: function (construct: TranslationUnitConstruct, name: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"iden.no_match\", \"No matching function found for call to \\\"\" + name + \"\\\" with these parameter types.\");\n        },\n        class_entity_found: function (construct: TranslationUnitConstruct, name: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"iden.class_entity_found\", `The name \"${name}\" refers to a class type in this context. The class itself cannot be used in an expression.`);\n        },\n        // not_declared : function(construct: TranslationUnitConstruct, name) {\n        //     return new CompilerNote(construct, NoteKind.ERROR, \"iden.not_declared\", \"\\\"\"+name+\"\\\" was not declared in this scope.\");\n        // },\n        keyword: function (construct: TranslationUnitConstruct, name: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"iden.keyword\", \"\\\"\" + name + \"\\\" is a C++ keyword and cannot be used as an identifier.\");\n        },\n        alt_op: function (construct: TranslationUnitConstruct, name: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"iden.alt_op\", \"\\\"\" + name + \"\\\" is a C++ operator and cannot be used as an identifier.\");\n        },\n        not_found: function (construct: TranslationUnitConstruct, name: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"iden.not_found\", `Name lookup was unable to find \"${name}\" in this scope.`);\n        }\n    },\n    param: {\n        numParams: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"param.numParams\", \"Improper number of arguments.\");\n        },\n        paramType: function (construct: TranslationUnitConstruct, from: Type, to: Type) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"param.paramType\", \"Cannot convert \" + from + \" to a parameter of type \" + to + \".\");\n        },\n        paramReferenceType: function (construct: TranslationUnitConstruct, from: Type, to: Type) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"param.paramReferenceType\", \"The given argument (of type \" + from + \") cannot be bound to a reference parameter of a different type (\" + to + \").\");\n        },\n        paramReferenceLvalue: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"param.paramReferenceLvalue\", \"For now, you cannot bind a non-lvalue as a reference parameter in Lobster. (i.e. you have to bind a variable)\");\n        },\n        // paramCopyConstructor : function(construct: TranslationUnitConstruct, type) {\n        //     return new CompilerNote(construct, NoteKind.ERROR, \"param.paramCopyConstructor\", \"Cannot find a copy constructor to pass a parameter of type \" + type + \" by value.\");\n        // },\n        thisConst: function (construct: TranslationUnitConstruct, type: Type) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"param.thisConst\", \"A non-const member function cannot be called on a const instance of the \" + type.cvUnqualified() + \" class.\");\n        }\n    },\n    stmt: {\n        function_definition_prohibited: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"stmt.function_definition_prohibited\", \"A function definition is prohibited here (i.e. inside a statement).\");\n        },\n        if: {\n            condition_bool: function (construct: TranslationUnitConstruct, expr: TypedExpression) {\n                return new CompilerNote(expr, NoteKind.ERROR, \"stmt.if.condition_bool\", \"Expression of type (\" + expr.type + \") cannot be converted to boolean condition.\");\n            }\n        },\n        iteration: {\n            condition_bool: function (construct: TranslationUnitConstruct, expr: TypedExpression) {\n                return new CompilerNote(expr, NoteKind.ERROR, \"stmt.iteration.condition_bool\", \"Expression of type (\" + expr.type + \") cannot be converted to boolean condition.\");\n            }\n        },\n        breakStatement: {\n            location: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"stmt.breakStatement.location\", \"Break statements may only occur inside loops or case statements.\");\n            }\n        },\n        returnStatement: {\n            empty: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"stmt.returnStatement.empty\", \"A return statement without an expression is only allowed in void functions.\");\n            },\n            exprVoid: function (construct: TranslationUnitConstruct) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"stmt.returnStatement.exprVoid\", \"A return statement with an expression of non-void type is only allowed in a non-void function.\");\n            },\n            incomplete_type: function (construct: TranslationUnitConstruct, type: IncompleteObjectType) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"stmt.returnStatement.incomplete_type\", `A function may not return (by-value) an object of incomplete type. (${type} is an incomplete type)`);\n            },\n            convert: function (construct: TranslationUnitConstruct, from: Type, to: Type) {\n                return new CompilerNote(construct, NoteKind.ERROR, \"stmt.returnStatement.convert\", \"Cannot convert \" + from + \" to return type of \" + to + \" in return statement.\");\n            }\n        }\n    },\n    link: {\n        library_unsupported: function (construct: TranslationUnitConstruct, func: FunctionEntity) {\n            return new LinkerNote(construct, NoteKind.ERROR, \"link.library_unsupported\", \"I'm sorry, but this function (\" + func + \") is a part of the standard library that isn't currently supported.\");\n        },\n        multiple_def: function (construct: TranslationUnitConstruct, name: string) {\n            return new LinkerNote(construct, NoteKind.ERROR, \"link.multiple_def\", \"Multiple definitions found for \" + name + \".\");\n        },\n        type_mismatch: function (construct: TranslationUnitConstruct, ent1: DeclaredEntity, ent2: DeclaredEntity) {\n            return new LinkerNote(construct, NoteKind.ERROR, \"link.type_mismatch\", \"Multiple declarations found for \" + ent1.name + \", but with different types.\");\n        },\n        class_same_tokens: function (newDef: ClassDefinition, prevDef: ClassDefinition) {\n            return new LinkerNote([newDef, prevDef], NoteKind.ERROR, \"link.class_same_tokens\", \"Multiple class definitions are ok if they are EXACTLY the same in the source code. However, the multiple definitions found for \" + newDef.name + \" do not match exactly.\");\n        },\n        func: {\n            def_not_found: function (construct: FunctionDeclaration, func: FunctionEntity) {\n                return new LinkerNote(construct, NoteKind.ERROR, \"link.func.def_not_found\", \"Cannot find definition for function \" + func.name + \". That is, the function is declared and I know what it is, but I can't find the actual code that implements it.\");\n            },\n            no_matching_overload: function (construct: TranslationUnitConstruct, func: FunctionEntity) {\n                return new LinkerNote(construct, NoteKind.ERROR, \"link.func.no_matching_overload\", `Although some definitions for a function named ${func.name} exist, I can't find one with the right signature to match this declaration.`);\n            },\n            returnTypesMatch: function (construct: TranslationUnitConstruct, func: FunctionEntity) {\n                return new LinkerNote(construct, NoteKind.ERROR, \"link.func.returnTypesMatch\", \"This declaration of the function \" + func.name + \" has a different return type than its definition.\");\n            }\n        },\n        classes: {\n            def_not_found: function (construct: ClassDeclaration, c: ClassEntity) {\n                return new LinkerNote(construct, NoteKind.ERROR, \"link.classes.def_not_found\", \"Cannot find definition for class \" + c.name + \". The class is declared, but I wasn't able to find the actual class definition to link to it.\");\n            },\n        },\n        def_not_found: function (construct: TranslationUnitConstruct, ent: GlobalObjectEntity) {\n            return new LinkerNote(construct, NoteKind.ERROR, \"link.def_not_found\", \"Cannot find definition for object \" + ent.name + \". (It is declared, so I know it's a variable and what type it is, but it's never defined anywhere.)\");\n        },\n        main_multiple_def: function (construct: TranslationUnitConstruct) {\n            return new LinkerNote(construct, NoteKind.ERROR, \"link.main_multiple_def\", \"Multiple definitions of main are not allowed.\");\n        },\n\n    },\n    // lookup : {\n    //     // badLookup : function(construct: TranslationUnitConstruct, name) {\n    //     //     name = Identifier.qualifiedNameString(name);\n    //     //     return new CompilerNote(construct, NoteKind.ERROR, \"lookup.badLookup\", \"Name lookup for \\\"\"+name+\"\\\" was unsuccessful.)\");\n    //     // },\n    //     ambiguous : function(construct: TranslationUnitConstruct, name) {\n    //         name = Identifier.qualifiedNameString(name);\n    //         return new CompilerNote(construct, NoteKind.ERROR, \"lookup.ambiguous\", \"\\\"\"+name+\"\\\" is ambiguous. (There is not enough contextual type information for name lookup to figure out which entity this identifier refers to.)\");\n    //     },\n    //     no_match : function(construct: TranslationUnitConstruct, name, paramTypes, isThisConst) {\n    //         name = Identifier.qualifiedNameString(name);\n    //         return new CompilerNote(construct, NoteKind.ERROR, \"lookup.no_match\", \"No matching function found for call to \\\"\"+name+\"\\\" with parameter types (\" +\n    //         paramTypes.map(function(pt) {\n    //             return pt.toString();\n    //         }).join(\", \") +\n    //         \")\" + (isThisConst ? \" and that may be applied to a const object (or called from const member function).\" : \".\"));\n    //     },\n    //     hidden : function(construct: TranslationUnitConstruct, name, paramTypes, isThisConst) {\n    //         name = Identifier.qualifiedNameString(name);\n    //         return new CompilerNote(construct, NoteKind.ERROR, \"lookup.hidden\", \"No matching function found for call to \\\"\"+name+\"\\\" with parameter types(\" +\n    //             paramTypes.map(function(pt) {\n    //                 return pt.toString();\n    //             }).join(\", \") +\n    //             \")\" + (isThisConst ? \" and that may be applied to a const object (or called from const member function).\" : \".\") + \" (Actually, there is a match in a more distant scope, but it is hidden by an entity of the same name in a nearer scope.)\");\n    //     },\n    //     not_found : function(construct: TranslationUnitConstruct, name) {\n    //         name = Identifier.qualifiedNameString(name);\n    //         return new CompilerNote(construct, NoteKind.ERROR, \"lookup.not_found\", \"Cannot find declaration for \\\"\"+name+\"\\\".\");\n    //     }\n    // },\n    preprocess: {\n        recursiveInclude: function (sourceRef: SourceReference) {\n            return new PreprocessorNote(sourceRef, NoteKind.WARNING, \"preprocess.recursiveInclude\", \"Recursive #include detected. (i.e. A file #included itself, or #included a different file that then #includes the original, etc.)\");\n        },\n        fileNotFound: function (sourceRef: SourceReference, name: string) {\n            return new PreprocessorNote(sourceRef, NoteKind.ERROR, \"preprocess.fileNotFound\", `The file ${name} does not exist.`);\n        }\n    },\n    lobster: {\n        unsupported_feature: function (construct: TranslationUnitConstruct, feature: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"lobster.unsupported_feature\", \"Sorry, you have used a C++ feature (\" + feature + \") that is not currently supported in Lobster.\");\n        },\n        referencePrvalue: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"lobster.referencePrvalue\", \"Sorry, Lobster does not yet support binding references (even if they are reference-to-const) to prvalues (e.g. temporary objects).\");\n        },\n        ternarySameType: function (construct: TranslationUnitConstruct, type1: Type, type2: Type) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"lobster.ternarySameType\", \"Lobster's ternary operator requires second and third operands of the same type. The given operands have types \" + type1 + \" and \" + type2 + \".\");\n        },\n        ternaryNoVoid: function (construct: TranslationUnitConstruct) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"lobster.ternaryNoVoid\", \"Lobster's ternary operator does not allow void operands.\");\n        },\n        keyword: function (construct: TranslationUnitConstruct, name: string) {\n            return new CompilerNote(construct, NoteKind.ERROR, \"lobster.keyword\", \"\\\"\" + name + \"\\\" is a special keyword used by the Lobster system and cannot be used as an identifier.\");\n        },\n    }\n};\n\nexport interface NoteHandler {\n    addNote(note: Note): void;\n\n\n}","import { ExpressionASTNode, StringLiteralExpression, AnalyticExpression, CompiledExpressionKinds, AnalyticTypedExpression } from \"./expressions\";\n\nimport { ExpressionContext, RuntimeConstruct, CPPConstruct, ConstructDescription, SuccessfullyCompiled, CompiledTemporaryDeallocator } from \"./constructs\";\nimport { PotentialFullExpression, RuntimePotentialFullExpression } from \"./PotentialFullExpression\";\n\nimport { Type, CompleteObjectType, AtomicType, ArithmeticType, IntegralType, FloatingPointType, PointerType, ReferenceType, BoundedArrayType, ArrayOfUnknownBoundType, FunctionType, PotentiallyCompleteClassType, CompleteClassType, isAtomicType, isCompleteObjectType, ExpressionType } from \"./types\";\n\nimport { Constructor, Mutable } from \"../util/util\";\n\nimport { FunctionEntity } from \"./entities\";\n\nimport { Value } from \"./runtimeEnvironment\";\n\nimport { CPPObject } from \"./objects\";\nimport { ConstructOutlet, ExpressionOutlet } from \"../view/codeOutlets\";\nimport { Predicates } from \"./predicates\";\n\n\nexport type ValueCategory = \"prvalue\" | \"lvalue\";\n\nexport abstract class Expression<ASTType extends ExpressionASTNode = ExpressionASTNode> extends PotentialFullExpression<ExpressionContext, ASTType> {\n\n    public abstract readonly type?: ExpressionType;\n    public abstract readonly valueCategory?: ValueCategory;\n    public readonly conversionLength: number = 0;\n\n    public readonly foo?: string;\n\n    protected constructor(context: ExpressionContext, ast: ASTType | undefined) {\n        super(context, ast);\n    }\n\n    // public abstract createRuntimeExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory>(this: CompiledExpression<T,V>, parent: RuntimeConstruct) : RuntimeExpression<T,V>;\n\n    public abstract createDefaultOutlet(this: CompiledExpression, element: JQuery, parent?: ConstructOutlet): ExpressionOutlet;\n\n    public isWellTyped(): this is TypedExpression {\n        return !!this.type && !!this.valueCategory;\n    }\n\n    public isTyped<T extends ExpressionType>(type: T) : this is TypedExpression<T> {\n        return !!this.type?.sameType(type);\n    }\n\n    public isPrvalue<T extends ExpressionType, V extends ValueCategory>(this: TypedExpression<T, V>): this is TypedExpression<T, \"prvalue\"> {\n        return this.valueCategory === \"prvalue\";\n    }\n\n    public isLvalue<T extends ExpressionType, V extends ValueCategory>(this: TypedExpression<T, V>): this is TypedExpression<T, \"lvalue\"> {\n        return this.valueCategory === \"lvalue\";\n    }\n\n    public isStringLiteralExpression(): this is StringLiteralExpression {\n        return false;\n    }\n\n    // public isSuccessfullyCompiled() : this is Compiled<this> {\n    //     return !this.hasErrors;\n    // }\n\n    public isTailChild(child: CPPConstruct) {\n        return { isTail: false };\n    }\n\n    public abstract describeEvalResult(depth: number): ConstructDescription;\n}\n\nexport interface t_TypedExpression {\n    readonly _t_isTyped: never; // workaround for https://github.com/microsoft/TypeScript/issues/40035\n}\n\nexport interface TypedExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends Expression<ExpressionASTNode> {\n    readonly type: T;\n    readonly valueCategory: V;\n}\n\nexport interface CompiledExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends TypedExpression<T, V>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n}\n\nexport type SpecificCompiledExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> = V extends ValueCategory ? CompiledExpression<T, V> : never;\n\nexport interface WellTyped<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> {\n    readonly type: T;\n    readonly valueCategory: V;\n}\n\nexport type SpecificTypedExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> = TypedExpression<T, V>;\n\n\nexport function allWellTyped(expressions: Expression[]): expressions is TypedExpression[];\nexport function allWellTyped(expressions: readonly Expression[]): expressions is readonly TypedExpression[];\nexport function allWellTyped(expressions: readonly Expression[]): expressions is readonly TypedExpression[] {\n    return expressions.every((expr) => { return expr.isWellTyped(); });\n}\n\nexport function allObjectTyped(expressions: Expression[]): expressions is TypedExpression<CompleteObjectType>[];\nexport function allObjectTyped(expressions: readonly Expression[]): expressions is readonly TypedExpression<CompleteObjectType>[];\nexport function allObjectTyped(expressions: readonly Expression[]): expressions is readonly TypedExpression<CompleteObjectType>[] {\n    return expressions.every((expr) => { return Predicates.isTypedExpression(expr, isCompleteObjectType) });\n}\n\nexport type VCResultTypes<T extends Type, V extends ValueCategory> =\n    T extends FunctionType ? (\n        V extends \"prvalue\" ? never :\n        V extends \"xvalue\" ? never :\n        FunctionEntity // lvalue\n    )\n    : T extends AtomicType ? (\n        V extends \"prvalue\" ? Value<T> :\n        V extends \"xvalue\" ? CPPObject<T> :\n        CPPObject<T> // lvalue\n    )\n    : T extends CompleteObjectType ? (\n\n        // e.g. If T is actually ObjectType, then it could be an AtomicType and we go with the first option Value<AtomicType> | CPPObject<T>.\n        //      However, if T is actually ClassType, then it can't be an AtomicType and we go with the second option of only CPPObject<T>\n        V extends \"prvalue\" ? (AtomicType extends T ? Value<AtomicType> | CPPObject<T> : CPPObject<T>) :\n        V extends \"xvalue\" ? CPPObject<T> :\n        CPPObject<T> // lvalue\n    )\n    : /*ObjectType extends T ?*/ ( // That is, T is more general, so it's possible T is an AtomicType or an ObjectType\n        V extends \"prvalue\" ? Value<AtomicType> | CPPObject<CompleteObjectType> :\n        V extends \"xvalue\" ? CPPObject<CompleteObjectType> :\n        CPPObject<CompleteObjectType> // lvalue\n    )\n// : { // Otherwise, T is NOT possibly an ObjectType. This could happen with e.g. an lvalue expression that yields a function\n//     readonly prvalue: number;\n//     readonly xvalue: number;\n//     readonly lvalue: number;\n// };\n\nexport abstract class RuntimeExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory, C extends CompiledExpression<T, V> = CompiledExpression<T, V>> extends RuntimePotentialFullExpression<C> {\n\n    /**\n     * WARNING: The evalResult property may be undefined, even though it's type suggests it will always\n     * be defined. In most places where it is accessed, there is an implicit assumption that the expression\n     * will already have been evaluated and the client code would end up needing a non-null assertion anyway.\n     * However, those non-null assertions actually introduce some tricky complications with VCResultTypes,\n     * which cause type errors and are a huge pain. So instead we tell the type system to trust us.\n     */\n    public readonly evalResult!: VCResultTypes<T, V>;\n\n    public constructor(model: C, parent: RuntimeConstruct) {\n        super(model, \"expression\", parent);\n    }\n\n    protected setEvalResult(value: VCResultTypes<T, V>) {\n        (<Mutable<this>>this).evalResult = value;\n        this.observable.send(\"evaluated\", value);\n    }\n}\n","import { CPPObject, TemporaryObject } from \"./objects\";\nimport { Simulation, SimulationEvent } from \"./Simulation\";\nimport { CompleteObjectType, AtomicType, IntegralType, PointerType, ReferenceType, BoundedArrayType, FunctionType, isType, PotentialReturnType, Bool, sameType, VoidType, ArithmeticType, ArrayPointerType, Int, PotentialParameterType, Float, Double, Char, PeelReference, peelReference, ArrayOfUnknownBoundType, referenceCompatible, similarType, subType, ArrayElemType, FloatingPointType, isCvConvertible, CompleteClassType, isAtomicType, isArithmeticType, isIntegralType, isPointerType, isBoundedArrayType, isFunctionType, isCompleteObjectType, isPotentiallyCompleteClassType, isCompleteClassType, isFloatingPointType, PotentiallyCompleteObjectType, ExpressionType, Type, CompleteReturnType, PointerToCompleteType, IncompleteClassType, PotentiallyCompleteClassType, isGenericArrayType, isPointerToCompleteType } from \"./types\";\nimport { ASTNode, SuccessfullyCompiled, RuntimeConstruct, CompiledTemporaryDeallocator, CPPConstruct, ExpressionContext, ConstructDescription, createExpressionContextWithReceiverType } from \"./constructs\";\nimport { Note, CPPError, NoteHandler } from \"./errors\";\nimport { FunctionEntity, ObjectEntity, Scope, VariableEntity, MemberVariableEntity, NameLookupOptions, BoundReferenceEntity, runtimeObjectLookup, DeclaredScopeEntry, TemporaryObjectEntity } from \"./entities\";\nimport { Value, RawValueType } from \"./runtimeEnvironment\";\nimport { escapeString, assertNever, assert, assertFalse, Mutable } from \"../util/util\";\nimport { checkIdentifier, MAGIC_FUNCTION_NAMES } from \"./lexical\";\nimport { FunctionCallExpressionASTNode, FunctionCallExpression, TypedFunctionCallExpression, CompiledFunctionCallExpression, RuntimeFunctionCallExpression, FunctionCall, TypedFunctionCall, CompiledFunctionCall, RuntimeFunctionCall } from \"./functionCall\";\nimport { RuntimeExpression, VCResultTypes, ValueCategory, Expression, CompiledExpression, TypedExpression, SpecificTypedExpression, t_TypedExpression, allWellTyped } from \"./expressionBase\";\nimport { ConstructOutlet, TernaryExpressionOutlet, CommaExpressionOutlet, AssignmentExpressionOutlet, BinaryOperatorExpressionOutlet, UnaryOperatorExpressionOutlet, SubscriptExpressionOutlet, IdentifierOutlet, NumericLiteralOutlet, ParenthesesOutlet, MagicFunctionCallExpressionOutlet, StringLiteralExpressionOutlet, LValueToRValueOutlet, ArrayToPointerOutlet, TypeConversionOutlet, QualificationConversionOutlet, DotExpressionOutlet, ArrowExpressionOutlet, OutputOperatorExpressionOutlet, PostfixIncrementExpressionOutlet, InputOperatorExpressionOutlet, StreamToBoolOutlet, NonMemberOperatorOverloadExpressionOutlet, MemberOperatorOverloadExpressionOutlet, InitializerListOutlet as InitializerListExpressionOutlet } from \"../view/codeOutlets\";\nimport { Predicates } from \"./predicates\";\nimport { OpaqueExpressionASTNode, OpaqueExpression, RuntimeOpaqueExpression, TypedOpaqueExpression, CompiledOpaqueExpression } from \"./opaqueExpression\";\n\n\nexport function readValueWithAlert(obj: CPPObject<AtomicType>, sim: Simulation) {\n    let value = obj.readValue();\n    if (!value.isValid) {\n        let objDesc = obj.describe();\n        var msg = \"The value you just got out of \" + (objDesc.name || objDesc.message) + \" isn't valid. It might be uninitialized or it could have come from a dead object.\";\n        if (value.rawValue === 0) {\n            msg += \"\\n\\n(Note: The value just happens to be zero. Don't be fooled! Uninitialized memory isn't guaranteed to be zero.)\";\n        }\n        sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, msg, true);\n    }\n    return value;\n};\n\n/**\n * Union of potential expression AST types for a generic expression.\n */\nexport type ExpressionASTNode =\n    CommaASTNode |\n    TernaryASTNode |\n    AssignmentExpressionASTNode |\n    CompoundAssignmentExpressionASTNode |\n    BinaryOperatorExpressionASTNode |\n    PointerToMemberExpressionASTNode |\n    CStyleCastExpressionASTNode |\n    UnaryOperatorExpressionASTNode |\n    PostfixExpressionASTNode |\n    ConstructExpressionASTNode |\n    IdentifierExpressionASTNode |\n    ThisExpressionASTNode |\n    NumericLiteralASTNode |\n    StringLiteralASTNode |\n    ParenthesesExpressionASTNode |\n    InitializerListExpressionASTNode|\n    OpaqueExpressionASTNode ;\n\nconst ExpressionConstructsMap = {\n    \"comma_expression\": (ast: CommaASTNode, context: ExpressionContext) => CommaExpression.createFromAST(ast, context),\n\n    \"ternary_expression\": (ast: TernaryASTNode, context: ExpressionContext) => TernaryExpression.createFromAST(ast, context),\n\n    \"assignment_expression\": (ast: AssignmentExpressionASTNode, context: ExpressionContext) => AssignmentExpression.createFromAST(ast, context),\n    \"compound_assignment_expression\": (ast: CompoundAssignmentExpressionASTNode, context: ExpressionContext) => {\n        let lhs = createExpressionFromAST(ast.lhs, context);\n        let rhs = createExpressionFromAST(ast.rhs, context);\n       \n        // Consider an assignment operator overload if the LHS is class type\n        if (Predicates.isTypedExpression(lhs, isPotentiallyCompleteClassType)) {\n            let overload = selectOperatorOverload(context, ast, \"+=\", [lhs, rhs]);\n            if (overload) {\n                return overload;\n            }\n        }\n        \n        return new UnsupportedExpression(context, ast, \"compound assignment\");\n    },\n\n    // binary operators\n    \"arithmetic_binary_operator_expression\": (ast: ArithmeticBinaryOperatorExpressionASTNode, context: ExpressionContext) => ArithmeticBinaryOperatorExpression.createFromAST(ast, context),\n    \"relational_binary_operator_expression\": (ast: RelationalBinaryOperatorExpressionASTNode, context: ExpressionContext) => RelationalBinaryOperatorExpression.createFromAST(ast, context),\n    \"logical_binary_operator_expression\": (ast: LogicalBinaryOperatorExpressionASTNode, context: ExpressionContext) => LogicalBinaryOperatorExpression.createFromAST(ast, context),\n\n    \"pointer_to_member_expression\": (ast: PointerToMemberExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"pointer-to-member\"),\n\n    \"c_style_cast_expression\": (ast: CStyleCastExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"c-style cast\"),\n\n    // prefix operators\n    \"prefix_increment_expression\": (ast: PrefixIncrementExpressionASTNode, context: ExpressionContext) => PrefixIncrementExpression.createFromAST(ast, context),\n    \"dereference_expression\": (ast: DereferenceExpressionASTNode, context: ExpressionContext) => DereferenceExpression.createFromAST(ast, context),\n    \"address_of_expression\": (ast: AddressOfExpressionASTNode, context: ExpressionContext) => AddressOfExpression.createFromAST(ast, context),\n    \"unary_plus_expression\": (ast: UnaryPlusExpressionASTNode, context: ExpressionContext) => UnaryPlusExpression.createFromAST(ast, context),\n    \"unary_minus_expression\": (ast: UnaryMinusExpressionASTNode, context: ExpressionContext) => UnaryMinusExpression.createFromAST(ast, context),\n    \"logical_not_expression\": (ast: LogicalNotExpressionASTNode, context: ExpressionContext) => LogicalNotExpression.createFromAST(ast, context),\n    \"bitwise_not_expression\": (ast: BitwiseNotExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"bitwise not\"),\n    \"sizeof_expression\": (ast: SizeofExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"sizeof\"),\n    \"sizeof_type_expression\": (ast: SizeofTypeExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"sizeof (type)\"),\n    \"new_expression\": (ast: NewExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"new\"),\n    \"delete_expression\": (ast: DeleteExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"delete\"),\n    \"delete_array_expression\": (ast: DeleteArrayExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"delete[]\"),\n\n    // postfix operators\n    \"static_cast_expression\": (ast: StaticCastExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"static cast\"),\n    \"dynamic_cast_expression\": (ast: DynamicCastExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"dynamic cast\"),\n    \"reinterpret_cast_expression\": (ast: ReinterpretCastExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"reinterpret cast\"),\n    \"const_cast_expression\": (ast: ConstCastExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"const cast\"),\n    \"subscript_expression\": (ast: SubscriptExpressionASTNode, context: ExpressionContext) => SubscriptExpression.createFromAST(ast, context),\n    \"function_call_expression\": (ast: FunctionCallExpressionASTNode, context: ExpressionContext) => FunctionCallExpression.createFromAST(ast, context),\n    \"dot_expression\": (ast: DotExpressionASTNode, context: ExpressionContext) => DotExpression.createFromAST(ast, context),\n    \"arrow_expression\": (ast: ArrowExpressionASTNode, context: ExpressionContext) => ArrowExpression.createFromAST(ast, context),\n    \"postfix_increment_expression\": (ast: PostfixIncrementExpressionASTNode, context: ExpressionContext) => PostfixIncrementExpression.createFromAST(ast, context),\n\n    \"construct_expression\": (ast: ConstructExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"construct expression\"),\n\n    \"identifier_expression\": (ast: IdentifierExpressionASTNode, context: ExpressionContext) => IdentifierExpression.createFromAST(ast, context),\n\n    \"this_expression\": (ast: ThisExpressionASTNode, context: ExpressionContext) => new UnsupportedExpression(context, ast, \"this pointer\"),\n\n    \"numeric_literal_expression\": (ast: NumericLiteralASTNode, context: ExpressionContext) => NumericLiteralExpression.createFromAST(ast, context),\n    \"string_literal_expression\": (ast: StringLiteralASTNode, context: ExpressionContext) => StringLiteralExpression.createFromAST(ast, context),\n    \"parentheses_expression\": (ast: ParenthesesExpressionASTNode, context: ExpressionContext) => ParenthesesExpression.createFromAST(ast, context),\n    \"initializer_list_expression\": (ast: InitializerListExpressionASTNode, context: ExpressionContext) => InitializerListExpression.createFromAST(ast, context),\n    \"opaque_expression\": (ast: OpaqueExpressionASTNode, context: ExpressionContext) => OpaqueExpression.createFromAST(ast, context)\n}\n\n/**\n * Creates an expression construct based on a given expression AST node.\n * If the `ast` argument has a union type that is a subtype of `ExpressionASTNode`,\n * this function's return type is inferred as corresponding union of construct types.\n * @param ast An expression AST node.\n * @param context The context in which this expression occurs.\n */\nexport function createExpressionFromAST<ASTType extends ExpressionASTNode>(ast: ASTType, context: ExpressionContext): ReturnType<(typeof ExpressionConstructsMap)[ASTType[\"construct_type\"]]> {\n    if (!ExpressionConstructsMap[ast.construct_type]) {\n        console.log(\"Oops! Can't find expression construct type: \" + ast.construct_type);\n    }\n    return <any>ExpressionConstructsMap[ast.construct_type](<any>ast, context);\n}\n\n\n\nexport type AnalyticExpression =\n    CommaExpression |\n    TernaryExpression |\n    AssignmentExpression |\n    // CompoundAssignmentExpression |\n    AnalyticBinaryOperatorExpression |\n    // PointerToMemberExpression |\n    // CStyleCastExpression |\n    AnalyticUnaryOperatorExpression |\n    PostfixIncrementExpression |\n    SubscriptExpression |\n    DotExpression |\n    ArrowExpression |\n    FunctionCallExpression |\n    // ConstructExpression |\n    IdentifierExpression |\n    // ThisExpression |\n    NumericLiteralExpression |\n    StringLiteralExpression |\n    ParenthesesExpression |\n    InitializerListExpression |\n    OpaqueExpression |\n    MagicFunctionCallExpression |\n    AuxiliaryExpression |\n    UnsupportedExpression |\n    ImplicitConversion;\n\nexport type TypedExpressionKinds<T extends ExpressionType, V extends ValueCategory> = {\n    \"unsupported_expression\": never;\n    \"comma_expression\":\n    T extends NonNullable<TypedCommaExpression[\"type\"]> ? V extends NonNullable<TypedCommaExpression[\"valueCategory\"]> ? TypedCommaExpression<T, V> : never :\n    NonNullable<TypedCommaExpression[\"type\"]> extends T ? V extends NonNullable<TypedCommaExpression[\"valueCategory\"]> ? TypedCommaExpression : never : never;\n    \"ternary_expression\":\n    T extends NonNullable<TypedTernaryExpression[\"type\"]> ? V extends NonNullable<TypedTernaryExpression[\"valueCategory\"]> ? TypedTernaryExpression<T, V> : never :\n    NonNullable<TypedTernaryExpression[\"type\"]> extends T ? V extends NonNullable<TypedTernaryExpression[\"valueCategory\"]> ? TypedTernaryExpression : never : never;\n    \"assignment_expression\":\n    T extends NonNullable<TypedAssignmentExpression[\"type\"]> ? V extends NonNullable<TypedAssignmentExpression[\"valueCategory\"]> ? TypedAssignmentExpression<T> : never :\n    NonNullable<TypedAssignmentExpression[\"type\"]> extends T ? V extends NonNullable<TypedAssignmentExpression[\"valueCategory\"]> ? TypedAssignmentExpression : never : never;\n    \"arithmetic_binary_operator_expression\":\n    T extends NonNullable<TypedArithmeticBinaryOperatorExpression[\"type\"]> ? V extends NonNullable<TypedArithmeticBinaryOperatorExpression[\"valueCategory\"]> ? TypedArithmeticBinaryOperatorExpression<T> : never :\n    NonNullable<TypedArithmeticBinaryOperatorExpression[\"type\"]> extends T ? V extends NonNullable<TypedArithmeticBinaryOperatorExpression[\"valueCategory\"]> ? TypedArithmeticBinaryOperatorExpression<ArithmeticType> : never : never;\n\n    \"pointer_diference_expression\":\n    T extends NonNullable<TypedPointerDifferenceExpression[\"type\"]> ? V extends NonNullable<TypedPointerDifferenceExpression[\"valueCategory\"]> ? TypedPointerDifferenceExpression : never :\n    NonNullable<TypedPointerDifferenceExpression[\"type\"]> extends T ? V extends NonNullable<TypedPointerDifferenceExpression[\"valueCategory\"]> ? TypedPointerDifferenceExpression : never : never;\n    \"pointer_offset_expression\":\n    T extends NonNullable<TypedPointerOffsetExpression[\"type\"]> ? V extends NonNullable<TypedPointerOffsetExpression[\"valueCategory\"]> ? TypedPointerOffsetExpression<T> : never :\n    NonNullable<TypedPointerOffsetExpression[\"type\"]> extends T ? V extends NonNullable<TypedPointerOffsetExpression[\"valueCategory\"]> ? TypedPointerOffsetExpression : never : never;\n    \"output_operator_expression\":\n    T extends NonNullable<TypedOutputOperatorExpression[\"type\"]> ? V extends NonNullable<TypedOutputOperatorExpression[\"valueCategory\"]> ? TypedOutputOperatorExpression : never :\n    NonNullable<TypedOutputOperatorExpression[\"type\"]> extends T ? V extends NonNullable<TypedOutputOperatorExpression[\"valueCategory\"]> ? TypedOutputOperatorExpression : never : never;\n    \"input_operator_expression\":\n    T extends NonNullable<TypedInputOperatorExpression[\"type\"]> ? V extends NonNullable<TypedInputOperatorExpression[\"valueCategory\"]> ? TypedInputOperatorExpression : never :\n    NonNullable<TypedInputOperatorExpression[\"type\"]> extends T ? V extends NonNullable<TypedInputOperatorExpression[\"valueCategory\"]> ? TypedInputOperatorExpression : never : never;\n    \"relational_binary_operator_expression\":\n    T extends NonNullable<TypedRelationalBinaryOperatorExpression[\"type\"]> ? V extends NonNullable<TypedRelationalBinaryOperatorExpression[\"valueCategory\"]> ? TypedRelationalBinaryOperatorExpression : never :\n    NonNullable<TypedRelationalBinaryOperatorExpression[\"type\"]> extends T ? V extends NonNullable<TypedRelationalBinaryOperatorExpression[\"valueCategory\"]> ? TypedRelationalBinaryOperatorExpression : never : never;\n    \"pointer_comparison_expression\":\n    T extends NonNullable<TypedPointerComparisonExpression[\"type\"]> ? V extends NonNullable<TypedPointerComparisonExpression[\"valueCategory\"]> ? TypedPointerComparisonExpression : never :\n    NonNullable<TypedPointerComparisonExpression[\"type\"]> extends T ? V extends NonNullable<TypedPointerComparisonExpression[\"valueCategory\"]> ? TypedPointerComparisonExpression : never : never;\n    \"logical_binary_operator_expression\":\n    T extends NonNullable<TypedLogicalBinaryOperatorExpression[\"type\"]> ? V extends NonNullable<TypedLogicalBinaryOperatorExpression[\"valueCategory\"]> ? TypedLogicalBinaryOperatorExpression : never :\n    NonNullable<TypedLogicalBinaryOperatorExpression[\"type\"]> extends T ? V extends NonNullable<TypedLogicalBinaryOperatorExpression[\"valueCategory\"]> ? TypedLogicalBinaryOperatorExpression : never : never;\n    \"non_member_operator_overload_expression\":\n    T extends NonNullable<TypedNonMemberOperatorOverloadExpression[\"type\"]> ? V extends NonNullable<TypedNonMemberOperatorOverloadExpression[\"valueCategory\"]> ? TypedNonMemberOperatorOverloadExpression<T,V> : never :\n    NonNullable<TypedNonMemberOperatorOverloadExpression[\"type\"]> extends T ? V extends NonNullable<TypedNonMemberOperatorOverloadExpression[\"valueCategory\"]> ? TypedNonMemberOperatorOverloadExpression : never : never;\n    \"member_operator_overload_expression\":\n    T extends NonNullable<TypedMemberOperatorOverloadExpression[\"type\"]> ? V extends NonNullable<TypedMemberOperatorOverloadExpression[\"valueCategory\"]> ? TypedMemberOperatorOverloadExpression<T,V> : never :\n    NonNullable<TypedMemberOperatorOverloadExpression[\"type\"]> extends T ? V extends NonNullable<TypedMemberOperatorOverloadExpression[\"valueCategory\"]> ? TypedMemberOperatorOverloadExpression : never : never;\n    \"prefix_increment_expression\":\n    T extends NonNullable<TypedPrefixIncrementExpression[\"type\"]> ? V extends NonNullable<TypedPrefixIncrementExpression[\"valueCategory\"]> ? TypedPrefixIncrementExpression<T> : never :\n    NonNullable<TypedPrefixIncrementExpression[\"type\"]> extends T ? V extends NonNullable<TypedPrefixIncrementExpression[\"valueCategory\"]> ? TypedPrefixIncrementExpression : never : never;\n    \"dereference_expression\":\n    T extends NonNullable<TypedDereferenceExpression[\"type\"]> ? V extends NonNullable<TypedDereferenceExpression[\"valueCategory\"]> ? TypedDereferenceExpression<T> : never :\n    NonNullable<TypedDereferenceExpression[\"type\"]> extends T ? V extends NonNullable<TypedDereferenceExpression[\"valueCategory\"]> ? TypedDereferenceExpression : never : never;\n    \"address_of_expression\":\n    T extends NonNullable<TypedAddressOfExpression[\"type\"]> ? V extends NonNullable<TypedAddressOfExpression[\"valueCategory\"]> ? TypedAddressOfExpression<T> : never :\n    NonNullable<TypedAddressOfExpression[\"type\"]> extends T ? V extends NonNullable<TypedAddressOfExpression[\"valueCategory\"]> ? TypedAddressOfExpression : never : never;\n    \"unary_plus_expression\":\n    T extends NonNullable<TypedUnaryPlusExpression[\"type\"]> ? V extends NonNullable<TypedUnaryPlusExpression[\"valueCategory\"]> ? TypedUnaryPlusExpression<T> : never :\n    NonNullable<TypedUnaryPlusExpression[\"type\"]> extends T ? V extends NonNullable<TypedUnaryPlusExpression[\"valueCategory\"]> ? TypedUnaryPlusExpression : never : never;\n    \"unary_minus_expression\":\n    T extends NonNullable<TypedUnaryMinusExpression[\"type\"]> ? V extends NonNullable<TypedUnaryMinusExpression[\"valueCategory\"]> ? TypedUnaryMinusExpression<T> : never :\n    NonNullable<TypedUnaryMinusExpression[\"type\"]> extends T ? V extends NonNullable<TypedUnaryMinusExpression[\"valueCategory\"]> ? TypedUnaryMinusExpression : never : never;\n    \"logical_not_expression\":\n    T extends NonNullable<TypedLogicalNotExpression[\"type\"]> ? V extends NonNullable<TypedLogicalNotExpression[\"valueCategory\"]> ? TypedLogicalNotExpression : never :\n    NonNullable<TypedLogicalNotExpression[\"type\"]> extends T ? V extends NonNullable<TypedLogicalNotExpression[\"valueCategory\"]> ? TypedLogicalNotExpression : never : never;\n    \"postfix_increment_expression\":\n    T extends NonNullable<TypedPostfixIncrementExpression[\"type\"]> ? V extends NonNullable<TypedPostfixIncrementExpression[\"valueCategory\"]> ? TypedPostfixIncrementExpression<T> : never :\n    NonNullable<TypedPostfixIncrementExpression[\"type\"]> extends T ? V extends NonNullable<TypedPostfixIncrementExpression[\"valueCategory\"]> ? TypedPostfixIncrementExpression : never : never;\n    \"subscript_expression\":\n    T extends NonNullable<TypedSubscriptExpression[\"type\"]> ? V extends NonNullable<TypedSubscriptExpression[\"valueCategory\"]> ? TypedSubscriptExpression<T> : never :\n    NonNullable<TypedSubscriptExpression[\"type\"]> extends T ? V extends NonNullable<TypedSubscriptExpression[\"valueCategory\"]> ? TypedSubscriptExpression : never : never;\n\n    \"dot_expression\":\n    V extends NonNullable<DotExpression[\"valueCategory\"]> ? (\n        T extends CompleteObjectType ? TypedObjectDotExpression<T> :\n        T extends FunctionType ? TypedFunctionDotExpression<T> :\n        CompleteObjectType extends T ? FunctionType extends T ? TypedObjectDotExpression | TypedFunctionDotExpression : never\n        : never)\n    : never;\n\n    \"arrow_expression\":\n    V extends NonNullable<ArrowExpression[\"valueCategory\"]> ? (\n        T extends CompleteObjectType ? TypedObjectArrowExpression<T> :\n        T extends FunctionType ? TypedFunctionArrowExpression<T> :\n        CompleteObjectType extends T ? FunctionType extends T ? TypedObjectArrowExpression | TypedFunctionArrowExpression : never\n        : never)\n    : never;\n\n    \"identifier_expression\":\n    V extends NonNullable<IdentifierExpression[\"valueCategory\"]> ? (\n        T extends CompleteObjectType ? TypedObjectIdentifierExpression<T> :\n        T extends FunctionType ? TypedFunctionIdentifierExpression<T> :\n        CompleteObjectType extends T ? FunctionType extends T ? TypedObjectIdentifierExpression | TypedFunctionIdentifierExpression : never\n        : never)\n    : never;\n\n    \"numeric_literal_expression\":\n    T extends NonNullable<TypedNumericLiteralExpression[\"type\"]> ? V extends NonNullable<TypedNumericLiteralExpression[\"valueCategory\"]> ? TypedNumericLiteralExpression<T> : never :\n    NonNullable<TypedNumericLiteralExpression[\"type\"]> extends T ? V extends NonNullable<TypedNumericLiteralExpression[\"valueCategory\"]> ? TypedNumericLiteralExpression : never : never;\n    \"string_literal_expression\":\n    T extends NonNullable<TypedStringLiteralExpression[\"type\"]> ? V extends NonNullable<TypedStringLiteralExpression[\"valueCategory\"]> ? TypedStringLiteralExpression : never :\n    NonNullable<TypedStringLiteralExpression[\"type\"]> extends T ? V extends NonNullable<TypedStringLiteralExpression[\"valueCategory\"]> ? TypedStringLiteralExpression : never : never;\n    \"parentheses_expression\":\n    T extends NonNullable<TypedParenthesesExpression[\"type\"]> ? V extends NonNullable<TypedParenthesesExpression[\"valueCategory\"]> ? TypedParenthesesExpression<T, V> : never :\n    NonNullable<TypedParenthesesExpression[\"type\"]> extends T ? V extends NonNullable<TypedParenthesesExpression[\"valueCategory\"]> ? TypedParenthesesExpression : never : never;\n    \"initializer_list_expression\":\n    T extends NonNullable<TypedInitializerListExpression[\"type\"]> ? V extends NonNullable<TypedInitializerListExpression[\"valueCategory\"]> ? TypedInitializerListExpression<T> : never :\n    NonNullable<TypedInitializerListExpression[\"type\"]> extends T ? V extends NonNullable<TypedInitializerListExpression[\"valueCategory\"]> ? TypedInitializerListExpression : never : never;\n    \"opaque_expression\":\n    T extends NonNullable<TypedOpaqueExpression[\"type\"]> ? V extends NonNullable<TypedOpaqueExpression[\"valueCategory\"]> ? TypedOpaqueExpression<T, V> : never :\n    NonNullable<TypedOpaqueExpression[\"type\"]> extends T ? V extends NonNullable<TypedOpaqueExpression[\"valueCategory\"]> ? TypedOpaqueExpression : never : never;\n    \"auxiliary_expression\":\n    T extends NonNullable<TypedAuxiliaryExpression[\"type\"]> ? V extends NonNullable<TypedAuxiliaryExpression[\"valueCategory\"]> ? TypedAuxiliaryExpression<T, V> : never :\n    NonNullable<TypedAuxiliaryExpression[\"type\"]> extends T ? V extends NonNullable<TypedAuxiliaryExpression[\"valueCategory\"]> ? TypedAuxiliaryExpression : never : never;\n    \"magic_function_call_expression\":\n    T extends NonNullable<TypedMagicFunctionCallExpression[\"type\"]> ? V extends NonNullable<TypedMagicFunctionCallExpression[\"valueCategory\"]> ? TypedMagicFunctionCallExpression<T, V> : never :\n    NonNullable<TypedMagicFunctionCallExpression[\"type\"]> extends T ? V extends NonNullable<TypedMagicFunctionCallExpression[\"valueCategory\"]> ? TypedMagicFunctionCallExpression : never : never;\n    \"function_call_expression\":\n    T extends NonNullable<TypedFunctionCallExpression[\"type\"]> ? V extends NonNullable<TypedFunctionCallExpression[\"valueCategory\"]> ? TypedFunctionCallExpression<T, V> : never :\n    NonNullable<TypedFunctionCallExpression[\"type\"]> extends T ? V extends NonNullable<TypedFunctionCallExpression[\"valueCategory\"]> ? TypedFunctionCallExpression : never : never;\n    \"ImplicitConversion\":\n    T extends NonNullable<TypedImplicitConversion[\"type\"]> ? V extends NonNullable<TypedImplicitConversion[\"valueCategory\"]> ? TypedImplicitConversion<CompleteObjectType, ValueCategory, T, V> : never :\n    NonNullable<TypedImplicitConversion[\"type\"]> extends T ? V extends NonNullable<TypedImplicitConversion[\"valueCategory\"]> ? TypedImplicitConversion : never : never;\n}\n\nexport type CompiledExpressionKinds<T extends ExpressionType, V extends ValueCategory> = {\n    \"unsupported_expression\": never;\n    \"comma_expression\": T extends NonNullable<CompiledCommaExpression[\"type\"]> ? V extends NonNullable<CompiledCommaExpression[\"valueCategory\"]> ? CompiledCommaExpression<T, V> : never : never;\n    \"ternary_expression\": T extends NonNullable<CompiledTernaryExpression[\"type\"]> ? V extends NonNullable<CompiledTernaryExpression[\"valueCategory\"]> ? CompiledTernaryExpression<T, V> : never : never;\n    \"assignment_expression\": T extends NonNullable<CompiledAssignmentExpression[\"type\"]> ? V extends NonNullable<CompiledAssignmentExpression[\"valueCategory\"]> ? CompiledAssignmentExpression<T> : never : never;\n\n    \"arithmetic_binary_operator_expression\":\n    T extends NonNullable<CompiledArithmeticBinaryOperatorExpression[\"type\"]> ? V extends NonNullable<CompiledArithmeticBinaryOperatorExpression[\"valueCategory\"]> ? CompiledArithmeticBinaryOperatorExpression<T> : never :\n    NonNullable<ArithmeticBinaryOperatorExpression[\"type\"]> extends T ? V extends NonNullable<CompiledArithmeticBinaryOperatorExpression[\"valueCategory\"]> ? CompiledArithmeticBinaryOperatorExpression<ArithmeticType> : never : never;\n\n    \"pointer_diference_expression\": T extends NonNullable<CompiledPointerDifferenceExpression[\"type\"]> ? V extends NonNullable<CompiledPointerDifferenceExpression[\"valueCategory\"]> ? CompiledPointerDifferenceExpression : never : never;\n    \"pointer_offset_expression\": T extends NonNullable<CompiledPointerOffsetExpression[\"type\"]> ? V extends NonNullable<CompiledPointerOffsetExpression[\"valueCategory\"]> ? CompiledPointerOffsetExpression<T> : never : never;\n    \"output_operator_expression\": T extends NonNullable<CompiledOutputOperatorExpression[\"type\"]> ? V extends NonNullable<CompiledOutputOperatorExpression[\"valueCategory\"]> ? CompiledOutputOperatorExpression : never : never;\n    \"input_operator_expression\": T extends NonNullable<CompiledInputOperatorExpression[\"type\"]> ? V extends NonNullable<CompiledInputOperatorExpression[\"valueCategory\"]> ? CompiledInputOperatorExpression : never : never;\n    \"relational_binary_operator_expression\": T extends NonNullable<CompiledRelationalBinaryOperatorExpression[\"type\"]> ? V extends NonNullable<CompiledRelationalBinaryOperatorExpression[\"valueCategory\"]> ? CompiledRelationalBinaryOperatorExpression : never : never;\n    \"pointer_comparison_expression\": T extends NonNullable<CompiledPointerComparisonExpression[\"type\"]> ? V extends NonNullable<CompiledPointerComparisonExpression[\"valueCategory\"]> ? CompiledPointerComparisonExpression : never : never;\n    \"logical_binary_operator_expression\": T extends NonNullable<CompiledLogicalBinaryOperatorExpression[\"type\"]> ? V extends NonNullable<CompiledLogicalBinaryOperatorExpression[\"valueCategory\"]> ? CompiledLogicalBinaryOperatorExpression : never : never;\n    \"non_member_operator_overload_expression\": T extends NonNullable<CompiledNonMemberOperatorOverloadExpression[\"type\"]> ? V extends NonNullable<CompiledNonMemberOperatorOverloadExpression[\"valueCategory\"]> ? CompiledNonMemberOperatorOverloadExpression<T,V> : never : never;\n    \"member_operator_overload_expression\": T extends NonNullable<CompiledMemberOperatorOverloadExpression[\"type\"]> ? V extends NonNullable<CompiledMemberOperatorOverloadExpression[\"valueCategory\"]> ? CompiledMemberOperatorOverloadExpression<T,V> : never : never;\n    \"prefix_increment_expression\": T extends NonNullable<CompiledPrefixIncrementExpression[\"type\"]> ? V extends NonNullable<CompiledPrefixIncrementExpression[\"valueCategory\"]> ? CompiledPrefixIncrementExpression<T> : never : never;\n    \"dereference_expression\": T extends NonNullable<CompiledDereferenceExpression[\"type\"]> ? V extends NonNullable<CompiledDereferenceExpression[\"valueCategory\"]> ? CompiledDereferenceExpression<T> : never : never;\n    \"address_of_expression\": T extends NonNullable<CompiledAddressOfExpression[\"type\"]> ? V extends NonNullable<CompiledAddressOfExpression[\"valueCategory\"]> ? CompiledAddressOfExpression<T> : never : never;\n    \"unary_plus_expression\": T extends NonNullable<CompiledUnaryPlusExpression[\"type\"]> ? V extends NonNullable<CompiledUnaryPlusExpression[\"valueCategory\"]> ? CompiledUnaryPlusExpression<T> : never : never;\n    \"unary_minus_expression\": T extends NonNullable<CompiledUnaryMinusExpression[\"type\"]> ? V extends NonNullable<CompiledUnaryMinusExpression[\"valueCategory\"]> ? CompiledUnaryMinusExpression<T> : never : never;\n    \"logical_not_expression\": T extends NonNullable<CompiledLogicalNotExpression[\"type\"]> ? V extends NonNullable<CompiledLogicalNotExpression[\"valueCategory\"]> ? CompiledLogicalNotExpression : never : never;\n    \"postfix_increment_expression\": T extends NonNullable<CompiledPostfixIncrementExpression[\"type\"]> ? V extends NonNullable<CompiledPostfixIncrementExpression[\"valueCategory\"]> ? CompiledPrefixIncrementExpression<T> : never : never;\n    \"subscript_expression\": T extends NonNullable<CompiledSubscriptExpression[\"type\"]> ? V extends NonNullable<CompiledSubscriptExpression[\"valueCategory\"]> ? CompiledSubscriptExpression<T> : never : never;\n    \"dot_expression\": V extends NonNullable<DotExpression[\"valueCategory\"]> ? (T extends CompleteObjectType ? CompiledObjectDotExpression<T> : T extends FunctionType ? CompiledFunctionDotExpression<T> : never) : never;\n    \"arrow_expression\": V extends NonNullable<ArrowExpression[\"valueCategory\"]> ? (T extends CompleteObjectType ? CompiledObjectArrowExpression<T> : T extends FunctionType ? CompiledFunctionArrowExpression<T> : never) : never;\n    \"identifier_expression\": V extends NonNullable<IdentifierExpression[\"valueCategory\"]> ? (T extends CompleteObjectType ? CompiledObjectIdentifierExpression<T> : T extends FunctionType ? CompiledFunctionIdentifierExpression<T> : never) : never;\n    \"numeric_literal_expression\": T extends NonNullable<CompiledNumericLiteralExpression[\"type\"]> ? V extends NonNullable<CompiledNumericLiteralExpression[\"valueCategory\"]> ? CompiledNumericLiteralExpression<T> : never : never;\n    \"string_literal_expression\": T extends NonNullable<CompiledStringLiteralExpression[\"type\"]> ? V extends NonNullable<CompiledStringLiteralExpression[\"valueCategory\"]> ? CompiledStringLiteralExpression : never : never;\n    \"parentheses_expression\": T extends NonNullable<CompiledParenthesesExpression[\"type\"]> ? V extends NonNullable<CompiledParenthesesExpression[\"valueCategory\"]> ? CompiledParenthesesExpression<T, V> : never : never;\n    \"initializer_list_expression\": T extends NonNullable<CompiledInitializerListExpression[\"type\"]> ? V extends NonNullable<CompiledInitializerListExpression[\"valueCategory\"]> ? CompiledInitializerListExpression<T> : never : never;\n    \"opaque_expression\": T extends NonNullable<CompiledOpaqueExpression[\"type\"]> ? V extends NonNullable<CompiledOpaqueExpression[\"valueCategory\"]> ? CompiledOpaqueExpression<T, V> : never : never;\n    \"auxiliary_expression\": T extends NonNullable<CompiledAuxiliaryExpression[\"type\"]> ? V extends NonNullable<CompiledAuxiliaryExpression[\"valueCategory\"]> ? CompiledAuxiliaryExpression<T, V> : never : never;\n    \"magic_function_call_expression\": T extends NonNullable<CompiledMagicFunctionCallExpression[\"type\"]> ? V extends NonNullable<CompiledMagicFunctionCallExpression[\"valueCategory\"]> ? CompiledMagicFunctionCallExpression<T> : never : never;\n    \"function_call_expression\": T extends NonNullable<CompiledFunctionCallExpression[\"type\"]> ? V extends NonNullable<CompiledFunctionCallExpression[\"valueCategory\"]> ? CompiledFunctionCallExpression<T> : never : never;\n    \"ImplicitConversion\": T extends NonNullable<CompiledImplicitConversion[\"type\"]> ? V extends NonNullable<CompiledImplicitConversion[\"valueCategory\"]> ? CompiledImplicitConversion<T> : never : never;\n}\n\nexport type AnalyticTypedExpression<C extends AnalyticExpression, T extends ExpressionType = NonNullable<C[\"type\"]>, V extends ValueCategory = NonNullable<C[\"valueCategory\"]>> = TypedExpressionKinds<T, V>[C[\"construct_type\"]];\nexport type AnalyticCompiledExpression<C extends AnalyticExpression, T extends ExpressionType = NonNullable<C[\"type\"]>, V extends ValueCategory = NonNullable<C[\"valueCategory\"]>> = CompiledExpressionKinds<T, V>[C[\"construct_type\"]];\n\n\n\n\n\n\nconst ExpressionConstructsRuntimeMap = {\n    \"unsupported_expression\": (construct: UnsupportedExpression, parent: RuntimeConstruct) => { throw new Error(\"Cannot create a runtime instance of an unsupported construct.\"); },\n    \"comma_expression\": <T extends CompiledCommaExpression[\"type\"], V extends ValueCategory>(construct: CompiledCommaExpression<T, V>, parent: RuntimeConstruct) => new RuntimeComma(construct, parent),\n    \"ternary_expression\": <T extends CompiledTernaryExpression[\"type\"], V extends ValueCategory>(construct: CompiledTernaryExpression<T, V>, parent: RuntimeConstruct) => new RuntimeTernary(construct, parent),\n    \"assignment_expression\": <T extends CompiledAssignmentExpression[\"type\"]>(construct: CompiledAssignmentExpression<T>, parent: RuntimeConstruct) => new RuntimeAssignment(construct, parent),\n    \"arithmetic_binary_operator_expression\": <T extends CompiledArithmeticBinaryOperatorExpression[\"type\"]>(construct: CompiledArithmeticBinaryOperatorExpression<T>, parent: RuntimeConstruct) => new RuntimeArithmeticBinaryOperator(construct, parent),\n    \"pointer_diference_expression\": (construct: CompiledPointerDifferenceExpression, parent: RuntimeConstruct) => new RuntimePointerDifference(construct, parent),\n    \"pointer_offset_expression\": <T extends CompiledPointerOffsetExpression[\"type\"]>(construct: CompiledPointerOffsetExpression<T>, parent: RuntimeConstruct) => new RuntimePointerOffset(construct, parent),\n    \"output_operator_expression\": (construct: CompiledOutputOperatorExpression, parent: RuntimeConstruct) => new RuntimeOutputOperatorExpression(construct, parent),\n    \"input_operator_expression\": (construct: CompiledInputOperatorExpression, parent: RuntimeConstruct) => new RuntimeInputOperatorExpression(construct, parent),\n    \"relational_binary_operator_expression\": <T extends CompiledRelationalBinaryOperatorExpression[\"type\"]>(construct: CompiledRelationalBinaryOperatorExpression<T>, parent: RuntimeConstruct) => new RuntimeRelationalBinaryOperator(construct, parent),\n    \"pointer_comparison_expression\": (construct: CompiledPointerComparisonExpression, parent: RuntimeConstruct) => new RuntimePointerComparisonExpression(construct, parent),\n    \"logical_binary_operator_expression\": (construct: CompiledLogicalBinaryOperatorExpression, parent: RuntimeConstruct) => new RuntimeLogicalBinaryOperatorExpression(construct, parent),\n    \"non_member_operator_overload_expression\": <T extends CompiledNonMemberOperatorOverloadExpression[\"type\"], V extends ValueCategory>(construct: CompiledNonMemberOperatorOverloadExpression<T, V>, parent: RuntimeConstruct) => new RuntimeNonMemberOperatorOverloadExpression(construct, parent),\n    \"member_operator_overload_expression\": <T extends CompiledMemberOperatorOverloadExpression[\"type\"], V extends ValueCategory>(construct: CompiledMemberOperatorOverloadExpression<T, V>, parent: RuntimeConstruct) => new RuntimeMemberOperatorOverloadExpression(construct, parent),\n    \"prefix_increment_expression\": <T extends CompiledPrefixIncrementExpression[\"type\"]>(construct: CompiledPrefixIncrementExpression<T>, parent: RuntimeConstruct) => new RuntimePrefixIncrementExpression(construct, parent),\n    \"dereference_expression\": <T extends CompiledDereferenceExpression[\"type\"]>(construct: CompiledDereferenceExpression<T>, parent: RuntimeConstruct) => new RuntimeDereferenceExpression(construct, parent),\n    \"address_of_expression\": <T extends CompiledAddressOfExpression[\"type\"]>(construct: CompiledAddressOfExpression<T>, parent: RuntimeConstruct) => new RuntimeAddressOfExpression(construct, parent),\n    \"unary_plus_expression\": <T extends CompiledUnaryPlusExpression[\"type\"]>(construct: CompiledUnaryPlusExpression<T>, parent: RuntimeConstruct) => new RuntimeUnaryPlusExpression(construct, parent),\n    \"unary_minus_expression\": <T extends CompiledUnaryMinusExpression[\"type\"]>(construct: CompiledUnaryMinusExpression<T>, parent: RuntimeConstruct) => new RuntimeUnaryMinusExpression(construct, parent),\n    \"logical_not_expression\": <T extends CompiledLogicalNotExpression[\"type\"]>(construct: CompiledLogicalNotExpression, parent: RuntimeConstruct) => new RuntimeLogicalNotExpression(construct, parent),\n    \"postfix_increment_expression\": <T extends CompiledPostfixIncrementExpression[\"type\"]>(construct: CompiledPostfixIncrementExpression<T>, parent: RuntimeConstruct) => new RuntimePostfixIncrementExpression(construct, parent),\n    \"subscript_expression\": <T extends CompiledSubscriptExpression[\"type\"]>(construct: CompiledSubscriptExpression<T>, parent: RuntimeConstruct) => new RuntimeSubscriptExpression(construct, parent),\n    \"dot_expression\": (construct: CompiledObjectDotExpression | CompiledFunctionDotExpression, parent: RuntimeConstruct) => {\n        if (construct.entity instanceof FunctionEntity) {\n            return new RuntimeFunctionDotExpression(<any>construct, parent);\n        }\n        else {\n            return new RuntimeObjectDotExpression(<any>construct, parent);\n        }\n    },\n    \"arrow_expression\": (construct: CompiledObjectArrowExpression | CompiledFunctionArrowExpression, parent: RuntimeConstruct) => {\n        if (construct.entity instanceof FunctionEntity) {\n            return new RuntimeFunctionArrowExpression(<any>construct, parent);\n        }\n        else {\n            return new RuntimeObjectArrowExpression(<any>construct, parent);\n        }\n    },\n    \"identifier_expression\": (construct: CompiledObjectIdentifierExpression | CompiledFunctionIdentifierExpression, parent: RuntimeConstruct) => {\n        if (construct.entity instanceof FunctionEntity) {\n            return new RuntimeFunctionIdentifierExpression(<any>construct, parent);\n        }\n        else {\n            return new RuntimeObjectIdentifierExpression(<any>construct, parent);\n        }\n    },\n    \"numeric_literal_expression\": <T extends CompiledNumericLiteralExpression[\"type\"]>(construct: CompiledNumericLiteralExpression<T>, parent: RuntimeConstruct) => new RuntimeNumericLiteral(construct, parent),\n    \"string_literal_expression\": (construct: CompiledStringLiteralExpression, parent: RuntimeConstruct) => new RuntimeStringLiteralExpression(construct, parent),\n    \"parentheses_expression\": <T extends CompiledParenthesesExpression[\"type\"], V extends ValueCategory>(construct: CompiledParenthesesExpression<T, V>, parent: RuntimeConstruct) => new RuntimeParentheses(construct, parent),\n    \"initializer_list_expression\": <T extends CompiledInitializerListExpression[\"type\"]>(construct: CompiledInitializerListExpression<T>, parent: RuntimeConstruct) => new RuntimeInitializerListExpression(construct, parent),\n    \"opaque_expression\": <T extends CompiledOpaqueExpression[\"type\"], V extends ValueCategory>(construct: CompiledOpaqueExpression<T, V>, parent: RuntimeConstruct) => new RuntimeOpaqueExpression(construct, parent),\n    \"auxiliary_expression\": <T extends CompiledExpression[\"type\"] = CompiledExpression[\"type\"], V extends ValueCategory = ValueCategory>(construct: CompiledExpression<T, V>, parent: RuntimeConstruct) => { throw new Error(\"Auxiliary expressions must never be instantiated at runtime.\") },\n    \"magic_function_call_expression\": <RT extends CompiledMagicFunctionCallExpression[\"type\"]>(construct: CompiledMagicFunctionCallExpression<RT>, parent: RuntimeConstruct) => new RuntimeMagicFunctionCallExpression(construct, parent),\n    \"function_call_expression\": <RT extends CompiledFunctionCallExpression[\"type\"]>(construct: CompiledFunctionCallExpression<RT>, parent: RuntimeConstruct) => new RuntimeFunctionCallExpression(construct, parent),\n    \"ImplicitConversion\": <FromType extends CompleteObjectType, FromVC extends ValueCategory, ToType extends CompleteObjectType, ToVC extends ValueCategory>(construct: CompiledImplicitConversion<FromType, FromVC, ToType, ToVC>, parent: RuntimeConstruct) => construct.createRuntimeExpression(parent)\n};\n\nexport function createRuntimeExpression(construct: UnsupportedExpression, parent: RuntimeConstruct): never;\nexport function createRuntimeExpression<T extends ExpressionType, V extends ValueCategory>(construct: CompiledCommaExpression<T, V>, parent: RuntimeConstruct): RuntimeComma<T, V>;\nexport function createRuntimeExpression<T extends ExpressionType, V extends ValueCategory>(construct: CompiledTernaryExpression<T, V>, parent: RuntimeConstruct): RuntimeTernary<T, V>;\nexport function createRuntimeExpression<T extends AtomicType>(construct: CompiledAssignmentExpression<T>, parent: RuntimeConstruct): RuntimeAssignment<T>;\nexport function createRuntimeExpression<T extends ArithmeticType>(construct: CompiledArithmeticBinaryOperatorExpression<T>, parent: RuntimeConstruct): RuntimeArithmeticBinaryOperator<T>;\nexport function createRuntimeExpression(construct: CompiledPointerDifferenceExpression, parent: RuntimeConstruct): RuntimePointerDifference;\nexport function createRuntimeExpression<T extends PointerToCompleteType>(construct: CompiledPointerOffsetExpression<T>, parent: RuntimeConstruct): RuntimePointerOffset<T>;\nexport function createRuntimeExpression(construct: CompiledPointerOffsetExpression, parent: RuntimeConstruct): RuntimePointerOffset;\nexport function createRuntimeExpression<T extends ArithmeticType>(construct: CompiledRelationalBinaryOperatorExpression<T>, parent: RuntimeConstruct): RuntimeRelationalBinaryOperator<T>;\nexport function createRuntimeExpression(construct: CompiledPointerComparisonExpression, parent: RuntimeConstruct): RuntimePointerComparisonExpression;\nexport function createRuntimeExpression(construct: CompiledLogicalBinaryOperatorExpression, parent: RuntimeConstruct): RuntimeLogicalBinaryOperatorExpression;\nexport function createRuntimeExpression(construct: CompiledNonMemberOperatorOverloadExpression, parent: RuntimeConstruct): RuntimeNonMemberOperatorOverloadExpression;\nexport function createRuntimeExpression(construct: CompiledMemberOperatorOverloadExpression, parent: RuntimeConstruct): RuntimeMemberOperatorOverloadExpression;\nexport function createRuntimeExpression(construct: CompiledOutputOperatorExpression, parent: RuntimeConstruct): RuntimeOutputOperatorExpression;\nexport function createRuntimeExpression(construct: CompiledInputOperatorExpression, parent: RuntimeConstruct): RuntimeInputOperatorExpression;\nexport function createRuntimeExpression<T extends ArithmeticType | PointerToCompleteType>(construct: CompiledPrefixIncrementExpression<T>, parent: RuntimeConstruct): RuntimePrefixIncrementExpression<T>;\nexport function createRuntimeExpression<T extends CompleteObjectType>(construct: CompiledDereferenceExpression<T>, parent: RuntimeConstruct): RuntimeDereferenceExpression<T>;\nexport function createRuntimeExpression<T extends PointerType>(construct: CompiledAddressOfExpression<T>, parent: RuntimeConstruct): RuntimeAddressOfExpression<T>;\nexport function createRuntimeExpression<T extends ArithmeticType | PointerType>(construct: CompiledUnaryPlusExpression<T>, parent: RuntimeConstruct): RuntimeUnaryPlusExpression<T>;\nexport function createRuntimeExpression<T extends ArithmeticType>(construct: CompiledUnaryMinusExpression<T>, parent: RuntimeConstruct): RuntimeUnaryMinusExpression<T>;\nexport function createRuntimeExpression(construct: CompiledLogicalNotExpression, parent: RuntimeConstruct): RuntimeLogicalNotExpression;\nexport function createRuntimeExpression<T extends ArithmeticType | PointerToCompleteType>(construct: CompiledPostfixIncrementExpression<T>, parent: RuntimeConstruct): RuntimePostfixIncrementExpression<T>;\nexport function createRuntimeExpression<T extends CompleteObjectType>(construct: CompiledSubscriptExpression<T>, parent: RuntimeConstruct): RuntimeSubscriptExpression<T>;\nexport function createRuntimeExpression(construct: CompiledObjectIdentifierExpression, parent: RuntimeConstruct): RuntimeObjectIdentifierExpression;\nexport function createRuntimeExpression(construct: CompiledFunctionIdentifierExpression, parent: RuntimeConstruct): RuntimeFunctionIdentifierExpression;\nexport function createRuntimeExpression(construct: CompiledObjectIdentifierExpression | CompiledFunctionIdentifierExpression, parent: RuntimeConstruct): RuntimeObjectIdentifierExpression | RuntimeFunctionIdentifierExpression;\nexport function createRuntimeExpression(construct: CompiledObjectDotExpression, parent: RuntimeConstruct): RuntimeObjectDotExpression;\nexport function createRuntimeExpression(construct: CompiledFunctionDotExpression, parent: RuntimeConstruct): RuntimeFunctionDotExpression;\nexport function createRuntimeExpression(construct: CompiledObjectDotExpression | CompiledFunctionDotExpression, parent: RuntimeConstruct): RuntimeObjectDotExpression | RuntimeFunctionDotExpression;\nexport function createRuntimeExpression(construct: CompiledObjectArrowExpression, parent: RuntimeConstruct): RuntimeObjectArrowExpression;\nexport function createRuntimeExpression(construct: CompiledFunctionArrowExpression, parent: RuntimeConstruct): RuntimeFunctionArrowExpression;\nexport function createRuntimeExpression(construct: CompiledObjectArrowExpression | CompiledFunctionArrowExpression, parent: RuntimeConstruct): RuntimeObjectArrowExpression | RuntimeFunctionDotExpression;\nexport function createRuntimeExpression<T extends ArithmeticType>(construct: CompiledNumericLiteralExpression<T>, parent: RuntimeConstruct): RuntimeNumericLiteral<T>;\nexport function createRuntimeExpression(construct: CompiledStringLiteralExpression, parent: RuntimeConstruct): RuntimeStringLiteralExpression;\nexport function createRuntimeExpression<T extends ExpressionType, V extends ValueCategory>(construct: CompiledParenthesesExpression<T, V>, parent: RuntimeConstruct): RuntimeParentheses<T, V>;\nexport function createRuntimeExpression<T extends CompleteClassType>(construct: CompiledInitializerListExpression<T>, parent: RuntimeConstruct): RuntimeInitializerListExpression<T>;\nexport function createRuntimeExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory>(construct: AuxiliaryExpression<T, V>, parent: RuntimeConstruct): never;\nexport function createRuntimeExpression<RT extends PeelReference<CompleteReturnType>>(construct: CompiledMagicFunctionCallExpression<RT>, parent: RuntimeConstruct): RuntimeMagicFunctionCallExpression<RT>;\nexport function createRuntimeExpression<RT extends PeelReference<CompleteReturnType>>(construct: CompiledFunctionCallExpression<RT>, parent: RuntimeConstruct): RuntimeFunctionCallExpression<RT>;\nexport function createRuntimeExpression<FromType extends CompleteObjectType, FromVC extends ValueCategory, ToType extends CompleteObjectType, ToVC extends ValueCategory>(construct: CompiledImplicitConversion<FromType, FromVC, ToType, ToVC>, parent: RuntimeConstruct): RuntimeImplicitConversion<FromType, FromVC, ToType, ToVC>;\nexport function createRuntimeExpression<T extends ExpressionType, V extends ValueCategory, ConstructType extends AnalyticExpression, CompiledConstructType extends AnalyticCompiledExpression<ConstructType, T, V>>(construct: CompiledConstructType, parent: RuntimeConstruct): ReturnType<(typeof ExpressionConstructsRuntimeMap)[CompiledConstructType[\"construct_type\"]]>;\nexport function createRuntimeExpression<T extends ExpressionType, V extends ValueCategory>(construct: CompiledExpression<T, V>, parent: RuntimeConstruct): RuntimeExpression<T, V>;\nexport function createRuntimeExpression<T extends ExpressionType, V extends ValueCategory, ConstructType extends CompiledExpression<T, V> | UnsupportedExpression>(construct: ConstructType, parent: RuntimeConstruct): RuntimeExpression<T, V> {\n    return ((<any>ExpressionConstructsRuntimeMap)[construct.construct_type])(<any>construct, parent);\n}\n\n/**\n * An expression not currently supported by Lobster.\n */\nexport class UnsupportedExpression extends Expression<ExpressionASTNode> {\n    public readonly construct_type = \"unsupported_expression\";\n\n    public readonly type = undefined;\n    public readonly valueCategory = undefined;\n\n    public constructor(context: ExpressionContext, ast: ExpressionASTNode, unsupportedName: string) {\n        super(context, ast);\n        this.addNote(CPPError.lobster.unsupported_feature(this, unsupportedName));\n    }\n\n    public createDefaultOutlet(this: never, element: JQuery, parent?: ConstructOutlet): never {\n        throw new Error(\"Cannot create an outlet for an unsupported construct.\");\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        return {\n            message: \"an unsupported expression\"\n        }\n    }\n}\n\n\n\n\n\n\n\n\n// processNonMemberOverload : function(args, op){\n//     try{\n//         var overloadedOp = this.contextualScope.requiredLookup(\"operator\"+op, {\n//             own:true, paramTypes:args.map(function(arg){return arg.type;})\n//         });\n//         this.funcCall = this.sub.funcCall = FunctionCall.instance(this.code, {parent:this});\n//         this.sub.funcCall.compile(overloadedOp, args.map(function(arg){return arg.code;}));\n//         this.type = this.sub.funcCall.type;\n//         this.valueCategory = this.sub.funcCall.valueCategory;\n//         this.i_childrenToExecute = this.i_childrenToExecuteForOverload;\n//     }\n//     catch(e){\n//         if (isA(e, SemanticExceptions.BadLookup)){\n//             this.addNote(CPPError.expr.overloadLookup(this, op));\n//             this.addNote(e.annotation(this));\n//             return;\n//         }\n//         else{\n//             throw e;\n//         }\n//     }\n// },\n\n\n// compileMemberOverload : function(thisArg, argAsts, isThisConst, op){\n//     var self = this;\n//     var auxArgs = argAsts.map(function(argAst){\n//         var auxArg = CPPConstruct.create(argAst, {parent: self, auxiliary: true});\n//         auxArg.tryCompile();\n//         return auxArg;\n//     });\n\n//     try{\n//         var overloadedOp = thisArg.type.classScope.requiredLookup(\"operator\"+op, {\n//             own:true, paramTypes:auxArgs.map(function(arg){return arg.type;}),\n//             isThisConst: isThisConst\n//         });\n\n//         this.isOverload = true;\n//         this.isMemberOverload = true;\n//         this.funcCall = FunctionCall.instance({args: argAsts}, {parent:this});\n//         this.funcCall.compile({func: overloadedOp});\n//         this.type = this.funcCall.type;\n//         this.valueCategory = this.funcCall.valueCategory;\n//         this.i_childrenToExecute = this.i_childrenToExecuteForMemberOverload;\n//     }\n//     catch(e){\n//         if (isA(e, SemanticExceptions.BadLookup)){\n//             this.addNote(CPPError.expr.overloadLookup(this, op));\n//             this.addNote(e.annotation(this));\n//             return;\n//         }\n//         else{\n//             throw e;\n//         }\n//     }\n// }\n\nexport abstract class SimpleRuntimeExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory, C extends CompiledExpression<T, V> = CompiledExpression<T, V>> extends RuntimeExpression<T, V, C> {\n\n    private index: 0 | 1 = 0;\n\n    private subexpressions: readonly RuntimeExpression[] = [];\n\n    public constructor(model: C, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n\n    protected setSubexpressions(subexpressions: readonly RuntimeConstruct[]) {\n        assert(subexpressions.every(subexp => subexp instanceof RuntimeExpression));\n        this.subexpressions = <RuntimeExpression[]>subexpressions;\n    }\n\n    protected upNextImpl() {\n        if (this.index === 0) { // subexpressions\n            // push subexpressions in reverse order since it's a stack\n            for (let i = this.subexpressions.length - 1; i >= 0; --i) {\n                this.sim.push(this.subexpressions[i]);\n            }\n            this.index = 1; // operate\n        }\n    }\n\n    protected stepForwardImpl() {\n        this.operate();\n        this.startCleanup()\n    }\n\n    protected abstract operate(): void;\n}\n\n\ntype t_OverloadableOperators =\n    \"+\" | \"-\" | \"*\" | \"/\" | \"%\" |\n    \"&\" | \"|\" | \"^\" | \"~\" | \"<<\" | \">>\" | \"<\" | \">\" | \"<=\" |\n    \">=\" | \"==\" | \"!=\" | \"&&\" | \"||\" | \"!\" | \"++\" | \"--\" |\n    \"+=\" | \"-=\" | \"*=\" | \"/=\" | \"%=\" | \"&=\" | \"|=\" | \"^=\" | \"<<=\" | \">>=\" |\n    \",\" | \"->\" | \"->*\" | \"()\" | \"[]\";\n\n\n// export class OperatorOverload extends ExpressionBase {\n\n//     public readonly type?: Type;\n//     public readonly valueCategory?: ValueCategory;\n\n//     public readonly operator: t_OverloadableOperators;\n//     public readonly operands: Expression[];\n\n//     public readonly isMemberOverload?: boolean;\n//     public readonly overloadFunctionCall?: FunctionCall;\n\n//     private constructor(context: ExpressionContext, operands: Expression[], operator: t_OverloadableOperators) {\n//         super(context);\n\n//         this.operator = operator;\n//         this.operands = operands; // These may go through conversions when attached to a function call, but this member contains the \"raw\" versions\n\n//         // If any of the operands are not well-typed, can't compile\n//         if (!this.hasWellTypedOperands(operands)) {\n//             this.type = null;\n//             this.valueCategory = null;\n\n//             // In this case, attach operands directly as children.\n//             operands.forEach((expr) => {this.attach(expr);});\n//             return;\n//         }\n\n//         // Sanity check that at least one of the operands has class-type\n//         assert(operands.length > 0, \"Operator overload must have at least one operand.\");\n//         assert(operands.some((expr) => {return isType(expr.type, ClassType);}), \"At least one operand in a non-member overload must have class-type.\");\n\n\n//         let overloadFunction : FunctionEntity? = null;\n\n//         // If the leftmost operand is class-type, we can look for a member overload\n//         let leftmost = operands[0];\n//         if (isType(leftmost.type, ClassType)) {\n//             let entity = leftmost.type.cppClass.scope.singleLookup(\"operator\" + this.operator, {\n//                 own:true, params:[operands.slice(1)], isThisConst : leftmost.type.isConst\n//             });\n\n//             Util.assert(entity instanceof FunctionEntity, \"Non-function entity found for operator overload name lookup.\");\n//             overloadFunction = <FunctionEntity>entity;\n//         }\n\n//         // If we didn't find a member overload, next look for a non-member overload\n//         if (!overloadFunction) {\n//             let entity = this.contextualScope.singleLookup(\"operator\" + this.operator, {\n//                 params: operands\n//             });\n\n//             Util.assert(entity instanceof FunctionEntity, \"Non-function entity found for operator overload name lookup.\");\n//             overloadFunction = <FunctionEntity>entity;\n//         }\n\n\n//         if (overloadFunction) {\n//             this.isMemberOverload = overloadFunction instanceof MemberFunctionEntity;\n\n\n//             if (this.isMemberOverload) {\n//                 // Member overload means leftmost operand is our directly attached child, other operands are arguments to function call.\n//                 this.attach(operands[0]);\n//                 this.attach(this.overloadFunctionCall = new FunctionCall(context, overloadFunction, operands.slice(1)));\n//                 // The receiver of the function call is set at runtime after the operand is evaluated\n//             }\n//             else{\n//                 // Non-member overload means all operands are arguments of the function call\n//                 this.attach(this.overloadFunctionCall = new FunctionCall(context, overloadFunction, operands));\n//             }\n\n//             this.type = this.overloadFunctionCall.func.type.returnType;\n//             this.valueCategory = this.overloadFunctionCall.valueCategory;\n//         }\n//         else{\n//             // TODO: add in notes from attempted lookup operations for the member and non-member overloads\n//             this.addNote(CPPError.expr.binary.overload_not_found(this, operator, operands));\n\n//             this.type = null;\n//             this.valueCategory = null;\n\n//             // If we didn't find a function to use, just attach operands directly as children.\n//             operands.forEach((expr) => {this.attach(expr);});\n//         }\n//     }\n\n//     private hasWellTypedOperands(operands: Expression[]) : operands is TypedExpressionBase[] {\n//         return operands.every((expr) => { return expr.isWellTyped(); });\n//     }\n\n//     public createRuntimeExpression<T extends Type, V extends ValueCategory>(this: Compiled<Expression<T,V>>, parent: RuntimeConstruct) : RuntimeOperatorOverload<CompiledOperatorOverload<T,V>> {\n//         return new RuntimeOperatorOverload(this, parent);\n//     }\n\n//     public describeEvalResult(depth: number): ConstructDescription {\n//         throw new Error(\"Method not implemented.\");\n//     }\n\n\n\n//     // upNext : Class.ADDITIONALLY(function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//     //     if (this.funcCall){\n//     //         inst.childInstances.funcCall.getRuntimeFunction().setReceiver(EvaluationResultRuntimeEntity.instance(this.lhs.type, inst.childInstances.lhs));\n//     //     }\n//     // }),\n\n//     // stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n\n//     //     if (inst.index == \"operate\"){\n\n//     //         if (this.funcCall){\n//     //             // Assignment operator function call has already taken care of the \"assignment\".\n//     //             // Just evaluate to returned value from assignment operator.\n//     //             inst.setEvalResult(inst.childInstances.funcCall.evalResult);\n//     //             this.done(sim, inst);\n//     //             //return true;\n//     //         }\n//     //         else{\n//     //         }\n//     //     }\n//     // },\n\n// }\n\n// export interface CompiledOperatorOverload<T extends PotentialReturnType = PotentialReturnType, V extends ValueCategory = ValueCategory> extends OperatorOverload, SuccessfullyCompiled {\n\n//     public readonly type: T;\n//     public readonly valueCategory: V;\n\n//     public readonly operands: Compiled<Expression[];\n\n//     public readonly isMemberOverload: boolean;\n//     public readonly overloadFunctionCall: CompiledFunctionCall<T,V>; \n// }\n\n\n\n// public readonly _t! : T extends NonNullable<IdentifierExpression[\"type\"]> ? V extends NonNullable<IdentifierExpression[\"valueCategory\"]> ? {\n//     typed: TypedIdentifierExpression<T>;\n//     compiled: T extends ObjectType ? CompiledObjectIdentifier<T> : T extends FunctionType ? CompiledFunctionIdentifier<T> : never; \n// } : never : never;\n\n\n\nexport interface CommaASTNode extends ASTNode {\n    readonly construct_type: \"comma_expression\";\n    readonly operator: \",\";\n    readonly left: ExpressionASTNode;\n    readonly right: ExpressionASTNode;\n    readonly associativity: \"left\";\n}\n\n\nexport class CommaExpression extends Expression<CommaASTNode> {\n    public readonly construct_type = \"comma_expression\";\n\n    public readonly type?: ExpressionType;\n    public readonly valueCategory?: ValueCategory;\n\n    public readonly left: Expression;\n    public readonly right: Expression;\n\n    public constructor(context: ExpressionContext, ast: CommaASTNode, left: Expression, right: Expression) {\n        super(context, ast);\n        this.type = right.type;\n        this.valueCategory = right.valueCategory;\n        this.attach(this.left = left);\n        this.attach(this.right = right);\n    }\n\n    public static createFromAST(ast: CommaASTNode, context: ExpressionContext): CommaExpression {\n        return new CommaExpression(context, ast, createExpressionFromAST(ast.left, context), createExpressionFromAST(ast.right, context));\n    }\n\n    public createDefaultOutlet(this: CompiledCommaExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new CommaExpressionOutlet(element, this, parent);\n    }\n\n    // public isTailChild(child: CPPConstruct) {\n    //     if (child === this.right){\n    //         return {isTail: true,\n    //             reason: \"The recursive call is on the right side of the comma, so it is guaranteed to be evaluated last.\"\n    //         };\n    //     }\n    //     else{\n    //         return {isTail: false,\n    //             reason: \"The expression on the right of the comma will be evaluated after the recursive call.\",\n    //             others: [this.right]\n    //         };\n    //     }\n    // }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        return this.right.describeEvalResult(depth);\n    }\n}\n\nexport interface TypedCommaExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends CommaExpression, t_TypedExpression {\n    readonly type: T;\n    readonly valueCategory: V;\n    readonly right: TypedExpression<T, V>;\n}\n\nexport interface CompiledCommaExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends TypedCommaExpression<T, V>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly left: CompiledExpression;\n    readonly right: CompiledExpression<T, V>;\n}\n\nexport class RuntimeComma<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends SimpleRuntimeExpression<T, V, CompiledCommaExpression<T, V>> {\n\n    public left: RuntimeExpression;\n    public right: RuntimeExpression<T, V>;\n\n    public constructor(model: CompiledCommaExpression<T, V>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.right = createRuntimeExpression(this.model.right, this);\n        this.left = createRuntimeExpression(this.model.left, this);\n        this.setSubexpressions([this.left, this.right]);\n    }\n\n    protected operate() {\n        this.setEvalResult(this.right.evalResult);\n    }\n\n}\n\nexport interface TernaryASTNode extends ASTNode {\n    readonly construct_type: \"ternary_expression\";\n    readonly condition: ExpressionASTNode;\n    readonly then: ExpressionASTNode;\n    readonly otherwise: ExpressionASTNode;\n}\n\nexport class TernaryExpression extends Expression<TernaryASTNode> {\n    public readonly construct_type = \"ternary_expression\";\n\n    public readonly type?: ExpressionType;\n    public readonly valueCategory?: ValueCategory;\n\n    public readonly condition: Expression;\n    public readonly then: Expression;\n    public readonly otherwise: Expression;\n\n    public constructor(context: ExpressionContext, ast: TernaryASTNode, condition: Expression, then: Expression, otherwise: Expression) {\n        super(context, ast);\n\n        if (condition.isWellTyped()) {\n            condition = this.compileCondition(condition);\n        }\n\n        if (then.isWellTyped() && otherwise.isWellTyped()) {\n            ({ then, otherwise } = this.compileConsequences(then, otherwise));\n        }\n\n        this.attach(this.condition = condition);\n        this.attach(this.then = then);\n        this.attach(this.otherwise = otherwise);\n\n        if (then.type && otherwise.type && sameType(then.type, otherwise.type)) {\n            this.type = then.type;\n        }\n        if (then.valueCategory && then.valueCategory === otherwise.valueCategory) {\n            this.valueCategory = then.valueCategory;\n        }\n    }\n\n    public static createFromAST(ast: TernaryASTNode, context: ExpressionContext): TernaryExpression {\n        return new TernaryExpression(context, ast,\n            createExpressionFromAST(ast.condition, context),\n            createExpressionFromAST(ast.then, context),\n            createExpressionFromAST(ast.otherwise, context));\n    }\n\n    private compileCondition(condition: TypedExpression) {\n        condition = standardConversion(condition, new Bool());\n        if (!isType(condition.type, Bool)) {\n            this.addNote(CPPError.expr.ternary.condition_bool(condition, condition.type));\n        }\n        return condition;\n    }\n\n    private compileConsequences(then: TypedExpression, otherwise: TypedExpression) {\n        // If one of the expressions is a prvalue, attempt to make the other one as well\n        if (then.isPrvalue() && otherwise.isLvalue()) {\n            otherwise = convertToPRValue(otherwise);\n        }\n        else if (otherwise.isPrvalue() && then.isLvalue()) {\n            then = convertToPRValue(then);\n        }\n\n\n        if (!sameType(then.type, otherwise.type)) {\n            this.addNote(CPPError.lobster.ternarySameType(this, then.type, otherwise.type));\n        }\n        if (isType(then.type, VoidType) || isType(otherwise.type, VoidType)) {\n            this.addNote(CPPError.lobster.ternaryNoVoid(this));\n        }\n\n        if (then.valueCategory !== otherwise.valueCategory) {\n            this.addNote(CPPError.expr.ternary.sameValueCategory(this));\n        }\n\n        return { then, otherwise };\n    }\n\n    public createDefaultOutlet(this: CompiledTernaryExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new TernaryExpressionOutlet(element, this, parent);\n    }\n\n    // TODO\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n\n    // public isTailChild(child: CPPConstruct) {\n    //     if (child === this.condition){\n    //         return {isTail: false,\n    //             reason: \"One of the two subexpressions in the ternary operator will be evaluated after the function call.\",\n    //             others: [this.then, this.otherwise]\n    //         };\n    //     }\n    //     else{\n    //         return {isTail: true};\n    //     }\n    // }\n}\n\nexport interface TypedTernaryExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends TernaryExpression, t_TypedExpression {\n    readonly type: T;\n    readonly valueCategory: V;\n    readonly then: TypedExpression<T, V>;\n    readonly otherwise: TypedExpression<T, V>;\n}\n\nexport interface CompiledTernaryExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends TypedTernaryExpression<T, V>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly condition: CompiledExpression<Bool, \"prvalue\">;\n    readonly then: CompiledExpression<T, V>;\n    readonly otherwise: CompiledExpression<T, V>;\n}\n\nexport class RuntimeTernary<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends RuntimeExpression<T, V, CompiledTernaryExpression<T, V>> {\n\n    public condition: RuntimeExpression<Bool, \"prvalue\">;\n    public then: RuntimeExpression<T, V>;\n    public otherwise: RuntimeExpression<T, V>;\n\n    private index = \"condition\";\n\n    public constructor(model: CompiledTernaryExpression<T, V>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.condition = createRuntimeExpression(this.model.condition, this);\n        this.then = createRuntimeExpression(this.model.then, this);\n        this.otherwise = createRuntimeExpression(this.model.otherwise, this);\n    }\n\n    protected upNextImpl() {\n        if (this.index === \"condition\") {\n            this.sim.push(this.condition);\n            this.index = \"branch\";\n        }\n        else if (this.index === \"branch\") {\n            if (this.condition.evalResult.rawValue) {\n                this.sim.push(this.then);\n            }\n            else {\n                this.sim.push(this.otherwise)\n            }\n            this.index = \"operate\";\n        }\n    }\n\n    protected stepForwardImpl() {\n        this.setEvalResult(this.then ? this.then.evalResult : this.otherwise.evalResult);\n        this.startCleanup();\n    }\n}\n\n\nexport interface AssignmentExpressionASTNode extends ASTNode {\n    readonly construct_type: \"assignment_expression\";\n    readonly lhs: ExpressionASTNode;\n    readonly operator: \"=\";\n    readonly rhs: ExpressionASTNode;\n}\n\nexport class AssignmentExpression extends Expression<AssignmentExpressionASTNode> {\n    public readonly construct_type = \"assignment_expression\";\n\n    // public readonly \n    // valueCategory : \"lvalue\",\n    // isOverload : false,\n    // isMemberOverload : true,\n    // i_childrenToCreate : [\"lhs\"],\n    // i_childrenToExecute : [\"lhs\", \"rhs\"],\n    // i_childrenToExecuteForOverload : [\"lhs\", \"funcCall\"], // does not include rhs because function call does that\n\n    public readonly type?: AtomicType;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly lhs: Expression;\n    public readonly rhs: Expression;\n\n    private constructor(context: ExpressionContext, ast: AssignmentExpressionASTNode, lhs: TypedExpression<AtomicType>, rhs: Expression) {\n        super(context, ast);\n\n        // If the lhs/rhs doesn't have a type or VC, the rest of the analysis doesn't make much sense.\n        if (!lhs.isWellTyped() || !rhs.isWellTyped()) {\n            this.attach(this.lhs = lhs);\n            this.attach(this.rhs = rhs);\n            return;\n        }\n\n        if (lhs.valueCategory != \"lvalue\") {\n            this.addNote(CPPError.expr.assignment.lhs_lvalue(this));\n        }\n        else if (!lhs.type.areLValuesAssignable()) {\n            this.addNote(CPPError.expr.assignment.lhs_not_assignable(this, lhs));\n        }\n\n        rhs = standardConversion(rhs, lhs.type.cvUnqualified());\n\n\n        // TODO: add a check for a modifiable type (e.g. an array type is not modifiable)\n\n        if (lhs.type.isConst) {\n            this.addNote(CPPError.expr.assignment.lhs_const(this));\n        }\n\n        if (rhs.isWellTyped() && !sameType(rhs.type, lhs.type.cvUnqualified())) {\n            this.addNote(CPPError.expr.assignment.convert(this, lhs, rhs));\n        }\n\n        // TODO: do we need to check that lhs is an AtomicType? or is that necessary given all the other checks?\n\n        this.type = lhs.type;\n        this.attach(this.lhs = lhs);\n        this.attach(this.rhs = rhs);\n    }\n\n    public static createFromAST(ast: AssignmentExpressionASTNode, context: ExpressionContext): AssignmentExpression | OperatorOverloadExpression | UnsupportedExpression {\n        let lhs = createExpressionFromAST(ast.lhs, context);\n        let rhs = createExpressionFromAST(ast.rhs, context);\n\n        // Consider an assignment operator overload if the LHS is class type\n        if (Predicates.isTypedExpression(lhs, isPotentiallyCompleteClassType)) {\n            let overload = selectOperatorOverload(context, ast, \"=\", [lhs, rhs]);\n            if (overload) {\n                return overload;\n            }\n        }\n\n        if (Predicates.isTypedExpression(lhs, isAtomicType)) {\n            return new AssignmentExpression(context, ast, lhs, rhs);\n        }\n        else {\n            return new UnsupportedExpression(context, ast, \"Non-atomic assignment\");\n        }\n    }\n\n    public createDefaultOutlet(this: CompiledAssignmentExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new AssignmentExpressionOutlet(element, this, parent);\n    }\n\n    // TODO\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n    // convert : function(){\n\n\n\n    //     // Check for overloaded assignment\n    //     // NOTE: don't have to worry about lhs reference type because it will have been adjusted to non-reference\n    //     if (isA(this.lhs.type, Types.Class)){\n    //         // Class-type LHS means we check for an overloaded = operator\n\n    //         // Compile the RHS as an auxiliary expression so that we can figure out its type without impacting the construct tree\n    //         var auxRhs = CPPConstruct.create(this.ast.rhs, {parent: this, auxiliary: true});\n    //         auxRhs.compile();\n\n    //         try{\n    //             // Look for an overloaded = operator that we can use with an argument of the RHS type\n    //             // Note: \"own\" here means don't look in parent scope containing the class definition, but we still\n    //             // look in the scope of any base classes that exist due to the class scope performing member lookup\n    //             var assnOp = this.lhs.type.classScope.requiredMemberLookup(\"operator=\", {\n    //                 paramTypes:[auxRhs.type],\n    //                 isThisConst: this.lhs.type.isConst\n    //             });\n\n    //             // TODO: It looks like this if/else isn't necessary due to requiredLookup throwing an exception if not found\n    //             if (assnOp){\n    //                 this.isOverload = true;\n    //                 this.isMemberOverload = true;\n    //                 this.funcCall = FunctionCall.instance({args: [this.ast.rhs]}, {parent:this});\n    //                 this.funcCall.compile({func: assnOp});\n    //                 this.type = this.funcCall.type;\n    //                 this.i_childrenToExecute = this.i_childrenToExecuteForOverload;\n    //             }\n    //             else{\n    //                 this.addNote(CPPError.expr.assignment.not_defined(this, this.lhs.type));\n    //             }\n    //         }\n    //         catch(e){\n    //             if (isA(e, SemanticExceptions.BadLookup)){\n    //                 this.addNote(CPPError.expr.overloadLookup(this, \"=\"));\n    //                 this.addNote(e.annotation(this));\n    //             }\n    //             else{\n    //                 throw e;\n    //             }\n    //         }\n    //     }\n    //     // else{\n    //     //     // Non-class type, so this is regular assignment. Create and compile the rhs, and then attempt\n    //     //     // standard conversion of rhs to match cv-unqualified type of lhs, including lvalue to rvalue conversion\n    //     // }\n    // },\n\n\n    // upNext : Class.ADDITIONALLY(function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    //     if (this.funcCall){\n    //         inst.childInstances.funcCall.getRuntimeFunction().setReceiver(EvaluationResultRuntimeEntity.instance(this.lhs.type, inst.childInstances.lhs));\n    //     }\n    // }),\n\n    // stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n\n    //     if (inst.index == \"operate\"){\n\n    //         if (this.funcCall){\n    //             // Assignment operator function call has already taken care of the \"assignment\".\n    //             // Just evaluate to returned value from assignment operator.\n    //             inst.setEvalResult(inst.childInstances.funcCall.evalResult);\n    //             this.done(sim, inst);\n    //             //return true;\n    //         }\n    //         else{\n    //         }\n    //     }\n    // },\n\n    public isTailChild(child: CPPConstruct) {\n        return {\n            isTail: false,\n            reason: \"The assignment itself will happen after the recursive call returns.\",\n            others: [this]\n        };\n    }\n\n    public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n        var lhs = this.lhs.describeEvalResult(0);\n        var rhs = this.rhs.describeEvalResult(0);\n        return { message: \"The value of \" + (rhs.name || rhs.message) + \" will be assigned to \" + (lhs.name || lhs.message) + \".\" };\n    }\n}\n\nexport interface TypedAssignmentExpression<T extends AtomicType = AtomicType> extends AssignmentExpression, t_TypedExpression {\n    readonly type: T;\n    readonly lhs: TypedExpression<T>;\n}\n\n\nexport interface CompiledAssignmentExpression<T extends AtomicType = AtomicType> extends TypedAssignmentExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly lhs: CompiledExpression<T, \"lvalue\">;\n    readonly rhs: CompiledExpression<T, \"prvalue\">;\n}\n\n\nexport class RuntimeAssignment<T extends AtomicType = AtomicType> extends SimpleRuntimeExpression<T, \"lvalue\", CompiledAssignmentExpression<T>> {\n\n    public readonly lhs: RuntimeExpression<T, \"lvalue\">;\n    public readonly rhs: RuntimeExpression<T, \"prvalue\">;\n\n    public constructor(model: CompiledAssignmentExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.lhs = createRuntimeExpression(this.model.lhs, this);\n        this.rhs = createRuntimeExpression(this.model.rhs, this);\n        this.setSubexpressions([this.rhs, this.lhs]);\n    }\n\n    protected operate() {\n        this.lhs.evalResult.writeValue(this.rhs.evalResult);\n        this.setEvalResult(this.lhs.evalResult);\n    }\n}\n\nexport type t_CompoundAssignmentOperators = \"*=\" | \"/=\" | \"%=\" | \"+=\" | \"-=\" | \">>=\" | \"<<=\" | \"&=\" | \"^=\" | \"|=\";\n\nexport interface CompoundAssignmentExpressionASTNode extends ASTNode {\n    readonly construct_type: \"compound_assignment_expression\";\n    readonly lhs: ExpressionASTNode;\n    readonly operator: t_CompoundAssignmentOperators;\n    readonly rhs: ExpressionASTNode;\n}\n\n// var beneathConversions = function(expr){\n//     while(isA(expr, Conversions.ImplicitConversion)){\n//         expr = expr.from;\n//     }\n//     return expr;\n// };\n\n// TODO: there might be a better way to implement this. currently it reuses code from BinaryOperator, but I feel\n// a little bit icky about how it does it and the way it treats the construct tree\n// export var CompoundAssignment  = Expression.extend({\n//     _name: \"CompoundAssignment\",\n//     valueCategory : \"lvalue\",\n\n//     i_createFromAST: function(ast){\n//         CompoundAssignment._parent.i_createFromAST.apply(this, arguments);\n\n//         // Basically this uses a binary operator expression to do most of the work\n//         // e.g. x += y should be equivalent (to a certain extent) to x = x + y\n\n//         this.operator = ast.operator;\n//         var binaryOp = this.operator.substring(0, this.operator.length-1); // remove the = from the operator e.g. += becomes +\n//         var binAst = copyMixin(ast, {\n//             left: ast.lhs,\n//             right: ast.rhs,\n//             operator: binaryOp\n//         });\n//         var binaryOpClass = BINARY_OPS[binaryOp];\n//         this.i_binaryOp = binaryOpClass.instance(binAst, {parent: this});\n//     },\n\n//     compile : function() {\n\n//         //compiles left and right\n//         this.i_binaryOp.compile();\n\n//         if(this.hasErrors()){\n//             return;\n//         }\n\n//         // left should be a standard conversion sequence\n//         // we want to extract the pre-conversion expression for lhs\n//         this.lhs = beneathConversions(this.i_binaryOp.left);\n\n//         // Attempt to convert rhs (a binary operation) back to type of lhs\n//         this.rhs = standardConversion(this.i_binaryOp, this.lhs.type);\n\n//         // Type Check\n//         if (this.lhs.valueCategory !== \"lvalue\") {\n//             this.addNote(CPPError.expr.assignment.lhs_lvalue(this));\n//         }\n\n//         if (!sameType(this.rhs.type, this.lhs.type)) {\n//             this.addNote(CPPError.expr.assignment.convert(this, this.lhs, this.rhs));\n//         }\n\n//         this.type = this.lhs.type;\n\n//         this.compileTemporarires();\n//     },\n\n//     upNext : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         // Evaluate subexpressions\n//         if (inst.index == \"subexpressions\") {\n//             inst.rhs = this.rhs.createAndPushInstance(sim, inst);\n//             inst.index = \"operate\";\n//             return true;\n//         }\n//     },\n\n//     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         if (inst.index === \"operate\"){\n//             // extract lvalue on lhs that may be underneath a standard conversion sequence\n//             // note: this is only applicable in compound assignment. in regular lhs will never be converted\n//             var findLhs = inst.rhs;\n//             while(isA(findLhs.model, ImplicitConversion)){\n//                 findLhs = findLhs.childInstances.from; // strip conversions off result of binary op\n//             }\n//             findLhs = findLhs.childInstances.left; // go to left argument of binary op\n//             while(isA(findLhs.model, ImplicitConversion)){\n//                 findLhs = findLhs.childInstances.from; // strip conversions off left operand\n//             }\n\n//             var lhs = findLhs.evalResult;\n//             var rhs = inst.rhs.evalResult;\n\n//             lhs.writeValue(rhs);\n\n//             inst.setEvalResult(lhs);\n//             this.done(sim, inst);\n//         }\n//     },\n\n//     isTailChild : function(child){\n//         return {isTail: false,\n//             reason: \"The compound assignment itself will happen after the recursive call returns.\",\n//             others: [this]\n//         };\n//     }\n// });\n\n\n\n\nexport type BinaryOperatorExpressionASTNode =\n    ArithmeticBinaryOperatorExpressionASTNode |\n    RelationalBinaryOperatorExpressionASTNode |\n    LogicalBinaryOperatorExpressionASTNode;\n\nexport type t_BinaryOperators = t_ArithmeticBinaryOperators | t_RelationalBinaryOperators | t_LogicalBinaryOperators;\n\nabstract class BinaryOperatorExpression<ASTType extends BinaryOperatorExpressionASTNode = BinaryOperatorExpressionASTNode> extends Expression<ASTType> {\n\n    public abstract readonly type?: AtomicType;\n    public readonly valueCategory = \"prvalue\";\n\n    public abstract readonly left: Expression;\n    public abstract readonly right: Expression;\n\n    public readonly operator: t_BinaryOperators;\n\n    protected constructor(context: ExpressionContext, ast: ASTType | undefined, operator: t_BinaryOperators) {\n        super(context, ast)\n        this.operator = operator;\n    }\n\n    public createDefaultOutlet(this: CompiledBinaryOperatorExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new BinaryOperatorExpressionOutlet(element, this, parent);\n    }\n}\n\n// export interface CompiledBinaryOperatorExpressionBase<T extends AtomicType = AtomicType>\nexport type AnalyticBinaryOperatorExpression =\n    ArithmeticBinaryOperatorExpression |\n    PointerDifferenceExpression |\n    PointerOffsetExpression |\n    OutputOperatorExpression |\n    InputOperatorExpression |\n    RelationalBinaryOperatorExpression |\n    PointerComparisonExpression |\n    LogicalBinaryOperatorExpression |\n    OperatorOverloadExpression;\n\nexport interface TypedBinaryOperatorExpression<T extends AtomicType = AtomicType> extends BinaryOperatorExpression, t_TypedExpression {\n    readonly type: T;\n    readonly left: TypedExpression<AtomicType, \"prvalue\">;\n    readonly right: TypedExpression<AtomicType, \"prvalue\">;\n}\n\nexport interface CompiledBinaryOperatorExpression<T extends AtomicType = AtomicType> extends TypedBinaryOperatorExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    // Note valueCategory is defined as \"prvalue\" in BinaryOperator\n    readonly left: CompiledExpression<AtomicType, \"prvalue\">;\n    readonly right: CompiledExpression<AtomicType, \"prvalue\">;\n}\n\nexport interface RuntimeBinaryOperator extends RuntimeExpression<AtomicType, \"prvalue\", CompiledBinaryOperatorExpression<AtomicType>> {\n\n    readonly left: RuntimeExpression<AtomicType, \"prvalue\">;\n    readonly right: RuntimeExpression<AtomicType, \"prvalue\">;\n\n}\n\n\n\n\nexport interface ArithmeticBinaryOperatorExpressionASTNode extends ASTNode {\n    readonly construct_type: \"arithmetic_binary_operator_expression\";\n    readonly operator: t_ArithmeticBinaryOperators;\n    readonly left: ExpressionASTNode;\n    readonly right: ExpressionASTNode;\n    readonly associativity: \"left\";\n}\n\ntype t_ArithmeticBinaryOperators = \"+\" | \"-\" | \"*\" | \"/\" | \"%\" | \"&\" | \"^\" | \"|\" | \"<<\" | \">>\";\n\nfunction add(left: number, right: number) { return left + right; }\nfunction sub(left: number, right: number) { return left - right; }\nfunction mult(left: number, right: number) { return left * right; }\nfunction intDiv(left: number, right: number) { return Math.trunc(left / right); };\nfunction floatDiv(left: number, right: number) { return left / right; };\nfunction mod(left: number, right: number) { return left - intDiv(left, right) * right; }\nfunction bitAnd(left: number, right: number) { return left & right; }\nfunction bitXor(left: number, right: number) { return left ^ right; }\nfunction bitOr(left: number, right: number) { return left | right; }\nfunction bitShiftLeft(left: number, right: number) { return left << right; }\nfunction bitShiftRight(left: number, right: number) { return left >>> right; } // TODO: is the sign preserving bit shift right more consistent with C++?\n\n// Note: AtomicType here is much wider than needed. T should theoretically only ever be Int, Double, or Float\nconst ARITHMETIC_BINARY_OPERATIONS: { [k in t_ArithmeticBinaryOperators]: <T extends AtomicType>(left: Value<T>, right: Value<T>) => Value<T> }\n    = {\n    \"+\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.combine(right, add);\n    },\n    \"-\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.combine(right, sub);\n    },\n    \"*\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.combine(right, mult);\n    },\n    \"/\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        if (left.type.isIntegralType()) {\n            return left.combine(right, intDiv);\n        }\n        else {\n            return left.combine(right, floatDiv);\n        }\n    },\n    \"%\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.combine(right, mod);\n    },\n    \"&\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.combine(right, bitAnd);\n    },\n    \"^\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.combine(right, bitXor);\n    },\n    \"|\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.combine(right, bitOr);\n    },\n    \"<<\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.combine(right, bitShiftLeft);\n    },\n    \">>\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.combine(right, bitShiftRight);\n    }\n}\n\nexport class ArithmeticBinaryOperatorExpression extends BinaryOperatorExpression<ArithmeticBinaryOperatorExpressionASTNode> {\n    public readonly construct_type = \"arithmetic_binary_operator_expression\";\n\n    public readonly type?: ArithmeticType;\n\n    public readonly left: Expression;\n    public readonly right: Expression;\n\n    public readonly operator!: t_ArithmeticBinaryOperators; // Narrows type from base\n\n    protected constructor(context: ExpressionContext, ast: ArithmeticBinaryOperatorExpressionASTNode, left: Expression, right: Expression, operator: t_ArithmeticBinaryOperators) {\n        super(context, ast, operator);\n\n        if (!left.isWellTyped() || !right.isWellTyped()) {\n            this.attach(this.left = left);\n            this.attach(this.right = right);\n            return;\n        }\n\n        // Arithmetic types are required\n        if (!Predicates.isTypedExpression(left, isArithmeticType) || !Predicates.isTypedExpression(right, isArithmeticType)) {\n            this.addNote(CPPError.expr.binary.arithmetic_operands(this, this.operator, left, right));\n            this.attach(this.left = left);\n            this.attach(this.right = right);\n            return;\n        }\n\n        // % operator and shift operators require integral operands\n        if ((operator === \"%\" || operator === \"<<\" || operator == \">>\") &&\n            (!Predicates.isTypedExpression(left, isIntegralType) || !Predicates.isTypedExpression(right, isIntegralType))) {\n            this.addNote(CPPError.expr.binary.integral_operands(this, this.operator, left, right));\n            this.attach(this.left = left);\n            this.attach(this.right = right);\n            return;\n        }\n\n        let [convertedLeft, convertedRight] = usualArithmeticConversions(left, right);\n\n\n        if (sameType(convertedLeft.type!, convertedRight.type!)) {\n            this.type = convertedLeft.type;\n        }\n        else {\n            this.addNote(CPPError.expr.invalid_binary_operands(this, this.operator, convertedLeft, convertedRight));\n        }\n\n        this.attach(this.left = convertedLeft);\n        this.attach(this.right = convertedRight);\n    }\n\n    public static createFromAST(ast: ArithmeticBinaryOperatorExpressionASTNode, context: ExpressionContext): ArithmeticBinaryOperatorExpression | PointerDifferenceExpression | PointerOffsetExpression | OutputOperatorExpression | InputOperatorExpression | OperatorOverloadExpression {\n        let left: Expression = createExpressionFromAST(ast.left, context);\n        let right: Expression = createExpressionFromAST(ast.right, context);\n        let op = ast.operator;\n\n        // If either one is a class type, we consider operator overloads\n        if (Predicates.isTypedExpression(left, isPotentiallyCompleteClassType) || Predicates.isTypedExpression(right, isPotentiallyCompleteClassType)) {\n            let overload = selectOperatorOverload(context, ast, op, [left, right]);\n            if (overload) {\n                return overload;\n            }\n        }\n\n        // If operator is \"<<\" and the left operand is an ostream, treat as output operation\n        if (op === \"<<\" && Predicates.isTypedExpression(left, isPotentiallyCompleteClassType) && left.type.className === \"ostream\" && left.isLvalue()) {\n\n            return new OutputOperatorExpression(context, ast, left, right);\n        }\n        \n        // If operator is \">>\" and the left operand is an ostream, treat as output operation\n        if (op === \">>\" && Predicates.isTypedExpression(left, isPotentiallyCompleteClassType) && left.type.className === \"istream\" && left.isLvalue()) {\n\n            return new InputOperatorExpression(context, ast, left, right);\n        }\n\n        // If operator is \"-\" and both are pointers or arrays, it's a pointer difference\n        // Note that although integer 0 is convertible to a pointer, that conversion should\n        // not be applied here since the 0 should just be interpreted as a pointer offset.\n        if (op === \"-\" && (Predicates.isTypedExpression(left, isPointerType) || Predicates.isTypedExpression(left, isBoundedArrayType, \"lvalue\"))\n            && (Predicates.isTypedExpression(right, isPointerType) || Predicates.isTypedExpression(right, isBoundedArrayType, \"lvalue\"))) {\n\n            return new PointerDifferenceExpression(context, ast,\n                convertToPRValue(left),\n                convertToPRValue(right));\n        }\n\n        // If operator is \"-\" or \"+\" and it's a combination of pointer plus integer, it's a pointer offset\n        if (op === \"-\" || op === \"+\") {\n            if ((Predicates.isTypedExpression(left, isPointerType) || Predicates.isTypedExpression(left, isBoundedArrayType, \"lvalue\")) && Predicates.isTypedExpression(right, isIntegralType) ||\n                (Predicates.isTypedExpression(right, isPointerType) || Predicates.isTypedExpression(right, isBoundedArrayType, \"lvalue\")) && Predicates.isTypedExpression(left, isIntegralType)) {\n                return new PointerOffsetExpression(context, ast,\n                    <TypedExpression<PointerType, \"prvalue\"> | TypedExpression<IntegralType, \"prvalue\">>convertToPRValue(left),\n                    <TypedExpression<PointerType, \"prvalue\"> | TypedExpression<IntegralType, \"prvalue\">>convertToPRValue(right));\n            }\n        }\n\n        return new ArithmeticBinaryOperatorExpression(context, ast, left, right, op);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedArithmeticBinaryOperatorExpression<T extends ArithmeticType = ArithmeticType> extends ArithmeticBinaryOperatorExpression, t_TypedExpression {\n    readonly type: T;\n    readonly left: TypedExpression<T, \"prvalue\">;\n    readonly right: TypedExpression<T, \"prvalue\">;\n}\n\nexport interface CompiledArithmeticBinaryOperatorExpression<T extends ArithmeticType = ArithmeticType> extends TypedArithmeticBinaryOperatorExpression<T>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly left: CompiledExpression<T, \"prvalue\">;\n    readonly right: CompiledExpression<T, \"prvalue\">;\n}\n\n// TODO: rename this or maybe create two separate classes for Arithmetic and Logical\nexport class RuntimeArithmeticBinaryOperator<T extends ArithmeticType = ArithmeticType> extends SimpleRuntimeExpression<T, \"prvalue\", CompiledArithmeticBinaryOperatorExpression<T>> {\n\n    public readonly left: RuntimeExpression<T, \"prvalue\">;\n    public readonly right: RuntimeExpression<T, \"prvalue\">;\n\n    public constructor(model: CompiledArithmeticBinaryOperatorExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.left = createRuntimeExpression(this.model.left, this);\n        this.right = createRuntimeExpression(this.model.right, this);\n        this.setSubexpressions([this.left, this.right]);\n    }\n\n    public operate() {\n        // Not sure why the cast here is necessary but apparently Typescript needs it\n        this.setEvalResult(<VCResultTypes<T, \"prvalue\">>ARITHMETIC_BINARY_OPERATIONS[this.model.operator](this.left.evalResult, this.right.evalResult));\n    }\n}\n\nexport class PointerDifferenceExpression extends BinaryOperatorExpression<ArithmeticBinaryOperatorExpressionASTNode> {\n    public readonly construct_type = \"pointer_diference_expression\";\n\n    public readonly type: Int;\n    public readonly valueCategory = \"prvalue\";\n\n    public readonly left: TypedExpression<PointerType, \"prvalue\">;\n    public readonly right: TypedExpression<PointerType, \"prvalue\">;\n\n    public readonly operator!: \"-\"; // Narrows type from base\n\n    public constructor(context: ExpressionContext, ast: ArithmeticBinaryOperatorExpressionASTNode, left: TypedExpression<PointerType, \"prvalue\">, right: TypedExpression<PointerType, \"prvalue\">) {\n        super(context, ast, \"-\");\n\n        // Not necessary assuming they come in as prvalues that are confirmed to have pointer type.\n        // if (left.isWellTyped() && right.isWellTyped()) {\n        //     left = convertToPRValue(left);\n        //     right = convertToPRValue(right);\n        // }\n\n        assert(similarType(left.type, right.type));\n\n        this.attach(this.left = left);\n        this.attach(this.right = right);\n\n        this.type = new Int();\n\n        if (!left.type.isPointerToCompleteType()) {\n            this.addNote(CPPError.expr.pointer_difference.incomplete_pointed_type(this, left.type))\n        }\n\n\n        // Not necessary assuming they come in as prvalues that are confirmed to have pointer type.\n        // if (left.isWellTyped() && right.isWellTyped()) {\n\n        //     if (left.type.isType(Pointer) && right.type.isType(Pointer)) {\n        //         this.type = new Int();\n        //     }\n        //     else {\n        //         this.addNote(CPPError.expr.invalid_binary_operands(this, this.operator, left, right));\n        //         this.type = null;\n        //     }\n        // }\n        // else {\n        //     this.type = null;\n        // }\n    }\n\n    // public createRuntimeExpression(this: CompiledPointerDifferenceExpression, parent: RuntimeConstruct) : RuntimePointerDifference;\n    // public createRuntimeExpression<T extends PointerType, V extends ValueCategory>(this: Compiled<Expression<T,V>>, parent: RuntimeConstruct) : never;\n    // public createRuntimeExpression(this: CompiledPointerDifferenceExpression, parent: RuntimeConstruct) : RuntimePointerDifference {\n    //     return new RuntimePointerDifference(this, parent);\n    // }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedPointerDifferenceExpression extends PointerDifferenceExpression, t_TypedExpression {\n\n}\n\nexport interface CompiledPointerDifferenceExpression extends TypedPointerDifferenceExpression, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly left: CompiledExpression<PointerToCompleteType, \"prvalue\">;\n    readonly right: CompiledExpression<PointerToCompleteType, \"prvalue\">;\n}\n\nexport class RuntimePointerDifference extends SimpleRuntimeExpression<Int, \"prvalue\", CompiledPointerDifferenceExpression> {\n\n    public left: RuntimeExpression<PointerToCompleteType, \"prvalue\">;\n    public right: RuntimeExpression<PointerToCompleteType, \"prvalue\">;\n\n    public constructor(model: CompiledPointerDifferenceExpression, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.left = createRuntimeExpression(this.model.left, this);\n        this.right = createRuntimeExpression(this.model.right, this);\n        this.setSubexpressions([this.left, this.right]);\n    }\n\n    public operate() {\n\n        let result = this.left.evalResult.pointerDifference(this.right.evalResult);\n\n        let leftArr = this.left.model.type.isType(ArrayPointerType) ? this.left.model.type.arrayObject : null;\n        let rightArr = this.right.model.type.isType(ArrayPointerType) ? this.right.model.type.arrayObject : null;\n\n        if (result.rawEquals(0)) {\n            // If it's the same address, I guess we can let it slide...\n        }\n        else if (!leftArr && rightArr) {\n            this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"The left pointer in this subtraction is not from an array, so the resulting difference is not meaningful.\", true);\n            result = result.invalidated();\n        }\n        else if (leftArr && !rightArr) {\n            this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"The right pointer in this subtraction is not from an array, so the resulting difference is not meaningful.\", true);\n            result = result.invalidated();\n        }\n        else if (leftArr && rightArr && leftArr !== rightArr) {\n            this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"The pointers in this subtraction are pointing into two different arrays, so the resulting difference is not meaningful.\", true);\n            result = result.invalidated();\n        }\n\n        this.setEvalResult(result);\n\n    }\n}\n\nexport class PointerOffsetExpression extends BinaryOperatorExpression<ArithmeticBinaryOperatorExpressionASTNode> {\n    public readonly construct_type = \"pointer_offset_expression\";\n\n    public readonly type?: PointerType;\n\n    public readonly left: TypedExpression<PointerType, \"prvalue\"> | TypedExpression<IntegralType, \"prvalue\">;\n    public readonly right: TypedExpression<PointerType, \"prvalue\"> | TypedExpression<IntegralType, \"prvalue\">;\n\n    public readonly pointer?: TypedExpression<PointerType, \"prvalue\">;\n    public readonly offset?: TypedExpression<IntegralType, \"prvalue\">;\n\n    public readonly pointerOnLeft?: boolean;\n\n    public readonly operator!: \"+\"; // Narrows type from base\n\n    public constructor(context: ExpressionContext, ast: ArithmeticBinaryOperatorExpressionASTNode,\n        left: TypedExpression<PointerType, \"prvalue\"> | TypedExpression<IntegralType, \"prvalue\">,\n        right: TypedExpression<PointerType, \"prvalue\"> | TypedExpression<IntegralType, \"prvalue\">) {\n        super(context, ast, \"+\");\n\n        // NOT NEEDED ASSUMING THEY COME IN ALREADY WELL TYPED AS APPROPRIATE FOR POINTER OFFSET\n        // if (left.isWellTyped() && right.isWellTyped()) {\n        //     left = convertToPRValue(left);\n        //     right = convertToPRValue(right);\n        // }\n\n\n        this.attach(this.left = left);\n        this.attach(this.right = right);\n\n        if (!left.isWellTyped() || !right.isWellTyped()) {\n            return;\n        }\n\n        if (Predicates.isTypedExpression(left, isPointerType) && Predicates.isTypedExpression(right, isIntegralType)) {\n            this.pointerOnLeft = true;\n            this.pointer = left;\n            this.offset = right;\n            this.type = this.pointer.type;\n\n            if (!left.type.isPointerToCompleteType()) {\n                this.addNote(CPPError.expr.pointer_offset.incomplete_pointed_type(this, left.type))\n            }\n        }\n        else if (Predicates.isTypedExpression(left, isIntegralType) && Predicates.isTypedExpression(right, isPointerType)) {\n            this.pointerOnLeft = false;\n            this.pointer = right;\n            this.offset = left;\n            this.type = this.pointer.type;\n\n            if (!right.type.isPointerToCompleteType()) {\n                this.addNote(CPPError.expr.pointer_offset.incomplete_pointed_type(this, right.type))\n            }\n        }\n        else {\n            this.addNote(CPPError.expr.invalid_binary_operands(this, this.operator, left, right));\n        }\n    }\n\n    // public createRuntimeExpression<T extends PointerType>(this: CompiledPointerOffsetExpression<T>, parent: RuntimeConstruct) : RuntimePointerOffset<T>;\n    // public createRuntimeExpression<T extends PointerType, V extends ValueCategory>(this: Compiled<Expression<T,V>>, parent: RuntimeConstruct) : never;\n    // public createRuntimeExpression<T extends PointerType>(this: CompiledPointerOffsetExpression<T>, parent: RuntimeConstruct) : RuntimePointerOffset<T> {\n    //     return new RuntimePointerOffset(this, parent);\n    // }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedPointerOffsetExpression<T extends PointerType = PointerType> extends PointerOffsetExpression, t_TypedExpression {\n    readonly type: T;\n\n    readonly left: TypedExpression<T, \"prvalue\"> | TypedExpression<IntegralType, \"prvalue\">;\n    readonly right: TypedExpression<T, \"prvalue\"> | TypedExpression<IntegralType, \"prvalue\">;\n\n    readonly pointer: TypedExpression<T, \"prvalue\">;\n    readonly offset: TypedExpression<IntegralType, \"prvalue\">;\n}\n\nexport interface CompiledPointerOffsetExpression<T extends PointerToCompleteType = PointerToCompleteType> extends TypedPointerOffsetExpression<T>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly left: CompiledExpression<T, \"prvalue\"> | CompiledExpression<IntegralType, \"prvalue\">;\n    readonly right: CompiledExpression<T, \"prvalue\"> | CompiledExpression<IntegralType, \"prvalue\">;\n\n    readonly pointer: CompiledExpression<T, \"prvalue\">;\n    readonly offset: CompiledExpression<IntegralType, \"prvalue\">;\n\n    readonly pointerOnLeft?: boolean;\n}\n\n\nexport class RuntimePointerOffset<T extends PointerToCompleteType = PointerToCompleteType> extends SimpleRuntimeExpression<T, \"prvalue\", CompiledPointerOffsetExpression<T>> {\n\n    public readonly left: RuntimeExpression<T, \"prvalue\"> | RuntimeExpression<IntegralType, \"prvalue\">;\n    public readonly right: RuntimeExpression<T, \"prvalue\"> | RuntimeExpression<IntegralType, \"prvalue\">;\n\n    public readonly pointer: RuntimeExpression<T, \"prvalue\">;\n    public readonly offset: RuntimeExpression<IntegralType, \"prvalue\">;\n\n    public constructor(model: CompiledPointerOffsetExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.pointer = createRuntimeExpression(this.model.pointer, this);\n        this.offset = createRuntimeExpression(this.model.offset, this);\n        if (model.pointerOnLeft) {\n            this.left = this.pointer;\n            this.right = this.offset;\n        }\n        else {\n            this.left = this.offset;\n            this.right = this.pointer;\n        }\n        this.setSubexpressions([this.left, this.right]);\n    }\n\n    public operate() {\n\n        // code below computes the new address after pointer addition, while preserving RTTI\n        //   result = pointer + offset * pointerSize\n        let result = this.pointer.evalResult.pointerOffset(this.offset.evalResult);\n        this.setEvalResult(<VCResultTypes<T, \"prvalue\">>result); // not sure why cast is necessary here\n\n        let resultType = result.type;\n        if (resultType.isType(ArrayPointerType)) {\n            // Check that we haven't run off the array\n            if (result.rawValue < resultType.min()) {\n                //sim.alert(\"Oops. That pointer just wandered off the beginning of its array.\");\n            }\n            else if (resultType.onePast() < result.rawValue) {\n                //sim.alert(\"Oops. That pointer just wandered off the end of its array.\");\n            }\n        }\n        else {\n            // If the RTTI works well enough, this should always be unsafe\n            this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"Uh, I don't think you're supposed to do arithmetic with that pointer. It's not pointing into an array.\", true);\n        }\n    }\n}\n\nexport class OutputOperatorExpression extends Expression<ArithmeticBinaryOperatorExpressionASTNode> { // TODO: change to special Output AST?\n    public readonly construct_type = \"output_operator_expression\";\n\n    public readonly type: PotentiallyCompleteClassType;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly left: TypedExpression<PotentiallyCompleteClassType, \"lvalue\">;\n    public readonly right: Expression;\n\n    public readonly operator = \"<<\";\n\n    public constructor(context: ExpressionContext, ast: ArithmeticBinaryOperatorExpressionASTNode,\n        left: TypedExpression<PotentiallyCompleteClassType, \"lvalue\">,\n        right: Expression) {\n        super(context, ast);\n\n        this.attach(this.left = left);\n        this.type = this.left.type;\n\n        // left is already well-typed via ctor parameter type\n        if (!right.isWellTyped()) {\n            this.attach(this.right = right);\n            return;\n        }\n\n        if (right.isStringLiteralExpression()) {\n            // Avoid array-to-pointer conversion which creates an\n            // awkward extra step as the string literal turns into\n            // a char* that is then just special cased by cout.\n            this.attach(this.right = right);\n        }\n        else if (Predicates.isTypedExpression(right, isAtomicType) || Predicates.isTypedExpression(right, isBoundedArrayType)) {\n            this.attach(this.right = convertToPRValue(right));\n        }\n        else {\n            this.addNote(CPPError.expr.output.unsupported_type(this, right.type));\n            this.attach(this.right = right);\n        }\n\n    }\n\n    public createDefaultOutlet(this: CompiledOutputOperatorExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new OutputOperatorExpressionOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedOutputOperatorExpression extends OutputOperatorExpression, t_TypedExpression {\n\n}\n\nexport interface CompiledOutputOperatorExpression extends TypedOutputOperatorExpression, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly left: CompiledExpression<PotentiallyCompleteClassType, \"lvalue\">;\n    readonly right: CompiledExpression<AtomicType, \"prvalue\"> | CompiledStringLiteralExpression;\n}\n\n\nexport class RuntimeOutputOperatorExpression extends SimpleRuntimeExpression<PotentiallyCompleteClassType, \"lvalue\", CompiledOutputOperatorExpression> {\n\n    public readonly left: RuntimeExpression<PotentiallyCompleteClassType, \"lvalue\">;\n    public readonly right: RuntimeExpression<AtomicType, \"prvalue\"> | RuntimeStringLiteralExpression;\n\n    public constructor(model: CompiledOutputOperatorExpression, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.left = createRuntimeExpression(this.model.left, this);\n        if (this.model.right.isStringLiteralExpression()) {\n            this.right = createRuntimeExpression(this.model.right, this);\n        }\n        else {\n            this.right = createRuntimeExpression(this.model.right, this);\n        }\n        this.setSubexpressions([this.left, this.right]);\n    }\n\n    public operate() {\n        if (this.right instanceof RuntimeStringLiteralExpression) {\n            this.sim.cout(new Value(this.right.evalResult.address, new ArrayPointerType(this.right.evalResult)));\n        }\n        else {\n            this.sim.cout(this.right.evalResult);\n        }\n        this.setEvalResult(this.left.evalResult);\n    }\n}\n\n\n\nexport class InputOperatorExpression extends Expression<ArithmeticBinaryOperatorExpressionASTNode> { // TODO: change to special Input AST?\n    public readonly construct_type = \"input_operator_expression\";\n\n    public readonly type: PotentiallyCompleteClassType;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly left: TypedExpression<PotentiallyCompleteClassType, \"lvalue\">;\n    public readonly right: Expression;\n\n    public readonly operator = \">>\";\n\n    public constructor(context: ExpressionContext, ast: ArithmeticBinaryOperatorExpressionASTNode,\n        left: TypedExpression<PotentiallyCompleteClassType, \"lvalue\">,\n        right: Expression) {\n        super(context, ast);\n\n        this.attach(this.left = left);\n        this.attach(this.right = right);\n        this.type = this.left.type;\n\n        // left is already well-typed via ctor parameter type\n        if (!right.isWellTyped()) {\n            return;\n        }\n\n        if (!right.isLvalue()) {\n            this.addNote(CPPError.expr.input.lvalue_required(this, right.type));\n        }\n\n        if (!Predicates.isTypedExpression(right, isArithmeticType)) {\n            this.addNote(CPPError.expr.input.unsupported_type(this, right.type));\n        }\n    }\n\n    public createDefaultOutlet(this: CompiledInputOperatorExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new InputOperatorExpressionOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedInputOperatorExpression extends InputOperatorExpression, t_TypedExpression {\n\n}\n\nexport interface CompiledInputOperatorExpression extends TypedInputOperatorExpression, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly left: CompiledExpression<PotentiallyCompleteClassType, \"lvalue\">;\n    readonly right: CompiledExpression<ArithmeticType, \"lvalue\">;\n}\n\n\nexport class RuntimeInputOperatorExpression extends RuntimeExpression<PotentiallyCompleteClassType, \"lvalue\", CompiledInputOperatorExpression> {\n\n    public readonly left: RuntimeExpression<PotentiallyCompleteClassType, \"lvalue\">;\n    public readonly right: RuntimeExpression<ArithmeticType, \"lvalue\">;\n\n    private index: 0 | 1 = 0;\n\n    public constructor(model: CompiledInputOperatorExpression, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.left = createRuntimeExpression(this.model.left, this);\n        this.right = createRuntimeExpression(this.model.right, this);\n    }\n\n    protected upNextImpl() {\n        switch (this.index) {\n            case 0:\n                this.sim.push(this.right);\n                this.sim.push(this.left);\n                ++this.index;\n                break;\n            case 1:\n                this.sim.cin.skipws();\n                if (this.sim.cin.buffer.length === 0) {\n                    this.sim.blockUntilCin();\n                }\n                break;\n            default:\n                assertNever(this.index);\n        }\n    }\n\n    protected stepForwardImpl() {\n\n        let resultOrError = this.sim.cin.extractAndParseFromBuffer(this.right.evalResult.type);\n\n        if (resultOrError.kind === \"success\") {\n            this.right.evalResult.writeValue(resultOrError.result);\n        }\n        else {\n            this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"input parsing error\", true);\n        }\n        this.setEvalResult(this.left.evalResult);\n        this.startCleanup();\n    }\n}\n\n\n\n\n\n\n\n\nexport interface RelationalBinaryOperatorExpressionASTNode extends ASTNode {\n    readonly construct_type: \"relational_binary_operator_expression\";\n    readonly operator: t_RelationalBinaryOperators;\n    readonly left: ExpressionASTNode;\n    readonly right: ExpressionASTNode;\n    readonly associativity: \"left\";\n}\n\ntype t_RelationalBinaryOperators = \"<\" | \">\" | \"<=\" | \">=\" | \"==\" | \"!=\";\n\nfunction lt(left: number, right: number) { return left < right; }\nfunction gt(left: number, right: number) { return left > right; }\nfunction lte(left: number, right: number) { return left <= right; }\nfunction gte(left: number, right: number) { return left >= right; }\nfunction eq(left: number, right: number) { return left == right; }\nfunction ne(left: number, right: number) { return left != right; }\n\nconst RELATIONAL_BINARY_OPERATIONS: { [k in t_RelationalBinaryOperators]: <T extends AtomicType>(left: Value<T>, right: Value<T>) => Value<Bool> }\n    = {\n    \"<\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.compare(right, lt);\n    },\n    \">\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.compare(right, gt);\n    },\n    \"<=\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.compare(right, lte);\n    },\n    \">=\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.compare(right, gte);\n    },\n    \"==\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.compare(right, eq);\n    },\n    \"!=\": function <T extends AtomicType>(left: Value<T>, right: Value<T>) {\n        return left.compare(right, ne);\n    },\n}\n\nexport class RelationalBinaryOperatorExpression extends BinaryOperatorExpression<RelationalBinaryOperatorExpressionASTNode> {\n    public readonly construct_type = \"relational_binary_operator_expression\";\n\n    public readonly type = Bool.BOOL;\n\n    public readonly left: Expression;\n    public readonly right: Expression;\n\n    public readonly operator!: t_RelationalBinaryOperators; // Narrows type from base\n\n    protected constructor(context: ExpressionContext, ast: RelationalBinaryOperatorExpressionASTNode, left: Expression, right: Expression, operator: t_RelationalBinaryOperators) {\n        super(context, ast, operator);\n\n        if (!left.isWellTyped() || !right.isWellTyped()) {\n            this.attach(this.left = left);\n            this.attach(this.right = right);\n            return;\n        }\n\n        // Arithmetic types are required (note: pointer comparisons have their own PointerRelationalOperation class)\n        if (!Predicates.isTypedExpression(left, isArithmeticType) || !Predicates.isTypedExpression(right, isArithmeticType)) {\n            this.addNote(CPPError.expr.binary.arithmetic_operands(this, this.operator, left, right));\n            this.attach(this.left = left);\n            this.attach(this.right = right);\n            return;\n        }\n\n        let [convertedLeft, convertedRight] = usualArithmeticConversions(left, right);\n\n        if (!sameType(convertedLeft.type!, convertedRight.type!)) {\n            this.addNote(CPPError.expr.invalid_binary_operands(this, this.operator, convertedLeft, convertedRight));\n        }\n\n        this.attach(this.left = convertedLeft);\n        this.attach(this.right = convertedRight);\n    }\n\n    public static createFromAST(ast: RelationalBinaryOperatorExpressionASTNode, context: ExpressionContext): RelationalBinaryOperatorExpression | PointerComparisonExpression | OperatorOverloadExpression{\n\n        let left: Expression = createExpressionFromAST(ast.left, context);\n        let right: Expression = createExpressionFromAST(ast.right, context);\n        let op = ast.operator;\n\n        // If either one is a class type, we consider operator overloads\n        if (Predicates.isTypedExpression(left, isPotentiallyCompleteClassType) || Predicates.isTypedExpression(right, isPotentiallyCompleteClassType)) {\n            let overload = selectOperatorOverload(context, ast, op, [left, right]);\n            if (overload) {\n                return overload;\n            }\n        }\n\n        if (Predicates.isTypedExpression(left, isPointerType) || Predicates.isTypedExpression(left, isBoundedArrayType, \"lvalue\")) {\n            if (Predicates.isTypedExpression(right, isPointerType) || Predicates.isTypedExpression(right, isBoundedArrayType, \"lvalue\")) {\n                return new PointerComparisonExpression(context, ast, convertToPRValue(left), convertToPRValue(right), op);\n            }\n            else if (isIntegerLiteralZero(right)) {\n                let convertedLeft = convertToPRValue(left);\n                return new PointerComparisonExpression(context, ast, convertedLeft, new NullPointerConversion(right, convertedLeft.type), op);\n            }\n        }\n        else if (isIntegerLiteralZero(left) && (Predicates.isTypedExpression(right, isPointerType) || Predicates.isTypedExpression(right, isBoundedArrayType, \"lvalue\"))) {\n            let convertedRight = convertToPRValue(right);\n            return new PointerComparisonExpression(context, ast, new NullPointerConversion(left, convertedRight.type), convertedRight, op);\n        }\n\n        return new RelationalBinaryOperatorExpression(context, ast, left, right, ast.operator);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedRelationalBinaryOperatorExpression extends RelationalBinaryOperatorExpression, t_TypedExpression {\n\n\n}\n\nexport interface CompiledRelationalBinaryOperatorExpression<OperandT extends ArithmeticType = ArithmeticType> extends TypedRelationalBinaryOperatorExpression, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly left: CompiledExpression<OperandT, \"prvalue\">;\n    readonly right: CompiledExpression<OperandT, \"prvalue\">;\n}\n\nexport class RuntimeRelationalBinaryOperator<OperandT extends ArithmeticType = ArithmeticType> extends SimpleRuntimeExpression<Bool, \"prvalue\", CompiledRelationalBinaryOperatorExpression<OperandT>> {\n\n    public readonly left: RuntimeExpression<OperandT, \"prvalue\">;\n    public readonly right: RuntimeExpression<OperandT, \"prvalue\">;\n\n    public constructor(model: CompiledRelationalBinaryOperatorExpression<OperandT>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.left = createRuntimeExpression(this.model.left, this);\n        this.right = createRuntimeExpression(this.model.right, this);\n        this.setSubexpressions([this.left, this.right]);\n    }\n\n    public operate() {\n        // Not sure why the cast here is necessary but apparently Typescript needs it\n        this.setEvalResult(RELATIONAL_BINARY_OPERATIONS[this.model.operator](this.left.evalResult, this.right.evalResult));\n    }\n}\n\n\n\nexport class PointerComparisonExpression extends BinaryOperatorExpression<RelationalBinaryOperatorExpressionASTNode> {\n    public readonly construct_type = \"pointer_comparison_expression\";\n\n    public readonly type: Bool;\n    public readonly valueCategory = \"prvalue\";\n\n    public readonly left: TypedExpression<PointerType, \"prvalue\">;\n    public readonly right: TypedExpression<PointerType, \"prvalue\">;\n\n    public readonly operator!: t_RelationalBinaryOperators; // Narrows type from base\n\n    public constructor(context: ExpressionContext, ast: RelationalBinaryOperatorExpressionASTNode | undefined, left: TypedExpression<PointerType, \"prvalue\">,\n        right: TypedExpression<PointerType, \"prvalue\">, operator: t_RelationalBinaryOperators) {\n        super(context, ast, operator);\n\n        this.attach(this.left = left);\n        this.attach(this.right = right);\n\n        this.type = new Bool();\n\n        if (!(similarType(left.type, right.type) || subType(left.type, right.type) || subType(right.type, left.type))) {\n            this.addNote(CPPError.expr.pointer_comparison.same_pointer_type_required(this, left, right));\n        }\n\n        if (left instanceof NullPointerConversion || right instanceof NullPointerConversion) {\n            if (this.operator === \"==\" || this.operator === \"!=\") {\n                if (left instanceof ArrayToPointerConversion || right instanceof ArrayToPointerConversion) {\n                    this.addNote(CPPError.expr.pointer_comparison.null_literal_array_equality(this));\n                }\n            }\n            else { // operator is <, <=, >, or >=\n                this.addNote(CPPError.expr.pointer_comparison.null_literal_comparison(this));\n            }\n        }\n\n    }\n\n    // public createRuntimeExpression(this: CompiledPointerComparisonExpression, parent: RuntimeConstruct) : RuntimePointerComparisonExpression;\n    // public createRuntimeExpression<T extends PointerType, V extends ValueCategory>(this: Compiled<Expression<T,V>>, parent: RuntimeConstruct) : never;\n    // public createRuntimeExpression(this: CompiledPointerComparisonExpression, parent: RuntimeConstruct) : RuntimePointerComparisonExpression {\n    //     return new RuntimePointerComparisonExpression(this, parent);\n    // }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedPointerComparisonExpression extends PointerComparisonExpression, t_TypedExpression {\n\n\n}\n\nexport interface CompiledPointerComparisonExpression<OperandT extends PointerType = PointerType> extends TypedPointerComparisonExpression, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly left: CompiledExpression<OperandT, \"prvalue\">;\n    readonly right: CompiledExpression<OperandT, \"prvalue\">;\n}\n\nexport class RuntimePointerComparisonExpression<OperandT extends PointerType = PointerType> extends SimpleRuntimeExpression<Bool, \"prvalue\", CompiledPointerComparisonExpression<OperandT>> {\n\n    public left: RuntimeExpression<OperandT, \"prvalue\">;\n    public right: RuntimeExpression<OperandT, \"prvalue\">;\n\n    public constructor(model: CompiledPointerComparisonExpression<OperandT>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.left = createRuntimeExpression(this.model.left, this);\n        this.right = createRuntimeExpression(this.model.right, this);\n        this.setSubexpressions([this.left, this.right]);\n    }\n\n    public operate() {\n        let leftResult = this.left.evalResult;\n        let rightResult = this.right.evalResult;\n\n        if (this.model.operator !== \"==\" && this.model.operator !== \"!=\") {\n            if (!leftResult.type.isArrayPointerType() || !rightResult.type.isArrayPointerType() || leftResult.type.arrayObject !== rightResult.type.arrayObject) {\n                this.sim.eventOccurred(SimulationEvent.UNSPECIFIED_BEHAVIOR, \"It looks like you're trying to see which pointer comes before/after in memory, but this only makes sense if both pointers come from the same array. I don't think that's the case here.\", true);\n            }\n        }\n\n        let result = RELATIONAL_BINARY_OPERATIONS[this.model.operator](this.left.evalResult, this.right.evalResult);\n        this.setEvalResult(result);\n\n    }\n}\n\nexport interface LogicalBinaryOperatorExpressionASTNode extends ASTNode {\n    readonly construct_type: \"logical_binary_operator_expression\";\n    readonly operator: t_LogicalBinaryOperators;\n    readonly left: ExpressionASTNode;\n    readonly right: ExpressionASTNode;\n    readonly associativity: \"left\";\n}\n\ntype t_LogicalBinaryOperators = \"&&\" | \"||\";\n\nexport class LogicalBinaryOperatorExpression extends BinaryOperatorExpression<LogicalBinaryOperatorExpressionASTNode> {\n    public readonly construct_type = \"logical_binary_operator_expression\";\n\n    public readonly type = new Bool();\n\n    public readonly left: Expression;\n    public readonly right: Expression;\n\n    public readonly operator!: t_LogicalBinaryOperators; // Narrows type from base\n\n    protected constructor(context: ExpressionContext, ast: LogicalBinaryOperatorExpressionASTNode | undefined, left: Expression, right: Expression, operator: t_LogicalBinaryOperators) {\n        super(context, ast, operator);\n\n        if (left.isWellTyped() && right.isWellTyped()) {\n            this.attach(this.left = this.compileLogicalSubexpression(left));\n            this.attach(this.right = this.compileLogicalSubexpression(right));\n        }\n        else {\n            this.attach(this.left = left);\n            this.attach(this.right = right);\n        }\n    }\n\n    private compileLogicalSubexpression(subexpr: TypedExpression) {\n        subexpr = standardConversion(subexpr, Bool.BOOL);\n        if (!isType(subexpr.type, Bool)) {\n            this.addNote(CPPError.expr.binary.boolean_operand(this, this.operator, subexpr));\n        }\n        return subexpr;\n    }\n\n    public static createFromAST(ast: LogicalBinaryOperatorExpressionASTNode, context: ExpressionContext): LogicalBinaryOperatorExpression | OperatorOverloadExpression {\n        \n        let left = createExpressionFromAST(ast.left, context);\n        let right = createExpressionFromAST(ast.right, context);\n\n        // If either one is a class type, we consider operator overloads\n        if (Predicates.isTypedExpression(left, isPotentiallyCompleteClassType) || Predicates.isTypedExpression(right, isPotentiallyCompleteClassType)) {\n            let overload = selectOperatorOverload(context, ast, ast.operator, [left, right]);\n            if (overload) {\n                return overload;\n            }\n        }\n        \n        return new LogicalBinaryOperatorExpression(context, ast, left, right, ast.operator);\n    }\n\n    // public createRuntimeExpression(this: CompiledLogicalBinaryOperatorExpression, parent: RuntimeConstruct) : RuntimeLogicalBinaryOperatorExpression;\n    // public createRuntimeExpression<T extends AtomicType, V extends ValueCategory>(this: Compiled<Expression<T,V>>, parent: RuntimeConstruct) : never;\n    // public createRuntimeExpression(this: CompiledLogicalBinaryOperatorExpression, parent: RuntimeConstruct) : RuntimeLogicalBinaryOperatorExpression {\n    //     return new RuntimeLogicalBinaryOperatorExpression(this, parent);\n    // }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    // public isTailChild(child: CPPConstruct) {\n    //     if (child === this.left){\n    //         return {isTail: false,\n    //             reason: \"The right operand of the \" + this.operator + \" operator may need to be checked if it does not short circuit.\",\n    //             others: [this.right]\n    //         };\n    //     }\n    //     else{\n    //         return {isTail: true,\n    //             reason: \"Because the \" + this.operator + \" operator short circuits, the right operand is guaranteed to be evaluated last and its result is used directly (no combination with left side needed).\"\n    //         };\n    //     }\n    // }\n}\n\nexport interface TypedLogicalBinaryOperatorExpression extends LogicalBinaryOperatorExpression, t_TypedExpression {\n\n\n}\n\nexport interface CompiledLogicalBinaryOperatorExpression extends TypedLogicalBinaryOperatorExpression, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly left: CompiledExpression<Bool, \"prvalue\">;\n    readonly right: CompiledExpression<Bool, \"prvalue\">;\n}\n\nexport class RuntimeLogicalBinaryOperatorExpression extends RuntimeExpression<Bool, \"prvalue\", CompiledLogicalBinaryOperatorExpression> {\n\n    public left: RuntimeExpression<Bool, \"prvalue\">;\n    public right: RuntimeExpression<Bool, \"prvalue\">;\n\n    private index = \"left\";\n\n    private hasShortCircuited?: boolean;\n\n    public constructor(model: CompiledLogicalBinaryOperatorExpression, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.left = createRuntimeExpression(this.model.left, this);\n        this.right = createRuntimeExpression(this.model.right, this);\n    }\n\n    protected upNextImpl() {\n        if (this.index === \"left\") {\n            this.sim.push(this.left);\n            this.index = \"right\";\n        }\n        else if (this.index === \"right\") {\n            let shortCircuitReslt = this.model.operator === \"&&\" ? 0 : 1;\n            this.hasShortCircuited = this.left.evalResult.rawEquals(shortCircuitReslt);\n\n            if (!this.hasShortCircuited) {\n                // only push right child if we have not short circuited\n                this.sim.push(this.right);\n            }\n            this.index = \"operate\";\n        }\n    }\n\n    protected stepForwardImpl() {\n        if (this.hasShortCircuited) {\n            this.setEvalResult(this.left.evalResult);\n        }\n        else {\n            this.setEvalResult(this.operate(this.left.evalResult, this.right.evalResult));\n        }\n        this.startCleanup();\n    }\n\n    private operate(left: Value<Bool>, right: Value<Bool>) {\n        return left.combine(right, (a: RawValueType, b: RawValueType) => {\n            return this.model.operator == \"&&\" ? a && b : a || b;\n        });\n    }\n}\n\nexport interface PointerToMemberExpressionASTNode extends ASTNode {\n    readonly construct_type: \"pointer_to_member_expression\";\n}\n\nexport interface CStyleCastExpressionASTNode extends ASTNode {\n    readonly construct_type: \"c_style_cast_expression\";\n}\n\nexport type UnaryOperatorExpressionASTNode =\n    PrefixIncrementExpressionASTNode |\n    DereferenceExpressionASTNode |\n    AddressOfExpressionASTNode |\n    UnaryPlusExpressionASTNode |\n    UnaryMinusExpressionASTNode |\n    LogicalNotExpressionASTNode |\n    BitwiseNotExpressionASTNode |\n    SizeofExpressionASTNode |\n    SizeofTypeExpressionASTNode |\n    NewExpressionASTNode |\n    DeleteExpressionASTNode |\n    DeleteArrayExpressionASTNode;\n\nexport interface PrefixIncrementExpressionASTNode extends ASTNode {\n    readonly construct_type: \"prefix_increment_expression\";\n    readonly operator: \"++\" | \"--\";\n    readonly operand: ExpressionASTNode;\n}\n\nexport interface DereferenceExpressionASTNode extends ASTNode {\n    readonly construct_type: \"dereference_expression\";\n    readonly operator: \"*\";\n    readonly operand: ExpressionASTNode;\n}\n\nexport interface AddressOfExpressionASTNode extends ASTNode {\n    readonly construct_type: \"address_of_expression\";\n    readonly operator: \"&\";\n    readonly operand: ExpressionASTNode;\n}\n\nexport interface UnaryPlusExpressionASTNode extends ASTNode {\n    readonly construct_type: \"unary_plus_expression\";\n    readonly operator: \"+\";\n    readonly operand: ExpressionASTNode;\n}\n\nexport interface UnaryMinusExpressionASTNode extends ASTNode {\n    readonly construct_type: \"unary_minus_expression\";\n    readonly operator: \"-\";\n    readonly operand: ExpressionASTNode;\n}\n\nexport interface LogicalNotExpressionASTNode extends ASTNode {\n    readonly construct_type: \"logical_not_expression\";\n    readonly operator: \"!\";\n    readonly operand: ExpressionASTNode;\n}\n\nexport interface BitwiseNotExpressionASTNode extends ASTNode {\n    readonly construct_type: \"bitwise_not_expression\";\n}\n\nexport interface SizeofExpressionASTNode extends ASTNode {\n    readonly construct_type: \"sizeof_expression\";\n}\n\nexport interface SizeofTypeExpressionASTNode extends ASTNode {\n    readonly construct_type: \"sizeof_type_expression\";\n}\n\nexport interface NewExpressionASTNode extends ASTNode {\n    readonly construct_type: \"new_expression\";\n}\n\nexport interface DeleteExpressionASTNode extends ASTNode {\n    readonly construct_type: \"delete_expression\";\n}\n\nexport interface DeleteArrayExpressionASTNode extends ASTNode {\n    readonly construct_type: \"delete_array_expression\";\n}\n\ntype t_UnaryOperators = \"++\" | \"--\" | \"*\" | \"&\" | \"+\" | \"-\" | \"!\" | \"~\" | \"sizeof\" | \"new\" | \"delete\" | \"delete[]\";\n\nabstract class UnaryOperatorExpression<ASTType extends UnaryOperatorExpressionASTNode = UnaryOperatorExpressionASTNode> extends Expression<ASTType> {\n\n    public abstract readonly type?: CompleteObjectType | VoidType; // VoidType is due to delete, delete[]\n\n    public abstract readonly operand: Expression;\n\n    public abstract readonly operator: t_UnaryOperators;\n\n    protected constructor(context: ExpressionContext, ast: ASTType | undefined) {\n        super(context, ast)\n    }\n\n    public createDefaultOutlet(this: CompiledUnaryOperatorExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new UnaryOperatorExpressionOutlet(element, this, parent);\n    }\n\n}\n\nexport type AnalyticUnaryOperatorExpression =\n    DereferenceExpression |\n    AddressOfExpression |\n    UnaryPlusExpression |\n    UnaryMinusExpression |\n    LogicalNotExpression |\n    PrefixIncrementExpression;\n\nexport interface TypedUnaryOperatorExpression<T extends CompleteObjectType | VoidType = CompleteObjectType | VoidType, V extends ValueCategory = ValueCategory> extends UnaryOperatorExpression, t_TypedExpression {\n    readonly type: T;\n    readonly valueCategory: ValueCategory;\n}\n\nexport interface CompiledUnaryOperatorExpression<T extends CompleteObjectType | VoidType = CompleteObjectType | VoidType, V extends ValueCategory = ValueCategory> extends TypedUnaryOperatorExpression<T, V>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly operand: CompiledExpression;\n}\n\n\nexport interface RuntimeUnaryOperatorExpression extends RuntimeExpression<CompleteObjectType | VoidType, ValueCategory, CompiledUnaryOperatorExpression<CompleteObjectType | VoidType>> {\n\n    readonly operand: RuntimeExpression;\n\n}\n\n\n\nexport class PrefixIncrementExpression extends UnaryOperatorExpression<PrefixIncrementExpressionASTNode> {\n    public readonly construct_type = \"prefix_increment_expression\";\n\n    public readonly type?: ArithmeticType | PointerToCompleteType;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly operand: Expression;\n\n    public readonly operator: \"++\" | \"--\";\n\n    public constructor(context: ExpressionContext, ast: PrefixIncrementExpressionASTNode, operand: Expression) {\n        super(context, ast);\n        this.operator = ast.operator;\n\n        this.attach(this.operand = operand);\n\n        if (!operand.isWellTyped()) {\n            return;\n        }\n\n        if (!operand.isLvalue()) {\n            this.addNote(CPPError.expr.prefixIncrement.lvalue_required(this));\n        }\n        else if (this.operator === \"--\" && Predicates.isTypedExpression(operand, isType(Bool))) {\n            this.addNote(CPPError.expr.prefixIncrement.decrement_bool_prohibited(this));\n        }\n        else if (Predicates.isTypedExpression(operand, isArithmeticType) || Predicates.isTypedExpression(operand, isPointerToCompleteType)) {\n            this.type = operand.type;\n            if (operand.type.isConst) {\n                this.addNote(CPPError.expr.prefixIncrement.const_prohibited(this));\n            }\n        }\n        else {\n            this.addNote(CPPError.expr.prefixIncrement.operand(this));\n        }\n    }\n\n    public static createFromAST(ast: PrefixIncrementExpressionASTNode, context: ExpressionContext): PrefixIncrementExpression {\n        return new PrefixIncrementExpression(context, ast, createExpressionFromAST(ast.operand, context));\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedPrefixIncrementExpression<T extends ArithmeticType | PointerToCompleteType = ArithmeticType | PointerToCompleteType> extends PrefixIncrementExpression, t_TypedExpression {\n    readonly type: T;\n    readonly operand: TypedExpression<T, \"lvalue\">;\n}\n\nexport interface CompiledPrefixIncrementExpression<T extends ArithmeticType | PointerToCompleteType = ArithmeticType | PointerToCompleteType> extends TypedPrefixIncrementExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly operand: CompiledExpression<T, \"lvalue\">;\n}\n\nexport class RuntimePrefixIncrementExpression<T extends ArithmeticType | PointerToCompleteType> extends SimpleRuntimeExpression<T, \"lvalue\", CompiledPrefixIncrementExpression<T>> {\n\n    public operand: RuntimeExpression<T, \"lvalue\">;\n\n    public constructor(model: CompiledPrefixIncrementExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n        this.setSubexpressions([this.operand]);\n    }\n\n    protected operate() {\n\n        let obj: CPPObject<ArithmeticType | PointerToCompleteType> = this.operand.evalResult;\n        let prevValue = obj.getValue();\n        // TODO: add alert if value is invalid??\n        // e.g. readValueWithAlert(evalValue, sim, this.from, inst.childInstances.from);\n\n        // Three cases below:\n        //   - Special case. ++ on a boolean just makes it true\n        //   - arithmetic types modify by a delta\n        //   - pointers handled specially\n        let delta = this.model.operator === \"++\" ? 1 : -1;\n        let newValue =\n            prevValue.isTyped(isType(Bool)) ? new Value(1, Bool.BOOL) :\n                prevValue.isTyped(isArithmeticType) ? prevValue.modify(v => v + delta) :\n                    prevValue.pointerOffset(new Value(delta, Int.INT));\n\n        obj.writeValue(newValue);\n        this.setEvalResult(<this[\"evalResult\"]>obj);\n\n        //         if (isA(obj.type, Types.ArrayPointer)){\n        //             // Check that we haven't run off the array\n        //             if (newRawValue < obj.type.min()){\n        //                 if (obj.isValueValid()){ // it was valid but is just now becoming invalid\n        //                     sim.alert(\"Oops. That pointer just wandered off the beginning of its array.\");\n        //                 }\n        //             }\n        //             else if (obj.type.onePast() < newRawValue){\n        //                 if (obj.isValueValid()){ // it was valid but is just now becoming invalid\n        //                     sim.alert(\"Oops. That pointer just wandered off the end of its array.\");\n        //                 }\n        //             }\n        //         }\n        //         else if (isA(obj.type, Types.Pointer)){\n        //             // If the RTTI works well enough, this should always be unsafe\n        //             sim.undefinedBehavior(\"Uh, I don't think you're supposed to do arithmetic with that pointer. It's not pointing into an array.\");\n        //         }\n\n    }\n\n}\n\n\n\n\n\n\nexport class DereferenceExpression extends UnaryOperatorExpression<DereferenceExpressionASTNode> {\n    public readonly construct_type = \"dereference_expression\";\n\n    public readonly type?: CompleteObjectType;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly operand: Expression;\n\n    public readonly operator = \"*\";\n\n    public constructor(context: ExpressionContext, ast: DereferenceExpressionASTNode, operand: Expression) {\n        super(context, ast);\n\n        if (!operand.isWellTyped()) {\n            this.attach(this.operand = operand);\n            return;\n        }\n\n        let convertedOperand = convertToPRValue(operand);\n        this.attach(this.operand = convertedOperand);\n\n        if (!Predicates.isTypedExpression(convertedOperand, isPointerType)) {\n            this.addNote(CPPError.expr.dereference.pointer(this, convertedOperand.type));\n        }\n        else if (!(convertedOperand.type.ptrTo.isCompleteObjectType())) {\n            // Note: function pointers currently not allowed\n            this.addNote(CPPError.expr.dereference.pointerToObjectType(this, convertedOperand.type));\n        }\n        else {\n            this.type = convertedOperand.type.ptrTo;\n        }\n    }\n\n    public static createFromAST(ast: DereferenceExpressionASTNode, context: ExpressionContext): DereferenceExpression {\n        return new DereferenceExpression(context, ast, createExpressionFromAST(ast.operand, context));\n    }\n\n    // public createRuntimeExpression<T extends ObjectType>(this: CompiledDereferenceExpression<T>, parent: RuntimeConstruct) : RuntimeDereferenceExpression<T>;\n    // public createRuntimeExpression<T extends ObjectType, V extends ValueCategory>(this: Compiled<Expression<T,V>>, parent: RuntimeConstruct) : never;\n    // public createRuntimeExpression<T extends ObjectType>(this: CompiledDereferenceExpression<T>, parent: RuntimeConstruct) : RuntimeDereferenceExpression<T> {\n    //     return new RuntimeDereferenceExpression(this, parent);\n    // }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedDereferenceExpression<T extends CompleteObjectType = CompleteObjectType> extends DereferenceExpression, t_TypedExpression {\n    readonly type: T;\n    readonly operand: TypedExpression<PointerType<T>, \"prvalue\">;\n}\n\nexport interface CompiledDereferenceExpression<T extends CompleteObjectType = CompleteObjectType> extends TypedDereferenceExpression<T>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly operand: CompiledExpression<PointerType<T>, \"prvalue\">;\n}\n\nexport class RuntimeDereferenceExpression<T extends CompleteObjectType> extends SimpleRuntimeExpression<T, \"lvalue\", CompiledDereferenceExpression<T>> {\n\n    public operand: RuntimeExpression<PointerType<T>, \"prvalue\">;\n\n    public constructor(model: CompiledDereferenceExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n        this.setSubexpressions([this.operand]);\n    }\n\n    protected operate() {\n\n        // Note: function pointers not supported yet\n\n        let ptr = <Value<PointerType<T>>>this.operand.evalResult;\n        let addr = ptr.rawValue;\n\n        // If it's a null pointer, give message\n        if (PointerType.isNull(addr)) {\n            this.sim.eventOccurred(SimulationEvent.CRASH, \"Ow! Your code just dereferenced a null pointer!\", true);\n        }\n        else if (PointerType.isNegative(addr)) {\n            this.sim.eventOccurred(SimulationEvent.CRASH, \"Uh, wow. The pointer you're trying to dereference has a negative address.\\nThanks a lot.\", true);\n        }\n        else if (ptr.type.isArrayPointerType()) {\n            // If it's an array pointer, make sure it's in bounds and not one-past\n            if (addr < ptr.type.min()) {\n                this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"That pointer has wandered off the beginning of its array. Dereferencing it might cause a segfault, or worse - you might just access/change other memory outside the array.\", true);\n            }\n            else if (ptr.type.onePast() < addr) {\n                this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"That pointer has wandered off the end of its array. Dereferencing it might cause a segfault, or worse - you might just access/change other memory outside the array.\", true);\n            }\n            else if (addr == ptr.type.onePast()) {\n                // TODO: technically this is not undefined behavior unless the result of the dereference undergoes an lvalue-to-rvalue conversion to look up the object\n                this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"That pointer is one past the end of its array. Do you have an off-by-one error?. Dereferencing it might cause a segfault, or worse - you might just access/change other memory outside the array.\", true);\n            }\n        }\n\n        var obj = this.sim.memory.dereference(ptr);\n\n        // Note: dead object is not necessarily invalid. Invalid has to do with the value\n        // while dead/alive has to do with the object itself. Reading from dead object does\n        // yield an invalid value though.\n        // TODO: add this back in\n        // if (!obj.isAlive()){\n        //     DeadObjectMessage.instance(obj, {fromDereference:true}).display(sim, inst);\n        // }\n\n        this.setEvalResult(<this[\"evalResult\"]>obj);\n    }\n\n\n    //     explain : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    //         if (inst && inst.childInstances && inst.childInstances.operand && inst.childInstances.operand.evalResult){\n    //             return {message: \"We will find the object at address \" + inst.childInstances.operand.evalResult.describe().message}\n    //         }\n    //         else{\n    //             return {message: \"The result of \" + this.operand.describeEvalResult(0, sim, inst && inst.childInstances && inst.childInstances.operand).message + \" will be dereferenced. This is, the result is a pointer/address and we will follow the pointer to see what object lives there.\"};\n    //         }\n    //     }\n\n\n    //     describeEvalResult : function(depth, sim, inst){\n    //         if (inst && inst.evalResult){\n    //             return inst.evalResult.describe();\n    //         }\n    //         else if (depth == 0){\n    //             return {message: \"the result of \" + this.getSourceText()};\n    //         }\n    //         else{\n    //             return {message: \"the object at address \" + this.operand.describeEvalResult(depth-1, sim, this.childInstance(sim, inst, \"operand\")).message};\n    //         }\n    //     },\n\n}\n\n\nexport class AddressOfExpression extends UnaryOperatorExpression<AddressOfExpressionASTNode> {\n    public readonly construct_type = \"address_of_expression\";\n\n    public readonly type?: PointerType;\n    public readonly valueCategory = \"prvalue\";\n\n    public readonly operand: Expression;\n\n    public readonly operator = \"&\";\n\n    public constructor(context: ExpressionContext, ast: AddressOfExpressionASTNode, operand: Expression) {\n        super(context, ast);\n\n        this.attach(this.operand = operand);\n\n        if (!operand.isWellTyped()) {\n            return;\n        }\n\n        if (operand.valueCategory !== \"lvalue\") {\n            this.addNote(CPPError.expr.addressOf.lvalue_required(this));\n        }\n\n        if (Predicates.isTypedExpression(operand, isFunctionType)) {\n            this.addNote(CPPError.lobster.unsupported_feature(this, \"Function Pointers\"));\n            return;\n        }\n\n        if (!Predicates.isTypedExpression(operand, isCompleteObjectType)) {\n            this.addNote(CPPError.expr.addressOf.object_type_required(this));\n            return;\n        }\n\n        this.type = new PointerType(operand.type);\n    }\n\n    public static createFromAST(ast: AddressOfExpressionASTNode, context: ExpressionContext): AddressOfExpression {\n        return new AddressOfExpression(context, ast, createExpressionFromAST(ast.operand, context));\n    }\n\n    // public createRuntimeExpression<T extends ObjectType>(this: CompiledAddressOfExpression<T>, parent: RuntimeConstruct) : RuntimeAddressOfExpression<T>;\n    // public createRuntimeExpression<T extends ObjectType, V extends ValueCategory>(this: Compiled<Expression<T,V>>, parent: RuntimeConstruct) : never;\n    // public createRuntimeExpression<T extends ObjectType>(this: CompiledAddressOfExpression<T>, parent: RuntimeConstruct) : RuntimeAddressOfExpression<T> {\n    //     return new RuntimeAddressOfExpression(this, parent);\n    // }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedAddressOfExpression<T extends PointerType = PointerType> extends AddressOfExpression, t_TypedExpression {\n    readonly type: T;\n    readonly operand: TypedExpression<T[\"ptrTo\"]>;\n}\n\nexport interface CompiledAddressOfExpression<T extends PointerType = PointerType> extends TypedAddressOfExpression<T>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly operand: CompiledExpression<T[\"ptrTo\"], \"lvalue\">;\n}\n\nexport class RuntimeAddressOfExpression<T extends PointerType> extends SimpleRuntimeExpression<T, \"prvalue\", CompiledAddressOfExpression<T>> {\n\n    public operand: RuntimeExpression<T[\"ptrTo\"], \"lvalue\">;\n\n    public constructor(model: CompiledAddressOfExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n        this.setSubexpressions([this.operand]);\n    }\n\n    protected operate() {\n        this.setEvalResult(<this[\"evalResult\"]>this.operand.evalResult.getPointerTo());\n    }\n\n}\n\n\n\nexport class UnaryPlusExpression extends UnaryOperatorExpression<UnaryPlusExpressionASTNode> {\n    public readonly construct_type = \"unary_plus_expression\";\n\n    public readonly type?: ArithmeticType | PointerType;\n    public readonly valueCategory = \"prvalue\";\n\n    public readonly operand: Expression;\n\n    public readonly operator = \"+\";\n\n    public constructor(context: ExpressionContext, ast: UnaryPlusExpressionASTNode, operand: Expression) {\n        super(context, ast);\n\n\n        if (!operand.isWellTyped()) {\n            this.attach(this.operand = operand);\n            return;\n        }\n\n        if (Predicates.isTypedExpression(operand, isIntegralType)) {\n            let convertedOperand = integralPromotion(convertToPRValue(operand));\n            this.type = convertedOperand.type;\n            this.attach(this.operand = convertedOperand);\n        }\n        else if (Predicates.isTypedExpression(operand, isArithmeticType)) {\n            let convertedOperand = convertToPRValue(operand);\n            this.type = convertedOperand.type;\n            this.attach(this.operand = convertedOperand);\n        }\n        else if (Predicates.isTypedExpression(operand, isBoundedArrayType, \"lvalue\")) {\n            let convertedOperand = convertToPRValue(operand);\n            this.type = convertedOperand.type;\n            this.attach(this.operand = convertedOperand);\n        }\n        else if (Predicates.isTypedExpression(operand, isPointerType)) {\n            let convertedOperand = convertToPRValue(operand);\n            this.type = convertedOperand.type;\n            this.attach(this.operand = convertedOperand);\n        }\n        else {\n            this.addNote(CPPError.expr.unaryPlus.operand(this));\n            this.attach(this.operand = operand);\n            return;\n        }\n    }\n\n    public static createFromAST(ast: UnaryPlusExpressionASTNode, context: ExpressionContext): UnaryPlusExpression {\n        return new UnaryPlusExpression(context, ast, createExpressionFromAST(ast.operand, context));\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedUnaryPlusExpression<T extends ArithmeticType | PointerType = ArithmeticType | PointerType> extends UnaryPlusExpression, t_TypedExpression {\n    readonly type: T;\n    readonly operand: TypedExpression<T, \"prvalue\">;\n}\n\nexport interface CompiledUnaryPlusExpression<T extends ArithmeticType | PointerType = ArithmeticType | PointerType> extends TypedUnaryPlusExpression<T>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly operand: CompiledExpression<T, \"prvalue\">;\n}\n\nexport class RuntimeUnaryPlusExpression<T extends ArithmeticType | PointerType> extends SimpleRuntimeExpression<T, \"prvalue\", CompiledUnaryPlusExpression<T>> {\n\n    public operand: RuntimeExpression<T, \"prvalue\">;\n\n    public constructor(model: CompiledUnaryPlusExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n        this.setSubexpressions([this.operand]);\n    }\n\n    protected operate() {\n        this.setEvalResult(this.operand.evalResult);\n    }\n\n}\n\n\n\n\n\nexport class UnaryMinusExpression extends UnaryOperatorExpression<UnaryMinusExpressionASTNode> {\n    public readonly construct_type = \"unary_minus_expression\";\n\n    public readonly type?: ArithmeticType;\n    public readonly valueCategory = \"prvalue\";\n\n    public readonly operand: Expression;\n\n    public readonly operator = \"-\";\n\n    public constructor(context: ExpressionContext, ast: UnaryMinusExpressionASTNode, operand: Expression) {\n        super(context, ast);\n\n        if (!operand.isWellTyped()) {\n            this.attach(this.operand = operand);\n            return;\n        }\n\n        if (Predicates.isTypedExpression(operand, isIntegralType)) {\n            let convertedOperand = integralPromotion(convertToPRValue(operand));\n            this.type = convertedOperand.type;\n            this.attach(this.operand = convertedOperand);\n        }\n        else if (Predicates.isTypedExpression(operand, isArithmeticType)) {\n            let convertedOperand = convertToPRValue(operand);\n            this.type = convertedOperand.type;\n            this.attach(this.operand = convertedOperand);\n        }\n        else {\n            this.addNote(CPPError.expr.unaryMinus.operand(this));\n            this.attach(this.operand = operand);\n            return;\n        }\n    }\n\n    public static createFromAST(ast: UnaryMinusExpressionASTNode, context: ExpressionContext): UnaryMinusExpression {\n        return new UnaryMinusExpression(context, ast, createExpressionFromAST(ast.operand, context));\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedUnaryMinusExpression<T extends ArithmeticType = ArithmeticType> extends UnaryMinusExpression, t_TypedExpression {\n    readonly type: T;\n    readonly operand: TypedExpression<T, \"prvalue\">;\n}\n\nexport interface CompiledUnaryMinusExpression<T extends ArithmeticType = ArithmeticType> extends TypedUnaryMinusExpression<T>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly operand: CompiledExpression<T, \"prvalue\">;\n}\n\nexport class RuntimeUnaryMinusExpression<T extends ArithmeticType> extends SimpleRuntimeExpression<T, \"prvalue\", CompiledUnaryMinusExpression<T>> {\n\n    public operand: RuntimeExpression<T, \"prvalue\">;\n\n    public constructor(model: CompiledUnaryMinusExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n        this.setSubexpressions([this.operand]);\n    }\n\n    protected operate() {\n        this.setEvalResult(<this[\"evalResult\"]>this.operand.evalResult.arithmeticNegate());\n    }\n\n}\n\n\n\n\n\n\n\n\nexport class LogicalNotExpression extends UnaryOperatorExpression<LogicalNotExpressionASTNode> {\n    public readonly construct_type = \"logical_not_expression\";\n\n    public readonly type = Bool.BOOL;\n    public readonly valueCategory = \"prvalue\";\n\n    public readonly operand: Expression;\n\n    public readonly operator = \"!\";\n\n    public constructor(context: ExpressionContext, ast: LogicalNotExpressionASTNode, operand: Expression) {\n        super(context, ast);\n\n        if (!operand.isWellTyped()) {\n            this.attach(this.operand = operand);\n            return;\n        }\n\n        let convertedOperand = standardConversion(operand, Bool.BOOL);\n\n        if (!Predicates.isTypedExpression(convertedOperand, isType(Bool))) {\n            this.addNote(CPPError.expr.logicalNot.operand_bool(this, operand));\n            this.attach(this.operand = operand);\n        }\n\n        this.attach(this.operand = convertedOperand);\n    }\n\n    public static createFromAST(ast: LogicalNotExpressionASTNode, context: ExpressionContext): LogicalNotExpression {\n        return new LogicalNotExpression(context, ast, createExpressionFromAST(ast.operand, context));\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedLogicalNotExpression extends LogicalNotExpression, t_TypedExpression {\n    readonly operand: TypedExpression<Bool, \"prvalue\">;\n}\n\nexport interface CompiledLogicalNotExpression extends TypedLogicalNotExpression, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly operand: CompiledExpression<Bool, \"prvalue\">;\n}\n\nexport class RuntimeLogicalNotExpression extends SimpleRuntimeExpression<Bool, \"prvalue\", CompiledLogicalNotExpression> {\n\n    public operand: RuntimeExpression<Bool, \"prvalue\">;\n\n    public constructor(model: CompiledLogicalNotExpression, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n        this.setSubexpressions([this.operand]);\n    }\n\n    protected operate() {\n        this.setEvalResult(this.operand.evalResult.logicalNot());\n    }\n\n}\n\n\n\n\n\n\n// export var LogicalNot = UnaryOp.extend({\n//     _name: \"LogicalNot\",\n//     valueCategory: \"prvalue\",\n//     type: Types.Bool.instance(),\n\n//     convert : function(){\n//         this.operand = standardConversion(this.operand, Types.Bool.instance());\n//     },\n\n//     typeCheck : function(){\n//         // Type check\n//         if (!isA(this.operand.type, Types.Bool)){\n//             this.addNote(CPPError.expr.logicalNot.operand_bool(this, this.operand));\n//         }\n//     },\n\n//     operate: function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         inst.setEvalResult(Value.instance(!inst.childInstances.operand.evalResult.value, this.type));\n//     }\n// });\n\n// export var BitwiseNot = Unsupported.extend({\n//     _name: \"BitwiseNot\",\n//     englishName: \"bitwise not\"\n// });\n\n// export var Prefix = UnaryOp.extend({\n//     _name: \"Prefix\",\n//     valueCategory: \"lvalue\",\n//     typeCheck : function(){\n//         // Type check\n//         if (this.operand.type.isArithmeticType || isA(this.operand.type, Types.Pointer)) {\n//             this.type = this.operand.type;\n\n//             if (this.operator == \"--\" && isA(this.operand.type, Types.Bool)){\n//                 this.addNote(CPPError.expr.invalid_operand(this, this.operator, this.operand));\n//             }\n\n//             else if (this.operand.valueCategory === \"lvalue\") {\n//                 return true;\n//             }\n//             else{\n//                 this.addNote(CPPError.expr.lvalue_operand(this, this.operator));\n//             }\n//         }\n//         else{\n//             this.addNote(CPPError.expr.invalid_operand(this, this.operator, this.operand));\n//         }\n//     },\n//     operate: function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         var obj = inst.childInstances.operand.evalResult;\n//         var amount = (isA(this.type, Types.Pointer) ? this.type.ptrTo.size : 1);\n\n//         var oldValue = readValueWithAlert(obj, sim, this.operand, inst.childInstances.operand);\n//         var newRawValue = this.operator === \"++\" ? oldValue.rawValue() + amount : oldValue.rawValue() - amount;\n\n//         if (isA(obj.type, Types.ArrayPointer)){\n//             // Check that we haven't run off the array\n//             if (newRawValue < obj.type.min()){\n//                 if (obj.isValueValid()){ // it was valid but is just now becoming invalid\n//                     sim.alert(\"Oops. That pointer just wandered off the beginning of its array.\");\n//                 }\n//             }\n//             else if (obj.type.onePast() < newRawValue){\n//                 if (obj.isValueValid()){ // it was valid but is just now becoming invalid\n//                     sim.alert(\"Oops. That pointer just wandered off the end of its array.\");\n//                 }\n//             }\n//         }\n//         else if (isA(obj.type, Types.Pointer)){\n//             // If the RTTI works well enough, this should always be unsafe\n//             sim.undefinedBehavior(\"Uh, I don't think you're supposed to do arithmetic with that pointer. It's not pointing into an array.\");\n//         }\n\n//         obj.writeValue(Value.instance(newRawValue, oldValue.type, {invalid: !oldValue.isValueValid()}));\n//         inst.setEvalResult(obj);\n//     },\n\n//     explain : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         var evdesc = this.operand.describeEvalResult(0, sim, inst && inst.childInstances && inst.childInstances.operand).message;\n//         var incDec = this.operator === \"++\" ? \"incremented\" : \"decremented\";\n//         return {message: \"First, the value of \" + evdesc + \" will be \" + incDec + \" by one. Then this expression as a whole will evaluate to the new value of \" + evdesc + \".\"};\n//     }\n// });\n\n// export var Increment  = Expression.extend({\n//     _name: \"Increment\",\n//     valueCategory: \"prvalue\",\n//     i_childrenToCreate : [\"operand\"],\n//     i_childrenToExecute : [\"operand\"],\n\n//     typeCheck : function(){\n//         // Type check\n//         if (this.operand.type.isArithmeticType || isA(this.operand.type, Types.Pointer)) {\n//             this.type = this.operand.type;\n\n//             if (this.operand.valueCategory === \"lvalue\") {\n//                 return true;\n//             }\n//             else{\n//                 this.addNote(CPPError.expr.lvalue_operand(this, \"++\"));\n//             }\n//         }\n//         else{\n//             this.addNote(CPPError.expr.invalid_operand(this, \"++\", this.operand));\n//         }\n//     },\n\n//     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n\n//         // Evaluate subexpressions\n//         if (inst.index == \"operate\"){\n//             var obj = inst.childInstances.operand.evalResult;\n//             var amount = (isA(this.type, Types.Pointer) ? this.type.ptrTo.size : 1);\n//             var oldValue = readValueWithAlert(obj, sim, this.operand, inst.childInstances.operand);\n//             var newRawValue = oldValue.rawValue() + amount;\n\n\n//             if (isA(obj.type, Types.ArrayPointer)){\n//                 // Check that we haven't run off the array\n//                 if (newRawValue < obj.type.min()){\n//                     //sim.alert(\"Oops. That pointer just wandered off the beginning of its array.\");\n//                 }\n//                 else if (obj.type.onePast() < newRawValue){\n//                     //sim.alert(\"Oops. That pointer just wandered off the end of its array.\");\n//                 }\n//             }\n//             else if (isA(obj.type, Types.Pointer)){\n//                 // If the RTTI works well enough, this should always be unsafe\n//                 sim.undefinedBehavior(\"Uh, I don't think you're supposed to do arithmetic with that pointer. It's not pointing into an array.\");\n//             }\n\n\n//             obj.writeValue(Value.instance(newRawValue, oldValue.type, {invalid: !oldValue.isValueValid()}));\n//             inst.setEvalResult(oldValue);\n//             this.done(sim, inst);\n//         }\n//     }\n// });\n\n// export var Decrement  = Expression.extend({\n//     _name: \"Decrement\",\n//     valueCategory: \"prvalue\",\n//     i_childrenToCreate : [\"operand\"],\n//     i_childrenToExecute : [\"operand\"],\n//     typeCheck : function(){\n//         // Type check\n//         if (this.operand.type.isArithmeticType || isA(this.operand.type, Types.Pointer)) {\n//             this.type = this.operand.type;\n\n//             if (this.operator = \"--\" && isA(this.operand.type, Types.Bool)){\n//                 this.addNote(CPPError.expr.invalid_operand(this, this.operator, this.operand));\n//             }\n//             else if (this.operand.valueCategory === \"lvalue\") {\n//                 return true;\n//             }\n//             else{\n//                 this.addNote(CPPError.expr.lvalue_operand(this, this.operator));\n//             }\n//         }\n//         else{\n//             this.addNote(CPPError.expr.invalid_operand(this, this.operator, this.operand));\n//         }\n//     },\n//     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n\n//         // Evaluate subexpressions\n//         if (inst.index == \"operate\"){\n//             var obj = inst.childInstances.operand.evalResult;\n//             var amount = (isA(this.type, Types.Pointer) ? this.type.ptrTo.size : 1);\n//             var oldValue = readValueWithAlert(obj, sim, this.operand, inst.childInstances.operand);\n//             var newRawValue = oldValue.rawValue() - amount;\n\n//             if (isA(obj.type, Types.ArrayPointer)){\n//                 // Check that we haven't run off the array\n//                 if (newRawValue < obj.type.min()){\n//                     //sim.alert(\"Oops. That pointer just wandered off the beginning of its array.\");\n//                 }\n//                 else if (obj.type.onePast() < newRawValue){\n//                     //sim.alert(\"Oops. That pointer just wandered off the end of its array.\");\n//                 }\n//             }\n//             else if (isA(obj.type, Types.Pointer)){\n//                 // If the RTTI works well enough, this should always be unsafe\n//                 sim.undefinedBehavior(\"Uh, I don't think you're supposed to do arithmetic with that pointer. It's not pointing into an array.\");\n//             }\n\n//             obj.writeValue(Value.instance(newRawValue, oldValue.type, {invalid: !oldValue.isValueValid()}));\n//             inst.setEvalResult(oldValue);\n//             this.done(sim, inst);\n//         }\n//     }\n// });\n\nexport class SubscriptExpression extends Expression<SubscriptExpressionASTNode> {\n    public readonly construct_type = \"subscript_expression\";\n\n    public readonly type?: CompleteObjectType;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly operand: Expression;\n    public readonly offset: Expression;\n\n    public constructor(context: ExpressionContext, ast: SubscriptExpressionASTNode, operand: Expression, offset: Expression) {\n        super(context, ast);\n\n        this.attach(this.operand = operand.isWellTyped() ? convertToPRValue(operand) : operand);\n        this.attach(this.offset = offset.isWellTyped() ? standardConversion(offset, Int.INT) : offset);\n\n        if (this.operand.isWellTyped()) {\n            if (Predicates.isTypedExpression(this.operand, isPointerType)) {\n                if (this.operand.type.isPointerToCompleteType()) {\n                    this.type = this.operand.type.ptrTo;\n                }\n                else {\n                    this.addNote(CPPError.expr.subscript.incomplete_element_type(this, this.operand.type));\n                }\n            }\n            else {\n                this.addNote(CPPError.expr.subscript.invalid_operand_type(this, this.operand.type));\n            }\n        }\n\n        if (this.offset.isWellTyped() && !Predicates.isTypedExpression(this.offset, isType(Int))) {\n            this.addNote(CPPError.expr.subscript.invalid_offset_type(this, this.offset.type));\n        }\n    }\n\n    public static createFromAST(ast: SubscriptExpressionASTNode, context: ExpressionContext): SubscriptExpression | OperatorOverloadExpression {\n\n        let operand = createExpressionFromAST(ast.operand, context)\n        let offset = createExpressionFromAST(ast.offset, context)\n\n        // Consider an assignment operator overload if the LHS is class type\n        if (Predicates.isTypedExpression(operand, isPotentiallyCompleteClassType)) {\n            let overload = selectOperatorOverload(context, ast, \"[]\", [operand, offset]);\n            if (overload) {\n                return overload;\n            }\n        }\n\n        return new SubscriptExpression(context, ast, operand, offset);\n    }\n\n    // public createRuntimeExpression<T extends ObjectType>(this: CompiledSubscriptExpression<T>, parent: RuntimeConstruct) : RuntimeSubscriptExpression<T>;\n    // public createRuntimeExpression<T extends ObjectType, V extends ValueCategory>(this: CompiledExpressionBase<T,V>, parent: RuntimeConstruct) : never;\n    // public createRuntimeExpression<T extends ObjectType>(this: CompiledSubscriptExpression<T>, parent: RuntimeConstruct) : RuntimeSubscriptExpression<T> {\n    //     return new RuntimeSubscriptExpression(this, parent);\n    // }\n\n    public createDefaultOutlet(this: CompiledSubscriptExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new SubscriptExpressionOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    //     isTailChild : function(child){\n    //         return {isTail: false,\n    //             reason: \"The subscripting will happen after the recursive call returns.\",\n    //             others: [this]\n    //         };\n    //     }\n}\n\nexport interface TypedSubscriptExpression<T extends CompleteObjectType = CompleteObjectType> extends SubscriptExpression, t_TypedExpression {\n    readonly type: T;\n\n    readonly operand: TypedExpression<PointerType<T>, \"prvalue\">;\n}\n\nexport interface CompiledSubscriptExpression<T extends CompleteObjectType = CompleteObjectType> extends TypedSubscriptExpression<T>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly operand: CompiledExpression<PointerType<T>, \"prvalue\">;\n    readonly offset: CompiledExpression<Int, \"prvalue\">;\n}\n\nexport class RuntimeSubscriptExpression<T extends CompleteObjectType = CompleteObjectType> extends SimpleRuntimeExpression<T, \"lvalue\", CompiledSubscriptExpression<T>> {\n\n    public operand: RuntimeExpression<PointerType<T>, \"prvalue\">;\n    public offset: RuntimeExpression<Int, \"prvalue\">;\n\n    public constructor(model: CompiledSubscriptExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n        this.offset = createRuntimeExpression(this.model.offset, this);\n        this.setSubexpressions([this.operand, this.offset]);\n    }\n\n    protected operate() {\n\n        let operand = <Value<PointerType<T>>>this.operand.evalResult;\n        let offset = <Value<Int>>this.offset.evalResult;\n        let ptr = operand.pointerOffset(offset);\n        let addr = ptr.rawValue;\n\n        if (PointerType.isNegative(addr)) {\n            this.sim.eventOccurred(SimulationEvent.CRASH, \"Good work. You subscripted so far backwards off the beginning of the array you went to a negative address. -__-\", true);\n        }\n        else if (ptr.type.isArrayPointerType()) {\n            // If it's an array pointer, make sure it's in bounds and not one-past\n            if (addr < ptr.type.min()) {\n                this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"That subscript operation goes off the beginning of the array. This could cause a segfault, or worse - you might just access/change other memory outside the array.\", true);\n            }\n            else if (ptr.type.onePast() < addr) {\n                this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"That subscript operation goes off the end of the array. This could cause a segfault, or worse - you might just access/change other memory outside the array.\", true);\n            }\n            else if (addr == ptr.type.onePast()) {\n                // TODO: technically this is not undefined behavior unless the result of the dereference undergoes an lvalue-to-rvalue conversion to look up the object\n                this.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"That subscript accesses the element one past the end of the array. This could cause a segfault, or worse - you might just access/change other memory outside the array.\", true);\n            }\n\n        }\n\n        var obj = this.sim.memory.dereference(ptr);\n\n        // // Note: dead object is not necessarily invalid. Invalid has to do with the value\n        // // while dead/alive has to do with the object itself. Reading from dead object does\n        // // yield an invalid value though.\n        // // TODO: add this back in\n        // if (!obj.isAlive()){\n        //     DeadObjectMessage.instance(obj, {fromSubscript:true}).display(sim, inst);\n        // }\n\n        this.setEvalResult(<VCResultTypes<T, \"lvalue\">>obj);\n    }\n\n}\n\n\n\nexport class DotExpression extends Expression<DotExpressionASTNode> {\n    public readonly construct_type = \"dot_expression\";\n\n    public readonly type?: PotentiallyCompleteObjectType | FunctionType;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly operand: Expression;\n    public readonly memberName: string;\n\n    public readonly entity?: MemberVariableEntity | FunctionEntity;\n    public readonly functionCallReceiver?: ObjectEntity<CompleteClassType>\n\n    public static createFromAST(ast: DotExpressionASTNode, context: ExpressionContext): DotExpression {\n        let operand: Expression = createExpressionFromAST(ast.operand, context);\n        let receiverContext = operand.type?.isCompleteClassType() ?\n            createExpressionContextWithReceiverType(context, operand.type) :\n            context;\n        return new DotExpression(receiverContext, ast, operand, ast.member.identifier);\n    }\n\n    public constructor(context: ExpressionContext, ast: DotExpressionASTNode, operand: Expression, memberName: string) {\n        super(context, ast);\n\n        this.attach(this.operand = operand);\n        this.memberName = memberName;\n\n        if (!Predicates.isTypedExpression(this.operand, isPotentiallyCompleteClassType)) {\n            this.addNote(CPPError.expr.dot.class_type_only(this));\n            return;\n        }\n\n        if (!Predicates.isTypedExpression(this.operand, isCompleteClassType)) {\n            this.addNote(CPPError.expr.dot.incomplete_class_type_prohibited(this));\n            return;\n        }\n\n        if (this.operand instanceof IdentifierExpression) {\n            this.functionCallReceiver = this.operand.getEntity();\n        }\n\n        let classType = this.operand.type;\n\n        let entityOrError = entityLookup(this, memberName, classType.classScope, { kind: \"normal\", noParent: true });\n        switch (entityOrError) {\n            case \"not_found\":\n                this.addNote(CPPError.expr.dot.no_such_member(this, classType, memberName));\n                break;\n            case \"ambiguous\":\n                this.addNote(CPPError.expr.dot.ambiguous_member(this, memberName));\n                break;\n            case \"class_found\":\n                this.addNote(CPPError.expr.dot.class_entity_found(this, memberName));\n                break;\n            default:\n                if (entityOrError.declarationKind === \"function\") {\n                    this.entity = entityOrError;\n                }\n                else if (entityOrError.variableLocation === \"member\") {\n                    this.entity = entityOrError;\n\n                }\n                else {\n                    assertFalse(\"non-member variable found during member access lookup\");\n                }\n                this.entity = entityOrError;\n        }\n\n        this.type = peelReference(this.entity?.type);\n    }\n\n    public createDefaultOutlet(this: CompiledObjectDotExpression<CompleteObjectType> | CompiledFunctionDotExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new DotExpressionOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    //     isTailChild : function(child){\n    //         return {isTail: false,\n    //             reason: \"The subscripting will happen after the recursive call returns.\",\n    //             others: [this]\n    //         };\n    //     }\n}\n\nexport interface TypedObjectDotExpression<T extends PotentiallyCompleteObjectType = PotentiallyCompleteObjectType> extends DotExpression, t_TypedExpression {\n    readonly type: T;\n    readonly entity: MemberVariableEntity;\n    readonly operand: TypedExpression<CompleteClassType>;\n}\n\nexport interface CompiledObjectDotExpression<T extends PotentiallyCompleteObjectType = PotentiallyCompleteObjectType> extends TypedObjectDotExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly operand: CompiledExpression<CompleteClassType>;\n}\n\nexport interface TypedFunctionDotExpression<T extends FunctionType = FunctionType> extends DotExpression, t_TypedExpression {\n    readonly type: T;\n    readonly entity: FunctionEntity<T>;\n    readonly operand: TypedExpression<CompleteClassType>;\n}\n\nexport interface CompiledFunctionDotExpression<T extends FunctionType = FunctionType> extends TypedFunctionDotExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly operand: CompiledExpression<CompleteClassType>;\n}\n\nexport class RuntimeObjectDotExpression<T extends CompleteObjectType = CompleteObjectType> extends RuntimeExpression<T, \"lvalue\", CompiledObjectDotExpression<T>> {\n\n    readonly operand: RuntimeExpression<CompleteClassType>;\n\n    public constructor(model: CompiledObjectDotExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n    }\n\n    protected upNextImpl() {\n        if (!this.operand.isDone) {\n            this.sim.push(this.operand);\n        }\n        else {\n            this.setEvalResult(<VCResultTypes<T, \"lvalue\">>this.operand.evalResult.getMemberObject(this.model.entity.name)!);\n            this.startCleanup();\n        }\n    }\n\n    protected stepForwardImpl(): void {\n        // do nothing\n    }\n}\n\nexport class RuntimeFunctionDotExpression extends RuntimeExpression<FunctionType, \"lvalue\", CompiledFunctionDotExpression> {\n\n    readonly operand: RuntimeExpression<CompleteClassType>;\n\n    public constructor(model: CompiledFunctionDotExpression, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n    }\n\n    protected upNextImpl() {\n        if (!this.operand.isDone) {\n            this.sim.push(this.operand);\n        }\n        else {\n            this.setEvalResult(this.model.entity);\n            this.startCleanup();\n        }\n    }\n\n    protected stepForwardImpl(): void {\n        // do nothing\n    }\n\n    public get contextualReceiver() {\n        return this.operand.evalResult ?? super.contextualReceiver;\n    }\n}\n\n\n// export var Dot  = Expression.extend({\n//     _name: \"Dot\",\n//     i_runtimeConstructClass : RuntimeMemberAccess,\n//     i_childrenToCreate : [\"operand\"],\n//     i_childrenToExecute : [\"operand\"],\n\n//     i_createFromAST : function(ast, context) {\n//         Dot._parent.i_createFromAST.apply(this, arguments);\n//         this.memberName = ast.member.identifier;\n//     },\n\n//     compile : function(compilationContext) {\n//         this.i_paramTypes = compilationContext && compilationContext.paramTypes;\n//         Expressions.Dot._parent.compile.apply(this, arguments);\n//     },\n\n//     typeCheck : function(){\n//         if (!isA(this.operand.type, Types.Class)) {\n//             this.addNote(CPPError.expr.dot.class_type(this));\n//             return false;\n//         }\n\n//         // Find out what this identifies\n//         try {\n//             this.entity = this.operand.type.classScope.requiredMemberLookup(this.memberName, {paramTypes: this.i_paramTypes, isThisConst:this.operand.type.isConst});\n//             this.type = this.entity.type;\n//         }\n//         catch(e){\n//             if (isA(e, SemanticExceptions.BadLookup)){\n//                 // this.addNote(CPPError.expr.dot.memberLookup(this, this.operand.type, this.memberName));\n//                 // TODO: why is this commented?\n//                 this.addNote(e.annotation(this));\n//             }\n//             else{\n//                 throw e;\n//             }\n//         }\n\n//         if (isA(this.type, Types.Reference)){\n//             this.type = this.type.refTo;\n//             this.valueCategory = \"lvalue\";\n//         }\n//         else if (this.operand.valueCategory === \"lvalue\"){\n//             this.valueCategory = \"lvalue\";\n//         }\n//         else{\n//             this.valueCategory = \"xvalue\";\n//         }\n//     },\n\n//     upNext : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         if (inst.index === \"subexpressions\"){\n//             return Expression.upNext.apply(this, arguments);\n//         }\n//         else{\n//             // entity may be MemberVariableEntity but should never be an AutoEntity\n//             assert(!isA(this.entity, AutoEntity));\n//             inst.setObjectAccessedFrom(inst.childInstances.operand.evalResult);\n//             inst.setEvalResult(this.entity.runtimeLookup(sim, inst));\n//             this.done(sim, inst);\n//             return true;\n//         }\n//     },\n\n//     isTailChild : function(child){\n//         return {isTail: false,\n//             reason: \"The dot operation itself will happen after the recursive call returns.\",\n//             others: [this]\n//         };\n//     }\n// });\n\nexport class ArrowExpression extends Expression<ArrowExpressionASTNode> {\n    public readonly construct_type = \"arrow_expression\";\n\n    public readonly type?: PotentiallyCompleteObjectType | FunctionType;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly operand: Expression;\n    public readonly memberName: string;\n\n    public readonly entity?: MemberVariableEntity | FunctionEntity;\n    public readonly functionCallReceiver?: ObjectEntity<CompleteClassType>\n\n    public static createFromAST(ast: ArrowExpressionASTNode, context: ExpressionContext): ArrowExpression {\n        let operand: Expression = createExpressionFromAST(ast.operand, context);\n        let receiverContext = operand.type?.isPointerType() && operand.type.ptrTo.isCompleteClassType() ?\n            createExpressionContextWithReceiverType(context, operand.type.ptrTo) :\n            context;\n        return new ArrowExpression(receiverContext, ast, operand, ast.member.identifier);\n    }\n\n    public constructor(context: ExpressionContext, ast: ArrowExpressionASTNode, operand: Expression, memberName: string) {\n        super(context, ast);\n\n        this.attach(this.operand = operand);\n        this.memberName = memberName;\n\n        let operandType = this.operand.type;\n\n        if (!(operandType?.isPointerType() && operandType.ptrTo.isPotentiallyCompleteClassType())) {\n            this.addNote(CPPError.expr.arrow.class_pointer_type(this));\n            return;\n        }\n\n        if (!operandType.ptrTo.isCompleteClassType()) {\n            this.addNote(CPPError.expr.arrow.incomplete_class_type_prohibited(this));\n            return;\n        }\n\n        let classType = operandType.ptrTo;\n\n        let entityOrError = entityLookup(this, memberName, classType.classScope, { kind: \"normal\", noParent: true });\n        switch (entityOrError) {\n            case \"not_found\":\n                this.addNote(CPPError.expr.arrow.no_such_member(this, classType, memberName));\n                break;\n            case \"ambiguous\":\n                this.addNote(CPPError.expr.arrow.ambiguous_member(this, memberName));\n                break;\n            case \"class_found\":\n                this.addNote(CPPError.expr.arrow.class_entity_found(this, memberName));\n                break;\n            default:\n                if (entityOrError.declarationKind === \"function\") {\n                    this.entity = entityOrError;\n                }\n                else if (entityOrError.variableLocation === \"member\") {\n                    this.entity = entityOrError;\n\n                }\n                else {\n                    assertFalse(\"non-member variable found during member access lookup\");\n                }\n                this.entity = entityOrError;\n        }\n\n        this.type = peelReference(this.entity?.type);\n    }\n\n    public createDefaultOutlet(this: CompiledObjectArrowExpression<CompleteObjectType> | CompiledFunctionArrowExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new ArrowExpressionOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    //     isTailChild : function(child){\n    //         return {isTail: false,\n    //             reason: \"The subscripting will happen after the recursive call returns.\",\n    //             others: [this]\n    //         };\n    //     }\n}\n\nexport interface TypedObjectArrowExpression<T extends PotentiallyCompleteObjectType = PotentiallyCompleteObjectType> extends ArrowExpression, t_TypedExpression {\n    readonly type: T;\n    readonly entity: MemberVariableEntity;\n    readonly operand: TypedExpression<PointerType<CompleteClassType>>;\n}\n\nexport interface CompiledObjectArrowExpression<T extends PotentiallyCompleteObjectType = PotentiallyCompleteObjectType> extends TypedObjectArrowExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly operand: CompiledExpression<PointerType<CompleteClassType>>;\n}\n\nexport interface TypedFunctionArrowExpression<T extends FunctionType = FunctionType> extends ArrowExpression, t_TypedExpression {\n    readonly type: T;\n    readonly entity: FunctionEntity<T>;\n    readonly operand: TypedExpression<PointerType<CompleteClassType>>;\n}\n\nexport interface CompiledFunctionArrowExpression<T extends FunctionType = FunctionType> extends TypedFunctionArrowExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly operand: CompiledExpression<PointerType<CompleteClassType>>;\n}\n\nexport class RuntimeObjectArrowExpression<T extends CompleteObjectType = CompleteObjectType> extends RuntimeExpression<T, \"lvalue\", CompiledObjectArrowExpression<T>> {\n\n    readonly operand: RuntimeExpression<PointerType<CompleteClassType>>;\n\n    public constructor(model: CompiledObjectArrowExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n    }\n\n    protected upNextImpl() {\n        if (!this.operand.isDone) {\n            this.sim.push(this.operand);\n        }\n    }\n\n    protected stepForwardImpl() {\n\n        let evalResult = this.operand.evalResult;\n        let addr = evalResult instanceof Value ? evalResult : evalResult.getValue();\n\n        if (PointerType.isNull(addr.rawValue)) {\n            this.sim.eventOccurred(SimulationEvent.CRASH, \"Ow! Your code just tried to use the arrow operator on a null pointer!\", true);\n        }\n\n        let obj = this.sim.memory.dereference(addr);\n        this.setEvalResult(<VCResultTypes<T, \"lvalue\">>obj.getMemberObject(this.model.entity.name)!);\n        this.startCleanup();\n    }\n}\n\nexport class RuntimeFunctionArrowExpression extends RuntimeExpression<FunctionType, \"lvalue\", CompiledFunctionArrowExpression> {\n\n    readonly operand: RuntimeExpression<PointerType<CompleteClassType>>;\n\n    private receiverCalledOn?: CPPObject<CompleteClassType>;\n\n    public constructor(model: CompiledFunctionArrowExpression, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n    }\n\n    protected upNextImpl() {\n        if (!this.operand.isDone) {\n            this.sim.push(this.operand);\n        }\n    }\n\n    protected stepForwardImpl() {\n        let evalResult = this.operand.evalResult;\n        let addr = evalResult instanceof Value ? evalResult : evalResult.getValue();\n\n        if (PointerType.isNull(addr.rawValue)) {\n            this.sim.eventOccurred(SimulationEvent.CRASH, \"Ow! Your code just tried to use the arrow operator on a null pointer!\", true);\n        }\n\n        this.receiverCalledOn = this.sim.memory.dereference(addr);\n        this.setEvalResult(this.model.entity);\n        this.startCleanup();\n    }\n\n    public get contextualReceiver() {\n        return this.receiverCalledOn ?? super.contextualReceiver;\n    }\n}\n\n// export var Arrow  = Expression.extend({\n//     _name: \"Arrow\",\n//     i_runtimeConstructClass : RuntimeMemberAccess,\n//     valueCategory: \"lvalue\",\n//     i_childrenToCreate : [\"operand\"],\n//     i_childrenToConvert : {\n//         operand : Types.Pointer.instance()\n//     },\n//     i_childrenToExecute : [\"operand\"],\n\n//     i_createFromAST : function(ast, context) {\n//         Arrow._parent.i_createFromAST.apply(this, arguments);\n//         this.memberName = ast.member.identifier;\n//     },\n\n//     compile : function(compilationContext) {\n//         this.i_paramTypes = compilationContext && compilationContext.paramTypes;\n//         Expressions.Dot._parent.compile.apply(this, arguments);\n//     },\n\n//     typeCheck : function(){\n//         if (!isA(this.operand.type, Types.Pointer) || !isA(this.operand.type.ptrTo, Types.Class)) {\n//             this.addNote(CPPError.expr.arrow.class_pointer_type(this));\n//             return false;\n//         }\n\n//         // Find out what this identifies\n//         try{\n//             this.entity = this.operand.type.ptrTo.classScope.requiredMemberLookup(this.memberName, {paramTypes: this.i_paramTypes, isThisConst:this.operand.type.ptrTo.isConst});\n//             this.type = this.entity.type;\n//         }\n//         catch(e){\n//             if (isA(e, SemanticExceptions.BadLookup)){\n//                 this.addNote(CPPError.expr.arrow.memberLookup(this, this.operand.type.ptrTo, this.memberName));\n//                 // this.addNote(e.annotation(this));\n//             }\n//             else{\n//                 throw e;\n//             }\n//         }\n//     },\n\n//     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n\n//         if (inst.index == \"operate\"){\n//             var addr = inst.childInstances.operand.evalResult;\n//             if (Types.Pointer.isNull(addr.rawValue())){\n//                 sim.crash(\"Ow! Your code just tried to use the arrow operator on a null pointer!\");\n//             }\n//             inst.setObjectAccessedFrom(sim.memory.dereference(addr, this.operand.type.ptrTo));\n//             inst.setEvalResult(this.entity.runtimeLookup(sim, inst));\n\n//             this.done(sim, inst);\n//             return true;\n//         }\n//     },\n\n//     isTailChild : function(child){\n//         return {isTail: false,\n//             reason: \"The arrow operation itself will happen after the recursive call returns.\",\n//             others: [this]\n//         };\n//     }\n// });\n\n\n\n\nexport type PostfixExpressionASTNode =\n    StaticCastExpressionASTNode |\n    DynamicCastExpressionASTNode |\n    ReinterpretCastExpressionASTNode |\n    ConstCastExpressionASTNode |\n    SubscriptExpressionASTNode |\n    FunctionCallExpressionASTNode |\n    DotExpressionASTNode |\n    ArrowExpressionASTNode |\n    PostfixIncrementExpressionASTNode;\n\n\nexport interface StaticCastExpressionASTNode extends ASTNode {\n    readonly construct_type: \"static_cast_expression\";\n}\n\nexport interface DynamicCastExpressionASTNode extends ASTNode {\n    readonly construct_type: \"dynamic_cast_expression\";\n}\n\nexport interface ReinterpretCastExpressionASTNode extends ASTNode {\n    readonly construct_type: \"reinterpret_cast_expression\";\n}\n\nexport interface ConstCastExpressionASTNode extends ASTNode {\n    readonly construct_type: \"const_cast_expression\";\n}\n\nexport interface SubscriptExpressionASTNode extends ASTNode {\n    readonly construct_type: \"subscript_expression\";\n    readonly operand: ExpressionASTNode;\n    readonly offset: ExpressionASTNode;\n}\n\n\n\n\n\nexport interface DotExpressionASTNode extends ASTNode {\n    readonly construct_type: \"dot_expression\";\n    readonly operand: ExpressionASTNode;\n    readonly member: IdentifierExpressionASTNode;\n}\n\nexport interface ArrowExpressionASTNode extends ASTNode {\n    readonly construct_type: \"arrow_expression\";\n    readonly operand: ExpressionASTNode;\n    readonly member: IdentifierExpressionASTNode;\n}\n\nexport interface PostfixIncrementExpressionASTNode extends ASTNode {\n    readonly construct_type: \"postfix_increment_expression\";\n    readonly operand: ExpressionASTNode;\n    readonly operator: \"++\" | \"--\";\n}\n\n\n\n\n\n\nexport class PostfixIncrementExpression extends Expression<PostfixIncrementExpressionASTNode> {\n    public readonly construct_type = \"postfix_increment_expression\";\n\n    public readonly type?: ArithmeticType | PointerToCompleteType;\n    public readonly valueCategory = \"prvalue\";\n\n    public readonly operand: Expression;\n\n    public readonly operator: \"++\" | \"--\";\n\n    public constructor(context: ExpressionContext, ast: PostfixIncrementExpressionASTNode, operand: Expression) {\n        super(context, ast);\n        this.operator = ast.operator;\n\n        this.attach(this.operand = operand);\n\n        if (!operand.isWellTyped()) {\n            return;\n        }\n\n        if (!operand.isLvalue()) {\n            this.addNote(CPPError.expr.postfixIncrement.lvalue_required(this));\n        }\n        else if (this.operator === \"--\" && Predicates.isTypedExpression(operand, isType(Bool))) {\n            this.addNote(CPPError.expr.postfixIncrement.decrement_bool_prohibited(this));\n        }\n        else if (Predicates.isTypedExpression(operand, isArithmeticType) || Predicates.isTypedExpression(operand, isPointerToCompleteType)) {\n\n            // Use cv-unqualified type since result is a prvalue\n            this.type = operand.type.cvUnqualified();\n\n            if (operand.type.isConst) {\n                this.addNote(CPPError.expr.postfixIncrement.const_prohibited(this));\n            }\n        }\n        else {\n            this.addNote(CPPError.expr.postfixIncrement.operand(this));\n        }\n    }\n\n    public static createFromAST(ast: PostfixIncrementExpressionASTNode, context: ExpressionContext): PostfixIncrementExpression {\n        return new PostfixIncrementExpression(context, ast, createExpressionFromAST(ast.operand, context));\n    }\n\n    public createDefaultOutlet(this: CompiledPostfixIncrementExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new PostfixIncrementExpressionOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedPostfixIncrementExpression<T extends ArithmeticType | PointerToCompleteType = ArithmeticType | PointerToCompleteType> extends PostfixIncrementExpression, t_TypedExpression {\n    readonly type: T;\n    readonly operand: TypedExpression<T, \"lvalue\">;\n}\n\nexport interface CompiledPostfixIncrementExpression<T extends ArithmeticType | PointerToCompleteType = ArithmeticType | PointerToCompleteType> extends TypedPostfixIncrementExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly operand: CompiledExpression<T, \"lvalue\">;\n}\n\nexport class RuntimePostfixIncrementExpression<T extends ArithmeticType | PointerToCompleteType = ArithmeticType | PointerToCompleteType> extends SimpleRuntimeExpression<T, \"prvalue\", CompiledPostfixIncrementExpression<T>> {\n\n    public operand: RuntimeExpression<T, \"lvalue\">;\n\n    public constructor(model: CompiledPostfixIncrementExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = createRuntimeExpression(this.model.operand, this);\n        this.setSubexpressions([this.operand]);\n    }\n\n    protected operate() {\n\n        let obj: CPPObject<ArithmeticType | PointerToCompleteType> = this.operand.evalResult;\n        let prevValue = obj.getValue();\n        // TODO: add alert if value is invalid??\n        // e.g. readValueWithAlert(evalValue, sim, this.from, inst.childInstances.from);\n\n        // Three cases below:\n        //   - Special case. ++ on a boolean just makes it true\n        //   - arithmetic types modify by a delta\n        //   - pointers handled specially\n        let delta = this.model.operator === \"++\" ? 1 : -1;\n        let newValue =\n            prevValue.isTyped(isType(Bool)) ? new Value(1, Bool.BOOL) :\n                prevValue.isTyped(isArithmeticType) ? prevValue.modify(v => v + delta) :\n                    prevValue.pointerOffset(new Value(delta, Int.INT));\n\n        this.setEvalResult(<this[\"evalResult\"]>prevValue);\n        obj.writeValue(newValue);\n\n        //         if (isA(obj.type, Types.ArrayPointer)){\n        //             // Check that we haven't run off the array\n        //             if (newRawValue < obj.type.min()){\n        //                 if (obj.isValueValid()){ // it was valid but is just now becoming invalid\n        //                     sim.alert(\"Oops. That pointer just wandered off the beginning of its array.\");\n        //                 }\n        //             }\n        //             else if (obj.type.onePast() < newRawValue){\n        //                 if (obj.isValueValid()){ // it was valid but is just now becoming invalid\n        //                     sim.alert(\"Oops. That pointer just wandered off the end of its array.\");\n        //                 }\n        //             }\n        //         }\n        //         else if (isA(obj.type, Types.Pointer)){\n        //             // If the RTTI works well enough, this should always be unsafe\n        //             sim.undefinedBehavior(\"Uh, I don't think you're supposed to do arithmetic with that pointer. It's not pointing into an array.\");\n        //         }\n\n    }\n\n}\n\n\n\n\n\n// export var NewExpression = Expression.extend({\n//     _name: \"NewExpression\",\n//     valueCategory: \"prvalue\",\n//     initIndex: \"allocate\",\n//     compile : function(){\n\n//         // Compile the type specifier\n//         this.typeSpec = TypeSpecifier.instance(this.ast.specs, {parent:this});\n//         this.typeSpec.compile();\n\n//         this.heapType = this.typeSpec.type;\n\n//         // Compile declarator if it exists\n//         if(this.ast.declarator) {\n//             this.declarator = Declarator.instance(this.ast.declarator, {parent: this});\n//             this.declarator.compile({baseType: this.heapType});\n//             this.heapType = this.declarator.type;\n//         }\n\n//         if (isA(this.heapType, Types.Array)){\n//             // Note: this is Pointer, rather than ArrayPointer, since the latter should only be used in runtime contexts\n//             this.type = Types.Pointer.instance(this.heapType.elemType);\n//             if (this.declarator.dynamicLengthExpression){\n//                 this.dynamicLength = this.i_createAndCompileChildExpr(this.declarator.dynamicLengthExpression, Types.Int.instance());\n//                 this.initIndex = \"length\";\n//             }\n//         }\n//         else {\n//             this.type = Types.Pointer.instance(this.heapType);\n//         }\n\n//         var entity = NewObjectEntity.instance(this.heapType);\n\n//         var initCode = this.ast.initializer || {args: []};\n//         if (isA(this.heapType, Types.Class) || initCode.args.length == 1){\n//             this.initializer = NewDirectInitializer.instance(initCode, {parent: this});\n//             this.initializer.compile(entity);\n//         }\n//         else if (initCode.args.length == 0){\n//             this.initializer = NewDefaultInitializer.instance(initCode, {parent: this});\n//             this.initializer.compile(entity);\n//         }\n//         else{\n//             this.addNote(CPPError.declaration.init.scalar_args(this, this.heapType));\n//         }\n\n//         this.compileTemporarires();\n//     },\n\n\n//     createInstance : function(sim, parent){\n//         var inst = Expression.createInstance.apply(this, arguments);\n//         inst.initializer = this.initializer.createInstance(sim, inst);\n//         return inst;\n//     },\n\n//     upNext : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         if (inst.index === \"length\"){\n//             inst.dynamicLength = this.dynamicLength.createAndPushInstance(sim, inst);\n//             inst.index = \"allocate\";\n//             return true;\n//         }\n//         else if (inst.index === \"init\"){\n//             sim.push(inst.initializer);\n//             inst.index = \"operate\";\n//             return true;\n//         }\n//     },\n\n//     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n\n//         // Dynamic memory - doesn't get added to any scope, but we create on the heap\n\n//         if (inst.index === \"allocate\") {\n//             var heapType = this.heapType;\n\n//             // If it's an array, we need to use the dynamic length\n//             if (this.dynamicLength) {\n//                 var len = inst.dynamicLength.evalResult.rawValue();\n//                 if (len === 0){\n//                     sim.alert(\"Sorry, but I can't allocate a dynamic array of zero length. I know there's technically an old C-style hack that uses zero-length arrays, but hey, I'm just a lobster. I'll go ahead and allocate an array of length 1 instead.\");\n//                     len = 1;\n//                 }\n//                 else if (len < 0){\n//                     sim.undefinedBehavior(\"I can't allocate an array of negative length. That doesn't even make sense. I'll just allocate an array of length 1 instead.\");\n//                     len = 1;\n//                 }\n//                 heapType = Types.Array.instance(this.heapType.elemType, len);\n//             }\n\n//             var obj = DynamicObject.instance(heapType);\n\n//             sim.memory.heap.allocateNewObject(obj);\n//             sim.i_pendingNews.push(obj);\n//             inst.i_allocatedObject = obj;\n//             inst.initializer.setAllocatedObject(obj);\n//             inst.index = \"init\"; // Always use an initializer. If there isn't one, then it will just be default\n//             //if (this.initializer){\n//             //    inst.index = \"init\";\n//             //}\n//             //else{\n//             //    inst.index = \"operate\";\n//             //}\n//             //return true;\n//         }\n//         else if (inst.index === \"operate\") {\n//             if (isA(this.heapType, Types.Array)){\n//                 // RTTI for array pointer\n//                 inst.setEvalResult(Value.instance(inst.i_allocatedObject.address, Types.ArrayPointer.instance(inst.i_allocatedObject)));\n//             }\n//             else{\n//                 // RTTI for object pointer\n//                 inst.setEvalResult(Value.instance(inst.i_allocatedObject.address, Types.ObjectPointer.instance(inst.i_allocatedObject)));\n//             }\n//             sim.i_pendingNews.pop();\n//             this.done(sim, inst);\n//         }\n\n//     },\n//     explain : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         if (this.initializer){\n//             return {message: \"A new object of type \" + this.heapType.describe().name + \" will be created on the heap. \" + this.initializer.explain(sim, inst.initializer).message};\n//         }\n//         else{\n//             return {message: \"A new object of type \" + this.heapType.describe().name + \" will be created on the heap.\"};\n//         }\n//     }\n// });\n\n\n\n\n// export var Delete  = Expression.extend({\n//     _name: \"Delete\",\n//     valueCategory: \"prvalue\",\n//     type: Types.Void.instance(),\n//     i_childrenToCreate : [\"operand\"],\n//     i_childrenToConvert : {\n//         \"operand\" : Types.Pointer.instance()\n//     },\n//     i_childrenToExecute : [\"operand\"],\n\n//     typeCheck : function(){\n\n//         if (isA(this.operand.type.ptrTo, Types.Class)){\n//             var classType = this.operand.type.ptrTo;\n//             var dest = classType.destructor;\n//             //TODO not found and ambiguous\n//             if (isA(dest, FunctionEntity)){\n//                 //this.assnOp = assnOp;\n//                 //this.type = noRef(assnOp.type.returnType);\n//                 // Attempt standard conversion of rhs to match lhs, without lvalue to rvalue\n//                 //this.rhs = this.sub.rhs = standardConversion(this.rhs, this.lhs.type, {suppressLTR:true});\n\n//                 this.funcCall = this.funcCall = FunctionCall.instance({args: []}, {parent:this});\n//                 this.funcCall.compile({func: dest});\n//                 this.type = this.funcCall.type;\n//             }\n//             else{\n//                 this.addNote(CPPError.expr.delete.no_destructor(this, classType));\n//             }\n//         }\n\n//         // Type check\n//         if (!isA(this.operand.type, Types.Pointer)) {\n//             this.addNote(CPPError.expr.delete.pointer(this, this.operand.type));\n//         }\n//         else if (!this.operand.type.ptrTo.isObjectType){\n//             this.addNote(CPPError.expr.delete.pointerToObjectType(this, this.operand.type));\n//         }\n//     },\n//     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n\n//         if (!inst.alreadyDestructed){\n//             var ptr = inst.childInstances.operand.evalResult;\n//             if (Types.Pointer.isNull(ptr.rawValue())){\n//                 this.done(sim, inst);\n//                 return;\n//             }\n\n//             // If it's an array pointer, just grab array object to delete from RTTI.\n//             // Otherwise ask memory what object it's pointing to.\n//             var obj;\n//             if (isA(ptr.type, Types.ArrayPointer)){\n//                 obj = ptr.type.arrObj;\n//             }\n//             else{\n//                 obj = sim.memory.dereference(ptr);\n//             }\n\n//             if (!isA(obj, DynamicObject)) {\n//                 if (isA(obj, AutoObject)) {\n//                     sim.undefinedBehavior(\"Oh no! The pointer you gave to <span class='code'>delete</span> was pointing to something on the stack!\");\n//                 }\n//                 else {\n//                     sim.undefinedBehavior(\"Oh no! The pointer you gave to <span class='code'>delete</span> wasn't pointing to a valid heap object.\");\n//                 }\n//                 this.done(sim, inst);\n//                 return;\n//             }\n\n//             if (isA(obj.type, Types.Array)){\n//                 sim.undefinedBehavior(\"You tried to delete an array object with a <span class='code'>delete</span> expression. Did you forget to use the delete[] syntax?\");\n//                 this.done(sim, inst);\n//                 return;\n//             }\n\n//             //if (!similarType(obj.type, this.operand.type.ptrTo)) {\n//             //    sim.alert(\"The type of the pointer you gave to <span class='code'>delete</span> is different than the type of the object I found on the heap - that's a bad thing!\");\n//             //    this.done(sim, inst);\n//             //    return;\n//             //}\n\n//             if (!obj.isAlive()) {\n//                 DeadObjectMessage.instance(obj, {fromDelete:true}).display(sim, inst);\n//                 this.done(sim, inst);\n//                 return;\n//             }\n\n//             inst.alreadyDestructed = true;\n//             if(this.funcCall){\n//                 // Set obj as receiver for virtual destructor lookup\n//                 var dest = this.funcCall.createAndPushInstance(sim, inst, obj);\n//             }\n//             else{\n//                 return true;\n//             }\n//         }\n//         else{\n//             var deleted = sim.memory.heap.deleteObject(inst.childInstances.operand.evalResult.value, inst);\n//             this.done(sim, inst);\n//         }\n\n//     },\n\n//     isTailChild : function(child){\n//         return {isTail: false,\n//             reason: \"The delete operation will happen after the recursive call returns.\",\n//             others: [this]\n//         };\n//     }\n// });\n\n// //TODO: move to runtimeEnvironment or memory js modules?\n// /**\n//  *\n//  * @param sim\n//  * @param inst\n//  * @param {Value | CPPObject} ptr\n//  * @returns {CPPObject?}\n//  */\n// var deleteHeapArray = function(sim: Simulation, rtConstruct: RuntimeConstruct, ptr) {\n//     if(Types.Pointer.isNull(ptr.rawValue())){\n//         return;\n//     }\n\n//     // If it's an array pointer, just grab array object to delete from RTTI.\n//     // Otherwise ask memory what object it's pointing to.\n//     var obj;\n//     if (isA(ptr.type, Types.ArrayPointer)){\n//         obj = ptr.type.arrObj;\n//         // if the address is not the same, it means we're deleting through an array pointer,\n//         // but not one that is pointing to the beginning of the array. this causes undefined behavior\n//         if (ptr.rawValue() !== obj.address) {\n//             sim.undefinedBehavior(\"It looks like you used <span class='code'>delete[]</span> on a pointer to an array, but it wasn't pointing at the beginning of the array as is required for <span class='code'>delete[]</span>. This causes undefined behavior!\");\n//         }\n//     }\n//     else{\n//         obj = sim.memory.dereference(ptr);\n//     }\n\n//     // Check to make sure we're deleting a valid heap object.\n//     if (!isA(obj, DynamicObject)) {\n//         if (isA(obj, AutoObject)) {\n//             sim.undefinedBehavior(\"Oh no! The pointer you gave to <span class='code'>delete[]</span> was pointing to something on the stack!\");\n//         }\n//         else {\n//             sim.undefinedBehavior(\"Oh no! The pointer you gave to <span class='code'>delete[]</span> wasn't pointing to a valid heap object.\");\n//         }\n//         return;\n//     }\n\n//     if (!isA(obj.type, Types.Array)) {\n//         sim.undefinedBehavior(\"You tried to delete a non-array object with a <span class='code'>delete[]</span> expression. Oops!\");\n//         return;\n//     }\n\n//     //if (!similarType(obj.type.elemType, this.operand.type.ptrTo)) {\n//     //    sim.alert(\"The type of the pointer you gave to <span class='code'>delete</span> is different than the element type of the array object I found on the heap - that's a bad thing!\");\n//     //    this.done(sim, inst);\n//     //    return;\n//     //}\n\n//     if (!obj.isAlive()) {\n//         DeadObjectMessage.instance(obj, {fromDelete:true}).display(sim, inst);\n//         return;\n//     }\n\n//     return sim.memory.heap.deleteObject(ptr.rawValue(), inst);\n// };\n\n// // TODO: liskov suggests this shouldn't be a subtype. Use has-a instead?\n// export var DeleteArray = Delete.extend({\n//     _name: \"DeleteArray\",\n\n//     stepForward: function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         var ptr = inst.childInstances.operand.evalResult;\n//         deleteHeapArray(sim, inst, ptr);\n//         this.done(sim, inst);\n//     },\n\n//     isTailChild : function(child){\n//         return {isTail: false,\n//             reason: \"The delete[] operation will happen after the recursive call returns.\",\n//             others: [this]\n//         };\n//     }\n// });\n\n\nexport interface ConstructExpressionASTNode extends ASTNode {\n    readonly construct_type: \"construct_expression\";\n}\n\n// // TODO: This appears to work but I'm pretty sure I copy/pasted from NewExpression and never finished changing it.\n// export var ConstructExpression = Expression.extend({\n//     _name: \"ConstructExpression\",\n//     valueCategory: \"prvalue\",\n//     initIndex: \"init\",\n//     compile : function(){\n\n//         // Compile the type specifier\n//         this.typeSpec = TypeSpecifier.instance([this.ast.type], {parent:this});\n//         this.typeSpec.compile();\n\n//         this.type = this.typeSpec.type;\n\n//         // Compile declarator if it exists\n//         if(this.ast.declarator) {\n//             this.declarator = Declarator.instance(this.ast.declarator, {parent: this});\n//             this.declarator.compile({baseType: this.heapType});\n//             this.heapType = this.declarator.type;\n//         }\n\n//         this.entity = this.createTemporaryObject(this.type, \"[temp \" + this.type + \"]\");\n\n//         if (isA(this.type, Types.Class) || this.ast.args.length == 1){\n//             this.initializer = DirectInitializer.instance(this.ast, {parent: this});\n//             this.initializer.compile(this.entity);\n//         }\n//         else{\n//             this.addNote(CPPError.declaration.init.scalar_args(this, this.type));\n//         }\n\n//         this.compileTemporarires();\n//     },\n\n//     createInstance : function(sim, parent){\n//         var inst = Expression.createInstance.apply(this, arguments);\n//         inst.tempObject = this.entity.objectInstance(inst);\n//         return inst;\n//     },\n\n//     upNext : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         if (inst.index === \"init\"){\n//             var initInst = this.initializer.createAndPushInstance(sim, inst);\n//             inst.index = \"done\";\n//             return true;\n//         }\n//         else{\n//             if (isA(this.type, Types.class)){\n//                 inst.setEvalResult(inst.tempObject);\n//             }\n//             else{\n//                 inst.setEvalResult(inst.tempObject.readValue());\n//             }\n//             this.done(sim, inst);\n//         }\n//     }\n\n\n// });\n\n\n\n// function identifierToText(unqualifiedId: string) : string;\n// function identifierToText(qualId: readonly {identifier: string}[]) : string;\n//     function identifierToText(qualId: string | readonly {identifier: string}[]) : string {\n//     if (typeof qualId === \"string\") {\n//         return qualId; // If it's an unqualified id\n//     }\n//     else {\n//         return qualId.reduce(function(str,id,i){\n//             return str + (i > 0 ? \"::\" : \"\") + id.identifier;\n//         },\"\");\n//     }\n// };\n\n// function qualifiedNameString(names) {\n//     if (!Array.isArray(names)){\n//         return names;\n//     }\n//     return names.map(function(id){return id.identifier}).join(\"::\")\n// }\n\nexport interface IdentifierExpressionASTNode extends ASTNode {\n    readonly construct_type: \"identifier_expression\";\n    readonly identifier: string;\n}\n\n// TODO: maybe Identifier should be a non-executable construct and then have a \n// TODO: make separate classes for qualified and unqualified IDs?\nexport class IdentifierExpression extends Expression<IdentifierExpressionASTNode> {\n    public readonly construct_type = \"identifier_expression\";\n\n    public readonly type?: PotentiallyCompleteObjectType | FunctionType;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly name: string;\n\n    public readonly entity?: ObjectEntity | BoundReferenceEntity | FunctionEntity;\n\n    // i_createFromAST: function(ast, context){\n\n    //     Identifier._parent.i_createFromAST.apply(this, arguments);\n    //     this.identifier = this.ast.identifier;\n    //     this.identifierText = qualifiedNameString(this.identifier);\n    // },\n\n    public constructor(context: ExpressionContext, ast: IdentifierExpressionASTNode | undefined, name: string) {\n        super(context, ast);\n        this.name = name;\n\n        checkIdentifier(this, name, this);\n\n        let entityOrError = entityLookup(this, this.name, this.context.contextualScope);\n        switch (entityOrError) {\n            case \"not_found\":\n                this.addNote(CPPError.iden.not_found(this, this.name));\n                break;\n            case \"ambiguous\":\n                this.addNote(CPPError.iden.ambiguous(this, this.name));\n                break;\n            case \"class_found\":\n                this.addNote(CPPError.iden.class_entity_found(this, this.name));\n                break;\n            default:\n                this.entity = entityOrError;\n        }\n\n        this.type = peelReference(this.entity?.type);\n    }\n\n    public static createFromAST(ast: IdentifierExpressionASTNode, context: ExpressionContext) {\n        return new IdentifierExpression(context, ast, ast.identifier);\n    }\n\n\n    public getEntity<T extends CompleteObjectType>(this: TypedExpression<T>): ObjectEntity<T>;\n    public getEntity<T extends FunctionType>(this: TypedExpression<T>): FunctionEntity<T>;\n    public getEntity() {\n        return this.entity;\n    }\n\n    public createDefaultOutlet(this: CompiledObjectIdentifierExpression<CompleteObjectType> | CompiledFunctionIdentifierExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new IdentifierOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    // describeEvalResult : function(depth, sim, inst){\n    //     if (inst && inst.evalResult){\n    //         return inst.evalResult.describe();\n    //     }\n    //     // Note don't care about depth since we always just use identifier\n    //     else{\n    //         return this.entity.describe(sim, inst);\n    //     }\n    // },\n\n    // explain : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n    //     return {message: this.entity.name};\n    // }\n}\n\ntype EntityLookupError = \"not_found\" | \"ambiguous\" | \"class_found\";\n\n/**\n * Used as a helper for IdentifierExpression, DotExpression, and ArrowExpression, and overloaded operators\n * @param scope \n * @param name \n * @param expression \n */\nexport function entityLookup(expression: Expression, name: string, scope: Scope, options: NameLookupOptions = { kind: \"normal\" }): VariableEntity | FunctionEntity | EntityLookupError {\n    let lookupResult = scope.lookup(name, options);\n\n    if (!lookupResult) {\n        return \"not_found\";\n    }\n    else if (lookupResult.declarationKind === \"variable\") {\n        return lookupResult;\n    }\n    else if (lookupResult.declarationKind === \"function\") {\n        if (lookupResult.overloads.length === 1) {\n            // Only one function with that name found, so we just grab it.\n            // Any errors will be detected later e.g. when a function call is attempted.\n            return lookupResult.overloads[0];\n        }\n        else {\n            // Need to perform overload resolution to select the appropriate function\n            // from the function overload group. This depends on contextual parameter types.\n            if (expression.context.contextualParameterTypes) {\n                let overloadResult = overloadResolution(lookupResult.overloads, expression.context.contextualParameterTypes, expression.context.contextualReceiverType);\n\n                if (overloadResult.selected) {\n                    // If a best result has been selected, use that\n                    return overloadResult.selected;\n                }\n                else {\n                    // Otherwise, use the best candidate (it is sorted to the front of the candidates in the result)\n                    // The errors that made it non-viable will be picked up later e.g. when a function call is attempted.\n                    return overloadResult.candidates[0].candidate;\n                }\n            }\n            else {\n                return \"ambiguous\";\n            }\n        }\n    }\n    else if (lookupResult.declarationKind === \"class\") {\n        return \"class_found\";\n    }\n    else {\n        assertNever(lookupResult);\n    }\n}\n\nexport interface TypedObjectIdentifierExpression<T extends PotentiallyCompleteObjectType = PotentiallyCompleteObjectType> extends IdentifierExpression, t_TypedExpression {\n    readonly type: T;\n    readonly entity: ObjectEntity<Extract<T, CompleteObjectType>> | BoundReferenceEntity<ReferenceType<T>>;\n}\n\nexport interface CompiledObjectIdentifierExpression<T extends PotentiallyCompleteObjectType = PotentiallyCompleteObjectType> extends TypedObjectIdentifierExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n}\n\nexport interface TypedFunctionIdentifierExpression<T extends FunctionType = FunctionType> extends IdentifierExpression, t_TypedExpression {\n    readonly type: T;\n    readonly entity: FunctionEntity<T>;\n}\n\nexport interface CompiledFunctionIdentifierExpression<T extends FunctionType = FunctionType> extends TypedFunctionIdentifierExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n}\n\nexport class RuntimeObjectIdentifierExpression<T extends CompleteObjectType = CompleteObjectType> extends RuntimeExpression<T, \"lvalue\", CompiledObjectIdentifierExpression<T>> {\n\n    public constructor(model: CompiledObjectIdentifierExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n\n    protected upNextImpl() {\n        this.setEvalResult(<VCResultTypes<T, \"lvalue\">>runtimeObjectLookup(this.model.entity, this));\n        this.startCleanup();\n    }\n\n    protected stepForwardImpl(): void {\n        // do nothing\n    }\n}\n\nexport class RuntimeFunctionIdentifierExpression extends RuntimeExpression<FunctionType, \"lvalue\", CompiledFunctionIdentifierExpression> {\n\n    public constructor(model: CompiledFunctionIdentifierExpression, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n\n    protected upNextImpl() {\n        this.setEvalResult(this.model.entity);\n        this.startCleanup();\n    }\n\n    protected stepForwardImpl(): void {\n        // do nothing\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport interface ThisExpressionASTNode extends ASTNode {\n    readonly construct_type: \"this_expression\";\n}\n\n// export var ThisExpression  = Expression.extend({\n//     _name: \"ThisExpression\",\n//     valueCategory: \"prvalue\",\n//     compile : function(){\n//         var func = this.containingFunction();\n//         if (func.isMemberFunction){\n//             this.type = Types.Pointer.instance(func.receiverType);\n//         }\n//         else{\n//             this.addNote(CPPError.expr.thisExpr.memberFunc(this));\n//         }\n//     },\n//     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         // Set this pointer with RTTI to point to receiver\n//         let receiver = inst.containingRuntimeFunction.receiver;\n//         inst.setEvalResult(Value.instance(receiver.address, Types.ObjectPointer.instance(receiver)));\n//         this.done(sim, inst);\n//     }\n// });\n\n// export var EntityExpression  = Expression.extend({\n//     _name: \"EntityExpression\",\n//     valueCategory: \"lvalue\",\n//     init : function(entity, ast, context){\n//         this.initParent(ast, context);\n//         this.entity = entity;\n//         this.type = this.entity.type;\n//     },\n//     compile : function(){\n\n//     },\n//     upNext : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         inst.setEvalResult(this.entity.runtimeLookup(sim, inst));\n//         this.done(sim, inst);\n//     }\n// });\n\n\n\n\n\nfunction parseCPPChar(litValue: string) {\n    return escapeString(litValue).charCodeAt(0);\n};\n\nconst literalJSParse = {\n    \"int\": parseInt,\n    \"float\": parseFloat,\n    \"double\": parseFloat,\n    \"bool\": (b: boolean) => (b ? 1 : 0),\n    \"char\": parseCPPChar\n};\n\nconst literalTypes = {\n    \"int\": Int.INT,\n    \"float\": Double.DOUBLE,\n    \"double\": Double.DOUBLE,\n    \"bool\": Bool.BOOL,\n    \"char\": Char.CHAR\n};\n\nexport function parseNumericLiteralValueFromAST(ast: NumericLiteralASTNode) {\n    return literalJSParse[ast.type](<any>ast.value);\n}\n\nexport type NumericLiteralASTNode = FloatLiteralASTNode | IntLiteralASTNode | CharLiteralASTNode | BoolLiteralASTNode;\n\nexport interface FloatLiteralASTNode extends ASTNode {\n    readonly construct_type: \"numeric_literal_expression\";\n    readonly type: \"float\";\n    readonly value: number;\n}\n\nexport interface IntLiteralASTNode extends ASTNode {\n    readonly construct_type: \"numeric_literal_expression\";\n    readonly type: \"int\";\n    readonly value: number;\n}\n\nexport interface CharLiteralASTNode extends ASTNode {\n    readonly construct_type: \"numeric_literal_expression\";\n    readonly type: \"char\";\n    readonly value: string;\n}\n\nexport interface BoolLiteralASTNode extends ASTNode {\n    readonly construct_type: \"numeric_literal_expression\";\n    readonly type: \"char\";\n    readonly value: boolean;\n}\n\nexport class NumericLiteralExpression extends Expression<NumericLiteralASTNode> {\n    public readonly construct_type = \"numeric_literal_expression\";\n\n    public readonly type: ArithmeticType;\n    public readonly valueCategory = \"prvalue\";\n\n    public readonly value: Value<ArithmeticType>;\n\n    // create from ast code:\n    // TODO: are there some literal types without conversion functions? There shouldn't be...\n\n    // var conv = literalJSParse[this.ast.type];\n    // var val = (conv ? conv(this.ast.value) : this.ast.value);\n\n    public constructor(context: ExpressionContext, ast: NumericLiteralASTNode | undefined, type: ArithmeticType, value: RawValueType) {\n        super(context, ast);\n\n        this.type = type;\n\n        this.value = new Value(value, this.type);\n    }\n\n    public static createFromAST(ast: NumericLiteralASTNode, context: ExpressionContext) {\n        return new NumericLiteralExpression(context, ast, literalTypes[ast.type], parseNumericLiteralValueFromAST(ast));\n    }\n\n    // public createRuntimeExpression<T extends ArithmeticType>(this: CompiledNumericLiteralExpression<T>, parent: RuntimeConstruct) : RuntimeNumericLiteral<T>;\n    // public createRuntimeExpression<T extends AtomicType, V extends ValueCategory>(this: Compiled<Expression<T,V>>, parent: RuntimeConstruct) : never;\n    // public createRuntimeExpression<T extends ArithmeticType>(this: CompiledNumericLiteralExpression<T>, parent: RuntimeConstruct) : RuntimeNumericLiteral<T> {\n    //     return new RuntimeNumericLiteral(this, parent);\n    // }\n\n    public createDefaultOutlet(this: CompiledNumericLiteralExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new NumericLiteralOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public isIntegerZero() {\n        return\n    }\n\n    // describeEvalResult : function(depth, sim, inst){\n    //     var str = this.value.toString();\n    //     return {name: str, message: str};\n    // }\n\n    //\tstepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    //\t\tthis.done(sim, inst);\n    //\t\treturn true;\n    //\t}\n}\n\nexport interface TypedNumericLiteralExpression<T extends ArithmeticType = ArithmeticType> extends NumericLiteralExpression, t_TypedExpression {\n    readonly type: T;\n\n}\n\nexport interface CompiledNumericLiteralExpression<T extends ArithmeticType = ArithmeticType> extends TypedNumericLiteralExpression<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n}\n\nexport class RuntimeNumericLiteral<T extends ArithmeticType = ArithmeticType> extends RuntimeExpression<T, \"prvalue\", CompiledNumericLiteralExpression<T>> {\n\n    public constructor(model: CompiledNumericLiteralExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n\n    protected upNextImpl() {\n        this.setEvalResult(<VCResultTypes<T, \"prvalue\">>this.model.value);\n        this.startCleanup();\n    }\n\n    protected stepForwardImpl() {\n        // Do nothing\n    }\n}\n\n\nexport interface StringLiteralASTNode extends ASTNode {\n    readonly construct_type: \"string_literal_expression\";\n    readonly value: string;\n}\n\nexport class StringLiteralExpression extends Expression<StringLiteralASTNode> {\n    public readonly construct_type = \"string_literal_expression\";\n\n    public readonly type: BoundedArrayType<Char>;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly str: string;\n    // create from ast code:\n    // TODO: are there some literal types without conversion functions? There shouldn't be...\n\n    // var conv = literalJSParse[this.ast.type];\n    // var val = (conv ? conv(this.ast.value) : this.ast.value);\n\n    public constructor(context: ExpressionContext, ast: StringLiteralASTNode | undefined, str: string) {\n        super(context, ast);\n        this.str = str;\n\n        // type is const char\n        this.type = new BoundedArrayType(new Char(true), str.length + 1);\n\n        this.context.translationUnit.registerStringLiteral(this);\n    }\n\n    public isStringLiteralExpression() {\n        return true;\n    }\n\n    public static createFromAST(ast: StringLiteralASTNode, context: ExpressionContext) {\n        return new StringLiteralExpression(context, ast, ast.value);\n    }\n\n    // public createRuntimeExpression(this: CompiledStringLiteralExpression, parent: RuntimeConstruct) : RuntimeStringLiteralExpression;\n    // public createRuntimeExpression<T extends AtomicType, V extends ValueCategory>(this: Compiled<Expression<T,V>>, parent: RuntimeConstruct) : never;\n    // public createRuntimeExpression(this: CompiledStringLiteralExpression, parent: RuntimeConstruct) : RuntimeStringLiteralExpression {\n    //     return new RuntimeStringLiteralExpression(this, parent);\n    // }\n\n    public createDefaultOutlet(this: CompiledStringLiteralExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new StringLiteralExpressionOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedStringLiteralExpression extends StringLiteralExpression, t_TypedExpression {\n\n\n}\n\nexport interface CompiledStringLiteralExpression extends TypedStringLiteralExpression, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n}\n\nexport class RuntimeStringLiteralExpression extends RuntimeExpression<BoundedArrayType<Char>, \"lvalue\", CompiledStringLiteralExpression> {\n\n    public constructor(model: CompiledStringLiteralExpression, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n\n    protected upNextImpl() {\n        this.setEvalResult(this.sim.memory.getStringLiteral(this.model.str)!);\n        this.startCleanup();\n    }\n\n    protected stepForwardImpl() {\n        // Do nothing\n    }\n}\n\n\n\nexport interface ParenthesesExpressionASTNode extends ASTNode {\n    readonly construct_type: \"parentheses_expression\";\n    readonly subexpression: ExpressionASTNode;\n}\n\nexport class ParenthesesExpression extends Expression<ParenthesesExpressionASTNode> {\n    public readonly construct_type = \"parentheses_expression\";\n\n    public readonly type?: ExpressionType;\n    public readonly valueCategory?: ValueCategory;\n\n    public readonly subexpression: Expression;\n\n    public constructor(context: ExpressionContext, ast: ParenthesesExpressionASTNode | undefined, subexpression: Expression) {\n        super(context, ast);\n\n        this.attach(this.subexpression = subexpression);\n        this.type = subexpression.type;\n        this.valueCategory = subexpression.valueCategory;\n\n    }\n\n    public static createFromAST(ast: ParenthesesExpressionASTNode, context: ExpressionContext): ParenthesesExpression {\n        return new ParenthesesExpression(context, ast, createExpressionFromAST(ast.subexpression, context));\n    }\n\n    public createDefaultOutlet(this: CompiledParenthesesExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new ParenthesesOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    // isTailChild : function(child){\n    //     return {isTail: true};\n    // }\n}\n\nexport interface TypedParenthesesExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends ParenthesesExpression, t_TypedExpression {\n    readonly type: T;\n    readonly valueCategory: V;\n\n    readonly subexpression: TypedExpression<T, V>;\n}\n\nexport interface CompiledParenthesesExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends TypedParenthesesExpression<T, V>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly subexpression: CompiledExpression<T, V>;\n}\n\nconst INDEX_PARENTHESES_SUBEXPRESSIONS = 0;\nconst INDEX_PARENTHESES_DONE = 1;\nexport class RuntimeParentheses<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends RuntimeExpression<T, V, CompiledParenthesesExpression<T, V>> {\n\n    public subexpression: RuntimeExpression<T, V>;\n\n    private index: typeof INDEX_PARENTHESES_SUBEXPRESSIONS | typeof INDEX_PARENTHESES_DONE = INDEX_PARENTHESES_SUBEXPRESSIONS;\n\n    public constructor(model: CompiledParenthesesExpression<T, V>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.subexpression = createRuntimeExpression(this.model.subexpression, this);\n    }\n\n    protected upNextImpl() {\n        if (this.index === INDEX_PARENTHESES_SUBEXPRESSIONS) {\n            this.sim.push(this.subexpression);\n            this.index = INDEX_PARENTHESES_DONE;\n        }\n        else {\n            this.setEvalResult(this.subexpression.evalResult);\n            this.startCleanup();\n        }\n    }\n\n    protected stepForwardImpl() {\n        // Do nothing\n    }\n}\n\n\nexport interface InitializerListExpressionASTNode extends ASTNode {\n    readonly construct_type: \"initializer_list_expression\";\n    readonly elements: ExpressionASTNode[];\n}\n\n\nexport class InitializerListExpression extends Expression<InitializerListExpressionASTNode> {\n    public readonly construct_type = \"initializer_list_expression\";\n\n    public readonly type?: CompleteClassType;\n    public readonly valueCategory = \"lvalue\";\n\n    public readonly elements: readonly Expression[];\n    public readonly elementType?: ArithmeticType;\n\n    public readonly initializerList?: TemporaryObjectEntity<CompleteClassType>;\n    public readonly elementsArray?: TemporaryObjectEntity<BoundedArrayType<ArithmeticType>>;\n\n    public constructor(context: ExpressionContext, ast: InitializerListExpressionASTNode | undefined, elements: readonly Expression[]) {\n        super(context, ast);\n\n        if (elements.length === 0) {\n            this.addNote(CPPError.declaration.init.list_empty(this));\n            this.attachAll(this.elements = elements);\n            return;\n        }\n\n        // If any arguments are not well typed, we can't select a constructor\n        if (!allWellTyped(elements)) {\n            this.attachAll(this.elements = elements);\n            return;\n        }\n\n        let eltType = elements[0].type;\n        if (!elements.every(arg => arg.type.sameType(eltType))) {\n            this.addNote(CPPError.declaration.init.list_same_type(this));\n            this.attachAll(this.elements = elements);\n            return;\n        }\n\n        if (!eltType.isArithmeticType()) {\n            this.addNote(CPPError.declaration.init.list_arithmetic_type(this));\n            this.attachAll(this.elements = elements);\n            return;\n        }\n\n        let typeEntity = context.contextualScope.lookup(`initializer_list<${eltType.simpleType}>`);\n        assert(typeEntity?.declarationKind === \"class\");\n        assert(typeEntity.isComplete());\n        this.type = typeEntity.type.cvUnqualified();\n\n        this.initializerList = this.createTemporaryObject(this.type, \"[initializer list]\");\n        this.elementsArray = this.createTemporaryObject(new BoundedArrayType(eltType.cvQualified(true), elements.length), \"[initializer list array]\");\n\n\n        this.attachAll(this.elements = elements);\n\n    }\n\n    public static createFromAST(ast: InitializerListExpressionASTNode, context: ExpressionContext): InitializerListExpression {\n        return new InitializerListExpression(context, ast, ast.elements.map(eltAST => createExpressionFromAST(eltAST, context)));\n    }\n\n    public createDefaultOutlet(this: CompiledInitializerListExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new InitializerListExpressionOutlet(element, this, parent);\n    }\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    // isTailChild : function(child){\n    //     return {isTail: true};\n    // }\n}\n\nexport interface TypedInitializerListExpression<T extends CompleteClassType = CompleteClassType> extends InitializerListExpression, t_TypedExpression {\n    readonly type: T;\n\n    readonly elements: readonly TypedExpression[];\n    readonly elementType: ArithmeticType;\n    readonly initializerList: TemporaryObjectEntity<CompleteClassType>;\n    readonly elementsArray: TemporaryObjectEntity<BoundedArrayType<ArithmeticType>>;\n}\n\nexport interface CompiledInitializerListExpression<T extends CompleteClassType = CompleteClassType> extends TypedInitializerListExpression<T>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly elements: readonly CompiledExpression[];\n}\n\nexport class RuntimeInitializerListExpression<T extends CompleteClassType = CompleteClassType> extends RuntimeExpression<T, \"lvalue\", CompiledInitializerListExpression<T>> {\n\n    public elements: readonly RuntimeExpression[];\n    readonly initializerList?: TemporaryObject<CompleteClassType>;\n    readonly elementsArray?: TemporaryObject<BoundedArrayType<ArithmeticType>>;\n\n    private elementIndex: number = 0;\n\n    public constructor(model: CompiledInitializerListExpression<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.elements = this.model.elements.map(element => createRuntimeExpression(element, this));\n    }\n\n    protected upNextImpl() {\n        if (this.elementIndex < this.elements.length) {\n            this.sim.push(this.elements[this.elementIndex++]);\n        }\n        else {\n            (<Mutable<this>>this).elementsArray = this.model.elementsArray.objectInstance(this);\n            this.elements.forEach((elem, i) => this.elementsArray!.getArrayElemSubobject(i).setValue(\n                <Value<ArithmeticType>>(elem.evalResult instanceof CPPObject ? elem.evalResult.getValue() : elem.evalResult)\n                ));\n\n            (<Mutable<this>>this).initializerList = this.model.initializerList.objectInstance(this);\n            let eltsPointer = this.elementsArray!.getArrayElemSubobject(0).getPointerTo();\n            (<CPPObject<PointerType<ArithmeticType>>>this.initializerList!.getMemberObject(\"begin\")!).setValue(eltsPointer);\n            (<CPPObject<PointerType<ArithmeticType>>>this.initializerList!.getMemberObject(\"begin\")!).setValue(eltsPointer.pointerOffsetRaw(this.elements.length));\n            this.setEvalResult(<this[\"evalResult\"]><unknown>this.initializerList!);\n            this.startCleanup();\n        }\n    }\n\n    protected stepForwardImpl() {\n        // Do nothing\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nconst AUXILIARY_EXPRESSION_CONTEXT: ExpressionContext = {\n    program: <never>undefined,\n    translationUnit: <never>undefined,\n    contextualScope: <never>undefined,\n    isLibrary: false\n}\n\nexport class AuxiliaryExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends Expression<never> {\n    public readonly construct_type = \"auxiliary_expression\";\n\n    public readonly type: T;\n    public readonly valueCategory: V;\n\n    constructor(type: T, valueCategory: V) {\n        super(AUXILIARY_EXPRESSION_CONTEXT, undefined);\n        this.type = type;\n        this.valueCategory = valueCategory;\n    }\n\n    public createDefaultOutlet(this: CompiledAuxiliaryExpression, element: JQuery, parent?: ConstructOutlet): never {\n        throw new Error(\"Cannot create an outlet for an auxiliary expression. (They should never be used at runtime.)\");\n    }\n\n    public describeEvalResult(depth: number): never {\n        throw new Error(\"Auxiliary expressions have no description\");\n    }\n\n}\n\nexport interface TypedAuxiliaryExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends AuxiliaryExpression<T, V>, t_TypedExpression {\n\n\n}\n\nexport interface CompiledAuxiliaryExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends TypedAuxiliaryExpression<T, V>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n}\n\n\n\n\n\n\n\n\ninterface OverloadCandidateResult {\n    readonly candidate: FunctionEntity;\n    readonly notes: readonly Note[];\n}\n\nexport interface OverloadResolutionResult<T extends FunctionType = FunctionType> {\n    readonly candidates: readonly OverloadCandidateResult[];\n    readonly viable: FunctionEntity<T>[];\n    readonly selected?: FunctionEntity<T>;\n}\n\n// TODO: see if we could move this to another module? Maybe entities.ts?\nexport function overloadResolution<T extends FunctionType>(candidates: readonly FunctionEntity<T>[], argTypes: readonly (ExpressionType | undefined)[], receiverType?: CompleteClassType): OverloadResolutionResult<T> {\n\n    // TODO: add these checks, and send errors back to construct that calls this if they aren't met\n    // Should return the function selected as well as an array of object-typed params that contain\n    // any implicit conversions necessary.\n\n    // if (!allWellTyped(args)) {\n    //     // If arguments are not well-typed, we can't continue onward to select a function\n    //     // and create a function call, so instead just give up attach arguments here.\n    //     this.attachAll(args);\n    //     return;\n    // }\n\n    // if (!allObjectTyped(args)) {\n    //     // Only object types may be passed as arguments to functions.\n    //     this.addNote(CPPError.declaration.init.no_default_constructor(this, this.target)); // TODO: fix\n    //     this.attachAll(args);\n    //     return;\n    // }\n\n    // Find the constructor\n    let viable: FunctionEntity<T>[] = [];\n    let resultCandidates: readonly OverloadCandidateResult[] = candidates.map((candidate) => {\n\n        let tempArgs = [];\n        var notes: Note[] = [];\n\n        // Check argument types against parameter types\n        let candidateParamTypes = candidate.type.paramTypes;\n        if (argTypes.length !== candidateParamTypes.length) {\n            notes.push(CPPError.param.numParams(candidate.firstDeclaration));\n        }\n        // TODO: add back in with member functions\n        else if (candidate.isMemberFunction() && receiverType?.isConst && !candidate.type.receiverType?.isConst){\n            notes.push(CPPError.param.thisConst(candidate.firstDeclaration, receiverType));\n        }\n        else {\n            argTypes.forEach((argType, i) => {\n                if (!argType) {\n                    return; // ignore undefined argType, assume it \"works\" since there will be an error elsewhere already\n                }\n                let candidateParamType = candidateParamTypes[i];\n                if (candidateParamType.isReferenceType()) {\n                    // tempArgs.push(args[i]);\n                    if (!referenceCompatible(argType, candidateParamType)) {\n                        notes.push(CPPError.param.paramReferenceType(candidate.firstDeclaration, argType, candidateParamType));\n                    }\n                    //else if (args[i].valueCategory !== \"lvalue\"){\n                    //    problems.push(CPPError.param.paramReferenceLvalue(args[i]));\n                    //}\n                }\n                else {\n                    // tempArgs.push(standardConversion(args[i], argTypes[i]));\n\n                    // Attempt standard conversion of an auxiliary expression of the argument's type to the param type\n\n                    let auxArg = new AuxiliaryExpression(argType, \"lvalue\");\n                    let convertedArg = standardConversion(auxArg, candidateParamType);\n\n                    if (!sameType(convertedArg.type, candidateParamType)) {\n                        notes.push(CPPError.param.paramType(candidate.firstDeclaration, argType, candidateParamType));\n                    }\n\n                }\n            });\n        }\n\n        if (notes.length == 0) { // All notes in this function are errors, so if there are any it's not viable\n            viable.push(candidate);\n        }\n\n        return { candidate: candidate, notes: notes };\n    });\n\n    // TODO: need to determine which of several viable overloads is the best option\n    // TODO: need to detect when multiple viable overloads have the same total conversion length, which results in an ambiguity\n    // let selected = viable.reduce((best, current) => {\n    //     if (convLen(current.type.paramTypes) < convLen(best.type.paramTypes)) {\n    //         return current;\n    //     }\n    //     else {\n    //         return best;\n    //     }\n    // });\n    let selected = viable[0] ? viable[0] : undefined;\n\n    return {\n        candidates: resultCandidates,\n        viable: viable,\n        selected: selected\n    }\n};\n\ninterface MagicFunctionImpl {\n    readonly returnType: CompleteObjectType | VoidType;\n    readonly valueCategory: ValueCategory;\n    readonly paramTypes: readonly PotentialParameterType[];\n    readonly operate: (rt: RuntimeMagicFunctionCallExpression) => void;\n}\n\n// TODO: add some RNG function?\nconst MAGIC_FUNCTIONS: { [k in MAGIC_FUNCTION_NAMES]: MagicFunctionImpl } = {\n    assert: {\n        returnType: VoidType.VOID,\n        valueCategory: \"prvalue\",\n        paramTypes: [Bool.BOOL],\n        operate: (rt: RuntimeMagicFunctionCallExpression) => {\n            let arg = <Value<Bool>>rt.args[0].evalResult;\n            if (!arg.rawValue) {\n                rt.sim.eventOccurred(SimulationEvent.ASSERTION_FAILURE, `Assertion failed on line ${rt.model.getNearestSourceReference().line}.`, true);\n            }\n        }\n    },\n    pause: {\n        returnType: VoidType.VOID,\n        valueCategory: \"prvalue\",\n        paramTypes: [],\n        operate: (rt: RuntimeMagicFunctionCallExpression) => {\n            // rt.sim.pause();\n        }\n\n    },\n    pauseIf: {\n        returnType: VoidType.VOID,\n        valueCategory: \"prvalue\",\n        paramTypes: [Bool.BOOL],\n        operate: (rt: RuntimeMagicFunctionCallExpression) => {\n            let arg = <Value<Bool>>rt.args[0].evalResult;\n            if (arg) {\n                // rt.sim.pause();\n            }\n        }\n    }\n}\n\nexport class MagicFunctionCallExpression extends Expression<FunctionCallExpressionASTNode> {\n    public readonly construct_type = \"magic_function_call_expression\";\n\n    public readonly type: PeelReference<CompleteReturnType>;\n    public readonly valueCategory: ValueCategory;\n\n    public readonly functionName: string;\n    public readonly functionImpl: MagicFunctionImpl;\n    public readonly args: readonly Expression[];\n\n    public constructor(context: ExpressionContext, ast: FunctionCallExpressionASTNode | undefined, functionName: MAGIC_FUNCTION_NAMES, args: readonly Expression[]) {\n        super(context, ast);\n\n        this.functionName = functionName;\n\n        let fn = this.functionImpl = MAGIC_FUNCTIONS[functionName];\n        this.type = fn.returnType;\n        this.valueCategory = fn.valueCategory;\n\n        this.args = args.map((arg, i) => {\n            if (!arg.isWellTyped()) {\n                return arg;\n            }\n\n            let paramType = fn.paramTypes[i];\n\n            if (paramType.isReferenceType()) {\n                if (!referenceCompatible(arg.type, paramType)) {\n                    arg.addNote(CPPError.declaration.init.referenceType(this, arg.type, paramType));\n                }\n                return arg;\n            }\n            else {\n                let convertedArg = standardConversion(arg, paramType);\n\n                if (!sameType(convertedArg.type, fn.paramTypes[i])) {\n                    arg.addNote(CPPError.declaration.init.convert(arg, convertedArg.type, paramType));\n                }\n                return convertedArg;\n            }\n\n        });\n        this.attachAll(this.args);\n    }\n\n    // public createRuntimeExpression<RT extends PotentialReturnType>(this: CompiledMagicFunctionCallExpression<RT>, parent: RuntimeConstruct) : RuntimeMagicFunctionCallExpression<RT>\n    // public createRuntimeExpression<T extends ObjectType, V extends ValueCategory>(this: CompiledExpressionBase<T,V>, parent: RuntimeConstruct) : never;\n    // public createRuntimeExpression<RT extends PotentialReturnType>(this: CompiledMagicFunctionCallExpression<RT>, parent: RuntimeConstruct) : RuntimeMagicFunctionCallExpression<RT> {\n    //     return new RuntimeMagicFunctionCallExpression(this, parent);\n    // }\n\n    public createDefaultOutlet(this: CompiledMagicFunctionCallExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new MagicFunctionCallExpressionOutlet(element, this, parent);\n    }\n\n    // TODO\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n\n\n    // isTailChild : function(child){\n    //     return {isTail: child === this.funcCall\n    //     };\n    // }\n}\n\n\ntype FunctionResultType<RT extends CompleteReturnType> = PeelReference<RT>;\ntype ReturnTypeVC<RT extends CompleteReturnType> = RT extends ReferenceType ? \"lvalue\" : \"prvalue\";\n\nexport interface TypedMagicFunctionCallExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends MagicFunctionCallExpression, t_TypedExpression {\n    readonly type: T;\n    readonly valueCategory: V;\n}\n\nexport interface CompiledMagicFunctionCallExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends TypedMagicFunctionCallExpression<T, V>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly args: readonly CompiledExpression[];\n}\n\nexport class RuntimeMagicFunctionCallExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends SimpleRuntimeExpression<T, V, CompiledMagicFunctionCallExpression<T, V>> {\n\n    public args: readonly RuntimeExpression[];\n\n    public constructor(model: CompiledMagicFunctionCallExpression<T, V>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.args = this.model.args.map(arg => createRuntimeExpression(arg, this));\n        this.setSubexpressions(this.args);\n    }\n\n    protected operate() {\n        this.model.functionImpl.operate(<RuntimeMagicFunctionCallExpression><unknown>this);\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n// Standard conversions\n\nexport abstract class ImplicitConversion<FromType extends CompleteObjectType = CompleteObjectType, FromVC extends ValueCategory = ValueCategory, ToType extends CompleteObjectType = CompleteObjectType, ToVC extends ValueCategory = ValueCategory> extends Expression {\n    public readonly construct_type = \"ImplicitConversion\";\n\n    public readonly from: TypedExpression<FromType, FromVC>;\n    public readonly type: ToType;\n    public readonly valueCategory: ToVC;\n\n    public readonly conversionLength: number;\n\n    public constructor(from: TypedExpression<FromType, FromVC>, toType: ToType, valueCategory: ToVC) {\n        super(from.context, undefined);\n        this.attach(this.from = from);\n        this.type = toType;\n        this.valueCategory = valueCategory;\n\n        if (from instanceof ImplicitConversion) {\n            this.conversionLength = from.conversionLength + 1;\n        }\n        else {\n            this.conversionLength = 1;\n        }\n    }\n\n    public createRuntimeExpression<FromType extends CompleteObjectType, FromVC extends ValueCategory, ToType extends CompleteObjectType, ToVC extends ValueCategory>(this: CompiledImplicitConversion<FromType, FromVC, ToType, ToVC>, parent: RuntimeConstruct): RuntimeImplicitConversion<FromType, FromVC, ToType, ToVC>;\n    public createRuntimeExpression<T extends ExpressionType, V extends ValueCategory>(this: CompiledExpression<T, V>, parent: RuntimeConstruct): never;\n    public createRuntimeExpression<FromType extends CompleteObjectType, FromVC extends ValueCategory, ToType extends CompleteObjectType, ToVC extends ValueCategory>(this: CompiledImplicitConversion<FromType, FromVC, ToType, ToVC>, parent: RuntimeConstruct): RuntimeImplicitConversion<FromType, FromVC, ToType, ToVC> {\n        return new RuntimeImplicitConversion(this, parent);\n    }\n\n    public abstract operate(fromEvalResult: VCResultTypes<FromType, FromVC>): VCResultTypes<ToType, ToVC>;\n\n\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedImplicitConversion<FromType extends CompleteObjectType = CompleteObjectType, FromVC extends ValueCategory = ValueCategory, ToType extends CompleteObjectType = CompleteObjectType, ToVC extends ValueCategory = ValueCategory> extends ImplicitConversion<FromType, FromVC, ToType, ToVC>, t_TypedExpression {\n\n\n}\n\nexport interface CompiledImplicitConversion<FromType extends CompleteObjectType = CompleteObjectType, FromVC extends ValueCategory = ValueCategory, ToType extends CompleteObjectType = CompleteObjectType, ToVC extends ValueCategory = ValueCategory> extends TypedImplicitConversion<FromType, FromVC, ToType, ToVC>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly from: CompiledExpression<FromType, FromVC>;\n}\n\nexport class RuntimeImplicitConversion<FromType extends CompleteObjectType = CompleteObjectType, FromVC extends ValueCategory = ValueCategory, ToType extends CompleteObjectType = CompleteObjectType, ToVC extends ValueCategory = ValueCategory>\n    extends SimpleRuntimeExpression<ToType, ToVC, CompiledImplicitConversion<FromType, FromVC, ToType, ToVC>> {\n\n    public readonly from: RuntimeExpression<FromType, FromVC>;\n\n    public constructor(model: CompiledImplicitConversion<FromType, FromVC, ToType, ToVC>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.from = createRuntimeExpression(this.model.from, this);\n        this.setSubexpressions([this.from]);\n    }\n\n    protected operate(): void {\n        this.setEvalResult(this.model.operate(this.from.evalResult));\n    }\n    // isTailChild : function(child){\n    //     return {isTail: false,\n    //         reason: \"An implicit conversion (\" + (this.englishName || this._name) + \") takes place after the function call returns.\"\n    //     };\n    // }\n\n}\n\n// export type AnalyticImplicitConversion<FromType extends ObjectType = ObjectType, FromVC extends ValueCategory = ValueCategory, ToType extends ObjectType = ObjectType, ToVC extends ValueCategory = ValueCategory> = \n//     LValueToRValueConversion<FromType> |\n//     ArrayToPointerConversion |\n//     TypeConversion |\n//     QualificationConversion;\n\n\n\n// Type 1 Conversions\n// LValueToRValue, ArrayToPointer, FunctionToPointer\n\n\nexport class LValueToRValueConversion<T extends AtomicType> extends ImplicitConversion<T, \"lvalue\", T, \"prvalue\"> {\n    // public readonly construct_type = \"LValueToRValueConversion\";\n\n    public constructor(from: TypedExpression<T, \"lvalue\">) {\n        super(from, from.type.cvUnqualified(), \"prvalue\");\n    }\n\n    public operate(fromEvalResult: VCResultTypes<T, \"lvalue\">) {\n        return <VCResultTypes<T, \"prvalue\">>fromEvalResult.getValue(); // Cast technically necessary here\n        // TODO: add alert if value is invalid\n        // e.g. inst.setEvalResult(readValueWithAlert(evalValue, sim, this.from, inst.childInstances.from));\n    }\n\n    public createDefaultOutlet(this: CompiledLValueToRValueConversion, element: JQuery, parent?: ConstructOutlet) {\n        return new LValueToRValueOutlet(element, this, parent);\n    }\n\n    // describeEvalResult : function(depth, sim, inst){\n    //     if (inst && inst.evalResult){\n    //         return inst.evalResult.describe();\n    //     }\n    //     else if (depth == 0){\n    //         return {message: \"the value of \" + this.getSourceText()};\n    //     }\n    //     else{\n    //         return {message: \"the value of \" + this.from.describeEvalResult(depth-1,sim, inst && inst.childInstances && inst.childInstances.from).message};\n    //     }\n    // },\n\n    // explain : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    //     return {message: \"The value of \" + this.from.describeEvalResult(0, sim, inst && inst.childInstances && inst.childInstances.from).message + \" will be looked up.\"};\n    // }\n\n}\nexport interface TypedLValueToRValueConversion<T extends AtomicType = AtomicType> extends LValueToRValueConversion<T>, t_TypedExpression {\n\n}\n\nexport interface CompiledLValueToRValueConversion<T extends AtomicType = AtomicType> extends TypedLValueToRValueConversion<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly from: CompiledExpression<T, \"lvalue\">; // satisfies CompiledImplicitConversion and LValueToRValue structure\n}\n\nexport class ArrayToPointerConversion<T extends BoundedArrayType> extends ImplicitConversion<T, \"lvalue\", PointerType, \"prvalue\"> {\n    // public readonly construct_type = \"ArrayToPointerConversion\";\n\n    public constructor(from: TypedExpression<T, \"lvalue\">) {\n        super(from, from.type.adjustToPointerType(), \"prvalue\");\n    }\n\n    public operate(fromEvalResult: VCResultTypes<BoundedArrayType, \"lvalue\">) {\n        return new Value(fromEvalResult.address, new ArrayPointerType(fromEvalResult));\n    }\n\n    public createDefaultOutlet(this: CompiledArrayToPointerConversion, element: JQuery, parent?: ConstructOutlet) {\n        return new ArrayToPointerOutlet(element, this, parent);\n    }\n\n    // explain : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    //     return {message: \"In this case (and most others), using the name of an array in an expression will yield a the address of its first element. That's what happens here.\"};\n    // }\n}\n\nexport interface TypedArrayToPointerConversion<T extends BoundedArrayType = BoundedArrayType> extends ArrayToPointerConversion<T>, t_TypedExpression {\n\n}\n\nexport interface CompiledArrayToPointerConversion<T extends BoundedArrayType = BoundedArrayType> extends TypedArrayToPointerConversion<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly from: CompiledExpression<T, \"lvalue\">; // satisfies CompiledImplicitConversion and ArrayToPointer structure\n}\n\n\n\nexport class StreamToBoolConversion extends ImplicitConversion<CompleteClassType, \"lvalue\", Bool, \"prvalue\"> {\n    // public readonly construct_type = \"StreamToBoolConversion\";\n\n    public constructor(from: TypedExpression<CompleteClassType, \"lvalue\">) {\n        super(from, Bool.BOOL, \"prvalue\");\n    }\n\n    public operate(fromEvalResult: VCResultTypes<CompleteClassType, \"lvalue\">) {\n        return new Value(1, Bool.BOOL);\n    }\n\n    public createDefaultOutlet(this: CompiledStreamToBoolConversion, element: JQuery, parent?: ConstructOutlet) {\n        return new StreamToBoolOutlet(element, this, parent);\n    }\n\n    // explain : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    //     return {message: \"In this case (and most others), using the name of an array in an expression will yield a the address of its first element. That's what happens here.\"};\n    // }\n}\n\nexport interface TypedStreamToBoolConversion extends StreamToBoolConversion, t_TypedExpression {\n\n}\n\nexport interface CompiledStreamToBoolConversion extends TypedStreamToBoolConversion, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly from: CompiledExpression<CompleteClassType, \"lvalue\">; // satisfies CompiledImplicitConversion and IstreamToBool structure\n}\n\n\n\n// export var FunctionToPointer = ImplicitConversion.extend({\n//     _name: \"FunctionToPointer\",\n//     init: function(from){\n//         assert(isA(from.type, Types.Function));\n//         this.initParent(from, Types.Pointer.instance(from.type), \"prvalue\");\n//     },\n\n//     operate : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         var func = inst.childInstances.from.evalResult;\n//         inst.setEvalResult(Value.instance(func, this.type));\n//     },\n\n//     explain : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         return {message: \"Using the name of a function in an expression will yield a pointer to that function.\"};\n//     }\n// });\n\n// Type 2 Conversions\n\n/**\n * All type conversions ignore (top-level) cv-qualifications on the given destination\n * type. This is because type conversions only operate on prvalues of atomic type,\n * which cannot be cv-qualified. For convenience, the user may still specify a\n * cv-qualified type and the cv-unqualified version will be used instead.\n */\nabstract class TypeConversion<FromType extends AtomicType, ToType extends AtomicType>\n    extends ImplicitConversion<FromType, \"prvalue\", ToType, \"prvalue\"> {\n\n    public constructor(from: TypedExpression<FromType, \"prvalue\">, toType: ToType) {\n        super(from, toType.cvUnqualified(), \"prvalue\");\n    }\n\n    public createDefaultOutlet(this: CompiledTypeConversion, element: JQuery, parent?: ConstructOutlet): TypeConversionOutlet {\n        return new TypeConversionOutlet(element, this, parent);\n    }\n\n}\n\nexport interface TypedTypeConversion<FromType extends AtomicType = AtomicType, ToType extends AtomicType = AtomicType> extends TypeConversion<FromType, ToType>, t_TypedExpression {\n\n}\n\nexport interface CompiledTypeConversion<FromType extends AtomicType = AtomicType, ToType extends AtomicType = AtomicType> extends TypedTypeConversion<FromType, ToType>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly from: CompiledExpression<FromType, \"prvalue\">; // satisfies CompiledImplicitConversion and TypeConversion structure\n}\n\nabstract class NoOpTypeConversion<FromType extends AtomicType, ToType extends AtomicType>\n    extends TypeConversion<FromType, ToType> {\n\n    public constructor(from: TypedExpression<FromType, \"prvalue\">, toType: ToType) {\n        super(from, toType);\n    }\n\n    public operate(fromEvalResult: VCResultTypes<FromType, \"prvalue\">) {\n        return <VCResultTypes<ToType, \"prvalue\">>new Value(fromEvalResult.rawValue, this.type, fromEvalResult.isValid); // Cast technically necessary here\n    }\n}\n\nexport interface IntegerLiteralZero extends CompiledNumericLiteralExpression {\n    readonly type: Int;\n    readonly value: Value<Int> & { rawValue: 0 };\n}\n\nexport class NullPointerConversion<P extends PointerType> extends NoOpTypeConversion<Int, P> {\n    // public readonly construct_type = \"NullPointerConversion\";\n\n    readonly from!: IntegerLiteralZero; // narrows from base type\n\n    public constructor(from: IntegerLiteralZero, toType: P) {\n        super(from, toType);\n        assert(from.value.rawValue === 0);\n    }\n\n}\n\nexport interface TypedNullPointerConversion<P extends PointerType> extends NullPointerConversion<P>, t_TypedExpression {\n\n}\n\nexport interface CompiledNullPointerConversion<P extends PointerType> extends TypedNullPointerConversion<P>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly from: IntegerLiteralZero;\n}\n\n\nexport class PointerConversion<FromType extends PointerType, ToType extends PointerType> extends NoOpTypeConversion<FromType, ToType> {\n    // public readonly construct_type = \"PointerConversion\";\n\n}\n\nexport interface TypedPointerConversion<FromType extends PointerType, ToType extends PointerType> extends TypedTypeConversion<FromType, ToType> {\n\n}\n\nexport interface CompiledPointerConversion<FromType extends PointerType, ToType extends PointerType> extends CompiledTypeConversion<FromType, ToType> {\n\n}\n\nabstract class ToBooleanConversionBase<T extends AtomicType> extends TypeConversion<T, Bool> {\n\n    public constructor(from: TypedExpression<T, \"prvalue\">) {\n        super(from, Bool.BOOL);\n    }\n\n    public operate(fromEvalResult: VCResultTypes<T, \"prvalue\">) {\n        return new Value(fromEvalResult.rawValue === 0 ? 0 : 1, Bool.BOOL, fromEvalResult.isValid);\n    }\n}\n\nexport class PointerToBooleanConversion<T extends PointerType> extends ToBooleanConversionBase<T> {\n    // public readonly construct_type = \"PointerToBooleanConversion\";\n}\nexport class FloatingToBooleanConversion<T extends FloatingPointType> extends ToBooleanConversionBase<T> {\n    // public readonly construct_type = \"FloatingToBooleanConversion\";\n}\nexport class IntegralToBooleanConversion<T extends IntegralType> extends ToBooleanConversionBase<T> {\n    // public readonly construct_type = \"IntegralToBooleanConversion\";\n}\n\nexport class IntegralPromotion<FromType extends IntegralType, ToType extends IntegralType> extends NoOpTypeConversion<FromType, ToType> {\n    // public readonly construct_type = \"IntegralPromotion\";\n\n}\n\nexport class IntegralConversion<FromType extends IntegralType, ToType extends IntegralType> extends NoOpTypeConversion<FromType, ToType> {\n    // public readonly construct_type = \"IntegralConversion\";\n\n}\n\n\nexport class FloatingPointPromotion extends NoOpTypeConversion<Float, Double> {\n    // public readonly construct_type = \"FloatingPointPromotion\";\n    public constructor(from: TypedExpression<Float, \"prvalue\">) {\n        super(from, Double.DOUBLE);\n    }\n}\n\nexport class FloatingPointConversion<FromType extends FloatingPointType, ToType extends FloatingPointType> extends NoOpTypeConversion<FromType, ToType> {\n    // public readonly construct_type = \"FloatingPointConversion\";\n\n}\n\nexport class IntegralToFloatingConversion<FromType extends IntegralType, ToType extends FloatingPointType> extends NoOpTypeConversion<FromType, ToType> {\n    // public readonly construct_type = \"IntegralToFloatingConversion\";\n\n}\n\n\nexport class FloatingToIntegralConversion<T extends FloatingPointType> extends TypeConversion<T, IntegralType> {\n    // public readonly construct_type = \"FloatingToIntegralConversion\";\n\n    public operate(fromEvalResult: VCResultTypes<T, \"prvalue\">) {\n        if (this.type.isType(Bool)) {\n            return new Value(fromEvalResult.rawValue === 0 ? 0 : 1, Int.INT, fromEvalResult.isValid);\n        }\n        return new Value(Math.trunc(fromEvalResult.rawValue), Int.INT, fromEvalResult.isValid);\n    }\n\n}\n\n\n// TODO: remove this. no longer needed now that we have real strings\n// StringToCStringConversion = ImplicitConversion.extend({\n//     _name: \"StringToCStringConversion\",\n//     init: function(from, toType){\n//         assert(from.valueCategory === \"prvalue\");\n//         assert(isA(from.type, Types.String));\n//         assert(isA(toType, Types.Array) && isA(toType.elemType, Types.Char));\n//         this.initParent(from, toType, \"prvalue\");\n//     },\n//\n//     operate : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         // I think only thing I really need here is to handle booleans gracefully\n//         // Adding 0.0 should do the trick.\n//         var cstr = inst.childInstances.from.evalResult.value;\n//         inst.setEvalResult(Value.instance(cstr.split(\"\"), Types.String));\n//     }\n// });\n\n// Qualification conversions\n\nexport class QualificationConversion<T extends AtomicType = AtomicType> extends ImplicitConversion<T, \"prvalue\", T, \"prvalue\"> {\n    // public readonly construct_type = \"QualificationConversion\";\n\n    public constructor(from: TypedExpression<T, \"prvalue\">, toType: T) {\n        super(from, toType, \"prvalue\");\n        assert(similarType(from.type, toType));\n    }\n\n    public createDefaultOutlet(this: CompiledQualificationConversion, element: JQuery, parent?: ConstructOutlet) {\n        return new QualificationConversionOutlet(element, this, parent);\n    }\n\n    public operate(fromEvalResult: VCResultTypes<T, \"prvalue\">) {\n        return <VCResultTypes<T, \"prvalue\">>fromEvalResult.cvQualified(this.type.isConst, this.type.isVolatile);\n    }\n\n}\n\nexport interface TypedQualificationConversion<T extends AtomicType = AtomicType> extends QualificationConversion<T>, t_TypedExpression {\n}\n\nexport interface CompiledQualificationConversion<T extends AtomicType = AtomicType> extends TypedQualificationConversion<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly from: CompiledExpression<T, \"prvalue\">; // satisfies CompiledImplicitConversion and QualificationConversion structure\n}\n\nexport function convertToPRValue<T extends AtomicType>(from: SpecificTypedExpression<T>): TypedExpression<T, \"prvalue\">;\nexport function convertToPRValue<Elem_type extends ArrayElemType>(from: TypedExpression<BoundedArrayType<Elem_type>, \"lvalue\">): TypedExpression<PointerType<Elem_type>, \"prvalue\">;\nexport function convertToPRValue(from: SpecificTypedExpression<PointerType> | TypedExpression<BoundedArrayType, \"lvalue\">): TypedExpression<PointerType, \"prvalue\">;\nexport function convertToPRValue(from: SpecificTypedExpression<AtomicType> | TypedExpression<BoundedArrayType, \"lvalue\">): TypedExpression<AtomicType, \"prvalue\">;\nexport function convertToPRValue(from: TypedExpression): TypedExpression;\nexport function convertToPRValue(from: any): TypedExpression {\n\n    let analyticFrom = <AnalyticTypedExpression<AnalyticExpression>>from;\n\n    if (Predicates.isTypedExpression(analyticFrom, isBoundedArrayType, \"lvalue\")) {\n        return new ArrayToPointerConversion(analyticFrom);\n    }\n\n    if (!Predicates.isTypedExpression(analyticFrom, isAtomicType)) {\n        return analyticFrom;\n    }\n\n    // based on union input type, it must be atomic typed if we get to here\n\n    if (analyticFrom.isPrvalue()) {\n        return analyticFrom;\n    }\n\n    // must be an lvalue if we get to here\n    // assert(x.isLvalue());\n\n\n    // TODO: add back in for function pointers\n    // if (from.type instanceof FunctionType) {\n    //     return new FunctionToPointer(from);\n    // }\n\n    return new LValueToRValueConversion(analyticFrom);\n};\n\nexport function typeConversion(from: TypedExpression<PointerType, \"prvalue\">, toType: Bool): TypedExpression<Bool, \"prvalue\">;\nexport function typeConversion(from: TypedExpression<Double, \"prvalue\">, toType: Float): TypedExpression<Float, \"prvalue\">;\nexport function typeConversion(from: TypedExpression<IntegralType, \"prvalue\">, toType: IntegralType): TypedExpression<IntegralType, \"prvalue\">;\nexport function typeConversion(from: TypedExpression<FloatingPointType, \"prvalue\">, toType: IntegralType): TypedExpression<IntegralType, \"prvalue\">;\nexport function typeConversion(from: TypedExpression<IntegralType, \"prvalue\">, toType: FloatingPointType): TypedExpression<FloatingPointType, \"prvalue\">;\nexport function typeConversion(from: TypedExpression<FloatingPointType, \"prvalue\">, toType: FloatingPointType): TypedExpression<FloatingPointType, \"prvalue\">;\nexport function typeConversion<SimilarType extends AtomicType>(from: TypedExpression<SimilarType, \"prvalue\">, toType: SimilarType): TypedExpression<SimilarType, \"prvalue\">;\nexport function typeConversion<FromType extends AtomicType, ToType extends AtomicType>(from: TypedExpression<FromType, \"prvalue\">, toType: ToType): TypedExpression<FromType, \"prvalue\"> | TypedExpression<ToType, \"prvalue\">;\nexport function typeConversion(from: TypedExpression<AtomicType, \"prvalue\">, toType: AtomicType) {\n\n    if (similarType(from.type, toType)) {\n        return from;\n    }\n\n    if (toType.isPointerType() && isIntegerLiteralZero(from)) {\n        return new NullPointerConversion(from, toType);\n    }\n\n    if (toType.isPointerType() && toType.ptrTo.isPotentiallyCompleteClassType() &&\n        Predicates.isTypedExpression(from, isPointerType) && from.type.ptrTo.isPotentiallyCompleteClassType() &&\n        subType(from.type.ptrTo, toType.ptrTo)) {\n        // Note that cv qualifications on the new destination pointer type don't need to be set, since\n        // they are ignored by the PointerConversion anyway (the result is always cv-unqualified).\n        // However, we do need to preserve the cv-qualifications on the pointed-to type.\n        return new PointerConversion(from, new PointerType(toType.ptrTo.cvQualified(from.type.ptrTo.isConst, from.type.ptrTo.isVolatile)));\n    }\n\n    if (toType.isType(Bool)) {\n        if (Predicates.isTypedExpression(from, isPointerType)) {\n            return new PointerToBooleanConversion(from);\n        }\n        else if (Predicates.isTypedExpression(from, isFloatingPointType)) {\n            return new FloatingToBooleanConversion(from);\n        }\n        else if (Predicates.isTypedExpression(from, isIntegralType)) {\n            return new IntegralToBooleanConversion(from);\n        }\n    }\n\n    if (toType.isType(Double) && Predicates.isTypedExpression(from, isType(Float))) {\n        return new FloatingPointPromotion(from);\n    }\n\n    if (toType.isIntegralType()) {\n        if (Predicates.isTypedExpression(from, isIntegralType)) {\n            return new IntegralConversion(from, toType);\n        }\n        if (Predicates.isTypedExpression(from, isFloatingPointType)) {\n            return new FloatingToIntegralConversion(from, toType);\n        }\n    }\n\n    if (toType.isFloatingPointType()) {\n        if (Predicates.isTypedExpression(from, isIntegralType)) {\n            return new IntegralToFloatingConversion(from, toType);\n        }\n        if (Predicates.isTypedExpression(from, isFloatingPointType)) {\n            return new FloatingPointConversion(from, toType);\n        }\n    }\n\n    return from;\n};\n\nexport function qualificationConversion(from: TypedExpression<AtomicType, \"prvalue\">, toType: AtomicType) {\n\n    if (sameType(from.type, toType)) {\n        return from;\n    }\n\n    if (from.valueCategory === \"prvalue\" && isCvConvertible(from.type, toType)) {\n        return new QualificationConversion(from, toType);\n    }\n\n    return from;\n};\n\nexport interface StandardConversionOptions {\n    readonly suppressLTR?: true;\n}\n\n/**\n * Attempts to generate a standard conversion sequence of the given expression to the given\n * destination type. \n * @param from The original expression\n * @param toType The destination type\n * @param options \n */\nexport function standardConversion(from: TypedExpression, toType: ExpressionType, options: StandardConversionOptions = {}) {\n\n    if (Predicates.isTypedExpression(from, isCompleteClassType, \"lvalue\") && (from.type.className === \"ostream\" || from.type.className === \"istream\")) {\n        return new StreamToBoolConversion(from);\n    }\n\n\n    // Unless the object is atomic typed or is an array, Lobster currently doesn't support\n    // any standard conversions. Note in particular this means user-defined converison functions\n    // for class-typed objects are not supported.\n    if (!(Predicates.isTypedExpression(from, isAtomicType) || Predicates.isTypedExpression(from, isBoundedArrayType, \"lvalue\"))) {\n        return from;\n    }\n\n    if (!toType.isAtomicType()) {\n        return from;\n    }\n\n    if (!options.suppressLTR) {\n        let fromPrvalue = convertToPRValue(from);\n        fromPrvalue = typeConversion(fromPrvalue, toType);\n        fromPrvalue = qualificationConversion(fromPrvalue, toType);\n        return fromPrvalue;\n    }\n\n    return from;\n};\n\nexport function integralPromotion(expr: TypedExpression<IntegralType, \"prvalue\">) {\n    if (Predicates.isTypedExpression(expr, isIntegralType) && !Predicates.isTypedExpression(expr, isType(Int))) {\n        return new IntegralPromotion(expr, Int.INT);\n    }\n    else {\n        return expr;\n    }\n};\n\nexport function isIntegerLiteralZero(from: Expression): from is IntegerLiteralZero {\n    return from instanceof NumericLiteralExpression && isType(from.type, Int) && from.value.rawValue === 0;\n}\n\nexport function isConvertibleToPointer(from: Expression): from is SpecificTypedExpression<PointerType> | TypedExpression<BoundedArrayType, \"lvalue\"> | IntegerLiteralZero {\n    if (!from.isWellTyped()) {\n        return false;\n    }\n    return Predicates.isTypedExpression(from, isPointerType) || Predicates.isTypedExpression(from, isBoundedArrayType, \"lvalue\") || isIntegerLiteralZero(from);\n}\n\nexport function isConvertible(from: TypedExpression, toType: ExpressionType, options: StandardConversionOptions = {}) {\n    let aux = new AuxiliaryExpression(from.type, from.valueCategory);\n    let converted = standardConversion(aux, toType, options);\n    return sameType(converted.type, toType);\n}\n\nexport function usualArithmeticConversions(leftOrig: SpecificTypedExpression<ArithmeticType>, rightOrig: SpecificTypedExpression<ArithmeticType>) {\n\n    let left = convertToPRValue(leftOrig);\n    let right = convertToPRValue(rightOrig);\n\n    // TODO If either has scoped enumeration type, no conversions are performed\n\n    // TODO If either is long double, the other shall be converted to long double\n\n    // If either is double, the other shall be converted to double\n    if (Predicates.isTypedExpression(left, isType(Double))) {\n        right = typeConversion(right, Double.DOUBLE);\n        return [left, right];\n    }\n    if (Predicates.isTypedExpression(right, isType(Double))) {\n        left = typeConversion(left, Double.DOUBLE);\n        return [left, right];\n    }\n    // If either is float, the other shall be converted to float\n\n    if (Predicates.isTypedExpression(left, isType(Float))) {\n        right = typeConversion(right, Float.FLOAT);\n        return [left, right];\n    }\n    if (Predicates.isTypedExpression(right, isType(Float))) {\n        left = typeConversion(left, Float.FLOAT);\n        return [left, right];\n    }\n\n    // Otherwise, do integral promotions\n    if (Predicates.isTypedExpression(left, isIntegralType)) {\n        left = integralPromotion(left);\n    }\n    if (Predicates.isTypedExpression(right, isIntegralType)) {\n        right = integralPromotion(right);\n    }\n\n    // If both operands have the same type, no further conversion is needed\n    if (sameType(left.type, right.type)) {\n        return [left, right];\n    }\n\n    // TODO: Otherwise, if both operands have signed or both have unsigned types,\n    // operand with type of lesser integer conversion rank shall be converted\n    // to the type of the operand with greater rank\n    return [left, right];\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport function selectOperatorOverload(context: ExpressionContext, ast: ExpressionASTNode, operator: OverloadableOperator, originalArgs: Expression[]) {\n\n    if (!allWellTyped(originalArgs)) {\n        return;\n    }\n\n    let leftmost = originalArgs[0];\n\n    let operatorFunctionName = \"operator\" + operator;\n    \n    let lookupResult: DeclaredScopeEntry | undefined;\n    let adjustedArgs: Expression[] | undefined;\n    let receiverType : CompleteClassType | undefined;\n    if (leftmost.type.isCompleteClassType()) {\n        // Attempt member lookup for operator overload function\n        adjustedArgs = originalArgs.slice(1);\n        lookupResult = leftmost.type.classScope.lookup(operatorFunctionName, { kind: \"normal\", noParent: true });\n        receiverType = leftmost.type;\n    }\n\n    // If we didn't find a member option\n    if (!lookupResult) {\n        lookupResult = context.contextualScope.lookup(operatorFunctionName, { kind: \"normal\" });\n        adjustedArgs = originalArgs;\n        receiverType = undefined;\n    }\n\n    // If we still don't have anything\n    if (!lookupResult || !adjustedArgs) {\n        return;\n    }\n\n    // These are not possible since you can't have a variable or\n    // class with a name of e.g. \"operator+\"\n    assert(lookupResult.declarationKind !== \"variable\");\n    assert(lookupResult.declarationKind !== \"class\");\n\n    let selected = overloadResolution(lookupResult.overloads, adjustedArgs.map(arg => arg.type), receiverType).selected;\n\n    if (selected) {\n        if (selected.isMemberFunction()) {\n            return new MemberOperatorOverloadExpression(context, ast, operator, <TypedExpression<CompleteClassType>>leftmost, adjustedArgs, selected);\n        }\n        else {\n            return new NonMemberOperatorOverloadExpression(context, ast, operator, adjustedArgs, selected);\n        }\n    }\n    else {\n        return undefined;\n    }\n}\n\n// TODO\n// export type NonMemberOperatorOverloadExpressionAST =\n//     BinaryOperatorExpressionASTNode |\n//     AssignmentExpressionASTNode;\n\nexport type OverloadableOperator = t_BinaryOperators | \"=\" | \"+=\" | \"[]\";\n\nexport class NonMemberOperatorOverloadExpression extends Expression<ExpressionASTNode> {\n    public readonly construct_type = \"non_member_operator_overload_expression\";\n\n    public readonly type?: PeelReference<CompleteReturnType>;\n    public readonly valueCategory?: ValueCategory;\n\n    public readonly operator: OverloadableOperator;\n\n    public readonly originalArgs: readonly Expression[];\n\n    public readonly call?: FunctionCall;\n\n    public constructor(context: ExpressionContext, ast: ExpressionASTNode | undefined,\n                       operator: OverloadableOperator, args: readonly Expression[],\n                       selectedFunctionEntity: FunctionEntity | undefined) {\n        super(context, ast);\n\n        this.operator = operator;\n        this.originalArgs = args;\n\n        // If any arguments are not well typed, we can't select a function.\n        if (!allWellTyped(args)) {\n            // type, valueCategory, and call remain undefined\n            this.attachAll(args);\n            return;\n        }\n\n        if (!selectedFunctionEntity) {\n            // type, valueCategory, and call remain undefined\n            this.addNote(CPPError.expr.binaryOperatorOverload.no_such_overload(this, this.operator));\n            this.attachAll(args);\n            return;\n        }\n\n        if (!selectedFunctionEntity.returnsCompleteType()) {\n            this.addNote(CPPError.expr.functionCall.incomplete_return_type(this, selectedFunctionEntity.type.returnType));\n            this.attachAll(args);\n            return;\n        }\n\n        let returnType = selectedFunctionEntity.type.returnType;\n        this.type = peelReference(returnType);\n        this.valueCategory = returnType instanceof ReferenceType ? \"lvalue\" : \"prvalue\";\n\n        // If we get to here, we don't attach the args directly since they will be attached under the function call.\n        this.attach(this.call = new FunctionCall(context, selectedFunctionEntity, args, undefined));\n    }\n\n    public createDefaultOutlet(this: CompiledNonMemberOperatorOverloadExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new NonMemberOperatorOverloadExpressionOutlet(element, this, parent);\n    }\n\n    // TODO\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n\n\n    // isTailChild : function(child){\n    //     return {isTail: child === this.funcCall\n    //     };\n    // }\n}\n\nexport interface TypedNonMemberOperatorOverloadExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends NonMemberOperatorOverloadExpression {\n    readonly type: T\n    readonly valueCategory: V;\n    readonly call: TypedFunctionCall<FunctionType<CompleteReturnType>>;\n}\n\nexport interface CompiledNonMemberOperatorOverloadExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends TypedNonMemberOperatorOverloadExpression<T, V>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly originalArgs: readonly CompiledExpression[];\n    readonly call: CompiledFunctionCall<FunctionType<CompleteReturnType>>;\n}\n\nexport class RuntimeNonMemberOperatorOverloadExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends RuntimeExpression<T, V, CompiledNonMemberOperatorOverloadExpression<T, V>> {\n\n    public readonly call: RuntimeFunctionCall<FunctionType<CompleteReturnType>>;\n\n    public constructor(model: CompiledNonMemberOperatorOverloadExpression<T,V>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.call = this.model.call.createRuntimeFunctionCall(this, undefined);\n    }\n\n    protected upNextImpl() {\n        if (!this.call.isDone) {\n            this.sim.push(this.call);\n        }\n        else {\n\n            // Note: cannot use this.model.type here, since that is the type of the function\n            // call expression, which would have had the reference type removed if this was return\n            // by reference. Instead, use the return type of the called function itself, which will have\n            // the reference type intact.\n            let returnType = this.model.call.func.type.returnType;\n\n            // NOTE: below is copied from RuntimeFunctionCallExpresssion\n            if (returnType.isVoidType()) {\n                // this.setEvalResult(null); // TODO: type system won't allow this currently\n            }\n            else if (returnType.isReferenceType()) {\n                // Return by reference is lvalue and yields the returned object\n                let retObj = <CPPObject>this.call!.calledFunction.returnObject!;\n                this.setEvalResult(<VCResultTypes<T,V>>retObj);\n            }\n            else if (returnType.isAtomicType()) {\n                // Return by value of atomic type. In this case, we can look up\n                // the value of the return object and use that as the eval result\n                let retObj = <CPPObject<AtomicType>>this.call!.calledFunction.returnObject!;\n                this.setEvalResult(<VCResultTypes<T,V>>retObj.getValue());\n            }\n            else {\n                // Return by value of a non-atomic type. In this case, it's still a prvalue\n                // but is the temporary object rather than its value.\n                let retObj = <CPPObject>this.call!.calledFunction.returnObject!;\n                this.setEvalResult(<VCResultTypes<T,V>>retObj);\n            }\n            this.startCleanup();\n        }\n    }\n\n    protected stepForwardImpl() {\n        // nothing to do\n    }\n}\n\n\n\n\n\nexport class MemberOperatorOverloadExpression extends Expression<ExpressionASTNode> {\n    public readonly construct_type = \"member_operator_overload_expression\";\n\n    public readonly type?: PeelReference<CompleteReturnType>;\n    public readonly valueCategory?: ValueCategory;\n\n    public readonly operator: OverloadableOperator;\n\n    public readonly originalArgs: readonly Expression[];\n    \n    public readonly receiverExpression: TypedExpression<CompleteClassType>;\n    public readonly call?: FunctionCall;\n\n    public constructor(context: ExpressionContext, ast: ExpressionASTNode | undefined, operator: OverloadableOperator,\n                       receiverExpression: TypedExpression<CompleteClassType>, args: readonly Expression[],\n                       selectedFunctionEntity: FunctionEntity | undefined) {\n        super(context, ast);\n\n        this.operator = operator;\n        this.attach(this.receiverExpression = receiverExpression);\n        this.originalArgs = args;\n\n        // If any arguments are not well typed, we can't select a function.\n        if (!receiverExpression.isWellTyped() || !allWellTyped(args)) {\n            // type, valueCategory, and call remain undefined\n            this.attachAll(args);\n            return;\n        }\n\n        if (!selectedFunctionEntity) {\n            // type, valueCategory, and call remain undefined\n            this.addNote(CPPError.expr.binaryOperatorOverload.no_such_overload(this, this.operator));\n            this.attachAll(args);\n            return;\n        }\n\n        if (!selectedFunctionEntity.returnsCompleteType()) {\n            this.addNote(CPPError.expr.functionCall.incomplete_return_type(this, selectedFunctionEntity.type.returnType));\n            this.attachAll(args);\n            return;\n        }\n\n        let returnType = selectedFunctionEntity.type.returnType;\n        this.type = peelReference(returnType);\n        this.valueCategory = returnType instanceof ReferenceType ? \"lvalue\" : \"prvalue\";\n\n        // Attach the right as an argument of the function call.\n        // Left is the receiver of that call and was already attached as a child.\n        this.attach(this.call = new FunctionCall(context, selectedFunctionEntity, args, receiverExpression.type));\n    }\n\n    public createDefaultOutlet(this: CompiledMemberOperatorOverloadExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new MemberOperatorOverloadExpressionOutlet(element, this, parent);\n    }\n\n    // TODO\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n\n\n    // isTailChild : function(child){\n    //     return {isTail: child === this.funcCall\n    //     };\n    // }\n}\n\nexport interface TypedMemberOperatorOverloadExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends MemberOperatorOverloadExpression {\n    readonly type: T\n    readonly valueCategory: V;\n    readonly call: TypedFunctionCall<FunctionType<CompleteReturnType>>;\n}\n\nexport interface CompiledMemberOperatorOverloadExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends TypedMemberOperatorOverloadExpression<T, V>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n\n    readonly originalArgs: readonly CompiledExpression[];\n    readonly receiverExpression: CompiledExpression<CompleteClassType>;\n    readonly call: CompiledFunctionCall<FunctionType<CompleteReturnType>>;\n}\n\nexport class RuntimeMemberOperatorOverloadExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends RuntimeExpression<T, V, CompiledMemberOperatorOverloadExpression<T, V>> {\n\n    public readonly receiverExpression: RuntimeExpression<CompleteClassType>;\n    public readonly call?: RuntimeFunctionCall<FunctionType<CompleteReturnType>>;\n\n    public constructor(model: CompiledMemberOperatorOverloadExpression<T,V>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.receiverExpression = createRuntimeExpression(this.model.receiverExpression, this);\n    }\n\n    protected upNextImpl() {\n        if (!this.receiverExpression.isDone) {\n            this.sim.push(this.receiverExpression);\n        }\n        else if (!this.call) {\n            (<Mutable<this>>this).call = this.model.call.createRuntimeFunctionCall(this, this.receiverExpression.evalResult);\n            this.sim.push(this.call!);\n        }\n        else {\n\n            // Note: cannot use this.model.type here, since that is the type of the function\n            // call expression, which would have had the reference type removed if this was return\n            // by reference. Instead, use the return type of the called function itself, which will have\n            // the reference type intact.\n            let returnType = this.model.call.func.type.returnType;\n\n            // NOTE: below is copied from RuntimeFunctionCallExpresssion\n            if (returnType.isVoidType()) {\n                // this.setEvalResult(null); // TODO: type system won't allow this currently\n            }\n            else if (returnType.isReferenceType()) {\n                // Return by reference is lvalue and yields the returned object\n                let retObj = <CPPObject>this.call!.calledFunction.returnObject!;\n                this.setEvalResult(<VCResultTypes<T,V>>retObj);\n            }\n            else if (returnType.isAtomicType()) {\n                // Return by value of atomic type. In this case, we can look up\n                // the value of the return object and use that as the eval result\n                let retObj = <CPPObject<AtomicType>>this.call!.calledFunction.returnObject!;\n                this.setEvalResult(<VCResultTypes<T,V>>retObj.getValue());\n            }\n            else {\n                // Return by value of a non-atomic type. In this case, it's still a prvalue\n                // but is the temporary object rather than its value.\n                let retObj = <CPPObject>this.call!.calledFunction.returnObject!;\n                this.setEvalResult(<VCResultTypes<T,V>>retObj);\n            }\n            this.startCleanup();\n        }\n    }\n\n    protected stepForwardImpl() {\n        // nothing to do\n    }\n}\n\n\nexport type OperatorOverloadExpression =\n    NonMemberOperatorOverloadExpression |\n    MemberOperatorOverloadExpression;\n\nexport function isOperatorOverloadExpression(construct: CPPConstruct) : construct is OperatorOverloadExpression {\n    return construct instanceof NonMemberOperatorOverloadExpression || construct instanceof MemberOperatorOverloadExpression;\n}","import { TranslationUnitContext, SuccessfullyCompiled, CompiledTemporaryDeallocator, RuntimeConstruct, ASTNode, ExpressionContext, createExpressionContextWithParameterTypes, ConstructDescription } from \"./constructs\";\nimport { PotentialFullExpression, RuntimePotentialFullExpression } from \"./PotentialFullExpression\";\nimport { FunctionEntity, ObjectEntity, TemporaryObjectEntity, PassByReferenceParameterEntity, PassByValueParameterEntity } from \"./entities\";\nimport { ExpressionASTNode, IdentifierExpression, createExpressionFromAST, CompiledFunctionIdentifierExpression, RuntimeFunctionIdentifierExpression, SimpleRuntimeExpression, MagicFunctionCallExpression, createRuntimeExpression, DotExpression, CompiledFunctionDotExpression, RuntimeFunctionDotExpression, ArrowExpression, CompiledFunctionArrowExpression, RuntimeFunctionArrowExpression } from \"./expressions\";\nimport { VoidType, ReferenceType, PotentialReturnType, CompleteObjectType, PeelReference, peelReference, AtomicType, PotentialParameterType, Bool, sameType, FunctionType, Type, CompleteClassType, isFunctionType, PotentiallyCompleteObjectType, CompleteReturnType, PotentiallyCompleteClassType } from \"./types\";\nimport { clone } from \"lodash\";\nimport { CPPObject } from \"./objects\";\nimport { CompiledFunctionDefinition } from \"./declarations\";\nimport { CPPError } from \"./errors\";\nimport { allWellTyped, CompiledExpression, RuntimeExpression, VCResultTypes, TypedExpression, ValueCategory, Expression } from \"./expressionBase\";\nimport { LOBSTER_KEYWORDS, MAGIC_FUNCTION_NAMES, LOBSTER_MAGIC_FUNCTIONS } from \"./lexical\";\nimport { Value } from \"./runtimeEnvironment\";\nimport { SimulationEvent } from \"./Simulation\";\nimport { FunctionCallExpressionOutlet, ConstructOutlet } from \"../view/codeOutlets\";\nimport { DirectInitializer, CompiledDirectInitializer, RuntimeDirectInitializer } from \"./initializers\";\nimport { Mutable, assert } from \"../util/util\";\nimport { RuntimeFunction } from \"./functions\";\nimport { Predicates } from \"./predicates\";\nimport { param } from \"jquery\";\nexport class FunctionCall extends PotentialFullExpression {\n    public readonly construct_type = \"FunctionCall\";\n\n    public readonly func: FunctionEntity<FunctionType<CompleteReturnType>>;\n    public readonly args: readonly Expression[];\n    public readonly receiverType?: CompleteClassType;\n\n    public readonly argInitializers?: readonly DirectInitializer[];\n\n    public readonly returnByValueTarget?: TemporaryObjectEntity;\n    /**\n     * A FunctionEntity must be provided to specify which function is being called. The\n     * return type of that function must be complete (if it's not, such a function call\n     * should generate an error - the constructs that use FunctionCall should take care\n     * of checking for this before making the FunctionCall and generate an error otherwise).\n     *\n     * @param context \n     * @param func Specifies which function is being called.\n     * @param args Arguments to the function.\n     * @param receiverType\n     */\n    public constructor(context: TranslationUnitContext, func: FunctionEntity<FunctionType<CompleteReturnType>>, args: readonly TypedExpression[], receiverType: CompleteClassType | undefined) {\n        super(context, undefined);\n\n        this.func = func;\n        this.receiverType = receiverType;\n\n        // Note that the args are NOT attached as children here. Instead, they are attached to the initializers.\n        let paramTypes = this.func.type.paramTypes;\n        if (args.length !== paramTypes.length) {\n            this.addNote(CPPError.param.numParams(this));\n            this.attachAll(this.args = args);\n            return;\n        }\n       \n        if (this.func.isMemberFunction() && receiverType?.isConst && !this.func.type.receiverType?.isConst) {\n            this.addNote(CPPError.param.thisConst(this, receiverType));\n        }\n\n        // Create initializers for each argument/parameter pair\n        this.argInitializers = args.map((arg, i) => {\n            let paramType = paramTypes[i];\n            if (paramType.isReferenceType()) {\n                return DirectInitializer.create(context, new PassByReferenceParameterEntity(this.func, paramType, i), [arg], \"copy\");\n            }\n            else {\n                assert(paramType.isCompleteParameterType());\n                return DirectInitializer.create(context, new PassByValueParameterEntity(this.func, paramType, i), [arg], \"copy\");\n            }\n        });\n        this.attachAll(this.argInitializers);\n\n        // For convenience, an array with reference to the final arguments (i.e. including conversions) for the call\n        this.args = this.argInitializers.map(argInit => argInit.args[0]);\n\n        // TODO\n        // this.isRecursive = this.func.definition === this.context.containingFunction;\n\n        // No returns for void functions, of course.\n        // If return by reference, the return object already exists and no need to create a temporary.\n        // Else, for a return by value, we do need to create a temporary object.\n        let returnType = this.func.type.returnType;\n        if (!(returnType instanceof VoidType) && !(returnType instanceof ReferenceType)) {\n            this.returnByValueTarget = this.createTemporaryObject(returnType, `[${this.func.name}() return]`);\n        }\n\n        // TODO: need to check that it's not an auxiliary function call before adding these?\n        // this.context.containingFunction.addCall(this);\n        this.context.translationUnit.registerFunctionCall(this); // TODO: is this needed?\n        this.func.registerCall(this);\n    }\n\n    // public checkLinkingProblems() {\n    //     if (!this.func.isLinked()) {\n    //         if (this.func.isLibraryUnsupported()) {\n    //             let note = CPPError.link.library_unsupported(this, this.func);\n    //             this.addNote(note);\n    //             return note;\n    //         }\n    //         else {\n    //             let note = CPPError.link.def_not_found(this, this.func);\n    //             this.addNote(note);\n    //             return note;\n    //         }\n    //     }\n    //     return null;\n    // }\n\n    // tailRecursionCheck : function(){\n    //     if (this.isTail !== undefined) {\n    //         return;\n    //     }\n\n    //     var child = this;\n    //     var parent = this.parent;\n    //     var isTail = true;\n    //     var reason = null;\n    //     var others = [];\n    //     var first = true;\n    //     while(!isA(child, FunctionDefinition) && !isA(child, Statements.Return)) {\n    //         var result = parent.isTailChild(child);\n    //         if (!result.isTail) {\n    //             isTail = false;\n    //             reason = result.reason;\n    //             others = result.others || [];\n    //             break;\n    //         }\n\n    //         //if (!first && child.tempDeallocator){\n    //         //    isTail = false;\n    //         //    reason = \"The full expression containing this recursive call has temporary objects that need to be deallocated after the call returns.\";\n    //         //    others = [];\n    //         //    break;\n    //         //}\n    //         //first = false;\n\n\n    //         reason = reason || result.reason;\n\n    //         child = parent;\n    //         parent = child.parent;\n    //     }\n\n    //     this.isTail = isTail;\n    //     this.isTailReason = reason;\n    //     this.isTailOthers = others;\n    //     //this.containingFunction().isTailRecursive = this.containingFunction().isTailRecursive && isTail;\n\n    //     this.canUseTCO = this.isRecursive && this.isTail;\n    // },\n\n    public createRuntimeFunctionCall<T extends FunctionType<CompleteReturnType> = FunctionType<CompleteReturnType>>(\n        this: CompiledFunctionCall<T>,\n        parent: RuntimePotentialFullExpression,\n        receiver: CPPObject<CompleteClassType> | undefined): RuntimeFunctionCall<T> {\n        return new RuntimeFunctionCall<T>(this, parent, receiver);\n    }\n\n    // isTailChild : function(child){\n    //     return {isTail: false,\n    //         reason: \"A quick rule is that a function call can never be tail recursive if it is an argument to another function call. The outer function call will always happen afterward!\",\n    //         others: [this]\n    //     };\n    // },\n\n    // // TODO: what is this? should it be describeEvalResult? or explain? probably not just describe since that is for objects\n    // describe : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    //     var desc = {};\n    //     desc.message = \"a call to \" + this.func.describe(sim).message;\n    //     return desc;\n    // }\n\n    public isReturnByValue() : this is TypedFunctionCall<FunctionType<AtomicType | CompleteClassType>> {\n        let returnType = this.func.type.returnType;\n        return returnType.isAtomicType() || returnType.isCompleteClassType();\n    }\n\n    public isReturnByReference() : this is TypedFunctionCall<FunctionType<ReferenceType>> {\n        return this.func.type.returnType.isReferenceType();\n    }\n\n    public isReturnVoid() : this is TypedFunctionCall<FunctionType<VoidType>> {\n        return this.func.type.returnType.isVoidType();\n    }\n}\n\nexport interface TypedFunctionCall<T extends FunctionType<CompleteReturnType> = FunctionType<CompleteReturnType>> extends FunctionCall, SuccessfullyCompiled {\n    readonly returnByValueTarget: T[\"returnType\"] extends (AtomicType | CompleteClassType) ? TemporaryObjectEntity<T[\"returnType\"]> : undefined;\n}\n\nexport interface CompiledFunctionCall<T extends FunctionType<CompleteReturnType> = FunctionType<CompleteReturnType>> extends TypedFunctionCall<T>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n    readonly args: readonly CompiledExpression[];\n    readonly argInitializers: readonly CompiledDirectInitializer[];\n}\n\nexport const INDEX_FUNCTION_CALL_PUSH = 0;\nexport const INDEX_FUNCTION_CALL_ARGUMENTS = 1;\nexport const INDEX_FUNCTION_CALL_CALL = 2;\nexport const INDEX_FUNCTION_CALL_RETURN = 3;\nexport class RuntimeFunctionCall<T extends FunctionType<CompleteReturnType> = FunctionType<CompleteReturnType>> extends RuntimePotentialFullExpression<CompiledFunctionCall<T>> {\n\n    public readonly model!: CompiledFunctionCall<T>; // narrows type of member in base class\n\n    // public readonly functionDef : FunctionDefinition;\n    public readonly calledFunction: RuntimeFunction<T>;\n    public readonly argInitializers: readonly RuntimeDirectInitializer[];\n\n    public readonly receiver?: CPPObject<CompleteClassType>\n\n    // public readonly hasBeenCalled: boolean = false;\n\n    public readonly index: typeof INDEX_FUNCTION_CALL_PUSH | typeof INDEX_FUNCTION_CALL_ARGUMENTS | typeof INDEX_FUNCTION_CALL_CALL | typeof INDEX_FUNCTION_CALL_RETURN;\n\n    public constructor(model: CompiledFunctionCall<T>, parent: RuntimeConstruct, receiver?: CPPObject<CompleteClassType>) {\n        super(model, \"call\", parent);\n\n        this.receiver = receiver;\n\n        // TODO can i get rid of the non-null assertion or cast here?\n        // Basically, the assumption depends on a RuntimeFunctionCall only being created\n        // if the program was successfully linked (which also implies the FunctionDefinition was compiled)\n        // It also assumes the function definition has the correct return type.\n        let functionDef = <CompiledFunctionDefinition<T>>this.model.func.definition!;\n\n        // Create argument initializer instances\n        this.argInitializers = this.model.argInitializers.map((aInit) => aInit.createRuntimeInitializer(this));\n\n\n\n        // TODO: TCO? would reuse this.containingRuntimeFunction instead of creating new\n\n        this.calledFunction = functionDef.createRuntimeFunction(this, this.receiver);\n\n        // TODO: TCO? if using TCO, don't create a new return object, just reuse the old one\n        if (this.isReturnByValue()) {\n            // If return-by-value, set return object to temporary\n            this.calledFunction.setReturnObject(this.model.returnByValueTarget.objectInstance(this));\n        }\n        this.index = INDEX_FUNCTION_CALL_PUSH;\n    }\n\n    protected upNextImpl(): void {\n        if (this.index === INDEX_FUNCTION_CALL_ARGUMENTS) {\n            // Push all argument initializers. Push in reverse so they run left to right\n            // (although this is not strictly necessary given they are indeterminately sequenced)\n            for (var i = this.argInitializers.length - 1; i >= 0; --i) {\n                this.sim.push(this.argInitializers[i]);\n            }\n            (<Mutable<this>>this).index = INDEX_FUNCTION_CALL_CALL;\n        }\n        else if (this.index === INDEX_FUNCTION_CALL_RETURN) {\n            this.calledFunction.loseControl();\n            this.containingRuntimeFunction?.gainControl();\n            this.startCleanup();\n        }\n    }\n\n    protected stepForwardImpl(): void {\n        if (this.index === INDEX_FUNCTION_CALL_PUSH) {\n\n            // TODO: TCO? just do a tailCallReset, send \"tailCalled\" message\n\n            this.calledFunction.pushStackFrame();\n            (<Mutable<this>>this).index = INDEX_FUNCTION_CALL_ARGUMENTS;\n        }\n        else if (this.index === INDEX_FUNCTION_CALL_CALL) {\n\n            this.containingRuntimeFunction?.loseControl();\n            this.sim.push(this.calledFunction);\n            this.calledFunction.gainControl();\n            this.receiver && this.receiver.callReceived();\n\n            // (<Mutable<this>>this).hasBeenCalled = true;\n            this.observable.send(\"called\", this.calledFunction);\n\n            (<Mutable<this>>this).index = INDEX_FUNCTION_CALL_RETURN;\n        }\n\n    }\n\n    public isReturnByValue() : this is RuntimeFunctionCall<FunctionType<AtomicType | CompleteClassType>> {\n        return this.model.isReturnByValue();\n    }\n}\n\n\n\nexport interface FunctionCallExpressionASTNode extends ASTNode {\n    readonly construct_type: \"function_call_expression\";\n    readonly operand: ExpressionASTNode;\n    readonly args: readonly ExpressionASTNode[];\n}\n\n// type FunctionResultType<T extends FunctionType> = NoRefType<Exclude<T[\"returnType\"], VoidType>>; // TODO: this isn't used? should I use it somewhere?\n// type ReturnTypeVC<RT extends PotentialReturnType> = RT extends ReferenceType ? \"lvalue\" : \"prvalue\";\n\n\nexport class FunctionCallExpression extends Expression<FunctionCallExpressionASTNode> {\n    public readonly construct_type = \"function_call_expression\";\n\n    public readonly type?: PeelReference<CompleteReturnType>;\n    public readonly valueCategory?: ValueCategory;\n\n    public readonly operand: Expression;\n    public readonly originalArgs: readonly Expression[];\n    public readonly call?: FunctionCall;\n\n    public constructor(context: ExpressionContext, ast: FunctionCallExpressionASTNode | undefined, operand: Expression, args: readonly Expression[]) {\n        super(context, ast);\n\n        this.attach(this.operand = operand);\n        this.originalArgs = args;\n\n        // If any arguments are not well typed, we can't select a function.\n        if (!allWellTyped(args)) {\n            // type, valueCategory, and call remain undefined\n            this.attachAll(args);\n            return;\n        }\n\n        if (!(operand instanceof IdentifierExpression || operand instanceof DotExpression || operand instanceof ArrowExpression)) {\n            this.addNote(CPPError.expr.functionCall.invalid_operand_expression(this, operand));\n            this.attachAll(args);\n            return;\n        }\n\n        if (!operand.entity) {\n            // type, valueCategory, and call remain undefined\n            // operand will already have an error about the failed lookup\n            this.attachAll(args);\n            return;\n        }\n\n        if (!(operand.entity instanceof FunctionEntity)) {\n            // type, valueCategory, and call remain undefined\n            this.addNote(CPPError.expr.functionCall.operand(this, operand.entity));\n            this.attachAll(args);\n            return;\n        }\n\n\n        if (!operand.entity.returnsCompleteType()) {\n            this.attachAll(args);\n            this.addNote(CPPError.expr.functionCall.incomplete_return_type(this, operand.entity.type.returnType));\n            return;\n        }\n\n        let returnType = operand.entity.type.returnType;\n        this.type = peelReference(returnType);\n\n        this.valueCategory = returnType instanceof ReferenceType ? \"lvalue\" : \"prvalue\";\n\n        // let staticReceiver: ObjectEntity<CompleteClassType> | undefined;\n        // if (operand instanceof DotExpression) {\n        //     staticReceiver = operand.functionCallReceiver;\n        // }\n\n        // If we get to here, we don't attach the args directly since they will be attached under the function call.\n        this.attach(this.call = new FunctionCall(context, operand.entity, args, operand.context.contextualReceiverType));\n    }\n\n    public static createFromAST(ast: FunctionCallExpressionASTNode, context: ExpressionContext): FunctionCallExpression | MagicFunctionCallExpression {\n        let args = ast.args.map(arg => createExpressionFromAST(arg, context));\n\n        if (ast.operand.construct_type === \"identifier_expression\") {\n            if (LOBSTER_MAGIC_FUNCTIONS.has(ast.operand.identifier)) {\n                return new MagicFunctionCallExpression(context, ast, <MAGIC_FUNCTION_NAMES>ast.operand.identifier, args);\n            }\n        }\n\n        let contextualParamTypes = args.map(arg => arg.type);\n        return new FunctionCallExpression(context, ast,\n            createExpressionFromAST(ast.operand, createExpressionContextWithParameterTypes(context, contextualParamTypes)),\n            args);\n    }\n\n    public createDefaultOutlet(this: CompiledFunctionCallExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new FunctionCallExpressionOutlet(element, this, parent);\n    }\n\n    // TODO\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n\n\n    // isTailChild : function(child){\n    //     return {isTail: child === this.funcCall\n    //     };\n    // }\n}\n\n// If it's a complete return type, it might have been behind a reference or maybe not.\n// If it's an incomplete type, the only way we could have returned it is if it was behind a reference.\ntype PossibleVC<T extends PeelReference<CompleteReturnType>> = T extends CompleteReturnType ? ValueCategory : \"lvalue\";\n\nexport interface TypedFunctionCallExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends FunctionCallExpression {\n    readonly type: T\n    readonly valueCategory: V;\n    readonly call: TypedFunctionCall<FunctionType<CompleteReturnType>>;\n}\n\nexport interface CompiledFunctionCallExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends TypedFunctionCallExpression<T, V>, SuccessfullyCompiled {\n\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n\n\n    readonly operand: CompiledFunctionIdentifierExpression | CompiledFunctionDotExpression | CompiledFunctionArrowExpression;\n    readonly originalArgs: readonly CompiledExpression[];\n    readonly call: CompiledFunctionCall<FunctionType<CompleteReturnType>>;\n}\n\nexport const INDEX_FUNCTION_CALL_EXPRESSION_OPERAND = 0;\nexport const INDEX_FUNCTION_CALL_EXPRESSION_CALL = 1;\nexport const INDEX_FUNCTION_CALL_EXPRESSION_RETURN = 2;\nexport class RuntimeFunctionCallExpression<T extends PeelReference<CompleteReturnType> = PeelReference<CompleteReturnType>, V extends ValueCategory = ValueCategory> extends RuntimeExpression<T, V, CompiledFunctionCallExpression<T, V>> {\n\n    public readonly operand: RuntimeFunctionIdentifierExpression | RuntimeFunctionDotExpression | RuntimeFunctionArrowExpression;\n    public readonly call?: RuntimeFunctionCall<FunctionType<CompleteReturnType>>;\n\n    public readonly index: typeof INDEX_FUNCTION_CALL_EXPRESSION_OPERAND | typeof INDEX_FUNCTION_CALL_EXPRESSION_CALL | typeof INDEX_FUNCTION_CALL_EXPRESSION_RETURN = INDEX_FUNCTION_CALL_EXPRESSION_OPERAND;\n\n    public constructor(model: CompiledFunctionCallExpression<T,V>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.operand = <this[\"operand\"]>createRuntimeExpression(this.model.operand, this);\n    }\n\n    protected upNextImpl() {\n        if (this.index === INDEX_FUNCTION_CALL_EXPRESSION_OPERAND) {\n            this.sim.push(this.operand);\n            (<Mutable<this>>this).index = INDEX_FUNCTION_CALL_EXPRESSION_CALL;\n        }\n        else if (this.index === INDEX_FUNCTION_CALL_EXPRESSION_CALL) {\n            // We check the contextual receiver here since it changes after the operand is evaluated.\n            (<Mutable<this>>this).call = this.model.call.createRuntimeFunctionCall(this, this.operand.contextualReceiver);\n            this.sim.push(this.call!);\n            (<Mutable<this>>this).index = INDEX_FUNCTION_CALL_EXPRESSION_RETURN;\n        }\n        else if (this.index === INDEX_FUNCTION_CALL_EXPRESSION_RETURN) {\n\n            // Note: cannot use this.model.type here, since that is the type of the function\n            // call expression, which would have had the reference type removed if this was return\n            // by reference. Instead, use the return type of the called function itself, which will have\n            // the reference type intact.\n            let returnType = this.model.call.func.type.returnType;\n\n            if (returnType.isVoidType()) {\n                // this.setEvalResult(null); // TODO: type system won't allow this currently\n            }\n            else if (returnType.isReferenceType()) {\n                // Return by reference is lvalue and yields the returned object\n                let retObj = <CPPObject>this.call!.calledFunction.returnObject!;\n                this.setEvalResult(<VCResultTypes<T,V>>retObj);\n            }\n            else if (returnType.isAtomicType()) {\n                // Return by value of atomic type. In this case, we can look up\n                // the value of the return object and use that as the eval result\n                let retObj = <CPPObject<AtomicType>>this.call!.calledFunction.returnObject!;\n                this.setEvalResult(<VCResultTypes<T,V>>retObj.getValue());\n            }\n            else {\n                // Return by value of a non-atomic type. In this case, it's still a prvalue\n                // but is the temporary object rather than its value.\n                let retObj = <CPPObject>this.call!.calledFunction.returnObject!;\n                this.setEvalResult(<VCResultTypes<T,V>>retObj);\n            }\n            this.startCleanup();\n        }\n    }\n\n    protected stepForwardImpl() {\n        // nothing to do\n    }\n}\n\n// OLD stuff kept in case it's relevant for operator overloads, but probably won't be needed\n// export var FunctionCallExpression  = Expression.extend({\n//     _name: \"FunctionCallExpression\",\n//     initIndex: \"operand\",\n\n    // bindFunction : function(argTypes){\n    //     var self = this;\n    //     if (isA(this.operand.type, Types.Class)){\n    //         // Check for function call operator and if so, find function\n    //         // TODO: I think this breaks given multiple overloaded function call operators?\n\n    //         try{\n    //             this.callOp = this.operand.type.classScope.requiredMemberLookup(\"operator()\", {paramTypes:argTypes, isThisConst: this.operand.type.isConst});\n    //             this.boundFunction = this.callOp;\n    //             this.type = noRef(this.callOp.type.returnType);\n    //         }\n    //         catch(e){\n    //             if (isA(e, SemanticExceptions.BadLookup)){\n    //                 this.addNote(CPPError.expr.functionCall.not_defined(this, this.operand.type, argTypes));\n    //                 this.addNote(e.annotation(this));\n    //             }\n    //             else{\n    //                 throw e;\n    //             }\n    //         }\n    //     }\n    //     else if (isA(this.operand.entity, FunctionEntity)){ // TODO: use of entity property here feels hacky\n    //         // If it's an identifier, dot, arrow, etc. that denote an entity - just bind that\n    //         this.staticFunction = this.operand.entity;\n    //         this.staticFunctionType = this.staticFunction.type;\n    //         this.boundFunction = this.operand.entity;\n    //     }\n    //     else if (isA(this.operand.type, Types.Pointer) && isA(this.operand.type.ptrTo, Types.Function)){\n    //         this.staticFunctionType = this.operand.type.ptrTo;\n    //         this.boundFunction = PointedFunctionEntity.instance(this.operand.type.ptrTo);\n    //         this.operand = convertToPRValue(this.operand);\n    //     }\n    //     else if (isA(this.operand.type, Types.Function)){\n    //         this.staticFunctionType = this.operand.type;\n    //         this.boundFunction = PointedFunctionEntity.instance(this.operand.type);\n    //     }\n    //     else{\n    //         this.addNote(CPPError.expr.functionCall.operand(this, this.operand));\n    //     }\n\n    // },\n\n\n// });\n","import { FunctionType, VoidType, PeelReference, CompleteObjectType, ReferenceType, AtomicType, CompleteClassType, CompleteReturnType, PotentiallyCompleteObjectType, ReferredType } from \"./types\";\nimport { RuntimeConstruct } from \"./constructs\";\nimport { CompiledFunctionDefinition } from \"./declarations\";\nimport { RuntimeFunctionCall } from \"./functionCall\";\nimport { MemoryFrame, Value } from \"./runtimeEnvironment\";\nimport { CPPObject } from \"./objects\";\nimport { RuntimeBlock, createRuntimeStatement } from \"./statements\";\nimport { Simulation } from \"./Simulation\";\nimport { Mutable, assert } from \"../util/util\";\nimport { LocalObjectEntity, LocalReferenceEntity } from \"./entities\";\nimport { RuntimeCtorInitializer } from \"./initializers\";\n\nenum RuntimeFunctionIndices {\n\n}\n\nexport class RuntimeFunction<T extends FunctionType<CompleteReturnType> = FunctionType<CompleteReturnType>> extends RuntimeConstruct<CompiledFunctionDefinition<T>> {\n\n    public readonly caller?: RuntimeFunctionCall;\n    // public readonly containingRuntimeFunction: this;\n\n    public readonly stackFrame?: MemoryFrame;\n\n    public readonly receiver?: CPPObject<CompleteClassType>;\n\n    /**\n     * The object returned by the function, either an original returned-by-reference or a temporary\n     * object created to hold a return-by-value. Once the function call has been executed, will be\n     * defined unless it's a void function.\n     */\n    public readonly returnObject?: T extends FunctionType<infer RT> ? (\n        RT extends VoidType ? undefined : \n        RT extends CompleteObjectType ? CPPObject<RT> :\n        RT extends ReferenceType<CompleteObjectType> ? CPPObject<ReferredType<RT>> : never\n        ): never;\n        // T extends FunctionType<VoidType> ? undefined :\n        // T extends FunctionType<ReferenceType<CompleteObjectType>> ? CPPObject<ReferredType<T[\"returnType\"]>> :\n        // T extends (FunctionType<AtomicType> | FunctionType<CompleteClassType>) ? CPPObject<T[\"returnType\"]> :\n        // T extends FunctionType<infer T> ? \n        // never; // includese FunctionType<ReferenceType<IncompleteObjectType>> - that should never be created at runtime\n\n    public readonly hasControl: boolean = false;\n\n    public readonly ctorInitializer?: RuntimeCtorInitializer;\n    public readonly body: RuntimeBlock;\n\n    public constructor(model: CompiledFunctionDefinition<T>, sim: Simulation, caller: RuntimeFunctionCall | null, receiver?: CPPObject<CompleteClassType>) {\n        super(model, \"function\", caller || sim);\n        if (caller) { this.caller = caller };\n        this.receiver = receiver;\n        // A function is its own containing function context\n        this.setContainingRuntimeFunction(this);\n        this.ctorInitializer = this.model.ctorInitializer?.createRuntimeCtorInitializer(this);\n        this.body = createRuntimeStatement(this.model.body, this);\n    }\n\n\n    // setCaller : function(caller) {\n    //     this.i_caller = caller;\n    // },\n\n    public pushStackFrame() {\n        (<Mutable<this>>this).stackFrame = this.sim.memory.stack.pushFrame(this);\n    }\n\n    public popStackFrame() {\n        this.sim.memory.stack.popFrame(this);\n    }\n\n    /**\n     * Sets the return object for this function. May only be invoked once.\n     * e.g.\n     *  - return-by-value: The caller should set the return object to a temporary object, whose value\n     *                     may be initialized by a return statement.\n     *  - return-by-reference: When the function is finished, is set to the object returned.\n     */\n    public setReturnObject<T extends FunctionType<AtomicType | CompleteClassType>>(this: RuntimeFunction<T>, obj: CPPObject<T[\"returnType\"]>) : void;\n    public setReturnObject<T extends ReferenceType<CompleteObjectType>>(this: RuntimeFunction<FunctionType<T>>, obj: CPPObject<ReferredType<T>>) : void;\n    public setReturnObject(obj: CPPObject) {\n        // This should only be used once\n        assert(!this.returnObject);\n        (<Mutable<this>>this).returnObject = <this[\"returnObject\"]>obj;\n\n    }\n\n    public getParameterObject(num: number) {\n        let param = this.model.parameters[num].declaredEntity;\n        assert(param?.variableKind === \"object\", \"Can't look up an object for a reference parameter.\");\n        assert(this.stackFrame);\n        return this.stackFrame.localObjectLookup(param);\n    }\n\n    public initializeParameterObject(num: number, value: Value<AtomicType>) {\n        let param = this.model.parameters[num].declaredEntity;\n        assert(param instanceof LocalObjectEntity, \"Can't look up an object for a reference parameter.\");\n        assert(this.stackFrame);\n        assert(param.type.isAtomicType());\n        this.stackFrame.initializeLocalObject(<LocalObjectEntity<AtomicType>>param, <Value<AtomicType>>value);\n    }\n\n    public bindReferenceParameter(num: number, obj: CPPObject) {\n        let param = this.model.parameters[num].declaredEntity;\n        assert(param instanceof LocalReferenceEntity, \"Can't bind an object parameter like a reference.\");\n        assert(this.stackFrame);\n        return this.stackFrame.bindLocalReference(param, obj);\n    }\n\n    public gainControl() {\n        (<boolean>this.hasControl) = true;\n        this.observable.send(\"gainControl\");\n    }\n\n    public loseControl() {\n        (<boolean>this.hasControl) = true;\n        this.observable.send(\"loseControl\");\n    }\n\n    // private encounterReturnStatement : function() {\n    //     this.i_returnStatementEncountered = true;\n    // },\n\n    // returnStatementEncountered : function() {\n    //     return this.i_returnStatementEncountered;\n    // }\n\n\n    // tailCallReset : function(sim: Simulation, rtConstruct: RuntimeConstruct, caller) {\n\n    //     // Need to unseat all reference that were on the stack frame for the function.\n    //     // Otherwise, lookup weirdness can occur because the reference lookup code wasn't\n    //     // intended to be able to reseat references and parameter initializers will instead\n    //     // think they're supposed to pass into the things that the references on the existing\n    //     // stack frame were referring to.\n    //     inst.stackFrame.setUpReferenceInstances();\n\n    //     inst.reusedFrame = true;\n    //     inst.setCaller(caller);\n    //     inst.index = this.initIndex;\n    //     sim.popUntil(inst);\n    //     //inst.send(\"reset\"); // don't need i think\n    //     return inst;\n    // },\n\n    protected stepForwardImpl(): void {\n            this.popStackFrame();\n            this.startCleanup();\n    }\n\n    protected upNextImpl(): void {\n        if (this.ctorInitializer && !this.ctorInitializer.isDone) {\n            this.sim.push(this.ctorInitializer);\n        }\n        else if (!this.body.isDone) {\n            this.sim.push(this.body);\n        }\n    }\n\n    // upNext : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    // }\n\n    // stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    //     if (inst.index === \"afterDestructors\"){\n    //         this.done(sim, inst);\n    //     }\n    // }\n\n    // done : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n\n    //     // If non-void return type, check that return object was initialized.\n    //     // Non-void functions should be guaranteed to have a returnObject (even if it might be a reference)\n    //     if (!isA(this.type.returnType, Types.Void) && !inst.returnStatementEncountered()){\n    //         this.flowOffNonVoid(sim, inst);\n    //     }\n\n    //     if (inst.receiver){\n    //         inst.receiver.callEnded();\n    //     }\n\n    //     sim.memory.stack.popFrame(inst);\n    //     sim.pop(inst);\n    // }\n\n    // flowOffNonVoid : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n    //     if (this.isMain){\n    //         inst.i_returnObject.setValue(Value.instance(0, Types.Int.instance()));\n    //     }\n    //     else{\n    //         sim.implementationDefinedBehavior(\"Yikes! This is a non-void function (i.e. it's supposed to return something), but it ended without hitting a return statement\");\n    //     }\n    // }\n\n}\n\n// TODO: is this needed? I think RuntimeFunction may be able to handle all of it.\n// export class RuntimeMemberFunction extends RuntimeFunction {\n\n//     public readonly receiver: CPPObject<ClassType>;\n\n//     public constructor (model: FunctionDefinition, parent: RuntimeFunctionCall, receiver: CPPObject<ClassType>) {\n//         super(model, parent);\n//         this.receiver = receiver;\n//     }\n\n// }","import { ASTNode, SuccessfullyCompiled, TranslationUnitContext, RuntimeConstruct, CPPConstruct, CompiledTemporaryDeallocator, ExpressionContext, BlockContext, ClassContext, MemberFunctionContext, MemberBlockContext, BasicCPPConstruct, createImplicitContext, InvalidConstruct } from \"./constructs\";\nimport { PotentialFullExpression, RuntimePotentialFullExpression } from \"./PotentialFullExpression\";\nimport { ExpressionASTNode, StringLiteralExpression, CompiledStringLiteralExpression, RuntimeStringLiteralExpression, createRuntimeExpression, standardConversion, overloadResolution, createExpressionFromAST, InitializerListExpressionASTNode, InitializerListExpression } from \"./expressions\";\nimport { ObjectEntity, UnboundReferenceEntity, ArraySubobjectEntity, FunctionEntity, ReceiverEntity, BaseSubobjectEntity, MemberObjectEntity, ObjectEntityType, TemporaryObjectEntity } from \"./entities\";\nimport { CompleteObjectType, AtomicType, BoundedArrayType, referenceCompatible, sameType, Char, FunctionType, VoidType, CompleteClassType, PotentiallyCompleteObjectType, ReferenceType, ReferredType } from \"./types\";\nimport { assertFalse, assert, asMutable, assertNever, Mutable } from \"../util/util\";\nimport { CPPError } from \"./errors\";\nimport { Simulation } from \"./Simulation\";\nimport { CPPObject, TemporaryObject } from \"./objects\";\nimport { Expression, CompiledExpression, RuntimeExpression, allWellTyped } from \"./expressionBase\";\nimport { InitializerOutlet, ConstructOutlet, AtomicDefaultInitializerOutlet, ArrayDefaultInitializerOutlet, ReferenceDirectInitializerOutlet, AtomicDirectInitializerOutlet, ReferenceCopyInitializerOutlet, AtomicCopyInitializerOutlet, ClassDefaultInitializerOutlet, ClassDirectInitializerOutlet, ClassCopyInitializerOutlet, CtorInitializerOutlet } from \"../view/codeOutlets\";\nimport { Value } from \"./runtimeEnvironment\";\nimport { FunctionCall, CompiledFunctionCall, RuntimeFunctionCall } from \"./functionCall\";\nimport { Statement, UnsupportedStatement } from \"./statements\";\nimport { CtorInitializerASTNode } from \"./declarations\";\nimport { lookupTypeInContext, OpaqueExpression } from \"./opaqueExpression\";\n\nexport type InitializerASTNode = DirectInitializerASTNode | CopyInitializerASTNode | ListInitializerASTNode;\n\nexport type InitializerKind = \"default\" | DirectInitializerKind | \"list\";\n\nexport abstract class Initializer extends PotentialFullExpression {\n\n    public abstract readonly target: ObjectEntity | UnboundReferenceEntity;\n\n    public abstract createRuntimeInitializer(parent: RuntimeConstruct): RuntimeInitializer;\n\n    public abstract createDefaultOutlet(this: CompiledInitializer, element: JQuery, parent?: ConstructOutlet): InitializerOutlet;\n\n    public isTailChild(child: CPPConstruct) {\n        return { isTail: true };\n    }\n\n    public abstract readonly kind: InitializerKind;\n\n}\n\nexport interface CompiledInitializer<T extends ObjectEntityType = ObjectEntityType> extends Initializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly target: ObjectEntity<Exclude<T, ReferenceType>> | UnboundReferenceEntity<Extract<T, ReferenceType>>;\n}\n\nexport abstract class RuntimeInitializer<C extends CompiledInitializer = CompiledInitializer> extends RuntimePotentialFullExpression<C> {\n\n    protected constructor(model: C, parent: RuntimeConstruct) {\n        super(model, \"initializer\", parent);\n    }\n\n}\n\n\n\n\n\nexport abstract class DefaultInitializer extends Initializer {\n\n    public static create(context: TranslationUnitContext, target: UnboundReferenceEntity): ReferenceDefaultInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity<AtomicType>): AtomicDefaultInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity<BoundedArrayType>): ArrayDefaultInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity<CompleteClassType>): ClassDefaultInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity<CompleteObjectType>): AtomicDefaultInitializer | ArrayDefaultInitializer | ClassDefaultInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity | UnboundReferenceEntity): ReferenceDefaultInitializer | AtomicDefaultInitializer | ArrayDefaultInitializer | ClassDefaultInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity | UnboundReferenceEntity): DefaultInitializer {\n        if (target.type.isReferenceType()) {\n            return new ReferenceDefaultInitializer(context, <UnboundReferenceEntity>target);\n        }\n        else if (target.type.isAtomicType()) {\n            return new AtomicDefaultInitializer(context, <ObjectEntity<AtomicType>>target);\n        }\n        else if (target.type.isBoundedArrayType()) {\n            return new ArrayDefaultInitializer(context, <ObjectEntity<BoundedArrayType>>target);\n        }\n        else if (target.type.isCompleteClassType()) {\n            return new ClassDefaultInitializer(context, <ObjectEntity<CompleteClassType>> target);\n        }\n        else {\n            return assertNever(target.type);\n        }\n    }\n\n    public readonly kind = \"default\";\n\n    public abstract createRuntimeInitializer<T extends CompleteObjectType>(this: CompiledDefaultInitializer<T>, parent: RuntimeConstruct): RuntimeDefaultInitializer<T>;\n}\n\nexport interface CompiledDefaultInitializer<T extends CompleteObjectType = CompleteObjectType> extends DefaultInitializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly target: ObjectEntity<T>;\n}\n\nexport abstract class RuntimeDefaultInitializer<T extends CompleteObjectType = CompleteObjectType, C extends CompiledDefaultInitializer<T> = CompiledDefaultInitializer<T>> extends RuntimeInitializer<C> {\n\n    protected constructor(model: C, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n}\n\nexport class ReferenceDefaultInitializer extends DefaultInitializer {\n    public readonly construct_type = \"ReferenceDefaultInitializer\";\n\n    public readonly target: UnboundReferenceEntity;\n\n    public constructor(context: TranslationUnitContext, target: UnboundReferenceEntity) {\n        super(context, undefined);\n        this.target = target;\n\n        // Cannot default initialize a reference\n        this.addNote(CPPError.declaration.init.referenceBind(this));\n    }\n\n    public createRuntimeInitializer(parent: RuntimeConstruct): never {\n        return assertFalse(\"A default initializer for a reference is not allowed.\");\n    }\n\n    public createDefaultOutlet(element: JQuery, parent?: ConstructOutlet) {\n        return assertFalse(\"Cannot create an outlet for a reference default initializer, since such an initializer is always ill-formed.\");\n    }\n\n    public explain(sim: Simulation, rtConstruct: RuntimeConstruct): never {\n        return assertFalse(\"A default initializer for a reference is not allowed.\");\n    }\n}\n\n// Note: No CompiledReferenceDefaultInitializer or RuntimeReferenceDefaultInitializer classes since\n//       default initialization of a reference is always ill-formed.\n\n\nexport class AtomicDefaultInitializer extends DefaultInitializer {\n    public readonly construct_type = \"AtomicDefaultInitializer\";\n\n    public readonly target: ObjectEntity<AtomicType>;\n\n    public constructor(context: TranslationUnitContext, target: ObjectEntity<AtomicType>) {\n        super(context, undefined);\n        this.target = target;\n    }\n\n    public createRuntimeInitializer<T extends AtomicType>(this: CompiledAtomicDefaultInitializer<T>, parent: RuntimeConstruct): RuntimeAtomicDefaultInitializer<T>;\n    public createRuntimeInitializer<T extends CompleteObjectType>(this: CompiledDefaultInitializer<T>, parent: RuntimeConstruct): never;\n    public createRuntimeInitializer<T extends AtomicType>(this: CompiledAtomicDefaultInitializer<T>, parent: RuntimeConstruct): RuntimeAtomicDefaultInitializer<T> {\n        return new RuntimeAtomicDefaultInitializer(this, parent);\n    }\n\n    public createDefaultOutlet(this: CompiledAtomicDefaultInitializer, element: JQuery, parent?: ConstructOutlet): AtomicDefaultInitializerOutlet {\n        return new AtomicDefaultInitializerOutlet(element, this, parent);\n    }\n\n    public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n        let targetDesc = this.target.describe();\n        return { message: \"No initialization will take place. \" + (targetDesc.name || targetDesc.message) + \" will have a junk value.\" };\n    }\n}\n\nexport interface CompiledAtomicDefaultInitializer<T extends AtomicType = AtomicType> extends AtomicDefaultInitializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly target: ObjectEntity<T>;\n}\n\nexport class RuntimeAtomicDefaultInitializer<T extends AtomicType = AtomicType> extends RuntimeDefaultInitializer<T, CompiledAtomicDefaultInitializer<T>> {\n\n    public constructor(model: CompiledAtomicDefaultInitializer<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n\n    protected upNextImpl() {\n        // No initialization. Object has junk value.\n        let target = this.model.target.runtimeLookup(this);\n        this.observable.send(\"atomicObjectInitialized\", this);\n        this.startCleanup();\n    }\n\n    public stepForwardImpl() {\n        // do nothing\n    }\n}\n\nexport class ArrayDefaultInitializer extends DefaultInitializer {\n    public readonly construct_type = \"ArrayDefaultInitializer\";\n\n    public readonly target: ObjectEntity<BoundedArrayType>;\n    public readonly elementInitializers?: DefaultInitializer[];\n\n    public constructor(context: TranslationUnitContext, target: ObjectEntity<BoundedArrayType>) {\n        super(context, undefined);\n\n        this.target = target;\n\n        // If it's an array of atomic types, do nothing.\n        let type = this.target.type;\n        if (type.elemType instanceof AtomicType) {\n            // Do nothing\n        }\n        else {\n            this.elementInitializers = [];\n            for (let i = 0; i < type.length; ++i) {\n                let elemInit = DefaultInitializer.create(context, new ArraySubobjectEntity(this.target, i));\n                this.elementInitializers.push(elemInit);\n                this.attach(elemInit);\n                if (elemInit.notes.hasErrors) {\n                    this.addNote(CPPError.declaration.init.array_default_init(this));\n                    break;\n                }\n            }\n        }\n\n    }\n\n    public createRuntimeInitializer<T extends BoundedArrayType>(this: CompiledArrayDefaultInitializer<T>, parent: RuntimeConstruct): RuntimeArrayDefaultInitializer<T>;\n    public createRuntimeInitializer<T extends CompleteObjectType>(this: CompiledDefaultInitializer<T>, parent: RuntimeConstruct): never;\n    public createRuntimeInitializer<T extends BoundedArrayType>(this: CompiledArrayDefaultInitializer<T>, parent: RuntimeConstruct): RuntimeArrayDefaultInitializer<T> {\n        return new RuntimeArrayDefaultInitializer(this, parent);\n    }\n\n    public createDefaultOutlet(this: CompiledArrayDefaultInitializer, element: JQuery, parent?: ConstructOutlet): ArrayDefaultInitializerOutlet {\n        return new ArrayDefaultInitializerOutlet(element, this, parent);\n    }\n\n    public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n        let targetDesc = this.target.describe();\n        let targetType = this.target.type;\n\n        if (targetType.length === 0) {\n            return { message: \"No initialization is performed for \" + (targetDesc.name || targetDesc.message) + \"because the array has length 0.\" };\n        }\n        else if (targetType.elemType instanceof AtomicType) {\n            return { message: \"No initialization will take place. The elements of \" + (targetDesc.name || targetDesc.message) + \" will have junk values.\" };\n        }\n        else {\n            return {\n                message: \"Each element of \" + (targetDesc.name || targetDesc.message) + \" will be default-initialized. For example, \" +\n                    this.elementInitializers![0].explain(sim, rtConstruct)\n            };\n        }\n    }\n\n}\n\nexport interface CompiledArrayDefaultInitializer<T extends BoundedArrayType = BoundedArrayType> extends ArrayDefaultInitializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly target: ObjectEntity<T>;\n    readonly elementInitializers?: CompiledDefaultInitializer<T[\"elemType\"]>[];\n}\n\nexport class RuntimeArrayDefaultInitializer<T extends BoundedArrayType = BoundedArrayType> extends RuntimeDefaultInitializer<T, CompiledArrayDefaultInitializer<T>> {\n\n    public readonly elementInitializers?: RuntimeDefaultInitializer<T[\"elemType\"]>[];\n\n    private index = 0;\n\n    public constructor(model: CompiledArrayDefaultInitializer<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        if (this.model.elementInitializers) {\n            this.elementInitializers = this.model.elementInitializers.map((elemInit) => {\n                return elemInit.createRuntimeInitializer(this);\n            });\n        }\n    }\n\n    protected upNextImpl() {\n        if (this.elementInitializers && this.index < this.elementInitializers.length) {\n            this.sim.push(this.elementInitializers[this.index++])\n        }\n        else {\n            let target = this.model.target.runtimeLookup(this);\n            this.observable.send(\"arrayObjectInitialized\", this);\n            this.startCleanup();\n        }\n    }\n\n    public stepForwardImpl() {\n        // do nothing\n    }\n\n}\n\nexport class ClassDefaultInitializer extends DefaultInitializer {\n    public readonly construct_type = \"ClassDefaultInitializer\";\n\n    public readonly target: ObjectEntity<CompleteClassType>;\n    public readonly ctor?: FunctionEntity<FunctionType<VoidType>>;\n    public readonly ctorCall?: FunctionCall;\n\n    public constructor(context: TranslationUnitContext, target: ObjectEntity<CompleteClassType>) {\n        super(context, undefined);\n\n        this.target = target;\n\n        // Try to find default constructor. Not using lookup because constructors have no name.\n        // TODO: do I need to tell overloadResolution what the receiver type is here? they're all ctors i guess\n        let overloadResult = overloadResolution(target.type.classDefinition.constructors, []);\n        if (!overloadResult.selected) {\n            this.addNote(CPPError.declaration.init.no_default_constructor(this, this.target));\n            return;\n        }\n\n        this.ctor = overloadResult.selected;\n\n        this.ctorCall = new FunctionCall(context, this.ctor, [], target.type.cvUnqualified());\n        this.attach(this.ctorCall);\n        // this.args = this.ctorCall.args;\n    }\n\n    public createRuntimeInitializer<T extends CompleteClassType>(this: CompiledClassDefaultInitializer<T>, parent: RuntimeConstruct) : RuntimeClassDefaultInitializer<T>;\n    public createRuntimeInitializer<T extends CompleteObjectType>(this: CompiledDefaultInitializer<T>, parent: RuntimeConstruct) : never;\n    public createRuntimeInitializer<T extends CompleteClassType>(this: CompiledClassDefaultInitializer<T>, parent: RuntimeConstruct) : RuntimeClassDefaultInitializer<T> {\n        return new RuntimeClassDefaultInitializer(this, parent);\n    }\n\n    public createDefaultOutlet(this: CompiledClassDefaultInitializer, element: JQuery, parent?: ConstructOutlet): ClassDefaultInitializerOutlet {\n        return new ClassDefaultInitializerOutlet(element, this, parent);\n    }\n\n    public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n        let targetDesc = this.target.describe();\n        // TODO: what if there is an error that causes no ctor to be found/available\n        return {message: (targetDesc.name || targetDesc.message) + \" will be initialized using \" + this.ctorCall!.describe(sim, rtConstruct).message};\n    }\n}\n\nexport interface CompiledClassDefaultInitializer<T extends CompleteClassType = CompleteClassType> extends ClassDefaultInitializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    \n    readonly target: ObjectEntity<T>;\n    readonly ctor: FunctionEntity<FunctionType<VoidType>>;\n    readonly ctorCall: CompiledFunctionCall<FunctionType<VoidType>>;\n}\n\nexport class RuntimeClassDefaultInitializer<T extends CompleteClassType = CompleteClassType> extends RuntimeDefaultInitializer<T, CompiledClassDefaultInitializer<T>> {\n\n    public readonly ctorCall: RuntimeFunctionCall<FunctionType<VoidType>>;\n\n    private index = \"callCtor\";\n\n    public constructor (model: CompiledClassDefaultInitializer<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.ctorCall = this.model.ctorCall.createRuntimeFunctionCall(this, this.model.target.runtimeLookup(this));\n    }\n\n    protected upNextImpl() {\n        if (this.index === \"callCtor\") {\n            this.sim.push(this.ctorCall);\n            this.index = \"done\";\n        }\n        else {\n            let target = this.model.target.runtimeLookup(this);\n            this.observable.send(\"initialized\", target);\n            this.startCleanup();\n        }\n    }\n\n    public stepForwardImpl() {\n        // do nothing\n    }\n\n}\n\n\n\n\n\n\n\nexport interface DirectInitializerASTNode extends ASTNode {\n    construct_type: \"direct_initializer\";\n    args: ExpressionASTNode[];\n}\n\n\nexport type DirectInitializerKind = \"direct\" | \"copy\";\n\nexport abstract class DirectInitializer extends Initializer {\n\n    public static create(context: TranslationUnitContext, target: UnboundReferenceEntity, args: readonly Expression[], kind: DirectInitializerKind): ReferenceDirectInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity<AtomicType>, args: readonly Expression[], kind: DirectInitializerKind): AtomicDirectInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity<BoundedArrayType>, args: readonly Expression[], kind: DirectInitializerKind) : ArrayDirectInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity<CompleteClassType>, args: readonly Expression[], kind: DirectInitializerKind) : ClassDirectInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity, args: readonly Expression[], kind: DirectInitializerKind): AtomicDirectInitializer | ArrayDirectInitializer | ClassDirectInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity | UnboundReferenceEntity, args: readonly Expression[], kind: DirectInitializerKind): ReferenceDirectInitializer | AtomicDirectInitializer | ArrayDirectInitializer | ClassDirectInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity | UnboundReferenceEntity, args: readonly Expression[], kind: DirectInitializerKind): DirectInitializer {\n        if (target.type.isReferenceType()) { // check for presence of bindTo to detect reference entities\n            return new ReferenceDirectInitializer(context, <UnboundReferenceEntity>target, args, kind);\n        }\n        else if (target.type.isAtomicType()) {\n            return new AtomicDirectInitializer(context, <ObjectEntity<AtomicType>>target, args, kind);\n        }\n        else if (target.type.isBoundedArrayType()) {\n            return new ArrayDirectInitializer(context, <ObjectEntity<BoundedArrayType>>target, args, kind);\n        }\n        else if (target.type.isCompleteClassType()) {\n            return new ClassDirectInitializer(context, <ObjectEntity<CompleteClassType>> target, args, kind);\n        }\n        else {\n            return assertNever(target.type);\n        }\n    }\n\n    public abstract readonly target: ObjectEntity | UnboundReferenceEntity;\n    public abstract readonly args: readonly Expression[];\n\n    public readonly kind: DirectInitializerKind;\n\n    public constructor(context: TranslationUnitContext, kind: DirectInitializerKind) {\n        super(context, undefined);\n        this.kind = kind;\n    }\n\n    public abstract createRuntimeInitializer<T extends ObjectEntityType>(this: CompiledDirectInitializer<T>, parent: RuntimeConstruct): RuntimeDirectInitializer<T>;\n}\n\n\nexport interface CompiledDirectInitializer<T extends ObjectEntityType = ObjectEntityType> extends DirectInitializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly target: ObjectEntity<Exclude<T, ReferenceType>> | UnboundReferenceEntity<Extract<T, ReferenceType>>;\n    readonly args: readonly CompiledExpression[];\n}\n\nexport abstract class RuntimeDirectInitializer<T extends ObjectEntityType = ObjectEntityType, C extends CompiledDirectInitializer<T> = CompiledDirectInitializer<T>> extends RuntimeInitializer<C> {\n\n    protected constructor(model: C, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n\n}\n\n\nexport class ReferenceDirectInitializer extends DirectInitializer {\n    public readonly construct_type = \"ReferenceDirectInitializer\";\n\n    public readonly target: UnboundReferenceEntity;\n    public readonly args: readonly Expression[];\n    public readonly arg?: Expression;\n\n    public constructor(context: TranslationUnitContext, target: UnboundReferenceEntity, args: readonly Expression[], kind: DirectInitializerKind) {\n        super(context, kind);\n        this.target = target;\n\n        assert(args.length > 0, \"Direct initialization must have at least one argument. (Otherwise it should be a default initialization.)\");\n        this.args = args;\n\n        // Note: It is ONLY ok to attach them all right away because no conversions are\n        // layered over the expressions for a reference initialization\n        args.forEach((a) => { this.attach(a); });\n\n        if (this.args.length > 1) {\n            this.addNote(CPPError.declaration.init.referenceBindMultiple(this));\n            return;\n        }\n        // this.returnByValueTarget = this.createTemporaryObject(returnType, `[${this.func.name}() return]`);\n        this.arg = this.args[0];\n        if (!this.arg.isWellTyped()) {\n            return;\n        }\n\n        let targetType = target.type;\n        if (!referenceCompatible(this.arg.type, targetType)) {\n            this.addNote(CPPError.declaration.init.referenceType(this, this.arg.type, targetType));\n        }\n        else if (this.arg.valueCategory === \"prvalue\" && !targetType.refTo.isConst) {\n            this.addNote(CPPError.declaration.init.referencePrvalueConst(this));\n        }\n        // can't bind to a prvalue. exception is that prvalues with class type must really be temporary objects\n        // we'll allow this for now. note that the lifetimes don't get extended, which is still TODO\n        else if (this.arg.valueCategory === \"prvalue\" && !this.arg.type.isCompleteClassType()) {\n            this.addNote(CPPError.lobster.referencePrvalue(this));\n        }\n    }\n\n    public createRuntimeInitializer<T extends ReferenceType<CompleteObjectType>>(this: CompiledReferenceDirectInitializer<T>, parent: RuntimeConstruct): RuntimeReferenceDirectInitializer<T>;\n    public createRuntimeInitializer<T extends ReferenceType<CompleteObjectType>>(this: CompiledDirectInitializer<T>, parent: RuntimeConstruct): never;\n    public createRuntimeInitializer<T extends ReferenceType<CompleteObjectType>>(this: CompiledReferenceDirectInitializer<T>, parent: RuntimeConstruct): RuntimeReferenceDirectInitializer<T> {\n        return new RuntimeReferenceDirectInitializer(this, parent);\n    }\n\n    public createDefaultOutlet(this: CompiledReferenceDirectInitializer, element: JQuery, parent?: ConstructOutlet): ReferenceDirectInitializerOutlet {\n        return this.kind === \"direct\" ?\n            new ReferenceDirectInitializerOutlet(element, this, parent) :\n            new ReferenceCopyInitializerOutlet(element, this, parent);\n    }\n\n    public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n        let targetDesc = this.target.describe();\n        let rhsDesc = this.args[0].describeEvalResult(0);\n        return { message: (targetDesc.name || targetDesc.message) + \" will be bound to \" + (rhsDesc.name || rhsDesc.message) + \".\" };\n    }\n}\n\nexport interface CompiledReferenceDirectInitializer<T extends ReferenceType = ReferenceType> extends ReferenceDirectInitializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly target: UnboundReferenceEntity<Extract<T, ReferenceType>>; // Not sure why, but the Extract here is needed to make TS happy\n    readonly args: readonly CompiledExpression[];\n\n    // Note: Compilation of the initializer checks for reference compatibility, which should ensure\n    // that the expression actually has the same type T as the reference to be bound. (For subtypes\n    // that are reference compatible, this is fine, since T will still be ClassType for both.)\n    readonly arg: CompiledExpression<ReferredType<T>, \"lvalue\">;\n}\n\nexport class RuntimeReferenceDirectInitializer<T extends ReferenceType<CompleteObjectType> = ReferenceType<CompleteObjectType>> extends RuntimeDirectInitializer<T, CompiledReferenceDirectInitializer<T>> {\n\n    public readonly args: readonly RuntimeExpression<ReferredType<T>, \"lvalue\">[];\n    public readonly arg: RuntimeExpression<ReferredType<T>, \"lvalue\">;\n\n    private alreadyPushed = false;\n\n    public constructor(model: CompiledReferenceDirectInitializer<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.arg = createRuntimeExpression(this.model.arg, this);\n        this.args = [this.arg];\n    }\n\n    protected upNextImpl() {\n        if (!this.alreadyPushed) {\n            this.sim.push(this.arg);\n            this.alreadyPushed = true;\n        }\n    }\n\n    // private notifyPassing() {\n    //     if (this.model.kind === \"parameter\") {\n    //         this.observable.send(\"passByReference\",\n    //             {\n    //                 target: <PassByReferenceParameterEntity<T>>this.model.target,\n    //                 arg: this.arg\n    //             });\n    //     }\n    //     else if (this.model.kind === \"return\") {\n    //         this.observable.send(\"returnByReference\",\n    //             {\n    //                 target: <ReturnByReferenceEntity<T>>this.model.target,\n    //                 arg: this.arg\n    //             });\n    //     }\n    // }\n\n    public stepForwardImpl() {\n        this.model.target.bindTo(this, <CPPObject<ReferredType<T>>>this.arg.evalResult);  //TODO not sure at all why this cast is necessary\n        // this.notifyPassing();\n        this.observable.send(\"referenceInitialized\", this);\n        this.startCleanup();\n    }\n}\n\nexport class AtomicDirectInitializer extends DirectInitializer {\n    public readonly construct_type = \"AtomicDirectInitializer\";\n\n    public readonly target: ObjectEntity<AtomicType>;\n    public readonly args: readonly Expression[];\n    public readonly arg: Expression;\n\n    public constructor(context: TranslationUnitContext, target: ObjectEntity<AtomicType>, args: readonly Expression[], kind: DirectInitializerKind) {\n        super(context, kind);\n\n        this.target = target;\n\n        let targetType = target.type;\n\n        assert(args.length > 0, \"Direct initialization must have at least one argument. (Otherwise it should be a default initialization.)\");\n\n        if (args.length > 1) {\n            this.arg = args[0];\n            this.attachAll(this.args = args);\n            this.addNote(CPPError.declaration.init.scalar_args(this, targetType));\n            return;\n        }\n\n        let arg = args[0];\n\n        //Attempt standard conversion to declared type, including lvalue to rvalue conversions\n        if (!arg.isWellTyped()) {\n            this.args = args;\n            this.attach(this.arg = arg); // only need to attach this one, because we're guaranteed args.length === 1 at this point\n            return;\n        }\n\n        let typedArg = standardConversion(arg, targetType);\n        this.args = [typedArg];\n        this.attach(this.arg = typedArg);\n\n        if (!sameType(typedArg.type, targetType)) {\n            this.addNote(CPPError.declaration.init.convert(this, typedArg.type, targetType));\n        }\n\n        // TODO: need to check that the arg is a prvalue\n\n\n    }\n\n    public createRuntimeInitializer<T extends AtomicType>(this: CompiledAtomicDirectInitializer<T>, parent: RuntimeConstruct): RuntimeAtomicDirectInitializer<T>;\n    public createRuntimeInitializer<T extends CompleteObjectType>(this: CompiledDirectInitializer<T>, parent: RuntimeConstruct): never;\n    public createRuntimeInitializer<T extends AtomicType>(this: any, parent: RuntimeConstruct): RuntimeAtomicDirectInitializer<T> {\n        return new RuntimeAtomicDirectInitializer(<CompiledAtomicDirectInitializer<T>>this, parent);\n    }\n\n    public createDefaultOutlet(this: CompiledAtomicDirectInitializer, element: JQuery, parent?: ConstructOutlet): AtomicDirectInitializerOutlet {\n        return this.kind === \"direct\" ?\n            new AtomicDirectInitializerOutlet(element, this, parent) :\n            new AtomicCopyInitializerOutlet(element, this, parent);\n    }\n\n    // TODO; change explain everywhere to be separate between compile time and runtime constructs\n    public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n        let targetDesc = this.target.runtimeLookup(rtConstruct).describe();\n        let rhsDesc = this.args[0].describeEvalResult(0);\n        return { message: (targetDesc.name || targetDesc.message) + \" will be initialized with \" + (rhsDesc.name || rhsDesc.message) + \".\" };\n    }\n}\n\nexport interface CompiledAtomicDirectInitializer<T extends AtomicType = AtomicType> extends AtomicDirectInitializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly target: ObjectEntity<Exclude<T, ReferenceType>>; // Not sure why, but the Exclude here is needed to make TS happy\n    readonly args: readonly CompiledExpression[];\n    readonly arg: CompiledExpression<T, \"prvalue\">;\n}\n\nexport class RuntimeAtomicDirectInitializer<T extends AtomicType = AtomicType> extends RuntimeDirectInitializer<T, CompiledAtomicDirectInitializer<T>> {\n\n    public readonly args: readonly RuntimeExpression<T, \"prvalue\">[];\n    public readonly arg: RuntimeExpression<T, \"prvalue\">;\n\n    private alreadyPushed = false;\n\n    public constructor(model: CompiledAtomicDirectInitializer<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.arg = createRuntimeExpression(this.model.arg, this);\n        this.args = [this.arg];\n    }\n\n    protected upNextImpl() {\n        if (!this.alreadyPushed) {\n            this.sim.push(this.arg);\n            this.alreadyPushed = true;\n        }\n    }\n\n    // private notifyPassing() {\n    //     if (this.model.kind === \"parameter\") {\n    //     }\n    //     else if (this.model.kind === \"return\") {\n    //         this.observable.send(\"returnByAtomicValue\",\n    //             {\n    //                 target: <ReturnObjectEntity<T>>this.model.target,\n    //                 arg: this.arg\n    //             });\n    //     }\n    // }\n\n    public stepForwardImpl() {\n        let target = this.model.target.runtimeLookup(this);\n        target.writeValue(this.arg.evalResult);\n        this.observable.send(\"atomicObjectInitialized\", this);\n        // this.notifyPassing();\n        this.startCleanup();\n    }\n}\n\n\n/**\n * Note: Only allowed use is to initialize a char array from a string literal, but this can readily be\n * created in the course of compiling a program if the code attempts to directly initialize an array. That's\n * desirable, because this class will give the appropriate error messages if it's anything other than a\n * char array initialized from a string literal.\n */\nexport class ArrayDirectInitializer extends DirectInitializer {\n    public readonly construct_type = \"ArrayDirectInitializer\";\n\n    public readonly target: ObjectEntity<BoundedArrayType>;\n    public readonly args: readonly Expression[];\n    public readonly arg?: StringLiteralExpression;\n\n    public constructor(context: TranslationUnitContext, target: ObjectEntity<BoundedArrayType>, args: readonly Expression[], kind: \"direct\" | \"copy\") {\n        super(context, kind);\n\n        this.target = target;\n        this.args = args;\n        args.forEach((a) => { this.attach(a); });\n\n        // TS type system ensures target is array type, but need to check element type and that args are a single string literal\n        let targetType = target.type;\n        let firstArg = args[0];\n        if (targetType.elemType.isType(Char) && args.length === 1 && firstArg.isStringLiteralExpression()) {\n            this.arg = firstArg;\n\n            if (firstArg.type.length > targetType.length) {\n                this.addNote(CPPError.declaration.init.stringLiteralLength(this, firstArg.type.length, targetType.length));\n            }\n        }\n        else {\n            this.addNote(CPPError.declaration.init.array_string_literal(this, targetType));\n        }\n    }\n\n    public createRuntimeInitializer(this: CompiledArrayDirectInitializer, parent: RuntimeConstruct): RuntimeArrayDirectInitializer;\n    public createRuntimeInitializer<T extends CompleteObjectType>(this: CompiledDirectInitializer<T>, parent: RuntimeConstruct): never;\n    public createRuntimeInitializer(this: any, parent: RuntimeConstruct): RuntimeArrayDirectInitializer {\n        return new RuntimeArrayDirectInitializer(this, parent);\n    }\n\n    public createDefaultOutlet(this: CompiledAtomicDirectInitializer, element: JQuery, parent?: ConstructOutlet): AtomicDirectInitializerOutlet {\n        return this.kind === \"direct\" ?\n            new AtomicDirectInitializerOutlet(element, this, parent) :\n            new AtomicCopyInitializerOutlet(element, this, parent);\n    }\n\n    // TODO; change explain everywhere to be separate between compile time and runtime constructs\n    public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n        let targetDesc = this.target.runtimeLookup(rtConstruct).describe();\n        let rhsDesc = this.args[0].describeEvalResult(0);\n        return { message: (targetDesc.name || targetDesc.message) + \" (a character array) will be initialized from the string literal \" + rhsDesc + \". Remember that a null character is automatically appended!\" };\n    }\n}\n\nexport interface CompiledArrayDirectInitializer extends ArrayDirectInitializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly target: ObjectEntity<BoundedArrayType<Char>>;\n    readonly args: readonly CompiledStringLiteralExpression[];\n    readonly arg: CompiledStringLiteralExpression;\n}\n\nexport class RuntimeArrayDirectInitializer extends RuntimeDirectInitializer<BoundedArrayType<Char>, CompiledArrayDirectInitializer> {\n\n    public readonly arg: RuntimeStringLiteralExpression;\n    public readonly args: readonly RuntimeStringLiteralExpression[];\n\n    private alreadyPushed = false;\n\n    public constructor(model: CompiledArrayDirectInitializer, parent: RuntimeConstruct) {\n        super(model, parent);\n        this.arg = createRuntimeExpression(this.model.arg, this);\n        this.args = [this.arg];\n    }\n\n    protected upNextImpl() {\n        if (!this.alreadyPushed) {\n            this.sim.push(this.arg);\n            this.alreadyPushed = true;\n        }\n    }\n\n    public stepForwardImpl() {\n\n        let target = this.model.target.runtimeLookup(this);\n        let charsToWrite = this.arg.evalResult.getValue();\n\n        // pad with zeros\n        while (charsToWrite.length < target.type.length) {\n            charsToWrite.push(Char.NULL_CHAR);\n        }\n\n        let arrayElemSubobjects = target.getArrayElemSubobjects();\n\n        // should be true if compilation was successful\n        assert(charsToWrite.length == arrayElemSubobjects.length);\n\n        charsToWrite.forEach((c, i) => arrayElemSubobjects[i].writeValue(c));\n\n        this.observable.send(\"initialized\", target);\n        this.startCleanup();\n    }\n}\n\n\n\n// export class ClassDefaultInitializer extends DefaultInitializer {\n//     public readonly construct_type = \"ClassDefaultInitializer\";\n\n//     public readonly target: ObjectEntity<CompleteClassType>;\n//     public readonly ctor?: FunctionEntity;\n//     public readonly ctorCall?: FunctionCall;\n\n//     public constructor(context: TranslationUnitContext, target: ObjectEntity<CompleteClassType>) {\n//         super(context, undefined);\n\n//         this.target = target;\n\n//         // Try to find default constructor. Not using lookup because constructors have no name.\n//         let overloadResult = overloadResolution(target.type.classDefinition.constructors, []);\n//         if (!overloadResult.selected) {\n//             this.addNote(CPPError.declaration.init.no_default_constructor(this, this.target));\n//             return;\n//         }\n\n//         this.ctor = overloadResult.selected;\n\n//         this.ctorCall = new FunctionCall(context, this.ctor, [], this.target);\n//         this.attach(this.ctorCall);\n//         // this.args = this.ctorCall.args;\n//     }\n\n//     public createRuntimeInitializer<T extends CompleteClassType>(this: CompiledClassDefaultInitializer<T>, parent: RuntimeConstruct) : RuntimeClassDefaultInitializer<T>;\n//     public createRuntimeInitializer<T extends ObjectType>(this: CompiledDefaultInitializer<T>, parent: RuntimeConstruct) : never;\n//     public createRuntimeInitializer<T extends CompleteClassType>(this: CompiledClassDefaultInitializer<T>, parent: RuntimeConstruct) : RuntimeClassDefaultInitializer<T> {\n//         return new RuntimeClassDefaultInitializer(this, parent);\n//     }\n\n//     public createDefaultOutlet(this: CompiledClassDefaultInitializer, element: JQuery, parent?: ConstructOutlet): ClassDefaultInitializerOutlet {\n//         return new ClassDefaultInitializerOutlet(element, this, parent);\n//     }\n\n//     public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//         let targetDesc = this.target.describe();\n//         // TODO: what if there is an error that causes no ctor to be found/available\n//         return {message: (targetDesc.name || targetDesc.message) + \" will be initialized using \" + this.ctorCall!.describe(sim, rtConstruct).message};\n//     }\n// }\n\n// export interface CompiledClassDefaultInitializer<T extends CompleteClassType = CompleteClassType> extends ClassDefaultInitializer, SuccessfullyCompiled {\n//     readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    \n//     readonly target: ObjectEntity<T>;\n//     readonly ctor: FunctionEntity<FunctionType<VoidType>>;\n//     readonly ctorCall: CompiledFunctionCall<FunctionType<VoidType>>;\n// }\n\n\n\n\nexport class ClassDirectInitializer extends DirectInitializer {\n    public readonly construct_type = \"ClassDirectInitializer\";\n\n    public readonly target: ObjectEntity<CompleteClassType>;\n    public readonly args: readonly Expression[];\n    \n    public readonly ctor?: FunctionEntity<FunctionType<VoidType>>;\n    public readonly ctorCall?: FunctionCall;\n\n    public constructor(context: TranslationUnitContext, target: ObjectEntity<CompleteClassType>, args: readonly Expression[], kind: DirectInitializerKind) {\n        super(context, kind);\n\n        this.target = target;\n\n        assert(args.length > 0, \"Direct initialization must have at least one argument. (Otherwise it should be a default initialization.)\");\n\n        // If any arguments are not well typed, we can't select a constructor\n        if (!allWellTyped(args)) {\n            this.attachAll(this.args = args);\n            // ctor and ctorCall remain undefined\n            return;\n        }\n\n        // Try to find a matching constructor. Not using lookup because constructors have no name.\n        let argTypes = args.map(arg => arg.type);\n        let overloadResult = overloadResolution(target.type.classDefinition.constructors, argTypes);\n        if (!overloadResult.selected) {\n            this.addNote(CPPError.declaration.init.matching_constructor(this, this.target, argTypes));\n            this.attachAll(this.args = args);\n            return;\n        }\n\n        this.ctor = overloadResult.selected;\n\n        this.ctorCall = new FunctionCall(context, this.ctor, args, target.type.cvUnqualified());\n        this.attach(this.ctorCall);\n        this.args = this.ctorCall.args;\n\n\n    }\n\n    public createRuntimeInitializer<T extends CompleteClassType>(this: CompiledClassDirectInitializer<T>, parent: RuntimeConstruct): RuntimeClassDirectInitializer<T>;\n    public createRuntimeInitializer<T extends CompleteObjectType>(this: CompiledDirectInitializer<T>, parent: RuntimeConstruct): never;\n    public createRuntimeInitializer<T extends CompleteClassType>(this: CompiledClassDirectInitializer<T>, parent: RuntimeConstruct): RuntimeClassDirectInitializer<T> {\n        return new RuntimeClassDirectInitializer(this, parent);\n    }\n\n    public createDefaultOutlet(this: CompiledClassDirectInitializer, element: JQuery, parent?: ConstructOutlet): ClassDirectInitializerOutlet {\n        return this.kind === \"direct\" ?\n            new ClassDirectInitializerOutlet(element, this, parent) :\n            new ClassCopyInitializerOutlet(element, this, parent);\n    }\n\n    // TODO; change explain everywhere to be separate between compile time and runtime constructs\n    public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n        let targetDesc = this.target.runtimeLookup(rtConstruct).describe();\n        let rhsDesc = this.args[0].describeEvalResult(0);\n        return { message: (targetDesc.name || targetDesc.message) + \" will be initialized with \" + (rhsDesc.name || rhsDesc.message) + \".\" };\n    }\n}\n\nexport interface CompiledClassDirectInitializer<T extends CompleteClassType = CompleteClassType> extends ClassDirectInitializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    \n    readonly target: ObjectEntity<Exclude<T, ReferenceType>>; // Not sure why, but the Exclude here is needed to make TS happy\n    readonly args: readonly CompiledExpression[];\n    \n    readonly ctor: FunctionEntity<FunctionType<VoidType>>;\n    readonly ctorCall: CompiledFunctionCall<FunctionType<VoidType>>;\n}\n\nexport class RuntimeClassDirectInitializer<T extends CompleteClassType = CompleteClassType> extends RuntimeDirectInitializer<T, CompiledClassDirectInitializer<T>> {\n\n    public readonly ctorCall?: RuntimeFunctionCall<FunctionType<VoidType>>;\n\n    private index = \"callCtor\";\n\n    public constructor (model: CompiledClassDirectInitializer<T>, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n    \n    protected upNextImpl() {\n        if (this.index === \"callCtor\") {\n            (<Mutable<this>>this).ctorCall = this.model.ctorCall.createRuntimeFunctionCall(this, this.model.target.runtimeLookup(this));\n            this.sim.push(this.ctorCall!);\n            this.index = \"done\";\n        }\n        else {\n            let target = this.model.target.runtimeLookup(this);\n            this.observable.send(\"initialized\", target);\n            this.startCleanup();\n        }\n    }\n\n    public stepForwardImpl() {\n        // do nothing\n    }\n\n}\n\n\n\n\n\n// export class ClassDirectInitializer extends DirectInitializer {\n\n//     public readonly target: ObjectEntity<ClassType>;\n//     public readonly args: readonly Expression[];\n\n//     public readonly ctor: ConstructorEntity?;\n//     public readonly ctorCall: MemberFunctionCall?;\n\n//     public constructor(context: TranslationUnitContext, target: ObjectEntity<ClassType>, args: readonly Expression[]) {\n//         super(context);\n\n//         this.target = target;\n\n//         let targetType = target.type;\n\n//         // Need to select constructor, so have to compile auxiliary arguments\n//         let {ctor, problems} = overloadResolution(targetType.cppClass.ctors, args);\n\n//         if (ctor) {\n//             this.ctor = ctor;\n//             this.args = args;\n//             this.ctorCall = new FunctionCall(context, ctor, args, this.target);\n//             this.attach(this.ctorCall);\n//             // Note: in the case a suitable function call can be constructed, arguments are not\n//             // attached here since they are attached under the function call.\n//         }\n//         else {\n//             this.addNote(CPPError.declaration.init.matching_constructor(this, this.target,\n//                 args.map(function (arg) {return arg.type;})));\n//             this.attachAll(this.args = args);\n//             return;\n//         }\n\n\n//     }\n\n//     public createRuntimeInitializer<T extends ClassType>(this: CompiledClassDirectInitializer<T>, parent: RuntimeConstruct) : RuntimeClassDirectInitializer<T>;\n//     public createRuntimeInitializer<T extends ObjectType>(this: CompiledDirectInitializer<T>, parent: RuntimeConstruct) : never;\n//     public createRuntimeInitializer<T extends ClassType>(this: any, parent: RuntimeConstruct) : RuntimeClassDirectInitializer<T> {\n//         return new RuntimeClassDirectInitializer(<CompiledClassDirectInitializer<T>>this, parent);\n//     }\n\n//     // TODO; change explain everywhere to be separate between compile time and runtime constructs\n//     public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//         let targetDesc = this.target.describe();\n//         // TODO: what if there is an error that causes no ctor to be found/available\n//         return {message: (targetDesc.name || targetDesc.message) + \" will be initialized using \" + this.ctorCall.describe().message};\n//     }\n// }\n\n// export interface CompiledClassDirectInitializer<T extends ClassType> extends ClassDirectInitializer, SuccessfullyCompiled {\n\n\n//     readonly target: ObjectEntity<T>;\n//     readonly args: readonly Expression[];\n\n//     readonly ctor: ConstructorEntity<T>;\n//     readonly ctorCall: CompiledFunctionCall<VoidType, \"prvalue\">;\n// }\n\n// export class RuntimeClassDirectInitializer<T extends ClassType> extends RuntimeDirectInitializer<T, CompiledClassDirectInitializer<T>> {\n\n//     public readonly ctorCall: RuntimeFunctionCall<VoidType, \"prvalue\">;\n\n//     private index = \"callCtor\";\n\n//     public constructor (model: CompiledClassDirectInitializer<T>, parent: RuntimeConstruct) {\n//         super(model, parent);\n//         this.ctorCall = this.model.ctorCall.createRuntimeFunctionCall(this);\n//     }\n\n//     protected upNextImpl() {\n//         if (this.index === \"callCtor\") {\n//             this.sim.push(this.ctorCall);\n//             this.index = \"done\";\n//         }\n//         else {\n//             target = this.model.target.runtimeLookup(this);\n//             this.observable.send(\"initialized\", target);\n//             this.startCleaningUp();\n//         }\n//     }\n\n//     public stepForwardImpl() {\n//         // do nothing\n//     }\n// }\n\n\n\nexport interface CopyInitializerASTNode extends ASTNode {\n    readonly construct_type: \"copy_initializer\";\n    readonly args: ExpressionASTNode[];\n}\n\n\ntype DelegatedConstructorCtorInitializerComponent = {\n    kind: \"delegatedConstructor\",\n    args: readonly Expression[]\n}\n\ntype BaseCtorInitializerComponent = {\n    kind: \"base\",\n    args: readonly Expression[]\n}\n\ntype MemberCtorInitializerComponent = {\n    kind: \"member\",\n    name: string;\n    args: readonly Expression[]\n}\n\ntype CtorInitializerComponent =\n    DelegatedConstructorCtorInitializerComponent |\n    BaseCtorInitializerComponent |\n    MemberCtorInitializerComponent;\n\nexport class CtorInitializer extends BasicCPPConstruct<MemberBlockContext, CtorInitializerASTNode> {\n    public readonly construct_type = \"ctor_initializer\";\n\n    public readonly target: ReceiverEntity;\n\n    public readonly delegatedConstructorInitializer?: ClassDirectInitializer;\n    public readonly baseInitializer?: ClassDefaultInitializer | ClassDirectInitializer;\n    public readonly memberInitializers: readonly (DefaultInitializer | DirectInitializer)[] = [];\n    public readonly memberInitializersByName: { [index: string]: DirectInitializer | DefaultInitializer | undefined } = { };\n\n    public static createFromAST(ast: CtorInitializerASTNode, context: MemberFunctionContext) {\n        return new CtorInitializer(context, ast, ast.initializers.map(memInitAST => {\n            let receiverType = context.contextualReceiverType;\n            let baseType = receiverType.classDefinition.baseClass;\n\n            let memName = memInitAST.member.identifier;\n            let args = memInitAST.args.map(argAST => createExpressionFromAST(argAST, context));\n\n            if (memName === receiverType.className) {\n                return <DelegatedConstructorCtorInitializerComponent>{\n                    kind: \"delegatedConstructor\",\n                    args: args\n                };\n            }\n            else if (baseType && memName === baseType.className) {\n                return <BaseCtorInitializerComponent>{\n                    kind: \"base\",\n                    args: args\n                };\n            }\n            else {\n                return <MemberCtorInitializerComponent>{\n                    kind: \"member\",\n                    name: memName,\n                    args: args\n                };\n            }\n        }));\n    }\n\n    public constructor(context: MemberBlockContext, ast: CtorInitializerASTNode | undefined, components: readonly CtorInitializerComponent[]) {\n        super(context, ast);\n\n        let receiverType = context.contextualReceiverType;\n\n        this.target = new ReceiverEntity(receiverType);\n\n        let baseType = receiverType.classDefinition.baseClass;\n\n        \n        assert(context.containingFunction.firstDeclaration.isConstructor);\n\n        // Initial processing of ctor initializer components list\n        for (let i = 0; i < components.length; ++i) {\n            let comp = components[i];\n            if (comp.kind === \"delegatedConstructor\") {\n\n                let delegatedCtor = new ClassDirectInitializer(context, this.target, comp.args, \"direct\")\n                this.attach(delegatedCtor);\n\n                if (this.delegatedConstructorInitializer) {\n                    delegatedCtor.addNote(CPPError.declaration.ctor.init.multiple_delegates(delegatedCtor));\n                }\n                else {\n                    this.delegatedConstructorInitializer = delegatedCtor;\n                    if (components.length > 1) {\n                        // If there's a delegating constructor call, no other initializers are allowed\n                        delegatedCtor.addNote(CPPError.declaration.ctor.init.delegate_only(delegatedCtor));\n                    }\n                }\n            }\n            else if (comp.kind === \"base\") {\n                // Theoretically we shouldn't have a base init provided if\n                // there wasn't a base class to match the name of the init against\n                assert(baseType);\n\n                let baseInit = new ClassDirectInitializer(context, new BaseSubobjectEntity(this.target, baseType), comp.args, \"direct\");\n                this.attach(baseInit);\n\n                if (!this.baseInitializer) {\n                    this.baseInitializer = baseInit;\n                }\n                else {\n                    baseInit.addNote(CPPError.declaration.ctor.init.multiple_base_inits(baseInit));\n                }\n            }\n            else {\n                let memName = comp.name;\n                let memEntity = receiverType.classDefinition.memberEntitiesByName[memName];\n                if (memEntity) {\n                    let memInit = DirectInitializer.create(context, memEntity, comp.args, \"direct\");\n                    this.attach(memInit);\n\n                    if (!this.memberInitializersByName[memName]) {\n                        this.memberInitializersByName[memName] = memInit;\n                    }\n                    else {\n                        this.addNote(CPPError.declaration.ctor.init.multiple_member_inits(this));\n                    }\n                }\n                else {\n                    this.addNote(CPPError.declaration.ctor.init.improper_name(this, receiverType, memName));\n                }\n            }\n        }\n\n        // If there's a base class and no explicit base initializer, add a default one\n        if (baseType && !this.baseInitializer) {\n            this.baseInitializer = new ClassDefaultInitializer(createImplicitContext(context), new BaseSubobjectEntity(this.target, baseType));\n        }\n\n        receiverType.classDefinition.memberVariableEntities.forEach(memEntity => {\n            let memName = memEntity.name;\n            let memInit = this.memberInitializersByName[memName];\n\n            // If there wasn't an explicit initializer, we need to provide a default one\n            if (!memInit) {\n                memInit = DefaultInitializer.create(context, memEntity);\n                this.attach(memInit);\n                this.memberInitializersByName[memName] = memInit;\n            }\n\n            // Add to list of member initializers in order (same order as entities/declarations in class def)\n            asMutable(this.memberInitializers).push(memInit);\n        });\n        \n        // TODO out of order warnings\n    }\n\n    public createRuntimeCtorInitializer(this: CompiledCtorInitializer, parent: RuntimeConstruct): RuntimeCtorInitializer {\n        return new RuntimeCtorInitializer(this, parent);\n    }\n\n    public createDefaultOutlet(this: CompiledCtorInitializer, element: JQuery, parent?: ConstructOutlet) {\n        return new CtorInitializerOutlet(element, this, parent);\n    }\n\n}\n\nexport interface CompiledCtorInitializer extends CtorInitializer, SuccessfullyCompiled {\n\n    readonly delegatedConstructorInitializer?: CompiledClassDirectInitializer;\n    readonly baseInitializer?: CompiledClassDefaultInitializer | CompiledClassDirectInitializer;\n    readonly memberInitializers: readonly (CompiledDefaultInitializer | CompiledDirectInitializer)[];\n    readonly memberInitializersByName: { [index: string]: CompiledClassDefaultInitializer | CompiledDirectInitializer | undefined };\n}\n\n\nconst INDEX_CTOR_INITIALIZER_DELEGATE = 0;\nconst INDEX_CTOR_INITIALIZER_BASE = 1;\nconst INDEX_CTOR_INITIALIZER_MEMBERS = 2;\nexport class RuntimeCtorInitializer extends RuntimeConstruct<CompiledCtorInitializer> {\n\n    public readonly delegatedConstructorInitializer?: RuntimeClassDirectInitializer;\n    public readonly baseInitializer?: RuntimeClassDefaultInitializer | RuntimeClassDirectInitializer;\n    public readonly memberInitializers: readonly (RuntimeDefaultInitializer | RuntimeDirectInitializer)[];\n\n    private index: number;\n    private memberIndex = 0;\n\n    public constructor (model: CompiledCtorInitializer, parent: RuntimeConstruct) {\n        super(model, \"ctor-initializer\", parent);\n        this.delegatedConstructorInitializer = this.model.delegatedConstructorInitializer?.createRuntimeInitializer(this);\n\n        // Dummy ternary needed by type system due to union and this parameter shenanagins\n        this.baseInitializer = this.model.baseInitializer instanceof ClassDefaultInitializer ?\n            this.model.baseInitializer?.createRuntimeInitializer(this) :\n            this.model.baseInitializer?.createRuntimeInitializer(this);\n\n        // Dummy ternary needed by type system due to union and this parameter shenanagins\n        this.memberInitializers = this.model.memberInitializers.map(memInit => memInit instanceof DefaultInitializer ?\n            memInit.createRuntimeInitializer(this) :\n            memInit.createRuntimeInitializer(this)\n        );\n\n        if (this.delegatedConstructorInitializer) {\n            this.index = INDEX_CTOR_INITIALIZER_DELEGATE;\n        }\n        else if (this.baseInitializer) {\n            this.index = INDEX_CTOR_INITIALIZER_BASE;\n        }\n        else {\n            this.index = INDEX_CTOR_INITIALIZER_MEMBERS;\n        }\n    }\n\n    protected upNextImpl() {\n        if (this.index === INDEX_CTOR_INITIALIZER_DELEGATE) {\n\n            // Non-null assertion due to the way index is set in constructor above\n            this.sim.push(this.delegatedConstructorInitializer!);\n            \n            if (this.baseInitializer) {\n                this.index = INDEX_CTOR_INITIALIZER_BASE;\n            }\n            else {\n                this.index = INDEX_CTOR_INITIALIZER_MEMBERS;\n            }\n        }\n        else if (this.index === INDEX_CTOR_INITIALIZER_BASE) {\n            // Non-null assertion due to the way index is set in constructor above\n            this.sim.push(this.baseInitializer!);\n            this.index = INDEX_CTOR_INITIALIZER_MEMBERS;\n        }\n        else {\n            if (this.memberIndex < this.memberInitializers.length) {\n                this.sim.push(this.memberInitializers[this.memberIndex++]);\n            }\n            else {\n                this.startCleanup();\n            }\n        }\n    }\n\n    public stepForwardImpl() {\n        // do nothing\n    }\n}\n\n\n\n\n// export var ConstructorDefinition = FunctionDefinition.extend({\n//     _name: \"ConstructorDefinition\",\n\n//     i_childrenToExecute: [\"memberInitializers\", \"body\"], // TODO: why do regular functions have member initializers??\n\n\n//     instance : function(ast, context){\n//         assert(context);\n//         assert(isA(context.containingClass, Types.Class));\n//         assert(context.hasOwnProperty(\"access\"));\n//         // Make sure it's actually a constructor\n//         if (ast.name.identifier !== context.containingClass.className){\n//             // oops was actually a function with missing return type\n//             return FunctionDefinition.instance(ast, context);\n//         }\n\n//         return ConstructorDefinition._parent.instance.apply(this, arguments);\n//     },\n\n//     compileDeclaration : function() {\n//         FunctionDefinition.compileDeclaration.apply(this, arguments);\n\n//         if (!this.hasErrors()){\n//             this.i_containingClass.addConstructor(this.entity);\n//         }\n//     },\n\n//     compileDeclarator : function(){\n//         var ast = this.ast;\n\n\n//         // NOTE: a constructor doesn't have a \"name\", and so we don't need to add it to any scope.\n//         // However, to make lookup easier, we give all constructors their class name plus the null character. LOL\n//         // TODO: this is silly. remove it pls :)\n//         this.name = this.i_containingClass.className + \"\\0\";\n\n//         // Compile the parameters\n//         var args = this.ast.args;\n//         this.params = [];\n//         this.paramTypes = [];\n//         for (var j = 0; j < args.length; ++j) {\n//             var paramDecl = Parameter.instance(args[j], {parent: this, scope: this.bodyScope});\n//             paramDecl.compile();\n//             this.params.push(paramDecl);\n//             this.paramTypes.push(paramDecl.type);\n//         }\n//         this.isDefaultConstructor = this.params.length == 0;\n\n//         this.isCopyConstructor = this.params.length == 1\n//         && (isA(this.paramTypes[0], this.i_containingClass) ||\n//         isA(this.paramTypes[0], Types.Reference) && isA(this.paramTypes[0].refTo, this.i_containingClass));\n\n\n//         // Give error for copy constructor that passes by value\n//         if (this.isCopyConstructor && isA(this.paramTypes[0], this.i_containingClass)){\n//             this.addNote(CPPError.declaration.ctor.copy.pass_by_value(this.params[0], this.paramTypes[0], this.params[0].name));\n//         }\n\n//         // I know this is technically wrong but I think it makes things run smoother\n//         this.type = Types.Function.instance(Types.Void.instance(), this.paramTypes);\n//     },\n\n//     compileDefinition : function(){\n//         var self = this;\n//         var ast = this.ast;\n\n//         if (!ast.body){\n//             this.addNote(CPPError.class_def.ctor_def(this));\n//             return;\n//         }\n\n//         this.compileCtorInitializer();\n\n//         // Call parent class version. Will handle body, automatic object destruction, etc.\n//         FunctionDefinition.compileDefinition.apply(this, arguments);\n//     },\n\n//     compileCtorInitializer : function(){\n//         var memInits = this.ast.initializer || [];\n\n//         // First, check to see if this is a delegating constructor.\n//         // TODO: check on whether someone could techinically declare a member variable with the same name\n//         // as the class and how that affects the logic here.\n//         var targetConstructor = null;\n//         for(var i = 0; i < memInits.length; ++i){\n//             if (memInits[i].member.identifier == this.i_containingClass.className){\n//                 targetConstructor = i;\n//                 break;\n//             }\n//         }\n\n//         // It is a delegating constructor\n//         if (targetConstructor !== null){\n//             targetConstructor = memInits.splice(targetConstructor, 1)[0];\n//             // If it is a delegating constructor, there can be no other memInits\n//             if (memInits.length === 0){ // should be 0 since one removed\n//                 var mem = MemberInitializer.instance(targetConstructor, {parent: this, scope: this.bodyScope});\n//                 mem.compile(ReceiverEntity.instance(this.i_containingClass));\n//                 this.memberInitializers.push(mem);\n//             }\n//             else{\n//                 this.addNote(CPPError.declaration.ctor.init.delegating_only(this));\n//             }\n//             return;\n//         }\n\n//         // It is a non-delegating constructor\n\n//         // If there is a base class subobject, initialize it\n//         var base;\n//         if (base = this.i_containingClass.getBaseClass()){\n//             // Check to see if there is a base class initializer.\n//             var baseInits = memInits.filter(function(memInit){\n//                 return memInit.member.identifier === base.className;\n//             });\n//             memInits = memInits.filter(function(memInit){\n//                 return memInit.member.identifier !== base.className;\n//             });\n\n//             if (baseInits.length > 1){\n//                 this.addNote(CPPError.declaration.ctor.init.multiple_base_inits(this));\n//             }\n//             else if (baseInits.length === 1){\n//                 var mem = MemberInitializer.instance(baseInits[0], {parent: this, scope: this.bodyScope});\n//                 mem.compile(this.i_containingClass.baseClassEntities[0]);\n//                 this.memberInitializers.push(mem);\n//             }\n//             else{\n//                 var mem = DefaultMemberInitializer.instance(this.ast, {parent: this, scope: this.bodyScope});\n//                 mem.compile(this.i_containingClass.baseClassEntities[0]);\n//                 this.memberInitializers.push(mem);\n//                 mem.isMemberInitializer = true;\n//             }\n//         }\n\n//         // Initialize non-static data members of the class\n\n//         // Create a map of name to initializer. Initially all initializers are null.\n//         var initMap = {};\n//         this.i_containingClass.memberSubobjectEntities.forEach(function(objMember){\n//             initMap[objMember.name] = objMember;\n//         });\n\n//         // Iterate through all the member initializers and associate them with appropriate member\n//         for(var i = 0; i < memInits.length; ++i){\n//             var memInit = memInits[i];\n\n//             // Make sure this type has a member of the given name\n//             var memberName = memInit.member.identifier;\n//             if (initMap.hasOwnProperty(memberName)) {\n//                 var mem = MemberInitializer.instance(memInit, {parent: this, scope: this.bodyScope});\n//                 mem.compile(initMap[memberName]);\n//                 initMap[memberName] = mem;\n//             }\n//             else{\n//                 this.addNote(CPPError.declaration.ctor.init.improper_member(this, this.i_containingClass, memberName));\n//             }\n//         }\n\n//         // Now iterate through members again in declaration order. Add associated member initializer\n//         // from above or default initializer if there wasn't one.\n\n//         var self = this;\n//         this.i_containingClass.memberSubobjectEntities.forEach(function(objMember){\n//             if (isA(initMap[objMember.name], MemberInitializer)){\n//                 self.memberInitializers.push(initMap[objMember.name]);\n//             }\n//             else if (isA(objMember.type, Types.Class) || isA(objMember.type, Types.Array)){\n//                 var mem = DefaultMemberInitializer.instance(self.ast, {parent: self, scope: self.bodyScope});\n//                 mem.compile(objMember);\n//                 self.memberInitializers.push(mem);\n//                 mem.isMemberInitializer = true;\n//             }\n//             else{\n//                 // No need to do anything for non-class types since default initialization does nothing\n//             }\n//         });\n//     },\n\n//     isTailChild : function(child){\n//         return {isTail: false};\n//     },\n\n//     describe : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         var desc = {};\n//         if (this.isDefaultConstructor){\n//             desc.message = \"the default constructor for the \" + this.i_containingClass.className + \" class\";\n//         }\n//         else if (this.isCopyConstructor){\n//             desc.message = \"the copy constructor for the \" + this.i_containingClass.className + \" class\";\n//         }\n//         else{\n//             desc.message = \"a constructor for the \" + this.i_containingClass.className + \" class\";\n//         }\n//         return desc\n//     }\n// });\n\n\n\n\n// TODO: These should really be \"class aliases\" rather than derived classes, however\n// it doesn't seem like Typescript has any proper mechanism for this.\n// export abstract class CopyInitializer extends DirectInitializer { };\n// export interface CompiledCopyInitializer<T extends ObjectType = ObjectType> extends CompiledDirectInitializer<T> { };\n// export abstract class RuntimeCopyInitializer extends RuntimeDirectInitializer { };\n\n// export class ReferenceCopyInitializer extends ReferenceDirectInitializer { };\n// export interface CompiledReferenceCopyInitializer<T extends ObjectType = ObjectType> extends CompiledReferenceDirectInitializer<T> { };\n// export class RuntimeReferenceCopyInitializer extends RuntimeReferenceDirectInitializer { };\n\n// export class AtomicCopyInitializer extends AtomicDirectInitializer { };\n// export interface CompiledAtomicCopyInitializer<T extends AtomicType = AtomicType> extends CompiledAtomicDirectInitializer<T> { };\n// export class RuntimeAtomicCopyInitializer extends RuntimeAtomicDirectInitializer { };\n// export class ArrayCopyInitializer extends ArrayDirectInitializer { };\n// export class RuntimeArrayCopyInitializer extends RuntimeArrayDirectInitializer { };\n// export class ClassCopyInitializer extends ClassDirectInitializer { };\n// export class RuntimeClassCopyInitializer extends RuntimeClassDirectInitializer { };\n\n\n\n\n// /**\n//  * Note: only use is in implicitly defined copy constructor\n//  */\n// export class ArrayMemberInitializer extends Initializer {\n\n//      // Note: this are not MemberSubobjectEntity since they might need to apply to a nested array inside an array member\n//     public readonly target: ObjectEntity<BoundedArrayType>;\n//     public readonly otherMember: ObjectEntity<BoundedArrayType>;\n\n//     public readonly elementInitializers: DirectInitializer[] = [];\n\n//     public constructor(context: TranslationUnitContext, target: ObjectEntity<BoundedArrayType>,\n//                        otherMember: ObjectEntity<BoundedArrayType>) {\n//         super(context);\n\n//         this.target = target;\n//         this.otherMember = otherMember;\n//         let targetType = target.type;\n\n//         for(let i = 0; i < targetType.length; ++i) {\n//             let elemInit;\n//             // COMMENTED BELOW BECAUSE MULTIDIMENSIONAL ARRAYS ARE NOT ALLOWED\n//             // if (targetType.elemType instanceof BoundedArrayType) {\n//             //     elemInit = new ArrayMemberInitializer(context,\n//             //         new ArraySubobjectEntity(target, i),\n//             //         new ArraySubobjectEntity(<ObjectEntity<BoundedArrayType<BoundedArrayType>>>otherMember, i));\n//             // }\n//             // else {\n//                 elemInit = DirectInitializer.create(context,\n//                     new ArraySubobjectEntity(target, i),\n//                     [new EntityExpression(context, new ArraySubobjectEntity(otherMember, i))]);\n//             // }\n\n//             this.elementInitializers.push(elemInit);\n//             this.attach(elemInit);\n\n//             if(elemInit.hasErrors) {\n//                 this.addNote(CPPError.declaration.init.array_direct_init(this));\n//                 break;\n//             }\n//         }\n\n//     }\n\n//     public createRuntimeInitializer(this: CompiledArrayMemberInitializer, parent: RuntimeConstruct) {\n//         return new RuntimeArrayMemberInitializer(this, parent);\n//     }\n\n//     public explain(sim: Simulation, rtConstruct: RuntimeConstruct) : Explanation {\n//         let targetDesc = this.target.describe();\n//         let targetType = this.target.type;\n//         let otherMemberDesc = this.otherMember.describe();\n\n//         if (targetType.length === 0) {\n//             return {message: \"No initialization is performed for \" + (targetDesc.name || targetDesc.message) + \"because the array has length 0.\"};\n//         }\n//         else {\n//             return {message: \"Each element of \" + (targetDesc.name || targetDesc.message) + \" will be default-initialized with the value of the\"\n//                 + \"corresponding element of \" + (otherMemberDesc.name || otherMemberDesc.message) + \". For example, \" +\n//                 this.elementInitializers[0].explain(sim, rtConstruct) };\n//         }\n//     }\n// }\n\n// export interface CompiledArrayMemberInitializer extends ArrayMemberInitializer, SuccessfullyCompiled {\n//     readonly elementInitializers: CompiledDirectInitializer[];\n// }\n\n// export class RuntimeArrayMemberInitializer extends RuntimeInitializer<CompiledArrayMemberInitializer> {\n\n//     public readonly elementInitializers: RuntimeDirectInitializer[];\n\n//     private index = 0;\n\n//     public constructor (model: CompiledArrayMemberInitializer, parent: RuntimeConstruct) {\n//         super(model, parent);\n//         this.elementInitializers = this.model.elementInitializers.map((elemInit) => {\n//             return elemInit.createRuntimeInitializer(this);\n//         });\n//     }\n\n//     protected upNextImpl() {\n//         if (this.elementInitializers && this.index < this.elementInitializers.length) {\n//             this.sim.push(this.elementInitializers[this.index++])\n//         }\n//         else {\n//             target = this.model.target.runtimeLookup(this);\n//             this.observable.send(\"initialized\", target);\n//             this.startCleaningUp();\n//         }\n//     }\n\n//     public stepForwardImpl() {\n//         // do nothing\n//     }\n// }\n\n\n\n\n\n// export var ParameterInitializer = CopyInitializer.extend({\n//     _name : \"ParameterInitializer\",\n\n//     explain : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         var exp = ParameterInitializer._parent.explain.apply(this, arguments);\n//         exp.message = exp.message + \"\\n\\n(Parameter passing is done by copy-initialization.)\";\n//         return exp;\n//     }\n// });\n\n// export var ReturnInitializer = CopyInitializer.extend({\n//     _name : \"ReturnInitializer\",\n\n//     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n\n//         // Need to handle return-by-reference differently, since there is no actual reference that\n//         // gets bound. (The runtimeLookup for the return entity would yield null). Instead, we just\n//         // set the return object for the enclosing function to the evaluated argument (which should\n//         // have yielded an object).\n//         if (isA(this.entity.type, Types.Reference)) {\n//             inst.containingRuntimeFunction().setReturnValue(inst.childInstances.args[0].evalResult);\n//             this.done(sim, inst);\n//             return;\n//         }\n\n//         return ReturnInitializer._parent.stepForward.apply(this, arguments);\n//     }\n// });\n\n// export var MemberInitializer = DirectInitializer.extend({\n//     _name : \"MemberInitializer\",\n//     isMemberInitializer: true\n// });\n\n// export var DefaultMemberInitializer = DefaultInitializer.extend({\n//     _name : \"DefaultMemberInitializer\",\n//     isMemberInitializer: true\n// });\n\n// export var NewDirectInitializer = DirectInitializer.extend({\n//     _name : \"NewDirectInitializer\",\n//     i_runtimeConstructClass : RuntimeNewInitializer\n// });\n\n\n// export var NewDefaultInitializer = DefaultInitializer.extend({\n//     _name : \"NewDefaultInitializer\",\n//     i_runtimeConstructClass : RuntimeNewInitializer\n// });\n\n\nexport interface ListInitializerASTNode extends ASTNode {\n    readonly construct_type: \"list_initializer\";\n    readonly arg: InitializerListExpressionASTNode;\n}\n\nexport abstract class ListInitializer extends Initializer {\n\n    public static create(context: TranslationUnitContext, target: UnboundReferenceEntity, args: readonly Expression[]): InvalidConstruct;\n    public static create(context: TranslationUnitContext, target: ObjectEntity<AtomicType>, args: readonly Expression[]): InvalidConstruct;\n    public static create(context: TranslationUnitContext, target: ObjectEntity<BoundedArrayType>, args: readonly Expression[]) : InvalidConstruct; //ArrayListInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity<CompleteClassType>, args: readonly Expression[]) : ClassDirectInitializer;\n    public static create(context: TranslationUnitContext, target: ObjectEntity, args: readonly Expression[]): /*ArrayListInitializer*/ | ClassDirectInitializer | InvalidConstruct;\n    public static create(context: TranslationUnitContext, target: ObjectEntity | UnboundReferenceEntity, args: readonly Expression[]): /*ArrayListInitializer*/ | ClassDirectInitializer | InvalidConstruct;\n    public static create(context: TranslationUnitContext, target: ObjectEntity | UnboundReferenceEntity, args: readonly Expression[]): ListInitializer | InvalidConstruct {\n        if (target.type.isReferenceType()) { // check for presence of bindTo to detect reference entities\n            return new InvalidConstruct(context, undefined, CPPError.declaration.init.list_reference_prohibited, args);\n        }\n        else if (target.type.isAtomicType()) {\n            return new InvalidConstruct(context, undefined, CPPError.declaration.init.list_atomic_prohibited, args);\n        }\n        else if (target.type.isBoundedArrayType()) {\n            // TODO fix\n            return new InvalidConstruct(context, undefined, CPPError.declaration.init.list_array_unsupported, args);\n        }\n        else if (target.type.isCompleteClassType()) {\n            if (target.type.isAggregate()) {\n                return new InvalidConstruct(context, undefined, CPPError.declaration.init.aggregate_unsupported, args);\n            }\n\n            let initializerList = new InitializerListExpression(context, undefined, args);\n            return new ClassDirectInitializer(context, <ObjectEntity<CompleteClassType>> target, [initializerList], \"direct\");\n        }\n        else {\n            return assertNever(target.type);\n        }\n    }\n\n    public abstract readonly target: ObjectEntity | UnboundReferenceEntity;\n    public abstract readonly args: readonly Expression[];\n\n    public constructor(context: TranslationUnitContext) {\n        super(context, undefined);\n    }\n\n    public abstract createRuntimeInitializer<T extends ObjectEntityType>(this: CompiledListInitializer<T>, parent: RuntimeConstruct): RuntimeListInitializer<T>;\n}\n\n\nexport interface CompiledListInitializer<T extends ObjectEntityType = ObjectEntityType> extends ListInitializer, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    readonly target: ObjectEntity<Exclude<T, ReferenceType>> | UnboundReferenceEntity<Extract<T, ReferenceType>>;\n    readonly args: readonly CompiledExpression[];\n}\n\nexport abstract class RuntimeListInitializer<T extends ObjectEntityType = ObjectEntityType, C extends CompiledListInitializer<T> = CompiledListInitializer<T>> extends RuntimeInitializer<C> {\n\n    protected constructor(model: C, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n\n}\n\n\n// export class ClassListInitializer extends DirectInitializer {\n//     public readonly construct_type = \"ClassListInitializer\";\n\n//     public readonly target: ObjectEntity<CompleteClassType>;\n//     public readonly args: readonly Expression[];\n\n//     public readonly initializerList?: readonly InitializerListExpression;\n    \n//     public readonly ctor?: FunctionEntity<FunctionType<VoidType>>;\n//     public readonly ctorCall?: FunctionCall;\n\n//     public constructor(context: TranslationUnitContext, target: ObjectEntity<CompleteClassType>, initializerList: InitializerListExpression, kind: DirectInitializerKind) {\n//         super(context, kind);\n\n//         this.target = target;\n\n//         this.attach(this.initializerList = initializerList);\n\n//         if (!initializerList.isWellTyped()) {\n//             return;\n//         }\n\n//         // Try to find a matching constructor. Not using lookup because constructors have no name.\n//         let overloadResult = overloadResolution(target.type.classDefinition.constructors, [initializerList.type]);\n//         if (!overloadResult.selected) {\n//             this.addNote(CPPError.declaration.init.matching_constructor(this, this.target, [initializerList.type]));\n//             return;\n//         }\n\n//         this.ctor = overloadResult.selected;\n\n//         this.ctorCall = new FunctionCall(context, this.ctor, [initializerList]);\n        \n//         this.attach(this.ctorCall);\n//         this.args = this.ctorCall.args;\n\n//     }\n\n//     public createRuntimeInitializer<T extends CompleteClassType>(this: CompiledClassListInitializer<T>, parent: RuntimeConstruct): RuntimeClassListInitializer<T>;\n//     public createRuntimeInitializer<T extends CompleteObjectType>(this: CompiledDirectInitializer<T>, parent: RuntimeConstruct): never;\n//     public createRuntimeInitializer<T extends CompleteClassType>(this: CompiledClassListInitializer<T>, parent: RuntimeConstruct): RuntimeClassListInitializer<T> {\n//         return new RuntimeClassListInitializer(this, parent);\n//     }\n\n//     public createDefaultOutlet(this: CompiledClassListInitializer, element: JQuery, parent?: ConstructOutlet): ClassListInitializerOutlet {\n//         return this.kind === \"direct\" ?\n//             new ClassListInitializerOutlet(element, this, parent) :\n//             new ClassCopyInitializerOutlet(element, this, parent);\n//     }\n\n//     // TODO; change explain everywhere to be separate between compile time and runtime constructs\n//     public explain(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//         let targetDesc = this.target.runtimeLookup(rtConstruct).describe();\n//         let rhsDesc = this.args[0].describeEvalResult(0);\n//         return { message: (targetDesc.name || targetDesc.message) + \" will be initialized with \" + (rhsDesc.name || rhsDesc.message) + \".\" };\n//     }\n// }\n\n// export interface CompiledClassListInitializer<T extends CompleteClassType = CompleteClassType> extends ClassListInitializer, SuccessfullyCompiled {\n//     readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n    \n//     readonly target: ObjectEntity<Exclude<T, ReferenceType>>; // Not sure why, but the Exclude here is needed to make TS happy\n//     readonly args: readonly CompiledExpression[];\n    \n//     readonly ctor: FunctionEntity<FunctionType<VoidType>>;\n//     readonly ctorCall: CompiledFunctionCall<FunctionType<VoidType>>;\n// }\n\n// export class RuntimeClassListInitializer<T extends CompleteClassType = CompleteClassType> extends RuntimeDirectInitializer<T, CompiledClassListInitializer<T>> {\n\n//     public readonly ctorCall?: RuntimeFunctionCall<FunctionType<VoidType>>;\n//     public readonly initializerList?: TemporaryObject;\n\n//     private index = \"evaluateArgs\";\n//     private argIndex: number = 0;\n\n//     public constructor (model: CompiledClassListInitializer<T>, parent: RuntimeConstruct) {\n//         super(model, parent);\n//     }\n    \n//     protected upNextImpl() {\n\n//         if (this.index === \"evaluateArgs\") {\n//             this.args\n//         }\n//         else if (this.index == \"buildList\") {\n//             (<Mutable<this>>this).initializerList = this.model.initializerList?.objectInstance(this);\n//         }\n\n//         else if (this.index === \"callCtor\") {\n//             (<Mutable<this>>this).ctorCall = this.model.ctorCall.createRuntimeFunctionCall(this, this.model.target.runtimeLookup(this));\n//             this.sim.push(this.ctorCall!);\n//             this.index = \"done\";\n//         }\n//         else {\n//             let target = this.model.target.runtimeLookup(this);\n//             this.observable.send(\"initialized\", target);\n//             this.startCleanup();\n//         }\n//     }\n\n//     public stepForwardImpl() {\n//         // do nothing\n//     }\n\n// }","import { NoteHandler, CPPError } from \"./errors\";\nimport { CPPConstruct, ASTNode, TranslationUnitConstruct } from \"./constructs\";\n\nexport const KEYWORDS = new Set([\n    \"alignas\", \"continue\", \"friend\", \"register\", \"true\",\n    \"alignof\", \"decltype\", \"goto\", \"reinterpret_cast\", \"try\",\n    \"asm\", \"default\", \"if\", \"return\", \"typedef\",\n    \"auto\", \"delete\", \"inline\", \"short\", \"typeid\",\n    \"bool\", \"do\", \"int\", \"signed\", \"typename\",\n    \"break\", \"double\", \"long\", \"sizeof\", \"union\",\n    \"case\", \"dynamic_cast\", \"mutable\", \"static\", \"unsigned\",\n    \"catch\", \"else\", \"namespace\", \"static_assert\", \"using\",\n    \"char\", \"enum\", \"new\", \"static_cast\", \"virtual\",\n    \"char16_t\", \"explicit\", \"noexcept\", \"struct\", \"void\",\n    \"char32_t\", \"export\", \"nullptr\", \"switch\", \"volatile\",\n    \"class\", \"extern\", \"operator\", \"template\", \"wchar_t\",\n    \"const\", \"false\", \"private\", \"this\", \"while\",\n    \"constexpr\", \"float\", \"protected\", \"thread_local\",\n    \"const_cast\", \"for\", \"public\", \"throw\"\n]);\n\n\n\nexport enum MAGIC_FUNCTION_NAMES {\n    assert = \"assert\",\n    pause = \"pause\",\n    pauseIf = \"pauseIf\"\n}\nexport const LOBSTER_MAGIC_FUNCTIONS = new Set(Object.keys(MAGIC_FUNCTION_NAMES));\n\n\nexport const LOBSTER_KEYWORDS = new Set(Object.keys(MAGIC_FUNCTION_NAMES));\n\nexport const ALT_OPS = new Set([\n    \"and\", \"and_eq\", \"bitand\", \"bitor\", \"compl\", \"not\",\n    \"not_eq\", \"or\", \"or_eq\", \"xor\", \"xor_eq\"\n]);\n\n\n// export type UnqualifiedName = string;\n// export type QualifiedName = string[];\n// export type Name = UnqualifiedName | QualifiedName;\n\n//TODO: not sure if this is the right place for this. May be bettor suited for error.ts\nexport function checkIdentifier(src: TranslationUnitConstruct, name: string, noteHandler: NoteHandler) {\n\n    // Special case for qualified names\n    if (name.includes(\"::\")) {\n        name.split(\"::\").forEach((elem) => checkIdentifier(src, elem, noteHandler));\n        return;\n    }\n\n    // Check that identifier is not a C++ keyword, Lobster keyword, or an alternative representation for an operator\n    if (KEYWORDS.has(name)) {\n        noteHandler.addNote(CPPError.iden.keyword(src, name));\n    }\n    if (LOBSTER_KEYWORDS.has(name)) {\n        noteHandler.addNote(CPPError.lobster.keyword(src, name));\n    }\n    if (ALT_OPS.has(name)) {\n        noteHandler.addNote(CPPError.iden.alt_op(src, name));\n    }\n};\n\nexport function createFullyQualifiedName(...names: string[]) {\n    return \"::\" + names.join(\"::\");\n}\n\nexport function fullyQualifiedNameToUnqualified(fqname: string) {\n    let i = fqname.lastIndexOf(\"::\");\n    if (i === -1) {\n        return fqname;\n    }\n    else {\n        return fqname.slice(i + 2);\n    }\n}\n\nexport interface SourceCode {\n    text: string;\n    line: number;\n    column: number;\n    start: number;\n    end: number;\n}\n\nexport interface IdentifierASTNode extends ASTNode {\n    readonly identifier: string;\n}","import { Type, BoundedArrayType, AtomicType, PointerType, ObjectPointerType, ArrayPointerType, ArrayElemType, Char, Int, CompleteObjectType, CompleteClassType } from \"./types\";\nimport { Observable } from \"../util/observe\";\nimport { assert, Mutable, asMutable } from \"../util/util\";\nimport { Memory, Value, RawValueType } from \"./runtimeEnvironment\";\nimport { RuntimeConstruct } from \"./constructs\";\nimport { LocalVariableDefinition, GlobalVariableDefinition, CompiledGlobalVariableDefinition, ParameterDefinition, CompiledClassDefinition } from \"./declarations\";\n\nexport interface ObjectDescription {\n    name: string;\n    message: string;\n}\n\nabstract class ObjectData<T extends CompleteObjectType> {\n    protected readonly object: CPPObject<T>;\n    protected readonly size: number;\n    protected readonly memory: Memory;\n    protected readonly address: number;\n\n    public constructor(object: CPPObject<T>, memory: Memory, address: number) {\n        this.object = object;\n        this.size = this.object.size;\n        this.memory = memory;\n        this.address = address;\n    }\n\n    // public abstract rawValue() : RawValueType;\n\n    // public abstract setRawValue(newValue: RawValueType, write: boolean) : void;\n\n    public abstract kill(rt?: RuntimeConstruct): void;\n};\n\nclass AtomicObjectData<T extends AtomicType> extends ObjectData<T> {\n\n    public getValue(isValid: boolean) {\n        return new Value<T>(this.rawValue(), this.object.type, isValid);\n    }\n\n    public rawValue() {\n        var bytes = this.memory.readBytes(this.address, this.size);\n        return this.object.type.bytesToValue(bytes);\n    }\n\n    public setRawValue(newValue: RawValueType, write: boolean) {\n        this.memory.writeBytes(this.address, this.object.type.valueToBytes(newValue));\n    }\n\n    public kill() {\n        // no subobjects, do nothing\n    }\n\n}\n\nclass ArrayObjectData<Elem_type extends ArrayElemType> extends ObjectData<BoundedArrayType<Elem_type>> {\n\n    // public static create<Elem_type extends ArrayElemType>(object: CPPObject<BoundedArrayType<Elem_type>>, memory: Memory, address: number) {\n    //     return new ArrayObjectData<BoundedArrayType>(object, memory, address);\n    // } \n\n    private readonly elemObjects: ArraySubobject<Elem_type>[];\n\n    public constructor(object: CPPObject<BoundedArrayType<Elem_type>>, memory: Memory, address: number) {\n        super(object, memory, address);\n\n        let subAddr = this.address;\n        this.elemObjects = [];\n        for (let i = 0; i < this.object.type.length; ++i) {\n            this.elemObjects.push(new ArraySubobject(this.object, i, memory, subAddr));\n            subAddr += this.object.type.elemType.size;\n        }\n    }\n\n    public getArrayElemSubobjectByAddress(address: number) {\n        let index = (address - this.address) / this.object.type.elemType.size;\n        return this.getArrayElemSubobject(index);\n    }\n\n    public getArrayElemSubobject(index: number): ArraySubobject<Elem_type> {\n        if (0 <= index && index < this.elemObjects.length) {\n            return this.elemObjects[index];\n        }\n        else {\n            let outOfBoundsObj = new ArraySubobject(this.object, index,\n                this.memory, this.address + index * this.object.type.elemType.size);\n            outOfBoundsObj.setValidity(false);\n            return outOfBoundsObj;\n        }\n    }\n\n    public getArrayElemSubobjects(): readonly ArraySubobject<Elem_type>[] {\n        return this.elemObjects;\n    }\n\n    public getValue() {\n        return this.elemObjects.map((elemObj) => { return elemObj.getValue(); });\n    }\n\n\n    public rawValue() {\n        return this.elemObjects.map((elemObj) => { return elemObj.rawValue(); });\n    }\n\n    // public setRawValue(newValue: RawValueType, write: boolean) {\n    //     for(var i = 0; i < (<ArrayType>this.object.type).length; ++i){\n    //         this.elemObjects[i].setValue(newValue[i], write);\n    //     }\n    // }\n\n    public kill(rt?: RuntimeConstruct) {\n        this.elemObjects.forEach(elemObj => elemObj.kill(rt));\n    }\n}\n\nclass ClassObjectData<T extends CompleteClassType> extends ObjectData<T> {\n\n    private readonly subobjects: readonly Subobject[];\n    private readonly baseSubobjects: readonly BaseSubobject[];\n    private readonly memberSubobjects: readonly MemberSubobject[];\n    private readonly memberObjectMap: {[index: string]: CPPObject | undefined} = {};\n\n    public constructor(object: CPPObject<T>, memory: Memory, address: number) {\n        super(object, memory, address);\n\n        let subAddr = this.address;\n\n        let classDef = this.object.type.classDefinition;\n\n        assert(classDef?.isSuccessfullyCompiled(), \"Cannot create an object at runtime for a class type that has not been defined and successfully compiled.\");\n\n        // this.baseSubobjects = classDef.baseSpecifiers.map((base) => {\n        //     let subObj = new BaseSubobject(this.object, base.baseEntity.type, memory, subAddr);\n        //     // let subObj = base.objectInstance(this.object, memory, subAddr);\n        //     subAddr += subObj.size;\n        //     return subObj;\n        // });\n        this.baseSubobjects = [];\n        if (classDef.baseClass) {\n            let baseObj = new BaseSubobject(this.object, classDef.baseClass, memory, subAddr);\n            asMutable(this.baseSubobjects).push(baseObj);\n            subAddr += baseObj.size;\n        }\n\n        this.memberSubobjects = classDef.memberObjectEntities.map((mem) => {\n            let subObj = new MemberSubobject(this.object, mem.type, mem.name, memory, subAddr);\n            // let subObj = mem.objectInstance(this.object, memory, subAddr);\n            subAddr += subObj.size;\n            this.memberObjectMap[mem.name] = subObj;\n            return subObj;\n        });\n\n        this.subobjects = [];\n        this.subobjects = this.subobjects.concat(this.baseSubobjects).concat(this.memberSubobjects);\n    }\n\n    public getMemberObject(name: string) : CPPObject | undefined {\n        return this.memberObjectMap[name] ?? this.baseSubobjects[0]?.getMemberObject(name);\n    }\n\n    public bindMemberReference(name: string, obj: CPPObject<CompleteObjectType>) {\n        this.memberObjectMap[name] = obj;\n    }\n\n    public getBaseSubobject() : BaseSubobject | undefined {\n        return this.baseSubobjects[0];\n    }\n\n    // TODO: Could remove? This isn't currently used and I don't think it's useful for anything\n    // public getSubobjectByAddress(address: number) {\n    //     for(var i = 0; i < this.subobjects.length; ++i) {\n    //         var subObj = this.subobjects[i];\n    //         if (subObj.address === address){\n    //             return subObj;\n    //         }\n    //     }\n    // }\n\n    // public rawValue() {\n    //     return this.subobjects.map((subObj) => { return subObj.rawValue(); });\n    // }\n\n    // public setRawValue(newValue: RawValueType, write: boolean) {\n    //     for(var i = 0; i < this.subobjects.length; ++i) {\n    //         this.subobjects[i].setValue(newValue[i], write);\n    //     }\n    // }\n    public getValue(): never {\n        throw new Error(\"Not implemented\");\n    }\n\n\n    public rawValue(): never {\n        throw new Error(\"Not implemented\");\n    }\n    \n    public kill(rt?: RuntimeConstruct) {\n        this.subobjects.forEach(subobj => subobj.kill(rt));\n    }\n}\n\n// interface CPPObjectDescriptor<T extends ObjectType> {\n//     describe(obj: CPPObject<T>) : Description;\n// }\n\n\n// const OBJECT_DESCRIPTORS = {\n//     DEFAULT : {\n//         describe: (obj: CPPObject<ObjectType>) => {\n//             return {message: \"an object at 0x\" + obj.address};\n//         }\n//     },\n//     AUTO : {\n//         describe: (obj: CPPObject<ObjectType>) => {\n//             return {message: \"the heap object at 0x\" + obj.address};\n//         }\n//     },\n//     DYNAMIC : {\n//         describe: (obj: CPPObject<ObjectType>) => {\n//             return {message: \"the heap object at 0x\" + obj.address};\n//         }\n//     },\n//     INVALID : {\n//         describe: (obj: CPPObject<ObjectType>) => {\n//             return {message: \"an invalid object at 0x\" + obj.address};\n//         }\n//     },\n//     THIS : {\n//         describe: (obj: CPPObject<Pointer>) => {\n//             return {name: \"this\", message: \"the this pointer\"};\n//         }\n//     },\n//     STRING_LITERAL : {\n//         describe: (obj: CPPObject<ArrayType>) => {\n//             return {message: \"string literal at 0x\" + obj.address};\n//         }\n//     }\n// }\n\n\n// class EntityObjectDescriptor {\n//     private entity: CPPEntity;\n\n//     constructor(entity: CPPEntity) {\n//         this.entity = entity;\n//     }\n\n//     describe(obj: CPPObject) {\n//         return this.entity.describe();\n//     }\n// }\n\ntype ObjectValueRepresentation<T extends CompleteObjectType> =\n    T extends AtomicType ? Value<T> :\n    T extends BoundedArrayType<infer Elem_type> ? ObjectValueRepresentation<Elem_type>[] :\n    T extends CompleteClassType ? { [index: string]: ObjectRawValueRepresentation<CompleteObjectType> } : never;\n\ntype ObjectRawValueRepresentation<T extends CompleteObjectType> =\n    T extends AtomicType ? RawValueType :\n    T extends BoundedArrayType<infer Elem_type> ? ObjectRawValueRepresentation<Elem_type>[] :\n    T extends CompleteClassType ? { [index: string]: ObjectRawValueRepresentation<CompleteObjectType> } : unknown;\n\n// TODO: it may be more elegant to split into 3 derived types of CPPObject for arrays, classes, and\n// atomic objects and use a public factory function to create the appropriate instance based on the\n// template parameter. (Rather than the current awkward composition and conditional method strategy)\nexport abstract class CPPObject<T extends CompleteObjectType = CompleteObjectType> {\n\n    public readonly observable = new Observable(this);\n\n    /**\n     * Objects that result from a named declaration will have a name. For others\n     * (e.g. dynamically allocated objects, temporary objects), this will be undefined.\n     */\n    public readonly name?: string;\n    public readonly type: T;\n    public readonly size: number;\n    public readonly address: number;\n\n    private readonly data: any;\n\n    public readonly isAlive: boolean;\n    public readonly deallocatedBy?: RuntimeConstruct;\n\n    private _isValid: boolean;\n\n    public constructor(type: T, memory: Memory, address: number) {\n        this.type = type;\n        this.size = type.size;\n        assert(this.size != 0, \"Size cannot be 0.\"); // SCARY\n\n        if (this.type.isBoundedArrayType()) {\n            // this.isArray = true;\n            this.data = <any>new ArrayObjectData(<any>this, memory, address);\n        }\n        else if (this.type.isCompleteClassType()) {\n            this.data = <any>new ClassObjectData(<any>this, memory, address);\n        }\n        else {\n            this.data = <any>new AtomicObjectData(<any>this, memory, address);\n        }\n\n        this.address = address;\n\n        this.isAlive = true;\n        this._isValid = false;\n    }\n\n    // Only allowed if receiver matches CPPObject<ArrayType<Elem_type>>\n    public getArrayElemSubobject<AT extends BoundedArrayType>(this: CPPObject<AT>, index: number): ArraySubobject<AT[\"elemType\"]> {\n        return this.data.getArrayElemSubobject(index);\n    }\n\n    // Only allowed if receiver matches CPPObject<ArrayType<Elem_type>>\n    public getArrayElemSubobjects<AT extends BoundedArrayType>(this: CPPObject<AT>): readonly ArraySubobject<AT[\"elemType\"]>[] {\n        return this.data.getArrayElemSubobjects();\n    }\n\n    // Only allowed if receiver matches CPPObject<ArrayType<Elem_type>>\n    public getArrayElemSubobjectByAddress<AT extends BoundedArrayType>(this: CPPObject<AT>, address: number): ArraySubobject<AT[\"elemType\"]> {\n        return this.data.getArrayElemSubobjectByAddress(address);\n    }\n\n    /**\n     * Only allowed if receiver matches CPPObject<CompleteClassType>\n     * Note that this returns CPPObject rather than MemberSubobject because\n     * a reference member may refer to an external object that is not a subobject\n     * @param this \n     * @param name \n     */\n    public getMemberObject(this: CPPObject<CompleteClassType>, name: string) {\n        return (<ClassObjectData<CompleteClassType>>this.data).getMemberObject(name);\n    }\n\n    // Only allowed if receiver matches CPPObject<CompleteClassType>\n    public bindMemberReference(this: CPPObject<CompleteClassType>, name: string, obj: CPPObject<CompleteObjectType>) {\n        return (<ClassObjectData<CompleteClassType>>this.data).bindMemberReference(name, obj);\n    }\n\n    // Only allowed if receiver matches CPPObject<CompleteClassType>\n    public getBaseSubobject(this: CPPObject<CompleteClassType>) {\n        return (<ClassObjectData<CompleteClassType>>this.data).getBaseSubobject();\n    }\n\n    public subobjectValueWritten() {\n        this.observable.send(\"valueWritten\");\n    }\n\n    public toString() {\n        return \"@\" + this.address;\n    }\n\n    public kill(rt?: RuntimeConstruct) {\n\n        // kill subobjects\n        this.data.kill(rt);\n\n        (<Mutable<this>>this).isAlive = false;\n        this._isValid = false;\n        if (rt) {\n            (<Mutable<this>>this).deallocatedBy = rt;\n        }\n        this.observable.send(\"deallocated\");\n    }\n\n    public getPointerTo(): Value<PointerType<T>> {\n        return new Value(this.address, new ObjectPointerType(this));\n    }\n\n    public getValue(read: boolean = false): ObjectValueRepresentation<T> {\n        let val = this.data.getValue(this._isValid);\n        if (read) {\n            this.observable.send(\"valueRead\", val);\n        }\n        return <any>val;\n    }\n\n    public rawValue(): ObjectRawValueRepresentation<T> {\n        return <any>this.data.rawValue();\n    }\n\n    public readValue(): ObjectValueRepresentation<T> {\n        return this.getValue(true);\n    }\n\n    public setValue<T_Atomic extends AtomicType>(this: CPPObject<T_Atomic>, newValue: Value<T_Atomic>, write: boolean = false) {\n\n        this._isValid = newValue.isValid;\n\n        // Accept new RTTI\n        // However, we need to retain our own CV qualifiers\n        asMutable(this).type = newValue.type.cvQualified(this.type.isConst, this.type.isVolatile);\n\n        this.data.setRawValue(newValue.rawValue, write);\n\n        if (write) {\n            this.observable.send(\"valueWritten\", newValue);\n        }\n\n        this._onValueSet(write);\n    }\n\n    public _onValueSet(write: boolean) {\n\n    }\n\n    public writeValue<T_Atomic extends AtomicType>(this: CPPObject<T_Atomic>, newValue: Value<T_Atomic>) {\n        this.setValue(newValue, true);\n    }\n\n    public isValueValid<T_Atomic extends AtomicType>(this: CPPObject<T_Atomic>): boolean {\n        return this._isValid && this.type.isValueValid(this.rawValue());\n    }\n\n    // TODO: figure out whether this old code is worth keeping\n    // originally, these functions were used to notify an object when somebody else\n    // messed with (i.e. read/wrote bytes that were part of the object).\n\n    // byteRead: function(addr){\n    //     if (this.isArray){\n    //         // If array, find the subobject containing the byte\n    //         this.elemObjects[(addr - this.address) / this.nonRefType.elemType.size].byteRead(addr);\n    //     }\n    //     else if (this.isClass){\n    //         var ad = this.address;\n    //         for(var i = 0; i < this.subobjects.length; ++i) {\n    //             var mem = this.subobjects[i];\n    //             if(ad = ad + mem.type.size > addr){\n    //                 ad.byteRead(addr);\n    //                 break;\n    //             }\n    //         }\n    //     }\n    //     else{\n    //         this.send(\"byteRead\", {addr: addr});\n    //     }\n    // },\n    // bytesRead: function(addr, length){\n    //     if (this.isArray) {\n    //         var beginIndex = Math.max(0, Math.floor(( addr - this.address ) / this.nonRefType.elemType.size));\n    //         var endIndex = Math.min(\n    //             beginIndex + Math.ceil(length / this.nonRefType.elemType.size),\n    //             this.nonRefType.length);\n\n    //         for (var i = beginIndex; i < endIndex; ++i) {\n    //             this.elemObjects[i].bytesRead(addr, length);\n    //         }\n    //     }\n    //     else if (this.isClass){\n    //         for(var i = 0; i < this.subobjects.length; ++i) {\n    //             var mem = this.subobjects[i];\n    //             if(addr < mem.address + mem.type.size && mem.address < addr + length){ // check for overlap\n    //                 mem.bytesRead(addr, length);\n    //             }\n    //             else if (mem.address > addr +length){\n    //                 // break if we are now in members past affected bytes\n    //                 break;\n    //             }\n    //         }\n    //     }\n    //     else{\n    //         this.send(\"bytesRead\", {addr: addr, length: length});\n    //     }\n    // },\n    // byteSet: function(addr, value){\n    //     if (this.isArray){\n    //         // If array, find the subobject containing the byte\n    //         this.elemObjects[(addr - this.address) / this.nonRefType.elemType.size].byteSet(addr, value);\n    //     }\n    //     else if (this.isClass){\n    //         var ad = this.address;\n    //         for(var i = 0; i < this.subobjects.length; ++i) {\n    //             var mem = this.subobjects[i];\n    //             if(ad = ad + mem.type.size > addr){\n    //                 mem.byteSet(addr, value);\n    //                 break;\n    //             }\n    //         }\n    //     }\n    //     else{\n    //         this.send(\"byteSet\", {addr: addr, value: value});\n    //     }\n    // },\n    // bytesSet: function(addr, values){\n    //     var length = values.length;\n    //     if (this.isArray) {\n    //         var beginIndex = Math.max(0, Math.floor(( addr - this.address ) / this.nonRefType.elemType.size));\n    //         var endIndex = Math.min(\n    //             beginIndex + Math.ceil(length / this.nonRefType.elemType.size),\n    //             this.nonRefType.length);\n\n    //         for (var i = beginIndex; i < endIndex; ++i) {\n    //             this.elemObjects[i].bytesSet(addr, values);\n    //         }\n    //     }\n    //     else if (this.isClass){\n    //         for(var i = 0; i < this.subobjects.length; ++i) {\n    //             var mem = this.subobjects[i];\n    //             if(addr < mem.address + mem.type.size && mem.address < addr + length){ // check for overlap\n    //                 mem.bytesSet(addr, values);\n    //             }\n    //             else if (mem.address > addr +length){\n    //                 // break if we are now in members past affected bytes\n    //                 break;\n    //             }\n    //         }\n    //     }\n    //     else{\n    //         this.send(\"bytesSet\", {addr: addr, values: values});\n    //     }\n    // },\n    // byteWritten: function(addr, value){\n    //     if (this.isArray){\n    //         // If array, find the subobject containing the byte\n    //         this.elemObjects[(addr - this.address) / this.nonRefType.elemType.size].byteWritten(addr, value);\n    //     }\n    //     else if (this.isClass){\n    //         var ad = this.address;\n    //         for(var i = 0; i < this.subobjects.length; ++i) {\n    //             var mem = this.subobjects[i];\n    //             if(ad = ad + mem.type.size > addr){\n    //                 mem.byteWritten(addr, value);\n    //                 break;\n    //             }\n    //         }\n    //     }\n    //     else{\n    //         this.send(\"byteWritten\", {addr: addr, value: value});\n    //     }\n    // },\n    // bytesWritten: function(addr, values){\n    //     var length = values.length;\n    //     if (this.isArray) {\n    //         var beginIndex = Math.max(0, Math.floor(( addr - this.address ) / this.nonRefType.elemType.size));\n    //         var endIndex = Math.min(\n    //             beginIndex + Math.ceil(length / this.nonRefType.elemType.size),\n    //             this.nonRefType.length);\n\n    //         for (var i = beginIndex; i < endIndex; ++i) {\n    //             this.elemObjects[i].bytesWritten(addr, values);\n    //         }\n    //     }\n    //     else if (this.isClass){\n    //         for(var i = 0; i < this.subobjects.length; ++i) {\n    //             var mem = this.subobjects[i];\n    //             if(addr < mem.address + mem.type.size && mem.address < addr + length){ // check for overlap\n    //                 mem.bytesWritten(addr, values);\n    //             }\n    //             else if (mem.address > addr +length){\n    //                 // break if we are now in members past affected bytes\n    //                 break;\n    //             }\n    //         }\n    //     }\n    //     else{\n    //         this.send(\"bytesWritten\", {addr: addr, values: values});\n    //     }\n    // },\n\n\n    public callReceived() {\n        this.observable.send(\"callReceived\", this);\n    }\n\n    public callEnded() {\n        this.observable.send(\"callEnded\", this);\n    }\n\n    public setValidity(valid: boolean) {\n        this._isValid = valid;\n        this.observable.send(\"validitySet\", valid);\n    }\n\n    public isTyped<NarrowedT extends CompleteObjectType>(predicate: (t:CompleteObjectType) => t is NarrowedT) : this is CPPObject<NarrowedT> {\n        return predicate(this.type);\n    }\n\n    public abstract describe(): ObjectDescription;\n\n};\n\n// TODO: Kept some of this in a comment in case it's helpful when reintroducing leak checking\n// export class DynamicObject extends CPPObject {\n\n//     private hasBeenLeaked: boolean = false;\n\n//     public constructor(type: ObjectType, memory: Memory, address: number) {\n//         super(type, memory, address);\n//     }\n\n//     public toString() {\n//         return \"Heap object at \" + this.address + \" (\" + this.type + \")\";\n//     }\n\n//     public leaked(sim: Simulation) {\n//         if (!this.hasBeenLeaked){\n//             this.hasBeenLeaked = true;\n//             sim.memoryLeaked(\"Oh no! Some memory just got lost. It's highlighted in red in the memory display.\")\n//             this.observable.send(\"leaked\");\n//         }\n//     }\n\n//     // TODO: Why does this exist? How does something become unleaked??\n//     public unleaked(sim: Simulation) {\n//         this.observable.send(\"unleaked\");\n//     }\n\n//     public describe() {\n//         return {message: \"the heap object at 0x\" + this.address};\n//     }\n// }\n\n\n\n\n\n// TODO: remove this?\n// export var EvaluationResultRuntimeEntity = CPPObject.extend({\n//     _name: \"EvaluationResultRuntimeEntity\",\n//     storage: \"automatic\",\n//     init: function(type, inst){\n//         this.initParent(null, type);\n//         this.inst = inst;\n//     },\n//     instanceString : function(){\n//         return this.name + \" (\" + this.type + \")\";\n//     },\n//     runtimeLookup :  function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//         return this.inst.evalResult.runtimeLookup(sim, inst);\n//     }\n// });\n\n\n// public static createAutoObject<T extends ObjectType>(entity: AutoEntity<T>, memory: Memory, address: number) {\n//     return new CPPObject(entity.type, memory, address, new EntityObjectDescriptor(entity));\n// }\n\nexport class AutoObject<T extends CompleteObjectType = CompleteObjectType> extends CPPObject<T> {\n\n    public readonly name: string;\n\n    public readonly def: LocalVariableDefinition | ParameterDefinition\n\n    public constructor(def: LocalVariableDefinition | ParameterDefinition, type: T, memory: Memory, address: number) {\n        super(type, memory, address);\n        this.def = def;\n        this.name = def.name;\n    }\n\n    public describe(): ObjectDescription {\n        return this.def.declaredEntity.describe();\n    }\n\n}\n\n\nexport class MainReturnObject extends CPPObject<Int> {\n\n    public constructor(memory: Memory) {\n        super(Int.INT, memory, 0); // HACK: put it at address 0. probably won't cause any issues since it's not allocated\n    }\n\n    public describe(): ObjectDescription {\n        return { name: \"[main() return]\", message: \"The value returned from main.\" }\n    }\n\n}\n\nexport class StaticObject<T extends CompleteObjectType = CompleteObjectType> extends CPPObject<T> {\n\n    public readonly name: string;\n\n    public constructor(public readonly def: CompiledGlobalVariableDefinition, type: T, memory: Memory, address: number) {\n        super(type, memory, address);\n        this.name = def.name;\n    }\n\n    public describe(): ObjectDescription {\n        return this.def.declaredEntity.describe();\n    }\n\n}\n\nexport class DynamicObject<T extends CompleteObjectType = CompleteObjectType> extends CPPObject<T> {\n\n    public describe(): ObjectDescription {\n        return { name: `[dynamic @${this.address}]`, message: `the heap object at 0x${this.address}` };\n    }\n\n}\n\nexport class InvalidObject<T extends CompleteObjectType = CompleteObjectType> extends CPPObject<T> {\n\n    public constructor(type: T, memory: Memory, address: number) {\n        super(type, memory, address);\n        this.setValidity(false);\n        this.kill();\n    }\n\n    public describe(): ObjectDescription {\n        return { name: `[invalid @${this.address}]`, message: `an invalid object at 0x${this.address}` };\n    }\n}\n\nexport class ThisObject<T extends CompleteObjectType = CompleteObjectType> extends CPPObject<T> {\n\n    public describe(): ObjectDescription {\n        return { name: \"this\", message: \"the this pointer\" };\n    }\n\n}\n\nexport class StringLiteralObject extends CPPObject<BoundedArrayType<Char>> {\n\n    public constructor(type: BoundedArrayType<Char>, memory: Memory, address: number) {\n        super(type, memory, address);\n    }\n\n    public describe(): ObjectDescription {\n        return { name: `[string literal @${this.address}]`, message: \"string literal at 0x\" + this.address }\n    }\n\n}\n\nabstract class Subobject<T extends CompleteObjectType = CompleteObjectType> extends CPPObject<T> {\n\n    public readonly containingObject: CPPObject<BoundedArrayType | CompleteClassType>;\n\n    public constructor(containingObject: CPPObject<BoundedArrayType | CompleteClassType>, type: T, memory: Memory, address: number) {\n        super(type, memory, address);\n        this.containingObject = containingObject;\n    }\n\n    public _onValueSet(write: boolean) {\n        if (write) {\n            this.containingObject.subobjectValueWritten();\n        }\n    }\n}\n\nexport class ArraySubobject<T extends ArrayElemType = ArrayElemType> extends Subobject<T> {\n\n    public readonly containingObject!: CPPObject<BoundedArrayType<T>>; // Handled by parent (TODO: is this a good idea?)\n    public readonly index: number;\n\n    public constructor(arrObj: CPPObject<BoundedArrayType<T>>, index: number, memory: Memory, address: number) {\n        super(arrObj, arrObj.type.elemType, memory, address);\n        this.index = index;\n    }\n\n    public getPointerTo() {\n        return new Value(this.address, new ArrayPointerType(this.containingObject));\n    }\n\n    describe() {\n        var arrDesc = this.containingObject.describe();\n        return {\n            name: arrDesc.name + \"[\" + this.index + \"]\",\n            message: \"element \" + this.index + \" of \" + arrDesc.message,\n        };\n    }\n\n}\n\nexport class BaseSubobject extends Subobject<CompleteClassType> {\n\n    public readonly containingObject!: CPPObject<CompleteClassType>; // Handled by parent (TODO: is this a good idea?)\n\n    public constructor(containingObject: CPPObject<CompleteClassType>, type: CompleteClassType, memory: Memory, address: number) {\n        super(containingObject, type, memory, address);\n    }\n\n    public describe(): ObjectDescription {\n        let contDesc = this.containingObject.describe();\n        return { name: `[${this.type.className} base of ${contDesc.name}]`, message: \"the \" + this.type.className + \" base of \" + contDesc.message };\n    }\n}\n\nexport class MemberSubobject<T extends CompleteObjectType = CompleteObjectType> extends Subobject<T> {\n\n    public readonly containingObject!: CPPObject<CompleteClassType>; // Handled by parent (TODO: is this a good idea?)\n    public readonly name: string;\n\n    public constructor(containingObject: CPPObject<CompleteClassType>, type: T, name: string, memory: Memory, address: number) {\n        super(containingObject, type, memory, address);\n        this.name = name;\n    }\n\n    public describe() {\n        var parent = this.containingObject;\n        let parentDesc = parent.describe();\n        return {\n            name: parentDesc.name + \".\" + this.name,\n            message: \"the member \" + this.name + \" of \" + parentDesc.message\n        }\n    }\n}\n\n\n// export type TemporaryObjectType<T extends ObjectType> = T extends ObjectType ? TemporaryObject<T> : never;\n\nexport class TemporaryObject<T extends CompleteObjectType = CompleteObjectType> extends CPPObject<T> {\n\n    private description: string;\n\n    // public static create<T extends ObjectType>(type: T, memory: Memory, address: number, name?: string) : T extends ObjectType ? TemporaryObject<T> : never {\n    //     return <any> new TemporaryObject(type, memory, address, name);\n    // }\n\n    public constructor(type: T, memory: Memory, address: number, description: string) {\n        super(type, memory, address);\n        this.description = description;\n        // this.entityId = tempObjEntity.entityId;\n    }\n\n    public describe(): ObjectDescription {\n        return { name: this.description, message: \"the temporary object \" + this.name };\n    }\n}","import {ASTNode, ExpressionContext, CPPConstruct, SuccessfullyCompiled, ConstructDescription, CompiledTemporaryDeallocator, RuntimeConstruct } from \"./constructs\"\nimport { Value } from \"./runtimeEnvironment\";\nimport { Int, ExpressionType, VoidType, CompleteObjectType, ReferenceType } from \"./types\";\nimport { assert } from \"../util/util\";\nimport { Expression, ValueCategory, VCResultTypes, RuntimeExpression, t_TypedExpression } from \"./expressionBase\";\nimport { ConstructOutlet, OpaqueExpressionOutlet } from \"../view/codeOutlets\";\nimport { LocalObjectEntity, LocalReferenceEntity } from \"./entities\";\n\n\nexport type OpaqueExpressionImpl<T extends ExpressionType = ExpressionType, VC extends ValueCategory = ValueCategory> = {\n    type: T | ((context: ExpressionContext) => T),\n    valueCategory: VC,\n    upNext?: (rt: RuntimeOpaqueExpression<T,VC>) => void\n    operate: (rt: RuntimeOpaqueExpression<T,VC>) => T extends VoidType ? void : VCResultTypes<T,VC>,\n}\n\nconst OPAQUE_EXPRESSIONS : {[index: string]: OpaqueExpressionImpl} = {\n    // \"test\": <OpaqueExpressionImpl> {\n    //     type: VoidType.VOID,\n    //     valueCategory: \"prvalue\",\n    //     operate: (rt: RuntimeOpaqueExpression<VoidType,\"prvalue\">) => { rt.sim.cout(new Value(10, Int.INT)); }\n    // }\n};\n\nexport function registerOpaqueExpression<T extends ExpressionType = ExpressionType, VC extends ValueCategory = ValueCategory>(id: string, impl: OpaqueExpressionImpl<T,VC>) {\n    assert(!OPAQUE_EXPRESSIONS[id]);\n    OPAQUE_EXPRESSIONS[id] = <any>impl;\n}\n\nexport interface OpaqueExpressionASTNode extends ASTNode {\n    readonly construct_type: \"opaque_expression\";\n    readonly id: string;\n}\n\nexport class OpaqueExpression<T extends ExpressionType = ExpressionType, VC extends ValueCategory = ValueCategory> extends Expression<OpaqueExpressionASTNode> {\n    public readonly construct_type = \"opaque_expression\";\n    \n    public readonly type: T;\n    public readonly valueCategory: VC;\n\n    public readonly impl: OpaqueExpressionImpl<T,VC>;\n\n    public static createFromAST(ast: OpaqueExpressionASTNode, context: ExpressionContext) {\n        assert(OPAQUE_EXPRESSIONS[ast.id]);\n        return new OpaqueExpression(context, OPAQUE_EXPRESSIONS[ast.id], ast);\n    }\n\n    public constructor(context: ExpressionContext, impl: OpaqueExpressionImpl<T,VC>, ast?: OpaqueExpressionASTNode) {\n        super(context, undefined);\n        this.impl = impl;\n        if (typeof impl.type === \"function\") {\n            this.type = impl.type(context);\n        }\n        else {\n            this.type = impl.type;\n        }\n        this.valueCategory = impl.valueCategory;\n    }\n\n    public createDefaultOutlet(this: CompiledOpaqueExpression, element: JQuery, parent?: ConstructOutlet) {\n        return new OpaqueExpressionOutlet(element, this, parent);\n    }\n\n    public isTailChild(child: CPPConstruct) {\n        return { isTail: true };\n    }\n    \n    // TODO\n    public describeEvalResult(depth: number): ConstructDescription {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nexport interface TypedOpaqueExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends OpaqueExpression<T,V>, t_TypedExpression {\n\n}\n\nexport interface CompiledOpaqueExpression<T extends ExpressionType = ExpressionType, V extends ValueCategory = ValueCategory> extends TypedOpaqueExpression<T, V>, SuccessfullyCompiled {\n    readonly temporaryDeallocator?: CompiledTemporaryDeallocator; // to match CompiledPotentialFullExpression structure\n}\n\nexport class RuntimeOpaqueExpression<T extends ExpressionType = ExpressionType, VC extends ValueCategory = ValueCategory> extends RuntimeExpression<T,VC,CompiledOpaqueExpression<T,VC>> {\n\n    public constructor(model: CompiledOpaqueExpression<T,VC>, parent: RuntimeConstruct) {\n        super(model, parent);\n    }\n\n    protected upNextImpl() {\n        this.model.impl.upNext && this.model.impl.upNext(this)\n    }\n\n    private isVoid() : this is RuntimeOpaqueExpression<VoidType> {\n        return this.model.type.isVoidType();\n    }\n\n    protected stepForwardImpl() {\n        let result = this.model.impl.operate(this);\n        if (!this.model.type.isVoidType()) {\n            this.setEvalResult(<VCResultTypes<T,VC>>result);\n        }\n        this.startCleanup();\n    }\n}\n\nexport function lookupTypeInContext(typeName: string) {\n    return (context: ExpressionContext) => {\n        let customType = context.contextualScope.lookup(typeName);\n        assert(customType?.declarationKind === \"class\");\n        return customType.type.cvUnqualified();\n    }\n}\n\nexport function getLocal<T extends CompleteObjectType>(rt: RuntimeExpression, name: string) {\n    let local = <LocalObjectEntity<T> | LocalReferenceEntity<ReferenceType<T>>>rt.model.context.contextualScope.lookup(name);\n    if(local.variableKind === \"object\") {\n        return local.runtimeLookup(rt);\n    }\n    else {\n        return local.runtimeLookup(rt);\n    }\n}","\nimport { AnalyticExpression, TypedExpressionKinds, CompiledExpressionKinds, TernaryExpression, TypedCommaExpression, AnalyticCompiledExpression, AnalyticTypedExpression, IdentifierExpression, PointerDifferenceExpression, TypedPointerDifferenceExpression, AssignmentExpression, TypedAssignmentExpression, NumericLiteralExpression, ImplicitConversion, PrefixIncrementExpression, PostfixIncrementExpression, OverloadableOperator, OperatorOverloadExpression, isOperatorOverloadExpression, DotExpression, ArrowExpression } from \"./expressions\";\nimport { ValueCategory, Expression, TypedExpression } from \"./expressionBase\";\nimport { UnknownTypeDeclaration, VoidDeclaration, TypedUnknownBoundArrayDeclaration, FunctionDeclaration, TypedFunctionDeclaration, LocalVariableDefinition, TypedLocalVariableDefinition, GlobalVariableDefinition, TypedGlobalVariableDefinition, ParameterDeclaration, TypedParameterDeclaration, Declarator, TypedDeclarator, TypedFunctionDefinition, ClassDeclaration, TypedClassDeclaration, ClassDefinition, TypedClassDefinition, FunctionDefinition, AnalyticDeclaration, TypeSpecifier, StorageSpecifier, AnalyticTypedDeclaration, TypedDeclarationKinds, AnalyticCompiledDeclaration } from \"./declarations\";\nimport { Type, VoidType, ArrayOfUnknownBoundType, Bool, AtomicType, Int, isAtomicType, ExpressionType } from \"./types\";\nimport { DiscriminateUnion } from \"../util/util\";\nimport { AnalyticStatement } from \"./statements\";\nimport { CPPConstruct } from \"./constructs\";\nimport { FunctionCallExpression, FunctionCall } from \"./functionCall\";\nimport { DirectInitializer, AtomicDirectInitializer } from \"./initializers\";\nimport { findFirstConstruct } from \"./analysis\";\n\n\n\nexport type ConstructKind<Cs extends {construct_type: string}> = Cs[\"construct_type\"];\n\nexport type AnalyticConstruct = AnalyticDeclaration | TypeSpecifier | StorageSpecifier | AnalyticExpression | AnalyticStatement;\n\n// type TypedKinds<T extends Type> = TypedDeclarationKinds<T> & TypedExpressionKinds<T, ValueCategory>;\n// export type AnalyticTyped<C extends AnalyticConstruct, T extends Type = Type> =\n//     C extends AnalyticDeclaration ? AnalyticTypedDeclaration<C, T> :\n//     C extends AnalyticExpression ? AnalyticTypedExpression<C, T> : never;\n// // export type AnalyticCompiledDeclaration<C extends AnalyticDeclaration, T extends AnalyticDeclaration[\"type\"] = AnalyticDeclaration[\"type\"]> = CompiledDeclarationKinds<T>[C[\"construct_type\"]];\n\n// export type AnalyticCompiled<C extends AnalyticConstruct> =\n//     C extends AnalyticDeclaration ? AnalyticCompiledDeclaration<C> :\n//     C extends AnalyticExpression ? AnalyticCompiledExpression<C> : never;\n// let x!: AnalyticTyped<AnalyticTyped<TernaryExpression, Int>, Bool>;\n\nexport namespace Predicates {\n    \n        // export function compiled<T extends FunctionType>(typePredicate?: (o: Type) => o is T) {\n        //     return </*¯\\_(ツ)_/¯*/<OriginalT extends Type, Original extends CPPConstruct & {type?: OriginalT}, Narrowed extends CompiledFunctionDeclaration<T>>(decl: Original) =>\n        //         decl is (Narrowed extends Original ? Narrowed : never)>\n        //             ((decl) => typed(typePredicate) && decl.isSuccessfullyCompiled());\n        // }\n\n\n    \n    // export function byKind<Original extends CPPConstruct, Narrowed extends CPPConstruct>\n    //     (decl: Original) : decl is Narrowed extends Original ? Narrowed : never {\n    //     return decl instanceof SimpleDeclaration;\n    // }\n\n    export function byKind<NarrowedKind extends ConstructKind<AnalyticConstruct>>(constructKind: NarrowedKind) {\n        return </*¯\\_(ツ)_/¯*/<Original extends {construct_type: string}, Narrowed extends DiscriminateUnion<Original, \"construct_type\", NarrowedKind>>(construct: Original) =>\n            construct is (Narrowed extends Original ? Narrowed : never)>\n                ((construct) => construct.construct_type === constructKind);\n    }\n\n    export function byKinds<NarrowedKind extends ConstructKind<AnalyticConstruct>>(constructKinds: readonly NarrowedKind[]) {\n        return </*¯\\_(ツ)_/¯*/<Original extends {construct_type: string}, Narrowed extends DiscriminateUnion<Original, \"construct_type\", NarrowedKind>>(construct: Original) =>\n            construct is (Narrowed extends Original ? Narrowed : never)>\n                ((construct) => (<readonly string[]>constructKinds).indexOf(construct.construct_type) !== -1);\n    }\n\n    // export function isTyped<OriginalT extends Type, NarrowedT extends Type,\n    //     Original extends ConstructUnion & {type?: OriginalT},\n    //     Narrowed extends TypedKinds<NarrowedT>[Original[\"construct_type\"]]>\n    //     (decl: Original, typePredicate?: (o: Type) => o is NarrowedT) : decl is (Narrowed extends Original ? Narrowed : never) {\n    //     return !!decl.type && (!typePredicate || typePredicate(decl.type));\n    // }\n\n    export function byTypedExpression<NarrowedT extends ExpressionType, NarrowedVC extends ValueCategory>(typePredicate?: (o: ExpressionType) => o is NarrowedT, valueCategory?: NarrowedVC) {\n        return </*¯\\_(ツ)_/¯*/<OriginalT extends ExpressionType, Original extends AnalyticConstruct & {type?: OriginalT, valueCategory?: ValueCategory},\n        Narrowed extends (Original extends AnalyticExpression ? AnalyticTypedExpression<Original, NarrowedT, NarrowedVC> : never)>(construct: Original) =>\n            construct is (Narrowed extends Original ? Narrowed : never)> // TODO conditional on this line can probably be removed\n                ((construct) => construct.type && (!typePredicate || typePredicate(construct.type)) && (!valueCategory || construct.valueCategory === valueCategory));\n    }\n\n    export function isTypedExpression<OriginalT extends ExpressionType, NarrowedT extends ExpressionType,\n        Original extends AnalyticConstruct & {type?: OriginalT, valueCategory?: ValueCategory},\n        NarrowedVC extends NonNullable<Original[\"valueCategory\"]>,\n        Narrowed extends (Original extends AnalyticExpression ? AnalyticTypedExpression<Original, NarrowedT, NarrowedVC> : never)>\n        (construct: Original, typePredicate?: (o: ExpressionType) => o is NarrowedT, valueCategory?: NarrowedVC)\n        : construct is (Narrowed extends Original ? Narrowed : Original extends Narrowed ? Original : never);\n    export function isTypedExpression<OriginalT extends ExpressionType, NarrowedT extends ExpressionType,\n        Original extends CPPConstruct & {type?: OriginalT, valueCategory?: ValueCategory},\n        NarrowedVC extends NonNullable<Original[\"valueCategory\"]>,\n        Narrowed extends (Original extends Expression ? TypedExpression<NarrowedT, NarrowedVC> : never)>\n        (construct: Original, typePredicate: (o: ExpressionType) => o is NarrowedT, valueCategory?: NarrowedVC)\n        : construct is (Narrowed extends Original ? Narrowed : Original extends Narrowed ? Original : never);\n    export function isTypedExpression<OriginalT extends ExpressionType, NarrowedT extends ExpressionType,\n        Original extends AnalyticConstruct & {type?: OriginalT, valueCategory?: ValueCategory},\n        NarrowedVC extends NonNullable<Original[\"valueCategory\"]>,\n        Narrowed extends (Original extends AnalyticExpression ? AnalyticTypedExpression<Original, NarrowedT, NarrowedVC> : never)>\n        (construct: Original, typePredicate?: (o: ExpressionType) => o is NarrowedT, valueCategory?: NarrowedVC)\n        : construct is (Narrowed extends Original ? Narrowed : Original extends Narrowed ? Original : never) {\n            return !!(construct.type && (!typePredicate || typePredicate(construct.type)) && (!valueCategory || construct.valueCategory === valueCategory));\n    }\n\n    // Basically copies of above but with Declaration swapping in for Expression and ValueCategory removed\n    export function byTypedDeclaration<NarrowedT extends Type>(typePredicate?: (o: Type) => o is NarrowedT) {\n        return </*¯\\_(ツ)_/¯*/<OriginalT extends Type, Original extends AnalyticConstruct & {type?: OriginalT},\n        Narrowed extends (Original extends AnalyticDeclaration ? AnalyticTypedDeclaration<Original, NarrowedT> : never)>(construct: Original) =>\n            construct is (Narrowed extends Original ? Narrowed : never)> // TODO conditional on this line can probably be removed\n                ((construct) => construct.type && (!typePredicate || typePredicate(construct.type)));\n    }\n\n    export function isTypedDeclaration<OriginalT extends Type, NarrowedT extends Type,\n        Original extends AnalyticConstruct & {type?: OriginalT}, Narrowed extends (Original extends AnalyticDeclaration ? AnalyticTypedDeclaration<Original, NarrowedT> : never)>\n        (construct: Original, typePredicate?: (o: Type) => o is NarrowedT) : construct is (Narrowed extends Original ? Narrowed : never) { // TODO conditional on this line can probably be removed \n            return !!(construct.type && (!typePredicate || typePredicate(construct.type)));\n    }\n\n    export function byVariableName(name: string) {\n        return <(construct: AnalyticConstruct) => construct is (LocalVariableDefinition | GlobalVariableDefinition)>\n                ((construct) => (construct instanceof LocalVariableDefinition || construct instanceof GlobalVariableDefinition) && construct.name === name);\n    }\n\n    export function byVariableInitialValue(queryValue: number) {\n        return <(construct: AnalyticConstruct) => construct is (LocalVariableDefinition | GlobalVariableDefinition)>\n            ((construct) => {\n                if (! (construct instanceof LocalVariableDefinition || construct instanceof GlobalVariableDefinition)) {\n                    return false;\n                }\n\n                let init = construct.initializer;\n                if (! (init instanceof AtomicDirectInitializer)) {\n                    return false;\n                }\n\n                let expr = init.arg;\n                while (expr instanceof ImplicitConversion) {\n                    expr = expr.from;\n                }\n\n                return expr instanceof NumericLiteralExpression && expr.value.rawEquals(queryValue);\n\n            });\n    }\n\n    // TODO: add compound assignment expressions once implemented\n    export function byVariableUpdate(name: string) {\n        return <(construct: AnalyticConstruct) => construct is (AssignmentExpression | PrefixIncrementExpression | PostfixIncrementExpression)>\n            ((construct) => {\n                if (Predicates.byKinds([\n                    \"prefix_increment_expression\",\n                    \"postfix_increment_expression\"\n                ])(construct)) {\n                    \n                    // check for var\n                    return !! findFirstConstruct(construct, Predicates.byIdentifierName(name));\n                }\n\n                if (Predicates.byKind(\"assignment_expression\")(construct)) {\n                    // check for var on lhs and rhs\n                    return !! findFirstConstruct(construct.lhs, Predicates.byIdentifierName(name)) &&\n                           !! findFirstConstruct(construct.rhs, Predicates.byIdentifierName(name));\n                }\n                \n                return false;\n            });\n    }\n\n    export function byFunctionName(name: string) {\n        return <(construct: AnalyticConstruct) => construct is FunctionDefinition>\n                ((construct) => (construct instanceof FunctionDefinition) && construct.name === name);\n    }\n\n    export function byFunctionCallName<N extends string>(name: N) {\n        return <(construct: AnalyticConstruct) => construct is FunctionCallExpression & {call: FunctionCall}>\n                ((construct) => (construct instanceof FunctionCallExpression) && construct.call?.func.name === name);\n    }\n\n    export function byOperatorOverloadCall<N extends string>(operator: OverloadableOperator) {\n        return <(construct: AnalyticConstruct) => construct is OperatorOverloadExpression>\n                ((construct) => isOperatorOverloadExpression(construct) && construct.operator === operator);\n    }\n\n    export function byIdentifierName<N extends string>(name: N) {\n        return <(construct: AnalyticConstruct) => construct is IdentifierExpression & {name: N}>\n                ((construct) => (construct instanceof IdentifierExpression) && construct.name === name);\n    }\n\n    export function byMemberAccessName<N extends string>(memberName: N) {\n        return <(construct: AnalyticConstruct) => construct is DotExpression | ArrowExpression & {memberName: N}>\n                ((construct) => (construct instanceof DotExpression || construct instanceof ArrowExpression) && construct.memberName === memberName);\n    }\n\n    // export function byCompiled<Original extends AnalyticDeclaration>(construct: Original) : construct is AnalyticCompiledDeclaration<Original> {\n    //     return construct.isSuccessfullyCompiled();\n    // }\n\n}","import { assert, assertFalse, Mutable, CPPRandom } from \"../util/util\";\nimport { Observable } from \"../util/observe\";\nimport { CPPObject, AutoObject, StringLiteralObject, StaticObject, TemporaryObject, DynamicObject, ThisObject, InvalidObject, ArraySubobject } from \"./objects\";\nimport { Bool, Char, ObjectPointerType, ArrayPointerType, similarType, subType, PointerType, sameType, AtomicType, IntegralType, Int, ArrayElemType, BoundedArrayType, ReferenceType, PointerToCompleteType, CompleteObjectType } from \"./types\";\nimport last from \"lodash/last\";\nimport { GlobalObjectEntity, LocalObjectEntity, LocalReferenceEntity, TemporaryObjectEntity } from \"./entities\";\nimport { RuntimeConstruct } from \"./constructs\";\nimport { CompiledGlobalVariableDefinition } from \"./declarations\";\nimport { RuntimeFunction } from \"./functions\";\n\nexport type byte = number; // HACK - can be resolved if I make the memory model realistic and not hacky\nexport type RawValueType = number; // HACK - can be resolved if I make the raw value type used depend on the Type parameter\n\n// export type ValueType<T extends AtomicType> = T extends AtomicType ? Value<T> : never;\n\nexport class Value<T extends AtomicType = AtomicType> {\n    private static _name = \"Value\";\n\n    public readonly type: T;\n    private readonly _isValid: boolean;\n\n    public readonly rawValue: RawValueType;\n\n\n    // TODO: ts: change any type for value to match type expected for CPP type of value\n    constructor(rawValue: RawValueType, type: T, isValid: boolean = true) {\n        // TODO: remove this.value in favor of using rawValue() function\n        this.rawValue = rawValue;\n        this.type = type;\n        this._isValid = isValid;\n    };\n\n    public get isValid() {\n        // Note: this is implemented as a getter since it is necessary to call isValueValid on the type each time.\n        //       e.g. A type with RTTI like an object pointer may become invalid if the object dies.\n        return this._isValid && this.type.isValueValid(this.rawValue);\n    }\n\n    public isTyped<NarrowedT extends AtomicType>(predicate: (t:AtomicType) => t is NarrowedT) : this is Value<NarrowedT> {\n        return predicate(this.type);\n    }\n\n    public clone(valueToClone: RawValueType = this.rawValue) {\n        return new Value<T>(valueToClone, this.type, this.isValid);\n    }\n\n    public cvUnqualified() {\n        return new Value<T>(this.rawValue, this.type.cvUnqualified(), this.isValid);\n    }\n\n    public cvQualified(isConst: boolean, isVolatile: boolean = false) {\n        return new Value<T>(this.rawValue, this.type.cvQualified(isConst, isVolatile), this.isValid);\n    }\n\n    public invalidated() {\n        return new Value<T>(this.rawValue, this.type, false);\n    }\n\n    public equals(otherValue: Value<T>) {\n        return new Value<Bool>(\n            this.rawValue === otherValue.rawValue ? 1 : 0,\n            new Bool(),\n            this.isValid && otherValue.isValid);\n    }\n\n    public rawEquals(otherRawValue: RawValueType) {\n        return this.rawValue === otherRawValue;\n    }\n\n    public combine(otherValue: Value<T>, combiner: (a: RawValueType, b: RawValueType) => RawValueType) {\n        assert(similarType(this.type, otherValue.type));\n        return new Value<T>(\n            combiner(this.rawValue, otherValue.rawValue),\n            this.type,\n            this.isValid && otherValue.isValid);\n    }\n\n    public pointerOffset<T extends PointerToCompleteType>(this: Value<T>, offsetValue: Value<IntegralType>, subtract: boolean = false) {\n        return new Value<T>(\n            (subtract ?\n                this.rawValue - this.type.ptrTo.size * offsetValue.rawValue :\n                this.rawValue + this.type.ptrTo.size * offsetValue.rawValue),\n            this.type,\n            this.isValid && offsetValue.isValid);\n    }\n\n    public pointerOffsetRaw<T extends PointerToCompleteType>(this: Value<T>, rawOffsetValue: number, subtract: boolean = false) {\n        return new Value<T>(\n            (subtract ?\n                this.rawValue - this.type.ptrTo.size * rawOffsetValue :\n                this.rawValue + this.type.ptrTo.size * rawOffsetValue),\n            this.type,\n            this.isValid);\n    }\n\n    public pointerDifference(this: Value<PointerToCompleteType>, otherValue: Value<PointerToCompleteType>) {\n        return new Value<Int>(\n            (this.rawValue - otherValue.rawValue) / this.type.ptrTo.size,\n            new Int(),\n            this.isValid && otherValue.isValid);\n    }\n\n    public compare(otherValue: Value<T>, comparer: (a: RawValueType, b: RawValueType) => boolean) {\n        assert(similarType(this.type, otherValue.type));\n        return new Value<Bool>(\n            comparer(this.rawValue, otherValue.rawValue) ? 1 : 0,\n            new Bool(),\n            this.isValid && otherValue.isValid);\n    }\n\n    public modify(modifier: (a: RawValueType) => RawValueType) {\n        return new Value<T>(\n            modifier(this.rawValue),\n            this.type,\n            this.isValid);\n    }\n    \n    public add(otherValue: Value<T>) {\n        return this.combine(otherValue, (a,b) => a + b);\n    }\n\n    public addRaw(x: number) {\n        return this.modify(a => a + x);\n    }\n    \n    public sub(otherValue: Value<T>) {\n        return this.combine(otherValue, (a,b) => a - b);\n    }\n\n    public subRaw(x: number) {\n        return this.modify(a => a - x);\n    }\n    \n    public arithmeticNegate() {\n        return this.modify(a => -a);\n    }\n    \n    public logicalNot() {\n        return this.modify(a => a === 0 ? 1 : 0);\n    }\n\n    public toString() {\n        return this.valueString();\n    }\n\n    public valueString() {\n        return this.type.valueToString(this.rawValue);\n    }\n\n    // TODO: perhaps this should be moved to the ostream class\n    public valueToOstreamString() {\n        return this.type.valueToOstreamString(this.rawValue);\n    }\n\n    /**\n     * This should be used VERY RARELY. The only time to use it is if you have a temporary Value instance\n     * that you're using locally and want to keep updating its raw value to something else before passing\n     * to something like memory.dereference(). For example, this is done when traversing through a cstring by\n     * getting the value of the pointer initially, then ad hoc updating that value as you move through the cstring.\n     */\n    public setRawValue(rawValue: RawValueType) {\n        (<RawValueType>this.rawValue) = rawValue;\n        (<boolean>this.isValid) = this.isValid && this.type.isValueValid(this.rawValue);\n    }\n\n    public describe() {\n        return { message: this.valueString() };\n    }\n}\n\nexport class Memory {\n    private static _name = \"Memory\";\n\n    public readonly observable = new Observable(this);\n\n    public readonly capacity: number;\n    public readonly staticCapacity: number;\n    public readonly stackCapacity: number;\n    public readonly heapCapacity: number;\n\n    public readonly staticStart: number;\n    public readonly staticEnd: number;\n\n    public readonly stackStart: number;\n    public readonly stackEnd: number;\n\n    public readonly heapStart: number;\n    public readonly heapEnd: number;\n\n    public readonly temporaryStart: number;\n    public readonly temporaryCapacity: number;\n    public readonly temporaryEnd: number;\n\n    // Definite assignment assertions with ! are for properties initialized in the reset function called\n    // at the end of the constructor.\n    private bytes!: RawValueType[]; //TODO: Hack - instead of real bytes, memory just stores the raw value in the first byte of an object\n    private objects!: { [index: number]: CPPObject<CompleteObjectType> };\n    private stringLiteralMap!: { [index: string]: StringLiteralObject | undefined };\n    private staticObjects!: { [index: string]: StaticObject };\n    private temporaryObjects!: { [index: number]: TemporaryObject };\n    public readonly stack!: MemoryStack;\n    public readonly heap!: MemoryHeap;\n\n    private staticTop!: number;\n    private temporaryBottom!: number;\n\n    constructor(capacity?: number, staticCapacity?: number, stackCapacity?: number) {\n        this.capacity = capacity || 100000;\n        this.staticCapacity = staticCapacity || Math.floor(this.capacity / 10);\n        this.stackCapacity = stackCapacity || Math.floor((this.capacity - this.staticCapacity) / 2);\n        this.heapCapacity = this.capacity - this.staticCapacity - this.stackCapacity;\n\n        this.staticStart = 0;\n        this.staticEnd = this.staticStart + this.staticCapacity;\n\n        this.stackStart = this.staticEnd;\n        this.stackEnd = this.stackStart + this.stackCapacity;\n\n        this.heapStart = this.stackEnd;\n        this.heapEnd = this.heapStart + this.heapCapacity;\n\n        this.temporaryStart = this.heapEnd + 100;\n        this.temporaryCapacity = 100000;\n        this.temporaryEnd = this.temporaryStart + this.temporaryCapacity;\n\n        assert(this.staticCapacity < this.capacity && this.stackCapacity < this.capacity && this.heapCapacity < this.capacity);\n        assert(this.heapEnd == this.capacity);\n\n        this.reset();\n    }\n\n    public reset() {\n\n        let rng = new CPPRandom(0);\n\n        // memory is a sequence of bytes, addresses starting at 0\n        this.bytes = new Array(this.capacity + this.temporaryCapacity);\n        for (var i = 0; i < this.capacity + this.temporaryCapacity; ++i) {\n            this.bytes[i] = rng.randomInteger(0, 100);\n        }\n\n        this.objects = {};\n        this.stringLiteralMap = {};\n        this.staticTop = this.staticStart + 4;\n        this.staticObjects = {};\n        this.temporaryBottom = this.temporaryStart;\n\n        (<Mutable<this>>this).stack = new MemoryStack(this, this.staticEnd);\n        (<Mutable<this>>this).heap = new MemoryHeap(this, this.heapEnd);\n        this.temporaryObjects = {};\n        this.observable.send(\"reset\");\n    }\n\n    public getByte(addr: number) {\n        return this.bytes[addr];\n    }\n\n    public readByte(addr: number) {\n\n        // Notify any other object that is interested in that byte\n        // var begin = ad - Type.getMaxSize();\n        //for(var i = ad; begin < i; --i){\n        //    var obj = this.objects[i];\n        //    if (obj == fromObj) { continue; }\n        //    if (obj && obj.size > ad - i){\n        //        obj.byteRead(ad);\n        //    }\n        //}\n        return this.bytes[addr];\n    }\n\n    public getBytes(addr: number, num: number) {\n        return this.bytes.slice(addr, addr + num);\n    }\n\n    public readBytes(addr: number, num: number) {\n        var end = addr + num;\n\n        // Notify any other object that is interested in that byte\n        // var begin = ad - Type.getMaxSize();\n        //for(var i = end-1; begin < i; --i){\n        //    var obj = this.objects[i];\n        //    if (obj == fromObj) { continue; }\n        //    if (obj && obj.size > ad - i){\n        //        obj.bytesRead(ad, end-ad);//.send(\"bytesRead\", {addr: ad, length: end-ad});\n        //    }\n        //}\n\n        return this.bytes.slice(addr, end);\n    }\n\n    public setByte(addr: number, value: RawValueType) {\n        this.bytes[addr] = value;\n\n        // Notify any object that is interested in that byte\n        // var begin = ad - Type.getMaxSize();\n        //for(var i = ad; begin < i; --i){\n        //    var obj = this.objects[i];\n        //    if (obj && obj.size > ad - i){\n        //        obj.byteSet(ad, value);//.send(\"byteSet\", {addr: ad, value: value});\n        //    }\n        //}\n    }\n\n    public writeByte(addr: number, value: RawValueType) {\n        this.bytes[addr] = value;\n\n        // Notify any other object that is interested in that byte\n        // var begin = ad - Type.getMaxSize();\n        //for(var i = ad; begin < i; --i){\n        //    var obj = this.objects[i];\n        //    if (obj == fromObj) { continue; }\n        //    if (obj && obj.size > ad - i){\n        //        obj.byteWritten(ad, value);//.send(\"byteWritten\", {addr: ad, value: value});\n        //    }\n        //}\n    }\n\n    public setBytes(addr: number, values: RawValueType[]) {\n\n        for (var i = 0; i < values.length; ++i) {\n            this.bytes[addr + i] = values[i];\n        }\n\n        // Notify any other object that is interested in that byte\n        //var begin = ad - Type.getMaxSize();\n        //for(var i = ad+values.length; begin < i; --i){\n        //    var obj = this.objects[i];\n        //    if (obj && obj.size > ad - i){\n        //        obj.bytesSet(ad, values);//.send(\"byteSet\", {addr: ad, values: values});\n        //    }\n        //}\n    }\n\n    public writeBytes(addr: number, values: RawValueType[]) {\n\n        //TODO remove this commented code\n        //if (isA(fromObj, TemporaryObject)){\n        //    var objBytes = this.temporaryObjects[fromObj.entityId];\n        //    if (!objBytes){\n        //        objBytes = new Array(fromObj.size);\n        //        for(var i = 0; i < fromObj.size; ++i){\n        //            objBytes[i] = 0;\n        //        }\n        //        this.temporaryObjects[fromObj.entityId] = objBytes;\n        //    }\n        //    return;\n        //}\n\n        for (var i = 0; i < values.length; ++i) {\n            this.bytes[addr + i] = values[i];\n        }\n\n        // Notify any other object that is interested in that byte\n        //var begin = ad - Type.getMaxSize();\n        //for(var i = ad+values.length-1; begin < i; --i){\n        //    var obj = this.objects[i];\n        //    if (obj == fromObj) { continue; }\n        //    if (obj && obj.size > ad - i){\n        //        obj.bytesWritten(ad, values);//.send(\"bytesWritten\", {addr: ad, values: values});\n        //    }\n        //}\n    }\n\n    // Attempts to dereference a pointer and retreive the object it points to.\n    // Takes in a Value of pointer type. Must point to an object type.\n    // Returns the most recently allocated object at the given address.\n    // This may be an object which is no longer alive (has been deallocated).\n    // If no object is found, or an object of a type that does not match the pointed-to type is found,\n    // returns an anonymous object representing the given address interpreted as the requested type.\n    // (In C++, reading/writing to this object will cause undefined behavior.)\n    // TODO: prevent writing to zero or negative address objects?\n    public dereference<Elem_type extends ArrayElemType>(ptr: Value<ArrayPointerType<Elem_type>>): ArraySubobject<Elem_type>;\n    public dereference<T extends CompleteObjectType>(ptr: Value<ObjectPointerType<T>>): CPPObject<T>;\n    public dereference<T extends CompleteObjectType>(ptr: Value<PointerType<T>>): CPPObject<T> | InvalidObject<T>;\n    public dereference(ptr: Value<PointerToCompleteType>): CPPObject | ArraySubobject | InvalidObject {\n\n        var addr = ptr.rawValue;\n\n        // Handle special cases for pointers with RTTI\n        if (ptr.type.isArrayPointerType()) {\n            return ptr.type.arrayObject.getArrayElemSubobjectByAddress(addr);\n\n        }\n        if (ptr.type.isObjectPointerType() && ptr.type.isValueValid(addr)) {\n            return ptr.type.pointedObject;\n        }\n\n        // Grab object from memory\n        var obj = this.objects[addr];\n\n        if (obj && (similarType(obj.type, ptr.type.ptrTo) || subType(obj.type, ptr.type.ptrTo))) {\n            return obj;\n        }\n\n        // If the object wasn't there or doesn't match the type we asked for (ignoring const)\n        // then we need to create an anonymous object of the appropriate type instead\n        return new InvalidObject(ptr.type.ptrTo, this, addr);\n    }\n\n\n    public allocateObject(object: CPPObject<CompleteObjectType>) { // TODO: allocateObject is not the best name for this\n        this.objects[object.address] = object;\n    }\n\n    /**\n     * Ends the lifetime of an object at the given address. Its data actually remains in memory, but is marked as dead and invalid.\n     * If no object exists at the given address, does nothing. If the object is already dead, does nothing.\n     * @param addr \n     * @param killer The runtime construct that killed the object\n     */\n    public killObject(addr: number, killer?: RuntimeConstruct) {\n        let obj = this.objects[addr];\n        if (obj && obj.isAlive) {\n            obj.kill(killer);\n        }\n    }\n\n    /**\n     * Allocates and returns a string literal object, unless a string literal with exactly\n     * the same contents has already been allocated, in which case that same object is returned.\n     * @param contents \n     */\n    public allocateStringLiteral(contents: string) {\n        let previousObj = this.stringLiteralMap[contents];\n        if (previousObj) {\n            return previousObj;\n        }\n        else {\n            // only need to allocate a string literal object if we didn't already have an identical one\n            // length + 1 below is for null character\n            let object = new StringLiteralObject(new BoundedArrayType(Char.CHAR, contents.length + 1), this, this.staticTop);\n            this.allocateObject(object);\n\n            // record the string literal in case we see more that are the same in the future\n            this.stringLiteralMap[contents] = object;\n\n            // write value of string literal into the object\n            Char.jsStringToNullTerminatedCharArray(contents).forEach((c, i) => {\n                object.getArrayElemSubobject(i).setValue(c);\n            });\n\n            // adjust location for next static object\n            this.staticTop += object.size;\n            return object;\n        }\n    }\n\n    public getStringLiteral(str: string) {\n        return this.stringLiteralMap[str];\n    }\n\n    public allocateStatic(def: CompiledGlobalVariableDefinition) {\n        var obj = new StaticObject(def, def.declaredEntity.type, this, this.staticTop);\n        this.allocateObject(obj);\n        this.staticTop += obj.size;\n        this.staticObjects[def.declaredEntity.qualifiedName] = obj;\n    }\n\n    public staticLookup<T extends CompleteObjectType>(staticEntity: GlobalObjectEntity<T>) {\n        return <StaticObject<T>>this.staticObjects[staticEntity.qualifiedName];\n    }\n\n    public allocateTemporaryObject<T extends CompleteObjectType>(tempEntity: TemporaryObjectEntity<T>) {\n        let obj = new TemporaryObject(tempEntity.type, this, this.temporaryBottom, tempEntity.name);\n        this.allocateObject(obj);\n        this.temporaryBottom += tempEntity.type.size;\n        this.temporaryObjects[tempEntity.entityId] = obj;\n        this.observable.send(\"temporaryObjectAllocated\", obj);\n        return obj;\n    }\n\n\n    // TODO: think of some way to prevent accidentally calling the other deallocate directly with a temporary obj\n    public deallocateTemporaryObject(obj: TemporaryObject, killer?: RuntimeConstruct) {\n        this.killObject(obj.address, killer);\n        //this.temporaryBottom += obj.type.size;\n        delete this.temporaryObjects[obj.address];\n        this.observable.send(\"temporaryObjectDeallocated\", obj);\n    }\n\n    public printObjects() {\n        let objs: any = {};\n        for (let key in this.objects) {\n            let obj = this.objects[key];\n            let desc = obj.describe();\n            if (obj.type.isAtomicType()) {\n                let atomicObj = <CPPObject<AtomicType>>obj;\n                objs[desc.name || desc.message] = (atomicObj.isValueValid() ? atomicObj.rawValue() : \"??\");\n            }\n            else {\n                objs[desc.name || desc.message] = obj.rawValue();\n            }\n        }\n        return JSON.stringify(objs, null, 4);\n    }\n};\n\nclass MemoryStack {\n    private static readonly _name = \"MemoryStack\";\n\n    public readonly observable = new Observable(this);\n\n    private top: number;\n    private readonly start: number;\n    private readonly memory: Memory;\n\n    private readonly _frames: MemoryFrame[] = [];\n    public readonly frames: readonly MemoryFrame[] = this._frames;\n\n    constructor(memory: Memory, start: number) {\n        this.memory = memory;\n        this.start = start;\n        this.top = start;\n    }\n\n    // public clear() {\n    //     this.frames.length = 0;\n    //     this.top = this.start;\n    // }\n\n    public topFrame() {\n        return last(this.frames);\n    }\n\n    public pushFrame(rtFunc: RuntimeFunction) {\n        var frame = new MemoryFrame(this.memory, this.top, rtFunc);\n        this.top += frame.size;\n        this._frames.push(frame);\n        this.memory.observable.send(\"framePushed\", frame);\n        return frame;\n    }\n\n    public popFrame(rtConstruct: RuntimeConstruct) {\n        let frame = this._frames.pop();\n        if (!frame) {\n            return assertFalse();\n        }\n        frame.pop(rtConstruct);\n        this.top -= frame.size;\n        this.memory.observable.send(\"framePopped\", frame);\n    }\n\n    public toString() {\n        var str = \"<ul class=\\\"stackFrames\\\">\";\n        for (var i = 0; i < this.frames.length; ++i) {\n            var frame = this.frames[i];\n            str += \"<li>\" + frame.toString() + \"</li>\";\n        }\n        str += \"</ul>\";\n        return str;\n    }\n}\n\nclass MemoryHeap {\n    private static readonly _name = \"MemoryHeap\";\n\n    public readonly observable = new Observable(this);\n\n    private bottom: number;\n    private readonly end: number;\n    private readonly memory: Memory;\n\n    public readonly objectMap: { [index: number]: DynamicObject };\n\n    public constructor(memory: Memory, end: number) {\n        this.memory = memory;\n        this.end = end;\n        this.bottom = end;\n        this.objectMap = {};\n    }\n\n    // public clear() {\n    //     this.objectMap = {};\n    // }\n\n    public allocateNewObject<T extends CompleteObjectType>(type: T) {\n        this.bottom -= type.size;\n        let obj = new DynamicObject(type, this.memory, this.bottom);\n        this.memory.allocateObject(obj);\n        this.objectMap[obj.address] = obj;\n        this.memory.observable.send(\"heapObjectAllocated\", obj);\n        return obj;\n    }\n\n    public deleteObject(addr: number, killer?: RuntimeConstruct) {\n        var obj = this.objectMap[addr];\n        if (obj) {\n            delete this.objectMap[addr];\n            this.memory.killObject(addr, killer);\n            this.memory.observable.send(\"heapObjectDeleted\", obj);\n            // Note: responsibility for running destructor lies elsewhere\n        }\n        return obj;\n    }\n}\n\n\ntype MemoryFrameMessages =\n    \"referenceBound\";\n\nexport class MemoryFrame {\n    private static readonly _name = \"MemoryFrame\";\n\n    public readonly observable = new Observable<MemoryFrameMessages>(this);\n\n    private readonly start: number;\n    private readonly end: number;\n    private readonly memory: Memory;\n\n    public readonly func: RuntimeFunction;\n    public readonly size: number;\n\n    public readonly localObjects: readonly AutoObject[];\n\n    private readonly localObjectsByEntityId: { [index: number]: AutoObject } = {};\n    private readonly localReferencesByEntityId: { [index: number]: CPPObject | undefined } = {};\n\n    public constructor(memory: Memory, start: number, rtFunc: RuntimeFunction) {\n        this.memory = memory;\n        this.start = start;\n        this.func = rtFunc;\n\n        this.size = 0;\n\n        let addr = this.start;\n\n        // TODO: add this pointer back in\n        // if (this.func.model.isMemberFunction) {\n        //     let obj = new ThisObject(new ObjectPointer(rtFunc.receiver), memory, addr);\n        //     obj.setValue(rtFunc.receiver.getPointerTo());\n        //     addr += obj.size;\n\n        //     this.localObjectsByEntityId[obj.entityId] = obj;\n        //     this.size += obj.size;\n        // }\n\n        // Push objects for all entities in the block\n        this.localObjects = rtFunc.model.context.functionLocals.localObjects.map((objEntity) => {\n\n            // Create and allocate the object\n            let obj = new AutoObject(objEntity.definition, objEntity.type, memory, addr);\n            this.memory.allocateObject(obj);\n            this.localObjectsByEntityId[objEntity.entityId] = obj;\n\n            // Move on to next address afterward\n            addr += obj.size;\n            (<Mutable<this>>this).size += obj.size;\n\n            return obj;\n        });\n\n        this.end = this.start + this.size;\n    }\n\n    // TODO: is this ever used?\n    public toString() {\n        var str = \"\";\n        for (var key in this.localObjectsByEntityId) {\n            var obj = this.localObjectsByEntityId[key];\n            //\t\t\tif (!obj.type){\n            // str += \"<span style=\\\"background-color:\" + obj.color + \"\\\">\" + key + \" = \" + obj + \"</span>\\n\";\n            str += \"<span>\" + obj + \"</span>\\n\";\n            //\t\t\t}\n        }\n        return str;\n    }\n\n    public localObjectLookup<T extends CompleteObjectType>(entity: LocalObjectEntity<T>) {\n        return <AutoObject<T>>this.localObjectsByEntityId[entity.entityId];\n    }\n\n    public initializeLocalObject<T extends AtomicType>(entity: LocalObjectEntity<T>, newValue: Value<T>) {\n        this.localObjectLookup(entity).writeValue(newValue);\n    }\n\n    public localReferenceLookup<T extends CompleteObjectType>(entity: LocalReferenceEntity<ReferenceType<T>>) {\n        return <CPPObject<T>>this.localReferencesByEntityId[entity.entityId] || assertFalse(\"Attempt to look up referred object before reference was bound.\");\n    }\n\n    public bindLocalReference(entity: LocalReferenceEntity, obj: CPPObject) {\n        this.localReferencesByEntityId[entity.entityId] = obj;\n        this.observable.send(\"referenceBound\", { entity: entity, object: obj });\n    }\n\n    // public setUpReferenceInstances() {\n    //     this.scope.referenceObjects.forEach((ref: LocalReferenceEntity) => {\n    //         this.localReferencesByEntityId[ref.entityId] = undefined;\n    //         //self.memory.allocateObject(ref, addr);\n    //         //addr += ref.type.size;\n    //     });\n    // }\n\n    public pop(rtConstruct: RuntimeConstruct) {\n        for (let key in this.localObjectsByEntityId) {\n            var obj = this.localObjectsByEntityId[key];\n\n            // Note this does nothing if the object was already deallocated (e.g. going out of scope of a nested block, destructor was called)\n            this.memory.killObject(obj.address, rtConstruct);\n        }\n    }\n\n};","import { BasicCPPConstruct, SuccessfullyCompiled, RuntimeConstruct, TranslationUnitContext, ASTNode, CPPConstruct, BlockContext, FunctionContext, InvalidConstruct, createLoopContext } from \"./constructs\";\nimport { CPPError } from \"./errors\";\nimport { ExpressionASTNode, createExpressionFromAST, createRuntimeExpression, standardConversion } from \"./expressions\";\nimport { DeclarationASTNode, FunctionDefinition, VariableDefinition, ClassDefinition, AnalyticCompiledDeclaration, LocalDeclaration, createLocalDeclarationFromAST, LocalDeclarationASTNode, LocalSimpleDeclaration } from \"./declarations\";\nimport { DirectInitializer, CompiledDirectInitializer, RuntimeDirectInitializer } from \"./initializers\";\nimport { VoidType, ReferenceType, Bool, isType, Int } from \"./types\";\nimport { ReturnByReferenceEntity, ReturnObjectEntity, BlockScope, LocalObjectEntity, LocalReferenceEntity } from \"./entities\";\nimport { Mutable, asMutable, assertNever, assert } from \"../util/util\";\nimport { Expression, CompiledExpression, RuntimeExpression } from \"./expressionBase\";\nimport { StatementOutlet, ConstructOutlet, ExpressionStatementOutlet, NullStatementOutlet, DeclarationStatementOutlet, ReturnStatementOutlet, BlockOutlet, IfStatementOutlet, WhileStatementOutlet, ForStatementOutlet, BreakStatementOutlet } from \"../view/codeOutlets\";\nimport { RuntimeFunction } from \"./functions\";\nimport { Predicates } from \"./predicates\";\nimport { Value } from \"./runtimeEnvironment\";\n\nexport type StatementASTNode =\n    LabeledStatementASTNode |\n    BlockASTNode |\n    IfStatementASTNode |\n    IterationStatementASTNode |\n    JumpStatementASTNode |\n    DeclarationStatementASTNode |\n    ExpressionStatementASTNode |\n    NullStatementASTNode;\n\nconst StatementConstructsMap = {\n    \"labeled_statement\": (ast: LabeledStatementASTNode, context: BlockContext) => new UnsupportedStatement(context, ast, \"labeled statement\"),\n    \"block\": (ast: BlockASTNode, context: BlockContext) => Block.createFromAST(ast, context),\n    \"if_statement\": (ast: IfStatementASTNode, context: BlockContext) => IfStatement.createFromAST(ast, context),\n    \"while_statement\": (ast: WhileStatementASTNode, context: BlockContext) => WhileStatement.createFromAST(ast, context),\n    \"dowhile_statement\": (ast: DoWhileStatementASTNode, context: BlockContext) => new UnsupportedStatement(context, ast, \"do-while loop\"),\n    \"for_statement\": (ast: ForStatementASTNode, context: BlockContext) => ForStatement.createFromAST(ast, context),\n    \"break_statement\": (ast: BreakStatementASTNode, context: BlockContext) => BreakStatement.createFromAST(ast, context),\n    \"continue_statement\": (ast: ContinueStatementASTNode, context: BlockContext) => new UnsupportedStatement(context, ast, \"continue statement\"),\n    \"return_statement\": (ast: ReturnStatementASTNode, context: BlockContext) => ReturnStatement.createFromAST(ast, context),\n    \"declaration_statement\": (ast: DeclarationStatementASTNode, context: BlockContext) => DeclarationStatement.createFromAST(ast, context),\n    \"expression_statement\": (ast: ExpressionStatementASTNode, context: BlockContext) => ExpressionStatement.createFromAST(ast, context),\n    \"null_statement\": (ast: NullStatementASTNode, context: BlockContext) => new NullStatement(context, ast)\n}\n\nexport function createStatementFromAST<ASTType extends StatementASTNode>(ast: ASTType, context: BlockContext): ReturnType<(typeof StatementConstructsMap)[ASTType[\"construct_type\"]]> {\n    return <any>StatementConstructsMap[ast.construct_type](<any>ast, context);\n}\n\nexport type CompiledStatementKinds = {\n    \"unsupported_statement\": UnsupportedStatement;\n    // \"labeled_statement\" :\n    \"block\": CompiledBlock;\n    \"if_statement\": CompiledIfStatement;\n    \"while_statement\": CompiledWhileStatement;\n    // \"dowhile_statement\" :\n    \"for_statement\": CompiledForStatement;\n    \"break_statement\" : CompiledBreakStatement;\n    // \"continue_statement\" :\n    \"return_statement\": CompiledReturnStatement;\n    \"declaration_statement\": CompiledDeclarationStatement;\n    \"expression_statement\": CompiledExpressionStatement;\n    \"null_statement\": CompiledNullStatement;\n};\n\nexport type AnalyticCompiledStatement<C extends AnalyticStatement> = CompiledStatementKinds[C[\"construct_type\"]];\n\n\n\nconst StatementConstructsRuntimeMap = {\n    \"unsupported_statement\": (construct: UnsupportedStatement, parent: RuntimeStatement) => { throw new Error(\"Cannot create a runtime instance of an unsupported construct.\"); },\n    // \"labeled_statement\" : (construct: LabeledStatement, parent: RuntimeStatement) => new UnsupportedStatement(context, \"labeled statement\").setAST(ast),\n    \"block\": (construct: CompiledBlock, parent: RuntimeStatement | RuntimeFunction) => new RuntimeBlock(construct, parent),\n    \"if_statement\": (construct: CompiledIfStatement, parent: RuntimeStatement) => new RuntimeIfStatement(construct, parent),\n    \"while_statement\": (construct: CompiledWhileStatement, parent: RuntimeStatement) => new RuntimeWhileStatement(construct, parent),\n    // \"dowhile_statement\" : (construct: DoWhileStatement, parent: RuntimeStatement) => new UnsupportedStatement(context, \"do-while loop\").setAST(ast),\n    \"for_statement\": (construct: CompiledForStatement, parent: RuntimeStatement) => new RuntimeForStatement(construct, parent),\n    \"break_statement\" : (construct: CompiledBreakStatement, parent: RuntimeStatement) => new RuntimeBreakStatement(construct, parent),\n    // \"continue_statement\" : (construct: ContinueStatement, parent: RuntimeStatement) => new UnsupportedStatement(context, \"continue statement\").setAST(ast),\n    \"return_statement\": (construct: CompiledReturnStatement, parent: RuntimeStatement) => new RuntimeReturnStatement(construct, parent),\n    \"declaration_statement\": (construct: CompiledDeclarationStatement, parent: RuntimeStatement) => new RuntimeDeclarationStatement(construct, parent),\n    \"expression_statement\": (construct: CompiledExpressionStatement, parent: RuntimeStatement) => new RuntimeExpressionStatement(construct, parent),\n    \"null_statement\": (construct: CompiledNullStatement, parent: RuntimeStatement) => new RuntimeNullStatement(construct, parent)\n};\n\nexport function createRuntimeStatement<ConstructType extends CompiledBlock>(construct: ConstructType, parent: RuntimeStatement | RuntimeFunction): ReturnType<(typeof StatementConstructsRuntimeMap)[ConstructType[\"construct_type\"]]>;\nexport function createRuntimeStatement<ConstructType extends AnalyticStatement, CompiledConstructType extends AnalyticCompiledStatement<ConstructType>>(construct: CompiledConstructType, parent: RuntimeConstruct): ReturnType<(typeof StatementConstructsRuntimeMap)[CompiledConstructType[\"construct_type\"]]>;\nexport function createRuntimeStatement(construct: CompiledStatement, parent: RuntimeConstruct): RuntimeStatement;\nexport function createRuntimeStatement<ConstructType extends AnalyticCompiledStatement<AnalyticStatement>>(construct: ConstructType, parent: RuntimeStatement) {\n    return <any>StatementConstructsRuntimeMap[construct.construct_type](<any>construct, parent);\n}\n\nexport abstract class Statement<ASTType extends StatementASTNode = StatementASTNode> extends BasicCPPConstruct<BlockContext, ASTType> {\n\n    public abstract createDefaultOutlet(this: CompiledStatement, element: JQuery, parent?: ConstructOutlet): StatementOutlet;\n\n    public isBlock(): this is Block {\n        return false;\n    }\n\n}\n\nexport interface CompiledStatement extends Statement, SuccessfullyCompiled {\n\n}\n\nexport type AnalyticStatement =\n    //LabeledStatement |\n    Block |\n    IfStatement |\n    WhileStatement |\n    // DoWhileStatement |\n    ForStatement |\n    BreakStatement |\n    // ContinueStatement |\n    ReturnStatement |\n    DeclarationStatement |\n    ExpressionStatement |\n    NullStatement |\n    UnsupportedStatement;\n\nexport abstract class RuntimeStatement<C extends CompiledStatement = CompiledStatement> extends RuntimeConstruct<C> {\n\n    public readonly containingRuntimeFunction: RuntimeFunction;\n\n    public constructor(model: C, parent: RuntimeStatement | RuntimeFunction) {\n        super(model, \"statement\", parent);\n        if (parent instanceof RuntimeFunction) {\n            this.containingRuntimeFunction = parent;\n        }\n        else {\n            this.containingRuntimeFunction = parent.containingRuntimeFunction;\n        }\n    }\n\n}\n\nexport class UnsupportedStatement extends Statement {\n    public readonly construct_type = \"unsupported_statement\";\n\n    public constructor(context: BlockContext, ast: StatementASTNode, unsupportedName: string) {\n        super(context, ast);\n        this.addNote(CPPError.lobster.unsupported_feature(this, unsupportedName));\n    }\n\n    public createDefaultOutlet(element: JQuery, parent?: ConstructOutlet): never {\n        throw new Error(\"Cannot create an outlet for an unsupported construct.\");\n    }\n}\n\n\nexport interface ExpressionStatementASTNode extends ASTNode {\n    readonly construct_type: \"expression_statement\";\n    readonly expression: ExpressionASTNode;\n}\n\nexport class ExpressionStatement extends Statement<ExpressionStatementASTNode> {\n    public readonly construct_type = \"expression_statement\";\n\n\n    public readonly expression: Expression;\n\n    public static createFromAST(ast: ExpressionStatementASTNode, context: BlockContext) {\n        return new ExpressionStatement(context, ast, createExpressionFromAST(ast.expression, context));\n    }\n\n    public constructor(context: BlockContext, ast: ExpressionStatementASTNode, expression: Expression) {\n        super(context, ast);\n        this.attach(this.expression = expression);\n    }\n\n    public createDefaultOutlet(this: CompiledExpressionStatement, element: JQuery, parent?: ConstructOutlet) {\n        return new ExpressionStatementOutlet(element, this, parent);\n    }\n\n    public isTailChild(child: CPPConstruct) {\n        return { isTail: true };\n    }\n}\n\nexport interface CompiledExpressionStatement extends ExpressionStatement, SuccessfullyCompiled {\n    readonly expression: CompiledExpression;\n}\n\nexport class RuntimeExpressionStatement extends RuntimeStatement<CompiledExpressionStatement> {\n\n    public expression: RuntimeExpression;\n    private index = \"expr\";\n\n    public constructor(model: CompiledExpressionStatement, parent: RuntimeStatement) {\n        super(model, parent);\n        this.expression = createRuntimeExpression(this.model.expression, this);\n    }\n\n    protected upNextImpl() {\n        if (this.index === \"expr\") {\n            this.sim.push(this.expression);\n            this.index = \"done\";\n        }\n        else {\n            this.startCleanup();\n        }\n    }\n\n    protected stepForwardImpl() {\n\n    }\n}\n\n\nexport interface NullStatementASTNode extends ASTNode {\n    readonly construct_type: \"null_statement\";\n}\n\nexport class NullStatement extends Statement<NullStatementASTNode> {\n    public readonly construct_type = \"null_statement\";\n\n\n\n    public createDefaultOutlet(this: CompiledNullStatement, element: JQuery, parent?: ConstructOutlet) {\n        return new NullStatementOutlet(element, this, parent);\n    }\n\n    public isTailChild(child: CPPConstruct) {\n        return { isTail: true }; // Note: NullStatement will never actually have children, so this isn't used\n    }\n}\n\nexport interface CompiledNullStatement extends NullStatement, SuccessfullyCompiled {\n\n}\n\nexport class RuntimeNullStatement extends RuntimeStatement<CompiledNullStatement> {\n\n    public constructor(model: CompiledNullStatement, parent: RuntimeStatement) {\n        super(model, parent);\n    }\n\n    public upNextImpl() {\n        this.startCleanup();\n    }\n\n    public stepForwardImpl() {\n        // nothing to do\n    }\n\n}\n\nexport interface DeclarationStatementASTNode extends ASTNode {\n    readonly construct_type: \"declaration_statement\";\n    readonly declaration: LocalDeclarationASTNode;\n}\n\nexport class DeclarationStatement extends Statement<DeclarationStatementASTNode> {\n    public readonly construct_type = \"declaration_statement\";\n\n    public readonly declarations: readonly LocalDeclaration[] | FunctionDefinition | ClassDefinition | InvalidConstruct;\n\n    public static createFromAST(ast: DeclarationStatementASTNode, context: BlockContext) {\n        return new DeclarationStatement(context, ast, createLocalDeclarationFromAST(ast.declaration, context));\n    }\n\n    public constructor(context: BlockContext, ast: DeclarationStatementASTNode, declarations: readonly LocalDeclaration[] | FunctionDefinition | ClassDefinition | InvalidConstruct) {\n        super(context, ast);\n\n        if (declarations instanceof InvalidConstruct) {\n            this.attach(this.declarations = declarations);\n            return;\n        }\n\n        if (declarations instanceof FunctionDefinition) {\n            this.addNote(CPPError.stmt.function_definition_prohibited(this));\n            this.attach(this.declarations = declarations);\n            return;\n        }\n\n        if (declarations instanceof ClassDefinition) {\n            this.addNote(CPPError.lobster.unsupported_feature(this, \"local classes\"));\n            this.attach(this.declarations = declarations);\n            return;\n        }\n\n        this.attachAll(this.declarations = declarations);\n    }\n\n\n\n    public createDefaultOutlet(this: CompiledDeclarationStatement, element: JQuery, parent?: ConstructOutlet) {\n        return new DeclarationStatementOutlet(element, this, parent);\n    }\n\n    public isTailChild(child: CPPConstruct) {\n        return { isTail: true };\n    }\n}\n\nexport interface CompiledDeclarationStatement extends DeclarationStatement, SuccessfullyCompiled {\n\n    // narrows to compiled version and rules out a FunctionDefinition, ClassDefinition, or InvalidConstruct\n    readonly declarations: readonly AnalyticCompiledDeclaration<LocalSimpleDeclaration>[];\n}\n\nexport class RuntimeDeclarationStatement extends RuntimeStatement<CompiledDeclarationStatement> {\n\n    public readonly currentDeclarationIndex: number | null = null;\n\n    public constructor(model: CompiledDeclarationStatement, parent: RuntimeStatement) {\n        super(model, parent);\n    }\n\n    protected upNextImpl() {\n        let nextIndex = this.currentDeclarationIndex === null ? 0 : this.currentDeclarationIndex + 1;\n\n        let initializers = this.model.declarations.map(d => d.initializer);\n        if (nextIndex < initializers.length) {\n            (<Mutable<this>>this).currentDeclarationIndex = nextIndex;\n            let init = initializers[nextIndex];\n            if (init) {\n                // Only declarations with an initializer (e.g. a variable definition) have something\n                // to do at runtime. Others (e.g. typedefs) do nothing.\n                this.observable.send(\"initializing\", nextIndex);\n                let runtimeInit = init.createRuntimeInitializer(this);\n                this.sim.push(runtimeInit);\n            }\n        }\n        else {\n            this.startCleanup();\n        }\n    }\n\n    public stepForwardImpl() {\n        return false;\n    }\n}\n\n\nexport type JumpStatementASTNode = BreakStatementASTNode | ContinueStatementASTNode | ReturnStatementASTNode;\n\nexport interface BreakStatementASTNode extends ASTNode {\n    readonly construct_type: \"break_statement\";\n}\n\nexport class BreakStatement extends Statement<BreakStatementASTNode> {\n    public readonly construct_type = \"break_statement\";\n\n    public static createFromAST(ast: BreakStatementASTNode, context: BlockContext) {\n        return new BreakStatement(context, ast);\n    }\n\n    public constructor(context: BlockContext, ast: BreakStatementASTNode, expression?: Expression) {\n        super(context, ast);\n\n        if (!context.withinLoop) {\n            this.addNote(CPPError.stmt.breakStatement.location(this));\n        }\n\n    }\n\n    public createDefaultOutlet(this: CompiledBreakStatement, element: JQuery, parent?: ConstructOutlet) {\n        return new BreakStatementOutlet(element, this, parent);\n    }\n\n    // isTailChild : function(child){\n    //     return {isTail: true,\n    //         reason: \"The recursive call is immediately followed by a return.\"};\n    // }\n}\n\nexport interface CompiledBreakStatement extends BreakStatement, SuccessfullyCompiled {\n\n}\n\nexport class RuntimeBreakStatement extends RuntimeStatement<CompiledBreakStatement> {\n\n    public constructor(model: CompiledBreakStatement, parent: RuntimeStatement) {\n        super(model, parent);\n    }\n\n    protected upNextImpl() {\n        // nothing\n    }\n\n    public stepForwardImpl() {\n        let construct : RuntimeConstruct = this;\n\n        // start cleanup for everything on the way up to the loop\n        while(construct.model.construct_type !== \"while_statement\" && construct.model.construct_type !== \"for_statement\") {\n            construct.startCleanup();\n            construct = construct.parent!;\n        }\n\n        // start cleanup for the loop\n        construct.startCleanup();\n    }\n}\n\n\nexport interface ContinueStatementASTNode extends ASTNode {\n    readonly construct_type: \"continue_statement\";\n}\n\nexport interface ReturnStatementASTNode extends ASTNode {\n    readonly construct_type: \"return_statement\";\n    readonly expression: ExpressionASTNode;\n}\n\nexport class ReturnStatement extends Statement<ReturnStatementASTNode> {\n    public readonly construct_type = \"return_statement\";\n\n    public readonly expression?: Expression;\n\n    // TODO: Technically, this should be CopyInitializer\n    public readonly returnInitializer?: DirectInitializer;\n\n    public static createFromAST(ast: ReturnStatementASTNode, context: BlockContext) {\n        return ast.expression\n            ? new ReturnStatement(context, ast, createExpressionFromAST(ast.expression, context))\n            : new ReturnStatement(context, ast);\n    }\n\n    public constructor(context: BlockContext, ast: ReturnStatementASTNode, expression?: Expression) {\n        super(context, ast);\n\n        let returnType = this.context.containingFunction.type.returnType;\n\n        if (returnType instanceof VoidType) {\n            if (expression) {\n                // We have an expression to return, but the type is void, so that's bad\n                this.addNote(CPPError.stmt.returnStatement.exprVoid(this));\n                this.attach(this.expression = expression);\n            }\n            return;\n        }\n\n        // A return statement with no expression is only allowed in void functions.\n        // At the moment, constructors/destructors are hacked to have void return type,\n        // so this check is ok for return statements in a constructor.\n        if (!expression) {\n            this.addNote(CPPError.stmt.returnStatement.empty(this));\n            return;\n        }\n\n        if (returnType.isIncompleteObjectType()) {\n            this.addNote(CPPError.stmt.returnStatement.incomplete_type(this, returnType));\n            this.attach(this.expression = expression);\n            return;\n        }\n\n        if (returnType.isReferenceType()) {\n            this.returnInitializer = DirectInitializer.create(context, new ReturnByReferenceEntity(returnType), [expression], \"copy\");\n        }\n        else if (returnType.isCompleteObjectType()) {\n            this.returnInitializer = DirectInitializer.create(context, new ReturnObjectEntity(returnType), [expression], \"copy\");\n        }\n        else {\n            assertNever(returnType);\n        }\n\n        // Note: The expression is NOT attached directly here, since it's attached under the initializer.\n        this.attach(this.returnInitializer);\n    }\n\n\n\n    public createDefaultOutlet(this: CompiledReturnStatement, element: JQuery, parent?: ConstructOutlet) {\n        return new ReturnStatementOutlet(element, this, parent);\n    }\n\n    // isTailChild : function(child){\n    //     return {isTail: true,\n    //         reason: \"The recursive call is immediately followed by a return.\"};\n    // }\n}\n\nexport interface CompiledReturnStatement extends ReturnStatement, SuccessfullyCompiled {\n    readonly expression?: CompiledExpression;\n    readonly returnInitializer?: CompiledDirectInitializer;\n}\n\nenum RuntimeReturnStatementIndices {\n    PUSH_INITIALIZER,\n    RETURN\n}\n\nexport class RuntimeReturnStatement extends RuntimeStatement<CompiledReturnStatement> {\n\n    public readonly returnInitializer?: RuntimeDirectInitializer;\n\n    private index = RuntimeReturnStatementIndices.PUSH_INITIALIZER;\n\n    public constructor(model: CompiledReturnStatement, parent: RuntimeStatement) {\n        super(model, parent);\n        if (model.returnInitializer) {\n            this.returnInitializer = model.returnInitializer.createRuntimeInitializer(this);\n        }\n    }\n\n    protected upNextImpl() {\n        if (this.index === RuntimeReturnStatementIndices.PUSH_INITIALIZER) {\n            if (this.returnInitializer) {\n                this.sim.push(this.returnInitializer);\n            }\n            this.index = RuntimeReturnStatementIndices.RETURN;\n        }\n    }\n\n    public stepForwardImpl() {\n        if (this.index === RuntimeReturnStatementIndices.RETURN) {\n            let func = this.containingRuntimeFunction;\n            this.observable.send(\"returned\", { call: func.caller })\n            this.sim.popUntil(func);\n        }\n    }\n}\n\nexport interface BlockASTNode extends ASTNode {\n    readonly construct_type: \"block\";\n    readonly statements: readonly StatementASTNode[];\n}\n\nfunction createBlockContext(parentContext: FunctionContext): BlockContext {\n    return Object.assign({}, parentContext, {\n        contextualScope: new BlockScope(parentContext.translationUnit, parentContext.contextualScope)\n    });\n}\n\nexport class Block extends Statement<BlockASTNode> {\n    public readonly construct_type = \"block\";\n\n    public readonly statements: readonly Statement[] = [];\n\n    public static createFromAST(ast: BlockASTNode, context: FunctionContext) {\n        let block = new Block(context, ast);\n        ast.statements.forEach((stmtAst) => block.addStatement(createStatementFromAST(stmtAst, block.context)));\n        return block;\n    }\n\n    public constructor(context: FunctionContext, ast: BlockASTNode) {\n        super(createBlockContext(context), ast);\n    }\n\n    public isBlock(): this is Block {\n        return true;\n    }\n\n    public addStatement(statement: Statement) {\n        asMutable(this.statements).push(statement);\n        this.attach(statement);\n    }\n\n\n\n    public createDefaultOutlet(this: CompiledBlock, element: JQuery, parent?: ConstructOutlet) {\n        return new BlockOutlet(element, this, parent);\n    }\n\n    // isTailChild : function(child){\n    //     var last = this.statements.last();\n    //     if (child !== last){\n    //         if (child === this.statements[this.statements.length-2] && isA(last, Statements.Return) && !last.hasExpression){\n    //             return {isTail: true,\n    //                 reason: \"The only thing after the recursive call is an empty return.\",\n    //                 others: [last]\n    //             }\n    //         }\n    //         else{\n    //             var others = [];\n    //             for (var otherIndex = this.statements.length-1; this.statements[otherIndex] !== child && otherIndex >= 0; --otherIndex){\n    //                 var other = this.statements[otherIndex];\n    //                 if (!(isA(other, Statements.Return) && !other.expression)){\n    //                     others.unshift(other);\n    //                 }\n    //             }\n    //             return {isTail: false,\n    //                 reason: \"There are other statements in this block that will execute after the recursive call.\",\n    //                 others: others\n    //             }\n    //         }\n    //     }\n    //     else{\n    //         return {isTail: true};\n    //     }\n    // }\n\n}\n\nexport interface CompiledBlock extends Block, SuccessfullyCompiled {\n    readonly statements: readonly CompiledStatement[];\n}\n\nexport class RuntimeBlock extends RuntimeStatement<CompiledBlock> {\n\n    public readonly statements: readonly RuntimeStatement[];\n\n    private index = 0;\n\n    public constructor(model: CompiledBlock, parent: RuntimeStatement | RuntimeFunction) {\n        super(model, parent);\n        this.statements = model.statements.map((stmt) => createRuntimeStatement(stmt, this));\n    }\n\n    protected upNextImpl() {\n        if (this.index < this.statements.length) {\n            this.observable.send(\"index\", this.index);\n            this.sim.push(this.statements[this.index++]);\n        }\n        else {\n            this.startCleanup();\n        }\n    }\n\n    public stepForwardImpl() {\n        // Nothing to do here, block doesn't actually do anything but run individual statements.\n        // TODO: However, something will ultimately need to be added to run destructors when a\n        // block finishes, rather than just when a function finishes.\n    }\n\n\n    // isTailChild : function(child){\n    //     return {isTail: true,\n    //         reason: \"The recursive call is immediately followed by a return.\"};\n    // }\n}\n\n\n\n\n\n\n// export class OpaqueStatement extends StatementBase implements SuccessfullyCompiled {\n\n//     public _t_isCompiled: never;\n\n//     private readonly effects: (rtBlock: RuntimeOpaqueStatement) => void;\n\n//     public constructor(context: BlockContext, effects: (rtBlock: RuntimeOpaqueStatement) => void) {\n//         super(context);\n//         this.effects = effects;\n//     }\n\n//     public createRuntimeStatement(parent: RuntimeStatement | RuntimeFunction) {\n//         return new RuntimeOpaqueStatement(this, parent, this.effects);\n//     }\n\n// }\n\n// export class RuntimeOpaqueStatement extends RuntimeStatement<OpaqueStatement> {\n\n//     private effects: (rtBlock: RuntimeOpaqueStatement) => void;\n\n//     public constructor (model: OpaqueStatement, parent: RuntimeStatement | RuntimeFunction, effects: (rtBlock: RuntimeOpaqueStatement) => void) {\n//         super(model, parent);\n//         this.effects = effects;\n//     }\n\n//     protected upNextImpl() {\n//         // Nothing to do\n//     }\n\n//     public stepForwardImpl() {\n//         this.effects(this);\n//         this.startCleanup();\n//     }\n\n\n//     // isTailChild : function(child){\n//     //     return {isTail: true,\n//     //         reason: \"The recursive call is immediately followed by a return.\"};\n//     // }\n// }\n\n\n\nexport interface IfStatementASTNode extends ASTNode {\n    readonly construct_type: \"if_statement\";\n    readonly condition: ExpressionASTNode;\n    readonly then: StatementASTNode;\n    readonly otherwise?: StatementASTNode;\n}\n\nexport class IfStatement extends Statement<IfStatementASTNode> {\n    public readonly construct_type = \"if_statement\";\n\n    public readonly condition: Expression;\n    public readonly then: Statement;\n    public readonly otherwise?: Statement;\n\n    public static createFromAST(ast: IfStatementASTNode, context: BlockContext): IfStatement {\n\n        let condition = createExpressionFromAST(ast.condition, context);\n\n        // If either of the substatements are not a block, they get their own implicit block context.\n        // (If the substatement is a block, it creates its own block context, so we don't do that here.)\n        let then = ast.then.construct_type === \"block\" ?\n            createStatementFromAST(ast.then, context) :\n            createStatementFromAST(ast.then, createBlockContext(context));\n\n        if (!ast.otherwise) { // no else branch\n            return new IfStatement(context, ast, condition, then);\n        }\n        else { // else branch is present\n            // See note above about substatement implicit block context\n            let otherwise = ast.otherwise.construct_type === \"block\" ?\n                createStatementFromAST(ast.otherwise, context) :\n                createStatementFromAST(ast.otherwise, createBlockContext(context));\n\n            return new IfStatement(context, ast, condition, then, otherwise);\n        }\n    }\n\n    public constructor(context: BlockContext, ast: IfStatementASTNode, condition: Expression, then: Statement, otherwise?: Statement) {\n        super(context, ast);\n\n        if (condition.isWellTyped()) {\n            this.attach(this.condition = standardConversion(condition, Bool.BOOL));\n        }\n        else {\n            this.attach(this.condition = condition);\n        }\n\n        this.attach(this.then = then);\n        if (otherwise) {\n            this.attach(this.otherwise = otherwise);\n        }\n\n        if (this.condition.isWellTyped() && !Predicates.isTypedExpression(this.condition, isType(Bool))) {\n            this.addNote(CPPError.stmt.if.condition_bool(this, this.condition));\n        }\n    }\n\n\n\n    public createDefaultOutlet(this: CompiledIfStatement, element: JQuery, parent?: ConstructOutlet) {\n        return new IfStatementOutlet(element, this, parent);\n    }\n\n    //     isTailChild : function(child){\n    //         if (child === this.condition){\n    //             return {isTail: false,\n    //                 reason: \"After the function returns, one of the branches will run.\",\n    //                 others: [this.then, this.otherwise]\n    //             }\n    //         }\n    //         else{\n    //             if (this.otherwise){\n    //                 //if (child === this.then){\n    //                     return {isTail: true,\n    //                         reason: \"Only one branch in an if/else structure can ever execute, so don't worry about the code in the other branches.\"\n    //                     };\n    //                 //}\n    //                 //else{\n    //                 //    return {isTail: true,\n    //                 //        reason: \"Don't worry about the code in the if branch - if the recursive call even happened it means we took the else branch.\"\n    //                 //    };\n    //                 //}\n    //             }\n    //             else{\n    //                 return {isTail: true\n    //                 };\n    //             }\n    //         }\n    //     }\n\n}\n\nexport interface CompiledIfStatement extends IfStatement, SuccessfullyCompiled {\n    readonly condition: CompiledExpression<Bool, \"prvalue\">;\n    readonly then: CompiledStatement;\n    readonly otherwise?: CompiledStatement;\n}\n\nexport class RuntimeIfStatement extends RuntimeStatement<CompiledIfStatement> {\n\n    public readonly condition: RuntimeExpression<Bool, \"prvalue\">;\n    public readonly then: RuntimeStatement;\n    public readonly otherwise?: RuntimeStatement;\n\n    private index = 0;\n\n    public constructor(model: CompiledIfStatement, parent: RuntimeStatement) {\n        super(model, parent);\n        this.condition = createRuntimeExpression(model.condition, this);\n        this.then = createRuntimeStatement(model.then, this);\n        if (model.otherwise) {\n            this.otherwise = createRuntimeStatement(model.otherwise, this);\n        }\n    }\n\n    private static upNextFns = [\n        (rt: RuntimeIfStatement) => {\n            rt.sim.push(rt.condition);\n        },\n        (rt: RuntimeIfStatement) => {\n            if (rt.condition.evalResult.rawValue) {\n                rt.sim.push(rt.then);\n            }\n            else if (rt.otherwise) {\n                rt.sim.push(rt.otherwise);\n            }\n        },\n        (rt: RuntimeIfStatement) => {\n            rt.startCleanup();\n        },\n    ]\n\n    protected upNextImpl() {\n        RuntimeIfStatement.upNextFns[this.index++](this);\n    }\n\n    public stepForwardImpl() {\n        // Nothing to do here\n    }\n}\n\n\n\n\nexport type IterationStatementASTNode = WhileStatementASTNode | DoWhileStatementASTNode | ForStatementASTNode;\n\nexport interface WhileStatementASTNode extends ASTNode {\n    readonly construct_type: \"while_statement\";\n    readonly condition: ExpressionASTNode;\n    readonly body: StatementASTNode;\n}\n\nexport class WhileStatement extends Statement<WhileStatementASTNode> {\n    public readonly construct_type = \"while_statement\";\n\n    public readonly condition: Expression;\n    public readonly body: Statement;\n\n    public static createFromAST(ast: WhileStatementASTNode, outerContext: BlockContext): WhileStatement {\n\n        let whileContext = createLoopContext(outerContext);\n\n        // If the body substatement is not a block, it gets its own implicit block context.\n        // (If the substatement is a block, it creates its own block context, so we don't do that here.)\n        let body = ast.body.construct_type === \"block\" ?\n            createStatementFromAST(ast.body, whileContext) :\n            createStatementFromAST(ast.body, createBlockContext(whileContext));\n\n        return new WhileStatement(whileContext, ast, createExpressionFromAST(ast.condition, whileContext), body);\n    }\n\n    public constructor(context: BlockContext, ast: WhileStatementASTNode, condition: Expression, body: Statement) {\n        super(context, ast);\n\n        if (condition.isWellTyped()) {\n            this.attach(this.condition = standardConversion(condition, Bool.BOOL));\n        }\n        else {\n            this.attach(this.condition = condition);\n        }\n\n        this.attach(this.body = body);\n\n        if (this.condition.isWellTyped() && !Predicates.isTypedExpression(this.condition, isType(Bool))) {\n            this.addNote(CPPError.stmt.iteration.condition_bool(this, this.condition));\n        }\n    }\n\n\n\n    public createDefaultOutlet(this: CompiledWhileStatement, element: JQuery, parent?: ConstructOutlet) {\n        return new WhileStatementOutlet(element, this, parent);\n    }\n\n}\n\nexport interface CompiledWhileStatement extends WhileStatement, SuccessfullyCompiled {\n    readonly condition: CompiledExpression<Bool, \"prvalue\">;\n    readonly body: CompiledStatement;\n}\n\nexport class RuntimeWhileStatement extends RuntimeStatement<CompiledWhileStatement> {\n\n    public readonly condition: RuntimeExpression<Bool, \"prvalue\">;\n    public readonly body?: RuntimeStatement;\n\n    private index = 0;\n\n    public constructor(model: CompiledWhileStatement, parent: RuntimeStatement) {\n        super(model, parent);\n        this.condition = createRuntimeExpression(model.condition, this);\n        // Do not create body here, since it might not actually run\n    }\n\n    private static upNextFns = [\n        (rt: RuntimeWhileStatement) => {\n            rt.sim.push(rt.condition);\n        },\n        (rt: RuntimeWhileStatement) => {\n            if (rt.condition.evalResult.rawValue === 1) {\n                rt.sim.push(asMutable(rt).body = createRuntimeStatement(rt.model.body, rt));\n            }\n            else {\n                rt.startCleanup();\n            }\n        },\n        (rt: RuntimeWhileStatement) => {\n            // Do nothing, pass to stepForward, which will reset\n        }\n    ]\n\n    protected upNextImpl() {\n        RuntimeWhileStatement.upNextFns[this.index](this);\n        this.index = (this.index + 1) % RuntimeWhileStatement.upNextFns.length;\n    }\n\n    public stepForwardImpl() {\n        (<Mutable<this>>this).condition = createRuntimeExpression(this.model.condition, this);\n        delete (<Mutable<this>>this).body;\n\n    }\n\n    //     isTailChild : function(child){\n    //         return {\n    //             isTail: false,\n    //             reason: \"If the loop goes around again, then that would be more work after the recursive call.\",\n    //             others: [this]\n    //         };\n    //     }\n}\n\nexport interface DoWhileStatementASTNode extends ASTNode {\n    readonly construct_type: \"dowhile_statement\";\n    readonly condition: ExpressionASTNode;\n    readonly body: StatementASTNode;\n}\n\n\n\nexport interface ForStatementASTNode extends ASTNode {\n    readonly construct_type: \"for_statement\";\n    readonly condition: ExpressionASTNode;\n    readonly initial: ExpressionStatementASTNode | NullStatementASTNode | DeclarationStatementASTNode;\n    readonly post?: ExpressionASTNode;\n    readonly body: StatementASTNode;\n}\n\n\n// The ForStatement class contains additional comments intended\n// as a general tutorial included in the `core` README.md\n\n\n// Generally, constructs provide a template parameter\n// to indicate the type of AST node they are created from\nexport class ForStatement extends Statement<ForStatementASTNode> {\n\n    // The discriminant here matches the one from ForStatementASTNode\n    public readonly construct_type = \"for_statement\";\n  \n    // All child constructs, this will often (but not always)\n    // be parallel to the structure in the AST Node\n    public readonly initial: ExpressionStatement | NullStatement | DeclarationStatement;\n    public readonly condition: Expression;\n    public readonly body: Statement;\n    public readonly post?: Expression;\n  \n    // Constructors for language construct classes take\n    // in a `context`, which provides contextual information\n    // necessary for compilation (e.g. a scope where variables\n    // can be looked up, the function that contains this code, etc.).\n    // In addition, the child constructs are provided that\n    // compose the construct. These children are presumed to\n    // have already been constructed with the appropriate context\n    // of their own. This is usually done by a createFromAST()\n    // function (see below).\n    public constructor(context: BlockContext, ast: ForStatementASTNode, initial: ExpressionStatement | NullStatement | DeclarationStatement,\n      condition: Expression, body: Statement, post: Expression | undefined) {\n  \n      super(context, ast);\n  \n      // Use .attach() to build the links in the construct tree\n      this.attach(this.initial = initial);\n  \n      if (condition.isWellTyped()) {\n        // If the condition has a type, we can attempt to convert\n        // it to a boolean. If such a conversion can be made,\n        // we should attach the conversion, which has the original\n        // condition as a child. (If it can't be made,\n        // standardConversion() just returns the original).\n        this.attach(this.condition = standardConversion(condition, Bool.BOOL));\n      }\n      else {\n        // If the condition wasn't well typed, we can't even try\n        // the conversion, so we just attach the original condition.\n        this.attach(this.condition = condition);\n      }\n  \n      // If our condition is not a bool (and couldn't be converted)\n      // to one earlier, give an error. However, if the condition\n      // didn't have any type, we don't want error spam, so we won't\n      // say anything. (Any non-well-typed exppression will already\n      // have an error of its own.) \n      if (this.condition.isWellTyped() && !Predicates.isTypedExpression(this.condition, isType(Bool))) {\n        this.addNote(CPPError.stmt.iteration.condition_bool(this, this.condition));\n      }\n  \n      // Nothing in particular to check here, since as with\n      // the initial, we don't care about types or anything.\n      // Because of syntax rules baked into the nature of this\n      // constructor, we're already guaranteed the body is a\n      // statement and the post is an expression as they should be.\n      this.attach(this.body = body);\n      if (post) {\n          this.attach(this.post = post);\n      }\n    }\n  \n    // The constructor above poses a conundrum. It asks that\n    // we pass in fully instantiated, ready-to-go child constructs\n    // of which the `ForStatement` will be composed. However,\n    // those children cannot be made in a context-insensitive\n    // fashion. That's not how C++ works! The resolution is that\n    // all context-sensitive stuff is extracted into the `context`\n    // provided when constructing the constructs. Generally, this\n    // will all be handled in a createFromAST function. It takes\n    // in the pure syntax from the AST and does all the hard work\n    // of building, situating, and connecting together all the\n    // constructs correctly.\n    public static createFromAST(ast: ForStatementASTNode, outerContext: BlockContext): ForStatement {\n  \n\n      let forContext = createLoopContext(outerContext);\n\n      // The context parameter to this function tells us what\n      // context the for loop originally occurs in. For example, in:\n      // void func() {\n      //   for(int i = 0; i < 10; ++i) {\n      //     cout << i << endl;\n      //   }\n      // }\n      // `context` refers to the function body block context for `func`\n      // Below, we'll also consider the body block context of the inner\n      // set of curly braces for the for loop.\n  \n      // Let's create the body context first. But there's one quick exception:\n      // Basically, for(...) stmt; is treated equivalently\n      // to for(...) { stmt; } according to the C++ standard.\n      // If the body substatement is not a block, it gets its own implicit block context.\n      // (If the substatement is a block, it will create its own block context, so we don't do that here.)\n      let bodyContext = ast.body.construct_type === \"block\" ? forContext : createBlockContext(forContext);\n  \n      // NOTE: the use of body block context for all the children.\n      // e.g. for(int i = 0; i < 10; ++i) { cout << i; }\n      // All children (initial, condition, post, body) share the same block\n      // context and scope where i is declared.\n      // NOTE: initial has to be compiled first. It is, since argument evaluation\n      // order is guaranteed left-to-right in js/ts\n      return new ForStatement(forContext, ast,\n        createStatementFromAST(ast.initial, bodyContext),\n        createExpressionFromAST(ast.condition, bodyContext),\n        createStatementFromAST(ast.body, bodyContext),\n        ast.post && createExpressionFromAST(ast.post, bodyContext));\n  \n      // It's crucial that we handled things this way. Because\n      // all of the context-sensitive stuff is handled by the\n      // contexts here, the children can all have access to e.g.\n      // the correct scope for all their variable lookups.\n    }\n  \n    // Creates an outlet, which will be part of the visualization,\n    // for any code that is running with this `ForStatement` as its\n    // original model. The specific runtime instance is not attached\n    // until later. That's because we might need to display a \"shell\"\n    // of this construct if e.g. the function it resides in gets called\n    // and is displayed, but this construct hasn't started executing\n    // yet (and may never, depending on control flow through that\n    // function!).\n    public createDefaultOutlet(this: CompiledForStatement, element: JQuery, parent?: ConstructOutlet) {\n      return new ForStatementOutlet(element, this, parent);\n    }\n  \n  }\n\nexport interface CompiledForStatement extends ForStatement, SuccessfullyCompiled {\n    readonly initial: CompiledExpressionStatement | CompiledNullStatement | CompiledDeclarationStatement;\n    readonly condition: CompiledExpression<Bool, \"prvalue\">;\n    readonly body: CompiledStatement;\n    readonly post?: CompiledExpression;\n}\n\nexport class RuntimeForStatement extends RuntimeStatement<CompiledForStatement> {\n\n    public readonly initial: RuntimeExpressionStatement | RuntimeNullStatement | RuntimeDeclarationStatement;\n    public readonly condition: RuntimeExpression<Bool, \"prvalue\">;\n    public readonly body?: RuntimeStatement;\n    public readonly post?: RuntimeExpression;\n\n    private index = 0;\n\n    private upNextFns: ((rt: RuntimeForStatement) => void)[];\n\n    public constructor(model: CompiledForStatement, parent: RuntimeStatement) {\n        super(model, parent);\n        this.initial = createRuntimeStatement(model.initial, this);\n        this.condition = createRuntimeExpression(model.condition, this);\n        // Do not create body here, since it might not actually run\n        if (model.post) {\n            this.upNextFns = RuntimeForStatement.upNextFns;\n        }\n        else {\n            // remove 4th step which is the post step\n            this.upNextFns = RuntimeForStatement.upNextFns.slice();\n            this.upNextFns.splice(3,1);\n        }\n    }\n\n    private static upNextFns = [\n        (rt: RuntimeForStatement) => {\n            rt.sim.push(rt.initial);\n        },\n        (rt: RuntimeForStatement) => {\n            rt.sim.push(rt.condition);\n        },\n        (rt: RuntimeForStatement) => {\n            if (rt.condition.evalResult.rawValue === 1) {\n                rt.sim.push(asMutable(rt).body = createRuntimeStatement(rt.model.body, rt));\n            }\n            else {\n                rt.startCleanup();\n            }\n        },\n        (rt: RuntimeForStatement) => {\n            assert(rt.model.post);\n            rt.sim.push(asMutable(rt).post = createRuntimeExpression(rt.model.post, rt));\n        },\n        (rt: RuntimeForStatement) => {\n            // Do nothing, pass to stepForward, which will reset\n        }\n    ];\n\n    protected upNextImpl() {\n        this.upNextFns[this.index++](this);\n        if (this.index === this.upNextFns.length) {\n            this.index = 1; // reset to 1 rather than 0, since 0 is the initial which only happens once\n        }\n    }\n\n    public stepForwardImpl() {\n        (<Mutable<this>>this).condition = createRuntimeExpression(this.model.condition, this);\n        delete (<Mutable<this>>this).body;\n        delete (<Mutable<this>>this).post;\n\n    }\n\n    //     isTailChild : function(child){\n    //         return {\n    //             isTail: false,\n    //             reason: \"If the loop goes around again, then that would be more work after the recursive call.\",\n    //             others: [this]\n    //         };\n    //     }\n}\n\n\n\n\n// export var Break = Statement.extend({\n//     _name: \"Break\",\n\n//     compile : function() {\n//         // Theoretically this could be put into the i_createFromAST function since it only uses\n//         // syntactic information to determine whether the break is inside an iteration statement,\n//         // but it would feel weird to add an error note before the compile function even runs... :/\n\n//         var container = this.parent;\n//         while(container && !isA(container, Statements.Iteration)){\n//             container = container.parent;\n//         }\n\n//         this.container = container;\n\n//         // container should exist, otherwise this break is somewhere it shouldn't be\n//         if (!container || !isA(container, Statements.Iteration)){\n//             this.addNote(CPPError.stmt.breakStatement.location(this, this.condition));\n//         }\n//     },\n\n//     createAndPushInstance : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         var inst = RuntimeConstruct.instance(sim, this, \"break\", \"stmt\", inst);\n//         sim.push(inst);\n//         return inst;\n//     },\n\n//     stepForward : function(sim: Simulation, rtConstruct: RuntimeConstruct){\n//         if (inst.index == \"break\"){\n//             var containerInst = inst.findParentByModel(this.container);\n// //            inst.send(\"returned\", {call: func.parent});\n//             containerInst.done(sim); // TODO: should be done with simulation stack instead of parent\n//             // return true;\n//         }\n//     }\n// });\n\n\n// export var Continue = Unsupported.extend({\n//     _name: \"Statements.Continue\",\n//     englishName: \"continue statement\"\n// });\n\n\n\nexport interface LabeledStatementASTNode extends ASTNode {\n    readonly construct_type: \"labeled_statement\";\n}\n\nexport interface SwitchStatementASTNode extends ASTNode {\n    readonly construct_type: \"switch_statement\";\n}\n\n","import { Constructor, htmlDecoratedType, unescapeString } from \"../util/util\";\nimport { ConstructDescription, TranslationUnitContext } from \"./constructs\";\nimport { byte, RawValueType, Value } from \"./runtimeEnvironment\";\nimport { CPPObject } from \"./objects\";\nimport { ExpressionASTNode } from \"./expressions\";\nimport { ClassDefinition } from \"./declarations\";\nimport { ClassScope } from \"./entities\";\n\n\n\n\nvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\nfunction isVowel(c: string) {\n    return vowels.indexOf(c) != -1;\n    \n};\n\n\n\n\n\n\n// let USER_TYPE_NAMES = {};\n// export function resetUserTypeNames() {\n//     USER_TYPE_NAMES = {};\n// }\n\n// export let defaultUserTypeNames = {\n//     ostream : true,\n//     istream : true,\n//     size_t : true\n// };\n\nexport function isType<T extends Type>(ctor: Constructor<T>): (type: Type) => type is InstanceType<typeof ctor>;\nexport function isType<T extends Type>(type: Type, ctor: Constructor<T>): type is InstanceType<typeof ctor>;\nexport function isType<T extends Type>(typeOrCtor: Type | Constructor<T>, ctor?: Constructor<T>) {\n    if (typeOrCtor instanceof TypeBase) {\n        return typeOrCtor.isType(ctor!);\n    }\n    else {\n        return (type: Type) => type.isType(typeOrCtor)\n    }\n};\n\nexport function sameType(type1: Type, type2: Type) {\n    return type1.sameType(type2);\n};\n\nexport function similarType(type1: Type, type2: Type) {\n    return type1.similarType(type2);\n};\n\nexport function subType(type1: Type, type2: Type) {\n    return type1.isPotentiallyCompleteClassType() && type2.isPotentiallyCompleteClassType() && type1.isDerivedFrom(type2);\n};\n\nexport var covariantType = function (derived: Type, base: Type) {\n    if (sameType(derived, base)) {\n        return true;\n    }\n\n    var dc;\n    var bc;\n    if (derived instanceof PointerType && base instanceof PointerType) {\n        dc = derived.ptrTo;\n        bc = base.ptrTo;\n    }\n    else if (derived instanceof ReferenceType && base instanceof ReferenceType) {\n        dc = derived.refTo;\n        bc = base.refTo;\n    }\n    else {\n        return false; // not both pointers or both references\n    }\n\n    // Must be pointers or references to class type\n    if (!(dc.isClassType()) || !(bc.isClassType())) {\n        return false;\n    }\n\n    // dc must be derived from bc\n    if (!dc.isDerivedFrom(bc)) {\n        return false;\n    }\n\n    // Pointers/References must have the same cv-qualification\n    if (derived.isConst != base.isConst || derived.isVolatile != base.isVolatile) {\n        return false;\n    }\n\n    // dc must have same or less cv-qualification as bc\n    if (dc.isConst && !bc.isConst || dc.isVolatile && !bc.isVolatile) {\n        return false;\n    }\n\n    // Yay we made it!\n    return true;\n};\n\nexport function referenceCompatible(from: ExpressionType, to: ReferenceType) {\n    return from && to && from.isReferenceCompatible(to);\n};\n\nexport function isCvConvertible(fromType: Type | null, toType: Type | null) {\n\n    if (fromType === null || toType === null) { return false; }\n\n    // t1 and t2 must be similar\n    if (!similarType(fromType, toType)) { return false; }\n\n    // Discard 0th level of cv-qualification signatures, we don't care about them.\n    // (It's essentially a value semantics thing, we're making a copy so top level const doesn't matter.)\n    fromType = fromType.getCompoundNext();\n    toType = toType.getCompoundNext();\n\n    // check that t2 has const everywhere that t1 does\n    // also if we ever find a difference, t2 needs const everywhere leading\n    // up to it (but not including) (and not including discarded 0th level).\n    let t2AllConst = true;\n    while (fromType && toType) { //similar so they should run out at same time\n        if (fromType.isConst && !toType.isConst) {\n            return false;\n        }\n        else if (!fromType.isConst && toType.isConst && !t2AllConst) {\n            return false;\n        }\n\n        // Update allConst\n        t2AllConst = t2AllConst && toType.isConst;\n        fromType = fromType.getCompoundNext();\n        toType = toType.getCompoundNext();\n    }\n\n    // If no violations, t1 is convertable to t2\n    return true;\n};\n\nabstract class TypeBase {\n    public static readonly _name = \"Type\";\n\n    /**\n     * Used in parenthesization of string representations of types.\n     * e.g. Array types have precedence 2, whereas Pointer types have precedence 1.\n     */\n    public abstract readonly precedence: number;\n\n\n    // regular member properties\n    public readonly isConst: boolean;\n    public readonly isVolatile: boolean;\n\n    public constructor(isConst: boolean = false, isVolatile: boolean = false) {\n        this.isConst = isConst;\n        // TODO ignore volatile completely? for now (and perhaps forever lol)\n        this.isVolatile = isVolatile;\n    }\n\n    public getCVString() {\n        return (this.isConst ? \"const \" : \"\") + (this.isVolatile ? \"volatile \" : \"\");\n    }\n\n    public toString() {\n        return this.typeString(false, \"\");\n    }\n\n    /**\n     * Returns true if this type object is an instance of the given Type class\n     */\n    public isType<T extends Type>(ctor: Constructor<T>): this is InstanceType<typeof ctor> {\n        return this instanceof ctor;\n    }\n\n    public isAtomicType(): this is AtomicType {\n        return this instanceof AtomicType;\n    }\n\n    public isArithmeticType(): this is ArithmeticType {\n        return this instanceof ArithmeticType;\n    }\n\n    public isIntegralType(): this is IntegralType {\n        return this instanceof IntegralType;\n    }\n\n    public isFloatingPointType(): this is FloatingPointType {\n        return this instanceof FloatingPointType;\n    }\n\n    public isPointerType(): this is PointerType {\n        return this instanceof PointerType;\n    }\n\n    public isPointerToCompleteType(): this is PointerToCompleteType {\n        return this.isPointerType() && this.ptrTo.isCompleteObjectType();\n    }\n\n    public isArrayPointerType(): this is ArrayPointerType {\n        return this instanceof ArrayPointerType;\n    }\n\n    public isObjectPointerType(): this is ObjectPointerType {\n        return this instanceof ObjectPointerType;\n    }\n    \n    public isPointerToType<T extends PotentiallyCompleteObjectType>(ctor: Constructor<T>): this is PointerType<InstanceType<typeof ctor>> {\n        return this.isPointerType() && this.ptrTo instanceof ctor;\n    }\n    \n    public isArrayPointerToType<T extends ArrayElemType>(ctor: Constructor<T>): this is ArrayPointerType<InstanceType<typeof ctor>> {\n        return this.isArrayPointerType() && this.ptrTo instanceof ctor;\n    }\n\n    public isReferenceType(): this is ReferenceType {\n        return this instanceof ReferenceType;\n    }\n\n    public isPotentiallyCompleteClassType(): this is PotentiallyCompleteClassType {\n        return this instanceof ClassTypeBase;\n    }\n\n    public isCompleteClassType(): this is CompleteClassType {\n        return this instanceof ClassTypeBase && this.isComplete();\n    }\n\n    public isIncompleteClassType(): this is CompleteClassType {\n        return this instanceof ClassTypeBase && !this.isComplete();\n    }\n\n    public isBoundedArrayType(): this is BoundedArrayType {\n        return this instanceof BoundedArrayType;\n    }\n\n    public isArrayOfUnknownBoundType(): this is ArrayOfUnknownBoundType {\n        return this instanceof ArrayOfUnknownBoundType;\n    }\n\n    public isPotentiallyCompleteArrayType(): this is BoundedArrayType | ArrayOfUnknownBoundType {\n        return this instanceof BoundedArrayType || this instanceof ArrayOfUnknownBoundType;\n    }\n\n    public isArrayElemType(): this is ArrayElemType {\n        return this instanceof AtomicType || this.isPotentiallyCompleteClassType();\n    }\n\n    public isFunctionType(): this is FunctionType {\n        return this instanceof FunctionType;\n    }\n\n    public isVoidType(): this is VoidType {\n        return this instanceof VoidType;\n    }\n\n    public isPotentiallyCompleteObjectType() : this is PotentiallyCompleteObjectType {\n        return this.isAtomicType() || this.isPotentiallyCompleteArrayType() || this.isPotentiallyCompleteClassType();\n    }\n\n    public isIncompleteObjectType(): this is IncompleteObjectType {\n        return this.isArrayOfUnknownBoundType() || this.isIncompleteClassType();\n    }\n\n    public isCompleteObjectType(): this is CompleteObjectType {\n        return this.isAtomicType() || this.isBoundedArrayType() || this.isCompleteClassType();\n    }\n\n    public isPotentialReturnType(): this is PotentialReturnType {\n        return this.isAtomicType() || this.isPotentiallyCompleteClassType() || this.isReferenceType() || this.isVoidType();\n    }\n\n    public isCompleteReturnType(): this is CompleteReturnType {\n        return this.isAtomicType() || this.isCompleteClassType() || this.isReferenceType() || this.isVoidType();\n    }\n\n    public isPotentialParameterType(): this is PotentialParameterType {\n        return this.isAtomicType() || this.isPotentiallyCompleteClassType() || this.isReferenceType();\n    }\n\n    public isCompleteParameterType(): this is CompleteParameterType {\n        return this.isAtomicType() || this.isCompleteClassType() || this.isReferenceType();\n    }\n\n    /**\n     * Returns true if other represents exactly the same type as this, including cv-qualifications.\n     */\n    public abstract sameType<T extends Type>(other: T): this is T;\n    public abstract sameType(other: Type): boolean;\n\n    /**\n     * Returns true if other represents the same type as this, ignoring cv-qualifications.\n     */\n    public abstract similarType<T extends Type>(other: T): this is T;\n    public abstract similarType(other: Type): boolean;\n\n\n    /**\n     * Returns true if this type is reference-related (see C++ standard) to the type other.\n     * @param other\n     */\n    public isReferenceRelated(this: ExpressionType, other: ReferenceType): boolean {\n        return sameType(this.cvUnqualified(), other.refTo.cvUnqualified()) ||\n            subType(this.cvUnqualified(), other.refTo.cvUnqualified());\n    }\n\n    /**\n     * Returns true if this type is reference-compatible (see C++ standard) to the type other.\n     * @param {ExpressionType} other\n     * @returns {boolean}\n     */\n    public isReferenceCompatible(this: ExpressionType, other: ReferenceType) {\n        return this.isReferenceRelated(other) && (other.refTo.isConst || !this.isConst) && (other.refTo.isVolatile || !this.isVolatile);\n    }\n\n    /**\n     * Returns a C++ styled string representation of this type.\n     * @param excludeBase If true, exclude the base type.\n     * @param varname The name of the variable. May be the empty string.\n     * @param decorated If true, html tags will be added.\n     */\n    public abstract typeString(excludeBase: boolean, varname: string, decorated?: boolean): string;\n\n    /**\n     * Returns a C++ styled string representation of this type, with the base type excluded as\n     * would be suitable for only printing the declarator part of a declaration.\n     * @param varname The name of the variable. May be the empty string.\n     */\n    public declaratorString(varname: string) {\n        return this.typeString(true, varname);\n    }\n\n    /**\n     * Returns a string representing a type as it might be read verbally in english.\n     * e.g. int const * var[5] --> \"an array of 5 pointers to const int\"\n     * @param plural Whether the returned string should be plural.\n     */\n    public abstract englishString(plural: boolean): string;\n\n    /**\n     * Both the name and message are just a C++ styled string representation of the type.\n     * @returns {{name: {String}, message: {String}}}\n     */\n    public describe(): ConstructDescription {\n        var str = this.typeString(false, \"\");\n        return { name: str, message: str };\n    }\n\n    /**\n     * If this is a compound type, returns the \"next\" type.\n     * e.g. if this is a pointer-to-int, returns int\n     * e.g. if this ia a reference to pointer-to-int, returns int\n     * e.g. if this is an array of bool, returns bool\n     */\n    public getCompoundNext(): Type | null {\n        return null;\n    }\n\n    /**\n     * Returns true if this type is either const or volatile (or both)\n     * @returns {boolean}\n     */\n    public isCVQualified() {\n        return this.isConst || this.isVolatile;\n    }\n\n    // TODO: perhaps make a way to clone a type with a particular cv qualification rather than the proxy approach, which seems more fragile\n\n    /**\n     * Returns a cv-unqualified copy of this type.\n     */\n    public cvUnqualified() {\n        return this.cvQualified(false, false);\n    }\n\n    /**\n     * Returns a copy of this type with the specified cv-qualifications.\n     */\n    public cvQualified(isConst: boolean = false, isVolatile: boolean = false): this {\n        return <this>this._cvQualifiedImpl(isConst, isVolatile);\n    }\n\n    /**\n     * Internal implementation of `cvQualifiedImpl`. DO NOT call this. It would be\n     * a protected function, except that causes issues with newer versions of typescript\n     * and intersection types. I suspect there is a TS compiler bug (or breaking change\n     * to make rules for assignability stricter) somewhere w.r.t. verifying that protected\n     * members of an intersection originate from the same declaration, specifically when\n     * narrowing in a conditional type for one of the member types of the Type type union.\n     * But I have not put in the time to track it down and submit an issue to the TS github.\n     */\n    public abstract _cvQualifiedImpl(isConst: boolean, isVolatile: boolean): TypeBase;\n\n    public abstract areLValuesAssignable(): boolean;\n};\n\n\n/**\n * Helper function for functions that create string representations of types.\n */\nfunction parenthesize(thisType: TypeBase, outside: TypeBase, str: string) : string {\n    return thisType.precedence < outside.precedence ? \"(\" + str + \")\" : str;\n}\n\nexport function isAtomicType(type: Type): type is AtomicType {\n    return type.isAtomicType();\n}\n\nexport function isArithmeticType(type: Type): type is ArithmeticType {\n    return type.isArithmeticType();\n}\n\nexport function isIntegralType(type: Type): type is IntegralType {\n    return type.isIntegralType();\n}\n\nexport function isFloatingPointType(type: Type): type is FloatingPointType {\n    return type.isFloatingPointType();\n}\n\nexport function isPointerType(type: Type): type is PointerType {\n    return type.isPointerType();\n}\n\nexport function isPointerToType<T extends PotentiallyCompleteObjectType>(ctor: Constructor<T>): (type: Type) => type is PointerType<T> {\n    return <(type: Type) => type is PointerType<T>>((type: Type) => type.isPointerToType(ctor));\n}\n\nexport function isPointerToCompleteType(type: Type): type is PointerToCompleteType {\n    return type.isPointerToCompleteType();\n}\n\nexport function isArrayPointerType(type: Type): type is ArrayPointerType {\n    return type.isArrayPointerType();\n}\n\nexport function isArrayPointerToType<T extends ArrayElemType>(ctor: Constructor<T>): (type: Type) => type is ArrayPointerType<T> {\n    return <(type: Type) => type is ArrayPointerType<T>>((type: Type) => type.isArrayPointerToType(ctor));\n}\n\nexport function isObjectPointerType(type: Type): type is ObjectPointerType {\n    return type.isObjectPointerType();\n}\n\nexport function isReferenceType(type: Type): type is ReferenceType {\n    return type.isReferenceType();\n}\n\nexport function isPotentiallyCompleteClassType(type: Type): type is PotentiallyCompleteClassType {\n    return type.isPotentiallyCompleteClassType();\n}\n\nexport function isCompleteClassType(type: Type): type is CompleteClassType {\n    return type.isCompleteClassType();\n}\n\nexport function isBoundedArrayType(type: Type): type is BoundedArrayType {\n    return type.isBoundedArrayType();\n}\n\nexport function isArrayOfUnknownBoundType(type: Type): type is ArrayOfUnknownBoundType {\n    return type.isArrayOfUnknownBoundType();\n}\n\nexport function isGenericArrayType(type: Type): type is BoundedArrayType | ArrayOfUnknownBoundType {\n    return type.isPotentiallyCompleteArrayType();\n}\n\nexport function isArrayElemType(type: Type): type is ArrayElemType {\n    return type.isArrayElemType();\n}\n\nexport function isFunctionType(type: Type): type is FunctionType {\n    return type.isFunctionType();\n}\n\nexport function isVoidType(type: Type): type is VoidType {\n    return type.isVoidType();\n}\n\nexport function isPotentiallyCompleteObjectType(type: Type): type is PotentiallyCompleteObjectType {\n    return type.isPotentiallyCompleteObjectType();\n}\n\nexport function isIncompleteObjectType(type: Type): type is IncompleteObjectType {\n    return type.isIncompleteObjectType();\n}\n\nexport function isCompleteObjectType(type: Type): type is CompleteObjectType {\n    return type.isCompleteObjectType();\n}\n\nexport function isPotentialReturnType(type: Type): type is PotentialReturnType {\n    return type.isPotentialReturnType();\n}\n\nexport function isCompleteReturnType(type: Type): type is CompleteReturnType {\n    return type.isCompleteReturnType();\n}\n\nexport function isPotentialParameterType(type: Type): type is PotentialParameterType {\n    return type.isPotentialParameterType();\n}\n\nexport function isCompleteParameterType(type: Type): type is CompleteParameterType {\n    return type.isCompleteParameterType();\n}\n\n\n// export function isType<T extends Type>(ctor: Constructor<T>) : this is InstanceType<typeof ctor> {\n//     return this instanceof ctor;\n// }\n\n// /**\n//  * Used when a compilation error causes an unknown type.\n//  */\n// export class Unknown extends Type {\n\n\n//     public sameType(other: Type) : boolean {\n//         return false;\n//     }\n\n//     public similarType(other: Type) : boolean{\n//         return false;\n//     }\n\n// \tpublic typeString(excludeBase: boolean, varname: string, decorated: boolean) {\n//         return \"<unknown>\";\n//     }\n\n// \tpublic englishString(plural: boolean) {\n// \t\treturn \"an unknown type\";\n//     }\n\n// \tpublic valueToString(value: RawValueType) {\n//         Util.assert(false);\n//         return \"\";\n//     }\n\n//     public isValueValid(value: RawValueType) {\n//         return false;\n//     }\n// }\n\n// export let UNKNOWN_TYPE = new Unknown();\n\nexport type Type = VoidType | CompleteObjectType | IncompleteClassType | FunctionType | ReferenceType | ArrayOfUnknownBoundType;\n\nexport type ExpressionType = Exclude<Type, ReferenceType>;\n\nexport type PotentiallyCompleteObjectType = AtomicType | BoundedArrayType | ArrayOfUnknownBoundType | PotentiallyCompleteClassType;\nexport type IncompleteObjectType = ArrayOfUnknownBoundType | IncompleteClassType;\nexport type CompleteObjectType = AtomicType | BoundedArrayType | CompleteClassType;\n\nexport type PotentialReturnType = AtomicType | PotentiallyCompleteClassType | ReferenceType | VoidType;\nexport type CompleteReturnType = AtomicType | CompleteClassType | ReferenceType | VoidType;\n\n// A parameter type may not be an array, since they convert to pointer parameters.\nexport type PotentialParameterType = AtomicType | PotentiallyCompleteClassType | ReferenceType;\nexport type CompleteParameterType = AtomicType | CompleteClassType | ReferenceType;\n\n\nexport class VoidType extends TypeBase {\n\n    public readonly type_kind = \"void\";\n\n    public static readonly VOID = new VoidType();\n\n\n    public readonly precedence = 0;\n\n    public isComplete() { return true; }\n\n    public sameType(other: Type): boolean {\n        return other instanceof VoidType\n            && other.isConst === this.isConst\n            && other.isVolatile === this.isVolatile;\n    }\n\n    public similarType(other: Type): boolean {\n        return other instanceof VoidType;\n    }\n\n    public typeString(excludeBase: boolean, varname: string, decorated: boolean) {\n        return \"void\";\n    }\n\n    public englishString(plural: boolean) {\n        return \"void\";\n    }\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new VoidType(isConst, isVolatile);\n    }\n\n    public areLValuesAssignable() {\n        return false;\n    }\n}\n\n\n// export class MissingType extends TypeBase {\n\n//     public static readonly MISSING = new MissingType();\n\n//     public readonly precedence = 0;\n\n//     public isComplete() { return true; }\n\n//     public sameType(other: Type) : boolean {\n//         return true;\n//     }\n\n//     public similarType(other: Type) : boolean {\n//         return true;\n//     }\n\n//     public typeString(excludeBase: boolean, varname: string, decorated: boolean) {\n//         return \"<missing>\";\n//     }\n\n//     public englishString(plural: boolean) {\n//         return \"<missing>\";\n//     }\n\n//     public cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n//         return new VoidType(isConst, isVolatile);\n//     }\n\n//     public areLValuesAssignable() {\n//         return true;\n//     }\n// }\n\n/**\n * Represents a type for an object that exists in memory and takes up some space.\n * Has a size property, but NOT necessarily a value. (e.g. an array).\n */\nexport abstract class ObjectTypeBase extends TypeBase {\n    public abstract readonly size: number;\n    \n    // public abstract isComplete(context?: TranslationUnitContext) : this is CompleteObjectType;\n}\n\nexport type Completed<T extends PotentiallyCompleteObjectType> =\n    T extends CompleteObjectType ? T :\n    T extends ArrayOfUnknownBoundType<infer E> ? BoundedArrayType<E> :\n    T extends IncompleteClassType ? CompleteClassType :\n    never\n\n/**\n * Represents a type for an object that has a value.\n */\nabstract class ValueType extends ObjectTypeBase {\n\n    /**\n     * Converts a sequence of bytes (i.e. the C++ object representation) of a value of\n     * this type into the raw value used to represent it internally in Lobster (i.e. a javascript value).\n     * @param bytes\n     */\n    public bytesToValue(bytes: byte[]): RawValueType {\n        // HACK: the whole value is stored in the first byte\n        return bytes[0];\n    }\n\n    /**\n     * Converts a raw value representing a value of this type to a sequence of bytes\n     * (i.e. the C++ object representation)\n     * @param value\n     */\n    public valueToBytes(value: RawValueType) {\n        var bytes = [];\n        // HACK: store the whole value in the first byte and zero out the rest. thanks javascript :)\n        bytes[0] = value;\n        for (var i = 1; i < this.size - 1; ++i) {\n            bytes.push(0);\n        }\n        return <byte[]>bytes;\n    }\n\n    /**\n     * Returns whether a given raw value for this type is valid. For example, a pointer type may track runtime\n     * type information about the array from which it was originally derived. If the pointer value increases such\n     * that it wanders over the end of that array, its value becomes invalid.\n     * @param value\n     */\n    public abstract isValueValid(value: RawValueType): boolean;\n\n    /**\n     * Returns a human-readable string representation of the given raw value for this Type.\n     * This is the representation that might be displayed to the user when inspecting the\n     * value of an object.\n     * Note that the value representation for the type in Lobster is just a javascript\n     * value. It is not the C++ value representation for the type.\n     * @param value\n     */\n    public abstract valueToString(value: RawValueType): string;\n\n    /**\n     * Returns the string representation of the given raw value for this Type that would be\n     * printed to an ostream.\n     * Note that the raw value representation for the type in Lobster is just a javascript\n     * value. It is not the C++ value representation for the type.\n     * TODO: This is a hack that may eventually be removed since printing to a stream should\n     * really be handled by overloaded << operator functions.\n     * @param value\n     */\n    public valueToOstreamString(value: RawValueType) {\n        return this.valueToString(value);\n    }\n\n    public areLValuesAssignable() {\n        return true;\n    }\n}\n\n\n\nexport abstract class AtomicType extends ValueType {\n    public readonly type_kind = \"AtomicType\";\n    public readonly isAtomic = true;\n\n    public isDefaultConstructible(userDefinedOnly = false) {\n        return !userDefinedOnly;\n    }\n\n    public isDestructible() {\n        return true;\n    }\n}\n\nexport abstract class SimpleType extends AtomicType {\n\n    /**\n     * Subclasses must implement a concrete type property that should be a\n     * string indicating the kind of type e.g. \"int\", \"double\", \"bool\", etc.\n     */\n    public abstract simpleType: string;\n\n    public readonly precedence = 0;\n\n    public sameType(other: Type): boolean {\n        return other instanceof SimpleType\n            && other.simpleType === this.simpleType\n            && other.isConst === this.isConst\n            && other.isVolatile === this.isVolatile;\n    }\n\n    public similarType(other: Type): boolean {\n        return other instanceof SimpleType\n            && other.simpleType === this.simpleType;\n    }\n\n    public typeString(excludeBase: boolean, varname: string, decorated: boolean): string {\n        if (excludeBase) {\n            return varname ? varname : \"\";\n        }\n        else {\n            let typeStr = this.getCVString() + this.simpleType;\n            return (decorated ? htmlDecoratedType(typeStr) : typeStr) + (varname ? \" \" + varname : \"\");\n        }\n    }\n\n    public englishString(plural: boolean) {\n        // no recursive calls to this.simpleType.englishString() here\n        // because this.simpleType is just a string representing the type\n        var word = this.getCVString() + this.simpleType;\n        return (plural ? this.simpleType + \"s\" : (isVowel(word.charAt(0)) ? \"an \" : \"a \") + word);\n    }\n\n    public valueToString(value: RawValueType) {\n        return \"\" + value;\n    }\n\n    public isValueValid(value: RawValueType) {\n        return true;\n    }\n}\n\n\nexport type ParsingResult<T extends ArithmeticType> = SuccessParsingResult<T> | ErrorParsingResult;\n\nexport type SuccessParsingResult<T extends ArithmeticType> = {\n    kind: \"success\";\n    result: Value<T>;\n}\n\nexport type ErrorParsingResult = {\n    kind: \"error\";\n};\n\nfunction createSuccessParsingResult<T extends ArithmeticType>(result: Value<T>) : SuccessParsingResult<T> {\n    return {\n        kind: \"success\",\n        result: result\n    };\n}\n\nfunction createErrorParsingResult() : ErrorParsingResult {\n    return {kind: \"error\"};\n}\n\nexport abstract class ArithmeticType extends SimpleType {\n\n    public abstract parse(s: string) : ParsingResult<this>;\n\n}\n\nexport type AnalyticArithmeticType = AnalyticIntegralType | AnalyticFloatingPointType;\n\nexport abstract class IntegralType extends ArithmeticType {\n\n}\n\nexport type AnalyticIntegralType = Char | Int | Size_t | Bool;\n\n\nexport class Char extends IntegralType {\n    public static readonly CHAR = new Char();\n\n    public readonly simpleType = \"char\";\n    public readonly size = 1;\n\n    public static readonly NULL_CHAR = new Value(0, Char.CHAR);\n\n    public static isNullChar(value: Value<Char>) {\n        return value.rawValue === 0;\n    }\n\n    public static jsStringToNullTerminatedCharArray(str: string) {\n        var chars = str.split(\"\").map(function (c) {\n            return c.charCodeAt(0);\n        });\n        chars.push(0); // null character\n        return chars.map(c => new Value(c, Char.CHAR));\n    }\n\n    public valueToString(value: RawValueType) {\n        return \"'\" + unescapeString(String.fromCharCode(value)) + \"'\";\n    }\n    public valueToOstreamString(value: RawValueType) {\n        // use <number> assertion based on the assumption this will only be used with proper raw values that are numbers\n        return String.fromCharCode(<number>value);\n    }\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new Char(isConst, isVolatile);\n    }\n\n    public parse(s: string) : ParsingResult<this> {\n        if (s.length > 0) {\n            return createSuccessParsingResult(new Value(s.charCodeAt(0), this, true));\n        }\n        else {\n            return createErrorParsingResult();\n        }\n    }\n}\n\nexport class Int extends IntegralType {\n    public static readonly INT = new Int();\n    public static readonly ZERO = new Value(0, Int.INT);\n\n    public readonly simpleType = \"int\";\n    public readonly size = 4;\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new Int(isConst, isVolatile);\n    }\n\n    public parse(s: string) : ParsingResult<this> {\n        let p = parseInt(s);\n        if (!Number.isNaN(p)) {\n            return createSuccessParsingResult(new Value(p, this, true));\n        }\n        else {\n            return createErrorParsingResult();\n        }\n    }\n};\n\nexport class Size_t extends IntegralType {\n    public readonly simpleType = \"size_t\";\n    public readonly size = 8;\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new Size_t(isConst, isVolatile);\n    }\n\n    public parse(s: string) : ParsingResult<this> {\n        let p = parseInt(s);\n        if (!Number.isNaN(p)) {\n            return createSuccessParsingResult(new Value(p, this, true));\n        }\n        else {\n            return createErrorParsingResult();\n        }\n    }\n}\n\nexport class Bool extends IntegralType {\n    public static readonly BOOL = new Bool();\n\n    public readonly simpleType = \"bool\";\n    public readonly size = 1;\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new Bool(isConst, isVolatile);\n    }\n\n    public parse(s: string) : ParsingResult<this> {\n        let p = parseInt(s);\n        if (!Number.isNaN(p)) {\n            return createSuccessParsingResult(new Value(p === 0 ? 0 : 1, this, true));\n        }\n        else {\n            return createErrorParsingResult();\n        }\n    }\n}\n\n// TODO: add support for Enums\n\n\n\nexport abstract class FloatingPointType extends ArithmeticType {\n\n    public valueToString(value: RawValueType) {\n        // use <number> assertion based on the assumption this will only be used with proper raw values that are numbers\n        var str = \"\" + <number>value;\n        return str.indexOf(\".\") != -1 ? str : str + \".\";\n    }\n\n    public valueToOstreamString(value: RawValueType) {\n        return \"\" + value;\n    }\n}\n\nexport type AnalyticFloatingPointType = Float | Double;\n\nexport class Float extends FloatingPointType {\n\n    public static readonly FLOAT = new Float();\n\n    public readonly simpleType = \"float\";\n    public readonly size = 4;\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new Float(isConst, isVolatile);\n    }\n\n    public parse(s: string) : ParsingResult<this> {\n        let p = parseFloat(s);\n        if (!Number.isNaN(p)) {\n            return createSuccessParsingResult(new Value(p, this, true));\n        }\n        else {\n            return createErrorParsingResult();\n        }\n    }\n}\n\nexport class Double extends FloatingPointType {\n\n    public static readonly DOUBLE = new Double();\n\n    public readonly simpleType = \"double\";\n    public readonly size = 8;\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new Double(isConst, isVolatile);\n    }\n    \n    public parse(s: string) : ParsingResult<this> {\n        let p = parseFloat(s);\n        if (!Number.isNaN(p)) {\n            return createSuccessParsingResult(new Value(p, this, true));\n        }\n        else {\n            return createErrorParsingResult();\n        }\n    }\n}\n\n// TODO: OStream shouldn't be a primitive type, should be an instrinsic class\n// export class OStream extends SimpleType {\n//     public readonly simpleType = \"ostream\";\n//     public readonly size = 4;\n\n// }\n\n// TODO: add support for istream\n// export class IStream = SimpleType.extend({\n//     _name: \"IStream\",\n//     simpleType: \"istream\",\n//     size: 4,\n\n//     valueToString : function(value){\n//         return JSON.stringify(value);\n//     }\n// });\n\n\n\n\n//TODO: create separate function pointer type???\n\nexport class PointerType<PtrTo extends PotentiallyCompleteObjectType = PotentiallyCompleteObjectType> extends AtomicType {\n\n    public readonly size = 8;\n    public readonly precedence = 1;\n\n    public static isNull(value: RawValueType) {\n        return <number>value === 0;\n    }\n\n    public static isNegative(value: RawValueType) {\n        return <number>value < 0;\n    }\n\n    public readonly ptrTo: PtrTo; // TODO: add | VoidType for void pointers? or just make that a whole separate VoidPointer class?\n\n    public constructor(ptrTo: PtrTo, isConst?: boolean, isVolatile?: boolean) {\n        super(isConst, isVolatile);\n        this.ptrTo = ptrTo;\n    }\n\n    public getCompoundNext() {\n        return this.ptrTo;\n    }\n\n    public sameType(other: Type): boolean {\n        return other instanceof PointerType\n            && this.ptrTo.sameType(other.ptrTo)\n            && other.isConst === this.isConst\n            && other.isVolatile === this.isVolatile;\n    }\n\n    public similarType(other: Type): boolean {\n        return other instanceof PointerType\n            && this.ptrTo.similarType(other.ptrTo);\n    }\n\n    public typeString(excludeBase: boolean, varname: string, decorated: boolean) : string {\n        return this.ptrTo.typeString(excludeBase, parenthesize(this, this.ptrTo, this.getCVString() + \"*\" + varname), decorated);\n    }\n\n    public englishString(plural: boolean) {\n        return (plural ? this.getCVString() + \"pointers to\" : \"a \" + this.getCVString() + \"pointer to\") + \" \" + this.ptrTo.englishString(false);\n    }\n\n    public valueToString(value: RawValueType) {\n        // TODO: clean up when function pointers are reimplemented\n        // if (this.ptrTo instanceof FunctionType && value) {\n        //     return value.name;\n        // }\n        // else{\n        return \"0x\" + value;\n        // }\n    }\n\n    /**\n     * Returns whether a given raw value for this type is dereferenceable. For pointer types, the given raw value is dereferenceable\n     * if the result of the dereference will be a live object. An example of the distinction between validity and\n     * dereferenceability for pointer types would be an array pointer. The pointer value (an address) is dereferenceable\n     * if it is within the bounds of the array. It is valid in those same locations plus also the location one space\n     * past the end (but not dereferenceable there). All other address values are invalid.\n     * @param value\n     */\n    public isValueDereferenceable(value: RawValueType) {\n        return this.isValueValid(value);\n    }\n\n    public isValueValid(value: RawValueType) {\n        return true;\n    }\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new PointerType(this.ptrTo, isConst, isVolatile);\n    }\n}\n\nexport type PointerToCompleteType = PointerType<CompleteObjectType>;\n\nexport class ArrayPointerType<T extends ArrayElemType = ArrayElemType> extends PointerType<T> {\n\n    public readonly arrayObject: CPPObject<BoundedArrayType<T>>;\n\n    public constructor(arrayObject: CPPObject<BoundedArrayType<T>>, isConst?: boolean, isVolatile?: boolean) {\n        super(arrayObject.type.elemType, isConst, isVolatile);\n        this.arrayObject = arrayObject;\n    }\n\n    public min() {\n        return this.arrayObject.address;\n    }\n\n    public onePast() {\n        return this.arrayObject.address + this.arrayObject.type.size;\n    }\n\n    public isValueValid(value: RawValueType) {\n        if (!this.arrayObject.isAlive) {\n            return false;\n        }\n        var arrayObject = this.arrayObject;\n        return arrayObject.address <= value && value <= arrayObject.address + arrayObject.type.size;\n    }\n\n    public isValueDereferenceable(value: RawValueType) {\n        return this.isValueValid(value) && value !== this.onePast();\n    }\n\n    public toIndex(addr: number) {\n        return Math.trunc((addr - this.arrayObject.address) / this.arrayObject.type.elemType.size);\n    }\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new ArrayPointerType(this.arrayObject, isConst, isVolatile);\n    }\n}\n\nexport class ObjectPointerType<T extends CompleteObjectType = CompleteObjectType> extends PointerType<T> {\n\n    public readonly pointedObject: CPPObject<T>;\n\n    public constructor(obj: CPPObject<T>, isConst?: boolean, isVolatile?: boolean) {\n        super(obj.type, isConst, isVolatile);\n        this.pointedObject = obj;\n    }\n\n    public getPointedObject() {\n        return this.pointedObject;\n    }\n\n    public isValueValid(value: RawValueType) {\n        return this.pointedObject.isAlive && this.pointedObject.address === value;\n    }\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new ObjectPointerType(this.pointedObject, isConst, isVolatile);\n    }\n}\n\n\nexport class ReferenceType<RefTo extends PotentiallyCompleteObjectType = PotentiallyCompleteObjectType> extends TypeBase {\n\n    public readonly precedence = 1;\n\n    public readonly refTo: RefTo;\n\n    public constructor(refTo: RefTo) {\n        // References have no notion of const (they can't be re-bound anyway)\n        super(false, false);\n        this.refTo = refTo;\n    }\n\n    public isComplete() { return true; }\n\n    public getCompoundNext() {\n        return this.refTo;\n    }\n\n    public sameType(other: Type): boolean {\n        return other instanceof ReferenceType && this.refTo.sameType(other.refTo);\n    }\n\n    //Note: I don't think similar types even make sense with references. See standard 4.4\n    public similarType(other: Type): boolean {\n        return other instanceof ReferenceType && this.refTo.similarType(other.refTo);\n    }\n\n    public typeString(excludeBase: boolean, varname: string, decorated: boolean) : string {\n        return this.refTo.typeString(excludeBase, parenthesize(this, this.refTo, this.getCVString() + \"&\" + varname), decorated);\n    }\n\n    public englishString(plural: boolean) {\n        return this.getCVString() + (plural ? \"references to\" : \"a reference to\") + \" \" + this.refTo.englishString(false);\n    }\n\n    public valueToString(value: RawValueType) {\n        return \"\" + value;\n    }\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new ReferenceType(this.refTo);\n    }\n\n    public areLValuesAssignable() {\n        return false;\n    }\n}\n\nexport type ReferredType<T extends ReferenceType> = T[\"refTo\"];\n\nexport type PeelReference<T extends Type> = T extends ReferenceType ? T[\"refTo\"] : T;\n\nexport type ExcludeRefType<T extends Type> = T extends ReferenceType ? never : T;\n\nexport function peelReference<T extends Type>(type: T): PeelReference<T>;\nexport function peelReference<T extends Type>(type: T | undefined): PeelReference<T> | undefined;\nexport function peelReference<T extends Type>(type: T): PeelReference<T> {\n    if (!type) {\n        return type;\n    }\n    if (type instanceof ReferenceType) {\n        return type.refTo;\n    }\n    else {\n        return <PeelReference<T>>type; // will either be an object type or void type\n    }\n};\n\nexport type ArrayElemType = AtomicType | CompleteClassType;\n\n// Represents the type of an array. This is not an ObjectType because an array does\n// not have a value that can be read/written. The Elem_type type parameter must be\n// an AtomicType or ClassType. (Note that this rules out arrays of arrays, which are currently not supported.)\nexport class BoundedArrayType<Elem_type extends ArrayElemType = ArrayElemType> extends ObjectTypeBase {\n\n    public readonly size: number;\n\n    public readonly precedence = 2;\n\n    public readonly elemType: Elem_type;\n    public readonly length: number;\n\n    public constructor(elemType: Elem_type, length: number) {\n\n        // TODO: sanity check the semantics here, but I don't think it makes sense for an array itself to be volatile\n        super(false, false);\n\n        this.elemType = elemType;\n        this.length = length;\n        this.size = elemType.size * length;\n    }\n\n\n    public isComplete(context?: TranslationUnitContext) : this is BoundedArrayType<Elem_type> {\n\n        return true; // Hardcoded true for now since arrays of incomplete element type are not supported in Lobster\n\n        // Completeness may change if elemType completeness changes\n        // (e.g. array of potentially (in)complete class type objects)\n        // return this.elemType.isComplete(context);\n    }\n\n    public getCompoundNext() {\n        return this.elemType;\n    }\n\n    public sameType(other: Type): boolean {\n        return other instanceof BoundedArrayType && this.elemType.sameType(other.elemType) && this.length === other.length;\n    }\n\n    public similarType(other: Type): boolean {\n        return other instanceof BoundedArrayType && this.elemType.similarType(other.elemType) && this.length === other.length;\n    }\n\n    public typeString(excludeBase: boolean, varname: string, decorated: boolean) {\n        return this.elemType.typeString(excludeBase, varname + \"[\" + this.length + \"]\", decorated);\n    }\n\n    public englishString(plural: boolean) {\n        return (plural ? \"arrays of \" : \"an array of \") + this.length + \" \" + this.elemType.englishString(this.length > 1);\n    }\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new BoundedArrayType(this.elemType, this.length); // Note arrays don't have cv qualifications so they are ignored here\n    }\n\n    public adjustToPointerType() {\n        return new PointerType(this.elemType, false, false);\n    }\n\n    // public valueToString(value: RawValueType) {\n    // \treturn \"\"+value;\n    // }\n\n    // public bytesToValue(bytes: byte[]) : never {\n    //     return Util.assertFalse(); // TODO: actually change type hierarchy so ArrayTypes do not support a mechanism for reading/writing their value\n    //     // var arr = [];\n    //     // var elemSize = this.elemType.size;\n    //     // for(var i = 0; i < bytes.length; i += elemSize){\n    //     //     arr.push(this.elemType.bytesToValue(bytes.slice(i, i + elemSize)));\n    //     // }\n    //     // return arr;\n    // }\n    // public valueToBytes(value: RawValueType) : never {\n    //     return Util.assertFalse(); // TODO: actually change type hierarchy so ArrayTypes do not support a mechanism for reading/writing their value\n    //     // return flatten(value.map(\n    //     //     (elem: RawValueType) => { return this.elemType.valueToBytes(elem); }\n    //     // ));\n    // }\n\n    public areLValuesAssignable() {\n        return false;\n    }\n    \n    public isDefaultConstructible(userDefinedOnly = false) {\n        return this.elemType.isDefaultConstructible(userDefinedOnly);\n    }\n    \n    public isDestructible() {\n        return this.elemType.isDestructible();\n    }\n}\n\n\nexport class ArrayOfUnknownBoundType<Elem_type extends ArrayElemType = ArrayElemType> extends TypeBase {\n\n    public readonly precedence = 2;\n\n    public readonly elemType: Elem_type;\n\n    public readonly sizeExpressionAST?: ExpressionASTNode;\n\n    public constructor(elemType: Elem_type, sizeExpressionAST?: ExpressionASTNode) {\n        super(false, false);\n        this.elemType = elemType;\n        this.sizeExpressionAST = sizeExpressionAST;\n    }\n\n    public isComplete() : this is BoundedArrayType<Elem_type> {\n        return false;\n    }\n\n    public getCompoundNext() {\n        return this.elemType;\n    }\n\n    public sameType(other: Type): boolean {\n        return other instanceof ArrayOfUnknownBoundType && this.elemType.sameType(other.elemType);\n    }\n\n    public similarType(other: Type): boolean {\n        return other instanceof ArrayOfUnknownBoundType && this.elemType.similarType(other.elemType);\n    }\n\n    public typeString(excludeBase: boolean, varname: string, decorated: boolean) {\n        return this.elemType.typeString(excludeBase, varname + \"[]\", decorated);\n    }\n\n    public englishString(plural: boolean) {\n        return (plural ? \"arrays of unknown bound of \" : \"an array of unknown bound of \") + this.elemType.englishString(true);\n    }\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new ArrayOfUnknownBoundType(this.elemType, this.sizeExpressionAST);\n    }\n\n    public adjustToPointerType() {\n        return new PointerType(this.elemType, false, false);\n    }\n\n    public areLValuesAssignable() {\n        return false;\n    }\n}\n\n// TODO: Add a type for an incomplete class\n\n// TODO: get rid of or move this comment somewhere appropriate\n/**\n * memberEntities - an array of all member entities. does not inlcude constructors, destructor, or base class subobject entities\n * subobjectEntities - an array containing all subobject entities, include base class subobjects and member subobjects\n * baseClassEntities - an array containing entities for any base class subobjects\n * memberSubobjectEntities - an array containing entities for member subobjects (does not contain base class subobjects)\n * constructors - an array of the constructor entities for this class. may be empty if no constructors\n * destructor - the destructor entity for this class. might be null if doesn't have a destructor\n */\n\ninterface ClassShared {\n    classDefinition?: ClassDefinition;\n}\n\n\nclass ClassTypeBase extends TypeBase {\n\n    public readonly precedence: number = 0;\n    public readonly className: string = \"\";\n\n    private readonly classId: number;\n    private readonly shared: ClassShared;\n\n    public readonly templateParameters: readonly AtomicType[] = [];\n    \n    /** DO NOT USE. Exists only to ensure CompleteClassType is not structurally assignable to CompleteClassType */\n    public readonly t_isComplete!: boolean;\n\n    public constructor(classId: number, className: string, shared: ClassShared, isConst: boolean = false, isVolatile: boolean = false) {\n        super(isConst, isVolatile);\n        this.classId = classId;\n        this.className = className;\n        this.shared = shared;\n    }\n    \n    public get classDefinition() {\n        return this.shared.classDefinition;\n    }\n\n    public get size() {\n        // An ObjectType is not allowed to have size 0, but a\n        // class definition with no members would have object size 0,\n        // so we just say the min size of class type objects is 4 bytes\n        if (this.shared.classDefinition) {\n            return Math.max(this.shared.classDefinition.objectSize, 4);\n        }\n        else {\n            return undefined;\n        }\n    }\n\n    public get classScope() {\n        return this.shared.classDefinition?.context.contextualScope;\n    }\n\n    public setDefinition(def: ClassDefinition) {\n        this.shared.classDefinition = def;\n    }\n\n    public isComplete(context?: TranslationUnitContext) : this is CompleteClassType {\n        // TODO: also consider whether the context is one in which the class\n        // is temporarily considered complete, e.g. a member function definition\n        // ^ Actually, depending on how lobster sequences the compilation, this\n        // might not be necessary, since the compilation of the member function\n        // bodies might just come after the classDefinition is set.\n        return !!this.shared.classDefinition;\n    }\n\n    public sameType(other: Type) : boolean {\n        return this.similarType(other)\n            && other.isConst === this.isConst\n            && other.isVolatile === this.isVolatile;\n    }\n\n    public similarType(other: Type) : boolean {\n        return other instanceof ClassTypeBase\n            && sameClassType(this, other);\n    }\n\n    public isDerivedFrom(other: Type) : boolean {\n        var b = this.classDefinition?.baseClass;\n        while(b) {\n            if (similarType(other, b)) {\n                return true;\n            }\n            b = b.classDefinition?.baseClass;\n        }\n        return false;\n    }\n\n    public typeString(excludeBase: boolean, varname: string, decorated?: boolean) {\n        if (excludeBase) {\n            return varname ? varname : \"\";\n        }\n        else{\n            return this.getCVString() + (decorated ? htmlDecoratedType(this.className) : this.className) + (varname ? \" \" + varname : \"\");\n        }\n    }\n\n    public englishString(plural: boolean) {\n        return this.getCVString() + (plural ? this.className+\"s\" : (isVowel(this.className.charAt(0)) ? \"an \" : \"a \") + this.className);\n    }\n    \n//     englishString : function(plural){\n\n//     },\n//     valueToString : function(value){\n//         return JSON.stringify(value, null, 2);\n//     },\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) {\n        return new ClassTypeBase(this.classId, this.className, this.shared, isConst, isVolatile);\n    }\n\n    public areLValuesAssignable() {\n        return false;\n    }\n    \n    public isDefaultConstructible(this: CompleteClassType, userDefinedOnly = false) {\n        let defaultCtor = this.classDefinition.defaultConstructor;\n        return !!defaultCtor && (!userDefinedOnly || defaultCtor.isUserDefined);\n    }\n    \n    public isDestructible(this: CompleteClassType) {\n        return !!this.classDefinition.destructor;\n    }\n\n    public isAggregate(this: CompleteClassType) {\n\n        // Aggregates may not have private member variables\n        if (this.classDefinition.memberVariableEntities.some(memEnt => memEnt.firstDeclaration.context.accessLevel === \"private\")) {\n            return false;\n        }\n\n        // Aggregates may not have user-provided constructors\n        if (this.classDefinition.constructorDeclarations.some(ctorDecl => !ctorDecl.context.implicit)) {\n            return false;\n        }\n\n        // Aggregates may not have base classes (until c++17)\n        if (this.classDefinition.baseClass) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\n/** Two class types are the same if they originated from the same ClassEntity (e.g.\n *  the same class declaration from the same .h include file, or\n *  two class declarations with the same name in the same scope) or if they have \n *  been associated with the same definition during linking.\n */\nfunction sameClassType(thisClass: ClassTypeBase, otherClass: ClassTypeBase) {\n    // Note the any casts are to grant \"friend\" access to private members of ClassTypeBase\n    return (thisClass as any).classId === (otherClass as any).classId\n        || (!!(thisClass as any).shared.classDefinition && (thisClass as any).shared.classDefinition === (otherClass as any).shared.classDefinition);\n}\n\nexport interface IncompleteClassType extends ClassTypeBase {\n    /** DO NOT USE. Exists only to ensure CompleteClassType is not structurally assignable to CompleteClassType */\n    readonly t_isComplete: false;\n}\n\nexport interface CompleteClassType extends ClassTypeBase {\n    \n    /** DO NOT USE. Exists only to ensure CompleteClassType is not structurally assignable to CompleteClassType */\n    readonly t_isComplete: true;\n    \n    readonly classDefinition: ClassDefinition;\n    readonly size: number;\n    readonly classScope: ClassScope;\n\n    isDefaultConstructible(userDefinedOnly?: boolean): boolean;\n    isDestructible(): boolean;\n}\n\nexport type PotentiallyCompleteClassType = IncompleteClassType | CompleteClassType;\n\nlet nextClassId = 0;\n\nexport function createClassType(className: string) : IncompleteClassType {\n    return <IncompleteClassType>new ClassTypeBase(nextClassId++, className, {});\n}\n\n// export class ClassType extends ObjectTypeBase {\n//     public isValueValid(value: number): boolean {\n//         throw new Error(\"Method not implemented.\");\n//     }\n//     public valueToString(value: number): string {\n//         throw new Error(\"Method not implemented.\");\n//     }\n\n//     public englishString(plural: boolean): string {\n//         throw new Error(\"Method not implemented.\");\n//     }\n//     public readonly precedence = 0;\n\n//     public readonly cppClass: CPPClass;\n\n//     public constructor(cppClass: CPPClass, isConst?: boolean, isVolatile?: boolean) {\n//         super(isConst, isVolatile);\n\n//         this.cppClass = cppClass;\n//     }\n\n//     public get isComplete() {\n//         return this.cppClass.isComplete;\n//     }\n\n//     public get size() {\n//         return this.cppClass.size;\n//     }\n\n//     public sameType(other: Type) {\n//         //alert(other.isA(this._class));\n//         return this.similarType(other)\n//             && other.isConst === this.isConst\n//             && other.isVolatile === this.isVolatile;\n//     }\n\n//     public similarType(other: Type) {\n//         return other instanceof ClassType && other.cppClass.fullyQualifiedName === this.cppClass.fullyQualifiedName;\n//     }\n//     typeString : function(excludeBase, varname, decorated){\n//         if (excludeBase) {\n//             return varname ? varname : \"\";\n//         }\n//         else{\n//             return this.getCVString() + (decorated ? Util.htmlDecoratedType(this.className) : this.className) + (varname ? \" \" + varname : \"\");\n//         }\n//     },\n//     englishString : function(plural){\n//         // no recursive calls to this.type.englishString() here\n//         // because this.type is just a string representing the type\n//         return this.getCVString() + (plural ? this.className+\"s\" : (isVowel(this.className.charAt(0)) ? \"an \" : \"a \") + this.className);\n//     },\n//     valueToString : function(value){\n//         return JSON.stringify(value, null, 2);\n//     },\n//     bytesToValue : function(bytes){\n//         var val = {};\n//         var b = 0;\n//         for(var i = 0; i < this.memberSubobjectEntities.length; ++i) {\n//             var mem = this.memberSubobjectEntities[i];\n//             val[mem.name] = mem.type.bytesToValue(bytes.slice(b, b + mem.type.size));\n//             b += mem.type.size;\n//         }\n//         return val;\n//     },\n//     valueToBytes : function(value){\n//         var bytes = [];\n//         for(var i = 0; i < this.memberSubobjectEntities.length; ++i) {\n//             var mem = this.memberSubobjectEntities[i];\n//             bytes.pushAll(mem.type.valueToBytes(value[mem.name]));\n//         }\n//         return bytes;\n//     }\n// }\n\n// export class CPPClass {\n\n//     private static nextClassId = 0;\n\n//     public readonly name: string;\n//     public readonly fullyQualifiedName: string;\n//     public readonly size: number = 1;\n//     private actuallyZeroSize = true;\n\n//     // TODO: there isn't really a need to store entities in here. just the types would be fine and entities for the named\n//     // members would still go in the class scope. Base class entities aren't really needed at all.\n//     public readonly scope: ClassScope;\n//     private memberEntities : MemberVariableEntity[] = [];\n//     private subobjectEntities: (MemberVariableEntity | BaseClassEntity)[] = [];\n//     public readonly baseClassEntities: BaseClassEntity[] = [];\n//     public readonly memberSubobjectEntities: MemberVariableEntity[] = [];\n//     public ctors: ConstructorEntity[] = [];\n//     public destructor?: DestructorEntity;\n\n//     public readonly isComplete: boolean;\n\n//     public constructor(fullyQualifiedName: string, parentScope: Scope, baseClass: ClassEntity) {\n//         this.fullyQualifiedName = fullyQualifiedName;\n//         this.name = fullyQualifiedNameToUnqualified(fullyQualifiedName);\n//         this.scope = ClassScope.instance(name, parentScope, baseClass);\n\n//         if (baseClass) {\n//             let baseEntity = new BaseClassEntity(baseClass, this, \"public\");\n//             this.baseClassEntities.push(baseEntity);\n//             this.subobjectEntities.push(baseEntity);\n//             this.size += base.type.size;\n//         }\n\n//         this.isComplete = false;\n//     }\n\n//     public getBaseClass() {\n//         if (this.baseClassEntities.length > 0) {\n//             return this.baseClassEntities[0];\n//         }\n//         else {\n//             return null;\n//         }\n//     }\n\n//     public memberLookup(memberName: string, options: NameLookupOptions) {\n//         return this.scope.memberLookup(memberName, options);\n//     }\n\n//     public requiredMemberLookup(memberName: string, options: NameLookupOptions) {\n//         return this.scope.requiredMemberLookup(memberName, options);\n//     }\n\n//     public hasMember(memberName: string, options: NameLookupOptions) {\n//         return !!this.memberLookup(memberName, options);\n//     }\n\n//     public addMember(mem: CPPEntity) {\n//         Util.assert(!this.isComplete, \"May not modify a class definition once it has been completed.\");\n//         this.scope.addDeclaredEntity(mem);\n//         this.memberEntities.push(mem);\n//         if(mem.type.isObjectType()){\n//             if (this.actuallyZeroSize){\n//                 (<number>this.size) = 0;\n//                 this.actuallyZeroSize = false;\n//             }\n\n//             this.memberSubobjectEntities.push(mem);\n//             this.subobjectEntities.push(mem);\n//             (<number>this.size) += mem.type.size;\n//         }\n//     }\n\n//     public addConstructor(constructor: ConstructorEntity) {\n//         Util.assert(!this.isComplete, \"May not modify a class definition once it has been completed.\");\n//         this.ctors.push(constructor);\n//     }\n\n//     public addDestructor(destructor: DestructorEntity) {\n//         Util.assert(!this.isComplete, \"May not modify a class definition once it has been completed.\");\n//         this.destructor = destructor;\n//     }\n\n//     public getDefaultConstructor() {\n//         return this.scope.singleLookup(this.name+\"\\0\", {\n//             own:true, noBase:true, exactMatch:true,\n//             paramTypes:[]});\n//     }\n\n//     public getCopyConstructor(requireConst: boolean){\n//         return this.scope.singleLookup(this.name+\"\\0\", {\n//                 own:true, noBase:true, exactMatch:true,\n//                 paramTypes:[new Reference(new ClassType(this, true))]}) ||\n//             !requireConst &&\n//             this.scope.singleLookup(this.name+\"\\0\", {\n//                 own:true, noBase:true, exactMatch:true,\n//                 paramTypes:[new Reference(new ClassType(this))]});\n//     }\n\n//     public getAssignmentOperator(requireConst: boolean, isThisConst: boolean) {\n//         return this.scope.singleLookup(\"operator=\", {\n//                 own:true, noBase:true, exactMatch:true,\n//                 paramTypes:[new ClassType(this)]}) ||\n//             this.scope.singleLookup(\"operator=\", {\n//                 own:true, noBase:true, exactMatch:true,\n//                 paramTypes:[new Reference(new ClassType(this, true))]}) ||\n//             !requireConst &&\n//             this.scope.singleLookup(\"operator=\", {\n//                 own:true, noBase:true, exactMatch:true,\n//                 paramTypes:[new Reference(new ClassType(this))]})\n\n//     }\n\n//     public makeComplete() {\n//         (<boolean>this.isComplete) = true;\n//     }\n\n//     // TODO: think about whether this is necessary (it probably is, or maybe just the class scopes would need to be merged?)\n//     // merge : function(class1, class2) {\n//     //     class1.i_classId = class2.i_classId = Math.min(class1.i_classId, class2.i_classId);\n//     // },\n\n//     public isDerivedFrom(potentialBase: ClassEntity) {\n//         var b = this.getBaseClass();\n//         while(b) {\n//             if (similarType(potentialBase.type, b.type)) {\n//                 return true;\n//             }\n//             b = b.base;\n//         }\n//         return false;\n//     }\n\n\n\n// }\n// export {ClassType as Class};\n\n\n\n// REQUIRES: returnType must be a type\n//           argTypes must be an array of types\nexport class FunctionType<ReturnType extends PotentialReturnType = PotentialReturnType> extends TypeBase {\n\n    public readonly type_kind = \"function\";\n\n    public readonly precedence = 2;\n\n    public readonly returnType: ReturnType;\n    public readonly paramTypes: readonly PotentialParameterType[];\n    public readonly receiverType?: PotentiallyCompleteClassType;\n\n    private paramStrType: string;\n    private paramStrEnglish: string;\n\n    public constructor(returnType: ReturnType, paramTypes: readonly PotentialParameterType[], receiverType?: PotentiallyCompleteClassType) {\n        super(false, false);\n\n        this.receiverType = receiverType;\n\n        // Top-level const on return type is ignored for non-class types\n        // (It's a value semantics thing.)\n        // TODO: why are PointerType and ReferenceType included here?\n        // shouldn't const be ignored on returns of const pointers due to value semantics (but not pointers-to-const)\n        // and for references you can't have a const reference anyway so it's not meaningful\n        if (!(returnType.isPotentiallyCompleteClassType() || returnType.isPointerType() || returnType.isReferenceType())) {\n            this.returnType = <ReturnType>returnType.cvUnqualified();\n        }\n        else {\n            this.returnType = returnType;\n        }\n\n        // Top-level const on parameter types is ignored for non-class types\n        this.paramTypes = paramTypes.map((ptype) => ptype.isPotentiallyCompleteClassType() ? ptype : ptype.cvUnqualified());\n\n        this.paramStrType = \"(\";\n        for (var i = 0; i < paramTypes.length; ++i) {\n            this.paramStrType += (i == 0 ? \"\" : \",\") + paramTypes[i];\n        }\n        this.paramStrType += \")\";\n\n        this.paramStrEnglish = \"(\";\n        for (var i = 0; i < paramTypes.length; ++i) {\n            this.paramStrEnglish += (i == 0 ? \"\" : \", \") + paramTypes[i].englishString(false);\n        }\n        this.paramStrEnglish += \")\";\n    }\n\n    public isComplete() { return true; }\n\n    public _cvQualifiedImpl(isConst: boolean, isVolatile: boolean) : FunctionType {\n        return new FunctionType(this.returnType, this.paramTypes, this.receiverType);\n    }\n\n    public sameType(other: Type) {\n        if (!other) {\n            return false;\n        }\n        if (!(other instanceof FunctionType)) {\n            return false;\n        }\n        if (!this.sameReturnType(other)) {\n            return false;\n        }\n        if (!this.sameParamTypes(other)) {\n            return false;\n        }\n        // TODO: should this be here?\n        // if (!this.sameReceiverType(other)) {\n        //     return false;\n        // }\n        return true;\n    }\n\n    // TODO: Check definition of similar types for functions\n    public similarType(other: Type) {\n        return this.sameType(other);\n    }\n\n    public sameParamTypes(other: FunctionType | readonly Type[]) {\n        let otherParamTypes = other instanceof FunctionType ? other.paramTypes : other;\n        if (this.paramTypes.length !== otherParamTypes.length) {\n            return false;\n        }\n        for (var i = 0; i < this.paramTypes.length; ++i) {\n            if (!this.paramTypes[i].sameType(otherParamTypes[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public sameReturnType(other: FunctionType) {\n        return this.returnType.sameType(other.returnType);\n    }\n\n    public sameReceiverType(other: FunctionType) {\n        if (!this.receiverType || !other.receiverType) {\n            // If either does not have a receiver, return true only if neither has a receiver\n            return !this.receiverType && !other.receiverType;\n        }\n\n        return this.receiverType.sameType(other.receiverType);\n    }\n\n    public sameSignature(other: FunctionType) {\n        return this.sameReceiverType(other) && this.sameParamTypes(other);\n    }\n\n    public isPotentialOverriderOf(other: FunctionType) {\n        return this.sameParamTypes(other) && this.isConst === other.isConst && this.isVolatile == other.isVolatile;\n    }\n\n    public typeString(excludeBase: boolean, varname: string, decorated: boolean = false) {\n        return this.returnType.typeString(excludeBase, varname + this.paramStrType, decorated);\n    }\n\n    public englishString(plural: boolean) {\n        return (plural ? \"functions that take \" : \"a function that takes \") + this.paramStrEnglish + \" \" +\n            (plural ? \"and return \" : \"and returns \") + this.returnType.englishString(false);\n    }\n\n    public areLValuesAssignable() {\n        return false;\n    }\n}\n\nconst builtInTypeNames = new Set([\"char\", \"int\", \"size_t\", \"bool\", \"float\", \"double\", \"void\"]);\nexport function isBuiltInTypeName(name: string): name is \"char\" | \"int\" | \"size_t\" | \"bool\" | \"float\" | \"double\" | \"void\" {\n    return builtInTypeNames.has(name);\n}\nexport const builtInTypes = {\n    \"char\": Char,\n    \"int\": Int,\n    \"size_t\": Int,\n    \"bool\": Bool,\n    \"float\": Float,\n    \"double\": Double,\n    \"void\": VoidType\n};","import Cookies from \"js-cookie\";\nimport { listenTo, messageResponse, MessageResponses } from \"../util/observe\";\nimport { ICON_PERSON } from \"./octicons\";\nimport { MyProjects, ProjectData } from \"./projects\";\nimport { User, UserInfo as UserData } from \"./user\";\n\n\n/**\n * Expects elements with these classes to be present:\n * - lobster-log-in-button\n * - lobster-my-projects\n */\nexport class LobsterApplication {\n\n    public _act!: MessageResponses;\n\n    public readonly myProjects: MyProjects;\n    public readonly user: User;\n\n    private readonly logInButtonElem: JQuery;\n\n    public constructor() {\n        this.myProjects = new MyProjects($(\".lobster-my-projects\"));\n        this.user = new User();\n\n        this.logInButtonElem = $(\".lobster-log-in-button\");\n\n        this.user.checkLogin();\n        listenTo(this, this.user);\n    }\n\n    public async refreshProjects() {\n        \n        const response = await fetch(`api/users/me/projects`, {\n            method: 'GET',\n            headers: {\n                'Authorization': 'bearer ' + Cookies.get('bearer')\n            }\n        });\n\n        let projects: ProjectData[] = await response.json();\n        this.myProjects.setProjects(projects);\n\n    }\n    \n    @messageResponse(\"userLoggedIn\", \"unwrap\")\n    protected onUserLoggedIn(user: UserData) {\n        this.logInButtonElem.html(`${ICON_PERSON} ${user.email}`);\n\n        this.refreshProjects();\n    }\n    \n    @messageResponse(\"userLoggedOut\", \"unwrap\")\n    protected onUserLoggedOut(user: UserData) {\n        this.logInButtonElem.html(\"Sign In\");\n    }\n\n}","\n// https://primer.style/octicons/\n\nexport const ICON_PERSON = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"><path fill-rule=\"evenodd\" d=\"M10.5 5a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0zm.061 3.073a4 4 0 10-5.123 0 6.004 6.004 0 00-3.431 5.142.75.75 0 001.498.07 4.5 4.5 0 018.99 0 .75.75 0 101.498-.07 6.005 6.005 0 00-3.432-5.142z\"></path></svg>';","import Cookies from \"js-cookie\";\nimport { Mutable } from \"../util/util\";\nimport { UserInfo } from \"./user\";\n\nexport type ProjectData = {\n    id: number;\n    exercise_id?: number | null;\n    last_modified: string; // date\n    contents: string;\n    is_public: boolean;\n    name: string;\n}\n\nexport class MyProjects {\n\n    private element: JQuery;\n    private listElem: JQuery;\n\n    public readonly projects: readonly ProjectData[] = [];\n\n    public constructor(element: JQuery) {\n        this.element = element;\n        this.listElem = $('<div class=\"list-group\"></div>').appendTo(element);\n    }\n\n    public setProjects(projects: readonly ProjectData[]) {\n        (<Mutable<this>>this).projects = projects;\n\n        this.listElem.empty();\n\n        projects.forEach(project => {\n            $(`<a href=\"#\" class=\"list-group-item\">${project.name}</a>`)\n                .appendTo(this.listElem);\n        });\n\n    } \n\n    \n}\n\n// var ProjectList = Lobster.Outlets.CPP.ProjectList = Class.extend(Observable, {\n//     _name: \"ProjectList\",\n\n//     API_URL : \"/api/me/project/list\",\n\n//     // element should be a jquery object\n//     init: function(element) {\n//         this.i_element = element;\n//         element.addClass(\"projectList\");\n\n//         this.refresh();\n//     },\n\n//     refresh : function() {\n//         this.ajax({\n//             type: \"GET\",\n//             url: this.API_URL,\n//             success: function(data) {\n//                 this.i_setList(data);\n//             },\n//             dataType: \"json\"\n//         });\n//     },\n\n//     i_setList : function(projects) {\n//         \n\n//         this.i_element.empty();\n\n//         for(var i = 0; i < projects.length; i++) {\n//             var project = projects[i];\n//             var item = $(\"<li></li>\");\n//             var link = $('<a class=\"link lobster-code\" data-toggle=\"pill\">' + project[\"project\"] + '</a>');\n//             item.append(link);\n//             link.click(function() {\n//                 self.send(\"loadProject\", $(this).html());\n//             });\n\n//             this.i_element.append(item);\n//         }\n//     }\n\n// });","import Cookies from \"js-cookie\";\nimport { Observable } from \"../util/observe\";\nimport { Mutable } from \"../util/util\";\n\n// Expects the following elements to be present:\n//  lobster-sign-in-button\n\nexport type UserInfo = {\n    id: number;\n    email: string;\n    name: string;\n    is_super: boolean;\n};\n\ntype ProjectEditorMessages =\n    \"userLoggedIn\" |\n    \"userLoggedOut\";\n\nexport class User {\n    \n    public observable = new Observable<ProjectEditorMessages>(this);\n\n    public readonly currentUser?: UserInfo;\n\n    public async checkLogin() {\n        if (Cookies.get(\"bearer\")) {\n            const response = await fetch(\"api/users/me\", {\n                method: 'GET',\n                headers: {\n                    'Authorization': 'bearer ' + Cookies.get('bearer')\n                }\n            });\n\n            if (response.status === 200) {\n                let newUser = await response.json() as UserInfo;\n                if (!this.currentUser || newUser.id !== this.currentUser.id) {\n                    (<Mutable<this>>this).currentUser = newUser;\n                    this.observable.send(\"userLoggedIn\", newUser);\n                }\n            }\n            else {\n                this.logout();\n            }\n        }\n        else {\n            this.logout();\n        }\n    }\n\n    public logout() {\n        Cookies.remove(\"bearer\");\n        if (this.currentUser) {\n            let oldUser = this.currentUser;\n            delete (<Mutable<this>>this).currentUser;\n            this.observable.send(\"userLoggedOut\", oldUser);\n        }\n    }\n\n}\n\n","\nimport { registerLibraryHeader, SourceFile } from \"../core/Program\";\nimport { registerOpaqueExpression, OpaqueExpressionImpl, RuntimeOpaqueExpression, getLocal } from \"../core/opaqueExpression\";\nimport { Int, CompleteClassType, Bool, VoidType } from \"../core/types\";\nimport { getDataPtr } from \"./string\";\nimport { Value } from \"../core/runtimeEnvironment\";\n\n\nregisterLibraryHeader(\"cstdlib\",\n    new SourceFile(\"cstdlib.h\",\n`int rand() {\n    return @rand;\n}\n\nvoid srand(int seed) {\n    @srand;\n}`, true\n    )\n);\n\n\nregisterOpaqueExpression(\"rand\", <OpaqueExpressionImpl<Int, \"prvalue\">>{\n    type: Int.INT,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<Int, \"prvalue\">) => {\n\n        return new Value(rt.sim.rng.randomInteger(0, 1000000), Int.INT);\n        \n    }\n});\n\n\nregisterOpaqueExpression(\"srand\", <OpaqueExpressionImpl<VoidType, \"prvalue\">>{\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n        rt.sim.rng.setRandomSeed(getLocal<Int>(rt, \"seed\").getValue().rawValue);\n    }\n});\n","import { registerLibraryHeader, SourceFile } from \"../core/Program\";\nimport { MemberSubobject, CPPObject } from \"../core/objects\";\nimport { Int, Char, PointerType, BoundedArrayType, CompleteObjectType, ReferenceType, CompleteClassType, ArrayPointerType, Size_t, VoidType, PotentiallyCompleteClassType, Bool, isArrayPointerType, Double } from \"../core/types\";\nimport { runtimeObjectLookup, VariableEntity, LocalVariableEntity, LocalObjectEntity, LocalReferenceEntity } from \"../core/entities\";\nimport { Value } from \"../core/runtimeEnvironment\";\nimport { SimulationEvent } from \"../core/Simulation\";\nimport { registerOpaqueExpression, RuntimeOpaqueExpression, OpaqueExpressionImpl, lookupTypeInContext, getLocal } from \"../core/opaqueExpression\";\nimport { ExpressionContext } from \"../core/constructs\";\nimport { assert } from \"../util/util\";\nimport { Expression, RuntimeExpression } from \"../core/expressionBase\";\nimport { nth } from \"lodash\";\n\n\nfunction extractCharsFromCString(rt: RuntimeExpression, ptrValue: Value<PointerType<Char>>, nToCopy?: Value<Int>) {\n    let sim = rt.sim;\n    let ptrType = ptrValue.type;\n\n    if (PointerType.isNull(ptrValue.rawValue)) {\n        sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"Oops, the char* you're using was null. This results in undefined behavior.\");\n        return {charValues: [], validLength: false};\n    }\n\n    let charValuesToCopy : Value<Char>[] = [];\n    let outOfBounds = false;\n    let seenInvalidChar = false;\n\n    let c = sim.memory.dereference(ptrValue).getValue();\n    // Copy in-bounds characters until null char or limit\n    while ((!nToCopy || nToCopy.rawValue > 0) && ptrType.isValueDereferenceable(ptrValue.rawValue) && !Char.isNullChar(c)) {\n        if (!c.isValid) {\n            seenInvalidChar = true;\n        }\n        charValuesToCopy.push(seenInvalidChar ? c.invalidated() : c);\n        ptrValue = ptrValue.pointerOffset(new Value(1, Int.INT));\n        c = sim.memory.dereference(ptrValue).getValue();\n        nToCopy = nToCopy?.subRaw(1);\n    }\n\n    if (!ptrType.isValueDereferenceable(ptrValue.rawValue)) {\n        // We stopped previously because the pointer was no longer safely dereferenceable, so\n        // now we'll go ahead and let the pointer keep going, but stop it after a while to prevent\n        // an infinite loop.\n        outOfBounds = true;\n        let count = 0;\n        let limit = 100;\n        while (count < limit && !Char.isNullChar(c)) {\n            // invalidate c here since even if was a valid char value, the fact we got this particular\n            // value is a coincidence because we were off the end of an arary in no man's land\n            charValuesToCopy.push(c.invalidated());\n            ptrValue = ptrValue.pointerOffset(new Value(1, Int.INT));\n            c = sim.memory.dereference(ptrValue).getValue();\n            ++count;\n        }\n\n        if (!isArrayPointerType(ptrType)) {\n            if (count === limit) {\n                sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"Oops, that char* wasn't pointing into an array, which means you get undefined behavior with the pointer running off through random memory. I let it go for a while, but stopped it after copying \" + limit + \" junk values.\");\n            }\n            else if (count > 0) {\n                sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"Oops, that char* wasn't pointing into an array, which means you get undefined behavior with the pointer running off through random memory. It looks like it happened to hit a null byte in memory and stopped \" + count + \" characters past the end of the array.\");\n            }\n            else {\n                sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"Oops, that char* wasn't pointing into an array, which means you get undefined behavior with the pointer running off through random memory. Somehow you got lucky and the first random thing it hit was a null byte, which stopped it. Don't count on this.\");\n            }\n        }\n        else {\n            if (count === limit) {\n                sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"I was trying to read from an array through that char*, but it ran off the end of the array before finding a null character! I let it run through memory for a while, but stopped it after copying \" + limit + \" junk values.\");\n            }\n            else if (count > 0) {\n                sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"I was trying to read from an array through that char*, but it ran off the end of the array before finding a null character! It looks like it happened to hit a null byte in memory and stopped \" + count + \" characters past the end of the array.\");\n            }\n            else {\n                sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"I was trying to read from an array through that char*, but it ran off the end of the array before finding a null character! Somehow you got lucky and the first random thing it hit was a null byte, which stopped it. Don't count on this.\");\n            }\n        }\n    }\n    else {\n        if (!isArrayPointerType(ptrType)) {\n            sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"Oops, that char* wasn't pointing into an array, which can lead to undefined behavior.\");\n        }\n    }\n\n    // Use the null char we found or a synthetic (invalid) one for the last thing to copy\n    if (!outOfBounds && Char.isNullChar(c)) {\n        charValuesToCopy.push(c);\n    }\n    else {\n        charValuesToCopy.push(Char.NULL_CHAR.invalidated());\n    }\n\n    return {charValues: charValuesToCopy, validLength: !seenInvalidChar && !outOfBounds && (!nToCopy || nToCopy.isValid)};\n};\n\nfunction copyFromCString(rt: RuntimeExpression, str: CPPObject<CompleteClassType>, charsToCopy: readonly Value<Char>[], validLength: boolean = true) {\n    \n    // If something was uncertain that could have affected the length, invalidate capacity/size\n    getCapacity(str).writeValue(new Value(charsToCopy.length, Int.INT, validLength));\n    getSize(str).writeValue(new Value(charsToCopy.length-1, Int.INT, validLength));\n\n    allocateNewArray(rt, str, charsToCopy.length, charsToCopy);\n}\n\n// var resizeStrang = function(sim: Simulation, rtConstruct: RuntimeConstruct, n, c) {\n//     var rec = ReceiverEntity.instance(this.containingFunction().receiverType).runtimeLookup(sim, inst);\n//     var rawSize = rec.getMemberSubobject(\"_size\").rawValue();\n//     var rawCapacity = rec.getMemberSubobject(\"_capacity\").rawValue();\n\n//     if (!n.isValueValid()) {\n//         rec.invalidate();\n//     }\n\n\n//     var rawN = n.rawValue();\n//     if (rawN == rawSize) {\n//         // right size already, do nothing\n//     }\n//     else if (rawN < rawSize) {\n//         // We want less, so just change size variable\n//     }\n//     else if (rawN < rawCapacity) {\n//         // We want more, and we have enough capacity (for n chars plus null char)\n//         var arrObj = sim.memory.dereference(rec.getMemberSubobject(\"data_ptr\")).arrObj;\n//         for(var i = rawSize; i < rawN; ++i) {\n//             arrObj.getArrayElemSubobject(i).writeValue(c);\n//         }\n\n//         // add null char\n//         arrObj.getArrayElemSubobject(rawN).writeValue(Value.instance(Types.Char.NULL_CHAR, Types.Char.instance()));\n\n//     }\n//     else {\n//         // We want more, but don't have enough capacity. make new array\n//         var arrObj = sim.memory.dereference(rec.getMemberSubobject(\"data_ptr\")).arrObj;\n\n//         var charsToCopy = [];\n//         var i = 0;\n//         for( ; i < rawSize; ++i) {\n//             charsToCopy.push(arrObj.getArrayElemSubobject(i));\n//         }\n//         for( ; i < rawN; ++i) {\n//             charsToCopy.push(c);\n//         }\n\n//         // add a null char\n//         charsToCopy.push(Value.instance(Types.Char.NULL_CHAR, Types.Char.instance()));\n\n//         var rec = ReceiverEntity.instance(this.containingFunction().receiverType).runtimeLookup(sim, inst);\n//         rec.getMemberSubobject(\"_capacity\").writeValue(n.plus(1));\n\n//         // deep copy the array\n//         var arrObj = DynamicObject.instance(Types.Array.instance(Types.Char.instance(), charsToCopy.length));\n//         sim.memory.heap.allocateNewObject(arrObj);\n//         arrObj.writeValue(charsToCopy);\n\n//         // delete old array\n//         deleteHeapArray(sim, inst, rec.getMemberSubobject(\"data_ptr\"));\n\n//         // store pointer to new array\n//         var addr = Value.instance(arrObj.address, Types.ArrayPointer.instance(arrObj));\n//         this.blockScope.requiredLookup(\"data_ptr\").runtimeLookup(sim, inst).writeValue(addr);\n\n\n//     }\n//     // else do nothing since it was the right length to start with\n\n//     // actually update the size\n//     rec.getMemberSubobject(\"_size\").writeValue(n);\n// };\n\n// var replaceStrangArrayWith = function(sim: Simulation, rtConstruct: RuntimeConstruct, contents) {\n\n//     var rec = ReceiverEntity.instance(this.containingFunction().receiverType).runtimeLookup(sim, inst);\n\n//     // delete old array\n//     deleteHeapArray(sim, inst, rec.getMemberSubobject(\"data_ptr\"));\n\n//     // set regular members\n//     rec.getMemberSubobject(\"_capacity\").writeValue(contents.length + 1);\n//     rec.getMemberSubobject(\"_size\").writeValue(contents.length);\n\n//     // make new array for the new contents and null char\n//     var arrObj = DynamicObject.instance(Types.Array.instance(Types.Char.instance(), contents.length + 1));\n//     sim.memory.heap.allocateNewObject(arrObj);\n//     arrObj.writeValue(contents.concat([Value.instance(Types.Char.NULL_CHAR, Types.Char.instance())]));\n\n//     // store pointer to new array\n//     var addr = Value.instance(arrObj.address, Types.ArrayPointer.instance(arrObj));\n//     rec.getMemberSubobject(\"data_ptr\").writeValue(addr);\n\n// };\n\nconst initialStrangCapacity = 8;\n\nregisterLibraryHeader(\"string\",\n    new SourceFile(\"string.h\",\n`class string {\nprivate:\n    size_t _size;\n    size_t _capacity;\n    char * data_ptr;\npublic:\n    string() {\n        @string::string_default;\n    }\n\n    string(const string &other) {\n        @string::string_copy;\n    }\n\n    // string(const string &other, size_t pos, size_t len) {\n    //     @string::string_substring_1;\n    // }\n\n    // string(const string &other, size_t pos) {\n    //     @string::string_substring_2;\n    // }\n\n    string(const char *cstr) {\n        @string::string_cstring;\n    }\n\n    string(const char *cstr, size_t n) {\n        @string::string_cstring_n;\n    }\n\n    string(size_t n, char c) {\n        @string::string_fill;\n    }\n\n    // ~string() {\n    //     @string::~string;\n    // }\n\n    string &operator=(const string &rhs) {\n        return @string::operator=_string;\n    }\n\n    string &operator=(const char *cstr) {\n        return @string::operator=_cstring;\n    }\n\n    string &operator=(char c) {\n        return @string::operator=_char;\n    }\n\n    string &operator+=(const string &rhs) {\n        return @string::operator+=_string;\n    }\n\n    string &operator+=(const char *cstr) {\n        return @string::operator+=_cstring;\n    }\n\n    string &operator+=(char c) {\n        return @string::operator+=_char;\n    }\n\n    // void begin() @library_unsupported;\n    // void end() @library_unsupported;\n    // void rbegin() @library_unsupported;\n    // void rend() @library_unsupported;\n    // void cbegin() const @library_unsupported;\n    // void cend() const @library_unsupported;\n    // void crbegin() const @library_unsupported;\n    // void crend() const @library_unsupported;\n\n    size_t size() const {\n        return @string::size;\n    }\n\n    size_t length() const {\n        return @string::length;\n    }\n    \n    // size_t max_size() const @library_unsupported;\n\n    // void resize(size_t n, char c) {\n    //     @string::resize_1;\n    // }\n\n    // void resize(size_t n) {\n    //     @string::resize_2;\n    // }\n\n    size_t capacity() const {\n        return @string::capacity;\n    }\n\n    // void reserve() @library_unsupported;\n    // void reserve(size_t n) @library_unsupported;\n\n    void clear() {\n        @string::clear;\n    }\n\n    bool empty() const {\n        return @string::empty;\n    }\n\n    // void shrink_to_fit() @library_unsupported;\n\n    char &operator[](size_t pos) {\n        return @string::operator[];\n    }\n\n    const char &operator[](size_t pos) const {\n        return @string::operator[]_const;\n    }\n\n    char &at(size_t pos) {\n        return @string::at;\n    }\n\n    const char &at(size_t pos) const {\n        return @string::at_const;\n    }\n\n    char &front(size_t pos) {\n        return @string::front;\n    }\n\n    const char &front(size_t pos) const {\n        return @string::front_const;\n    }\n};\n\nstring operator+(const string &left, const string &right) {\n    @operator+_string_string;\n}\n\nstring operator+(const string &str, const char *cstr) {\n    @operator+_string_cstring;\n}\n\nstring operator+(const char *cstr, const string &str) {\n    @operator+_cstring_string;\n}\n\nstring operator+(const string &str, char c) {\n    @operator+_string_char;\n}\n\nstring operator+(char c, const string &str) {\n    @operator+_char_string;\n}\n\nbool operator==(const string &left, const string &right) {\n    return @operator==_string_string;\n}\n\nbool operator!=(const string &left, const string &right) {\n    return @operator!=_string_string;\n}\n\nbool operator<(const string &left, const string &right) {\n    return @operator<_string_string;\n}\n\nbool operator<=(const string &left, const string &right) {\n    return @operator<=_string_string;\n}\n\nbool operator>(const string &left, const string &right) {\n    return @operator>_string_string;\n}\n\nbool operator>=(const string &left, const string &right) {\n    return @operator>=_string_string;\n}\n\nbool operator==(const string &left, const char *right) {\n    return @operator==_string_cstring;\n}\n\nbool operator!=(const string &left, const char *right) {\n    return @operator!=_string_cstring;\n}\n\nbool operator<(const string &left, const char *right) {\n    return @operator<_string_cstring;\n}\n\nbool operator<=(const string &left, const char *right) {\n    return @operator<=_string_cstring;\n}\n\nbool operator>(const string &left, const char *right) {\n    return @operator>_string_cstring;\n}\n\nbool operator>=(const string &left, const char *right) {\n    return @operator>=_string_cstring;\n}\n\nbool operator==(const char *left, const string &right) {\n    return @operator==_cstring_string;\n}\n\nbool operator!=(const char *left, const string &right) {\n    return @operator!=_cstring_string;\n}\n\nbool operator<(const char *left, const string &right) {\n    return @operator<_cstring_string;\n}\n\nbool operator<=(const char *left, const string &right) {\n    return @operator<=_cstring_string;\n}\n\nbool operator>(const char *left, const string &right) {\n    return @operator>_cstring_string;\n}\n\nbool operator>=(const char *left, const string &right) {\n    return @operator>=_cstring_string;\n}\n\nostream &operator<<(ostream &os, const string &str) {\n    return @operator<<_ostream_string;\n}\n\nistream &operator>>(istream &is, string &str) {\n    return @operator>>_istream_string;\n}\n\nistream &getline(istream &is, string &str) {\n    return @getline_istream_string;\n}\n\nint stoi(const string &str) {\n    return @stoi;\n}\n\nint stol(const string &str) {\n    return @stoi;\n}\n\nint stod(const string &str) {\n    return @stod;\n}\n\nint stof(const string &str) {\n    return @stod;\n}`, true\n    )\n);\n\nfunction getCapacity(obj: CPPObject<CompleteClassType>) {\n    return <MemberSubobject<Int>>obj.getMemberObject(\"_capacity\");\n}\n\nfunction getSize(obj: CPPObject<CompleteClassType>) {\n    return <MemberSubobject<Int>>obj.getMemberObject(\"_size\");\n}\n\nexport function getDataPtr(obj: CPPObject<CompleteClassType>) {\n    return <MemberSubobject<PointerType<Char>>>obj.getMemberObject(\"data_ptr\");\n}\n\nfunction extractStringValue(rt: RuntimeExpression, cstr: Value<PointerType<Char>>) {\n    return extractCharsFromCString(rt, cstr).charValues.map(c => String.fromCharCode(c.rawValue)).join(\"\");\n}\n\nregisterOpaqueExpression(\"string::string_default\", {\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression) => {\n        getCapacity(rt.contextualReceiver).writeValue(new Value(initialStrangCapacity, Int.INT));\n        getSize(rt.contextualReceiver).writeValue(new Value(0, Int.INT));\n\n        allocateNewArray(rt, rt.contextualReceiver, initialStrangCapacity, [Char.NULL_CHAR])\n        // let obj = rt.sim.memory.heap.allocateNewObject(new BoundedArrayType(Char.CHAR, initialStrangCapacity));\n    }\n});\n\nregisterOpaqueExpression(\"string::string_copy\", {\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression) => {\n\n        let rec = rt.contextualReceiver;\n        let other = getLocal<CompleteClassType>(rt, \"other\");\n\n        let {charValues, validLength} = extractCharsFromCString(rt, getDataPtr(other).getValue());\n        copyFromCString(rt, rec, charValues, validLength);\n    }\n});\n\n// Substring ctor (with 3rd argument provided)\n// registerOpaqueExpression(\"string::string_substring_1\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n\n//         let rec = rt.contextualReceiver;\n//         let other = getLocal<CompleteClassType>(rt, \"other\");\n//         let pos = getLocal<Int>(rt, \"pos\").getValue();\n        \n//         let availableChars = getSize(other).getValue().sub(pos);\n\n//         if (availableChars.rawValue < 0) {\n//             rt.sim.eventOccurred(SimulationEvent.CRASH, \"The start position you requested in this string constructor is greater than the length of the other string.\");\n//         }\n//         else {\n//             let len = getLocal<Int>(rt, \"len\").getValue();\n//             let newSize = len.combine(availableChars, (a,b) => Math.min(a,b));\n//             let newCapacity = newSize.addRaw(1);\n            \n//             let newChars = extractCharsFromCString(rt, getDataPtr(other).getValue()).charValues.slice(pos.rawValue, pos.rawValue + newSize.rawValue);\n            \n//             // copy regular members\n//             getCapacity(rec).writeValue(newCapacity);\n//             getSize(rec).writeValue(newSize);\n\n//             // deep copy the array\n//             newChars.push(Char.NULL_CHAR);\n//             allocateNewArray(rt, rec, newCapacity.rawValue, newChars);\n//         }\n\n//     }\n// });\n\n// // Substring ctor (without 3rd argument, so use default)\n// registerOpaqueExpression(\"string::string_substring_2\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n//         let rec = rt.contextualReceiver;\n//         let other = getLocal<CompleteClassType>(rt, \"other\");\n//         let pos = getLocal<Int>(rt, \"pos\").getValue();\n        \n//         let availableChars = getSize(other).getValue().sub(pos);\n\n//         if (availableChars.rawValue < 0) {\n//             rt.sim.eventOccurred(SimulationEvent.CRASH, \"The start position you requested in this string constructor is greater than the length of the other string.\");\n//         }\n//         else {\n//             let newSize = availableChars;\n//             let newCapacity = newSize.addRaw(1);\n            \n//             // copy regular members\n//             getCapacity(rec).writeValue(newCapacity);\n//             getSize(rec).writeValue(newSize);\n\n//             // deep copy the array\n//             let newChars = extractCharsFromCString(rt, getDataPtr(other).getValue()).charValues.slice(pos.rawValue, pos.rawValue + newSize.rawValue);\n//             newChars.push(Char.NULL_CHAR);\n//             allocateNewArray(rt, rec, newCapacity.rawValue, newChars);\n//         }\n\n//     }\n// });\n\nregisterOpaqueExpression(\"string::string_cstring\", {\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression) => {\n        let {charValues, validLength} = extractCharsFromCString(rt, getLocal<PointerType<Char>>(rt, \"cstr\").getValue());\n        copyFromCString(rt, rt.contextualReceiver, charValues, validLength);\n\n        \n    }\n});\n\nregisterOpaqueExpression(\"string::string_cstring_n\", {\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression) => {\n        let {charValues, validLength} = extractCharsFromCString(rt, getLocal<PointerType<Char>>(rt, \"cstr\").getValue(), getLocal<Int>(rt, \"n\").getValue());\n        copyFromCString(rt, rt.contextualReceiver, charValues, validLength);\n    }\n});\n\n// fill constructor from char\nregisterOpaqueExpression(\"string::string_fill\", {\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression) => {\n\n        let rec = rt.contextualReceiver;\n        let numChars = getLocal<Int>(rt, \"n\").getValue();\n        let char = getLocal<Char>(rt, \"c\").getValue();\n\n        getSize(rec).writeValue(numChars);\n        getCapacity(rec).writeValue(numChars.addRaw(1));\n\n        // allocate array\n        let arrElems = allocateNewArray(rt, rec, numChars.rawValue + 1, []);\n\n        // fill array\n        arrElems.forEach((arrElem, i) => arrElem.writeValue(char));\n\n    }\n});\n\nregisterOpaqueExpression(\"string::~string\", {\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression) => {\n        rt.sim.memory.heap.deleteObject(getDataPtr(rt.contextualReceiver).getValue().rawValue);\n    }\n});\n\nregisterOpaqueExpression(\"string::size\", <OpaqueExpressionImpl<Int, \"lvalue\">> {\n    type: Int.INT,\n    valueCategory: \"lvalue\",\n    operate: (rt: RuntimeOpaqueExpression<Int, \"lvalue\">) => {\n        return getSize(rt.contextualReceiver);\n    }\n});\n\nregisterOpaqueExpression(\"string::length\", <OpaqueExpressionImpl<Int, \"lvalue\">> {\n    type: Int.INT,\n    valueCategory: \"lvalue\",\n    operate: (rt: RuntimeOpaqueExpression<Int, \"lvalue\">) => {\n        return getSize(rt.contextualReceiver);\n    }\n});\n\n// registerOpaqueExpression(\"string::resize_1\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n\n//     }\n// });\n\n// registerOpaqueExpression(\"string::resize_2\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n\n//     }\n// });\n\nregisterOpaqueExpression(\"string::capacity\", <OpaqueExpressionImpl<Int, \"lvalue\">> {\n    type: Int.INT,\n    valueCategory: \"lvalue\",\n    operate: (rt: RuntimeOpaqueExpression<Int, \"lvalue\">) => {\n        return getCapacity(rt.contextualReceiver);\n    }\n});\n\nregisterOpaqueExpression(\"string::clear\", {\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression) => {\n        let rec = rt.contextualReceiver;\n        let firstElem = rt.sim.memory.dereference(getDataPtr(rec).getValue());\n        firstElem.writeValue(Char.NULL_CHAR);\n        getSize(rec).writeValue(new Value(0, Int.INT));\n    }\n});\n\nregisterOpaqueExpression(\"string::empty\", <OpaqueExpressionImpl<Bool, \"prvalue\">>{\n    type: Bool.BOOL,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<Bool, \"prvalue\">) => {\n        return getSize(rt.contextualReceiver).getValue().equals(Int.ZERO);\n    }\n});\n\n// registerOpaqueExpression(\"string::operator[]\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n\n//     }\n// });\n\n// registerOpaqueExpression(\"string::operator[]_const\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n\n//     }\n// });\n\nregisterOpaqueExpression(\n    \"string::operator[]\",\n    <OpaqueExpressionImpl<Char, \"lvalue\">> {\n        type: Char.CHAR,\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<Char, \"lvalue\">) => {\n            let ptr = getDataPtr(rt.contextualReceiver).getValue();\n            let pos = getLocal<Int>(rt, \"pos\").getValue();\n            ptr = ptr.pointerOffset(pos);\n\n            if (!ptr.isValid) {\n                rt.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n            }\n\n            return rt.sim.memory.dereference(ptr);\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"string::operator[]_const\",\n    <OpaqueExpressionImpl<Char, \"lvalue\">> {\n        type: new Char(true),\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<Char, \"lvalue\">) => {\n            let ptr = getDataPtr(rt.contextualReceiver).getValue();\n            let pos = getLocal<Int>(rt, \"pos\").getValue();\n            ptr = ptr.pointerOffset(pos);\n\n            if (!ptr.isValid) {\n                rt.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n            }\n\n            return rt.sim.memory.dereference(ptr);\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"string::at\",\n    <OpaqueExpressionImpl<Char, \"lvalue\">> {\n        type: Char.CHAR,\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<Char, \"lvalue\">) => {\n            let ptr = getDataPtr(rt.contextualReceiver).getValue();\n            let pos = getLocal<Int>(rt, \"pos\").getValue();\n            ptr = ptr.pointerOffset(pos);\n\n            if (!ptr.isValid) {\n                rt.sim.eventOccurred(SimulationEvent.CRASH, \"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n            }\n\n            return rt.sim.memory.dereference(ptr);\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"string::at_const\",\n    <OpaqueExpressionImpl<Char, \"lvalue\">> {\n        type: new Char(true),\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<Char, \"lvalue\">) => {\n            let ptr = getDataPtr(rt.contextualReceiver).getValue();\n            let pos = getLocal<Int>(rt, \"pos\").getValue();\n            ptr = ptr.pointerOffset(pos);\n\n            if (!ptr.isValid) {\n                rt.sim.eventOccurred(SimulationEvent.CRASH, \"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n            }\n\n            return rt.sim.memory.dereference(ptr);\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"string::front\",\n    <OpaqueExpressionImpl<Char, \"lvalue\">> {\n        type: Char.CHAR,\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<Char, \"lvalue\">) => {\n            return rt.sim.memory.dereference(getDataPtr(rt.contextualReceiver).getValue());\n    }\n});\n\nregisterOpaqueExpression(\n    \"string::front_const\",\n    <OpaqueExpressionImpl<Char, \"lvalue\">> {\n        type: new Char(true),\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<Char, \"lvalue\">) => {\n            return rt.sim.memory.dereference(getDataPtr(rt.contextualReceiver).getValue());\n    }\n});\n\n\n\n\nfunction addFromCStrings(rt: RuntimeExpression, result: CPPObject<CompleteClassType>, left: Value<PointerType<Char>>, right: Value<PointerType<Char>>, deleteOld: boolean = false) {\n    let {charValues: leftChars, validLength: leftValidLength} = extractCharsFromCString(rt, left);\n    leftChars.pop(); // remove null char that would otherwise be in the middle of left + right\n    let {charValues: rightChars, validLength: rightValidLength} = extractCharsFromCString(rt, right);\n\n    let newChars = leftChars.concat(rightChars);\n\n    let newCapacity = new Value(newChars.length, Int.INT, leftValidLength && rightValidLength);\n    let newSize = newCapacity.subRaw(1);\n\n    getCapacity(result).writeValue(newCapacity);\n    getSize(result).writeValue(newSize);\n\n    if (deleteOld) {\n        rt.sim.memory.heap.deleteObject(getDataPtr(result).getValue().rawValue);\n    }\n    // allocate new array with enough space\n    allocateNewArray(rt, result, newCapacity.rawValue, newChars);\n}\n\nregisterOpaqueExpression(\n    \"operator+_string_string\",\n    <OpaqueExpressionImpl<VoidType, \"prvalue\">> {\n        type: VoidType.VOID,\n        valueCategory: \"prvalue\",\n        operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n            let returnObject = <CPPObject<CompleteClassType>>rt.containingRuntimeFunction.returnObject;\n            assert(returnObject, \"String + operator lacking return-by-value object\");\n\n            addFromCStrings(rt, returnObject,\n                            getDataPtr(getLocal<CompleteClassType>(rt, \"left\")).getValue(),\n                            getDataPtr(getLocal<CompleteClassType>(rt, \"right\")).getValue());\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator+_string_cstring\",\n    <OpaqueExpressionImpl<VoidType, \"prvalue\">> {\n        type: VoidType.VOID,\n        valueCategory: \"prvalue\",\n        operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n            let returnObject = <CPPObject<CompleteClassType>>rt.containingRuntimeFunction.returnObject;\n            assert(returnObject, \"String + operator lacking return-by-value object\");\n\n            addFromCStrings(rt, returnObject,\n                            getDataPtr(getLocal<CompleteClassType>(rt, \"str\")).getValue(),\n                            getLocal<PointerType<Char>>(rt, \"cstr\").getValue());\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator+_cstring_string\",\n    <OpaqueExpressionImpl<VoidType, \"prvalue\">> {\n        type: VoidType.VOID,\n        valueCategory: \"prvalue\",\n        operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n            let returnObject = <CPPObject<CompleteClassType>>rt.containingRuntimeFunction.returnObject;\n            assert(returnObject, \"String + operator lacking return-by-value object\");\n\n            addFromCStrings(rt, returnObject,\n                            getLocal<PointerType<Char>>(rt, \"cstr\").getValue(),\n                            getDataPtr(getLocal<CompleteClassType>(rt, \"str\")).getValue());\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator+_string_char\",\n    <OpaqueExpressionImpl<VoidType, \"prvalue\">> {\n        type: VoidType.VOID,\n        valueCategory: \"prvalue\",\n        operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n            let returnObject = <CPPObject<CompleteClassType>>rt.containingRuntimeFunction.returnObject;\n            assert(returnObject, \"String + operator lacking return-by-value object\");\n\n            let left = getLocal<CompleteClassType>(rt, \"str\");\n            let right = getLocal<Char>(rt, \"c\");\n\n                            \n            let {charValues: leftChars, validLength: leftValidLength} = extractCharsFromCString(rt, getDataPtr(left).getValue());\n            leftChars.pop(); // remove null char that would otherwise be in the middle of left + right\n            leftChars.push(right.getValue());\n            leftChars.push(Char.NULL_CHAR); // add back on null char\n\n            let newCapacity = new Value(leftChars.length, Int.INT, leftValidLength);\n            let newSize = newCapacity.subRaw(1);\n\n            getCapacity(returnObject).writeValue(newCapacity);\n            getSize(returnObject).writeValue(newSize);\n\n            // allocate new array with enough space\n            allocateNewArray(rt, returnObject, newCapacity.rawValue, leftChars);\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator+_char_string\",\n    <OpaqueExpressionImpl<VoidType, \"prvalue\">> {\n        type: VoidType.VOID,\n        valueCategory: \"prvalue\",\n        operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n            let returnObject = <CPPObject<CompleteClassType>>rt.containingRuntimeFunction.returnObject;\n            assert(returnObject, \"String + operator lacking return-by-value object\");\n\n            let left = getLocal<Char>(rt, \"c\");\n            let right = getLocal<CompleteClassType>(rt, \"str\");\n\n                            \n            let {charValues: rightChars, validLength: rightValidLength} = extractCharsFromCString(rt, getDataPtr(right).getValue());\n            rightChars.unshift(left.getValue())\n\n            let newCapacity = new Value(rightChars.length, Int.INT, rightValidLength);\n            let newSize = newCapacity.subRaw(1);\n\n            getCapacity(returnObject).writeValue(newCapacity);\n            getSize(returnObject).writeValue(newSize);\n\n            // allocate new array with enough space\n            allocateNewArray(rt, returnObject, newCapacity.rawValue, rightChars);\n        }\n    }\n);\n\nfunction compareStrings(compare: (left: string, right: string) => boolean) {\n    return (rt: RuntimeOpaqueExpression<Bool, \"prvalue\">) => {\n        let left = getLocal<CompleteClassType>(rt, \"left\");\n        let right = getLocal<CompleteClassType>(rt, \"right\");\n\n        // TODO: this doesn't preserve runtime type validity information\n        return new Value(compare(extractStringValue(rt, getDataPtr(left).getValue()), extractStringValue(rt, getDataPtr(right).getValue())) ? 1 : 0, Bool.BOOL);\n    };\n}\n\nfunction compareStringCstring(compare: (left: string, right: string) => boolean) {\n    return (rt: RuntimeOpaqueExpression<Bool, \"prvalue\">) => {\n        let left = getLocal<CompleteClassType>(rt, \"left\");\n        let right = getLocal<PointerType<Char>>(rt, \"right\");\n\n        // TODO: this doesn't preserve runtime type validity information\n        return new Value(compare(extractStringValue(rt, getDataPtr(left).getValue()), extractStringValue(rt, right.getValue())) ? 1 : 0, Bool.BOOL);\n    };\n}\n\nfunction compareCstringString(compare: (left: string, right: string) => boolean) {\n    return (rt: RuntimeOpaqueExpression<Bool, \"prvalue\">) => {\n        let left = getLocal<PointerType<Char>>(rt, \"left\");\n        let right = getLocal<CompleteClassType>(rt, \"right\");\n\n        // TODO: this doesn't preserve runtime type validity information\n        return new Value(compare(extractStringValue(rt, left.getValue()), extractStringValue(rt, getDataPtr(right).getValue())) ? 1 : 0, Bool.BOOL);\n    };\n}\n\nregisterOpaqueExpression(\n    \"operator==_string_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStrings((left, right) => left === right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator!=_string_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStrings((left, right) => left !== right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator<_string_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStrings((left, right) => left < right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator<=_string_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStrings((left, right) => left <= right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator>_string_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStrings((left, right) => left > right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator>=_string_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStrings((left, right) => left >= right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator==_string_cstring\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStringCstring((left, right) => left === right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator!=_string_cstring\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStringCstring((left, right) => left !== right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator<_string_cstring\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStringCstring((left, right) => left < right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator<=_string_cstring\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStringCstring((left, right) => left <= right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator>_string_cstring\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStringCstring((left, right) => left > right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator>=_string_cstring\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareStringCstring((left, right) => left >= right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator==_cstring_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareCstringString((left, right) => left === right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator!=_cstring_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareCstringString((left, right) => left !== right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator<_cstring_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareCstringString((left, right) => left < right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator<=_cstring_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareCstringString((left, right) => left <= right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator>_cstring_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareCstringString((left, right) => left > right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator>=_cstring_string\",\n    <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n        type: Bool.BOOL,\n        valueCategory: \"prvalue\",\n        operate: compareCstringString((left, right) => left >= right)\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator<<_ostream_string\",\n    <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n        type: lookupTypeInContext(\"ostream\"),\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n            rt.sim.cout(getDataPtr(getLocal<CompleteClassType>(rt, \"str\")).getValue());\n            return getLocal<CompleteClassType>(rt, \"os\");\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"operator>>_istream_string\",\n    <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n        type: lookupTypeInContext(\"istream\"),\n        valueCategory: \"lvalue\",\n        upNext: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n            if (rt.sim.cin.buffer.length === 0) {\n                rt.sim.blockUntilCin();\n            }\n        },\n        operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n            rt.sim.cin.skipws();\n            let chars = Char.jsStringToNullTerminatedCharArray(rt.sim.cin.extractWordFromBuffer());\n\n            let str = getLocal<CompleteClassType>(rt, \"str\");\n\n            rt.sim.memory.heap.deleteObject(getDataPtr(str).getValue().rawValue);\n            copyFromCString(rt, str, chars)\n            return getLocal<CompleteClassType>(rt, \"is\");\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"getline_istream_string\",\n    <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n        type: lookupTypeInContext(\"istream\"),\n        valueCategory: \"lvalue\",\n        upNext: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n            if (rt.sim.cin.buffer.length === 0) {\n                rt.sim.blockUntilCin();\n            }\n        },\n        operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n\n            let chars = Char.jsStringToNullTerminatedCharArray(rt.sim.cin.extractLineFromBuffer());\n\n            let str = getLocal<CompleteClassType>(rt, \"str\");\n\n            rt.sim.memory.heap.deleteObject(getDataPtr(str).getValue().rawValue);\n            copyFromCString(rt, str, chars)\n            return getLocal<CompleteClassType>(rt, \"is\");\n        }\n    }\n);\n\n\nregisterOpaqueExpression(\n    \"string::operator=_string\",\n    <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n        type: lookupTypeInContext(\"string\"),\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n            let rec = rt.contextualReceiver;\n            let rhs = getLocal<CompleteClassType>(rt, \"rhs\");\n            \n            // do nothing if self assignment\n            if (rec.address === rhs.address) {\n                return rec;\n            }\n\n            rt.sim.memory.heap.deleteObject(getDataPtr(rec).getValue().rawValue);\n            let {charValues, validLength} = extractCharsFromCString(rt, getDataPtr(rhs).getValue());\n            copyFromCString(rt, rec, charValues, validLength);\n            return rec;\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"string::operator=_cstring\",\n    <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n        type: lookupTypeInContext(\"string\"),\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n            let rec = rt.contextualReceiver;\n            let cstr = getLocal<PointerType<Char>>(rt, \"cstr\");\n\n            let oldArrAddr = getDataPtr(rec).getValue().rawValue;\n            \n            let {charValues, validLength} = extractCharsFromCString(rt, cstr.getValue());\n            copyFromCString(rt, rt.contextualReceiver, charValues, validLength);\n\n            rt.sim.memory.heap.deleteObject(oldArrAddr);\n\n            return rt.contextualReceiver;\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"string::operator=_char\",\n    <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n        type: lookupTypeInContext(\"string\"),\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n            let rec = rt.contextualReceiver;\n            let c = getLocal<Char>(rt, \"c\");\n            \n            rt.sim.memory.heap.deleteObject(getDataPtr(rec).getValue().rawValue);\n            copyFromCString(rt, rt.contextualReceiver, [c.getValue(), Char.NULL_CHAR]);\n            return rt.contextualReceiver;\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"string::operator+=_string\",\n    <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n        type: lookupTypeInContext(\"string\"),\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n            addFromCStrings(rt, rt.contextualReceiver,\n                getDataPtr(rt.contextualReceiver).getValue(),\n                getDataPtr(getLocal<CompleteClassType>(rt, \"rhs\")).getValue(), true);\n            return rt.contextualReceiver;\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"string::operator+=_cstring\",\n    <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n        type: lookupTypeInContext(\"string\"),\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n            addFromCStrings(rt, rt.contextualReceiver,\n                getDataPtr(rt.contextualReceiver).getValue(),\n                getLocal<PointerType<Char>>(rt, \"cstr\").getValue(), true);\n            return rt.contextualReceiver;\n        }\n    }\n);\n\nregisterOpaqueExpression(\n    \"string::operator+=_char\",\n    <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n        type: lookupTypeInContext(\"string\"),\n        valueCategory: \"lvalue\",\n        operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n            let rec = rt.contextualReceiver;\n            let c = getLocal<Char>(rt, \"c\");\n            \n            let orig = extractCharsFromCString(rt, getDataPtr(rt.contextualReceiver).getValue());\n            rt.sim.memory.heap.deleteObject(getDataPtr(rec).getValue().rawValue);\n            copyFromCString(rt, rt.contextualReceiver, [...orig.charValues, c.getValue(), Char.NULL_CHAR], orig.validLength);\n            return rt.contextualReceiver;\n        }\n    }\n);\n\n\n\nregisterOpaqueExpression(\n    \"stoi\",\n    <OpaqueExpressionImpl<Int, \"prvalue\">> {\n        type: Int.INT,\n        valueCategory: \"prvalue\",\n        operate: (rt: RuntimeOpaqueExpression<Int, \"prvalue\">) => {\n            let str = extractStringValue(rt, getDataPtr(getLocal<CompleteClassType>(rt, \"str\")).getValue());\n            let val = parseInt(str);\n            if (!Number.isNaN(val)) {\n                return new Value(val, Int.INT);\n            }\n            else {\n                return new Value(Math.floor(Math.random()*100), Int.INT, false);\n            }\n        }\n    }\n);\n\n\nregisterOpaqueExpression(\n    \"stod\",\n    <OpaqueExpressionImpl<Double, \"prvalue\">> {\n        type: Double.DOUBLE,\n        valueCategory: \"prvalue\",\n        operate: (rt: RuntimeOpaqueExpression<Double, \"prvalue\">) => {\n            let str = extractStringValue(rt, getDataPtr(getLocal<CompleteClassType>(rt, \"str\")).getValue());\n            let val = parseFloat(str);\n            if (!Number.isNaN(val)) {\n                return new Value(val, Double.DOUBLE);\n            }\n            else {\n                return new Value(Math.floor(Math.random()*100), Double.DOUBLE, false);\n            }\n        }\n    }\n);\n\n\n\n\nfunction allocateNewArray(rt: RuntimeExpression, rec: CPPObject<CompleteClassType>, newCapacity: number, values: readonly Value<Char>[]) {\n    let arrObj = rt.sim.memory.heap.allocateNewObject(new BoundedArrayType(Char.CHAR, newCapacity));\n    let arrElems = arrObj.getArrayElemSubobjects();\n\n    values.forEach((val, i) => arrElems[i].writeValue(val));\n\n    // store pointer to new array\n    getDataPtr(rec).writeValue(arrElems[0].getPointerTo());\n    return arrElems;\n}\n// var strangAst = {\n//     construct_type : \"class_declaration\",\n//     library_id : \"strang\",\n//     head : {\n//         bases : null,\n//         key : \"class\",\n//         name : {\n//             identifier : \"strang\"\n//         }\n//     },\n//     member_specs : [\n//         {\n//             access : \"public\",\n//             members : [\n\n\n//                 // fill ctor\n//                 {\n//                     construct_type : \"constructor_definition\",\n//                     args : Lobster.cPlusPlusParser.parse(\"size_t n, char c\", {startRule : \"argument_declaration_list\"}),\n//                     initializer : null,\n//                     name : { identifier : \"strang\"},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var n = this.blockScope.requiredLookup(\"n\").runtimeLookup(sim, inst).getValue();\n//                             var c = this.blockScope.requiredLookup(\"c\").runtimeLookup(sim, inst).getValue();\n\n//                             var charValuesToCopy = [];\n//                             var rawN = n.rawValue();\n//                             for(var i = 0; i < rawN; ++i) {\n//                                 charValuesToCopy.push(c);\n//                             }\n\n//                             // add a null char\n//                             charValuesToCopy.push(Value.instance(Types.Char.NULL_CHAR, Types.Char.instance()));\n\n//                             var rec = ReceiverEntity.instance(this.containingFunction().receiverType).runtimeLookup(sim, inst);\n//                             rec.getMemberSubobject(\"_capacity\").writeValue(n.plus(1));\n//                             rec.getMemberSubobject(\"_size\").writeValue(n);\n\n//                             // deep copy the array\n//                             var arrObj = DynamicObject.instance(Types.Array.instance(Types.Char.instance(), charValuesToCopy.length));\n//                             sim.memory.heap.allocateNewObject(arrObj);\n//                             arrObj.writeValue(charValuesToCopy);\n\n//                             // store pointer to new array\n//                             var addr = Value.instance(arrObj.address, Types.ArrayPointer.instance(arrObj));\n//                             this.blockScope.requiredLookup(\"data_ptr\").runtimeLookup(sim, inst).writeValue(addr);\n//                         }\n//                     }, null)\n//                 },\n\n//                 // destructor\n//                 {\n//                     construct_type : \"destructor_definition\",\n//                     name : {identifier: \"~strang\"},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var rec = ReceiverEntity.instance(this.containingFunction().receiverType).runtimeLookup(sim, inst);\n//                             deleteHeapArray(sim, inst, rec.getMemberSubobject(\"data_ptr\"));\n//                         }\n//                     }, null)\n//                 },\n\n//                 // Copy assignment operator\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"&operator=(const strang &rhs)\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"strang\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var rec = ReceiverEntity.instance(this.containingFunction().receiverType).runtimeLookup(sim, inst);\n//                             var rhs = this.blockScope.requiredLookup(\"rhs\").runtimeLookup(sim, inst);\n\n//                             // check for self-assignment, where we just do nothing\n//                             if (rec.address == rhs.address) {\n//                                 var retType = this.containingFunction().type.returnType;\n//                                 var re = ReturnEntity.instance(retType);\n//                                 re.runtimeLookup(sim, inst).bindTo(rec);\n//                                 return;\n//                             }\n\n//                             // delete old array\n//                             deleteHeapArray(sim, inst, rec.getMemberSubobject(\"data_ptr\"));\n\n//                             var newSize = rhs.getMemberSubobject(\"_size\").getValue();\n//                             var newCapacity = newSize.plus(1);\n\n//                             // copy regular members\n//                             rec.getMemberSubobject(\"_capacity\").writeValue(newCapacity);\n//                             rec.getMemberSubobject(\"_size\").writeValue(newSize);\n\n//                             // deep copy the array\n//                             var arrObj = DynamicObject.instance(Types.Array.instance(Types.Char.instance(), newCapacity));\n//                             sim.memory.heap.allocateNewObject(arrObj);\n//                             var otherArrValue = rhs.getMemberSubobject(\"data_ptr\").type.arrObj.getValue();\n//                             otherArrValue.setRawValue(otherArrValue.rawValue().slice(0, newCapacity));\n//                             arrObj.writeValue(otherArrValue);\n\n//                             // store pointer to new array\n//                             var addr = Value.instance(arrObj.address, Types.ArrayPointer.instance(arrObj));\n//                             this.blockScope.requiredLookup(\"data_ptr\").runtimeLookup(sim, inst).writeValue(addr);\n\n//                             var re = ReturnEntity.instance(this.containingFunction().type.returnType);\n//                             re.runtimeLookup(sim, inst).bindTo(rec);\n//                         }\n//                     }, null)\n//                 },\n\n//                 // cstring assignment operator\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"&operator=(const char *cstr)\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"strang\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n\n//                             var rec = ReceiverEntity.instance(this.containingFunction().receiverType).runtimeLookup(sim, inst);\n\n//                             // delete old array\n//                             deleteHeapArray(sim, inst, rec.getMemberSubobject(\"data_ptr\"));\n\n//                             var ptrValue = this.blockScope.requiredLookup(\"cstr\").runtimeLookup(sim, inst).getValue();\n//                             copyFromCString.call(this, sim, inst, ptrValue);\n\n//                             var re = ReturnEntity.instance(this.containingFunction().type.returnType);\n//                             re.runtimeLookup(sim, inst).bindTo(rec);\n//                         }\n//                     }, null)\n//                 },\n\n//                 // single char assignment operator\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"&operator=(char c)\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"strang\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n\n//                             replaceStrangArrayWith.call(this, sim, inst, [this.blockScope.requiredLookup(\"c\").runtimeLookup(sim, inst).getValue()]);\n\n//                             var rec = ReceiverEntity.instance(this.containingFunction().receiverType).runtimeLookup(sim, inst);\n//                             var re = ReturnEntity.instance(this.containingFunction().type.returnType);\n//                             re.runtimeLookup(sim, inst).bindTo(rec);\n//                         }\n//                     }, null)\n//                 },\n\n//                 // Iterator functions - unsupported\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void begin();\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void end();\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void rbegin();\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void rend();\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void cbegin() const;\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void cend() const;\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void crbegin() const;\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void crend() const;\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n\n//                 // function size()\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"size() const\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"size_t\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var size = this.blockScope.requiredLookup(\"_size\").runtimeLookup(sim, inst);\n//                             var returnObject = this.containingFunction().getReturnObject(sim, inst.containingRuntimeFunction());\n//                             returnObject.writeValue(size);\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function length()\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"length() const\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"size_t\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var size = this.blockScope.requiredLookup(\"_size\").runtimeLookup(sim, inst);\n//                             var returnObject = this.containingFunction().getReturnObject(sim, inst.containingRuntimeFunction());\n//                             returnObject.writeValue(size);\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function max_size() - unsupported\n//                 mixin(Lobster.cPlusPlusParser.parse(\"size_t max_size() const;\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n\n//                 // function resize(size_t n, char c)\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"resize(size_t n, char c)\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"void\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var n = this.blockScope.requiredLookup(\"n\").runtimeLookup(sim, inst).getValue();\n//                             var c = this.blockScope.requiredLookup(\"c\").runtimeLookup(sim, inst);\n//                             resizeStrang.call(this, sim, inst, n, c);\n//                         }\n//                     }, null)\n//                 },\n\n\n//                 // function resize(size_t n)\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"resize(size_t n)\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"void\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var n = this.blockScope.requiredLookup(\"n\").runtimeLookup(sim, inst).getValue();\n//                             resizeStrang.call(this, sim, inst, n, Types.Char.NULL_CHAR);\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function capacity()\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"capacity() const\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"size_t\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var size = this.blockScope.requiredLookup(\"_capacity\").runtimeLookup(sim, inst);\n//                             var returnObject = this.containingFunction().getReturnObject(sim, inst.containingRuntimeFunction());\n//                             returnObject.writeValue(size);\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function reserve() - unsupported\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void reserve();\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void reserve(size_t n);\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n\n//                 // function clear()\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"clear()\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"void\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             replaceStrangArrayWith.call(this, sim, inst, []);\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function empty()\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"empty() const\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"bool\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var size = this.blockScope.requiredLookup(\"_size\").runtimeLookup(sim, inst).getValue();\n//                             var returnObject = this.containingFunction().getReturnObject(sim, inst.containingRuntimeFunction());\n//                             returnObject.writeValue(size.equals(0));\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function shrink_to_fit() - unsupported\n//                 mixin(Lobster.cPlusPlusParser.parse(\"void shrink_to_fit();\", {startRule: \"member_declaration\"}),\n//                     {library_unsupported : true}),\n\n//                 // function operator[] non-const\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"&operator[](size_t pos)\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"char\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var ptr = this.blockScope.requiredLookup(\"data_ptr\").runtimeLookup(sim, inst).getValue();\n//                             var pos = this.blockScope.requiredLookup(\"pos\").runtimeLookup(sim, inst);\n//                             ptr.setRawValue(ptr.rawValue() + pos.rawValue() * ptr.type.ptrTo.size);\n\n//                             if (!ptr.isValueValid()) {\n//                                 sim.undefinedBehavior(\"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n//                             }\n\n//                             var obj = sim.memory.dereference(ptr);\n\n//                             var returnRef = ReturnEntity.instance(this.containingFunction().type.returnType).runtimeLookup(sim, inst);\n//                             returnRef.bindTo(obj);\n\n\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function operator[] const\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"&operator[](size_t pos) const\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"const\", \"char\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var ptr = this.blockScope.requiredLookup(\"data_ptr\").runtimeLookup(sim, inst).getValue();\n//                             var pos = this.blockScope.requiredLookup(\"pos\").runtimeLookup(sim, inst);\n//                             ptr.setRawValue(ptr.rawValue() + pos.rawValue() * ptr.type.ptrTo.size);\n\n//                             if (!ptr.isValueValid()) {\n//                                 sim.undefinedBehavior(\"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n//                             }\n\n//                             var obj = sim.memory.dereference(ptr);\n\n//                             var returnRef = ReturnEntity.instance(this.containingFunction().type.returnType).runtimeLookup(sim, inst);\n//                             returnRef.bindTo(obj);\n\n\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function at() non-const\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"&at(size_t pos)\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"char\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var ptr = this.blockScope.requiredLookup(\"data_ptr\").runtimeLookup(sim, inst).getValue();\n//                             var pos = this.blockScope.requiredLookup(\"pos\").runtimeLookup(sim, inst);\n//                             ptr.setRawValue(ptr.rawValue() + pos.rawValue() * ptr.type.ptrTo.size);\n\n//                             if (!ptr.isValueValid()) {\n//                                 sim.undefinedBehavior(\"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n//                             }\n\n//                             var obj = sim.memory.dereference(ptr);\n\n//                             var returnRef = ReturnEntity.instance(this.containingFunction().type.returnType).runtimeLookup(sim, inst);\n//                             returnRef.bindTo(obj);\n\n\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function at() const\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"&at(size_t pos) const\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"const\", \"char\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var ptr = this.blockScope.requiredLookup(\"data_ptr\").runtimeLookup(sim, inst).getValue();\n//                             var pos = this.blockScope.requiredLookup(\"pos\").runtimeLookup(sim, inst);\n//                             ptr.setRawValue(ptr.rawValue() + pos.rawValue() * ptr.type.ptrTo.size);\n\n//                             if (!ptr.isValueValid()) {\n//                                 sim.undefinedBehavior(\"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n//                             }\n\n//                             var obj = sim.memory.dereference(ptr);\n\n//                             var returnRef = ReturnEntity.instance(this.containingFunction().type.returnType).runtimeLookup(sim, inst);\n//                             returnRef.bindTo(obj);\n\n\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function front() non-const\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"&front()\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"char\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var ptr = this.blockScope.requiredLookup(\"data_ptr\").runtimeLookup(sim, inst).getValue();\n\n//                             if (!ptr.isValueValid()) {\n//                                 sim.undefinedBehavior(\"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n//                             }\n\n//                             var obj = sim.memory.dereference(ptr);\n\n//                             var returnRef = ReturnEntity.instance(this.containingFunction().type.returnType).runtimeLookup(sim, inst);\n//                             returnRef.bindTo(obj);\n\n\n//                         }\n//                     }, null)\n//                 },\n\n//                 // function front() const\n//                 {\n//                     construct_type : \"function_definition\",\n//                     declarator : Lobster.cPlusPlusParser.parse(\"&at(size_t pos) const\", {startRule : \"declarator\"}),\n//                     specs : {storageSpecs : [], typeSpecs : [\"const\", \"char\"]},\n//                     body : Statements.OpaqueFunctionBodyBlock.instance({\n//                         effects : function(sim: Simulation, rtConstruct: RuntimeConstruct) {\n//                             var ptr = this.blockScope.requiredLookup(\"data_ptr\").runtimeLookup(sim, inst).getValue();\n//                             var pos = this.blockScope.requiredLookup(\"pos\").runtimeLookup(sim, inst);\n//                             ptr.setRawValue(ptr.rawValue() + pos.rawValue() * ptr.type.ptrTo.size);\n\n//                             if (!ptr.isValueValid()) {\n//                                 sim.undefinedBehavior(\"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n//                             }\n\n//                             var obj = sim.memory.dereference(ptr);\n\n//                             var returnRef = ReturnEntity.instance(this.containingFunction().type.returnType).runtimeLookup(sim, inst);\n//                             returnRef.bindTo(obj);\n\n\n//                         }\n//                     }, null)\n//                 }\n//             ]\n//         }\n//     ]\n// };\n\n// var strangDefinition = ClassDeclaration.instance(strangAst, {\n//     parent: null,\n//     scope : this.i_globalScope,\n//     translationUnit : this,\n//     func: globalFunctionContext\n// });\n// strangDefinition.tryCompileDeclaration();\n// strangDefinition.tryCompileDefinition();\n// this.topLevelDeclarations.push(strangDefinition);\n// this.addNotes(strangDefinition.getNotes());\n// strangDefinition.classTypeClass.valueToString = function() {\n\n// };\n// strangDefinition.classTypeClass.isValueValid = function() {\n//     return false;\n// };","import { registerLibraryHeader, SourceFile } from \"../core/Program\";\nimport { MemberSubobject, CPPObject } from \"../core/objects\";\nimport { Int, Char, PointerType, BoundedArrayType, CompleteObjectType, ReferenceType, CompleteClassType, ArrayPointerType, Size_t, VoidType, PotentiallyCompleteClassType, Bool, isArrayPointerType, Double, ArrayElemType, AtomicType, ArithmeticType } from \"../core/types\";\nimport { runtimeObjectLookup, VariableEntity, LocalVariableEntity, LocalObjectEntity, LocalReferenceEntity } from \"../core/entities\";\nimport { Value } from \"../core/runtimeEnvironment\";\nimport { SimulationEvent } from \"../core/Simulation\";\nimport { registerOpaqueExpression, RuntimeOpaqueExpression, OpaqueExpressionImpl, lookupTypeInContext, getLocal } from \"../core/opaqueExpression\";\nimport { ExpressionContext, isClassContext } from \"../core/constructs\";\nimport { assert } from \"../util/util\";\nimport { Expression, RuntimeExpression } from \"../core/expressionBase\";\nimport { nth } from \"lodash\";\n\n\n\n\nconst initialVectorCapacity = 4;\n\nfunction instantiateVectorTemplate(element_type: string) {\n    return `class vector<${element_type}> {\nprivate:\n    size_t _size;\n    size_t _capacity;\n    ${element_type}* data_ptr;\npublic:\n    vector() : _size(0), _capacity(${initialVectorCapacity}) {\n        @vector::vector_default;\n    }\n    \n    vector(size_t n) : _size(n) {\n        @vector::vector_int;\n    }\n    \n    vector(size_t n, ${element_type} val) : _size(n) {\n        @vector::vector_int_elt;\n    }\n    \n    vector(initializer_list<${element_type}> elts) {\n        @vector::vector_initializer_list;\n    }\n\n    vector(const vector<${element_type}> &other) {\n        @vector::vector_copy;\n    }\n\n    // ~vector() {\n    //     @vector::~vector;\n    // }\n\n    vector<${element_type}> &operator=(const vector<${element_type}> &rhs) {\n        return @vector::operator=_vector;\n    }\n\n    size_t size() const {\n        return _size;\n    }\n   \n    void clear() {\n        @vector::clear;\n    }\n\n    bool empty() const {\n        return _size == 0;\n    }\n\n    void push_back(${element_type} val) {\n        @vector::push_back;\n    }\n\n    void pop_back() {\n        @vector::pop_back;\n    }\n\n    ${element_type} &operator[](size_t pos) {\n        return data_ptr[pos];\n    }\n\n    const ${element_type} &operator[](size_t pos) const {\n        return data_ptr[pos];\n    }\n\n    ${element_type} &at(size_t pos) {\n        return data_ptr[pos];\n    }\n\n    const ${element_type} &at(size_t pos) const {\n        return data_ptr[pos];\n    }\n\n    ${element_type} &front(size_t pos) {\n        return data_ptr[0];\n    }\n\n    const ${element_type} &front(size_t pos) const {\n        return data_ptr[0];\n    }\n\n    ${element_type} &back(size_t pos) {\n        return data_ptr[_size-1];\n    }\n\n    const ${element_type} &back(size_t pos) const {\n        return data_ptr[_size-1];\n    }\n\n};\n\n// bool operator==(const vector${element_type} &left, const vector${element_type} &right) {\n//     return @operator==_vector_vector;\n// }\n\n// bool operator!=(const string &left, const string &right) {\n//     return !@operator==_string_string;\n// }\n\n\n`\n}\n\nregisterLibraryHeader(\"vector\",\n    new SourceFile(\"vector.h\",\n        instantiateVectorTemplate(\"int\") + \n        instantiateVectorTemplate(\"double\") +\n        instantiateVectorTemplate(\"char\") +\n        instantiateVectorTemplate(\"bool\"),\n        true\n    )\n);\n\nfunction getCapacity(obj: CPPObject<CompleteClassType>) {\n    return <MemberSubobject<Int>>obj.getMemberObject(\"_capacity\");\n}\n\nfunction getSize(obj: CPPObject<CompleteClassType>) {\n    return <MemberSubobject<Int>>obj.getMemberObject(\"_size\");\n}\n\nexport function getDataPtr(obj: CPPObject<CompleteClassType>) {\n    return <MemberSubobject<ArrayPointerType<AtomicType>>>obj.getMemberObject(\"data_ptr\");\n}\n\nfunction allocateNewArray(rt: RuntimeExpression, rec: CPPObject<CompleteClassType>, newCapacity: Value<Int>) {\n    let elt_type = getDataPtr(rec).type.ptrTo.cvUnqualified();\n    let arrObj = rt.sim.memory.heap.allocateNewObject(new BoundedArrayType(elt_type, newCapacity.rawValue));\n\n    // store pointer to new array\n    getDataPtr(rec).writeValue(arrObj.getArrayElemSubobject(0).getPointerTo());\n    getCapacity(rec).writeValue(newCapacity);\n    return arrObj;\n}\n\nregisterOpaqueExpression(\"vector::vector_default\", <OpaqueExpressionImpl<VoidType, \"prvalue\">>{\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n        allocateNewArray(rt, rt.contextualReceiver, new Value(initialVectorCapacity, Int.INT));\n        // set set in member initializer list\n    }\n});\n\nregisterOpaqueExpression(\"vector::vector_int\", <OpaqueExpressionImpl<VoidType, \"prvalue\">>{\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n        let initialCapacity = getLocal<Int>(rt, \"n\").getValue().modify(x => Math.max(x, initialVectorCapacity));\n\n        allocateNewArray(rt, rt.contextualReceiver, initialCapacity);\n        // size set in member initializer list\n    }\n});\n\nregisterOpaqueExpression(\"vector::vector_int_elt\", <OpaqueExpressionImpl<VoidType, \"prvalue\">>{\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n        let n = getLocal<Int>(rt, \"n\").getValue();\n        let initialCapacity = n.modify(x => Math.max(x, initialVectorCapacity));\n\n        let arr = allocateNewArray(rt, rt.contextualReceiver, initialCapacity);\n        // size set in member initializer list\n        \n        let val = getLocal<AtomicType>(rt, \"val\").getValue();\n        let n_raw = n.rawValue;\n        for(let i = 0; i < n_raw; ++i) {\n            arr.getArrayElemSubobject(i).writeValue(val);\n        }\n    }\n});\n\n\n\nregisterOpaqueExpression(\"vector::vector_initializer_list\", <OpaqueExpressionImpl<VoidType, \"prvalue\">>{\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n        let elts = getLocal<CompleteClassType>(rt, \"elts\");\n        let begin = <CPPObject<ArrayPointerType<ArithmeticType>>>elts.getMemberObject(\"begin\");\n        let elems = begin.type.arrayObject.getArrayElemSubobjects();\n        \n        let n = new Value(elems.length, Int.INT);\n        let initialCapacity = n.modify(x => Math.max(x, initialVectorCapacity));\n\n        getSize(rt.contextualReceiver).writeValue(n);\n\n        let arr = allocateNewArray(rt, rt.contextualReceiver, initialCapacity);\n        // size set in member initializer list\n        \n        let n_raw = n.rawValue;\n        for(let i = 0; i < n_raw; ++i) {\n            arr.getArrayElemSubobject(i).writeValue(elems[i].getValue());\n        }\n    }\n});\n\nregisterOpaqueExpression(\"vector::vector_copy\", <OpaqueExpressionImpl<VoidType, \"prvalue\">>{\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n\n        let rec = rt.contextualReceiver;\n        let other = getLocal<CompleteClassType>(rt, \"other\");\n        let otherSize = getSize(other).getValue();\n        let otherArr = getDataPtr(other).type.arrayObject;\n\n        let arr = allocateNewArray(rt, rec, otherSize.modify(x => Math.max(x, initialVectorCapacity)));\n        let n = otherSize.rawValue;\n        for (let i = 0; i < n; ++i) {\n            arr.getArrayElemSubobject(i).writeValue(otherArr.getArrayElemSubobject(i).getValue());\n        }\n        getSize(rec).writeValue(otherSize);\n        \n    }\n});\n\nregisterOpaqueExpression(\"vector::operator=_vector\", <OpaqueExpressionImpl<CompleteClassType, \"lvalue\">>{\n    type: (context: ExpressionContext) => {\n        assert(isClassContext(context));\n        return context.containingClass.type;\n    },\n    valueCategory: \"lvalue\",\n    operate: (rt: RuntimeOpaqueExpression<CompleteClassType, \"lvalue\">) => {\n\n        let rec = rt.contextualReceiver;\n        let rhs = getLocal<CompleteClassType>(rt, \"rhs\");\n\n        // Do nothing if self-assignment\n        if (rt.contextualReceiver.address === rhs.address) {\n            return rt.contextualReceiver;\n        }\n\n        rt.sim.memory.heap.deleteObject(getDataPtr(rec).rawValue());\n\n        let otherSize = getSize(rhs).getValue();\n        let otherArr = getDataPtr(rhs).type.arrayObject;\n\n        let arr = allocateNewArray(rt, rec, otherSize.modify(x => Math.max(x, initialVectorCapacity)));\n        let n = otherSize.rawValue;\n        for (let i = 0; i < n; ++i) {\n            arr.getArrayElemSubobject(i).writeValue(otherArr.getArrayElemSubobject(i).getValue());\n        }\n        getSize(rec).writeValue(otherSize);\n        \n        return rec;\n    }\n});\n\n\n// registerOpaqueExpression(\"string::string_cstring\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n//         let {charValues, validLength} = extractCharsFromCString(rt, getLocal<PointerType<Char>>(rt, \"cstr\").getValue());\n//         copyFromCString(rt, rt.contextualReceiver, charValues, validLength);\n\n        \n//     }\n// });\n\n// registerOpaqueExpression(\"string::string_cstring_n\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n//         let {charValues, validLength} = extractCharsFromCString(rt, getLocal<PointerType<Char>>(rt, \"cstr\").getValue(), getLocal<Int>(rt, \"n\").getValue());\n//         copyFromCString(rt, rt.contextualReceiver, charValues, validLength);\n//     }\n// });\n\n// // fill constructor from char\n// registerOpaqueExpression(\"string::string_fill\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n\n//         let rec = rt.contextualReceiver;\n//         let numChars = getLocal<Int>(rt, \"n\").getValue();\n//         let char = getLocal<Char>(rt, \"c\").getValue();\n\n//         getSize(rec).writeValue(numChars);\n//         getCapacity(rec).writeValue(numChars.addRaw(1));\n\n//         // allocate array\n//         let arrElems = allocateNewArray(rt, rec, numChars.rawValue + 1, []);\n\n//         // fill array\n//         arrElems.forEach((arrElem, i) => arrElem.writeValue(char));\n\n//     }\n// });\n\n// registerOpaqueExpression(\"string::~string\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n//         rt.sim.memory.heap.deleteObject(getDataPtr(rt.contextualReceiver).getValue().rawValue);\n//     }\n// });\n\n\n// registerOpaqueExpression(\"string::resize_1\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n\n//     }\n// });\n\n// registerOpaqueExpression(\"string::resize_2\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n\n//     }\n// });\n\n// registerOpaqueExpression(\"string::capacity\", <OpaqueExpressionImpl<Int, \"lvalue\">> {\n//     type: Int.INT,\n//     valueCategory: \"lvalue\",\n//     operate: (rt: RuntimeOpaqueExpression<Int, \"lvalue\">) => {\n//         return getCapacity(rt.contextualReceiver);\n//     }\n// });\n\nregisterOpaqueExpression(\"vector::clear\", <OpaqueExpressionImpl<VoidType, \"prvalue\">>{\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n        let rec = rt.contextualReceiver;\n        getSize(rec).writeValue(new Value(0, Int.INT));\n        getDataPtr(rec).type.arrayObject.getArrayElemSubobjects().forEach(elemObj => elemObj.setValidity(false))\n    }\n});\n\nregisterOpaqueExpression(\"vector::push_back\", <OpaqueExpressionImpl<VoidType, \"prvalue\">>{\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n        let rec = rt.contextualReceiver;\n        let size = getSize(rec);\n        let cap = getCapacity(rec);\n        let arr = getDataPtr(rec).type.arrayObject;\n\n        if (size.rawValue() === cap.rawValue()) {\n            // grow array\n            let oldArr = getDataPtr(rec).type.arrayObject;\n            arr = allocateNewArray(rt, rec, cap.getValue().modify(x => 2*x));\n            oldArr.getArrayElemSubobjects().forEach(\n                (elemObj, i) => arr.getArrayElemSubobject(i).writeValue(elemObj.getValue()));\n            rt.sim.memory.heap.deleteObject(oldArr.address, rt);\n        }\n        \n        // add new object to back\n        arr.getArrayElemSubobject(size.rawValue()).writeValue(getLocal<AtomicType>(rt, \"val\").getValue());\n\n        size.writeValue(size.getValue().addRaw(1));\n    }\n});\n\nregisterOpaqueExpression(\"vector::pop_back\", <OpaqueExpressionImpl<VoidType, \"prvalue\">>{\n    type: VoidType.VOID,\n    valueCategory: \"prvalue\",\n    operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n        let rec = rt.contextualReceiver;\n        let size = getSize(rec);\n\n        // decrease size by 1\n        size.writeValue(size.getValue().subRaw(1));\n\n        // popped element data is still there but is invalid\n        let arr = getDataPtr(rec).type.arrayObject;\n        arr.getArrayElemSubobject(size.getValue().rawValue).setValidity(false);\n    }\n});\n\n\n\n// registerOpaqueExpression(\"string::empty\", <OpaqueExpressionImpl<Bool, \"prvalue\">>{\n//     type: Bool.BOOL,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression<Bool, \"prvalue\">) => {\n//         return getSize(rt.contextualReceiver).getValue().equals(Int.ZERO);\n//     }\n// });\n\n// registerOpaqueExpression(\"string::operator[]\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n\n//     }\n// });\n\n// registerOpaqueExpression(\"string::operator[]_const\", {\n//     type: VoidType.VOID,\n//     valueCategory: \"prvalue\",\n//     operate: (rt: RuntimeOpaqueExpression) => {\n\n//     }\n// });\n\n// registerOpaqueExpression(\n//     \"vector::operator[]\",\n//     <OpaqueExpressionImpl<AtomicType, \"lvalue\">> {\n//         type: (context: ExpressionContext) => {\n//             assert(isClassContext(context));\n//             return context.templateType;\n//         },\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<AtomicType, \"lvalue\">) => {\n//             let ptr = getDataPtr(rt.contextualReceiver).getValue();\n//             let pos = getLocal<Int>(rt, \"pos\").getValue();\n//             ptr = ptr.pointerOffset(pos);\n\n//             if (!ptr.isValid) {\n//                 rt.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"It looks like the position you requested is out of bounds for that vector. The element reference you got back just refers to memory junk somewhere!\");\n//             }\n\n//             return rt.sim.memory.dereference(ptr);\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"vector::operator[]_const\",\n//     <OpaqueExpressionImpl<AtomicType, \"lvalue\">> {\n//         type: (context: ExpressionContext) => {\n//             assert(isClassContext(context) && context.templateType);\n//             return context.templateType.cvQualified(true);\n//         },\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<AtomicType, \"lvalue\">) => {\n//             let ptr = getDataPtr(rt.contextualReceiver).getValue();\n//             let pos = getLocal<Int>(rt, \"pos\").getValue();\n//             ptr = ptr.pointerOffset(pos);\n\n//             if (!ptr.isValid) {\n//                 rt.sim.eventOccurred(SimulationEvent.UNDEFINED_BEHAVIOR, \"It looks like the position you requested is out of bounds for that vector. The element reference you got back just refers to memory junk somewhere!\");\n//             }\n\n//             return rt.sim.memory.dereference(ptr);\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"string::at\",\n//     <OpaqueExpressionImpl<Char, \"lvalue\">> {\n//         type: Char.CHAR,\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<Char, \"lvalue\">) => {\n//             let ptr = getDataPtr(rt.contextualReceiver).getValue();\n//             let pos = getLocal<Int>(rt, \"pos\").getValue();\n//             ptr = ptr.pointerOffset(pos);\n\n//             if (!ptr.isValid) {\n//                 rt.sim.eventOccurred(SimulationEvent.CRASH, \"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n//             }\n\n//             return rt.sim.memory.dereference(ptr);\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"string::at_const\",\n//     <OpaqueExpressionImpl<Char, \"lvalue\">> {\n//         type: new Char(true),\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<Char, \"lvalue\">) => {\n//             let ptr = getDataPtr(rt.contextualReceiver).getValue();\n//             let pos = getLocal<Int>(rt, \"pos\").getValue();\n//             ptr = ptr.pointerOffset(pos);\n\n//             if (!ptr.isValid) {\n//                 rt.sim.eventOccurred(SimulationEvent.CRASH, \"It looks like the position you requested is out of bounds for that string. The character reference you got back just refers to memory junk somewhere!\");\n//             }\n\n//             return rt.sim.memory.dereference(ptr);\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"string::front\",\n//     <OpaqueExpressionImpl<Char, \"lvalue\">> {\n//         type: Char.CHAR,\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<Char, \"lvalue\">) => {\n//             return rt.sim.memory.dereference(getDataPtr(rt.contextualReceiver).getValue());\n//     }\n// });\n\n// registerOpaqueExpression(\n//     \"string::front_const\",\n//     <OpaqueExpressionImpl<Char, \"lvalue\">> {\n//         type: new Char(true),\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<Char, \"lvalue\">) => {\n//             return rt.sim.memory.dereference(getDataPtr(rt.contextualReceiver).getValue());\n//     }\n// });\n\n\n\n// registerOpaqueExpression(\n//     \"operator+_string_string\",\n//     <OpaqueExpressionImpl<VoidType, \"prvalue\">> {\n//         type: VoidType.VOID,\n//         valueCategory: \"prvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n//             let returnObject = <CPPObject<CompleteClassType>>rt.containingRuntimeFunction.returnObject;\n//             assert(returnObject, \"String + operator lacking return-by-value object\");\n\n//             addFromCStrings(rt, returnObject,\n//                             getDataPtr(getLocal<CompleteClassType>(rt, \"left\")).getValue(),\n//                             getDataPtr(getLocal<CompleteClassType>(rt, \"right\")).getValue());\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator+_string_cstring\",\n//     <OpaqueExpressionImpl<VoidType, \"prvalue\">> {\n//         type: VoidType.VOID,\n//         valueCategory: \"prvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n//             let returnObject = <CPPObject<CompleteClassType>>rt.containingRuntimeFunction.returnObject;\n//             assert(returnObject, \"String + operator lacking return-by-value object\");\n\n//             addFromCStrings(rt, returnObject,\n//                             getDataPtr(getLocal<CompleteClassType>(rt, \"str\")).getValue(),\n//                             getLocal<PointerType<Char>>(rt, \"cstr\").getValue());\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator+_cstring_string\",\n//     <OpaqueExpressionImpl<VoidType, \"prvalue\">> {\n//         type: VoidType.VOID,\n//         valueCategory: \"prvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n//             let returnObject = <CPPObject<CompleteClassType>>rt.containingRuntimeFunction.returnObject;\n//             assert(returnObject, \"String + operator lacking return-by-value object\");\n\n//             addFromCStrings(rt, returnObject,\n//                             getLocal<PointerType<Char>>(rt, \"cstr\").getValue(),\n//                             getDataPtr(getLocal<CompleteClassType>(rt, \"str\")).getValue());\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator+_string_char\",\n//     <OpaqueExpressionImpl<VoidType, \"prvalue\">> {\n//         type: VoidType.VOID,\n//         valueCategory: \"prvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n//             let returnObject = <CPPObject<CompleteClassType>>rt.containingRuntimeFunction.returnObject;\n//             assert(returnObject, \"String + operator lacking return-by-value object\");\n\n//             let left = getLocal<CompleteClassType>(rt, \"str\");\n//             let right = getLocal<Char>(rt, \"c\");\n\n                            \n//             let {charValues: leftChars, validLength: leftValidLength} = extractCharsFromCString(rt, getDataPtr(left).getValue());\n//             leftChars.pop(); // remove null char that would otherwise be in the middle of left + right\n//             leftChars.push(right.getValue());\n//             leftChars.push(Char.NULL_CHAR); // add back on null char\n\n//             let newCapacity = new Value(leftChars.length, Int.INT, leftValidLength);\n//             let newSize = newCapacity.subRaw(1);\n\n//             getCapacity(returnObject).writeValue(newCapacity);\n//             getSize(returnObject).writeValue(newSize);\n\n//             // allocate new array with enough space\n//             allocateNewArray(rt, returnObject, newCapacity.rawValue, leftChars);\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator+_char_string\",\n//     <OpaqueExpressionImpl<VoidType, \"prvalue\">> {\n//         type: VoidType.VOID,\n//         valueCategory: \"prvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<VoidType, \"prvalue\">) => {\n//             let returnObject = <CPPObject<CompleteClassType>>rt.containingRuntimeFunction.returnObject;\n//             assert(returnObject, \"String + operator lacking return-by-value object\");\n\n//             let left = getLocal<Char>(rt, \"c\");\n//             let right = getLocal<CompleteClassType>(rt, \"str\");\n\n                            \n//             let {charValues: rightChars, validLength: rightValidLength} = extractCharsFromCString(rt, getDataPtr(right).getValue());\n//             rightChars.unshift(left.getValue())\n\n//             let newCapacity = new Value(rightChars.length, Int.INT, rightValidLength);\n//             let newSize = newCapacity.subRaw(1);\n\n//             getCapacity(returnObject).writeValue(newCapacity);\n//             getSize(returnObject).writeValue(newSize);\n\n//             // allocate new array with enough space\n//             allocateNewArray(rt, returnObject, newCapacity.rawValue, rightChars);\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator==_string_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStrings((left, right) => left === right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator!=_string_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStrings((left, right) => left !== right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator<_string_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStrings((left, right) => left < right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator<=_string_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStrings((left, right) => left <= right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator>_string_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStrings((left, right) => left > right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator>=_string_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStrings((left, right) => left >= right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator==_string_cstring\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStringCstring((left, right) => left === right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator!=_string_cstring\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStringCstring((left, right) => left !== right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator<_string_cstring\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStringCstring((left, right) => left < right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator<=_string_cstring\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStringCstring((left, right) => left <= right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator>_string_cstring\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStringCstring((left, right) => left > right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator>=_string_cstring\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareStringCstring((left, right) => left >= right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator==_cstring_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareCstringString((left, right) => left === right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator!=_cstring_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareCstringString((left, right) => left !== right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator<_cstring_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareCstringString((left, right) => left < right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator<=_cstring_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareCstringString((left, right) => left <= right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator>_cstring_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareCstringString((left, right) => left > right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator>=_cstring_string\",\n//     <OpaqueExpressionImpl<Bool, \"prvalue\">> {\n//         type: Bool.BOOL,\n//         valueCategory: \"prvalue\",\n//         operate: compareCstringString((left, right) => left >= right)\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator<<_ostream_string\",\n//     <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n//         type: lookupTypeInContext(\"ostream\"),\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n//             rt.sim.cout(getDataPtr(getLocal<CompleteClassType>(rt, \"str\")).getValue());\n//             return getLocal<CompleteClassType>(rt, \"os\");\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"operator>>_istream_string\",\n//     <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n//         type: lookupTypeInContext(\"istream\"),\n//         valueCategory: \"lvalue\",\n//         upNext: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n//             if (rt.sim.cin.buffer.length === 0) {\n//                 rt.sim.blockUntilCin();\n//             }\n//         },\n//         operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n//             rt.sim.cin.skipws();\n//             let chars = Char.jsStringToNullTerminatedCharArray(rt.sim.cin.extractWordFromBuffer());\n\n//             let str = getLocal<CompleteClassType>(rt, \"str\");\n\n//             rt.sim.memory.heap.deleteObject(getDataPtr(str).getValue().rawValue);\n//             copyFromCString(rt, str, chars)\n//             return getLocal<CompleteClassType>(rt, \"is\");\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"getline_istream_string\",\n//     <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n//         type: lookupTypeInContext(\"istream\"),\n//         valueCategory: \"lvalue\",\n//         upNext: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n//             if (rt.sim.cin.buffer.length === 0) {\n//                 rt.sim.blockUntilCin();\n//             }\n//         },\n//         operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n\n//             let chars = Char.jsStringToNullTerminatedCharArray(rt.sim.cin.extractLineFromBuffer());\n\n//             let str = getLocal<CompleteClassType>(rt, \"str\");\n\n//             rt.sim.memory.heap.deleteObject(getDataPtr(str).getValue().rawValue);\n//             copyFromCString(rt, str, chars)\n//             return getLocal<CompleteClassType>(rt, \"is\");\n//         }\n//     }\n// );\n\n\n// registerOpaqueExpression(\n//     \"string::operator=_string\",\n//     <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n//         type: lookupTypeInContext(\"string\"),\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n//             let rec = rt.contextualReceiver;\n//             let rhs = getLocal<CompleteClassType>(rt, \"rhs\");\n            \n//             rt.sim.memory.heap.deleteObject(getDataPtr(rec).getValue().rawValue);\n//             let {charValues, validLength} = extractCharsFromCString(rt, getDataPtr(rhs).getValue());\n//             copyFromCString(rt, rt.contextualReceiver, charValues, validLength);\n//             return rt.contextualReceiver;\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"string::operator=_cstring\",\n//     <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n//         type: lookupTypeInContext(\"string\"),\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n//             let rec = rt.contextualReceiver;\n//             let cstr = getLocal<PointerType<Char>>(rt, \"cstr\");\n            \n//             rt.sim.memory.heap.deleteObject(getDataPtr(rec).getValue().rawValue);\n//             let {charValues, validLength} = extractCharsFromCString(rt, cstr.getValue());\n//             copyFromCString(rt, rt.contextualReceiver, charValues, validLength);\n//             return rt.contextualReceiver;\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"string::operator=_char\",\n//     <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n//         type: lookupTypeInContext(\"string\"),\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n//             let rec = rt.contextualReceiver;\n//             let c = getLocal<Char>(rt, \"c\");\n            \n//             rt.sim.memory.heap.deleteObject(getDataPtr(rec).getValue().rawValue);\n//             copyFromCString(rt, rt.contextualReceiver, [c.getValue(), Char.NULL_CHAR]);\n//             return rt.contextualReceiver;\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"string::operator+=_string\",\n//     <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n//         type: lookupTypeInContext(\"string\"),\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n//             addFromCStrings(rt, rt.contextualReceiver,\n//                 getDataPtr(rt.contextualReceiver).getValue(),\n//                 getDataPtr(getLocal<CompleteClassType>(rt, \"rhs\")).getValue(), true);\n//             return rt.contextualReceiver;\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"string::operator+=_cstring\",\n//     <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n//         type: lookupTypeInContext(\"string\"),\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n//             addFromCStrings(rt, rt.contextualReceiver,\n//                 getDataPtr(rt.contextualReceiver).getValue(),\n//                 getLocal<PointerType<Char>>(rt, \"cstr\").getValue(), true);\n//             return rt.contextualReceiver;\n//         }\n//     }\n// );\n\n// registerOpaqueExpression(\n//     \"string::operator+=_char\",\n//     <OpaqueExpressionImpl<PotentiallyCompleteClassType, \"lvalue\">> {\n//         type: lookupTypeInContext(\"string\"),\n//         valueCategory: \"lvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<PotentiallyCompleteClassType, \"lvalue\">) => {\n//             let rec = rt.contextualReceiver;\n//             let c = getLocal<Char>(rt, \"c\");\n            \n//             let orig = extractCharsFromCString(rt, getDataPtr(rt.contextualReceiver).getValue());\n//             rt.sim.memory.heap.deleteObject(getDataPtr(rec).getValue().rawValue);\n//             copyFromCString(rt, rt.contextualReceiver, [...orig.charValues, c.getValue(), Char.NULL_CHAR], orig.validLength);\n//             return rt.contextualReceiver;\n//         }\n//     }\n// );\n\n\n\n// registerOpaqueExpression(\n//     \"stoi\",\n//     <OpaqueExpressionImpl<Int, \"prvalue\">> {\n//         type: Int.INT,\n//         valueCategory: \"prvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<Int, \"prvalue\">) => {\n//             let str = extractStringValue(rt, getDataPtr(getLocal<CompleteClassType>(rt, \"str\")).getValue());\n//             let val = parseInt(str);\n//             if (!Number.isNaN(val)) {\n//                 return new Value(val, Int.INT);\n//             }\n//             else {\n//                 return new Value(Math.floor(Math.random()*100), Int.INT, false);\n//             }\n//         }\n//     }\n// );\n\n\n// registerOpaqueExpression(\n//     \"stod\",\n//     <OpaqueExpressionImpl<Double, \"prvalue\">> {\n//         type: Double.DOUBLE,\n//         valueCategory: \"prvalue\",\n//         operate: (rt: RuntimeOpaqueExpression<Double, \"prvalue\">) => {\n//             let str = extractStringValue(rt, getDataPtr(getLocal<CompleteClassType>(rt, \"str\")).getValue());\n//             let val = parseFloat(str);\n//             if (!Number.isNaN(val)) {\n//                 return new Value(val, Double.DOUBLE);\n//             }\n//             else {\n//                 return new Value(Math.floor(Math.random()*100), Double.DOUBLE, false);\n//             }\n//         }\n//     }\n// );\n\n\n\n\n\n","import { DefaultLobsterOutlet } from \"./view/simOutlets\";\nimport { Project } from \"./view/editors\";\n\nimport \"./lib/cstdlib\"\nimport \"./lib/string\"\nimport \"./lib/vector\"\nimport { User } from \"./frontend/user\";\nimport { MyProjects } from \"./frontend/projects\";\nimport { LobsterApplication } from \"./frontend/application\";\n\n\n\n$(async () => {\n\n    // let element = $(\"#lobster1\");\n\n    // let i_tabsElem = element.find(\".lobster-simulation-outlet-tabs\");\n\n    // let project = new Project(\"Test Project\", [{name: \"file.cpp\", code: \"int main() {\\n  int x = 2;\\n}\", isTranslationUnit: true}, {name: \"file2.cpp\", code: \"blah wheee\", isTranslationUnit: false} ]);\n    // // let sourcePane = element.find(\"#sourcePane\");\n    // let lobsterOutlet = new DefaultLobsterOutlet($(\"#lobster1\"), );\n    \n    let app = new LobsterApplication();\n\n//        console = ValueEntity.instance();\n\n    // if ((elem = statusElem = element.find(\".status\")).length !== 0) {\n    //     status = Outlets.HtmlOutlet.instance(elem, true).listenTo(errorStatus);\n    // }\n    // if ((elem = element.find(\".console\")).length !== 0) {\n    //     consoleOutlet = Outlets.HtmlOutlet.instance(elem, true).listenTo(sim.console);\n    // }\n\n    // if ((elem = element.find(\".stackFrames\")).length !== 0) {\n    //     if (useSourceSimulation){\n    //         stackFrames = Outlets.CPP.SourceSimulation.instance(elem, sim, this);\n    //         listenTo(stackFrames);\n    //     }\n    //     else{\n    //         stackFrames = Outlets.CPP.SimulationStack.instance(elem, sim, this);\n    //         listenTo(stackFrames);\n    //     }\n    // }\n    \n    // if ((elem = element.find(\".memory\")).length !== 0) {\n    //     memory = Outlets.CPP.Memory.instance(elem, sim.memory);\n    // }\n\n    // runButton = element.find(\".runButton\");\n\n\n});","// tslint:disable:only-arrow-functions\n// tslint:disable:object-literal-shorthand\n// tslint:disable:trailing-comma\n// tslint:disable:object-literal-sort-keys\n// tslint:disable:one-variable-per-declaration\n// tslint:disable:max-line-length\n// tslint:disable:no-consecutive-blank-lines\n// tslint:disable:align\n\n\n// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\n\n\"use strict\";\n\nexport interface IFilePosition {\n  offset: number;\n  line: number;\n  column: number;\n}\n\nexport interface IFileRange {\n  start: IFilePosition;\n  end: IFilePosition;\n}\n\nexport interface ILiteralExpectation {\n  type: \"literal\";\n  text: string;\n  ignoreCase: boolean;\n}\n\nexport interface IClassParts extends Array<string | IClassParts> {}\n\nexport interface IClassExpectation {\n  type: \"class\";\n  parts: IClassParts;\n  inverted: boolean;\n  ignoreCase: boolean;\n}\n\nexport interface IAnyExpectation {\n  type: \"any\";\n}\n\nexport interface IEndExpectation {\n  type: \"end\";\n}\n\nexport interface IOtherExpectation {\n  type: \"other\";\n  description: string;\n}\n\nexport type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;\n\nexport class SyntaxError extends Error {\n  public static buildMessage(expected: Expectation[], found: string | null) {\n    function hex(ch: string): string {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s: string): string {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,            (ch) => \"\\\\x0\" + hex(ch) )\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, (ch) => \"\\\\x\"  + hex(ch) );\n    }\n\n    function classEscape(s: string): string {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,            (ch) => \"\\\\x0\" + hex(ch) )\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, (ch) => \"\\\\x\"  + hex(ch) );\n    }\n\n    function describeExpectation(expectation: Expectation) {\n      switch (expectation.type) {\n        case \"literal\":\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        case \"class\":\n          const escapedParts = expectation.parts.map((part) => {\n            return Array.isArray(part)\n              ? classEscape(part[0] as string) + \"-\" + classEscape(part[1] as string)\n              : classEscape(part);\n          });\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        case \"any\":\n          return \"any character\";\n        case \"end\":\n          return \"end of input\";\n        case \"other\":\n          return expectation.description;\n      }\n    }\n\n    function describeExpected(expected1: Expectation[]) {\n      const descriptions = expected1.map(describeExpectation);\n      let i: number;\n      let j: number;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found1: string | null) {\n      return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  }\n\n  public message: string;\n  public expected: Expectation[];\n  public found: string | null;\n  public location: IFileRange;\n  public name: string;\n\n  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {\n    super();\n    this.message = message;\n    this.expected = expected;\n    this.found = found;\n    this.location = location;\n    this.name = \"SyntaxError\";\n\n    if (typeof (Error as any).captureStackTrace === \"function\") {\n      (Error as any).captureStackTrace(this, SyntaxError);\n    }\n  }\n}\n\nfunction peg$parse(input: string, options?: IParseOptions) {\n  options = options !== undefined ? options : {};\n\n  const peg$FAILED: Readonly<{}> = {};\n\n  const peg$startRuleFunctions: {[id: string]: any} = { start: peg$parsestart, declaration: peg$parsedeclaration, declarator: peg$parsedeclarator, function_definition: peg$parsefunction_definition };\n  let peg$startRuleFunction: () => any = peg$parsestart;\n\n  const peg$c0 = function(d: any): any {return d};\n  const peg$c1 = function(decls: any): any {return {construct_type: \"translation_unit\", declarations: decls.filter((elem: any) => elem!==\"comment\")};};\n  const peg$c2 = function(): any {return \"comment\";};\n  const peg$c3 = \"//\";\n  const peg$c4 = peg$literalExpectation(\"//\", false);\n  const peg$c5 = /^[^\\n]/;\n  const peg$c6 = peg$classExpectation([\"\\n\"], true, false);\n  const peg$c7 = \"\\n\";\n  const peg$c8 = peg$literalExpectation(\"\\n\", false);\n  const peg$c9 = \"/*\";\n  const peg$c10 = peg$literalExpectation(\"/*\", false);\n  const peg$c11 = \"*/\";\n  const peg$c12 = peg$literalExpectation(\"*/\", false);\n  const peg$c13 = peg$anyExpectation();\n  const peg$c14 = \":\";\n  const peg$c15 = peg$literalExpectation(\":\", false);\n  const peg$c16 = function(label: any, stmt: any): any {return track({construct_type: \"labeled_statement\", label:label, statement: stmt}, location(), text()); };\n  const peg$c17 = \"case\";\n  const peg$c18 = peg$literalExpectation(\"case\", false);\n  const peg$c19 = function(c: any, stmt: any): any { return track({construct_type: \"labeled_statement\", case:c, statement:stmt}, location(), text()); };\n  const peg$c20 = \"default\";\n  const peg$c21 = peg$literalExpectation(\"default\", false);\n  const peg$c22 = function(stmt: any): any { return track({construct_type: \"labeled_statement\", default:true, stmt:stmt}, location(), text()); };\n  const peg$c23 = \";\";\n  const peg$c24 = peg$literalExpectation(\";\", false);\n  const peg$c25 = function(expr: any): any { return track({construct_type: \"expression_statement\", expression:expr}, location(), text()); };\n  const peg$c26 = function(): any { return track({construct_type: \"null_statement\"}, location(), text()); };\n  const peg$c27 = \"{\";\n  const peg$c28 = peg$literalExpectation(\"{\", false);\n  const peg$c29 = function(stmt: any): any {return stmt};\n  const peg$c30 = \"}\";\n  const peg$c31 = peg$literalExpectation(\"}\", false);\n  const peg$c32 = function(stmts: any): any { return track({construct_type: \"block\", statements: stmts}, location(), text()); };\n  const peg$c33 = \"if\";\n  const peg$c34 = peg$literalExpectation(\"if\", false);\n  const peg$c35 = \"(\";\n  const peg$c36 = peg$literalExpectation(\"(\", false);\n  const peg$c37 = \")\";\n  const peg$c38 = peg$literalExpectation(\")\", false);\n  const peg$c39 = \"else\";\n  const peg$c40 = peg$literalExpectation(\"else\", false);\n  const peg$c41 = function(cond: any, then: any, e: any): any {return track({construct_type:\"if_statement\", condition:cond, then:then, otherwise:e}, location(), text()); };\n  const peg$c42 = function(cond: any, then: any): any {return track({construct_type:\"if_statement\", condition:cond, then:then}, location(), text()); };\n  const peg$c43 = \"while\";\n  const peg$c44 = peg$literalExpectation(\"while\", false);\n  const peg$c45 = function(cond: any, body: any): any { return track({construct_type:\"while_statement\", condition:cond, body:body}, location(), text()); };\n  const peg$c46 = \"do\";\n  const peg$c47 = peg$literalExpectation(\"do\", false);\n  const peg$c48 = function(body: any, cond: any): any { return track({construct_type:\"dowhile_statement\", condition:cond, body:body}, location(), text()); };\n  const peg$c49 = \"for\";\n  const peg$c50 = peg$literalExpectation(\"for\", false);\n  const peg$c51 = function(init: any, cond: any, post: any, body: any): any { return track({construct_type:\"for_statement\", condition:cond, initial:init, post:post, body:body}, location(), text()); };\n  const peg$c52 = \"break\";\n  const peg$c53 = peg$literalExpectation(\"break\", false);\n  const peg$c54 = function(): any { return track({construct_type:\"break_statement\"}, location(), text()); };\n  const peg$c55 = \"continue\";\n  const peg$c56 = peg$literalExpectation(\"continue\", false);\n  const peg$c57 = function(): any {return track({construct_type:\"continue_statement\"}, location(), text()); };\n  const peg$c58 = \"return\";\n  const peg$c59 = peg$literalExpectation(\"return\", false);\n  const peg$c60 = function(ret: any): any { return track({construct_type:\"return_statement\", expression:ret}, location(), text()); };\n  const peg$c61 = function(d: any): any {return track({construct_type:\"declaration_statement\", declaration: d}, location(), text()); };\n  const peg$c62 = function(specs: any): any {return specs.length === 0;};\n  const peg$c63 = function(specs: any, declarators: any): any { return track({construct_type: \"simple_declaration\", specs:specs, declarators:declarators}, location(), text()); };\n  const peg$c64 = \",\";\n  const peg$c65 = peg$literalExpectation(\",\", false);\n  const peg$c66 = function(first: any, d: any): any {return d;};\n  const peg$c67 = function(first: any, rest: any): any {rest.unshift(first); return rest; };\n  const peg$c68 = function(spec: any): any {\n      return spec;\n    };\n  const peg$c69 = function(specs: any, declarator: any, init: any, body: any): any {return track({construct_type: \"function_definition\", specs:specs, declarator:declarator, ctor_initializer:init, body:body}, location(), text()); };\n  const peg$c70 = function(declarator: any, init: any, body: any): any {return track({construct_type: \"function_definition\", specs:emptyDeclSpecs, declarator:declarator, ctor_initializer:init, body:body}, location(), text()); };\n  const peg$c71 = function(first: any, m: any): any {return m;};\n  const peg$c72 = function(first: any, rest: any): any {rest.unshift(first); return track({construct_type: \"ctor_initializer\", initializers: rest}, location(), text());};\n  const peg$c73 = function(i: any, args: any): any {return track({construct_type: \"member_initializer\", member: i, args:args || []}, location(), text()); };\n  const peg$c74 = function(nonTypeDeclSpecs: any, firstTypeSpec: any, s: any): any {return s;};\n  const peg$c75 = function(nonTypeDeclSpecs: any, firstTypeSpec: any, rest: any): any {\n        firstTypeSpec && rest.unshift(firstTypeSpec);\n        rest = nonTypeDeclSpecs.concat(rest);\n\n        var declSpecs : any = {\n          typeSpecs: [],\n          storageSpecs: [],\n          length: 0\n        };\n\n        for(var i = 0; i < rest.length; ++i){\n          let spec = rest[i];\n          if (spec.typeSpec){\n            declSpecs.typeSpecs.push(spec.typeSpec);\n          }\n          else if (spec.storageSpec){\n            declSpecs.storageSpecs.push(spec.storageSpec);\n          }\n          else if (spec === \"friend\"){\n            declSpecs.friend = true;\n          }\n          else if (spec === \"typedef\"){\n            declSpecs.typedef = true;\n          }\n          else if (spec === \"inline\"){\n            declSpecs.inline = true;\n          }\n          else if (spec === \"explicit\"){\n            declSpecs.explicit = true;\n          }\n          else if (spec === \"virtual\"){\n            declSpecs.virtual = true;\n          }\n          ++declSpecs.length;\n        }\n\n\n        return track(declSpecs, location(), text()); };\n  const peg$c76 = function(first: any, s: any): any {return s;};\n  const peg$c77 = function(first: any, rest: any): any {first && rest.unshift(first); return rest;};\n  const peg$c78 = function(t: any): any { return {typeSpec:t}; };\n  const peg$c79 = function(s: any): any { return {storageSpec:s}; };\n  const peg$c80 = \"typedef\";\n  const peg$c81 = peg$literalExpectation(\"typedef\", false);\n  const peg$c82 = \"friend\";\n  const peg$c83 = peg$literalExpectation(\"friend\", false);\n  const peg$c84 = \"const\";\n  const peg$c85 = peg$literalExpectation(\"const\", false);\n  const peg$c86 = function(): any {return {typeSpec: \"const\"};};\n  const peg$c87 = \"volatile\";\n  const peg$c88 = peg$literalExpectation(\"volatile\", false);\n  const peg$c89 = function(): any {return {typeSpec: \"volatile\"};};\n  const peg$c90 = function(): any { prohibitOwnClassName = true; return true;};\n  const peg$c91 = function(d: any): any { prohibitOwnClassName = false; return d;};\n  const peg$c92 = function(): any { prohibitOwnClassName = false; return false;};\n  const peg$c93 = \"PEG_doesnt_realize_we_never_get_to_here\";\n  const peg$c94 = peg$literalExpectation(\"PEG_doesnt_realize_we_never_get_to_here\", false);\n  const peg$c95 = function(first: any, s: any): any {return s};\n  const peg$c96 = function(first: any, rest: any): any { rest.unshift(first);\n        return track(rest, location(), text()); };\n  const peg$c97 = function(t: any): any { return prohibitOwnClassName && t === classNameStack[classNameStack.length - 1]; };\n  const peg$c98 = function(t: any): any { return t; };\n  const peg$c99 = function(name: any): any {track({construct_type: \"elaborated_type_specifier\", name:name}, location(), text());};\n  const peg$c100 = \"register\";\n  const peg$c101 = peg$literalExpectation(\"register\", false);\n  const peg$c102 = \"static\";\n  const peg$c103 = peg$literalExpectation(\"static\", false);\n  const peg$c104 = \"thread_local\";\n  const peg$c105 = peg$literalExpectation(\"thread_local\", false);\n  const peg$c106 = \"extern\";\n  const peg$c107 = peg$literalExpectation(\"extern\", false);\n  const peg$c108 = \"mutable\";\n  const peg$c109 = peg$literalExpectation(\"mutable\", false);\n  const peg$c110 = \"inline\";\n  const peg$c111 = peg$literalExpectation(\"inline\", false);\n  const peg$c112 = \"explicit\";\n  const peg$c113 = peg$literalExpectation(\"explicit\", false);\n  const peg$c114 = \"virtual\";\n  const peg$c115 = peg$literalExpectation(\"virtual\", false);\n  const peg$c116 = peg$otherExpectation(\"simple type name\");\n  const peg$c117 = function(t: any): any {return t;};\n  const peg$c118 = \"char\";\n  const peg$c119 = peg$literalExpectation(\"char\", false);\n  const peg$c120 = \"short\";\n  const peg$c121 = peg$literalExpectation(\"short\", false);\n  const peg$c122 = \"int\";\n  const peg$c123 = peg$literalExpectation(\"int\", false);\n  const peg$c124 = \"size_t\";\n  const peg$c125 = peg$literalExpectation(\"size_t\", false);\n  const peg$c126 = \"bool\";\n  const peg$c127 = peg$literalExpectation(\"bool\", false);\n  const peg$c128 = \"long\";\n  const peg$c129 = peg$literalExpectation(\"long\", false);\n  const peg$c130 = \"signed\";\n  const peg$c131 = peg$literalExpectation(\"signed\", false);\n  const peg$c132 = \"unsigned\";\n  const peg$c133 = peg$literalExpectation(\"unsigned\", false);\n  const peg$c134 = \"float\";\n  const peg$c135 = peg$literalExpectation(\"float\", false);\n  const peg$c136 = \"double\";\n  const peg$c137 = peg$literalExpectation(\"double\", false);\n  const peg$c138 = \"void\";\n  const peg$c139 = peg$literalExpectation(\"void\", false);\n  const peg$c140 = function(n: any): any {return n.identifier;};\n  const peg$c141 = \"enum\";\n  const peg$c142 = peg$literalExpectation(\"enum\", false);\n  const peg$c143 = function(name: any, first: any, e: any): any {return e;};\n  const peg$c144 = function(name: any, first: any, rest: any): any { return \"enum\"; };\n  const peg$c145 = \"=\";\n  const peg$c146 = peg$literalExpectation(\"=\", false);\n  const peg$c147 = function(name: any, e: any): any {return e;};\n  const peg$c148 = function(name: any, value: any): any {return {name:name, value:value}; };\n  const peg$c149 = \"@library_unsupported@\";\n  const peg$c150 = peg$literalExpectation(\"@library_unsupported@\", false);\n  const peg$c151 = function(d: any): any {return track(absorb(d, {library_unsupported: true}), location(), text());};\n  const peg$c152 = function(d: any, i: any): any {return track(absorb(d, {initializer: i}), location(), text());};\n  const peg$c153 = function(args: any): any {\n      return track({construct_type:\"direct_initializer\", args:args}, location(), text());\n    };\n  const peg$c154 = function(init: any): any {return track({construct_type:\"copy_initializer\", args:[init]}, location(), text());};\n  const peg$c155 = function(init: any): any {return track({construct_type:\"list_initializer\", arg:init}, location(), text());};\n  const peg$c156 = function(first: any, op: any, e: any): any {return e;};\n  const peg$c157 = function(first: any, rest: any): any {\n        rest.unshift(first);\n        return track({construct_type:\"initializer_list_expression\", elements: rest}, location(), text());\n      };\n  const peg$c158 = function(d: any): any {\n      var d2 = track(absorb({construct_type:\"declarator\"}, d), location(), text());\n     return d2;\n    };\n  const peg$c159 = function(d: any): any {\n      var d2 = track(absorb({construct_type:\"declarator\", abstract: true}, d), location(), text());\n      return d2;\n    };\n  const peg$c160 = \"*\";\n  const peg$c161 = peg$literalExpectation(\"*\", false);\n  const peg$c162 = function(cv: any, decl: any): any { return absorb({pointer:decl}, cv); };\n  const peg$c163 = \"&\";\n  const peg$c164 = peg$literalExpectation(\"&\", false);\n  const peg$c165 = function(cv: any, decl: any): any { return absorb({reference:decl}, cv); };\n  const peg$c166 = function(decl: any, postfixes: any): any { return absorb(decl, {postfixes: postfixes}); };\n  const peg$c167 = function(p: any): any {return p};\n  const peg$c168 = function(args: any, cv: any): any { return absorb({kind:\"function\", args:args}, cv); };\n  const peg$c169 = \"[\";\n  const peg$c170 = peg$literalExpectation(\"[\", false);\n  const peg$c171 = \"]\";\n  const peg$c172 = peg$literalExpectation(\"]\", false);\n  const peg$c173 = function(size: any): any { return {kind:\"array\", size:size}; };\n  const peg$c174 = function(d: any): any { return {name:d}; };\n  const peg$c175 = function(d: any): any {return {sub:d};};\n  const peg$c176 = \"\";\n  const peg$c177 = function(): any {return {};};\n  const peg$c178 = function(n: any): any { return KEYWORDS.has(n.identifier); };\n  const peg$c179 = function(n: any): any { return n; };\n  const peg$c180 = function(specs: any, decl: any): any { return track({specs:specs, declarator:decl}, location(), text()); };\n  const peg$c181 = function(): any { return {const: true, volatile: true}; };\n  const peg$c182 = function(): any { return {const: true}; };\n  const peg$c183 = function(): any { return {volatile: true}; };\n  const peg$c184 = function(first: any, arg: any): any {return arg;};\n  const peg$c185 = function(first: any, rest: any): any { rest.unshift(first); return rest; };\n  const peg$c186 = function(): any {return [];};\n  const peg$c187 = function(specs: any, decl: any, init: any): any {return track({construct_type:\"parameter_declaration\", declarator:decl, specs:specs, initializer:init}, location(), text()); };\n  const peg$c188 = function(specs: any, decl: any): any {return track({construct_type:\"parameter_declaration\", specs:specs, declarator:decl}, location(), text()); };\n  const peg$c189 = function(first: any, op: any, e: any): any {return [op,e];};\n  const peg$c190 = function(first: any, rest: any): any { return track(composeBinaryOp(first, rest, \"left\", \"comma_expression\"), location(), text()); };\n  const peg$c191 = function(lhs: any, op: any, rhs: any): any { return track({construct_type: \"assignment_expression\", lhs:lhs, operator:op, rhs:rhs}, location(), text()); };\n  const peg$c192 = function(lhs: any, op: any, rhs: any): any { return track({construct_type: \"compound_assignment_expression\", lhs:lhs, operator:op, rhs:rhs}, location(), text()); };\n  const peg$c193 = \"*=\";\n  const peg$c194 = peg$literalExpectation(\"*=\", false);\n  const peg$c195 = \"/=\";\n  const peg$c196 = peg$literalExpectation(\"/=\", false);\n  const peg$c197 = \"%=\";\n  const peg$c198 = peg$literalExpectation(\"%=\", false);\n  const peg$c199 = \"+=\";\n  const peg$c200 = peg$literalExpectation(\"+=\", false);\n  const peg$c201 = \"-=\";\n  const peg$c202 = peg$literalExpectation(\"-=\", false);\n  const peg$c203 = \">>=\";\n  const peg$c204 = peg$literalExpectation(\">>=\", false);\n  const peg$c205 = \"<<=\";\n  const peg$c206 = peg$literalExpectation(\"<<=\", false);\n  const peg$c207 = \"&=\";\n  const peg$c208 = peg$literalExpectation(\"&=\", false);\n  const peg$c209 = \"and_eq\";\n  const peg$c210 = peg$literalExpectation(\"and_eq\", false);\n  const peg$c211 = function(): any {return \"&=\";};\n  const peg$c212 = \"^=\";\n  const peg$c213 = peg$literalExpectation(\"^=\", false);\n  const peg$c214 = \"xor_eq\";\n  const peg$c215 = peg$literalExpectation(\"xor_eq\", false);\n  const peg$c216 = function(): any {return \"^=\";};\n  const peg$c217 = \"|=\";\n  const peg$c218 = peg$literalExpectation(\"|=\", false);\n  const peg$c219 = \"or_eq\";\n  const peg$c220 = peg$literalExpectation(\"or_eq\", false);\n  const peg$c221 = function(): any {return \"|=\";};\n  const peg$c222 = function(sub: any): any { sub.constant = true; return sub; };\n  const peg$c223 = \"?\";\n  const peg$c224 = peg$literalExpectation(\"?\", false);\n  const peg$c225 = function(condition: any, then: any, otherwise: any): any { return track({construct_type: \"ternary_expression\", condition:condition, then:then, otherwise:otherwise}, location(), text()); };\n  const peg$c226 = \"||\";\n  const peg$c227 = peg$literalExpectation(\"||\", false);\n  const peg$c228 = \"or\";\n  const peg$c229 = peg$literalExpectation(\"or\", false);\n  const peg$c230 = function(first: any, op: any, e: any): any {return [\"||\",e];};\n  const peg$c231 = function(first: any, rest: any): any { return track(composeBinaryOp(first, rest, \"left\", \"logical_binary_operator_expression\"), location(), text()); };\n  const peg$c232 = \"&&\";\n  const peg$c233 = peg$literalExpectation(\"&&\", false);\n  const peg$c234 = \"and\";\n  const peg$c235 = peg$literalExpectation(\"and\", false);\n  const peg$c236 = function(first: any, op: any, e: any): any {return [\"&&\",e];};\n  const peg$c237 = \"|\";\n  const peg$c238 = peg$literalExpectation(\"|\", false);\n  const peg$c239 = \"bitor\";\n  const peg$c240 = peg$literalExpectation(\"bitor\", false);\n  const peg$c241 = function(first: any, op: any, e: any): any {return [\"|\",e];};\n  const peg$c242 = function(first: any, rest: any): any { return track(composeBinaryOp(first, rest, \"left\", \"arithmetic_binary_operator_expression\"), location(), text()); };\n  const peg$c243 = \"^\";\n  const peg$c244 = peg$literalExpectation(\"^\", false);\n  const peg$c245 = \"xor\";\n  const peg$c246 = peg$literalExpectation(\"xor\", false);\n  const peg$c247 = function(first: any, op: any, e: any): any {return [\"^\",e];};\n  const peg$c248 = \"bitand\";\n  const peg$c249 = peg$literalExpectation(\"bitand\", false);\n  const peg$c250 = function(first: any, op: any, e: any): any {return [\"&\",e];};\n  const peg$c251 = \"==\";\n  const peg$c252 = peg$literalExpectation(\"==\", false);\n  const peg$c253 = \"!=\";\n  const peg$c254 = peg$literalExpectation(\"!=\", false);\n  const peg$c255 = \"not_eq\";\n  const peg$c256 = peg$literalExpectation(\"not_eq\", false);\n  const peg$c257 = function(first: any): any {return \"!=\";};\n  const peg$c258 = function(first: any, rest: any): any { return track(composeBinaryOp(first, rest, \"left\", \"relational_binary_operator_expression\"), location(), text()); };\n  const peg$c259 = \"<=\";\n  const peg$c260 = peg$literalExpectation(\"<=\", false);\n  const peg$c261 = \">=\";\n  const peg$c262 = peg$literalExpectation(\">=\", false);\n  const peg$c263 = \"<\";\n  const peg$c264 = peg$literalExpectation(\"<\", false);\n  const peg$c265 = \">\";\n  const peg$c266 = peg$literalExpectation(\">\", false);\n  const peg$c267 = \"<<\";\n  const peg$c268 = peg$literalExpectation(\"<<\", false);\n  const peg$c269 = \">>\";\n  const peg$c270 = peg$literalExpectation(\">>\", false);\n  const peg$c271 = \"+\";\n  const peg$c272 = peg$literalExpectation(\"+\", false);\n  const peg$c273 = \"-\";\n  const peg$c274 = peg$literalExpectation(\"-\", false);\n  const peg$c275 = \"/\";\n  const peg$c276 = peg$literalExpectation(\"/\", false);\n  const peg$c277 = \"%\";\n  const peg$c278 = peg$literalExpectation(\"%\", false);\n  const peg$c279 = function(first: any, rest: any): any { return track(composeBinaryOp(first, rest, \"left\", \"pointer_to_member_expression\"), location(), text()); };\n  const peg$c280 = \".*\";\n  const peg$c281 = peg$literalExpectation(\".*\", false);\n  const peg$c282 = \"->*\";\n  const peg$c283 = peg$literalExpectation(\"->*\", false);\n  const peg$c284 = function(t: any, sub: any): any {\n        return track({construct_type: \"c_style_cast_expression\", type:t, operand:sub}, location(), text());\n  };\n  const peg$c285 = \"++\";\n  const peg$c286 = peg$literalExpectation(\"++\", false);\n  const peg$c287 = function(op: any, sub: any): any {\n        return track({construct_type: \"prefix_increment_expression\", operator:op, operand:sub}, location(), text());\n  };\n  const peg$c288 = \"--\";\n  const peg$c289 = peg$literalExpectation(\"--\", false);\n  const peg$c290 = function(op: any, sub: any): any {\n        return track(absorb({operand:sub}, op), location(), text());\n  };\n  const peg$c291 = \"sizeof\";\n  const peg$c292 = peg$literalExpectation(\"sizeof\", false);\n  const peg$c293 = function(op: any, sub: any): any {\n        return track({construct_type: \"sizeof_expression\", operator:\"sizeof\", operand:sub}, location(), text());\n  };\n  const peg$c294 = function(op: any, sub: any): any {\n        return track({construct_type: \"sizeof_type_expression\", operator:\"sizeof\", operand:sub}, location(), text());\n  };\n  const peg$c295 = function(): any {return {construct_type: \"dereference_expression\", operator: \"*\"};};\n  const peg$c296 = function(): any {return {construct_type: \"address_of_expression\", operator: \"&\"};};\n  const peg$c297 = function(): any {return {construct_type: \"unary_plus_expression\", operator: \"+\"};};\n  const peg$c298 = function(): any {return {construct_type: \"unary_minus_expression\", operator: \"-\"};};\n  const peg$c299 = \"!\";\n  const peg$c300 = peg$literalExpectation(\"!\", false);\n  const peg$c301 = function(): any {return {construct_type: \"logical_not_expression\", operator: \"!\"};};\n  const peg$c302 = \"not\";\n  const peg$c303 = peg$literalExpectation(\"not\", false);\n  const peg$c304 = \"~\";\n  const peg$c305 = peg$literalExpectation(\"~\", false);\n  const peg$c306 = function(): any {return {construct_type: \"bitwise_not_expression\", operator: \"~\"};};\n  const peg$c307 = \"compl\";\n  const peg$c308 = peg$literalExpectation(\"compl\", false);\n  const peg$c309 = \"new\";\n  const peg$c310 = peg$literalExpectation(\"new\", false);\n  const peg$c311 = function(id: any, init: any): any {\n      return track(absorb({construct_type: \"new_expression\", initializer: init}, id), location(), text());\n    };\n  const peg$c312 = function(id: any, init: any): any {\n      return track(absorb({construct_type: \"new_expression\", initializer: init}, id), location(), text());\n  };\n  const peg$c313 = function(specs: any, id: any): any {return id;};\n  const peg$c314 = function(specs: any, decl: any): any {\n      return track({specs:specs, declarator:decl}, location(), text());\n    };\n  const peg$c315 = function(d: any): any {\n    var d2 = track(absorb({construct_type:\"declarator\"}, d), location(), text());\n    return d2;\n\n  };\n  const peg$c316 = function(postfixes: any): any { return {postfixes: postfixes}; };\n  const peg$c317 = function(p: any): any {return p;};\n  const peg$c318 = function(size: any): any { return {type:\"array\", size:size}; };\n  const peg$c319 = function(args: any): any {return {args:args || []};};\n  const peg$c320 = \"delete\";\n  const peg$c321 = peg$literalExpectation(\"delete\", false);\n  const peg$c322 = function(t: any): any {\n      return track({construct_type: \"delete_expression\", operand: t}, location(), text());\n    };\n  const peg$c323 = function(t: any): any {\n      return track({construct_type: \"delete_array_expression\", operand: t}, location(), text()); };\n  const peg$c324 = \"static_cast\";\n  const peg$c325 = peg$literalExpectation(\"static_cast\", false);\n  const peg$c326 = function(t: any, sub: any): any { return track({construct_type: \"static_cast_expression\", type: t, operand:sub}, location(), text());};\n  const peg$c327 = \"dynamic_cast\";\n  const peg$c328 = peg$literalExpectation(\"dynamic_cast\", false);\n  const peg$c329 = function(t: any, sub: any): any { return track({construct_type: \"dynamic_cast_expression\", type: t, operand:sub}, location(), text());};\n  const peg$c330 = \"reinterpret_cast\";\n  const peg$c331 = peg$literalExpectation(\"reinterpret_cast\", false);\n  const peg$c332 = function(t: any, sub: any): any { return track({construct_type: \"reinterpret_cast_expression\", type: t, operand:sub}, location(), text());};\n  const peg$c333 = \"const_cast\";\n  const peg$c334 = peg$literalExpectation(\"const_cast\", false);\n  const peg$c335 = function(t: any, sub: any): any { return track({construct_type: \"const_cast_expression\", type: t, operand:sub}, location(), text());};\n  const peg$c336 = function(sub: any, op: any): any {return op;};\n  const peg$c337 = function(sub: any, ops: any): any { return ops.length > 0 ? track(postfixExp(ops, sub), location(), text()) : sub;};\n  const peg$c338 = function(sub: any): any { return track({construct_type:\"subscript_expression\", offset:sub}, location(), text()); };\n  const peg$c339 = function(args: any): any { return track({construct_type: \"function_call_expression\", args: args || []}, location(), text()); };\n  const peg$c340 = \".\";\n  const peg$c341 = peg$literalExpectation(\".\", false);\n  const peg$c342 = function(name: any): any { return track({construct_type: \"dot_expression\", member: name}, location(), text()); };\n  const peg$c343 = \"->\";\n  const peg$c344 = peg$literalExpectation(\"->\", false);\n  const peg$c345 = function(name: any): any { return track({construct_type: \"arrow_expression\", member: name}, location(), text()); };\n  const peg$c346 = function(): any { return track({construct_type: \"postfix_increment_expression\", operator: \"++\"}, location(), text()); };\n  const peg$c347 = function(): any { return track({construct_type: \"postfix_increment_expression\", operator: \"--\"}, location(), text()); };\n  const peg$c348 = function(type: any, args: any): any {\n      return track({construct_type: \"construct_expression\", type:type, args:args || []}, location(), text());\n  };\n  const peg$c349 = function(first: any, e: any): any {return e;};\n  const peg$c350 = function(sub: any): any {return track({construct_type: \"parentheses_expression\", subexpression:sub}, location(), text());};\n  const peg$c351 = \"this\";\n  const peg$c352 = peg$literalExpectation(\"this\", false);\n  const peg$c353 = function(): any {return track({construct_type: \"this_expression\"}, location(), text()); };\n  const peg$c354 = function(id: any): any { return track(absorb({construct_type: \"identifier_expression\"}, id), location(), text()); };\n  const peg$c355 = function(n: any, u: any): any {\n      n.push(u);\n      return {identifier: n};\n    };\n  const peg$c356 = \"::\";\n  const peg$c357 = peg$literalExpectation(\"::\", false);\n  const peg$c358 = function(id: any): any {return id;};\n  const peg$c359 = function(): any { return [];};\n  const peg$c360 = function(id: any): any {return track({identifier: id}, location(), text());};\n  const peg$c361 = \"operator\";\n  const peg$c362 = peg$literalExpectation(\"operator\", false);\n  const peg$c363 = function(op: any): any {return track({identifier: \"operator\"+op, operator: op}, location(), text());};\n  const peg$c364 = \"new[]\";\n  const peg$c365 = peg$literalExpectation(\"new[]\", false);\n  const peg$c366 = \"delete[]\";\n  const peg$c367 = peg$literalExpectation(\"delete[]\", false);\n  const peg$c368 = \"()\";\n  const peg$c369 = peg$literalExpectation(\"()\", false);\n  const peg$c370 = \"[]\";\n  const peg$c371 = peg$literalExpectation(\"[]\", false);\n  const peg$c372 = \"?:\";\n  const peg$c373 = peg$literalExpectation(\"?:\", false);\n  const peg$c374 = function(lit: any): any {return track({construct_type: \"numeric_literal_expression\", type:\"float\", value:lit}, location(), text());};\n  const peg$c375 = function(lit: any): any {return track({construct_type: \"numeric_literal_expression\", type:\"int\", value:lit}, location(), text());};\n  const peg$c376 = function(lit: any): any {return track({construct_type: \"numeric_literal_expression\", type:\"char\", value:lit}, location(), text());};\n  const peg$c377 = function(lit: any): any {return track({construct_type: \"string_literal_expression\", type:\"string\", value:lit}, location(), text());};\n  const peg$c378 = function(lit: any): any {return track({construct_type: \"numeric_literal_expression\", type:\"bool\", value:lit}, location(), text());};\n  const peg$c379 = /^[0-9]/;\n  const peg$c380 = peg$classExpectation([[\"0\", \"9\"]], false, false);\n  const peg$c381 = function(neg: any, digits: any): any { return parseInt((neg ? neg : \"\") + digits.join(\"\")); };\n  const peg$c382 = /^[0-9.]/;\n  const peg$c383 = peg$classExpectation([[\"0\", \"9\"], \".\"], false, false);\n  const peg$c384 = function(neg: any, digits: any): any {return digits.indexOf(\".\") == digits.lastIndexOf(\".\") && digits.indexOf(\".\") != -1;};\n  const peg$c385 = function(neg: any, digits: any): any { return parseFloat((neg ? neg : \"\") + digits.join(\"\")); };\n  const peg$c386 = \"'\";\n  const peg$c387 = peg$literalExpectation(\"'\", false);\n  const peg$c388 = /^[^'\\\\\\n]/;\n  const peg$c389 = peg$classExpectation([\"'\", \"\\\\\", \"\\n\"], true, false);\n  const peg$c390 = function(char: any): any { return char; };\n  const peg$c391 = \"\\\"\";\n  const peg$c392 = peg$literalExpectation(\"\\\"\", false);\n  const peg$c393 = /^[^\"\\\\\\n]/;\n  const peg$c394 = peg$classExpectation([\"\\\"\", \"\\\\\", \"\\n\"], true, false);\n  const peg$c395 = function(chars: any): any { return chars.join(\"\"); };\n  const peg$c396 = \"true\";\n  const peg$c397 = peg$literalExpectation(\"true\", false);\n  const peg$c398 = function(): any {return true;};\n  const peg$c399 = \"false\";\n  const peg$c400 = peg$literalExpectation(\"false\", false);\n  const peg$c401 = function(): any {return false;};\n  const peg$c402 = \"\\\\\\\"\";\n  const peg$c403 = peg$literalExpectation(\"\\\\\\\"\", false);\n  const peg$c404 = \"\\\\'\";\n  const peg$c405 = peg$literalExpectation(\"\\\\'\", false);\n  const peg$c406 = \"\\\\?\";\n  const peg$c407 = peg$literalExpectation(\"\\\\?\", false);\n  const peg$c408 = \"\\\\\\\\\";\n  const peg$c409 = peg$literalExpectation(\"\\\\\\\\\", false);\n  const peg$c410 = \"\\\\a\";\n  const peg$c411 = peg$literalExpectation(\"\\\\a\", false);\n  const peg$c412 = \"\\\\b\";\n  const peg$c413 = peg$literalExpectation(\"\\\\b\", false);\n  const peg$c414 = \"\\\\f\";\n  const peg$c415 = peg$literalExpectation(\"\\\\f\", false);\n  const peg$c416 = \"\\\\n\";\n  const peg$c417 = peg$literalExpectation(\"\\\\n\", false);\n  const peg$c418 = \"\\\\r\";\n  const peg$c419 = peg$literalExpectation(\"\\\\r\", false);\n  const peg$c420 = \"\\\\t\";\n  const peg$c421 = peg$literalExpectation(\"\\\\t\", false);\n  const peg$c422 = \"\\\\v\";\n  const peg$c423 = peg$literalExpectation(\"\\\\v\", false);\n  const peg$c424 = \"\\\\0\";\n  const peg$c425 = peg$literalExpectation(\"\\\\0\", false);\n  const peg$c426 = /^[0-8]/;\n  const peg$c427 = peg$classExpectation([[\"0\", \"8\"]], false, false);\n  const peg$c428 = peg$otherExpectation(\"identifier\");\n  const peg$c429 = function(first: any, rest: any): any {return track({identifier: first + rest.join(\"\")}, location(), text());};\n  const peg$c430 = /^[a-zA-Z0-9_]/;\n  const peg$c431 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"_\"], false, false);\n  const peg$c432 = /^[a-zA-Z_]/;\n  const peg$c433 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"_\"], false, false);\n  const peg$c434 = function(id: any, t: any): any { return {identifier: id.identifier + \"<\" + t.identifier + \">\"}; };\n  const peg$c435 = \"@\";\n  const peg$c436 = peg$literalExpectation(\"@\", false);\n  const peg$c437 = /^[a-zA-Z_1-9~]/;\n  const peg$c438 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], \"_\", [\"1\", \"9\"], \"~\"], false, false);\n  const peg$c439 = function(id: any): any { return track({construct_type: \"opaque_expression\", id: id.join(\"\")}, location(), text()); };\n  const peg$c440 = peg$otherExpectation(\"optional whitespace\");\n  const peg$c441 = /^[ \\t\\n\\r]/;\n  const peg$c442 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false);\n  const peg$c443 = peg$otherExpectation(\"whitespace\");\n  const peg$c444 = function(id: any): any {return isUserTypeName(id.identifier);};\n  const peg$c445 = function(head: any): any {\n        classNameStack.push(head.name.identifier);\n        getUserTypeNames()[head.name.identifier]=true;\n        return true;\n      };\n  const peg$c446 = function(head: any, mems: any): any { \n        classNameStack.pop();\n        return track({construct_type: \"class_definition\", head: head, memberSpecs: mems}, location(), text());\n      };\n  const peg$c447 = function(head: any): any { classNameStack.pop(); return false; };\n  const peg$c448 = function(key: any, name: any, b: any): any {return b;};\n  const peg$c449 = function(key: any, name: any, bases: any): any { return track({construct_type: \"class_head\", classKey:key, name:name, bases:bases ?? []}, location(), text()); };\n  const peg$c450 = \"class\";\n  const peg$c451 = peg$literalExpectation(\"class\", false);\n  const peg$c452 = \"struct\";\n  const peg$c453 = peg$literalExpectation(\"struct\", false);\n  const peg$c454 = \"union\";\n  const peg$c455 = peg$literalExpectation(\"union\", false);\n  const peg$c456 = function(access: any, m: any): any {return m};\n  const peg$c457 = function(access: any, members: any): any { return track({construct_type: \"member_specification\", members: members, access: access}, location(), text()); };\n  const peg$c458 = function(m: any): any {return m};\n  const peg$c459 = function(members: any): any { return track({construct_type: \"member_specification\", members: members}, location(), text()); };\n  const peg$c460 = \"private\";\n  const peg$c461 = peg$literalExpectation(\"private\", false);\n  const peg$c462 = \"protected\";\n  const peg$c463 = peg$literalExpectation(\"protected\", false);\n  const peg$c464 = \"public\";\n  const peg$c465 = peg$literalExpectation(\"public\", false);\n  const peg$c466 = function(specs: any, declarators: any): any {\n        return track({construct_type: \"simple_member_declaration\", specs:specs, declarators:declarators}, location(), text());\n      };\n  const peg$c467 = function(declarators: any): any {\n        return track({construct_type: \"simple_member_declaration\", specs:emptyDeclSpecs, declarators:declarators}, location(), text());\n      };\n  const peg$c468 = function(f: any): any { return f; };\n  const peg$c469 = \"0\";\n  const peg$c470 = peg$literalExpectation(\"0\", false);\n  const peg$c471 = function(d: any): any {d.pureVirtual = true; return d;};\n  const peg$c472 = function(d: any): any {d.library_unsupported = true; return d;};\n  const peg$c473 = function(d: any, i: any): any {d.initializer = i; return d;};\n  const peg$c474 = function(b: any): any {return b};\n  const peg$c475 = function(first: any, b: any): any {return b;};\n  const peg$c476 = function(a: any): any {return a;};\n  const peg$c477 = function(a: any, c: any): any {\n      return track({construct_type: \"base_specifier\", name: c, virtual: true, access: a}, location(), text());};\n  const peg$c478 = function(a: any, c: any): any {\n      return track({construct_type: \"base_specifier\", name: c, access: a}, location(), text());};\n  const peg$c479 = function(c: any): any {\n      return track({construct_type: \"base_specifier\", name: c}, location(), text());};\n  const peg$c480 = function(n: any, c: any): any {\n      n.push(c);\n      return n;};\n\n  let peg$currPos = 0;\n  let peg$savedPos = 0;\n  const peg$posDetailsCache = [{ line: 1, column: 1 }];\n  let peg$maxFailPos = 0;\n  let peg$maxFailExpected: Expectation[] = [];\n  let peg$silentFails = 0;\n\n  let peg$result;\n\n  if (options.startRule !== undefined) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text(): string {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location(): IFileRange {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description: string, location1?: IFileRange) {\n    location1 = location1 !== undefined\n      ? location1\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location1\n    );\n  }\n\n  function error(message: string, location1?: IFileRange) {\n    location1 = location1 !== undefined\n      ? location1\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildSimpleError(message, location1);\n  }\n\n  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {\n    return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation(): IAnyExpectation {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation(): IEndExpectation {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description: string): IOtherExpectation {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos: number) {\n    let details = peg$posDetailsCache[pos];\n    let p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos: number, endPos: number): IFileRange {\n    const startPosDetails = peg$computePosDetails(startPos);\n    const endPosDetails = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected1: Expectation) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected1);\n  }\n\n  function peg$buildSimpleError(message: string, location1: IFileRange) {\n    return new SyntaxError(message, [], \"\", location1);\n  }\n\n  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {\n    return new SyntaxError(\n      SyntaxError.buildMessage(expected1, found),\n      expected1,\n      found,\n      location1\n    );\n  }\n\n  function peg$parsestart(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsedecl_or_comment();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsews();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c0(s4);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsedecl_or_comment();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsews();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c0(s4);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedecl_or_comment(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecomment();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c2();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedeclaration();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c3) {\n      s1 = peg$c3;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c5.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (peg$c5.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s3 = peg$c7;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c9) {\n        s1 = peg$c9;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c11) {\n          s5 = peg$c11;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = undefined;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c13); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          if (input.substr(peg$currPos, 2) === peg$c11) {\n            s5 = peg$c11;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c12); }\n          }\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = undefined;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c13); }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c11) {\n            s3 = peg$c11;\n            peg$currPos += 2;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c12); }\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestatement(): any {\n    let s0;\n\n    s0 = peg$parselabeled_statement();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseblock();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseselection_statement();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseiteration_statement();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsejump_statement();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsedeclaration_statement();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseexpression_statement();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsenull_statement();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselabeled_statement(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseidentifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s3 = peg$c14;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsestatement();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c16(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c17) {\n        s1 = peg$c17;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c18); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseWS();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexp_const();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 58) {\n                s5 = peg$c14;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c15); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsews();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsestatement();\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c19(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 7) === peg$c20) {\n          s1 = peg$c20;\n          peg$currPos += 7;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c21); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsews();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 58) {\n              s3 = peg$c14;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c15); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsews();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsestatement();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c22(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpression_statement(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpression();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 59) {\n          s3 = peg$c23;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c25(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenull_statement(): any {\n    let s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsews();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 59) {\n        s2 = peg$c23;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c24); }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c26();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock(): any {\n    let s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s1 = peg$c27;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parsestatement();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c29(s5);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parsestatement();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c29(s5);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 125) {\n            s4 = peg$c30;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c31); }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c32(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselection_statement(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c33) {\n      s1 = peg$c33;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c35;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpression();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsews();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c37;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsews();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsestatement();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsews();\n                      if (s10 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 4) === peg$c39) {\n                          s11 = peg$c39;\n                          peg$currPos += 4;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsews();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsestatement();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c41(s5, s9, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c33) {\n        s1 = peg$c33;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s3 = peg$c35;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c36); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpression();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsews();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s7 = peg$c37;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsews();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsestatement();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c42(s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseiteration_statement(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c43) {\n      s1 = peg$c43;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c44); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c35;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpression();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsews();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c37;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsews();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsestatement();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c45(s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c46) {\n        s1 = peg$c46;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c47); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseidentifierChar();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = undefined;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsestatement();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsews();\n              if (s5 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 5) === peg$c43) {\n                  s6 = peg$c43;\n                  peg$currPos += 5;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c44); }\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsews();\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s8 = peg$c35;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsews();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parseexpression();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsews();\n                          if (s11 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 41) {\n                              s12 = peg$c37;\n                              peg$currPos++;\n                            } else {\n                              s12 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                            }\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parsews();\n                              if (s13 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 59) {\n                                  s14 = peg$c23;\n                                  peg$currPos++;\n                                } else {\n                                  s14 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                                }\n                                if (s14 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c48(s4, s10);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 3) === peg$c49) {\n          s1 = peg$c49;\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c50); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsews();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s3 = peg$c35;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c36); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsews();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsefor_init_statement();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parsews();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseexpression();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parsews();\n                      if (s8 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 59) {\n                          s9 = peg$c23;\n                          peg$currPos++;\n                        } else {\n                          s9 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parsews();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseexpression();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parsews();\n                              if (s12 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 41) {\n                                  s13 = peg$c37;\n                                  peg$currPos++;\n                                } else {\n                                  s13 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                                }\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parsews();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parsestatement();\n                                    if (s15 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c51(s5, s7, s11, s15);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_init_statement(): any {\n    let s0;\n\n    s0 = peg$parseexpression_statement();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsenull_statement();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedeclaration_statement();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejump_statement(): any {\n    let s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c52) {\n      s1 = peg$c52;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c53); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseidentifierChar();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 59) {\n            s4 = peg$c23;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c24); }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c54();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 8) === peg$c55) {\n        s1 = peg$c55;\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c56); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseidentifierChar();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = undefined;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 59) {\n              s4 = peg$c23;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c24); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c57();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 6) === peg$c58) {\n          s1 = peg$c58;\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c59); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          peg$silentFails++;\n          s3 = peg$parseidentifierChar();\n          peg$silentFails--;\n          if (s3 === peg$FAILED) {\n            s2 = undefined;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsews();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseexpression();\n              if (s4 === peg$FAILED) {\n                s4 = null;\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsews();\n                if (s5 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 59) {\n                    s6 = peg$c23;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c60(s4);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclaration_statement(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedeclaration();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c61(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedeclaration(): any {\n    let s0;\n\n    s0 = peg$parsesimple_declaration();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseclass_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsefunction_definition();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesimple_declaration(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedecl_specifiers();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c62(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = undefined;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifier();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedeclarator_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsews();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 59) {\n                  s7 = peg$c23;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c63(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclarator_list(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedeclarator_init();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s5 = peg$c64;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedeclarator_init();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c66(s1, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c64;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedeclarator_init();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c66(s1, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c67(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseclass_definition(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseclass_specifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 59) {\n          s3 = peg$c23;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c68(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunction_definition(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedecl_specifiers_prohibit_class_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseidentifier();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsedeclarator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsews();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsector_initializer();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsews();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseblock();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c69(s1, s4, s6, s8);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsedeclarator();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsector_initializer();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsews();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseblock();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c70(s2, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsedecl_specifiers();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          peg$silentFails++;\n          s3 = peg$parseidentifier();\n          peg$silentFails--;\n          if (s3 === peg$FAILED) {\n            s2 = undefined;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsews();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsedeclarator();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsews();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parsector_initializer();\n                  if (s6 === peg$FAILED) {\n                    s6 = null;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parsews();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parseblock();\n                      if (s8 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c69(s1, s4, s6, s8);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsector_initializer(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s1 = peg$c14;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c15); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsemem_initializer();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s7 = peg$c64;\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c65); }\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parsews();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsemem_initializer();\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s5;\n                  s6 = peg$c71(s3, s9);\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s7 = peg$c64;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c65); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsews();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsemem_initializer();\n                  if (s9 !== peg$FAILED) {\n                    peg$savedPos = s5;\n                    s6 = peg$c71(s3, s9);\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c72(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_initializer(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseidentifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c35;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexp_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsews();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c37;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c73(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedecl_specifiers(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_decl_specifiers_non_type();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedecl_specifier();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parseWS();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedecl_specifier_non_user_type_name();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s5;\n              s6 = peg$c74(s1, s3, s7);\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parseWS();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedecl_specifier_non_user_type_name();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s5;\n                s6 = peg$c74(s1, s3, s7);\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c75(s1, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parse_decl_specifiers_non_type(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedecl_specifier_non_type();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseWS();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsedecl_specifier_non_type();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$currPos;\n          peg$silentFails++;\n          s7 = peg$parseidentifier();\n          peg$silentFails--;\n          if (s7 === peg$FAILED) {\n            s6 = undefined;\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c76(s1, s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseWS();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsedecl_specifier_non_type();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$parseidentifier();\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = undefined;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c76(s1, s5);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c77(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parse_decl_specifiers_non_user_type_name(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedecl_specifier_non_user_type_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseWS();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsedecl_specifier_non_user_type_name();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$currPos;\n          peg$silentFails++;\n          s7 = peg$parseidentifier();\n          peg$silentFails--;\n          if (s7 === peg$FAILED) {\n            s6 = undefined;\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c76(s1, s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseWS();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsedecl_specifier_non_user_type_name();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$parseidentifier();\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = undefined;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c76(s1, s5);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c77(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedecl_specifier(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetype_specifier();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c78(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsestorage_class_specifier();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c79(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsefunction_specifier();\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7) === peg$c80) {\n            s0 = peg$c80;\n            peg$currPos += 7;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c81); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c82) {\n              s0 = peg$c82;\n              peg$currPos += 6;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c83); }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedecl_specifier_non_type(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c84) {\n      s1 = peg$c84;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c85); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c86();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 8) === peg$c87) {\n        s1 = peg$c87;\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c88); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c89();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsestorage_class_specifier();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c79(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunction_specifier();\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7) === peg$c80) {\n              s0 = peg$c80;\n              peg$currPos += 7;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c81); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 6) === peg$c82) {\n                s0 = peg$c82;\n                peg$currPos += 6;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c83); }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedecl_specifier_non_user_type_name(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsesimple_type_name_non_user();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c78(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseelaborated_type_specifier();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c78(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 5) === peg$c84) {\n          s1 = peg$c84;\n          peg$currPos += 5;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c85); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c86();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 8) === peg$c87) {\n            s1 = peg$c87;\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c88); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c89();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseclass_specifier();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseenum_specifier();\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsestorage_class_specifier();\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c79(s1);\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsefunction_specifier();\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7) === peg$c80) {\n                      s0 = peg$c80;\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 6) === peg$c82) {\n                        s0 = peg$c82;\n                        peg$currPos += 6;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c83); }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedecl_specifiers_prohibit_class_name(): any {\n    let s0, s1, s2;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c90();\n    if (s1) {\n      s1 = undefined;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedecl_specifiers();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      peg$savedPos = peg$currPos;\n      s1 = peg$c92();\n      if (s1) {\n        s1 = undefined;\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 39) === peg$c93) {\n          s2 = peg$c93;\n          peg$currPos += 39;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c94); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetype_specifiers(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetype_specifier();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseWS();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsetype_specifier();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c95(s1, s5);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseWS();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsetype_specifier();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c95(s1, s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c96(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetype_specifier(): any {\n    let s0;\n\n    s0 = peg$parsetrailing_type_specifier();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseclass_specifier();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseenum_specifier();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrailing_type_specifier(): any {\n    let s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsesimple_type_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c97(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = undefined;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c98(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseelaborated_type_specifier();\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c84) {\n          s0 = peg$c84;\n          peg$currPos += 5;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c85); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8) === peg$c87) {\n            s0 = peg$c87;\n            peg$currPos += 8;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c88); }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseelaborated_type_specifier(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseclass_key();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseclass_name();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c99(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage_class_specifier(): any {\n    let s0;\n\n    if (input.substr(peg$currPos, 8) === peg$c100) {\n      s0 = peg$c100;\n      peg$currPos += 8;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c101); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 6) === peg$c102) {\n        s0 = peg$c102;\n        peg$currPos += 6;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c103); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 12) === peg$c104) {\n          s0 = peg$c104;\n          peg$currPos += 12;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c105); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c106) {\n            s0 = peg$c106;\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c107); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7) === peg$c108) {\n              s0 = peg$c108;\n              peg$currPos += 7;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c109); }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunction_specifier(): any {\n    let s0;\n\n    if (input.substr(peg$currPos, 6) === peg$c110) {\n      s0 = peg$c110;\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c111); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 8) === peg$c112) {\n        s0 = peg$c112;\n        peg$currPos += 8;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c113); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c114) {\n          s0 = peg$c114;\n          peg$currPos += 7;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c115); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesimple_type_name(): any {\n    let s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_simple_type_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseidentifierChar();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c117(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c116); }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_simple_type_name(): any {\n    let s0, s1;\n\n    if (input.substr(peg$currPos, 4) === peg$c118) {\n      s0 = peg$c118;\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c119); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 5) === peg$c120) {\n        s0 = peg$c120;\n        peg$currPos += 5;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c121); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c122) {\n          s0 = peg$c122;\n          peg$currPos += 3;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c123); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c124) {\n            s0 = peg$c124;\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4) === peg$c126) {\n              s0 = peg$c126;\n              peg$currPos += 4;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c127); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4) === peg$c128) {\n                s0 = peg$c128;\n                peg$currPos += 4;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c129); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c130) {\n                  s0 = peg$c130;\n                  peg$currPos += 6;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c131); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 8) === peg$c132) {\n                    s0 = peg$c132;\n                    peg$currPos += 8;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c133); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 5) === peg$c134) {\n                      s0 = peg$c134;\n                      peg$currPos += 5;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c135); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 6) === peg$c136) {\n                        s0 = peg$c136;\n                        peg$currPos += 6;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c137); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4) === peg$c138) {\n                          s0 = peg$c138;\n                          peg$currPos += 4;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c139); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          s1 = peg$parseclass_name();\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c140(s1);\n                          }\n                          s0 = s1;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesimple_type_name_non_user(): any {\n    let s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_simple_type_name_non_user();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseidentifierChar();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c117(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c116); }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_simple_type_name_non_user(): any {\n    let s0;\n\n    if (input.substr(peg$currPos, 4) === peg$c118) {\n      s0 = peg$c118;\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c119); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 5) === peg$c120) {\n        s0 = peg$c120;\n        peg$currPos += 5;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c121); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c122) {\n          s0 = peg$c122;\n          peg$currPos += 3;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c123); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c126) {\n            s0 = peg$c126;\n            peg$currPos += 4;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c127); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4) === peg$c128) {\n              s0 = peg$c128;\n              peg$currPos += 4;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c129); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 6) === peg$c130) {\n                s0 = peg$c130;\n                peg$currPos += 6;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c131); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 8) === peg$c132) {\n                  s0 = peg$c132;\n                  peg$currPos += 8;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c133); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 5) === peg$c134) {\n                    s0 = peg$c134;\n                    peg$currPos += 5;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c135); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6) === peg$c136) {\n                      s0 = peg$c136;\n                      peg$currPos += 6;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c137); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 4) === peg$c138) {\n                        s0 = peg$c138;\n                        peg$currPos += 4;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c139); }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseenum_specifier(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c141) {\n      s1 = peg$c141;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c142); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseidentifier();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c27;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c28); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseenumerator();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parsews();\n                if (s9 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s10 = peg$c64;\n                    peg$currPos++;\n                  } else {\n                    s10 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c65); }\n                  }\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parsews();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parseenumerator();\n                      if (s12 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c143(s3, s6, s12);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$currPos;\n                  s9 = peg$parsews();\n                  if (s9 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s10 = peg$c64;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c65); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parsews();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseenumerator();\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s8;\n                          s9 = peg$c143(s3, s6, s12);\n                          s8 = s9;\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsews();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s9 = peg$c30;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c144(s3, s6, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseenumerator(): any {\n    let s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseidentifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsews();\n      if (s3 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s4 = peg$c145;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c146); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsews();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseexp_const();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s2;\n              s3 = peg$c147(s1, s6);\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c148(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclarator_init(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedeclarator();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c145;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c146); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 21) === peg$c149) {\n              s5 = peg$c149;\n              peg$currPos += 21;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c150); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c151(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedeclarator();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseinitializer();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c152(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinitializer(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsebrace_or_equal_initializer();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c35;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexp_list();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s5 = peg$c37;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c38); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c153(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebrace_or_equal_initializer(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s1 = peg$c145;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c146); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp_assn();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c154(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 61) {\n        s1 = peg$c145;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c146); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s3 = peg$c27;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c28); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseinitializer_list();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsews();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s7 = peg$c30;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c155(s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinitializer_list(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_assn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s5 = peg$c64;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_assn();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c156(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c64;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_assn();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c156(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c157(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclarator(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_declarator();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c158(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseabstract_declarator(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_abs_declarator();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c159(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parse_declarator(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c160;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecv_qualifier();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_declarator();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c162(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 38) {\n        s1 = peg$c163;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c164); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecv_qualifier();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_declarator();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c165(s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsedeclarator_simple();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedeclarator_postfixes();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c166(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedeclarator_simple();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse_abs_declarator(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c160;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecv_qualifier();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_abs_declarator();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c162(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 38) {\n        s1 = peg$c163;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c164); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecv_qualifier();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_abs_declarator();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c165(s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseabs_declarator_simple();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedeclarator_postfixes();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c166(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseabs_declarator_simple();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclarator_postfixes(): any {\n    let s0, s1, s2, s3;\n\n    s0 = [];\n    s1 = peg$currPos;\n    s2 = peg$parsews();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsedeclarator_postfix();\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c167(s3);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$currPos;\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsedeclarator_postfix();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s1;\n            s2 = peg$c167(s3);\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclarator_postfix(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c35;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseargument_declaration_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c37;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c38); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsews();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecv_qualifier();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c168(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c169;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c170); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexp_const();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s5 = peg$c171;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c172); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c173(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclarator_simple(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedname();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c174(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c35;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_declarator();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s5 = peg$c37;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c38); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c175(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseabs_declarator_simple(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c35;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_abs_declarator();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c37;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c38); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c175(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$c176;\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c177();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedname(): any {\n    let s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsename();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c178(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = undefined;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c179(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetype_id(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetype_specifiers();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseabstract_declarator();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c180(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecv_qualifier(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c84) {\n      s1 = peg$c84;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c85); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 8) === peg$c87) {\n          s3 = peg$c87;\n          peg$currPos += 8;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c88); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c181();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 8) === peg$c87) {\n        s1 = peg$c87;\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c88); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseWS();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 5) === peg$c84) {\n            s3 = peg$c84;\n            peg$currPos += 5;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c85); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c181();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 5) === peg$c84) {\n          s1 = peg$c84;\n          peg$currPos += 5;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c85); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c182();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 8) === peg$c87) {\n            s1 = peg$c87;\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c88); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c183();\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseargument_declaration_list(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseargument_declaration();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s5 = peg$c64;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseargument_declaration();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c184(s1, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c64;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseargument_declaration();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c184(s1, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c185(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$c176;\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c186();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseargument_declaration(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedecl_specifiers();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c62(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = undefined;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifier();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = undefined;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedeclarator();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsews();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 61) {\n                  s7 = peg$c145;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c146); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsews();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexp_assn();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c187(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedecl_specifiers();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$c62(s1);\n        if (s2) {\n          s2 = peg$FAILED;\n        } else {\n          s2 = undefined;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseidentifier();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = undefined;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsedeclarator();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c188(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsedecl_specifiers();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$c62(s1);\n          if (s2) {\n            s2 = peg$FAILED;\n          } else {\n            s2 = undefined;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            s4 = peg$parseidentifier();\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = undefined;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsews();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseabstract_declarator();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parsews();\n                  if (s6 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 61) {\n                      s7 = peg$c145;\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c146); }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parsews();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseexp_assn();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c187(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsedecl_specifiers();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = peg$currPos;\n            s2 = peg$c62(s1);\n            if (s2) {\n              s2 = peg$FAILED;\n            } else {\n              s2 = undefined;\n            }\n            if (s2 !== peg$FAILED) {\n              s3 = peg$currPos;\n              peg$silentFails++;\n              s4 = peg$parseidentifier();\n              peg$silentFails--;\n              if (s4 === peg$FAILED) {\n                s3 = undefined;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parsews();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseabstract_declarator();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c188(s1, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpression(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_assn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s5 = peg$c64;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_assn();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c189(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c64;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_assn();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c189(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c190(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexp_assn();\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_assn(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_unary();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c145;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c146); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexp_assn();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c191(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseexp_unary();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseop_comp_assn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexp_assn();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c192(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseexp_cond();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseop_comp_assn(): any {\n    let s0, s1, s2, s3;\n\n    if (input.substr(peg$currPos, 2) === peg$c193) {\n      s0 = peg$c193;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c194); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c195) {\n        s0 = peg$c195;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c196); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c197) {\n          s0 = peg$c197;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c198); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c199) {\n            s0 = peg$c199;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c200); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c201) {\n              s0 = peg$c201;\n              peg$currPos += 2;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c202); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c203) {\n                s0 = peg$c203;\n                peg$currPos += 3;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c204); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 3) === peg$c205) {\n                  s0 = peg$c205;\n                  peg$currPos += 3;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c207) {\n                    s0 = peg$c207;\n                    peg$currPos += 2;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 6) === peg$c209) {\n                      s1 = peg$c209;\n                      peg$currPos += 6;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$currPos;\n                      peg$silentFails++;\n                      s3 = peg$parseidentifierChar();\n                      peg$silentFails--;\n                      if (s3 === peg$FAILED) {\n                        s2 = undefined;\n                      } else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                      }\n                      if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c211();\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c212) {\n                        s0 = peg$c212;\n                        peg$currPos += 2;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c213); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.substr(peg$currPos, 6) === peg$c214) {\n                          s1 = peg$c214;\n                          peg$currPos += 6;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c215); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          s2 = peg$currPos;\n                          peg$silentFails++;\n                          s3 = peg$parseidentifierChar();\n                          peg$silentFails--;\n                          if (s3 === peg$FAILED) {\n                            s2 = undefined;\n                          } else {\n                            peg$currPos = s2;\n                            s2 = peg$FAILED;\n                          }\n                          if (s2 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c216();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 2) === peg$c217) {\n                            s0 = peg$c217;\n                            peg$currPos += 2;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.substr(peg$currPos, 5) === peg$c219) {\n                              s1 = peg$c219;\n                              peg$currPos += 5;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c220); }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              s2 = peg$currPos;\n                              peg$silentFails++;\n                              s3 = peg$parseidentifierChar();\n                              peg$silentFails--;\n                              if (s3 === peg$FAILED) {\n                                s2 = undefined;\n                              } else {\n                                peg$currPos = s2;\n                                s2 = peg$FAILED;\n                              }\n                              if (s2 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c221();\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_const(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_cond();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c222(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseexp_cond(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_or();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 63) {\n          s3 = peg$c223;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c224); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpression();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsews();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 58) {\n                  s7 = peg$c14;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c15); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsews();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexp_assn();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c225(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexp_or();\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_or(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_and();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c226) {\n          s5 = peg$c226;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c227); }\n        }\n        if (s5 === peg$FAILED) {\n          s5 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c228) {\n            s6 = peg$c228;\n            peg$currPos += 2;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c229); }\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$currPos;\n            peg$silentFails++;\n            s8 = peg$parseidentifierChar();\n            peg$silentFails--;\n            if (s8 === peg$FAILED) {\n              s7 = undefined;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_and();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c230(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c226) {\n            s5 = peg$c226;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c227); }\n          }\n          if (s5 === peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c228) {\n              s6 = peg$c228;\n              peg$currPos += 2;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c229); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              peg$silentFails++;\n              s8 = peg$parseidentifierChar();\n              peg$silentFails--;\n              if (s8 === peg$FAILED) {\n                s7 = undefined;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_and();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c230(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c231(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_and(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_or_bit();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c232) {\n          s5 = peg$c232;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c233); }\n        }\n        if (s5 === peg$FAILED) {\n          s5 = peg$currPos;\n          if (input.substr(peg$currPos, 3) === peg$c234) {\n            s6 = peg$c234;\n            peg$currPos += 3;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c235); }\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$currPos;\n            peg$silentFails++;\n            s8 = peg$parseidentifierChar();\n            peg$silentFails--;\n            if (s8 === peg$FAILED) {\n              s7 = undefined;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_or_bit();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c236(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c232) {\n            s5 = peg$c232;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c233); }\n          }\n          if (s5 === peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 3) === peg$c234) {\n              s6 = peg$c234;\n              peg$currPos += 3;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c235); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              peg$silentFails++;\n              s8 = peg$parseidentifierChar();\n              peg$silentFails--;\n              if (s8 === peg$FAILED) {\n                s7 = undefined;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_or_bit();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c236(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c231(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_or_bit(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_xor_bit();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 124) {\n          s5 = peg$c237;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c238); }\n        }\n        if (s5 === peg$FAILED) {\n          s5 = peg$currPos;\n          if (input.substr(peg$currPos, 5) === peg$c239) {\n            s6 = peg$c239;\n            peg$currPos += 5;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c240); }\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$currPos;\n            peg$silentFails++;\n            s8 = peg$parseidentifierChar();\n            peg$silentFails--;\n            if (s8 === peg$FAILED) {\n              s7 = undefined;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_xor_bit();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c241(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 124) {\n            s5 = peg$c237;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c238); }\n          }\n          if (s5 === peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 5) === peg$c239) {\n              s6 = peg$c239;\n              peg$currPos += 5;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c240); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              peg$silentFails++;\n              s8 = peg$parseidentifierChar();\n              peg$silentFails--;\n              if (s8 === peg$FAILED) {\n                s7 = undefined;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_xor_bit();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c241(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c242(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_xor_bit(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_and_bit();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 94) {\n          s5 = peg$c243;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c244); }\n        }\n        if (s5 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c245) {\n            s5 = peg$c245;\n            peg$currPos += 3;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c246); }\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_and_bit();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c247(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 94) {\n            s5 = peg$c243;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c244); }\n          }\n          if (s5 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c245) {\n              s5 = peg$c245;\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c246); }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_and_bit();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c247(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c242(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_and_bit(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_eq();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 38) {\n          s6 = peg$c163;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c164); }\n        }\n        if (s6 !== peg$FAILED) {\n          s7 = peg$currPos;\n          peg$silentFails++;\n          if (input.charCodeAt(peg$currPos) === 38) {\n            s8 = peg$c163;\n            peg$currPos++;\n          } else {\n            s8 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c164); }\n          }\n          peg$silentFails--;\n          if (s8 === peg$FAILED) {\n            s7 = undefined;\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n          if (s7 !== peg$FAILED) {\n            s6 = [s6, s7];\n            s5 = s6;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 === peg$FAILED) {\n          s5 = peg$currPos;\n          if (input.substr(peg$currPos, 6) === peg$c248) {\n            s6 = peg$c248;\n            peg$currPos += 6;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c249); }\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$currPos;\n            peg$silentFails++;\n            s8 = peg$parseidentifierChar();\n            peg$silentFails--;\n            if (s8 === peg$FAILED) {\n              s7 = undefined;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_eq();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c250(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 38) {\n            s6 = peg$c163;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c164); }\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 38) {\n              s8 = peg$c163;\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c164); }\n            }\n            peg$silentFails--;\n            if (s8 === peg$FAILED) {\n              s7 = undefined;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 === peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 6) === peg$c248) {\n              s6 = peg$c248;\n              peg$currPos += 6;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c249); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              peg$silentFails++;\n              s8 = peg$parseidentifierChar();\n              peg$silentFails--;\n              if (s8 === peg$FAILED) {\n                s7 = undefined;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_eq();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c250(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c242(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_eq(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_rel();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c251) {\n          s5 = peg$c251;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c252); }\n        }\n        if (s5 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c253) {\n            s5 = peg$c253;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c254); }\n          }\n          if (s5 === peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 6) === peg$c255) {\n              s6 = peg$c255;\n              peg$currPos += 6;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c256); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              peg$silentFails++;\n              s8 = peg$parseidentifierChar();\n              peg$silentFails--;\n              if (s8 === peg$FAILED) {\n                s7 = undefined;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s5;\n                s6 = peg$c257(s1);\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_rel();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c189(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c251) {\n            s5 = peg$c251;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c252); }\n          }\n          if (s5 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c253) {\n              s5 = peg$c253;\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c254); }\n            }\n            if (s5 === peg$FAILED) {\n              s5 = peg$currPos;\n              if (input.substr(peg$currPos, 6) === peg$c255) {\n                s6 = peg$c255;\n                peg$currPos += 6;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c256); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                peg$silentFails++;\n                s8 = peg$parseidentifierChar();\n                peg$silentFails--;\n                if (s8 === peg$FAILED) {\n                  s7 = undefined;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s5;\n                  s6 = peg$c257(s1);\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_rel();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c189(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c258(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_rel(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_shift();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseop_rel();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_shift();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c189(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseop_rel();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_shift();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c189(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c258(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseop_rel(): any {\n    let s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c259) {\n      s0 = peg$c259;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c260); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c261) {\n        s0 = peg$c261;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c262); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 60) {\n          s0 = peg$c263;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c264); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 62) {\n            s0 = peg$c265;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c266); }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_shift(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_add();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseop_shift();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_add();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c189(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseop_shift();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_add();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c189(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c242(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseop_shift(): any {\n    let s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c267) {\n      s0 = peg$c267;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c268); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c269) {\n        s0 = peg$c269;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c270); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_add(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_mult();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseop_add();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_mult();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c189(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseop_add();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_mult();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c189(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c242(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseop_add(): any {\n    let s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c271;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c272); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c273;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c274); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_mult(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_pm();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseop_mult();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_pm();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c189(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseop_mult();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_pm();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c189(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c242(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseop_mult(): any {\n    let s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c160;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c275;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c276); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c277;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c278); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_pm(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_cast();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseop_pm();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_cast();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c189(s1, s5, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseop_pm();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_cast();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c189(s1, s5, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c279(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseop_pm(): any {\n    let s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c280) {\n      s0 = peg$c280;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3) === peg$c282) {\n        s0 = peg$c282;\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c283); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_cast(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c35;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetype_id();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c37;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c38); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsews();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexp_cast();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c284(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexp_unary();\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_unary(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c285) {\n      s1 = peg$c285;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c286); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp_unary();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c287(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c288) {\n        s1 = peg$c288;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c289); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexp_unary();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c287(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseop_unary();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsews();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseexp_cast();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c290(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 6) === peg$c291) {\n            s1 = peg$c291;\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c292); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsews();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseexp_unary();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c293(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6) === peg$c291) {\n              s1 = peg$c291;\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c292); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parsews();\n              if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s3 = peg$c35;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parsews();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsesimple_type_name();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parsews();\n                      if (s6 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                          s7 = peg$c37;\n                          peg$currPos++;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                        }\n                        if (s7 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c294(s1, s5);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseexp_new();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseexp_delete();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseop_unary(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c160;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c295();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 38) {\n        s1 = peg$c163;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c164); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c296();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s1 = peg$c271;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c272); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c297();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c273;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c274); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c298();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 33) {\n              s1 = peg$c299;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c300); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c301();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 3) === peg$c302) {\n                s1 = peg$c302;\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c303); }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = peg$currPos;\n                peg$silentFails++;\n                s3 = peg$parseidentifierChar();\n                peg$silentFails--;\n                if (s3 === peg$FAILED) {\n                  s2 = undefined;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c301();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 126) {\n                  s1 = peg$c304;\n                  peg$currPos++;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c305); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c306();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 5) === peg$c307) {\n                    s1 = peg$c307;\n                    peg$currPos += 5;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c308); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c306();\n                  }\n                  s0 = s1;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_new(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3) === peg$c309) {\n      s1 = peg$c309;\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c310); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenew_type_id();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenew_initializer();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c311(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c309) {\n        s1 = peg$c309;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c310); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s3 = peg$c35;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c36); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsetype_id();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsews();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s7 = peg$c37;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsews();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsenew_initializer();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c312(s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenew_type_id(): any {\n    let s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetype_specifiers();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsews();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsenew_declarator();\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c313(s1, s4);\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c314(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenew_declarator(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parse_new_declarator();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c315(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parse_new_declarator(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c160;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecv_qualifier();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_new_declarator();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c162(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 38) {\n        s1 = peg$c163;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c164); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecv_qualifier();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_new_declarator();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c165(s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsenew_declarator_postfixes();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c316(s1);\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenew_declarator_postfixes(): any {\n    let s0, s1, s2, s3;\n\n    s0 = [];\n    s1 = peg$currPos;\n    s2 = peg$parsews();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsenew_declarator_postfix();\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c317(s3);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$currPos;\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenew_declarator_postfix();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s1;\n            s2 = peg$c317(s3);\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenew_declarator_postfix(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c169;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c170); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp_assn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s5 = peg$c171;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c172); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c318(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenew_initializer(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c35;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c37;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c38); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c319(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_delete(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c320) {\n      s1 = peg$c320;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c321); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp_cast();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c322(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c320) {\n        s1 = peg$c320;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c321); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 91) {\n            s3 = peg$c169;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c170); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s5 = peg$c171;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c172); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseWS();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseexp_cast();\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c323(s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseexp_postfix();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_postfix(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11) === peg$c324) {\n      s1 = peg$c324;\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 60) {\n          s3 = peg$c263;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c264); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsesimple_type_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsews();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 62) {\n                  s7 = peg$c265;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c266); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsews();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s9 = peg$c35;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsews();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexp_cast();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsews();\n                          if (s12 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 41) {\n                              s13 = peg$c37;\n                              peg$currPos++;\n                            } else {\n                              s13 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c326(s5, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 12) === peg$c327) {\n        s1 = peg$c327;\n        peg$currPos += 12;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c328); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 60) {\n            s3 = peg$c263;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c264); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsesimple_type_name();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsews();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 62) {\n                    s7 = peg$c265;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c266); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsews();\n                    if (s8 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 40) {\n                        s9 = peg$c35;\n                        peg$currPos++;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parsews();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseexp_cast();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parsews();\n                            if (s12 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 41) {\n                                s13 = peg$c37;\n                                peg$currPos++;\n                              } else {\n                                s13 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                              }\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c329(s5, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 16) === peg$c330) {\n          s1 = peg$c330;\n          peg$currPos += 16;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c331); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsews();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s3 = peg$c263;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c264); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsews();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsesimple_type_name();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parsews();\n                  if (s6 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 62) {\n                      s7 = peg$c265;\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c266); }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parsews();\n                      if (s8 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 40) {\n                          s9 = peg$c35;\n                          peg$currPos++;\n                        } else {\n                          s9 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parsews();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseexp_cast();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parsews();\n                              if (s12 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 41) {\n                                  s13 = peg$c37;\n                                  peg$currPos++;\n                                } else {\n                                  s13 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                                }\n                                if (s13 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c332(s5, s11);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 10) === peg$c333) {\n            s1 = peg$c333;\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c334); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsews();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 60) {\n                s3 = peg$c263;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c264); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parsews();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parsesimple_type_name();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parsews();\n                    if (s6 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 62) {\n                        s7 = peg$c265;\n                        peg$currPos++;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c266); }\n                      }\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parsews();\n                        if (s8 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 40) {\n                            s9 = peg$c35;\n                            peg$currPos++;\n                          } else {\n                            s9 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                          }\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parsews();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseexp_cast();\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parsews();\n                                if (s12 !== peg$FAILED) {\n                                  if (input.charCodeAt(peg$currPos) === 41) {\n                                    s13 = peg$c37;\n                                    peg$currPos++;\n                                  } else {\n                                    s13 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                                  }\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c335(s5, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseexp_construct();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseexp_primary();\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = [];\n              s3 = peg$currPos;\n              s4 = peg$parsews();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseop_postfix();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s4 = peg$c336(s1, s5);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$currPos;\n                s4 = peg$parsews();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseop_postfix();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s3;\n                    s4 = peg$c336(s1, s5);\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              }\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c337(s1, s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseop_postfix(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c169;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c170); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpression();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s5 = peg$c171;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c172); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c338(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c35;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexp_list();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s5 = peg$c37;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c38); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c339(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s1 = peg$c340;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c341); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsews();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsename();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c342(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c343) {\n            s1 = peg$c343;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c344); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsews();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parsename();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c345(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c285) {\n              s1 = peg$c285;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c286); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c346();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c288) {\n                s1 = peg$c288;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c289); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c347();\n              }\n              s0 = s1;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_construct(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsesimple_type_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c35;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexp_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsews();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c37;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c348(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_list(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexp_assn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s5 = peg$c64;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexp_assn();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c349(s1, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c64;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexp_assn();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c349(s1, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c185(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_primary(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c35;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpression();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c37;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c38); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c350(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4) === peg$c351) {\n          s1 = peg$c351;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c352); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          peg$silentFails++;\n          s3 = peg$parseidentifierChar();\n          peg$silentFails--;\n          if (s3 === peg$FAILED) {\n            s2 = undefined;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c353();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseexp_id();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseopaque_expression();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp_id(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequalified_id();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsename();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c354(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsequalified_id(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenested_name_specifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsename();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c355(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenested_name_specifier(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = [];\n    s1 = peg$currPos;\n    s2 = peg$parsetype_name_id();\n    if (s2 === peg$FAILED) {\n      s2 = peg$parseidentifier();\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsews();\n      if (s3 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c356) {\n          s4 = peg$c356;\n          peg$currPos += 2;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c357); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsews();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s1;\n            s2 = peg$c358(s2);\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$currPos;\n        s2 = peg$parsetype_name_id();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseidentifier();\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c356) {\n              s4 = peg$c356;\n              peg$currPos += 2;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c357); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsews();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$c358(s2);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c356) {\n        s1 = peg$c356;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c357); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c359();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetype_name_id(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsesimple_type_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c360(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsename(): any {\n    let s0;\n\n    s0 = peg$parseoperator_function_id();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseidentifier();\n    }\n\n    return s0;\n  }\n\n  function peg$parseoperator_function_id(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8) === peg$c361) {\n      s1 = peg$c361;\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c362); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseoverloadable_op();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c363(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseoverloadable_op(): any {\n    let s0;\n\n    if (input.substr(peg$currPos, 5) === peg$c364) {\n      s0 = peg$c364;\n      peg$currPos += 5;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c365); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 8) === peg$c366) {\n        s0 = peg$c366;\n        peg$currPos += 8;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c367); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c309) {\n          s0 = peg$c309;\n          peg$currPos += 3;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c310); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c320) {\n            s0 = peg$c320;\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c321); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c282) {\n              s0 = peg$c282;\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c283); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c203) {\n                s0 = peg$c203;\n                peg$currPos += 3;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c204); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 3) === peg$c205) {\n                  s0 = peg$c205;\n                  peg$currPos += 3;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c199) {\n                    s0 = peg$c199;\n                    peg$currPos += 2;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c200); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c201) {\n                      s0 = peg$c201;\n                      peg$currPos += 2;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c202); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c193) {\n                        s0 = peg$c193;\n                        peg$currPos += 2;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c194); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 2) === peg$c195) {\n                          s0 = peg$c195;\n                          peg$currPos += 2;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c196); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 2) === peg$c197) {\n                            s0 = peg$c197;\n                            peg$currPos += 2;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c198); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 2) === peg$c212) {\n                              s0 = peg$c212;\n                              peg$currPos += 2;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c213); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 2) === peg$c207) {\n                                s0 = peg$c207;\n                                peg$currPos += 2;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 2) === peg$c217) {\n                                  s0 = peg$c217;\n                                  peg$currPos += 2;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 2) === peg$c267) {\n                                    s0 = peg$c267;\n                                    peg$currPos += 2;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c268); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 2) === peg$c269) {\n                                      s0 = peg$c269;\n                                      peg$currPos += 2;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c270); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 2) === peg$c251) {\n                                        s0 = peg$c251;\n                                        peg$currPos += 2;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c252); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 2) === peg$c253) {\n                                          s0 = peg$c253;\n                                          peg$currPos += 2;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c254); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 2) === peg$c259) {\n                                            s0 = peg$c259;\n                                            peg$currPos += 2;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c260); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 2) === peg$c261) {\n                                              s0 = peg$c261;\n                                              peg$currPos += 2;\n                                            } else {\n                                              s0 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c262); }\n                                            }\n                                            if (s0 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 2) === peg$c232) {\n                                                s0 = peg$c232;\n                                                peg$currPos += 2;\n                                              } else {\n                                                s0 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c233); }\n                                              }\n                                              if (s0 === peg$FAILED) {\n                                                if (input.substr(peg$currPos, 2) === peg$c226) {\n                                                  s0 = peg$c226;\n                                                  peg$currPos += 2;\n                                                } else {\n                                                  s0 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c227); }\n                                                }\n                                                if (s0 === peg$FAILED) {\n                                                  if (input.substr(peg$currPos, 2) === peg$c285) {\n                                                    s0 = peg$c285;\n                                                    peg$currPos += 2;\n                                                  } else {\n                                                    s0 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c286); }\n                                                  }\n                                                  if (s0 === peg$FAILED) {\n                                                    if (input.substr(peg$currPos, 2) === peg$c288) {\n                                                      s0 = peg$c288;\n                                                      peg$currPos += 2;\n                                                    } else {\n                                                      s0 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c289); }\n                                                    }\n                                                    if (s0 === peg$FAILED) {\n                                                      if (input.substr(peg$currPos, 2) === peg$c343) {\n                                                        s0 = peg$c343;\n                                                        peg$currPos += 2;\n                                                      } else {\n                                                        s0 = peg$FAILED;\n                                                        if (peg$silentFails === 0) { peg$fail(peg$c344); }\n                                                      }\n                                                      if (s0 === peg$FAILED) {\n                                                        if (input.substr(peg$currPos, 2) === peg$c368) {\n                                                          s0 = peg$c368;\n                                                          peg$currPos += 2;\n                                                        } else {\n                                                          s0 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c369); }\n                                                        }\n                                                        if (s0 === peg$FAILED) {\n                                                          if (input.substr(peg$currPos, 2) === peg$c370) {\n                                                            s0 = peg$c370;\n                                                            peg$currPos += 2;\n                                                          } else {\n                                                            s0 = peg$FAILED;\n                                                            if (peg$silentFails === 0) { peg$fail(peg$c371); }\n                                                          }\n                                                          if (s0 === peg$FAILED) {\n                                                            if (input.charCodeAt(peg$currPos) === 43) {\n                                                              s0 = peg$c271;\n                                                              peg$currPos++;\n                                                            } else {\n                                                              s0 = peg$FAILED;\n                                                              if (peg$silentFails === 0) { peg$fail(peg$c272); }\n                                                            }\n                                                            if (s0 === peg$FAILED) {\n                                                              if (input.charCodeAt(peg$currPos) === 45) {\n                                                                s0 = peg$c273;\n                                                                peg$currPos++;\n                                                              } else {\n                                                                s0 = peg$FAILED;\n                                                                if (peg$silentFails === 0) { peg$fail(peg$c274); }\n                                                              }\n                                                              if (s0 === peg$FAILED) {\n                                                                if (input.charCodeAt(peg$currPos) === 42) {\n                                                                  s0 = peg$c160;\n                                                                  peg$currPos++;\n                                                                } else {\n                                                                  s0 = peg$FAILED;\n                                                                  if (peg$silentFails === 0) { peg$fail(peg$c161); }\n                                                                }\n                                                                if (s0 === peg$FAILED) {\n                                                                  if (input.charCodeAt(peg$currPos) === 47) {\n                                                                    s0 = peg$c275;\n                                                                    peg$currPos++;\n                                                                  } else {\n                                                                    s0 = peg$FAILED;\n                                                                    if (peg$silentFails === 0) { peg$fail(peg$c276); }\n                                                                  }\n                                                                  if (s0 === peg$FAILED) {\n                                                                    if (input.charCodeAt(peg$currPos) === 37) {\n                                                                      s0 = peg$c277;\n                                                                      peg$currPos++;\n                                                                    } else {\n                                                                      s0 = peg$FAILED;\n                                                                      if (peg$silentFails === 0) { peg$fail(peg$c278); }\n                                                                    }\n                                                                    if (s0 === peg$FAILED) {\n                                                                      if (input.charCodeAt(peg$currPos) === 94) {\n                                                                        s0 = peg$c243;\n                                                                        peg$currPos++;\n                                                                      } else {\n                                                                        s0 = peg$FAILED;\n                                                                        if (peg$silentFails === 0) { peg$fail(peg$c244); }\n                                                                      }\n                                                                      if (s0 === peg$FAILED) {\n                                                                        if (input.charCodeAt(peg$currPos) === 38) {\n                                                                          s0 = peg$c163;\n                                                                          peg$currPos++;\n                                                                        } else {\n                                                                          s0 = peg$FAILED;\n                                                                          if (peg$silentFails === 0) { peg$fail(peg$c164); }\n                                                                        }\n                                                                        if (s0 === peg$FAILED) {\n                                                                          if (input.charCodeAt(peg$currPos) === 124) {\n                                                                            s0 = peg$c237;\n                                                                            peg$currPos++;\n                                                                          } else {\n                                                                            s0 = peg$FAILED;\n                                                                            if (peg$silentFails === 0) { peg$fail(peg$c238); }\n                                                                          }\n                                                                          if (s0 === peg$FAILED) {\n                                                                            if (input.charCodeAt(peg$currPos) === 126) {\n                                                                              s0 = peg$c304;\n                                                                              peg$currPos++;\n                                                                            } else {\n                                                                              s0 = peg$FAILED;\n                                                                              if (peg$silentFails === 0) { peg$fail(peg$c305); }\n                                                                            }\n                                                                            if (s0 === peg$FAILED) {\n                                                                              if (input.charCodeAt(peg$currPos) === 33) {\n                                                                                s0 = peg$c299;\n                                                                                peg$currPos++;\n                                                                              } else {\n                                                                                s0 = peg$FAILED;\n                                                                                if (peg$silentFails === 0) { peg$fail(peg$c300); }\n                                                                              }\n                                                                              if (s0 === peg$FAILED) {\n                                                                                if (input.charCodeAt(peg$currPos) === 61) {\n                                                                                  s0 = peg$c145;\n                                                                                  peg$currPos++;\n                                                                                } else {\n                                                                                  s0 = peg$FAILED;\n                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c146); }\n                                                                                }\n                                                                                if (s0 === peg$FAILED) {\n                                                                                  if (input.charCodeAt(peg$currPos) === 60) {\n                                                                                    s0 = peg$c263;\n                                                                                    peg$currPos++;\n                                                                                  } else {\n                                                                                    s0 = peg$FAILED;\n                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c264); }\n                                                                                  }\n                                                                                  if (s0 === peg$FAILED) {\n                                                                                    if (input.charCodeAt(peg$currPos) === 62) {\n                                                                                      s0 = peg$c265;\n                                                                                      peg$currPos++;\n                                                                                    } else {\n                                                                                      s0 = peg$FAILED;\n                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c266); }\n                                                                                    }\n                                                                                    if (s0 === peg$FAILED) {\n                                                                                      if (input.charCodeAt(peg$currPos) === 44) {\n                                                                                        s0 = peg$c64;\n                                                                                        peg$currPos++;\n                                                                                      } else {\n                                                                                        s0 = peg$FAILED;\n                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c65); }\n                                                                                      }\n                                                                                    }\n                                                                                  }\n                                                                                }\n                                                                              }\n                                                                            }\n                                                                          }\n                                                                        }\n                                                                      }\n                                                                    }\n                                                                  }\n                                                                }\n                                                              }\n                                                            }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunoverloadable_op(): any {\n    let s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c340;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c341); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c280) {\n        s0 = peg$c280;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c281); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c356) {\n          s0 = peg$c356;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c357); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c372) {\n            s0 = peg$c372;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c373); }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral(): any {\n    let s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_float();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c374(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseliteral_int();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c375(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseliteral_char();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c376(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseliteral_string();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c377(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseliteral_boolean();\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c378(s1);\n            }\n            s0 = s1;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_int(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s1 = peg$c273;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c274); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c379.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c380); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c379.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c380); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c381(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_float(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s1 = peg$c273;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c274); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c382.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c383); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c382.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c383); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s3 = peg$c384(s1, s2);\n        if (s3) {\n          s3 = undefined;\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c385(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_char(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c386;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c387); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c388.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c389); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = peg$parseescape();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c386;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c387); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c390(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c391;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c392); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c393.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c394); }\n      }\n      if (s3 === peg$FAILED) {\n        s3 = peg$parseescape();\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (peg$c393.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c394); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseescape();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c391;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c392); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c395(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_boolean(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c396) {\n      s1 = peg$c396;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c397); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseidentifierChar();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c398();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c399) {\n        s1 = peg$c399;\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c400); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseidentifierChar();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = undefined;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c401();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape(): any {\n    let s0;\n\n    s0 = peg$parsesimple_escape();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseoctal_escape();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesimple_escape(): any {\n    let s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c402) {\n      s0 = peg$c402;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c403); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c404) {\n        s0 = peg$c404;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c405); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c406) {\n          s0 = peg$c406;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c407); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c408) {\n            s0 = peg$c408;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c409); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c410) {\n              s0 = peg$c410;\n              peg$currPos += 2;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c411); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c412) {\n                s0 = peg$c412;\n                peg$currPos += 2;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c413); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c414) {\n                  s0 = peg$c414;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c415); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c416) {\n                    s0 = peg$c416;\n                    peg$currPos += 2;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c417); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c418) {\n                      s0 = peg$c418;\n                      peg$currPos += 2;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c419); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c420) {\n                        s0 = peg$c420;\n                        peg$currPos += 2;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c421); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 2) === peg$c422) {\n                          s0 = peg$c422;\n                          peg$currPos += 2;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c423); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 2) === peg$c424) {\n                            s0 = peg$c424;\n                            peg$currPos += 2;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c425); }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseoctal_escape(): any {\n    let s0, s1, s2, s3;\n\n    if (peg$c426.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c427); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (peg$c426.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c427); }\n      }\n      if (s1 !== peg$FAILED) {\n        if (peg$c426.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c427); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (peg$c426.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c427); }\n        }\n        if (s1 !== peg$FAILED) {\n          if (peg$c426.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c427); }\n          }\n          if (s2 !== peg$FAILED) {\n            if (peg$c426.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c427); }\n            }\n            if (s3 !== peg$FAILED) {\n              s1 = [s1, s2, s3];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseidentifier(): any {\n    let s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseidentifierFirstChar();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseidentifierChar();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseidentifierChar();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c429(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c428); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseidentifierChar(): any {\n    let s0;\n\n    if (peg$c430.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c431); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseidentifierFirstChar(): any {\n    let s0;\n\n    if (peg$c432.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c433); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetemplate_identifier(): any {\n    let s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseidentifier();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 60) {\n        s2 = peg$c263;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c264); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseidentifier();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 62) {\n            s4 = peg$c265;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c266); }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c434(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseopaque_expression(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s1 = peg$c435;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c436); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c437.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c438); }\n      }\n      if (s3 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c356) {\n          s3 = peg$c356;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c357); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseoverloadable_op();\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c437.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c438); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c356) {\n              s3 = peg$c356;\n              peg$currPos += 2;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c357); }\n            }\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseoverloadable_op();\n            }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c439(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsews(): any {\n    let s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c441.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c442); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (peg$c441.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c442); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomment();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c441.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c442); }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c441.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c442); }\n        }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c440); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWS(): any {\n    let s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsecomment();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c441.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c442); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c441.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c442); }\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsecomment();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = [];\n        if (peg$c441.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c442); }\n        }\n        if (s1 !== peg$FAILED) {\n          while (s1 !== peg$FAILED) {\n            s0.push(s1);\n            if (peg$c441.test(input.charAt(peg$currPos))) {\n              s1 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c442); }\n            }\n          }\n        } else {\n          s0 = peg$FAILED;\n        }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c443); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseclass_name(): any {\n    let s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetemplate_identifier();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c444(s1);\n      if (s2) {\n        s2 = undefined;\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c358(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseidentifier();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$c444(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c358(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseclass_specifier(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseclass_head();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c445(s1);\n      if (s2) {\n        s2 = undefined;\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 123) {\n            s4 = peg$c27;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c28); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsews();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsemember_specification();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsemember_specification();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsews();\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s8 = peg$c30;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c446(s1, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseclass_head();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$c447(s1);\n        if (s2) {\n          s2 = undefined;\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseclass_head(): any {\n    let s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseclass_key();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseclass_head_name();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseWS();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsebase_clause();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c448(s1, s3, s6);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c449(s1, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseclass_head_name(): any {\n    let s0;\n\n    s0 = peg$parsetemplate_identifier();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseidentifier();\n    }\n\n    return s0;\n  }\n\n  function peg$parseclass_key(): any {\n    let s0;\n\n    if (input.substr(peg$currPos, 5) === peg$c450) {\n      s0 = peg$c450;\n      peg$currPos += 5;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 6) === peg$c452) {\n        s0 = peg$c452;\n        peg$currPos += 6;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c453); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c454) {\n          s0 = peg$c454;\n          peg$currPos += 5;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c455); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemember_specification(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseaccess_specifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s3 = peg$c14;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$currPos;\n            s7 = peg$parsemember_declaration();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parsews();\n              if (s8 !== peg$FAILED) {\n                peg$savedPos = s6;\n                s7 = peg$c456(s1, s7);\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$currPos;\n              s7 = peg$parsemember_declaration();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsews();\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c456(s1, s7);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c457(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parsemember_declaration();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c458(s3);\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parsemember_declaration();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s2;\n              s3 = peg$c458(s3);\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c459(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaccess_specifier(): any {\n    let s0;\n\n    if (input.substr(peg$currPos, 7) === peg$c460) {\n      s0 = peg$c460;\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c461); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 9) === peg$c462) {\n        s0 = peg$c462;\n        peg$currPos += 9;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c463); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6) === peg$c464) {\n          s0 = peg$c464;\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c465); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemember_declaration(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedecl_specifiers_prohibit_class_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseidentifier();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = undefined;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsemember_declarator_list();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsews();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s6 = peg$c23;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c24); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c466(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsemember_declarator_list();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 59) {\n              s4 = peg$c23;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c24); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c467(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsedecl_specifiers();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = peg$currPos;\n          s2 = peg$c62(s1);\n          if (s2) {\n            s2 = peg$FAILED;\n          } else {\n            s2 = undefined;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            s4 = peg$parseidentifier();\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = undefined;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsews();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsemember_declarator_list();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parsews();\n                  if (s6 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 59) {\n                      s7 = peg$c23;\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c466(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsefunction_definition();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsews();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s3 = peg$c23;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c24); }\n              }\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c468(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemember_declarator_list(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemember_declarator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s5 = peg$c64;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemember_declarator();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c66(s1, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c64;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemember_declarator();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c66(s1, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c67(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemember_declarator(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedeclarator();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c145;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c146); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsews();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 48) {\n              s5 = peg$c469;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c470); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c471(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedeclarator();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsews();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s3 = peg$c145;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c146); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsews();\n            if (s4 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 21) === peg$c149) {\n                s5 = peg$c149;\n                peg$currPos += 21;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c150); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c472(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsedeclarator();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsews();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsebrace_or_equal_initializer();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c473(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedeclarator();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebase_clause(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s1 = peg$c14;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c15); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsebase_specifier_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c474(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebase_specifier_list(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebase_specifier();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parsews();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s5 = peg$c64;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsews();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsebase_specifier();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c475(s1, s7);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parsews();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c64;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsews();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsebase_specifier();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c475(s1, s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c67(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebase_specifier(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7) === peg$c114) {\n      s1 = peg$c114;\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c115); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseWS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parseaccess_specifier();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseWS();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c476(s4);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsequalified_class_name();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c477(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseaccess_specifier();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseWS();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s1;\n          s2 = peg$c476(s2);\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c114) {\n          s2 = peg$c114;\n          peg$currPos += 7;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c115); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseWS();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsequalified_class_name();\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c477(s1, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseaccess_specifier();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseWS();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsequalified_class_name();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c478(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsequalified_class_name();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c479(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsequalified_class_name(): any {\n    let s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenested_name_specifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsews();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseclass_name();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c480(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseclass_name();\n    }\n\n    return s0;\n  }\n\n\n    const KEYWORDS = new Set([\n        \"alignas\", \"continue\", \"friend\", \"register\", \"true\",\n        \"alignof\", \"decltype\", \"goto\", \"reinterpret_cast\", \"try\",\n        \"asm\", \"default\", \"if\", \"return\", \"typedef\",\n        \"auto\", \"delete\", \"inline\", \"short\", \"typeid\",\n        \"bool\", \"do\", \"int\", \"signed\", \"typename\",\n        \"break\", \"double\", \"long\", \"sizeof\", \"union\",\n        \"case\", \"dynamic_cast\", \"mutable\", \"static\", \"unsigned\",\n        \"catch\", \"else\", \"namespace\", \"static_assert\", \"using\",\n        \"char\", \"enum\", \"new\", \"static_cast\", \"virtual\",\n        \"char16_t\", \"explicit\", \"noexcept\", \"struct\", \"void\",\n        \"char32_t\", \"export\", \"nullptr\", \"switch\", \"volatile\",\n        \"class\", \"extern\", \"operator\", \"template\", \"wchar_t\",\n        \"const\", \"false\", \"private\", \"this\", \"while\",\n        \"constexpr\", \"float\", \"protected\", \"thread_local\",\n        \"const_cast\", \"for\", \"public\", \"throw\"\n    ]);\n\n    function composeBinaryOp(first: any, rest: any, assoc: \"left\" | \"right\", exprType: string) : any {\n      if(!rest || rest.length === 0){\n        return first;\n      }\n      if (assoc === \"left\"){\n        let right = rest.pop();\n        return {\n          construct_type: exprType,\n          operator: right[0],\n          left: track(composeBinaryOp(first, rest, assoc, exprType), location(), text()),\n          right: right[1],\n          associativity: assoc\n        }\n      }\n      else{\n        let left = rest.shift();\n        return {\n          construct_type: exprType,\n          operator: left[0],\n          left: first,\n          right: track(composeBinaryOp(left[1], rest, assoc, exprType), location(), text()),\n          associativity: assoc\n        }\n      }\n    }\n\n    function absorb(eater: any, eaten: any){\n      if (!eaten){ return eater; }\n      for (let attr in eaten){\n        if(attr != \"start\" && attr != \"end\"){\n          eater[attr] = eaten[attr];\n        }\n      }\n      return eater;\n    }\n\n    function track(obj: any, location: any, text: string) {\n      obj.source = {\n        location : location,\n        start : location.start.offset,\n        text : text,\n        line : location.start.line,\n        column : location.start.column,\n        end : location.start.offset + text.length\n      };\n      return obj;\n    }\n\n    function postfixExp(ops: any, sub: any){\n      if(ops.length == 0){\n        return sub;\n      }\n      else{\n        let op = ops.pop();\n        op.operand = postfixExp(ops, sub);\n        return op;\n      }\n    }\n\n    let _userTypeNames = {\n      \"initializer_list<int>\": true,\n      \"initializer_list<double>\": true,\n      \"initializer_list<char>\": true,\n      \"initializer_list<bool>\": true\n    };\n\n    function getUserTypeNames() : any {\n      //if (typeof Types !== \"undefined\"){\n      //  return Types.userTypeNames;\n      //}\n      //else{\n        return _userTypeNames;\n      //}\n    }\n\n    function isUserTypeName(name: string) {\n      return getUserTypeNames()[name];\n    }\n\n    var _type_specifier_user_type_allowed_stack = true;\n\n    var emptyDeclSpecs = {\n      typeSpecs: [],\n      storageSpecs: [],\n      length: 0\n    };\n\n    var classNameStack: string[] = [];\n\n    var prohibitOwnClassName: boolean = false;\n\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nexport interface IParseOptions {\n  filename?: string;\n  startRule?: string;\n  tracer?: any;\n  [key: string]: any;\n}\nexport type ParseFunction = (input: string, options?: IParseOptions) => any;\nexport const parse: ParseFunction = peg$parse;\n\n","import { parse as cpp_parse } from \"../parse/cpp_parser\";\nimport { DeclaratorASTNode, DeclarationASTNode, FunctionDefinitionASTNode } from \"../core/declarations\";\n\nexport function parseDeclarator(text: string) {\n    return <DeclaratorASTNode>cpp_parse(text, {startRule: \"declarator\"});\n}\n\nexport function parseFunctionDefinition(text: string) {\n    return <FunctionDefinitionASTNode>cpp_parse(text, {startRule: \"function_definition\"});\n}","\nimport pull from \"lodash/pull\";\nimport { assert } from \"./util\";\n\nexport interface Message<Data_type = any> {\n    category: string;\n    data: Data_type;\n    source: any;\n}\n\n\n// interface ObservableType {\n//     send(category: string, data: any) : void;\n//     addListener(listener: ObserverType, category?: string | string[]) : ObservableType;\n//     removeListener(listener: ObserverType, category?: string) : ObservableType;\n//     identify(category: string, func: (o:ObserverType) => any) : ObserverType;\n// }\n\nexport function addListener<PotentialMessages extends string>(objWithObservable: {observable: Observable<PotentialMessages>}, listener: ObserverType, category?: PotentialMessages | PotentialMessages[]) {\n    objWithObservable.observable.addListener(listener, category);\n}\n\nexport function listenTo<PotentialMessages extends string>(listener: ObserverType, objWithObservable: {observable: Observable<PotentialMessages>}, category?: PotentialMessages | PotentialMessages[]) {\n    objWithObservable.observable.addListener(listener, category);\n}\n\nexport function removeListener<PotentialMessages extends string>(objWithObservable: {observable: Observable<PotentialMessages>}, listener: ObserverType, category?: PotentialMessages | PotentialMessages[]) {\n    objWithObservable.observable.removeListener(listener, category);\n}\n\nexport function stopListeningTo<PotentialMessages extends string>(listener: ObserverType, objWithObservable: {observable: Observable<PotentialMessages>}, category?: PotentialMessages | PotentialMessages[]) {\n    objWithObservable.observable.removeListener(listener, category);\n}\n\nexport function messageResponse(messageCategory?: string, unwrap? : \"unwrap\") {\n    return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n        if (!target._act) {\n            // no _act object, and no base class has one either\n            target._act = {};\n        }\n        else if (!target.hasOwnProperty(\"_act\")) {\n            // we don't have an _act object, but a base class does, so we create one\n            // for us that has the base class one as a prototype\n            target._act = Object.create(target._act);\n        }\n\n        if (unwrap) {\n            let action = target[propertyKey];\n            target._act[messageCategory || propertyKey] = function(msg: any) { action.call(this, msg.data); };\n        }\n        else {\n            target._act[messageCategory || propertyKey] = target[propertyKey];\n        }\n    };\n}\n\nexport interface MessageResponses {\n    [index: string]: ((msg: Message) => void);\n}\n\nexport interface ObserverType {\n    _act : MessageResponses;\n}\n\n// export class Observer {\n//     private readonly actor: Actor;\n\n//     constructor(actor: Actor) {\n//         this.actor = actor;\n//     }\n\n//     public _IDENTIFY(msg : {data:(o:any) => void}) {\n//         msg.data(this);\n//     }\n\n//     public listenTo(other: ObservableType, category: string) {\n//         other.addListener(this, category);\n//         return this;\n//     }\n\n//     public stopListeningTo(other: ObservableType, category: string) {\n//         if (other) {\n//             other.removeListener(this, category);\n//         }\n//         return this;\n//     }\n\n//     public recv (msg : Message) {\n\n//         // Call the \"_act\" function for this\n//         var catAct = this.actor._act[msg.category];\n//         if (catAct){\n//             catAct.call(this.actor, msg);\n//         }\n//         else if (this.actor._act._default) {\n//             this.actor._act._default.call(this.actor, msg);\n//         }\n//         else {\n//             assert(false);\n//         }\n\n//     }\n// }\n\nfunction receiveMessage(observer: ObserverType, msg: Message) {\n    if (!observer._act) {\n        return;\n    }\n    var catAct = observer._act[msg.category];\n    if (catAct){\n        catAct.call(observer, msg);\n    }\n    else if (observer._act._default) {\n        observer._act._default.call(observer, msg);\n    }\n    else {\n        // do nothing, message ignored\n    }\n}\n\nexport class Observable<PotentialMessages extends string = string> {\n    private universalObservers: ObserverType[] = [];\n    private observers: {[index: string] : ObserverType[] | undefined} = {};\n\n    private readonly source: any;\n    // private markedForRemoval: boolean[] = [];\n\n    constructor(source: any) {\n        this.source = source;\n    }\n\n    public send(category: PotentialMessages, data?: any) {\n        if (this.source.silent){\n            return;\n        }\n        \n        let msg: Message = {\n            category: category,\n            data: data,\n            source: this.source\n        };\n\n        let observers = this.observers[category];\n        if (observers) {\n            this.sendMessageToObservers(observers, msg);\n        }\n\n        this.sendMessageToObservers(this.universalObservers, msg);\n    }\n\n    private sendMessageToObservers(observers: ObserverType[], msg: Message) {\n        observers = observers.slice(0); // create a clone of the array so we avoid issues with concurrent modification\n        for (let i = 0; i < observers.length; ++i) {\n            // this.markedForRemoval.push(false);\n            receiveMessage(observers[i], msg);\n            // if (this.markedForRemoval[this.markedForRemoval.length - 1]) {\n            //     observers.splice(i, 1);\n            //     --i;\n            // }\n            // this.markedForRemoval.pop();\n        }\n    }\n\n    // public stopListening() {\n    //     this.markedForRemoval[this.markedForRemoval.length - 1] = true;\n    // }\n\n    public addListener(listener: ObserverType, category?: PotentialMessages | PotentialMessages[]) {\n        \n        if (category) {\n            if (Array.isArray(category)) {\n                // If there's an array of categories, add to all individually\n                for (var i = 0; i < category.length; ++i) {\n                    this.addListener(listener, category[i]);\n                }\n            }\n            else {\n                if (!this.observers[category]) {\n                    this.observers[category] = [];\n                }\n                this.observers[category]!.push(listener);\n                this.listenerAdded(listener, category);\n            }\n        }\n        else{\n            // if no category, intent is to listen to everything\n            this.universalObservers.push(listener);\n            this.listenerAdded(listener);\n        }\n        return this;\n    }\n\n\n    /*\n    Note: to remove a universal listener, you must call this with category==false.\n    If a listener is universal, removing it from a particular category won't do anything.\n    */\n    public removeListener(listener: ObserverType, category?: PotentialMessages | PotentialMessages[]) {\n        \n        if(category) {\n            if (Array.isArray(category)) {\n                // If there's an array of categories, add to all individually\n                for (var i = 0; i < category.length; ++i) {\n                    this.removeListener(listener, category[i]);\n                }\n            }\n            else {\n                // Remove from the list for a specific category (if list exists)\n                let observers = this.observers[category];\n                observers && pull(observers, listener);\n                this.listenerRemoved(listener, category);\n            }\n        }\n        else{\n            // Remove from all categories\n            for(let cat in this.observers) {\n                this.removeListener(listener, <PotentialMessages>cat);\n            }\n\n            // Also remove from universal listeners\n            pull(this.universalObservers, listener);\n            this.listenerRemoved(listener);\n        }\n        return this;\n    }\n\n    protected listenerAdded(listener: ObserverType, category?: PotentialMessages) : void { }\n    protected listenerRemoved(listener: ObserverType, category?: PotentialMessages) : void { }\n\n    // public identify(category: string, func: (o:ObserverType) => any) {\n    //     let other! : ObserverType; // Uses definite assignment annotation since the function is assumed to assign to other\n    //     this.send(category, func || function(o:ObserverType) {other = o;});\n    //     return other;\n    // }\n\n}\n","import assign from \"lodash/assign\";\nimport { Type } from \"../core/types\";\nimport { encode } from \"he\";\n\nexport type Mutable<T> = { -readonly [P in keyof T]: T[P] };\n\nexport function asMutable<T>(obj: T) : Mutable<T> {\n    return <Mutable<T>>obj;\n}\n\n// https://github.com/microsoft/TypeScript/issues/5101\nexport function isInstance<T>(ctor: new(...args: any[]) => T): (x: any) => x is T {\n    return <(x: any) => x is T>(x => x instanceof ctor);\n} \n\nexport function assert(condition: any, message: string = \"\") : asserts condition {\n    if (!condition)\n        throw Error(\"Assert failed: \" + message);\n};\n\nexport function assertFalse(message: string = \"\") : never {\n    throw Error(\"Assert failed: \" + message);\n};\n\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#exhaustiveness-checking\nexport function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}\n\n\nexport function createMethodMixin<TargetType, MethodName extends keyof TargetType>(mix: TargetType[MethodName]) {\n    return (targetProto: TargetType, name: MethodName) => {\n        targetProto[name] = mix;\n    }\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\n\nexport type Overwrite<T1, T2> = Pick<T1, Exclude<keyof T1, keyof T2>> & T2;\n\n// https://stackoverflow.com/questions/50125893/typescript-derive-map-from-discriminated-union\nexport type DiscriminateUnion<T, K extends keyof T, V extends T[K]> = \n    T extends Record<K, V> ? T : never;\nexport type MapDiscriminatedUnion<T extends Record<K, string>, K extends keyof T> =\n  { [V in T[K]]: DiscriminateUnion<T, K, V> };\n\nexport function htmlDecoratedOperator(operator: string, cssClass: string) {\n    return \"<span class='codeInstance \" + (cssClass || \"\") + \"'>\" + encode(operator) + \"<span class='lobster-highlight'></span></span>\";\n};\n\nexport function htmlDecoratedKeyword(keyword: string){\n    return '<span class=\"code-keyword\">' + encode(keyword) + '</span>';\n};\n\nexport function htmlDecoratedType(type: string) {\n    return '<span class=\"code-type\">' + encode(type) + '</span>';\n};\n\nexport function htmlDecoratedName(name: string, type?: Type) {\n    if (type) {\n        return '<span class=\"code-name\"><span class = \"lobster-highlight\"></span><span class=\"type\">' + encode(type.englishString(false)) + '</span>' + name + '</span>';\n    }\n    else {\n        return '<span class=\"code-name\"><span class = \"lobster-highlight\"></span>' + encode(name) + '</span>';\n    }\n};\n\nexport function htmlDecoratedValue(value: string){\n    return '<span class=\"code-literal\">' + encode(value) + '</span>';\n};\n\nexport function htmlDecoratedObject(value: string){\n    return '<span class=\"code-object\">' + encode(value) + '</span>';\n};\n\n\nvar escapes = [\"\\\\\\\"\", \"\\\\'\", \"\\\\?\", \"\\\\\\\\\", \"\\\\a\", \"\\\\b\", \"\\\\f\", \"\\\\n\", \"\\\\r\", \"\\\\t\", \"\\\\v\", \"\\\\0\"];\nvar escaped = [\"\\\"\", \"\\'\", \"\", \"\\\\\", \"\", \"\\b\", \"\\f\", \"\\n\", \"\\r\", \"\\t\", \"\\v\", \"\\0\"];\n\nexport function escapeString(text: string) {\n    for(var i = 0; i < escapes.length; ++i){\n        text = text.replace(escapes[i], escaped[i]);\n    }\n    return text;\n};\nexport function unescapeString(text: string){\n    var newStr = \"\";\n    for(var i = 0; i < text.length; ++i){\n        var c = text[i];\n        for(var j = 0; j < escaped.length; ++j){\n            if (c === escaped[j]){\n                c = escapes[j];\n                break;\n            }\n        }\n        newStr += c;\n    }\n    return newStr;\n};\n\nexport class CPPRandom {\n\n    private seed: number;\n\n    public constructor(seed: number = 0) {\n        this.seed = seed;\n    }\n\n    public setRandomSeed(newSeed: number) {\n        this.seed = newSeed;\n    }\n\n    public random(min: number = 0, max: number = 1) {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seededRandom(this.seed, min, max);\n    }\n\n    public randomInteger(min: number, max: number) {\n        return Math.floor(this.random(min, max));\n    }\n\n    public seededRandom(seed: number, min: number = 0, max: number = 1) {\n        var rnd = seed % 233280 / 233280;\n    \n        rnd = min + rnd * (max - min);\n        rnd = Math.max(min, Math.min(max, rnd));\n        return rnd;\n    }\n}","import { CPPConstruct, RuntimeConstruct } from \"../core/constructs\";\nimport { RuntimePotentialFullExpression } from \"../core/PotentialFullExpression\";\nimport { SimulationOutlet } from \"./simOutlets\";\nimport { Mutable, asMutable, assertFalse, htmlDecoratedType, htmlDecoratedName, htmlDecoratedKeyword, htmlDecoratedOperator, assert, htmlDecoratedValue, unescapeString, htmlDecoratedObject } from \"../util/util\";\nimport { listenTo, stopListeningTo, messageResponse, Message, MessageResponses, Observable, ObserverType } from \"../util/observe\";\nimport { CompiledFunctionDefinition, ParameterDefinition, CompiledParameterDefinition, VariableDefinition, CompiledParameterDeclaration, LocalVariableDefinition, CompiledSimpleDeclaration, CompiledLocalVariableDefinition } from \"../core/declarations\";\nimport { RuntimeBlock, CompiledBlock, RuntimeStatement, CompiledStatement, RuntimeDeclarationStatement, CompiledDeclarationStatement, RuntimeExpressionStatement, CompiledExpressionStatement, RuntimeIfStatement, CompiledIfStatement, RuntimeWhileStatement, CompiledWhileStatement, CompiledForStatement, RuntimeForStatement, RuntimeReturnStatement, CompiledReturnStatement, RuntimeNullStatement, CompiledNullStatement, Block, RuntimeBreakStatement, CompiledBreakStatement } from \"../core/statements\";\nimport { RuntimeInitializer, CompiledInitializer, RuntimeDefaultInitializer, CompiledDefaultInitializer, DefaultInitializer, DirectInitializer, RuntimeAtomicDefaultInitializer, CompiledAtomicDefaultInitializer, RuntimeArrayDefaultInitializer, CompiledArrayDefaultInitializer, RuntimeDirectInitializer, CompiledDirectInitializer, RuntimeAtomicDirectInitializer, CompiledAtomicDirectInitializer, CompiledReferenceDirectInitializer, RuntimeReferenceDirectInitializer, RuntimeArrayDirectInitializer, CompiledArrayDirectInitializer, RuntimeClassDefaultInitializer, CompiledClassDefaultInitializer, RuntimeClassDirectInitializer, CompiledClassDirectInitializer, RuntimeCtorInitializer, CompiledCtorInitializer } from \"../core/initializers\";\nimport { RuntimeExpression, Expression, CompiledExpression } from \"../core/expressionBase\";\nimport { CPPObject, AutoObject } from \"../core/objects\";\nimport { FunctionEntity, PassByReferenceParameterEntity, PassByValueParameterEntity, ReturnByReferenceEntity, ReturnObjectEntity, MemberVariableEntity } from \"../core/entities\";\nimport { Value } from \"../core/runtimeEnvironment\";\nimport { RuntimeAssignment, RuntimeTernary, CompiledAssignmentExpression, CompiledTernaryExpression, RuntimeComma, CompiledCommaExpression, RuntimeLogicalBinaryOperatorExpression, RuntimeRelationalBinaryOperator, RuntimeArithmeticBinaryOperator, CompiledArithmeticBinaryOperatorExpression, CompiledRelationalBinaryOperatorExpression, CompiledLogicalBinaryOperatorExpression, CompiledUnaryOperatorExpression, RuntimeSubscriptExpression, CompiledSubscriptExpression, RuntimeParentheses, CompiledParenthesesExpression, RuntimeObjectIdentifierExpression, CompiledObjectIdentifierExpression, RuntimeNumericLiteral, CompiledNumericLiteralExpression, RuntimeFunctionIdentifierExpression, CompiledFunctionIdentifierExpression, RuntimeMagicFunctionCallExpression, CompiledMagicFunctionCallExpression, RuntimeStringLiteralExpression, CompiledStringLiteralExpression, RuntimeUnaryOperatorExpression, RuntimeBinaryOperator, CompiledBinaryOperatorExpression, RuntimeImplicitConversion, CompiledImplicitConversion, RuntimeObjectDotExpression, RuntimeFunctionDotExpression, CompiledObjectDotExpression, CompiledFunctionDotExpression, RuntimeObjectArrowExpression, RuntimeFunctionArrowExpression, CompiledObjectArrowExpression, CompiledFunctionArrowExpression, CompiledOutputOperatorExpression, RuntimeOutputOperatorExpression, RuntimePostfixIncrementExpression, CompiledPostfixIncrementExpression, RuntimeInputOperatorExpression, CompiledInputOperatorExpression, RuntimeNonMemberOperatorOverloadExpression, CompiledNonMemberOperatorOverloadExpression, RuntimeMemberOperatorOverloadExpression, CompiledMemberOperatorOverloadExpression, CompiledInitializerListExpression, RuntimeInitializerListExpression } from \"../core/expressions\";\nimport { Bool, AtomicType, CompleteObjectType, isPointerType, isPointerToType, Char, isArrayPointerType, isArrayPointerToType, isAtomicType, isReferenceType, isCompleteClassType, PointerType, isType } from \"../core/types\";\nimport { mixin } from \"lodash\";\nimport { CompiledFunctionCall, RuntimeFunctionCall, RuntimeFunctionCallExpression, CompiledFunctionCallExpression, FunctionCall, INDEX_FUNCTION_CALL_CALL } from \"../core/functionCall\";\nimport { RuntimeFunction } from \"../core/functions\";\nimport { RuntimeOpaqueExpression, CompiledOpaqueExpression } from \"../core/opaqueExpression\";\nimport { encode } from \"he\";\n\nconst EVAL_FADE_DURATION = 500;\nconst RESET_FADE_DURATION = 500;\n\nexport const CODE_ANIMATIONS = true;\n\nconst CSTRING_PRINT_LIMIT = 10;\n\nexport function getValueString(value: Value) {\n    if (value.isTyped(isType(Bool))) {\n        return value.rawValue === 1 ? \"true\" : \"false\";\n    }\n    if (value.isTyped(isArrayPointerToType(Char))) {\n        let offset = value.type.toIndex(value.rawValue);\n        let chars = value.type.arrayObject.getValue().slice(offset);\n        let cstr = \"\";\n        for(let i = 0; !Char.isNullChar(chars[i]); ++i) {\n            if (i === chars.length) {\n                cstr += \"...\";\n                break;\n            }\n            else if (i > 10) {\n                cstr += \"...\";\n                break;\n            }\n            cstr += unescapeString(String.fromCharCode(chars[i].rawValue));\n        }\n        return `\"${cstr}\"`;\n    }\n    else {\n        return value.valueString();\n    }\n}\n\nfunction getObjectString(obj: CPPObject) {\n    let name = obj.describe().name;\n    if (name.startsWith(\"[\")) {\n        if (obj.isTyped(isAtomicType)) {\n            return htmlDecoratedObject(getValueString(obj.getValue()));\n        }\n        else if (obj.isTyped(isCompleteClassType) && obj.type.className === \"string\") { // TODO make this robust to check for the actual string, not just something named string.\n            return htmlDecoratedObject(getValueString((<CPPObject<PointerType<Char>>>obj.getMemberObject(\"data_ptr\")).getValue()));\n        }\n        else {\n            return htmlDecoratedObject(\"\");\n        }\n    }\n\n    return name;\n}\n\n\n\n\ntype ConstructOutletMessages = \"childOutletAdded\" | \"parameterPassed\" | \"registerCallOutlet\" | \"returnPassed\";\n\nexport abstract class ConstructOutlet<RTConstruct_type extends RuntimeConstruct = RuntimeConstruct> {\n\n    protected readonly element: JQuery;\n    protected readonly construct: RTConstruct_type[\"model\"];\n\n    public readonly parent?: ConstructOutlet;\n    public readonly inst?: RTConstruct_type;\n\n    public _act!: MessageResponses;\n    public readonly observable = new Observable<ConstructOutletMessages>(this);\n\n    private static _ID = 0;\n    private outletID = ConstructOutlet._ID++;\n\n    /**\n     * Children are stored by the ID of the CPPConstruct they display.\n     */\n    protected readonly children: {[index: number]: ConstructOutlet} = {}; \n    \n    public constructor(element: JQuery, construct: RTConstruct_type[\"model\"], parent?: ConstructOutlet) {\n        this.element = element;\n        this.construct = construct;\n\n        if (parent) {\n            parent.addChildOutlet(this);\n        }\n\n        this.element.addClass(\"codeInstance\");\n        this.element.append(\"<span class=\\\"lobster-highlight\\\"></span>\");\n    }\n\n    public setRuntimeInstance(inst: RTConstruct_type) {\n        if (this.inst) {\n            this.removeInstance();\n        }\n\n        (<Mutable<this>>this).inst = inst;\n        if (this.inst) {\n            listenTo(this, inst);\n        }\n\n        for(let id in inst.children) {\n            this.setChildInstance(inst.children[id]);\n        }\n        \n        this.instanceSet(inst);\n    }\n\n    protected instanceSet(inst: RTConstruct_type) {\n        this.element.toggleClass(\"upNext\", inst.isUpNext);\n        this.element.toggleClass(\"wait\", inst.isWaiting);\n    }\n\n    public removeInstance() {\n\n        // Note: should be a fact that if I have no instance, neither do my children\n        if (this.inst) {\n\n            // First remove children instances (deepest children first, due to recursion)\n            for (let c in this.children){\n                this.children[c].removeInstance();\n            }\n\n            stopListeningTo(this, this.inst);\n            let oldInst = this.inst;\n            delete (<Mutable<this>>this).inst;\n            \n            this.instanceRemoved(oldInst);\n        }\n    }\n\n    protected instanceRemoved(oldInst: RTConstruct_type) {\n        this.element.removeClass(\"upNext\");\n        this.element.removeClass(\"wait\");\n    }\n\n    private addChildOutlet(child: ConstructOutlet) {\n        this.children[child.construct.constructId] = child;\n        (<Mutable<ConstructOutlet>>child).parent = this;\n        this.observable.send(\"childOutletAdded\", {parent: this, child: child});\n    }\n    \n    private setChildInstance(childInst: RuntimeConstruct) {\n        let childOutlet = this.children[childInst.model.constructId];\n\n        // If we have a child outlet waiting, go for it\n        if (childOutlet) {\n            childOutlet.setRuntimeInstance(childInst);\n            return;\n        }\n\n        // TODO: took this out. not currently used. decide if I actually want this\n        // Although we didn't find an outlet for this child construct here,\n        // we should give its children a chance to get added here\n        // for(let id in childInst.children) {\n        //     this.setChildInstance(childInst.children[id]);\n        // }\n\n        // Otherwise, pass to parent that may have a suitable outlet\n        if (this.parent) {\n            this.parent.setChildInstance(childInst);\n        }\n        else{\n            console.log(\"WARNING! Child instance pushed for which no corresponding child outlet was found! (\" + childInst.model.constructId + \")\");\n        }\n    }\n\n\n    @messageResponse(\"upNext\")\n    private upNext() {\n        this.element.removeClass(\"wait\");\n        this.element.addClass(\"upNext\");\n    }\n\n    @messageResponse(\"wait\")\n    private wait() {\n        this.element.removeClass(\"upNext\");\n        this.element.addClass(\"wait\");\n    }\n\n    @messageResponse(\"popped\")\n    protected popped() {\n        this.element.removeClass(\"upNext\");\n        this.element.removeClass(\"wait\");\n    }\n\n    // Called when child instance is created under any instance this\n    // outlet is listening to. Looks for a child outlet of this outlet\n    // that is waiting for the code model associated with the instance.\n    // Propagates the child instance upward through ancestors until one\n    // is found that was waiting for it.\n    @messageResponse(\"childInstanceCreated\")\n    private childInstanceCreated(msg: Message<RuntimeConstruct>) {\n        this.setChildInstance(msg.data);\n    }\n\n    @messageResponse(\"current\")\n    private current() {\n        this.element.addClass(\"current\");\n    }\n\n    @messageResponse(\"uncurrent\")\n    private uncurrent() {\n        this.element.removeClass(\"current\");\n    }\n\n    @messageResponse(\"identifyCodeOutlet\")\n    private identifyCodeOutlet(msg: Message<(me: this) => void>) {\n        msg.data(this);\n    }\n}\n\n\nexport class PotentialFullExpressionOutlet<RT extends RuntimePotentialFullExpression = RuntimePotentialFullExpression> extends ConstructOutlet<RT> {\n    public constructor(element: JQuery, construct: RT[\"model\"], parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        \n        // if (this.construct.temporaryDeallocator) {\n        //     this.construct.temporaryDeallocator.dtors.forEach((tempDest) => {\n        //         this.addChildOutlet(Outlets.CPP.FunctionCall.instance(tempDest, this, []));\n        //     });\n        // }\n\n        //if (this.construct.isFullExpression()){\n        //    var this = this;\n        //    this.exprElem.hover(() => {\n        //        //alert(\"hi\");\n        //        this.element.addClass(\"current\");\n        //    },() => {\n        //        //alert(\"hi\");\n        //        this.element.removeClass(\"current\");\n        //        //this.simOutlet.sim.closeMessage();\n        //    }).click(() => {\n        //        this.simOutlet.sim.explain(this.inst ? this.inst.explain() : this.code.explain(this.simOutlet.sim));\n        //    });\n        //}\n    }\n}\n\nexport class FunctionOutlet extends ConstructOutlet<RuntimeFunction> {\n\n    public readonly ctorInitializer?: CtorInitializerOutlet;\n    public readonly body: BlockOutlet;\n\n    private readonly paramsElem: JQuery;\n    public parameterOutlets: ParameterOutlet[] = [];\n\n    public constructor(element: JQuery, rtFunc: RuntimeFunction, listener?: ObserverType) {\n        super(element, rtFunc.model);\n        listener && listenTo(listener, this);\n        this.element.addClass(\"function\");\n\n        // Constructors/destructors have a dummy return type of void in the representation,\n        // but we don't want to show that in the visualization.\n        if (!this.construct.declaration.isConstructor) {\n            var returnTypeElem = $('<span class=\"code-returnType\">' + this.construct.type.returnType.toString() + \"</span>\");\n            this.element.append(returnTypeElem);\n            this.element.append(\" \");\n        }\n        var nameElem = $('<span class=\"code-functionName\">' + this.construct.name + \"</span>\");\n        this.element.append(nameElem);\n\n        this.paramsElem = $(\"<span>()</span>\");\n        this.element.append(this.paramsElem);\n\n\n        // ctor-initializer\n        // let memInits = this.construct.memberInitializers;\n        // if (memInits && memInits.length > 0){\n        //     this.element.append(\"\\n : \");\n        //     for(let i = 0; i < memInits.length; ++i){\n        //         let mem = memInits[i];\n        //         this.element.append(htmlDecoratedName(mem.entity.name, mem.entity.type));\n        //         let memElem = $(\"<span></span>\");\n        //         createCodeOutlet(memElem, mem, this);\n        //         this.element.append(memElem);\n        //         if (i != memInits.length - 1){\n        //             this.element.append(\", \");\n        //         }\n        //     }\n        // }\n\n        if (this.construct.ctorInitializer) {\n            this.element.append(\"<br />\");\n            this.ctorInitializer = new CtorInitializerOutlet(\n                $(\"<span></span>\").appendTo(this.element),\n                this.construct.ctorInitializer,\n                this);\n        }\n\n        let bodyElem = $(\"<span></span>\").appendTo(this.element);\n        this.body = new BlockOutlet(bodyElem, this.construct.body, this);\n\n        // if (this.construct.autosToDestruct){\n        //     this.construct.autosToDestruct.forEach((dest) => {\n        //         this.addChildOutlet(Outlets.CPP.FunctionCall.instance(dest, this, []));\n        //     });\n        // }\n        // if (this.construct.membersToDestruct){\n        //     this.construct.membersToDestruct.forEach((dest) => {\n        //         this.addChildOutlet(Outlets.CPP.FunctionCall.instance(dest, this, []));\n        //     });\n        // }\n        // if (this.construct.basesToDestruct){\n        //     this.construct.basesToDestruct.forEach((dest) => {\n        //         this.addChildOutlet(Outlets.CPP.FunctionCall.instance(dest, this, []));\n        //     });\n        // }\n\n        this.setRuntimeInstance(rtFunc);\n        \n    }\n\n    protected instanceSet(inst: RuntimeFunction) {\n        super.instanceSet(inst);\n\n        if (inst.hasControl) {\n            this.element.addClass(\"hasControl\");\n        }\n\n        if (!inst.caller) {\n            // special case - if no caller, it must be the main function\n            this.paramsElem.html(\"()\");\n            return;\n        }\n\n        // Set up parameter outlets\n        this.paramsElem.empty();\n        this.paramsElem.append(\"(\");\n        //let paramElems = [];\n        let paramDefs = inst.model.parameters;\n\n        this.parameterOutlets = paramDefs.map((paramDef, i) => {\n            let elem = $(\"<span></span>\");\n            let paramOutlet = new ParameterOutlet(elem, paramDef);\n            //this.addChildOutlet(paramOutlet);\n            //paramElems.push(elem);\n            this.paramsElem.append(elem);\n            if (i < paramDefs.length - 1) {\n                this.paramsElem.append(\", \");\n            }\n            return paramOutlet;\n        });\n        this.paramsElem.append(\")\");\n    }\n\n    @messageResponse(\"gainControl\")\n    private gainControl() {\n        this.element.addClass(\"hasControl\");\n    }\n\n    @messageResponse(\"loseControl\")\n    private loseControl() {\n        this.element.removeClass(\"hasControl\");\n    }\n\n    @messageResponse(\"valueWritten\")\n    private valueWritten(msg: Message<AtomicType>) {\n        let obj : AutoObject = msg.source;\n\n\n    }\n\n    // _act: mixin({}, Outlets.CPP.Code._act, {\n\n    //     tailCalled : function(msg){\n    //         this.setUpParams();\n    //     },\n    //     reset : function(msg){\n    //         this.body.removeInstance();\n    //     }\n\n    // }, true)\n}\n\nexport class ParameterOutlet {\n\n    private readonly element: JQuery;\n    public readonly passedValueElem: JQuery;\n\n    public constructor(element: JQuery, paramDef: CompiledParameterDeclaration) {\n        this.element = element;\n\n        this.element.addClass(\"codeInstance\");\n        this.element.addClass(\"declaration\");\n        this.element.addClass(\"parameter\");\n\n        this.element.append(this.passedValueElem = $(\"<div> </div>\"));\n\n        this.element.append(paramDef.type.typeString(false, htmlDecoratedName(paramDef.name || \"\", paramDef.type), true));\n\n    }\n\n    public setPassedContents(html: string) {\n        this.passedValueElem.html(html);\n    }\n}\n\nexport class CtorInitializerOutlet extends ConstructOutlet<RuntimeCtorInitializer> {\n    \n    public readonly delegatedConstructorInitializer?: ClassDirectInitializerOutlet;\n    public readonly baseInitializer?: ClassDefaultInitializerOutlet | ClassDirectInitializerOutlet;\n    public readonly memberInitializers: readonly InitializerOutlet[];\n\n    public constructor(element: JQuery, construct: CompiledCtorInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.addClass(\"code-ctor-initializer\");\n\n        this.element.append(\" : \");\n\n        if (construct.delegatedConstructorInitializer) {\n            this.element.append(construct.delegatedConstructorInitializer.target.type.className);\n            this.delegatedConstructorInitializer = construct.delegatedConstructorInitializer?.createDefaultOutlet(\n                $(\"<span></span>\").appendTo(this.element),\n                this\n            );\n        }\n        \n        let first = !this.delegatedConstructorInitializer;\n\n        if (construct.baseInitializer?.kind === \"default\") {\n            if (!first) {\n                this.element.append(\", \");\n            }\n            else {\n                first = false;\n            }\n            this.element.append(construct.baseInitializer.target.type.className);\n            this.baseInitializer = construct.baseInitializer.createDefaultOutlet(\n                $(\"<span></span>\").appendTo(this.element),\n                this\n            );\n        }\n        else if (construct.baseInitializer?.kind === \"direct\") {\n            if (!first) {\n                this.element.append(\", \");\n            }\n            else {\n                first = false;\n            }\n            this.element.append(construct.baseInitializer.target.type.className);\n            this.baseInitializer = construct.baseInitializer.createDefaultOutlet(\n                $(\"<span></span>\").appendTo(this.element),\n                this\n            );\n\n        }\n\n        this.memberInitializers = construct.memberInitializers.map(memInit => {\n            if (!first) {\n                this.element.append(\", \");\n            }\n            else {\n                first = false;\n            }\n            this.element.append((<MemberVariableEntity>(memInit.target)).name);\n            return memInit.createDefaultOutlet($(\"<span></span>\").appendTo(this.element), this);\n\n        });\n\n        this.element.append(\" \");\n    }\n}\n\n// export class PassByValueParameterOutlet extends ParameterOutlet {\n\n//     private object: AutoObject;\n\n//     public _act!: MessageResponses;\n\n//     public constructor(element: JQuery, paramDef: CompiledParameterDefinition, object: AutoObject) {\n//         super(element, paramDef);\n//         this.object = object;\n//         listenTo(this, object);\n//     }\n\n// }\n\nvar curlyOpen = \"<span class=\\\"curly-open\\\">{</span>\";\nvar curlyClose = \"<span class=\\\"curly-close\\\">}</span>\";\n\nexport class BlockOutlet extends ConstructOutlet<RuntimeBlock> {\n\n    public constructor(element: JQuery, construct: CompiledBlock, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        \n        this.element.removeClass(\"codeInstance\");\n        this.element.addClass(\"braces\");\n        this.element.append(\" \"); // spaces before braces :)\n        this.element.append(curlyOpen);\n        this.element.append(\"<br />\");\n        let innerElem = $(\"<span class=\\\"inner\\\"><span class=\\\"lobster-highlight\\\"></span></span>\");\n        innerElem.addClass(\"code-indentedBlockBody\");\n        this.element.append(innerElem);\n\n        // this.gotoLinks = [];\n        //let statementElems = [];\n        this.construct.statements.forEach(stmt => {\n            let lineElem = $('<span class=\"blockLine\"></span>');\n            let elem = $(\"<span></span>\");\n            let child = createStatementOutlet(elem, stmt, this);\n\n            // let gotoLink = $('<span class=\"gotoLink link\">>></span>');\n            // lineElem.append(gotoLink);\n            // this.gotoLinks.push(gotoLink);\n            // //gotoLink.css(\"visibility\", \"hidden\");\n            // let self = this;\n\n            // // wow this is really ugly lol. stupid closures\n            // gotoLink.click(\n            //     function (x) {\n            //         return function () {\n            //             if (!self.inst){\n            //                 return;\n            //             }\n\n            //             var me = $(this);\n            //             //if (self.gotoInProgress){\n            //             //    return;\n            //             //}\n            //             //self.gotoInProgress = true;\n            //             var temp = me.html();\n            //             if (me.html() == \"&lt;&lt;\"){\n            //                 self.simOutlet.simOutlet.stepBackward(self.simOutlet.sim.stepsTaken() - self.inst.childInstances.statements[x].stepsTaken);\n            //                 return;\n            //             }\n\n\n            //             me.addClass(\"inProgress\");\n\n            //             self.inst.pauses[x] = {pauseAtIndex: x, callback: function(){\n            //                 //self.gotoInProgress = false;\n            //                 me.removeClass(\"inProgress\");\n            //             }};\n            //             //if (self.inst.pauses[x]){\n            //                 self.simOutlet.send(\"skipToEnd\");\n            //             //}\n            //         };\n            //     }(i));\n\n            lineElem.append(elem);\n            innerElem.append(lineElem);\n            innerElem.append(\"<br />\");\n        });\n\n        this.element.append(\"<br />\");\n        this.element.append(curlyClose);\n\n//        this.element.append(\"}\");\n\n\n    }\n\n    // instanceSet : function(){\n    //     Outlets.CPP.Block._parent.instanceSet.apply(this, arguments);\n    //     for(var i = 0; i < this.inst.index; ++i){\n    //         this.gotoLinks[i].html(\"<<\").css(\"visibility\", \"visible\");\n    //     }\n    //     for(var i = this.inst.index; i < this.gotoLinks.length; ++i){\n    //         this.gotoLinks[i].html(\">>\").css(\"visibility\", \"visible\");\n    //     }\n    // }\n\n    // instanceRemoved : function(){\n    //     Outlets.CPP.Block._parent.instanceRemoved.apply(this, arguments);\n    //     for(var i = 0; i < this.gotoLinks.length; ++i){\n    //         this.gotoLinks[i].html(\">>\").css(\"visibility\", \"hidden\");\n    //     }\n    // },\n\n    // _act: mixin({}, Outlets.CPP.Code._act, {\n\n    //     index: function(msg){\n    //         this.gotoLinks[msg.data].html(\"<<\");\n    //         //this.gotoLinks[msg.data].css(\"visibility\", \"hidden\");\n    //     }\n\n    // }, true)\n}\n\n\n// Lobster.Outlets.CPP.OpaqueFunctionBodyBlock = Outlets.CPP.Code.extend({\n//     _name: \"Outlets.CPP.OpaqueFunctionBodyBlock\",\n\n//     createElement: function(){\n//         this.element.removeClass(\"codeInstance\");\n//         this.element.addClass(\"braces\");\n//         this.element.append(curlyOpen);\n//         this.element.append(\"<br />\");\n//         var inner = this.innerElem = $(\"<span class=\\\"inner\\\"><span class=\\\"lobster-highlight\\\"></span></span>\");\n//         inner.addClass(\"code-indentedBlockBody\");\n//         this.element.append(inner);\n//         var lineElem = $('<span class=\"blockLine\">// Implementation not shown</span>');\n//         inner.append(lineElem);\n//         inner.append(\"<br />\");\n//         this.element.append(\"<br />\");\n//         this.element.append(curlyClose);\n//     }\n// });\n\nexport class StatementOutlet<RTConstruct_type extends RuntimeStatement = RuntimeStatement> extends ConstructOutlet<RTConstruct_type> {\n\n    public constructor(element: JQuery, construct: RTConstruct_type[\"model\"], parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"statement\");\n    }\n    \n    // @messageResponse(\"popped\")\n    // protected popped() {\n    //     super.popped();\n    //     this.removeInstance();\n    // }\n\n}\n\nfunction allLocalVariableDefinitions(declarations: readonly CompiledSimpleDeclaration[]) : declarations is CompiledLocalVariableDefinition[] {\n    return declarations.every(decl => decl instanceof LocalVariableDefinition);\n}\n\nexport class DeclarationStatementOutlet extends StatementOutlet<RuntimeDeclarationStatement> {\n\n    public readonly initializerOutlets: readonly (InitializerOutlet | undefined)[] = [];\n\n    private declaratorElems : JQuery[] = [];\n    private currentDeclarationIndex : number | null = null;\n\n    public constructor(element: JQuery, construct: CompiledDeclarationStatement, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        let declarationElem = $(\"<span></span>\")\n\n        declarationElem.addClass(\"codeInstance\");\n        declarationElem.addClass(\"declaration\");\n\n        // TODO: add support for other kinds of declarations that aren't variable definitions\n        let declarations = this.construct.declarations;\n        if (!allLocalVariableDefinitions(declarations)) {\n            return;\n        }\n\n        // Non-null assertion below because type specifier's baseType must be defined if\n        // the declarator of this variable definition got created.\n        declarationElem.append(htmlDecoratedType(declarations[0].typeSpecifier.baseType!.toString()));\n\n        declarationElem.append(\" \");\n\n        declarations.forEach((declaration, i) => {\n\n            // Create element for declarator\n            let declElem = $('<span class=\"codeInstance code-declarator\"><span class=\"lobster-highlight\"></span></span>');\n            this.declaratorElems.push(declElem);\n            declElem.append(declaration.type.declaratorString(htmlDecoratedName(declaration.name, declaration.type)));\n            declarationElem.append(declElem);\n\n            // Create element for initializer, if there is one\n            if(declaration.initializer) {\n                asMutable(this.initializerOutlets).push(\n                    createInitializerOutlet($(\"<span></span>\").appendTo(declarationElem), declaration.initializer, this)\n                );\n            }\n            else {\n                asMutable(this.initializerOutlets).push(undefined);\n            }\n\n            // Add commas where needed\n            if (i < declarations.length - 1) {\n                declarationElem.append(\", \");\n            }\n        });\n\n        this.element.append(declarationElem);\n        this.element.append(\";\");\n    }\n\n    protected instanceSet(inst: RuntimeDeclarationStatement) {\n        super.instanceSet(inst);\n        this.setCurrentDeclarationIndex(inst.isActive ? inst.currentDeclarationIndex : null);\n    }\n\n    protected instanceRemoved(oldInst: RuntimeDeclarationStatement) {\n        this.setCurrentDeclarationIndex(null);\n        super.instanceRemoved(oldInst);\n    }\n\n    private setCurrentDeclarationIndex(current: number | null) {\n\n        // Remove from previous current\n        if (this.currentDeclarationIndex !== null) {\n            this.declaratorElems[this.currentDeclarationIndex].removeClass(\"active\");\n        }\n\n        // Set new or set to null\n        this.currentDeclarationIndex = current;\n        if (current !== null) {\n            this.declaratorElems[current].addClass(\"active\");\n        }\n    }\n\n    @messageResponse(\"initializing\")\n    private initializing(msg: Message<number>) {\n        this.setCurrentDeclarationIndex(msg.data);\n    }\n    \n    @messageResponse(\"popped\")\n    protected popped() {\n        super.popped();\n        this.setCurrentDeclarationIndex(null);\n    }\n}\n\nexport class ExpressionStatementOutlet extends StatementOutlet<RuntimeExpressionStatement> {\n\n    public readonly expression: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledExpressionStatement, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.expression = addChildExpressionOutlet(this.element, this.construct.expression, this);\n        this.element.append(\";\");\n    }\n\n    protected instanceSet(inst: RuntimeExpressionStatement) {\n        super.instanceSet(inst);\n        if (!inst.isActive) {\n            this.expression.hideEvalValueRecursive();\n        }\n    }\n    \n    @messageResponse(\"popped\")\n    protected popped() {\n        super.popped();\n        this.expression.hideEvalValueRecursive();\n    }\n}\n\nexport class NullStatementOutlet extends StatementOutlet<RuntimeNullStatement> {\n\n    public constructor(element: JQuery, construct: CompiledNullStatement, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.append(\";\");\n    }\n\n}\n\nexport class IfStatementOutlet extends StatementOutlet<RuntimeIfStatement> {\n    \n    public readonly condition: ExpressionOutlet;\n    public readonly then: StatementOutlet;\n    public readonly otherwise?: StatementOutlet;\n\n    public constructor(element: JQuery, construct: CompiledIfStatement, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.addClass(\"selection\");\n\n        this.element.append(htmlDecoratedKeyword(\"if\"));\n        this.element.append('(');\n\n        this.condition = addChildExpressionOutlet(this.element, construct.condition, this);\n\n        this.element.append(\")\");\n\n        this.then = addChildStatementOutlet(this.element, this.construct.then, this);\n\n        if (this.construct.otherwise){\n            this.element.append(\"<br />\");\n            this.element.append(htmlDecoratedKeyword(\"else\"));\n            this.otherwise = addChildStatementOutlet(this.element, this.construct.otherwise, this);\n        }\n    }\n}\n\nexport class WhileStatementOutlet extends StatementOutlet<RuntimeWhileStatement> {\n    \n    public readonly condition: ExpressionOutlet;\n    public readonly body: StatementOutlet;\n\n    public constructor(element: JQuery, construct: CompiledWhileStatement, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.addClass(\"code-while\");\n\n        this.element.append(htmlDecoratedKeyword(\"while\"));\n        this.element.append(\"(\");\n\n        this.condition = addChildExpressionOutlet(this.element, construct.condition, this);\n\n        this.element.append(\") \");\n\n        this.body = addChildStatementOutlet(this.element, construct.body, this);\n    }\n}\n\n// Lobster.Outlets.CPP.DoWhile = Outlets.CPP.Statement.extend({\n//     _name: \"Outlets.CPP.DoWhile\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n//         this.element.addClass(\"code-doWhile\");\n//     },\n\n//     createElement: function(){\n//         this.element.append(htmlDecoratedKeyword(\"do\"));\n\n//         var bodyElem = $(\"<span></span>\")\n//         this.addChildOutlet(this.body = createCodeOutlet(bodyElem, this.construct.body, this.simOutlet));\n//         this.element.append(bodyElem);\n\n//         this.element.append(\"\\n\" + htmlDecoratedKeyword(\"while\") + \"(\");\n\n//         var condElem = $(\"<span></span>\")\n//         this.addChildOutlet(this.condition = createCodeOutlet(condElem, this.construct.condition, this.simOutlet));\n//         this.element.append(condElem);\n\n//         this.element.append(\") \");\n\n\n//     },\n\n//     _act: $.extend({}, Outlets.CPP.Statement._act, {\n//         reset: function(){\n//             this.condition.removeInstance();\n//             this.body.removeInstance();\n//         }\n//     })\n// });\n\n\n\nexport class ForStatementOutlet extends StatementOutlet<RuntimeForStatement> {\n\n    public readonly initial: StatementOutlet;\n    public readonly condition: ExpressionOutlet;\n    public readonly post?: ExpressionOutlet;\n    public readonly body: StatementOutlet;\n\n    public constructor(element: JQuery, construct: CompiledForStatement, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.addClass(\"code-for\");\n\n        this.element.append(htmlDecoratedKeyword(\"for\"));\n        this.element.append(\"(\");\n\n        this.initial = addChildStatementOutlet(this.element, construct.initial, this);\n\n        this.element.append(\" \");\n\n        this.condition = addChildExpressionOutlet(this.element, construct.condition, this);\n\n        this.element.append(\"; \");\n\n        this.post = construct.post && addChildExpressionOutlet(this.element, construct.post, this);\n\n        this.element.append(\") \");\n\n        this.body = addChildStatementOutlet(this.element, construct.body, this);\n\n    }\n}\n\nexport class BreakStatementOutlet extends StatementOutlet<RuntimeBreakStatement> {\n\n    public constructor(element: JQuery, construct: CompiledBreakStatement, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        element.append('<span class=\"code-keyword\">break</span>');\n        element.append(\";\");\n    }\n\n}\n\nexport class ReturnStatementOutlet extends StatementOutlet<RuntimeReturnStatement> {\n\n    public readonly returnInitializer?: ReturnInitializerOutlet;\n\n    public constructor(element: JQuery, construct: CompiledReturnStatement, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        element.addClass(\"return\");\n        element.append('<span class=\"code-keyword\">return</span>');\n\n        if (construct.returnInitializer) {\n            element.append(\" \");\n            this.returnInitializer = new ReturnInitializerOutlet(\n                $(\"<span></span>\").appendTo(element), construct.returnInitializer, this);\n        }\n\n        element.append(\";\");\n    }\n\n    // _act : mixin({}, Outlets.CPP.Code._act, {\n    //     returned: function(msg){\n    //         var data = msg.data;\n\n    //         // If it's main just return\n    //         if (this.construct.containingFunction().isMain){\n    //             return;\n    //         }\n\n    //         if (this.expr) {\n    //             this.inst.containingRuntimeFunction().parent.send(\"returned\", this.args[0]);\n    //         }\n\n    //     }\n    // }),\n\n}\n\nexport class ReturnInitializerOutlet extends ConstructOutlet<RuntimeDirectInitializer> {\n    \n    public readonly expression: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledDirectInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.expression = addChildExpressionOutlet(element, construct.args[0], this);\n    }\n\n    \n    @messageResponse(\"referenceInitialized\", \"unwrap\")\n    private referenceInitialized(data: RuntimeReferenceDirectInitializer) {\n        let obj = data.args[0].evalResult;\n        this.observable.send(\"returnPassed\", {\n            func: data.containingRuntimeFunction,\n            start: this.element,\n            html: htmlDecoratedName(obj.name ?? `@${obj.address}`),\n            result: obj\n        });\n    }\n\n    @messageResponse(\"atomicObjectInitialized\", \"unwrap\")\n    private atomicObjectInitialized(data: RuntimeAtomicDirectInitializer) {\n        let value = data.args[0].evalResult;\n        this.observable.send(\"returnPassed\", {\n            func: data.containingRuntimeFunction,\n            start: this.element,\n            html: htmlDecoratedValue(getValueString(value)),\n            result: value\n        });\n    }\n}\n\n\n\n\n\n\n// export class Initializer<RTInitializer_type extends RuntimeInitializer = RuntimeInitializer> extends ConstructOutlet<RTInitializer_type> {\n\n//     public constructor(element: JQuery, construct: RTInitializer_type[\"model\"], parent?: ConstructOutlet) {\n//         super(element, construct, parent);\n\n//         this.element.addClass(\"code-initializer\");\n\n//         var exprElem = $(\"<span></span>\");\n//         this.element.append(exprElem);\n//         this.arg = createCodeOutlet(exprElem, this.construct.initExpr, this.simOutlet);\n//     }\n\n//     // _act : copyMixin(Outlets.CPP.Code._act, {\n//     //     \"idArgOutlet\" : Observer._IDENTIFY\n//     // })\n// }\n\n// Lobster.Outlets.CPP.InitializerList = Outlets.CPP.Code.extend({\n//     _name: \"Outlets.CPP.InitializerList\",\n\n//     init: function (element, code, simOutlet) {\n//         this.initParent(element, code, simOutlet);\n//         this.element.addClass(\"code-initializerList\");\n\n//         this.element.append(\"{\");\n\n//         for (var i = 0; i < this.construct.initializerListLength; ++i) {\n//             var argElem = $(\"<span></span>\");\n//             createCodeOutlet(argElem, this.code[\"arg\"+i], this);\n//             this.element.append(argElem);\n//             if (i < this.construct.initializerListLength - 1) {\n//                 this.element.append(\", \");\n//             }\n//         }\n\n//         this.element.append(\"}\");\n//     },\n//     _act : copyMixin(Outlets.CPP.Code._act, {\n//         \"idArgOutlet\" : Observer._IDENTIFY\n//     })\n// });\n\n\nexport class InitializerOutlet<RT extends RuntimeInitializer = RuntimeInitializer> extends PotentialFullExpressionOutlet<RT> {\n    \n    public constructor(element: JQuery, construct: CompiledInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"code-initializer-\" + this.construct.kind);\n    }\n    \n}\n\nexport class AtomicDefaultInitializerOutlet extends InitializerOutlet<RuntimeAtomicDefaultInitializer> {\n    \n    // Nothing to add based on being atomic\n    \n}\n\nexport class ArrayDefaultInitializerOutlet extends InitializerOutlet<RuntimeArrayDefaultInitializer> {\n    \n    public readonly elementInitializerOutlets?: readonly InitializerOutlet[];\n\n    public constructor(element: JQuery, construct: CompiledArrayDefaultInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        if (this.construct.elementInitializers) {\n            this.elementInitializerOutlets = this.construct.elementInitializers.map(\n                elemInit => createInitializerOutlet(element, elemInit, this)\n            );\n        }\n    }\n    \n}\n\nexport class ClassDefaultInitializerOutlet extends InitializerOutlet<RuntimeClassDefaultInitializer> {\n    \n    public readonly ctorCallOutlet: FunctionCallOutlet;\n\n    public constructor(element: JQuery, construct: CompiledClassDefaultInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        // this.element.append(htmlDecoratedType(construct.target.type.className));\n\n        this.ctorCallOutlet = new FunctionCallOutlet($(\"<span></span>\").appendTo(this.element), construct.ctorCall, this);\n    }\n    \n}\n\nexport type DefaultInitializerOutlet =\n    AtomicDefaultInitializerOutlet |\n    ArrayDefaultInitializerOutlet |\n    ClassDefaultInitializerOutlet;\n\n\nexport class AtomicDirectInitializerOutlet extends InitializerOutlet<RuntimeAtomicDirectInitializer> {\n    \n    public readonly argOutlet: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledAtomicDirectInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n    \n        this.element.append(\"(\");\n        this.argOutlet = addChildExpressionOutlet(this.element, construct.arg, this);\n        this.element.append(\")\");\n\n    }\n    \n}\n\n\nexport class ReferenceDirectInitializerOutlet extends InitializerOutlet<RuntimeReferenceDirectInitializer> {\n    \n    public readonly argOutlet: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledReferenceDirectInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n    \n        this.element.append(\"(\");\n        this.argOutlet = addChildExpressionOutlet(this.element, construct.arg, this);\n        this.element.append(\")\");\n\n    }\n    \n}\n\n\nexport class ArrayDirectInitializerOutlet extends InitializerOutlet<RuntimeArrayDirectInitializer> {\n    \n    public readonly argOutlet: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledArrayDirectInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n    \n        if (construct.kind === \"direct\") {\n            this.element.append(\")\");\n            this.argOutlet = addChildExpressionOutlet(this.element, construct.arg, this);\n            this.element.append(\"(\");\n        }\n        else {\n            this.element.append(\" = \");\n            this.argOutlet = addChildExpressionOutlet(this.element, construct.arg, this);\n        }\n        \n    }\n    \n}\n\n\nexport class ClassDirectInitializerOutlet extends InitializerOutlet<RuntimeClassDirectInitializer> {\n    \n    public readonly ctorCallOutlet: FunctionCallOutlet;\n\n    public constructor(element: JQuery, construct: CompiledClassDirectInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.append(\"(\");\n\n        this.ctorCallOutlet = new FunctionCallOutlet($(\"<span></span>\").appendTo(this.element), construct.ctorCall, this);\n\n        this.element.append(\")\");\n    }\n}\n\nexport type DirectInitializerOutlet =\n    AtomicDirectInitializerOutlet |\n    ReferenceDirectInitializerOutlet |\n    ArrayDirectInitializerOutlet |\n    ClassDirectInitializerOutlet;\n\n\n\nexport abstract class CopyInitializerOutlet extends InitializerOutlet<RuntimeDirectInitializer> {\n    \n    public constructor(element: JQuery, construct: CompiledDirectInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"code-copyInitializer\");\n    }\n}\n\nexport class AtomicCopyInitializerOutlet extends InitializerOutlet<RuntimeAtomicDirectInitializer> {\n    \n    public readonly argOutlet: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledAtomicDirectInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n    \n        this.element.append(\" = \");\n        this.argOutlet = addChildExpressionOutlet(this.element, construct.arg, this);\n    }\n    \n}\n\nexport class ReferenceCopyInitializerOutlet extends InitializerOutlet<RuntimeReferenceDirectInitializer> {\n    \n    public readonly argOutlet: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledReferenceDirectInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n    \n        this.element.append(\" = \");\n        this.argOutlet = addChildExpressionOutlet(this.element, construct.arg, this);\n    }\n    \n}\n\n\nexport class ClassCopyInitializerOutlet extends InitializerOutlet<RuntimeClassDirectInitializer> {\n    \n    public readonly ctorCallOutlet: FunctionCallOutlet;\n\n    public constructor(element: JQuery, construct: CompiledClassDirectInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.append(\" = \");\n\n        this.ctorCallOutlet = new FunctionCallOutlet($(\"<span></span>\").appendTo(this.element), construct.ctorCall, this);\n    }\n}\n\n\nexport abstract class ExpressionOutlet<RT extends RuntimeExpression = RuntimeExpression> extends PotentialFullExpressionOutlet<RT> {\n    \n    public readonly showingEvalResult: boolean = false;\n    public readonly animateEvaluation: boolean;\n    \n    protected readonly evalResultElem: JQuery;\n    protected readonly wrapperElem: JQuery;\n    protected readonly exprElem: JQuery;\n\n    public constructor(element: JQuery, construct: RT[\"model\"], parent?: ConstructOutlet, animateEvaluation = true) {\n        super(element, construct, parent);\n\n        this.animateEvaluation = animateEvaluation;\n\n        this.element.addClass(\"expression\");\n        if (this.construct.isFullExpression()) {this.element.addClass(\"fullExpression\");}\n\n        this.evalResultElem = $(\"<span class='lobster-hidden-expression' style='opacity:0'></span>\"); // TODO fix this ugly hack\n        this.wrapperElem = $(\"<span class='lobster-expression-wrapper'></span>\");\n        this.exprElem = $(\"<span class='expr'></span>\"); // TODO fix this ugly hack\n        this.wrapperElem.append(this.exprElem);\n        this.wrapperElem.append(this.evalResultElem);\n\n        this.element.append(this.wrapperElem);\n\n        this.element.append(\"<span class='exprType'>\" + encode(this.construct.type.toString()) + \"</span>\");\n\n    }\n\n    protected setEvalResult(result: RT[\"evalResult\"], suppressAnimation: boolean = false) {\n        \n        \n        if (result instanceof FunctionEntity) {\n            this.evalResultElem.html(result.describe().message);\n            this.evalResultElem.addClass(\"lvalue\");\n        }\n        else if (result.type.isCompleteObjectType()) {\n            let r = <CPPObject<CompleteObjectType>> result;\n            this.evalResultElem.html(getObjectString(r));\n            this.evalResultElem.addClass(\"lvalue\");\n            if (!r.isAlive || r.isTyped(isAtomicType) && !r.isValueValid()) {\n                this.evalResultElem.find(\".code-object\").addClass(\"invalid\");\n            }\n        }\n        else if (result instanceof Value) {  // result.isA(Value)\n            this.evalResultElem.html(getValueString(result));\n            this.evalResultElem.addClass(\"rvalue\");\n            if (!result.isValid) {\n                this.evalResultElem.addClass(\"invalid\");\n            }\n        }\n        else {\n            assertFalse(\"unexpected evalResult type for expression outlet\");\n        }\n\n        this.showEvalResult(suppressAnimation);\n    }\n\n    public showEvalResult(suppressAnimation: boolean = false) {\n        \n        if (this.showingEvalResult) {\n            return;\n        }\n\n        (<Mutable<this>>this).showingEvalResult = true;\n\n        if (!this.animateEvaluation) {\n            return;\n        }\n\n        if(CODE_ANIMATIONS && !suppressAnimation) {\n            this.wrapperElem.animate({\n                width: this.evalResultElem.css(\"width\")\n            }, 500, function () {\n                $(this).css(\"width\", \"auto\");\n            });\n        }\n\n        this.evalResultElem.removeClass(\"lobster-hidden-expression\").fadeTo(EVAL_FADE_DURATION, 1);\n        this.exprElem.addClass(\"lobster-hidden-expression\").fadeTo(EVAL_FADE_DURATION, 0);\n    }\n\n    public removeEvalValue() {\n        (<Mutable<this>>this).showingEvalResult = false;\n\n        if (!this.animateEvaluation) {\n            return;\n        }\n//        if(CODE_ANIMATIONS) {\n//            this.wrapperElem.animate({\n//                width: this.exprElem.css(\"width\")\n//            }, 500, function () {\n//                $(this).css(\"width\", \"auto\");\n//            });\n////                this.evalResultElem.animate({\n////                    width: this.evalResultElem.css(\"width\")\n////                }, 500, function () {\n////                    $(this).css(\"width\", \"auto\");\n////                });\n//        }\n        //setTimeout(function() {\n            this.exprElem.removeClass(\"lobster-hidden-expression\").fadeTo(RESET_FADE_DURATION, 1).finish();\n            this.evalResultElem.addClass(\"lobster-hidden-expression\").fadeTo(RESET_FADE_DURATION, 0).finish();\n\n            this.element.removeClass(\"rvalue\");\n            this.element.removeClass(\"lvalue\");\n            this.wrapperElem.css(\"width\", \"auto\");\n        //}, 2000);\n    }\n\n    public hideEvalValueRecursive() {\n        this.removeEvalValue();\n        for (let cKey in this.children) {\n            let c = this.children[cKey];\n            if (c instanceof ExpressionOutlet) {\n                c.hideEvalValueRecursive();\n            }\n        }\n    }\n\n    protected instanceSet(inst: RT) {\n        super.instanceSet(inst);\n        if (inst.evalResult) {\n            this.setEvalResult(inst.evalResult, true);\n        }\n        else{\n            this.removeEvalValue();\n        }\n    }\n\n    protected instanceRemoved(oldInst: RT) {\n        this.removeEvalValue();\n        super.instanceRemoved(oldInst);\n    }\n\n    @messageResponse(\"evaluated\")\n    protected evaluated(msg: Message<RT[\"evalResult\"]>) {\n        this.setEvalResult(msg.data);\n    }\n}\n\nconst ASSIGNMENT_OP_HTML = htmlDecoratedOperator(\"=\", \"code-assignmentOp\");\n\nexport class AssignmentExpressionOutlet extends ExpressionOutlet<RuntimeAssignment> {\n\n    public readonly lhs: ExpressionOutlet;\n    public readonly rhs: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledAssignmentExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.addClass(\"assignment\");\n\n        this.lhs = addChildExpressionOutlet(this.exprElem, this.construct.lhs, this);\n\n        this.exprElem.append(\" \" + ASSIGNMENT_OP_HTML + \" \");\n\n        this.rhs = addChildExpressionOutlet(this.exprElem, this.construct.rhs, this);\n\n\n        // if (this.construct.funcCall){\n        //     var callOutlet = Outlets.CPP.FunctionCall.instance(this.construct.funcCall, this);\n        //     this.addChildOutlet(callOutlet);\n\n        //     this.argOutlets = callOutlet.argOutlets;\n        //     this.argOutlets.forEach(function(argOutlet,i,arr){\n        //         self.addChildOutlet(argOutlet);\n        //         self.exprElem.append(argOutlet.element);\n        //         if (i < arr.length - 1) {\n        //             self.exprElem.append(\", \");\n        //         }\n        //     });\n        // }\n    }\n\n//     _act: mixin({}, Outlets.CPP.Expression._act, {\n\n//         returned: function(msg){\n//             var value = msg.data;\n//             this.setEvalResult(value);\n\n// //            if(CODE_ANIMATIONS) {\n// //                this.wrapperElem.animate({\n// //                    width: this.evalResultElem.css(\"width\")\n// //                }, 500, function () {\n// //                    $(this).css(\"width\", \"auto\");\n// //                });\n// //            }\n\n//             this.evalResultElem.removeClass(\"lobster-hidden-expression\").fadeTo(EVAL_FADE_DURATION, 1);\n//             this.exprElem.addClass(\"lobster-hidden-expression\").fadeTo(EVAL_FADE_DURATION, 0);\n\n// //            console.log(\"expression evaluated to \" + value.value);\n//         }\n\n//     }, true)\n}\n\nconst TERNARY_OP_HTML1 = htmlDecoratedOperator(\"?\", \"code-ternaryOp\");\nconst TERNARY_OP_HTML2 = htmlDecoratedOperator(\":\", \"code-ternaryOp\");\n\n\nexport class TernaryExpressionOutlet extends ExpressionOutlet<RuntimeTernary> {\n\n    public readonly condition: ExpressionOutlet;\n    public readonly then: ExpressionOutlet;\n    public readonly otherwise: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledTernaryExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.addClass(\"code-ternary\");\n\n        this.condition = addChildExpressionOutlet(this.exprElem, this.construct.condition, this);\n\n        this.exprElem.append(\" \" + TERNARY_OP_HTML1 + \" \");\n\n        this.then = addChildExpressionOutlet(this.exprElem, this.construct.then, this);\n\n        this.exprElem.append(\" \" + TERNARY_OP_HTML2 + \" \");\n\n        this.otherwise = addChildExpressionOutlet(this.exprElem, this.construct.otherwise, this);\n    }\n}\n\nconst COMMA_OP_HTML = htmlDecoratedOperator(\",\", \"code-binaryOp\");\n\nexport class CommaExpressionOutlet extends ExpressionOutlet<RuntimeComma> {\n    \n    public readonly left: ExpressionOutlet;\n    public readonly right: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledCommaExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.addClass(\"code-comma\");\n\n        this.left = addChildExpressionOutlet(this.exprElem, this.construct.left, this);\n\n        this.exprElem.append(\" \" + COMMA_OP_HTML + \" \");\n\n        this.right = addChildExpressionOutlet(this.exprElem, this.construct.right, this);\n    }\n}\n\n// Lobster.Outlets.CPP.CompoundAssignment = Outlets.CPP.Expression.extend({\n//     _name: \"Outlets.CPP.CompoundAssignment\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n//         this.element.addClass(\"compoundAssignment\");\n\n//         //let lhsElem = $(\"<span></span>\");\n//         //createCodeOutlet(lhsElem, this.construct.rhs.left, this);\n//         //this.exprElem.append(lhsElem);\n//         //\n//         //this.exprElem.append(\" \" + htmlDecoratedOperator(this.construct.operator, \"code-compoundAssignmentOp\") + \" \");\n\n//         let rhsElem = $(\"<span></span>\");\n//         let rhsOutlet = createCodeOutlet(rhsElem, this.construct.rhs, this.simOutlet);\n//         this.addChildOutlet(rhsOutlet);\n//         this.exprElem.append(rhsElem);\n//         rhsElem.find(\".code-binaryOp\").first().replaceWith(htmlDecoratedOperator(this.construct.operator, \"code-compoundAssignmentOp\"));\n//     }\n// });\n\n// export class FunctionCallOutlet extends ConstructOutlet<RuntimeFunctionCall> {\n\n//     // public readonly returnOutlet;\n//     public readonly functionOutlet?: FunctionOutlet;\n//     public readonly argOutlets: readonly CopyInitializerOutlet[];\n\n//     public constructor(element: JQuery, construct: CompiledFunctionCall, parent?: ConstructOutlet) {\n//         super(element, construct, parent);\n        \n//         // this.returnOutlet = returnOutlet;\n\n//         this.argOutlets = this.construct.argInitializers.map((argInit) => \n//             new CopyInitializerOutlet($(\"<span></span>\"), argInit)\n//         );\n//     }\n\n//     // protected instanceSet(inst: RuntimeFunctionCall) {\n//     //     inst.calledFunction.isActive\n//     //     if (this.inst.hasBeenCalled && this.inst.func.isActive) {\n//     //         var funcOutlet = this.simOutlet.pushFunction(this.inst.func, this);\n//     //         funcOutlet && this.listenTo(funcOutlet);\n//     //     }\n//     // }\n\n//     // _act: mixin({}, Outlets.CPP.Code._act, {\n\n//     //     returned: function(msg){\n//     //         // This may be the case for main, constructors, destructors, etc.\n//     //         if (!this.returnOutlet){\n//     //             return;\n//     //         }\n//     //         var sourceOutlet = msg.data;\n\n//     //         var self = this;\n//     //         var data = sourceOutlet.inst && sourceOutlet.inst.childInstances && sourceOutlet.inst.childInstances.args && sourceOutlet.inst.childInstances.args[0] && sourceOutlet.inst.childInstances.args[0].evalResult;\n//     //         if (!data){\n//     //             return;\n//     //         }\n//     //         this.simOutlet.valueTransferOverlay(sourceOutlet, this.returnOutlet, Util.htmlDecoratedValue(data.instanceString()), 500,\n//     //             function () {\n//     //                 if(self.returnOutlet) { // may have evaporated if we're moving too fast\n//     //                     self.returnOutlet.setEvalResult(data);\n//     //                 }\n//     //             });\n//     //     },\n//     //     tailCalled : function(msg){\n//     //         var callee = msg.data;\n//     //         callee.send(\"tailCalled\", this);\n//     //     },\n//     //     called : function(msg){\n//     //         var callee = msg.data;\n//     //         assert(this.simOutlet);\n//     //         if (!this.simOutlet.simOutlet.autoRunning || !this.simOutlet.simOutlet.skipFunctions){\n//     //             var funcOutlet = this.simOutlet.pushFunction(this.inst.func, this);\n//     //             funcOutlet && this.listenTo(funcOutlet);\n//     //         }\n//     //     }\n//     // }, true)\n// }\n\nexport interface ReturnDestinationOutlet {\n    readonly returnDestinationElement: JQuery;\n    setReturnedResult(result: RuntimeFunctionCallExpression[\"evalResult\"], suppressAnimation?: boolean) : void;\n}\n\nexport class FunctionCallExpressionOutlet extends ExpressionOutlet<RuntimeFunctionCallExpression> implements ReturnDestinationOutlet {\n\n    public readonly operandOutlet: ExpressionOutlet;\n    public readonly callOutlet: FunctionCallOutlet;\n    public readonly returnDestinationElement: JQuery;\n    \n    public constructor(element: JQuery, construct: CompiledFunctionCallExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"functionCall\");\n        this.returnDestinationElement = this.exprElem;\n\n        // if (this.construct.funcCall.func.isVirtual()){\n        //     this.element.addClass(\"virtual\");\n        // }\n\n        // if (this.construct.recursiveStatus === \"recursive\" && this.construct.isTail) {\n        //     this.element.addClass(\"tail\");\n        // }\n\n        this.operandOutlet = createExpressionOutlet($('<span class=\"functionCall-operand\"></span>').appendTo(this.exprElem), construct.operand, this);\n\n        this.exprElem.append(\"(\");\n\n        this.callOutlet = new FunctionCallOutlet($(\"<span></span>\").appendTo(this.exprElem), construct.call, this, this);\n\n        this.exprElem.append(\")\");\n        // if (this.construct.funcCall.func.isVirtual()){\n        //     this.exprElem.append(\"<sub>v</sub>\");\n        // }\n    }\n\n    public setReturnedResult(result: RuntimeFunctionCallExpression[\"evalResult\"], suppressAnimation: boolean = false) {\n        this.setEvalResult(result);\n    }\n\n//     _act: mixin({}, Outlets.CPP.Expression._act, {\n\n// //        calleeOutlet : function(callee, source){\n// //            this.addChildOutlet(callee);\n// //        },\n\n//         returned: function(msg){\n//             var value = msg.data;\n//             this.setEvalResult(value);\n\n//             this.evalResultElem.removeClass(\"lobster-hidden-expression\");\n//             this.exprElem.addClass(\"lobster-hidden-expression\");\n//         },\n//         tailCalled : function(msg){\n//             var callee = msg.data;\n//             callee.send(\"tailCalled\", this);\n//         }\n\n//     }, true)\n}\n\nexport class FunctionCallOutlet extends ConstructOutlet<RuntimeFunctionCall> {\n\n    public readonly argInitializerOutlets: readonly ArgumentInitializerOutlet[];\n    public readonly returnOutlet?: ReturnDestinationOutlet;\n    \n    public constructor(element: JQuery, construct: CompiledFunctionCall, parent: ConstructOutlet,\n                       returnOutlet?: ReturnDestinationOutlet,\n                       argumentSeparator: string = \", \") {\n        super(element, construct, parent);\n        this.returnOutlet = returnOutlet;\n\n        this.argInitializerOutlets = construct.argInitializers.map((argInit, i) => {\n            if (i > 0) {\n                this.element.append(argumentSeparator);\n            }\n            return new ArgumentInitializerOutlet($(\"<span></span>\").appendTo(this.element), argInit, this);\n        });\n    }\n\n    protected instanceSet(inst: RuntimeFunctionCall) {\n        // Only need to register if it's active. If it's not active it\n        // either hasn't been called yet and will be registered when it is,\n        // or it's already returned and been popped off the stack so it\n        // doesn't need to be registered.\n        if (inst.isActive) {\n            this.registerCallOutlet(inst.calledFunction);\n        }\n    }\n\n    @messageResponse(\"called\", \"unwrap\")\n    private registerCallOutlet(data: RuntimeFunction) {\n        this.observable.send(\"registerCallOutlet\", {outlet: this, func: data});\n    }\n}\n\nexport class ArgumentInitializerOutlet extends ConstructOutlet<RuntimeDirectInitializer> {\n    \n    public readonly expressionOutlet: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledDirectInitializer, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"code-argumentInitializer\");\n\n        this.expressionOutlet = addChildExpressionOutlet(this.element, construct.args[0], this);\n    }\n\n    @messageResponse(\"referenceInitialized\", \"unwrap\")\n    private referenceInitialized(data: RuntimeReferenceDirectInitializer) {\n        let obj = data.args[0].evalResult;\n        this.observable.send(\"parameterPassed\", {\n            num: (<PassByReferenceParameterEntity>data.model.target).num,\n            start: this.element,\n            html: htmlDecoratedName(obj.name ?? `@${obj.address}`)\n        });\n    }\n\n    @messageResponse(\"atomicObjectInitialized\", \"unwrap\")\n    private atomicObjectInitialized(data: RuntimeAtomicDirectInitializer) {\n        this.observable.send(\"parameterPassed\", {\n            num: (<PassByValueParameterEntity>data.model.target).num,\n            start: this.element,\n            html: htmlDecoratedValue(getValueString(data.args[0].evalResult))\n        });\n    }\n}\n\n\nexport class MagicFunctionCallExpressionOutlet extends ExpressionOutlet<RuntimeMagicFunctionCallExpression> {\n\n    public readonly argOutlets: readonly ExpressionOutlet[];\n    \n    public constructor(element: JQuery, construct: CompiledMagicFunctionCallExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"functionCall\");\n\n        this.exprElem.append(htmlDecoratedName(this.construct.functionName) + \"(\");\n\n        this.argOutlets = this.construct.args.map((argInit, i) => {\n            if (i > 0) {\n                this.exprElem.append(\", \");\n            }\n            return addChildExpressionOutlet(this.exprElem, argInit, this)\n        });\n\n        this.exprElem.append(\")\");\n        // if (this.construct.funcCall.func.isVirtual()){\n        //     this.exprElem.append(\"<sub>v</sub>\");\n        // }\n    }\n\n//     _act: mixin({}, Outlets.CPP.Expression._act, {\n\n// //        calleeOutlet : function(callee, source){\n// //            this.addChildOutlet(callee);\n// //        },\n\n//         returned: function(msg){\n//             var value = msg.data;\n//             this.setEvalResult(value);\n\n//             this.evalResultElem.removeClass(\"lobster-hidden-expression\");\n//             this.exprElem.addClass(\"lobster-hidden-expression\");\n//         },\n//         tailCalled : function(msg){\n//             var callee = msg.data;\n//             callee.send(\"tailCalled\", this);\n//         }\n\n//     }, true)\n}\n\nexport class NonMemberOperatorOverloadExpressionOutlet extends ExpressionOutlet<RuntimeNonMemberOperatorOverloadExpression> implements ReturnDestinationOutlet{\n\n    public readonly callOutlet: FunctionCallOutlet;\n    public readonly returnDestinationElement: JQuery;\n    \n    public constructor(element: JQuery, construct: CompiledNonMemberOperatorOverloadExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"functionCall\");\n        this.returnDestinationElement = this.exprElem;\n\n        this.callOutlet = new FunctionCallOutlet($(\"<span></span>\").appendTo(this.exprElem), construct.call, this, this, ` ${this.construct.operator} `);\n    }\n\n    public setReturnedResult(result: RuntimeNonMemberOperatorOverloadExpression[\"evalResult\"], suppressAnimation: boolean = false) {\n        this.setEvalResult(result);\n    }\n}\n\nexport class MemberOperatorOverloadExpressionOutlet extends ExpressionOutlet<RuntimeMemberOperatorOverloadExpression> implements ReturnDestinationOutlet {\n\n    public readonly receiverOutlet: ExpressionOutlet\n    public readonly callOutlet: FunctionCallOutlet;\n    public readonly returnDestinationElement: JQuery;\n    \n    public constructor(element: JQuery, construct: CompiledMemberOperatorOverloadExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"functionCall\");\n        this.returnDestinationElement = this.exprElem;\n\n        if (this.construct.operator === \"[]\") {\n            this.receiverOutlet = addChildExpressionOutlet(this.exprElem, this.construct.receiverExpression, this);\n            this.exprElem.append(\"<span class='codeInstance code-binaryOp'>[<span class='lobster-highlight'></span></span>\");\n            this.callOutlet = new FunctionCallOutlet($(\"<span></span>\").appendTo(this.exprElem), construct.call, this, this);\n            this.exprElem.append(\"<span class='codeInstance code-binaryOp'>]<span class='lobster-highlight'></span></span>\");\n        }\n        else {\n            this.receiverOutlet = addChildExpressionOutlet(this.exprElem, this.construct.receiverExpression, this);\n            this.exprElem.append(\" <span class='codeInstance code-binaryOp'>\" + this.construct.operator + \"<span class='lobster-highlight'></span></span> \");\n            this.callOutlet = new FunctionCallOutlet($(\"<span></span>\").appendTo(this.exprElem), construct.call, this, this, ` ${this.construct.operator} `);\n        }\n    }\n\n    public setReturnedResult(result: RuntimeMemberOperatorOverloadExpression[\"evalResult\"], suppressAnimation: boolean = false) {\n        this.setEvalResult(result);\n    }\n}\n\n\nexport class BinaryOperatorExpressionOutlet extends ExpressionOutlet<RuntimeBinaryOperator> {\n\n    public readonly left: ExpressionOutlet;\n    public readonly right: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledBinaryOperatorExpression,\n        parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        // if (this.construct.funcCall){\n        //     var callOutlet = Outlets.CPP.FunctionCall.instance(this.construct.funcCall, this);\n        //     this.addChildOutlet(callOutlet);\n\n        //     this.argOutlets = callOutlet.argOutlets;\n\n        //     // If it's a member function call there will only be one argument and we need to add the left\n        //     if (this.construct.isMemberOverload){\n        //         var elem = $(\"<span></span>\");\n        //         createCodeOutlet(elem, this.construct.left, this);\n        //         this.exprElem.append(elem);\n        //         this.exprElem.append(\" \" + htmlDecoratedOperator(this.construct.operator, \"code-binaryOp\") + \" \");\n        //     }\n\n        //     var self = this;\n        //     this.argOutlets.forEach(function(argOutlet,i,arr){\n        //         self.addChildOutlet(argOutlet);\n        //         self.exprElem.append(argOutlet.element);\n        //         if (i < arr.length - 1) {\n        //             self.exprElem.append(\" \" + self.code.operator + \" \");\n        //         }\n        //     });\n        // }\n        this.left = addChildExpressionOutlet(this.exprElem, this.construct.left, this);\n        this.exprElem.append(\" <span class='codeInstance code-binaryOp'>\" + this.construct.operator + \"<span class='lobster-highlight'></span></span> \");\n        this.right = addChildExpressionOutlet(this.exprElem, this.construct.right, this);\n    }\n}\n\n\n\nexport class OutputOperatorExpressionOutlet extends ExpressionOutlet<RuntimeOutputOperatorExpression> {\n\n    public readonly left: ExpressionOutlet;\n    public readonly right: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledOutputOperatorExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        \n        this.left = addChildExpressionOutlet(this.exprElem, this.construct.left, this);\n        this.exprElem.append(\" <span class='codeInstance code-binaryOp'>\" + this.construct.operator + \"<span class='lobster-highlight'></span></span> \");\n        this.right = addChildExpressionOutlet(this.exprElem, this.construct.right, this);\n    }\n}\n\n\nexport class InputOperatorExpressionOutlet extends ExpressionOutlet<RuntimeInputOperatorExpression> {\n\n    public readonly left: ExpressionOutlet;\n    public readonly right: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledInputOperatorExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        \n        this.left = addChildExpressionOutlet(this.exprElem, this.construct.left, this);\n        this.exprElem.append(\" <span class='codeInstance code-binaryOp'>\" + this.construct.operator + \"<span class='lobster-highlight'></span></span> \");\n        this.right = addChildExpressionOutlet(this.exprElem, this.construct.right, this);\n    }\n}\n\nexport class UnaryOperatorExpressionOutlet extends ExpressionOutlet<RuntimeUnaryOperatorExpression> {\n\n    public readonly operand: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledUnaryOperatorExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.exprElem.append(htmlDecoratedOperator(this.construct.operator, \"code-unaryOp\"));\n\n        // if (this.construct.funcCall) {\n        //     var callOutlet = Outlets.CPP.FunctionCall.instance(this.construct.funcCall, this);\n        //     this.addChildOutlet(callOutlet);\n        //     this.argOutlets = callOutlet.argOutlets;\n\n        //     // If it's a member function call there will be no arguments and we need to add the operand\n        //     if (this.construct.isMemberOverload) {\n        //         var elem = $(\"<span></span>\");\n        //         createCodeOutlet(elem, this.construct.operand, this);\n        //         this.exprElem.append(elem)\n        //     }\n        //     else{\n        //         this.addChildOutlet(this.argOutlets[0]);\n        //         this.exprElem.append(this.argOutlets[0].element);\n        //     }\n        // }\n        // else{\n            this.operand = addChildExpressionOutlet(this.exprElem, this.construct.operand, this);\n        // }\n    }\n}\n\n// Lobster.Outlets.CPP.NewExpression = Outlets.CPP.Expression.extend({\n//     _name: \"Outlets.CPP.NewExpression\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n\n//         this.element.addClass(\"code-newExpression\");\n//         this.exprElem.append(htmlDecoratedOperator(\"new\", \"code-unaryOp\"));\n//         this.exprElem.append(\" \");\n\n//         if (isA(this.construct.heapType, Types.Array) && this.construct.dynamicLength){\n//             this.exprElem.append(this.construct.heapType.elemType.typeString(false, '[<span class=\"dynamicLength\"></span>]'));\n//             createCodeOutlet(this.exprElem.find(\".dynamicLength\"), this.construct.dynamicLength, this);\n//         }\n//         else{\n//             this.exprElem.append(htmlDecoratedType(this.construct.heapType));\n//         }\n\n//         if (this.construct.initializer) {\n//             var initElem = $(\"<span></span>\");\n//             createCodeOutlet(initElem, this.construct.initializer, this);\n//             this.exprElem.append(initElem);\n//         }\n\n\n//     },\n//     upNext: function(){\n//         Outlets.CPP.Expression.upNext.apply(this, arguments);\n//         var temp = this.element.find(\".code-unaryOp\").first().addClass(\"upNext\");\n// //        console.log(\"upNext for \" + this.construct.code.text);\n//     }\n// });\n\n// Lobster.Outlets.CPP.Delete = Outlets.CPP.Expression.extend({\n//     _name: \"Outlets.CPP.Delete\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n\n//         this.element.addClass(\"code-delete\");\n//         this.exprElem.append(htmlDecoratedOperator(\"delete\", \"code-unaryOp\"));\n//         this.exprElem.append(\" \");\n//         var operandElem = $(\"<span></span>\");\n//         createCodeOutlet(operandElem, this.construct.operand, this);\n//         this.exprElem.append(operandElem);\n\n//         if (this.construct.funcCall){\n//             var callOutlet = Outlets.CPP.FunctionCall.instance(this.construct.funcCall, this, []);\n//             this.addChildOutlet(callOutlet);\n//         }\n//     }\n// });\n\n\n// Lobster.Outlets.CPP.DeleteArray = Outlets.CPP.Expression.extend({\n//     _name: \"Outlets.CPP.DeleteArray\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n\n//         this.element.addClass(\"code-deleteArray\");\n//         this.exprElem.append(htmlDecoratedOperator(\"delete[]\", \"code-unaryOp\"));\n//         this.exprElem.append(\" \");\n//         var operandElem = $(\"<span></span>\");\n//         createCodeOutlet(operandElem, this.construct.operand, this);\n//         this.exprElem.append(operandElem);\n\n\n//     }\n// });\n\n\n\n// Lobster.Outlets.CPP.ConstructExpression = Outlets.CPP.Expression.extend({\n//     _name: \"Outlets.CPP.ConstructExpression\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n\n//         this.element.addClass(\"code-constructExpression\");\n//         this.exprElem.append(htmlDecoratedType(this.construct.type));\n\n//         if (this.construct.initializer) {\n//             var initElem = $(\"<span></span>\");\n//             createCodeOutlet(initElem, this.construct.initializer, this);\n//             this.exprElem.append(initElem);\n//         }\n//     }\n// });\n\nexport class PostfixIncrementExpressionOutlet extends ExpressionOutlet<RuntimePostfixIncrementExpression> {\n\n    public readonly operand: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledPostfixIncrementExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.operand = addChildExpressionOutlet(this.exprElem, this.construct.operand, this);\n        this.exprElem.append(htmlDecoratedOperator(this.construct.operator, \"code-unaryOp\"));\n    }\n}\n\n// Lobster.Outlets.CPP.Increment = Outlets.CPP.Expression.extend({\n//     _name: \"Outlets.CPP.Increment\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n\n//         var operandElem = $(\"<span></span>\");\n//         createCodeOutlet(operandElem, this.construct.operand, this);\n//         this.exprElem.append(operandElem);\n\n//         this.exprElem.append(htmlDecoratedOperator(\"++\", \"code-postfixOp\"));\n//     }\n// });\n// Lobster.Outlets.CPP.Decrement = Outlets.CPP.Expression.extend({\n//     _name: \"Outlets.CPP.Decrement\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n\n//         var operandElem = $(\"<span></span>\");\n//         createCodeOutlet(operandElem, this.construct.operand, this);\n//         this.exprElem.append(operandElem);\n\n//         this.exprElem.append(htmlDecoratedOperator(\"--\", \"code-postfixOp\"));\n//     }\n// });\n\n\nexport class SubscriptExpressionOutlet extends ExpressionOutlet<RuntimeSubscriptExpression> {\n\n    public readonly operand: ExpressionOutlet;\n    public readonly offset: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledSubscriptExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.addClass(\"code-subscript\");\n\n        this.operand = addChildExpressionOutlet(this.exprElem, this.construct.operand, this);\n        this.exprElem.append(htmlDecoratedOperator(\"[\", \"code-postfixOp\"));\n        this.offset = addChildExpressionOutlet(this.exprElem, this.construct.offset, this);\n        this.exprElem.append(htmlDecoratedOperator(\"]\", \"code-postfixOp\"));\n    }\n}\n\n\nexport class DotExpressionOutlet extends ExpressionOutlet<RuntimeObjectDotExpression | RuntimeFunctionDotExpression> {\n\n    public readonly operand: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledObjectDotExpression<CompleteObjectType> | CompiledFunctionDotExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent, false);\n        this.operand = addChildExpressionOutlet(this.exprElem, this.construct.operand, this);\n        this.exprElem.append(htmlDecoratedOperator(\".\", \"code-postfixOp\"));\n        this.exprElem.append(construct.entity.name);\n\n    }\n\n}\n\n\nexport class ArrowExpressionOutlet extends ExpressionOutlet<RuntimeObjectArrowExpression | RuntimeFunctionArrowExpression> {\n\n    public readonly operand: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledObjectArrowExpression<CompleteObjectType> | CompiledFunctionArrowExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent, false);\n        this.operand = addChildExpressionOutlet(this.exprElem, this.construct.operand, this);\n        this.exprElem.append(htmlDecoratedOperator(\"->\", \"code-postfixOp\"));\n        this.exprElem.append(construct.entity.name);\n\n    }\n\n}\n\n// Lobster.Outlets.CPP.Dot = Outlets.CPP.Expression.extend({\n//     _name: \"Outlets.CPP.Dot\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n\n//         var operandElem = $(\"<span></span>\");\n//         createCodeOutlet(operandElem, this.construct.operand, this);\n//         this.exprElem.append(operandElem);\n\n//         this.element.addClass(\"code-dot\");\n//         this.exprElem.append(htmlDecoratedOperator(\".\", \"code-postfixOp\"));\n\n//         this.exprElem.append(htmlDecoratedName(this.construct.memberName, this.construct.type));\n//     },\n\n//     setEvalResult : function(value) {\n\n//     }\n// });\n\n// Lobster.Outlets.CPP.Arrow = Outlets.CPP.Expression.extend({\n//     _name: \"Outlets.CPP.Arrow\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n\n//         var operandElem = $(\"<span></span>\");\n//         createCodeOutlet(operandElem, this.construct.operand, this);\n//         this.exprElem.append(operandElem);\n\n//         this.element.addClass(\"code-dot\");\n//         this.exprElem.append(htmlDecoratedOperator(\"->\", \"code-postfixOp\"));\n\n//         this.exprElem.append(htmlDecoratedName(this.construct.memberName, this.construct.type));\n//     },\n\n//     setEvalResult : function(value) {\n\n//     }\n// });\n\nexport class ParenthesesOutlet extends ExpressionOutlet<RuntimeParentheses> {\n\n    public readonly subexpression: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledParenthesesExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent, false);\n\n        this.exprElem.append(\"(\");\n        this.subexpression = addChildExpressionOutlet(this.exprElem, this.construct.subexpression, this);\n        this.exprElem.append(\")\");\n    }\n}\n\nexport class InitializerListOutlet extends ExpressionOutlet<RuntimeInitializerListExpression> {\n\n    public readonly elements: readonly ExpressionOutlet[];\n\n    public constructor(element: JQuery, construct: CompiledInitializerListExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent, false);\n\n        this.exprElem.append(\"{\");\n\n        this.elements = construct.elements.map((elem, i) => {\n            if (i > 0) {\n                this.exprElem.append(\", \");\n            }\n            return addChildExpressionOutlet(this.exprElem, elem, this);\n        });\n\n        this.exprElem.append(\"}\");\n    }\n}\n\nexport class IdentifierOutlet extends ExpressionOutlet<RuntimeObjectIdentifierExpression | RuntimeFunctionIdentifierExpression> {\n\n    public constructor(element: JQuery, construct: CompiledObjectIdentifierExpression<CompleteObjectType> | CompiledFunctionIdentifierExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent, false);\n        this.exprElem.addClass(\"code-name\");\n\n        this.exprElem.append(this.construct.name);\n    }\n\n}\n\nexport class NumericLiteralOutlet extends ExpressionOutlet<RuntimeNumericLiteral> {\n\n    public constructor(element: JQuery, construct: CompiledNumericLiteralExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent, false);\n\n        this.exprElem.addClass(\"code-literal\");\n        this.exprElem.append(getValueString(this.construct.value));\n    }\n\n}\n\n\n\nexport class StringLiteralExpressionOutlet extends ExpressionOutlet<RuntimeStringLiteralExpression> {\n\n    public constructor(element: JQuery, construct: CompiledStringLiteralExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent, false);\n\n        this.exprElem.addClass(\"code-string-literal\");\n        this.exprElem.append(`\"${this.construct.str}\"`);\n    }\n\n}\n\nexport class OpaqueExpressionOutlet extends ExpressionOutlet<RuntimeOpaqueExpression> {\n\n    public constructor(element: JQuery, construct: CompiledOpaqueExpression, parent?: ConstructOutlet) {\n        super(element, construct, parent, false);\n\n        this.exprElem.addClass(\"code-opaque-expression\");\n        this.exprElem.append(\"/* IMPLEMENTATION NOT SHOWN */\");\n    }\n\n}\n\n// Lobster.Outlets.CPP.ThisExpression = Outlets.CPP.Expression.extend({\n//     _name: \"Outlets.CPP.ThisExpression\",\n\n//     init: function(element, code, simOutlet){\n//         this.initParent(element, code, simOutlet);\n//         this.exprElem.addClass(\"code-this\");\n//         this.exprElem.append(\"this\");\n//     }\n// });\n\nexport class TypeConversionOutlet extends ExpressionOutlet<RuntimeImplicitConversion> {\n    \n    public readonly from: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledImplicitConversion, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n\n        this.element.addClass(\"code-implicitConversion\");\n        this.from = addChildExpressionOutlet(this.exprElem, this.construct.from, this);\n    }\n}\n\nexport class LValueToRValueOutlet extends ExpressionOutlet<RuntimeImplicitConversion> {\n    \n    public readonly from: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledImplicitConversion, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"code-lValueToRValue\");\n        this.from = addChildExpressionOutlet(this.exprElem, this.construct.from, this);\n    }\n}\n\n\nexport class ArrayToPointerOutlet extends ExpressionOutlet<RuntimeImplicitConversion> {\n    \n    public readonly from: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledImplicitConversion, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"code-arrayToPointer\");\n        this.from = addChildExpressionOutlet(this.exprElem, this.construct.from, this);\n    }\n}\n\n\nexport class StreamToBoolOutlet extends ExpressionOutlet<RuntimeImplicitConversion> {\n    \n    public readonly from: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledImplicitConversion, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"code-streamToBool\");\n        this.from = addChildExpressionOutlet(this.exprElem, this.construct.from, this);\n    }\n}\n\nexport class QualificationConversionOutlet extends ExpressionOutlet<RuntimeImplicitConversion> {\n    \n    public readonly from: ExpressionOutlet;\n\n    public constructor(element: JQuery, construct: CompiledImplicitConversion, parent?: ConstructOutlet) {\n        super(element, construct, parent);\n        this.element.addClass(\"code-qualificationConversion\");\n        this.from = addChildExpressionOutlet(this.exprElem, this.construct.from, this);\n    }\n}\n\nexport function createExpressionOutlet(element: JQuery, construct: CompiledExpression, parent?: ConstructOutlet) {\n    return construct.createDefaultOutlet(element, parent);\n}\n\nexport function createInitializerOutlet(element: JQuery, construct: CompiledInitializer, parent?: ConstructOutlet) {\n    return construct.createDefaultOutlet(element, parent);\n}\n\nexport function createStatementOutlet(element: JQuery, construct: CompiledStatement, parent?: ConstructOutlet) {\n    return construct.createDefaultOutlet(element, parent);\n}\n\nexport function addChildExpressionOutlet(parentElement: JQuery, construct: CompiledExpression, parent: ConstructOutlet) {\n    return createExpressionOutlet($(\"<span></span>\").appendTo(parentElement), construct, parent);\n}\n\nexport function addChildInitializerOutlet(parentElement: JQuery, construct: CompiledInitializer, parent: ConstructOutlet) {\n    return createInitializerOutlet($(\"<span></span>\").appendTo(parentElement), construct, parent);\n}\n\nexport function addChildStatementOutlet(parentElement: JQuery, construct: CompiledStatement, parent: ConstructOutlet, indented: boolean = true) {\n    let childElem = $(\"<span></span>\");\n    if (!construct.isBlock() && construct.parent instanceof Block) {\n        parentElement.append(\"<br />\");\n        childElem.addClass(\"code-indentedBlockBody\")\n    }\n    return createStatementOutlet(childElem.appendTo(parentElement), construct, parent);\n}\n\n\n// var createCodeOutlet = function(element, code, parent){\n//     assert(code);\n//     assert(simOutlet);\n//     var outletClass = DEFAULT_CODE_OUTLETS[code._class];\n//     if (outletClass) {\n//         return outletClass.instance(element, code, simOutlet);\n//     }\n//     else if(code.isA(Expressions.BinaryOperator)){\n//         return Outlets.CPP.BinaryOperator.instance(element, code, simOutlet);\n//     }\n//     else if(code.isA(Conversions.ImplicitConversion)){\n//         return Outlets.CPP.ImplicitConversion.instance(element, code, simOutlet);\n//     }\n//     else if(code.isA(Expressions.Expression)){\n//         return Outlets.CPP.Expression.instance(element, code, simOutlet);\n//     }\n//     else{\n//         return Outlets.CPP.Code.instance(element, code, simOutlet);\n//     }\n\n// };\n\n// var DEFAULT_CODE_OUTLETS = {};\n// DEFAULT_CODE_OUTLETS[Statements.Block] = Outlets.CPP.Block;\n// DEFAULT_CODE_OUTLETS[Statements.FunctionBodyBlock] = Outlets.CPP.Block;\n// DEFAULT_CODE_OUTLETS[Statements.OpaqueFunctionBodyBlock] = Outlets.CPP.OpaqueFunctionBodyBlock;\n// DEFAULT_CODE_OUTLETS[Statements.DeclarationStatement] = Outlets.CPP.DeclarationStatement;\n// DEFAULT_CODE_OUTLETS[Statements.ExpressionStatement] = Outlets.CPP.ExpressionStatement;\n// DEFAULT_CODE_OUTLETS[Statements.Selection] = Outlets.CPP.Selection;\n// DEFAULT_CODE_OUTLETS[Statements.While] = Outlets.CPP.While;\n// DEFAULT_CODE_OUTLETS[Statements.DoWhile] = Outlets.CPP.DoWhile;\n// DEFAULT_CODE_OUTLETS[Statements.For] = Outlets.CPP.For;\n// DEFAULT_CODE_OUTLETS[Statements.Return] = Outlets.CPP.Return;\n// DEFAULT_CODE_OUTLETS[Statements.Break] = Outlets.CPP.Break;\n// DEFAULT_CODE_OUTLETS[Declarations.Declaration] = Outlets.CPP.Declaration;\n// DEFAULT_CODE_OUTLETS[Declarations.Parameter] = Outlets.CPP.Parameter;\n// //DEFAULT_CODE_OUTLETS[Initializer] = Outlets.CPP.Initializer;\n// DEFAULT_CODE_OUTLETS[DefaultInitializer] = Outlets.CPP.DefaultInitializer;\n// DEFAULT_CODE_OUTLETS[DefaultMemberInitializer] = Outlets.CPP.DefaultInitializer;\n// DEFAULT_CODE_OUTLETS[MemberInitializer] = Outlets.CPP.DirectInitializer;\n// DEFAULT_CODE_OUTLETS[DirectInitializer] = Outlets.CPP.DirectInitializer;\n// DEFAULT_CODE_OUTLETS[CopyInitializer] = Outlets.CPP.CopyInitializer;\n// DEFAULT_CODE_OUTLETS[ParameterInitializer] = Outlets.CPP.ParameterInitializer;\n// DEFAULT_CODE_OUTLETS[ReturnInitializer] = Outlets.CPP.ReturnInitializer;\n// DEFAULT_CODE_OUTLETS[InitializerList] = Outlets.CPP.InitializerList;\n// DEFAULT_CODE_OUTLETS[Expressions.Expression] = Outlets.CPP.Expression;\n// DEFAULT_CODE_OUTLETS[Expressions.BinaryOperator] = Outlets.CPP.BinaryOperator;\n// //DEFAULT_CODE_OUTLETS[Expressions.BINARY_OPS[\"+\"]] = Outlets.CPP.BinaryOperator;\n// DEFAULT_CODE_OUTLETS[Expressions.Assignment] = Outlets.CPP.Assignment;\n// DEFAULT_CODE_OUTLETS[Expressions.Ternary] = Outlets.CPP.Ternary;\n// DEFAULT_CODE_OUTLETS[Expressions.Comma] = Outlets.CPP.Comma;\n// DEFAULT_CODE_OUTLETS[Expressions.CompoundAssignment] = Outlets.CPP.CompoundAssignment;\n// DEFAULT_CODE_OUTLETS[Expressions.FunctionCallExpression] = Outlets.CPP.FunctionCallExpression;\n// DEFAULT_CODE_OUTLETS[Expressions.Subscript] = Outlets.CPP.Subscript;\n// DEFAULT_CODE_OUTLETS[Expressions.Dot] = Outlets.CPP.Dot;\n// DEFAULT_CODE_OUTLETS[Expressions.Arrow] = Outlets.CPP.Arrow;\n// DEFAULT_CODE_OUTLETS[Expressions.Increment] = Outlets.CPP.Increment;\n// DEFAULT_CODE_OUTLETS[Expressions.Decrement] = Outlets.CPP.Decrement;\n// DEFAULT_CODE_OUTLETS[Expressions.NewExpression] = Outlets.CPP.NewExpression;\n// DEFAULT_CODE_OUTLETS[Expressions.Delete] = Outlets.CPP.Delete;\n// DEFAULT_CODE_OUTLETS[Expressions.DeleteArray] = Outlets.CPP.DeleteArray;\n// DEFAULT_CODE_OUTLETS[Expressions.Construct] = Outlets.CPP.ConstructExpression;\n// DEFAULT_CODE_OUTLETS[Expressions.LogicalNot] = Outlets.CPP.LogicalNot;\n// DEFAULT_CODE_OUTLETS[Expressions.Prefix] = Outlets.CPP.Prefix;\n// DEFAULT_CODE_OUTLETS[Expressions.Dereference] = Outlets.CPP.Dereference;\n// DEFAULT_CODE_OUTLETS[Expressions.AddressOf] = Outlets.CPP.AddressOf;\n// DEFAULT_CODE_OUTLETS[Expressions.UnaryPlus] = Outlets.CPP.UnaryPlus;\n// DEFAULT_CODE_OUTLETS[Expressions.UnaryMinus] = Outlets.CPP.UnaryMinus;\n// DEFAULT_CODE_OUTLETS[Expressions.Parentheses] = Outlets.CPP.Parentheses;\n// DEFAULT_CODE_OUTLETS[Expressions.Identifier] = Outlets.CPP.Identifier;\n// DEFAULT_CODE_OUTLETS[Expressions.Literal] = Outlets.CPP.Literal;\n// DEFAULT_CODE_OUTLETS[Expressions.ThisExpression] = Outlets.CPP.ThisExpression;\n\n\n// DEFAULT_CODE_OUTLETS[Conversions.ArrayToPointer] = Outlets.CPP.ArrayToPointer;\n// DEFAULT_CODE_OUTLETS[Conversions.LValueToRValue] = Outlets.CPP.LValueToRValue;\n// DEFAULT_CODE_OUTLETS[Conversions.QualificationConversion] = Outlets.CPP.QualificationConversion;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(1863);\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};"],"sourceRoot":""}