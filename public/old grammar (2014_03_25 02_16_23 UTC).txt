{
  function composeBinaryOp(first, rest, assoc, exprType){
    assoc = assoc || "left";
    exprType = exprType || "binaryOp";
    if(!rest || rest.length === 0){
      return first;
    }
    if (assoc === "left"){
      var right = rest.pop();
      return {
        expression: exprType,
        operator: right[0],
        left: composeBinaryOp(first, rest, assoc, exprType),
        right: right[1],
        associativity: assoc
      }
    }
    else{
      var left = rest.shift();
      return {
        expression: exprType,
        operator: left[0],
        left: first,
        right: composeBinaryOp(left[1], rest, assoc, exprType),
        associativity: assoc
      }
    }
  }

  function absorb(eater, eaten){
    if (!eaten){ return eater; }
    for (var attr in eaten){
      if(attr != "start" && attr != "end"){
        eater[attr] = eaten[attr];
      }
    }
    return eater;
  }

  function track(obj, offset, text, line, column){
    obj.start = offset();
    obj.text = text();
    obj.line = line();
    obj.column = column();
    obj.end = obj.start + obj.text.length;
    return obj;
  }

  function makeArray(obj){
    if (Array.isArray(obj)){
      return obj;
    }
    else{
      return [obj];
    }
  }

  function addImplicitJump(control){
    control.body.push({jump:"implicit"});
    return control;
  }

  function insideOut(obj, sub, result_in){
    sub = sub || "sub";
    var result = result_in || {};
    if (obj[sub]){
      var temp = insideOut(obj[sub], sub, result);
      delete obj[sub];
      temp[sub] = obj;
      return (result_in ? temp.sub : result.sub);
    }
    else{
      // No sub property means last piece
      result.sub = obj
      return obj;
    }
  }

  function postfixExp(ops, sub){
    if(ops.length == 0){
      return sub;
    }
    else{
      var op = ops.pop();
      op.operand = postfixExp(ops, sub);
      return op;
    }
  }

  var vars = {abstract: false};

  function arrayContains(arr, elem){
    return arr.indexOf(elem) != -1;
  }

  var _userTypeNames = {};

  function getUserTypeNames(){
    if (typeof Types !== "undefined"){
      return Types.userTypeNames;
    }
    else{
      return _userTypeNames;
    }
  }

  function isUserTypeName(name){
    return getUserTypeNames()[name];
  }

}



start
  = ws decls:(d:decl_or_comment ws {return d})* {return decls.filter(function(elem){return elem!=="comment";});}

decl_or_comment
  = comment {return "comment";}
  / declaration

comment
  = "//" [^\n]* "\n"
  / "/*" (!"*/".)* "*/"


statement
  = t:statement_tracked {return track(t, offset, text, line, column);}

statement_tracked
  = stmt:labeled_statement
    {return absorb({statement:"labeled"}, stmt); }

  / stmt:compound_statement
    {return absorb({statement:"compound"}, stmt); }

  / stmt:selection_statement
    {return absorb({statement:"selection"}, stmt); }

  / stmt:iteration_statement

  / stmt:jump_statement

  / declaration_statement

  / expression_statement

  /*/ asm_statement
  / try_except_statement
  / try_finally_statement*/

labeled_statement
  = label:identifier ws ":" ws stmt:statement {return {label:label, stmt: stmt}; }
  / "case" WS c:exp_const ws ":" ws stmt:statement { return {case:c, stmt:stmt}; }
  / "default" ws ":" ws stmt:statement { return {default:true, stmt:stmt}; }

expression_statement
  = expr:expression? ws ";" { expr = expr || {expression: "null"}; return {statement: "expression", expr:expr}; }

compound_statement
  = "{" ws stmts:(stmt:statement ws {return stmt})* "}" { return {statements: stmts}; }

selection_statement
  = "if" ws "(" ws cond:expression ws ")" ws then:statement ws "else" ws e:statement {return {if:cond, then:then, else:e}; }
  / "if" ws "(" ws cond:expression ws ")" ws then:statement {return {if:cond, then:then}; }
  /*/ "switch" ws "(" ws cond:expression ws ")" ws stmt:statement { return {switch:cond, stmt:stmt}; }*/

iteration_statement
  = "while" ws "(" ws cond:expression ws ")" ws body:statement
    { return {statement:"while", cond:cond, body:body}; }

  / "do" ws body:statement ws "while" ws "(" ws cond:expression ws ")" ws ";" { return {statement:"dowhile", cond:cond, body:body}; }

  / "for" ws "(" ws init:for_init_statement ws cond:expression ws ";" ws post:expression ws ")" ws body:statement
    { return {statement:"for", cond:cond, init:init, post:post, body:body}; }

for_init_statement
  = expression_statement
  / d:declaration_statement { return track(d, offset, text, line, column); }

jump_statement
  = "break" ws ";" { return {statement:"break"}; }
  / "continue" ws ";" {return {statement:"continue"}; }
  / "return" ws ret:expression? ws ";" { return {statement:"return", expr:ret}; }

declaration_statement
  = d:declaration {return absorb({statement:"declaration"}, d); }




//Declarations


declaration
  = simple_declaration
  / class_declaration
  / function_definition

  /* TODO: template declaration */

simple_declaration
  = specs:decl_specifiers ! identifier ws declarators:declarator_list ws ";"
    { return track({declaration: "declaration", specs:specs, declarators:declarators}, offset, text, line, column); }

declarator_list
  = first:declarator_init rest:(ws "," ws d:declarator_init {return d;})*
    {rest.unshift(first); return rest; }

class_declaration
  = spec:class_specifier ws ";" {
    return track(absorb({declaration: "class"}, spec), offset, text, line, column);
  }

function_definition
  = specs:decl_specifiers WS declarator:declarator ws body:function_body
    {return track({declaration: "functionDefinition", specs:specs, declarator:declarator, body:body}, offset, text, line, column); }


constructor_definition
  = name:class_name ws "(" ws args:argument_declaration_list ws ")" ws init:ctor_initializer? ws body:(function_body / ";" {return null;})
    {return track({declaration: "constructorDefinition", name:name, body:body, initializer:init, args: args}, offset, text, line, column); }

destructor_definition
  = "~" name:class_name ws "(" ws ")" ws body:(function_body / ";" {return null;})
    {return track({declaration: "destructorDefinition", name:"~"+name, body:body}, offset, text, line, column); }

ctor_initializer
  = ":" ws first:mem_initializer rest:(ws "," ws m:mem_initializer {return m;})* {rest.unshift(first); return rest;}

mem_initializer
  = i:identifier ws "(" ws args:exp_list? ws ")" {return track({member: i, initializer:"direct", args:args}, offset, text, line, column); }

function_body
  = compound_statement

decl_specifiers
  = first:decl_specifier ! identifier rest:(WS s:decl_specifier ! identifier {return s;})*
    { rest.unshift(first);

      var declSpecs = {
        typeSpecs: [],
        storageSpecs: []
      };

      for(var i = 0; i < rest.length; ++i){
        var spec = rest[i];
        if (spec.typeSpec){
          declSpecs.typeSpecs.push(spec.typeSpec);
        }
        else if (spec.storageSpec){
          declSpecs.storageSpecs.push(spec.storageSpec);
        }
        else if (spec === "friend"){
          declSpecs.friend = true;
        }
        else if (spec === "typedef"){
          declSpecs.typedef = true;
        }
      }

      return track(declSpecs, offset, text, line, column); }

decl_specifier
  = t:type_specifier { return {typeSpec:t}; }
  / s:storage_class_specifier { return {storageSpec:s}; }
  /*/ fct_specifier*/
  / "typedef"
  / "friend"

type_specifiers
  = first:type_specifier rest:(WS s:type_specifier {return s})*
    { rest.unshift(first);
      return track(rest, offset, text, line, column); }

type_specifier
  = simple_type_name 
  // / class_specifier
  / enum_specifier
  / "const"
  / "volatile"

storage_class_specifier
  = "register"
  / "static"
  / "thread_local"
  / "extern"
  / "mutable"

simple_type_name "simple type name"
  /*= qualified_type_name*/
  = "char"
  / "short"
  / "int"
  / "bool"
  / "string"
  / "long"
  / "signed"
  / "unsigned"
  / "float"
  / "double"
  / "void"
  /*/ "Card"
  / "Pack"
  / "Player"
  / "Rank"
  / "Suit"
  / "Basket"
  / "Consume"
  / "Chicken"
  / "Quote"
  / "Pricebook"*/
  / id:identifier &{return isUserTypeName(id.identifier);} {return id.identifier;}

enum_specifier
  = "enum" WS name:identifier? ws "{" first:enumerator rest:(ws "," ws e:enumerator {return e;})* ws "}" { return {enum:name, values:composeBinaryOp(first, rest)}; }

enumerator
  = name:identifier value:(ws "=" ws e:exp_const {return e;}) {return {name:name, value:value}; }




//Declarators

declarator_init
  = d:declarator ws i:initializer? {return track(absorb(d, {init: i}), offset, text, line, column);}

initializer
  = "=" ws init:exp_assn {return {initializer:"copy", args:[init]};}
  // / "=" ws "{" ws "}" {return [];}
  / "=" ws "{" ws init:initializer_list ws "}" {return init;}
  / "(" ws args:exp_list? ws ")" {
    return {initializer:"direct", args:args};
  }
    

initializer_list
  = first:exp_assn rest:(ws op:"," ws e:exp_assn {return e;})*
    {
      rest.unshift(first);
      return track({initializerList: rest}, offset, text, line, column);
    }
  /// exp:expression {return exp;}

declarator
  = & {vars.abstract = false; return true;} d:_declarator
    {
    //d = insideOut(d);
    var d2 = track(absorb({declarator:"declarator"}, d), offset, text, line, column);
   return d2;
  }

abstract_declarator
  =  & {vars.abstract = true; return true;} d:_declarator {
    //d = insideOut(d);
    var d2 = track(absorb({declarator:"declarator", abstract: true}, d), offset, text, line, column);
    return d2;
  }

_declarator
  = "*" ws cv:cv_qualifier? ws decl:_declarator
    { return absorb({pointer:decl}, cv); }

  / "&" ws cv:cv_qualifier? ws decl:_declarator
    { return absorb({reference:decl}, cv); }

  / decl:declarator_simple postfixes:declarator_postfixes { return absorb(decl, {postfixes: postfixes}); }

  / declarator_simple



declarator_postfixes
  = (ws p:declarator_postfix {return p})+

declarator_postfix
  = "(" ws args:argument_declaration_list ws ")" cv:cv_qualifier?
    { return absorb({type:"function", args:args}, cv); }
  / "[" ws size:exp_const? ws "]"
    { return {type:"array", size:size}; }




declarator_simple
  = !{return vars.abstract;} d:dname {return {name:d}; }

  /* TODO ptr to member/ "::*" ws cv_qualifier? WS _declarator */

  / "(" ws d:_declarator? ws ")" {return {sub:d};}
  / &{return vars.abstract;} {return {};}


dname = name
  /* / class_name
  / "~" ws class_name
  / typedef_name
  / qualified_type_name
  */


type_id
  = specs:type_specifiers ws decl:abstract_declarator
    { return track({specs:specs, declarator:decl}, offset, text, line, column); }





cv_qualifier
  = "const" WS "volatile" { return {const: true, volatile: true}; }
  / "volatile" WS "const" { return {const: true, volatile: true}; }
  / "const" { return {const: true}; }
  / "volatile" { return {volatile: true}; }

argument_declaration_list
  /* TODO: ... args*/
  = first:argument_declaration rest:(ws "," ws arg:argument_declaration {return arg;})*
    { rest.unshift(first); return rest; }
  / "" {return [];}


argument_declaration

  = specs:decl_specifiers ws decl:declarator ws "=" ws init:exp_assn
    {return {declaration:"parameter", declarator:decl, specs:specs, init:init}; }
  / specs:decl_specifiers ws decl:declarator
    {return track({declaration:"parameter", specs:specs, declarator:decl}, offset, text, line, column); }

  / specs:decl_specifiers ws decl:abstract_declarator ws "=" ws init:exp_assn
    {return {declaration:"parameter", declarator:decl, specs:specs, init:init}; }
  / specs:decl_specifiers ws decl:abstract_declarator
    {return track({declaration:"parameter", specs:specs, declarator:decl}, offset, text, line, column); }

  /* TODO abstract arg declarations */

//Expressions

expression
  = first:exp_assn rest:(ws op:"," ws e:exp_assn {return [op,e];} )*
      { return track(composeBinaryOp(first, rest, "left", "comma"), offset, text, line, column); }
  / exp_assn

exp_assn
  = lhs:exp_unary ws op:"=" ws rhs:exp_assn { return track({expression: "assignment", lhs:lhs, op:op, rhs:rhs}, offset, text, line, column); }
  / lhs:exp_unary ws op:op_comp_assn ws rhs:exp_assn { return track({expression: "compoundAssignment", lhs:lhs, op:op, rhs:rhs}, offset, text, line, column); }
  / exp_cond

op_comp_assn
  = "*=" / "/=" / "%=" / "+=" / "-=" / ">>=" / "<<=" / "&=" / "^=" / "|="

exp_const
  = sub:exp_cond { sub.constant = true; return sub; }

exp_cond
  = _if:exp_or ws "?" ws then:expression ws ":" ws _else:exp_assn { return track({expression: "ternary", _if:_if, then:then, _else:_else}, offset, text, line, column); }
  / exp_or

exp_or
  = first:exp_and rest:(ws op:"||" ws e:exp_and {return [op,e];} )*
      { return track(composeBinaryOp(first, rest, "left"), offset, text, line, column); }

exp_and
  = first:exp_or_bit rest:(ws op:"&&" ws e:exp_or_bit {return [op,e];} )*
      { return track(composeBinaryOp(first, rest), offset, text, line, column); }

exp_or_bit
  = first:exp_xor_bit rest:(ws op:"|" ws e:exp_xor_bit {return [op,e];} )*
      { return track(composeBinaryOp(first, rest), offset, text, line, column); }

exp_xor_bit
  = first:exp_and_bit rest:(ws op:"^" ws e:exp_and_bit {return [op,e];} )*
      { return track(composeBinaryOp(first, rest), offset, text, line, column); }

exp_and_bit
  = first:exp_eq rest:(ws op:"&" !"&" ws e:exp_eq {return [op,e];} )*
      { return track(composeBinaryOp(first, rest), offset, text, line, column); }

exp_eq
  = first:exp_rel rest:(ws op:("==" / "!=") ws e:exp_rel {return [op,e];} )*
      { return track(composeBinaryOp(first, rest), offset, text, line, column); }

exp_rel
  = first:exp_shift rest:(ws op:op_rel ws e:exp_shift {return [op,e];} )*
      { return track(composeBinaryOp(first, rest, "left"), offset, text, line, column); }

op_rel
  = "<="
  / ">="
  / "<"
  / ">"

exp_shift
  = first:exp_add rest:(ws op:op_shift ws e:exp_add {return [op,e];} )*
      { return track(composeBinaryOp(first, rest, "left"), offset, text, line, column); }

op_shift
  = "<<"
  / ">>"

exp_add
  = first:exp_mult rest:(ws op:op_add ws e:exp_mult {return [op,e];} )*
      { return track(composeBinaryOp(first, rest, "left"), offset, text, line, column); }

op_add
  = "+"
  / "-"

exp_mult
  = first:exp_pm rest:(ws op:op_mult ws e:exp_pm {return [op,e];} )*
      { return track(composeBinaryOp(first, rest), offset, text, line, column); }

op_mult
  = "*"
  / "/"
  / "%"

exp_pm
  = first:exp_cast rest:(ws op:op_pm ws e:exp_cast {return [op,e];} )*
      { return track(composeBinaryOp(first, rest), offset, text, line, column); }

op_pm
  = ".*"
  / "->*"

exp_cast

  = exp_unary

exp_unary
  = op:"++" ws sub:exp_unary {
      return track({expression: "prefix", op:op, sub:sub}, offset, text, line, column);
}
  / op:"--" ws sub:exp_unary {
      return track({expression: "prefix", op:op, sub:sub}, offset, text, line, column);
}
  / op:op_unary ws sub:exp_cast {
      return track(absorb({sub:sub}, op), offset, text, line, column);
}
  / op:"sizeof" ws sub:exp_unary {
      return track({expression: "prefix", operator:op, sub:sub}, offset, text, line, column);
}
  / op:"sizeof" ws "(" ws sub:type_name ws ")" {
      return track({expression: "prefix", operator:op, sub:sub}, offset, text, line, column);
}
  / exp_new
  / exp_delete

op_unary
  = "*" {return {expression: "dereference", op: "*"};}
  / "&" {return {expression: "addressOf",   op: "&"};}
  / "+" {return {expression: "unaryPlus", op: "+"};}
  / "-" {return {expression: "unaryMinus", op: "-"};}
  / "!" {return {expression: "logicalNot", op: "!"};}
  / "~" {return {expression: "bitwiseNot", op: "~"};}

exp_new
  = "new" WS id:new_type_id ws init:new_initializer? { 
    return track(absorb({expression: "newExpression", initializer: init}, id), offset, text, line, column);
  }
  / "new" ws "(" ws id:type_id ws ")" ws init:new_initializer? {
    return track(absorb({expression: "newExpression", initializer: init}, id), offset, text, line, column);
}

  /*  / exp_dealloc
  */


new_type_id
  = specs:type_specifiers decl:(ws id:new_declarator {return id;})? {
    return track({specs:specs, declarator:decl}, offset, text, line, column);
  }


new_declarator = d:_new_declarator {
  //d = insideOut(d);
  var d2 = track(absorb({declarator:"declarator"}, d), offset, text, line, column);
  return d2;

}

_new_declarator
  = "*" ws cv:cv_qualifier? ws decl:_new_declarator?
    { return absorb({pointer:decl}, cv); }

  / "&" ws cv:cv_qualifier? ws decl:_new_declarator?
    { return absorb({reference:decl}, cv); }

  / postfixes:new_declarator_postfixes { return {postfixes: postfixes}; }


new_declarator_postfixes
  = (ws p:new_declarator_postfix {return p;})+

new_declarator_postfix
  = "[" ws size:exp_assn? ws "]"
    { return {type:"array", size:size}; }


new_initializer
  = "(" ws args:exp_list? ws ")" {return {args:args || []};}


exp_delete
  = "delete" WS t:exp_cast {
    return track({expression: "delete", target: t}, offset, text, line, column);
  }
  / "delete" ws "[" ws "]" WS t:exp_cast {
    return track({expression: "deleteArray", target: t}, offset, text, line, column); }
  / exp_postfix



exp_postfix
  = "static_cast" ws "<" ws t:type_name ws ">" ws "(" ws sub:exp_cast ws ")"
    { return track({expression: "StaticCast", type: t, operand:sub}, offset, text, line, column);}
  / "dynamic_cast" ws "<" ws t:type_name ws ">" ws "(" ws sub:exp_cast ws ")"
    { return track({expression: "DynamicCast", type: t, operand:sub}, offset, text, line, column);}
  / "reinterpret_cast" ws "<" ws t:type_name ws ">" ws "(" ws sub:exp_cast ws ")"
    { return track({expression: "ReinterpretCast", type: t, operand:sub}, offset, text, line, column);}
  / "const_cast" ws "<" ws t:type_name ws ">" ws "(" ws sub:exp_cast ws ")"
    { return track({expression: "ConstCast", type: t, operand:sub}, offset, text, line, column);}
  / sub:(exp_construct / exp_primary) ops:(ws op:op_postfix {return op;} )*
      { return ops.length > 0 ? track(postfixExp(ops, sub), offset, text, line, column) : sub;}

op_postfix
  = "[" ws sub:expression ws "]" { return track({expression:"subscript", sub: sub}, offset, text, line, column); }
  / "(" ws args:exp_list? ws ")" { return track({expression: "functionCall", args: args}, offset, text, line, column); }
  / "." ws name:name { return track({expression: "dot", member: name}, offset, text, line, column); }
  / "->" ws name:name  { return track({expression: "arrow", member: name}, offset, text, line, column); }
  / "++" { return track({expression: "increment"}, offset, text, line, column); }
  / "--" { return track({expression: "decrement"}, offset, text, line, column); }
exp_construct
  = type:simple_type_name ws "(" ws args:exp_list ws ")" {
    return track({expression: "construct", type:type, args:args}, offset, text, line, column);
}

type_name
  = simple_type_name

exp_list
  = first:exp_assn rest:(ws "," ws e:exp_assn {return e;} )*
      { rest.unshift(first); return rest; }

exp_primary
  = "(" ws sub:expression ws ")" {return track({expression: "parentheses", sub:sub}, offset, text, line, column);}
  / literal
  / "this" {return track({expression: "thisExpression"}, offset, text, line, column); }
  /*TODO ::*/
  / n:name { return track(absorb({expression: "identifier"}, n), offset, text, line, column); }


name
  = operator_function_id
  / identifier

operator_function_id
  = opName:(
    "operator=="
  / "operator()"
  / "operator*"
  / "operator++"
  / "operator="
  / "operator!=")
{return track({identifier: opName}, offset, text, line, column);}

literal
  = lit:literal_float
    {return track({expression: "literal", type:"float", value:lit}, offset, text, line, column);}
  / lit:literal_int
    {return track({expression: "literal", type:"int", value:lit}, offset, text, line, column);}
  / lit:literal_char
    {return track({expression: "literal", type:"char", value:lit}, offset, text, line, column);}
  / lit:literal_string
    {return track({expression: "literal", type:"string", value:lit}, offset, text, line, column);}
  / lit:literal_boolean
    {return track({expression: "literal", type:"bool", value:lit}, offset, text, line, column);}

literal_int
  = neg:"-"? digits:[0-9]+ { return parseInt((neg ? neg : "") + digits.join("")); }

literal_float
 = neg:"-"? digits:[0-9.]+ & {return digits.indexOf(".") == digits.lastIndexOf(".") && digits.indexOf(".") != -1;} { return parseFloat((neg ? neg : "") + digits.join("")); }

literal_char
  = "'" char:([^\'\\\n] / escape) "'" { return char; }

literal_string
  = '"' chars:([^\"\\\n] / escape)* '"' { return chars.join(""); }

literal_boolean
  = "true" {return true;}
  / "false" {return false;}

escape
  = simple_escape
  / octal_escape
  /*/ hexadecimal_escape*/

simple_escape
  = "\\\"" //{ return "\""; }
  / "\\'"  //{ return "'"; }
  / "\\?"  //{ return "\?"; }
  / "\\\\" //{ return "\\"; }
  / "\\a"  //{ return "\a"; }
  / "\\b"  //{ return "\b"; }
  / "\\f"  //{ return "\f"; }
  / "\\n"  //{ return "\n"; }
  / "\\r"  //{ return "\r"; }
  / "\\t"  //{ return "\t"; }
  / "\\v"  //{ return "\v"; }
  / "\\0"  //{ return "\0"; }

octal_escape
  = [0-8]
  / [0-8][0-8]
  / [0-8][0-8][0-8]


identifier "identifier"
  = first:identifierFirstChar rest:identifierChar*
    {return track({identifier: first + rest.join("")}, offset, text, line, column);}

identifierChar = [a-zA-Z0-9_]

identifierFirstChar = [a-zA-Z_]


ws "optional whitespace"
  = [ \t\n\r]* comment ws
  / [ \t\n\r]*

WS "whitespace"
  = comment WS
  / [ \t\n\r]+ comment ws
  / [ \t\n\r]+



class_name
  = identifier
  // / simple_template_id

class_specifier
  = head:class_head !{getUserTypeNames()[head.name.identifier]=true;} ws "{" ws mems:member_specification* ws "}"
    { return track({head: head, member_specs: mems}, offset, text, line, column); }

class_head
  = key:class_key WS name:class_head_name base:(WS b:base_clause {return b;})?
    { return track({key:key, name:name, base:base}, offset, text, line, column); }
  // = key:class_key WS base:base_clause?
  //   { return track({key:key, base:base}, offset, text, line, column); }

class_head_name
  = /* nested_name_specifier? ws */ class_name

class_key
  = "class"
  / "struct"
  / "union"

member_specification
  = members:(m:member_declaration ws {return m})+
    { return {members: members}; }
  / access:access_specifier ws ":" ws members:(m:member_declaration ws {return m})*
    { return {members: members, access: access}; }

access_specifier
  = "private"
  / "protected"
  / "public"

member_declaration
  = specs:decl_specifiers WS declarators:member_declarator_list ws ";"
    { return track({declaration: "member", specs:specs, declarators:declarators}, offset, text, line, column); }
  / f:function_definition ws ";"? { return f; }
  / c:constructor_definition ws ";"? { return c; }
  / d:destructor_definition ws ";"? { return d; }



member_declarator_list
  = first:declarator rest:(ws "," ws d:declarator {return d;})*
    {rest.unshift(first); return rest; }


base_clause
  = ":" ws "base"









//end = "" {return offset;}