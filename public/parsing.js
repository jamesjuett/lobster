UMichEBooks.cPlusPlusParser = (function() {
    /*
     * Generated by PEG.js 0.8.0.
     *
     * http://pegjs.majda.cz/
     */

    function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function SyntaxError(message, expected, found, offset, line, column) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.offset   = offset;
        this.line     = line;
        this.column   = column;

        this.name     = "SyntaxError";
    }

    peg$subclass(SyntaxError, Error);

    function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},

            peg$FAILED = {},

            peg$startRuleFunctions = { start: peg$parsestart, function_body: peg$parsefunction_body, member_declaration: peg$parsemember_declaration, declaration: peg$parsedeclaration },
            peg$startRuleFunction  = peg$parsestart,

            peg$c0 = peg$FAILED,
            peg$c1 = [],
            peg$c2 = function(d) {return d},
            peg$c3 = function(decls) {return decls.filter(function(elem){return elem!=="comment";});},
            peg$c4 = function() {return "comment";},
            peg$c5 = "//",
            peg$c6 = { type: "literal", value: "//", description: "\"//\"" },
            peg$c7 = /^[^\n]/,
            peg$c8 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
            peg$c9 = "\n",
            peg$c10 = { type: "literal", value: "\n", description: "\"\\n\"" },
            peg$c11 = "/*",
            peg$c12 = { type: "literal", value: "/*", description: "\"/*\"" },
            peg$c13 = void 0,
            peg$c14 = "*/",
            peg$c15 = { type: "literal", value: "*/", description: "\"*/\"" },
            peg$c16 = { type: "any", description: "any character" },
            peg$c17 = function(t) {return track(t, offset, text, line, column);},
            peg$c18 = function(stmt) {return absorb({statement:"labeled"}, stmt); },
            peg$c19 = function(stmt) {return absorb({statement:"compound"}, stmt); },
            peg$c20 = function(stmt) {return absorb({statement:"selection"}, stmt); },
            peg$c21 = ":",
            peg$c22 = { type: "literal", value: ":", description: "\":\"" },
            peg$c23 = function(label, stmt) {return {label:label, stmt: stmt}; },
            peg$c24 = "case",
            peg$c25 = { type: "literal", value: "case", description: "\"case\"" },
            peg$c26 = function(c, stmt) { return {case:c, stmt:stmt}; },
            peg$c27 = "default",
            peg$c28 = { type: "literal", value: "default", description: "\"default\"" },
            peg$c29 = function(stmt) { return {default:true, stmt:stmt}; },
            peg$c30 = null,
            peg$c31 = ";",
            peg$c32 = { type: "literal", value: ";", description: "\";\"" },
            peg$c33 = function(expr) { expr = expr || {expression: "null"}; return {statement: "expression", expr:expr}; },
            peg$c34 = "{",
            peg$c35 = { type: "literal", value: "{", description: "\"{\"" },
            peg$c36 = function(stmt) {return stmt},
            peg$c37 = "}",
            peg$c38 = { type: "literal", value: "}", description: "\"}\"" },
            peg$c39 = function(stmts) { return {statements: stmts}; },
            peg$c40 = "if",
            peg$c41 = { type: "literal", value: "if", description: "\"if\"" },
            peg$c42 = "(",
            peg$c43 = { type: "literal", value: "(", description: "\"(\"" },
            peg$c44 = ")",
            peg$c45 = { type: "literal", value: ")", description: "\")\"" },
            peg$c46 = "else",
            peg$c47 = { type: "literal", value: "else", description: "\"else\"" },
            peg$c48 = function(cond, then, e) {return {if:cond, then:then, else:e}; },
            peg$c49 = function(cond, then) {return {if:cond, then:then}; },
            peg$c50 = "while",
            peg$c51 = { type: "literal", value: "while", description: "\"while\"" },
            peg$c52 = function(cond, body) { return {statement:"while", cond:cond, body:body}; },
            peg$c53 = "do",
            peg$c54 = { type: "literal", value: "do", description: "\"do\"" },
            peg$c55 = function(body, cond) { return {statement:"dowhile", cond:cond, body:body}; },
            peg$c56 = "for",
            peg$c57 = { type: "literal", value: "for", description: "\"for\"" },
            peg$c58 = function(init, cond, post, body) { return {statement:"for", cond:cond, init:init, post:post, body:body}; },
            peg$c59 = function(d) { return track(d, offset, text, line, column); },
            peg$c60 = "break",
            peg$c61 = { type: "literal", value: "break", description: "\"break\"" },
            peg$c62 = function() { return {statement:"break"}; },
            peg$c63 = "continue",
            peg$c64 = { type: "literal", value: "continue", description: "\"continue\"" },
            peg$c65 = function() {return {statement:"continue"}; },
            peg$c66 = "return",
            peg$c67 = { type: "literal", value: "return", description: "\"return\"" },
            peg$c68 = function(ret) { return {statement:"return", expr:ret}; },
            peg$c69 = function(d) {return absorb({statement:"declaration"}, d); },
            peg$c70 = function(specs, declarators) { return track({declaration: "declaration", specs:specs, declarators:declarators}, offset, text, line, column); },
            peg$c71 = ",",
            peg$c72 = { type: "literal", value: ",", description: "\",\"" },
            peg$c73 = function(d) {return d;},
            peg$c74 = function(first, rest) {rest.unshift(first); return rest; },
            peg$c75 = function(spec) {
                return track(absorb({declaration: "class"}, spec), offset, text, line, column);
            },
            peg$c76 = function(specs, declarator, body) {return track({declaration: "functionDefinition", specs:specs, declarator:declarator, body:body}, offset, text, line, column); },
            peg$c77 = function() {return null;},
            peg$c78 = function(name, args, init, body) {return track({declaration: "constructorDefinition", name:name, body:body, initializer:init, args: args}, offset, text, line, column); },
            peg$c79 = "~",
            peg$c80 = { type: "literal", value: "~", description: "\"~\"" },
            peg$c81 = function(name, body) {return track({declaration: "destructorDefinition", name:"~"+name, body:body}, offset, text, line, column); },
            peg$c82 = "virtual",
            peg$c83 = { type: "literal", value: "virtual", description: "\"virtual\"" },
            peg$c84 = function(name, body) {return track({declaration: "destructorDefinition", name:"~"+name, body:body, virtual:true}, offset, text, line, column); },
            peg$c85 = function(m) {return m;},
            peg$c86 = function(first, rest) {rest.unshift(first); return rest;},
            peg$c87 = function(i, args) {return track({member: i, initializer:"direct", args:args}, offset, text, line, column); },
            peg$c88 = function(s) {return s},
            peg$c89 = function(before, t, after) {
                before.push({typeSpec:t});
                var rest = before.concat(after);

                var declSpecs = {
                    typeSpecs: [],
                    storageSpecs: []
                };

                for(var i = 0; i < rest.length; ++i){
                    var spec = rest[i];
                    if (spec.typeSpec){
                        declSpecs.typeSpecs.push(spec.typeSpec);
                    }
                    else if (spec.storageSpec){
                        declSpecs.storageSpecs.push(spec.storageSpec);
                    }
                    else if (spec === "friend"){
                        declSpecs.friend = true;
                    }
                    else if (spec === "typedef"){
                        declSpecs.typedef = true;
                    }
                    else if (spec === "inline"){
                        declSpecs.inline = true;
                    }
                    else if (spec === "explicit"){
                        declSpecs.explicit = true;
                    }
                    else if (spec === "virtual"){
                        declSpecs.virtual = true;
                    }
                }

                return track(declSpecs, offset, text, line, column); },
            peg$c90 = function(t) { return {typeSpec:t}; },
            peg$c91 = function(s) { return {storageSpec:s}; },
            peg$c92 = "typedef",
            peg$c93 = { type: "literal", value: "typedef", description: "\"typedef\"" },
            peg$c94 = "friend",
            peg$c95 = { type: "literal", value: "friend", description: "\"friend\"" },
            peg$c96 = function(before, t, after) { before.push(t);
                before = before.concat(after);
                return track(before, offset, text, line, column); },
            peg$c97 = "const",
            peg$c98 = { type: "literal", value: "const", description: "\"const\"" },
            peg$c99 = "volatile",
            peg$c100 = { type: "literal", value: "volatile", description: "\"volatile\"" },
            peg$c101 = "register",
            peg$c102 = { type: "literal", value: "register", description: "\"register\"" },
            peg$c103 = "static",
            peg$c104 = { type: "literal", value: "static", description: "\"static\"" },
            peg$c105 = "thread_local",
            peg$c106 = { type: "literal", value: "thread_local", description: "\"thread_local\"" },
            peg$c107 = "extern",
            peg$c108 = { type: "literal", value: "extern", description: "\"extern\"" },
            peg$c109 = "mutable",
            peg$c110 = { type: "literal", value: "mutable", description: "\"mutable\"" },
            peg$c111 = "inline",
            peg$c112 = { type: "literal", value: "inline", description: "\"inline\"" },
            peg$c113 = "explicit",
            peg$c114 = { type: "literal", value: "explicit", description: "\"explicit\"" },
            peg$c115 = { type: "other", description: "simple type name" },
            peg$c116 = function(t) {return t;},
            peg$c117 = "char",
            peg$c118 = { type: "literal", value: "char", description: "\"char\"" },
            peg$c119 = "short",
            peg$c120 = { type: "literal", value: "short", description: "\"short\"" },
            peg$c121 = "int",
            peg$c122 = { type: "literal", value: "int", description: "\"int\"" },
            peg$c123 = "bool",
            peg$c124 = { type: "literal", value: "bool", description: "\"bool\"" },
            peg$c125 = "string",
            peg$c126 = { type: "literal", value: "string", description: "\"string\"" },
            peg$c127 = "long",
            peg$c128 = { type: "literal", value: "long", description: "\"long\"" },
            peg$c129 = "signed",
            peg$c130 = { type: "literal", value: "signed", description: "\"signed\"" },
            peg$c131 = "unsigned",
            peg$c132 = { type: "literal", value: "unsigned", description: "\"unsigned\"" },
            peg$c133 = "float",
            peg$c134 = { type: "literal", value: "float", description: "\"float\"" },
            peg$c135 = "double",
            peg$c136 = { type: "literal", value: "double", description: "\"double\"" },
            peg$c137 = "void",
            peg$c138 = { type: "literal", value: "void", description: "\"void\"" },
            peg$c139 = function(id) {return isUserTypeName(id.identifier);},
            peg$c140 = function(id) {return id.identifier;},
            peg$c141 = "enum",
            peg$c142 = { type: "literal", value: "enum", description: "\"enum\"" },
            peg$c143 = function(e) {return e;},
            peg$c144 = function(name, first, rest) { return {enum:name, values:composeBinaryOp(first, rest)}; },
            peg$c145 = "=",
            peg$c146 = { type: "literal", value: "=", description: "\"=\"" },
            peg$c147 = function(name, value) {return {name:name, value:value}; },
            peg$c148 = function(d, i) {return track(absorb(d, {init: i}), offset, text, line, column);},
            peg$c149 = function(args) {
                return {initializer:"direct", args:args};
            },
            peg$c150 = function(init) {return {initializer:"copy", args:[init]};},
            peg$c151 = function(init) {return init;},
            peg$c152 = function(op, e) {return e;},
            peg$c153 = function(first, rest) {
                rest.unshift(first);
                return track({initializerList: rest}, offset, text, line, column);
            },
            peg$c154 = function(d) {
                //d = insideOut(d);
                var d2 = track(absorb({declarator:"declarator"}, d), offset, text, line, column);
                return d2;
            },
            peg$c155 = function(d) {
                //d = insideOut(d);
                var d2 = track(absorb({declarator:"declarator", abstract: true}, d), offset, text, line, column);
                return d2;
            },
            peg$c156 = "*",
            peg$c157 = { type: "literal", value: "*", description: "\"*\"" },
            peg$c158 = function(cv, decl) { return absorb({pointer:decl}, cv); },
            peg$c159 = "&",
            peg$c160 = { type: "literal", value: "&", description: "\"&\"" },
            peg$c161 = function(cv, decl) { return absorb({reference:decl}, cv); },
            peg$c162 = function(decl, postfixes) { return absorb(decl, {postfixes: postfixes}); },
            peg$c163 = function(p) {return p},
            peg$c164 = function(args, cv) { return absorb({type:"function", args:args}, cv); },
            peg$c165 = "[",
            peg$c166 = { type: "literal", value: "[", description: "\"[\"" },
            peg$c167 = "]",
            peg$c168 = { type: "literal", value: "]", description: "\"]\"" },
            peg$c169 = function(size) { return {type:"array", size:size}; },
            peg$c170 = function(d) {return {name:d}; },
            peg$c171 = function(d) {return {sub:d};},
            peg$c172 = "",
            peg$c173 = function() {return {};},
            peg$c174 = function(specs, decl) { return track({specs:specs, declarator:decl}, offset, text, line, column); },
            peg$c175 = function() { return {const: true, volatile: true}; },
            peg$c176 = function() { return {const: true}; },
            peg$c177 = function() { return {volatile: true}; },
            peg$c178 = function(arg) {return arg;},
            peg$c179 = function(first, rest) { rest.unshift(first); return rest; },
            peg$c180 = function() {return [];},
            peg$c181 = function(specs, decl, init) {return {declaration:"parameter", declarator:decl, specs:specs, init:init}; },
            peg$c182 = function(specs, decl) {return track({declaration:"parameter", specs:specs, declarator:decl}, offset, text, line, column); },
            peg$c183 = function(op, e) {return [op,e];},
            peg$c184 = function(first, rest) { return track(composeBinaryOp(first, rest, "left", "comma"), offset, text, line, column); },
            peg$c185 = function(lhs, op, rhs) { return track({expression: "assignment", lhs:lhs, op:op, rhs:rhs}, offset, text, line, column); },
            peg$c186 = function(lhs, op, rhs) { return track({expression: "compoundAssignment", lhs:lhs, op:op, rhs:rhs}, offset, text, line, column); },
            peg$c187 = "*=",
            peg$c188 = { type: "literal", value: "*=", description: "\"*=\"" },
            peg$c189 = "/=",
            peg$c190 = { type: "literal", value: "/=", description: "\"/=\"" },
            peg$c191 = "%=",
            peg$c192 = { type: "literal", value: "%=", description: "\"%=\"" },
            peg$c193 = "+=",
            peg$c194 = { type: "literal", value: "+=", description: "\"+=\"" },
            peg$c195 = "-=",
            peg$c196 = { type: "literal", value: "-=", description: "\"-=\"" },
            peg$c197 = ">>=",
            peg$c198 = { type: "literal", value: ">>=", description: "\">>=\"" },
            peg$c199 = "<<=",
            peg$c200 = { type: "literal", value: "<<=", description: "\"<<=\"" },
            peg$c201 = "&=",
            peg$c202 = { type: "literal", value: "&=", description: "\"&=\"" },
            peg$c203 = "and_eq",
            peg$c204 = { type: "literal", value: "and_eq", description: "\"and_eq\"" },
            peg$c205 = function() {return "&=";},
            peg$c206 = "^=",
            peg$c207 = { type: "literal", value: "^=", description: "\"^=\"" },
            peg$c208 = "xor_eq",
            peg$c209 = { type: "literal", value: "xor_eq", description: "\"xor_eq\"" },
            peg$c210 = function() {return "^=";},
            peg$c211 = "|=",
            peg$c212 = { type: "literal", value: "|=", description: "\"|=\"" },
            peg$c213 = "or_eq",
            peg$c214 = { type: "literal", value: "or_eq", description: "\"or_eq\"" },
            peg$c215 = function() {return "|=";},
            peg$c216 = function(sub) { sub.constant = true; return sub; },
            peg$c217 = "?",
            peg$c218 = { type: "literal", value: "?", description: "\"?\"" },
            peg$c219 = function(_if, then, _else) { return track({expression: "ternary", _if:_if, then:then, _else:_else}, offset, text, line, column); },
            peg$c220 = "||",
            peg$c221 = { type: "literal", value: "||", description: "\"||\"" },
            peg$c222 = "or",
            peg$c223 = { type: "literal", value: "or", description: "\"or\"" },
            peg$c224 = function(op, e) {return ["||",e];},
            peg$c225 = function(first, rest) { return track(composeBinaryOp(first, rest, "left"), offset, text, line, column); },
            peg$c226 = "&&",
            peg$c227 = { type: "literal", value: "&&", description: "\"&&\"" },
            peg$c228 = "and",
            peg$c229 = { type: "literal", value: "and", description: "\"and\"" },
            peg$c230 = function(op, e) {return ["&&",e];},
            peg$c231 = function(first, rest) { return track(composeBinaryOp(first, rest), offset, text, line, column); },
            peg$c232 = "|",
            peg$c233 = { type: "literal", value: "|", description: "\"|\"" },
            peg$c234 = "bitor",
            peg$c235 = { type: "literal", value: "bitor", description: "\"bitor\"" },
            peg$c236 = function(op, e) {return ["|",e];},
            peg$c237 = "^",
            peg$c238 = { type: "literal", value: "^", description: "\"^\"" },
            peg$c239 = "xor",
            peg$c240 = { type: "literal", value: "xor", description: "\"xor\"" },
            peg$c241 = function(op, e) {return ["^",e];},
            peg$c242 = "bitand",
            peg$c243 = { type: "literal", value: "bitand", description: "\"bitand\"" },
            peg$c244 = function(op, e) {return ["&",e];},
            peg$c245 = "==",
            peg$c246 = { type: "literal", value: "==", description: "\"==\"" },
            peg$c247 = "!=",
            peg$c248 = { type: "literal", value: "!=", description: "\"!=\"" },
            peg$c249 = "not_eq",
            peg$c250 = { type: "literal", value: "not_eq", description: "\"not_eq\"" },
            peg$c251 = function() {return "!=";},
            peg$c252 = "<=",
            peg$c253 = { type: "literal", value: "<=", description: "\"<=\"" },
            peg$c254 = ">=",
            peg$c255 = { type: "literal", value: ">=", description: "\">=\"" },
            peg$c256 = "<",
            peg$c257 = { type: "literal", value: "<", description: "\"<\"" },
            peg$c258 = ">",
            peg$c259 = { type: "literal", value: ">", description: "\">\"" },
            peg$c260 = "<<",
            peg$c261 = { type: "literal", value: "<<", description: "\"<<\"" },
            peg$c262 = ">>",
            peg$c263 = { type: "literal", value: ">>", description: "\">>\"" },
            peg$c264 = "+",
            peg$c265 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c266 = "-",
            peg$c267 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c268 = "/",
            peg$c269 = { type: "literal", value: "/", description: "\"/\"" },
            peg$c270 = "%",
            peg$c271 = { type: "literal", value: "%", description: "\"%\"" },
            peg$c272 = ".*",
            peg$c273 = { type: "literal", value: ".*", description: "\".*\"" },
            peg$c274 = "->*",
            peg$c275 = { type: "literal", value: "->*", description: "\"->*\"" },
            peg$c276 = function(t, sub) {
                return track({expression: "cast", type:t, sub:sub}, offset, text, line, column);
            },
            peg$c277 = "++",
            peg$c278 = { type: "literal", value: "++", description: "\"++\"" },
            peg$c279 = function(op, sub) {
                return track({expression: "prefix", op:op, sub:sub}, offset, text, line, column);
            },
            peg$c280 = "--",
            peg$c281 = { type: "literal", value: "--", description: "\"--\"" },
            peg$c282 = function(op, sub) {
                return track(absorb({sub:sub}, op), offset, text, line, column);
            },
            peg$c283 = "sizeof",
            peg$c284 = { type: "literal", value: "sizeof", description: "\"sizeof\"" },
            peg$c285 = function(op, sub) {
                return track({expression: "prefix", operator:op, sub:sub}, offset, text, line, column);
            },
            peg$c286 = function() {return {expression: "dereference", op: "*"};},
            peg$c287 = function() {return {expression: "addressOf",   op: "&"};},
            peg$c288 = function() {return {expression: "unaryPlus", op: "+"};},
            peg$c289 = function() {return {expression: "unaryMinus", op: "-"};},
            peg$c290 = "!",
            peg$c291 = { type: "literal", value: "!", description: "\"!\"" },
            peg$c292 = function() {return {expression: "logicalNot", op: "!"};},
            peg$c293 = "not",
            peg$c294 = { type: "literal", value: "not", description: "\"not\"" },
            peg$c295 = function() {return {expression: "bitwiseNot", op: "~"};},
            peg$c296 = "compl",
            peg$c297 = { type: "literal", value: "compl", description: "\"compl\"" },
            peg$c298 = "new",
            peg$c299 = { type: "literal", value: "new", description: "\"new\"" },
            peg$c300 = function(id, init) {
                return track(absorb({expression: "newExpression", initializer: init}, id), offset, text, line, column);
            },
            peg$c301 = function(id, init) {
                return track(absorb({expression: "newExpression", initializer: init}, id), offset, text, line, column);
            },
            peg$c302 = function(id) {return id;},
            peg$c303 = function(specs, decl) {
                return track({specs:specs, declarator:decl}, offset, text, line, column);
            },
            peg$c304 = function(d) {
                //d = insideOut(d);
                var d2 = track(absorb({declarator:"declarator"}, d), offset, text, line, column);
                return d2;

            },
            peg$c305 = function(postfixes) { return {postfixes: postfixes}; },
            peg$c306 = function(p) {return p;},
            peg$c307 = function(args) {return {args:args || []};},
            peg$c308 = "delete",
            peg$c309 = { type: "literal", value: "delete", description: "\"delete\"" },
            peg$c310 = function(t) {
                return track({expression: "delete", target: t}, offset, text, line, column);
            },
            peg$c311 = function(t) {
                return track({expression: "deleteArray", target: t}, offset, text, line, column); },
            peg$c312 = "static_cast",
            peg$c313 = { type: "literal", value: "static_cast", description: "\"static_cast\"" },
            peg$c314 = function(t, sub) { return track({expression: "StaticCast", type: t, operand:sub}, offset, text, line, column);},
            peg$c315 = "dynamic_cast",
            peg$c316 = { type: "literal", value: "dynamic_cast", description: "\"dynamic_cast\"" },
            peg$c317 = function(t, sub) { return track({expression: "DynamicCast", type: t, operand:sub}, offset, text, line, column);},
            peg$c318 = "reinterpret_cast",
            peg$c319 = { type: "literal", value: "reinterpret_cast", description: "\"reinterpret_cast\"" },
            peg$c320 = function(t, sub) { return track({expression: "ReinterpretCast", type: t, operand:sub}, offset, text, line, column);},
            peg$c321 = "const_cast",
            peg$c322 = { type: "literal", value: "const_cast", description: "\"const_cast\"" },
            peg$c323 = function(t, sub) { return track({expression: "ConstCast", type: t, operand:sub}, offset, text, line, column);},
            peg$c324 = function(op) {return op;},
            peg$c325 = function(sub, ops) { return ops.length > 0 ? track(postfixExp(ops, sub), offset, text, line, column) : sub;},
            peg$c326 = function(sub) { return track({expression:"subscript", sub: sub}, offset, text, line, column); },
            peg$c327 = function(args) { return track({expression: "functionCall", args: args || []}, offset, text, line, column); },
            peg$c328 = ".",
            peg$c329 = { type: "literal", value: ".", description: "\".\"" },
            peg$c330 = function(name) { return track({expression: "dot", member: name}, offset, text, line, column); },
            peg$c331 = "->",
            peg$c332 = { type: "literal", value: "->", description: "\"->\"" },
            peg$c333 = function(name) { return track({expression: "arrow", member: name}, offset, text, line, column); },
            peg$c334 = function() { return track({expression: "increment"}, offset, text, line, column); },
            peg$c335 = function() { return track({expression: "decrement"}, offset, text, line, column); },
            peg$c336 = function(type, args) {
                return track({expression: "construct", type:type, args:args || []}, offset, text, line, column);
            },
            peg$c337 = function(sub) {return track({expression: "parentheses", sub:sub}, offset, text, line, column);},
            peg$c338 = "this",
            peg$c339 = { type: "literal", value: "this", description: "\"this\"" },
            peg$c340 = function() {return track({expression: "thisExpression"}, offset, text, line, column); },
            peg$c341 = function(id) { return track(absorb({expression: "identifier"}, id), offset, text, line, column); },
            peg$c342 = function(n, u) {
                n.push(u);
                return {identifier: n};
            },
            peg$c343 = "::",
            peg$c344 = { type: "literal", value: "::", description: "\"::\"" },
            peg$c345 = function() { return [];},
            peg$c346 = function(id) {return track({identifier: id}, offset, text, line, column);},
            peg$c347 = "operator",
            peg$c348 = { type: "literal", value: "operator", description: "\"operator\"" },
            peg$c349 = function(op) {return track({identifier: "operator"+op, operator: op}, offset, text, line, column);},
            peg$c350 = "new[]",
            peg$c351 = { type: "literal", value: "new[]", description: "\"new[]\"" },
            peg$c352 = "delete[]",
            peg$c353 = { type: "literal", value: "delete[]", description: "\"delete[]\"" },
            peg$c354 = "()",
            peg$c355 = { type: "literal", value: "()", description: "\"()\"" },
            peg$c356 = "[]",
            peg$c357 = { type: "literal", value: "[]", description: "\"[]\"" },
            peg$c358 = "?:",
            peg$c359 = { type: "literal", value: "?:", description: "\"?:\"" },
            peg$c360 = function(lit) {return track({expression: "literal", type:"float", value:lit}, offset, text, line, column);},
            peg$c361 = function(lit) {return track({expression: "literal", type:"int", value:lit}, offset, text, line, column);},
            peg$c362 = function(lit) {return track({expression: "literal", type:"char", value:lit}, offset, text, line, column);},
            peg$c363 = function(lit) {return track({expression: "literal", type:"string", value:lit}, offset, text, line, column);},
            peg$c364 = function(lit) {return track({expression: "literal", type:"bool", value:lit}, offset, text, line, column);},
            peg$c365 = /^[0-9]/,
            peg$c366 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c367 = function(neg, digits) { return parseInt((neg ? neg : "") + digits.join("")); },
            peg$c368 = /^[0-9.]/,
            peg$c369 = { type: "class", value: "[0-9.]", description: "[0-9.]" },
            peg$c370 = function(neg, digits) {return digits.indexOf(".") == digits.lastIndexOf(".") && digits.indexOf(".") != -1;},
            peg$c371 = function(neg, digits) { return parseFloat((neg ? neg : "") + digits.join("")); },
            peg$c372 = "'",
            peg$c373 = { type: "literal", value: "'", description: "\"'\"" },
            peg$c374 = /^[^'\\\n]/,
            peg$c375 = { type: "class", value: "[^'\\\\\\n]", description: "[^'\\\\\\n]" },
            peg$c376 = function(char) { return char; },
            peg$c377 = "\"",
            peg$c378 = { type: "literal", value: "\"", description: "\"\\\"\"" },
            peg$c379 = /^[^"\\\n]/,
            peg$c380 = { type: "class", value: "[^\"\\\\\\n]", description: "[^\"\\\\\\n]" },
            peg$c381 = function(chars) { return chars.join(""); },
            peg$c382 = "true",
            peg$c383 = { type: "literal", value: "true", description: "\"true\"" },
            peg$c384 = function() {return true;},
            peg$c385 = "false",
            peg$c386 = { type: "literal", value: "false", description: "\"false\"" },
            peg$c387 = function() {return false;},
            peg$c388 = "\\\"",
            peg$c389 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
            peg$c390 = "\\'",
            peg$c391 = { type: "literal", value: "\\'", description: "\"\\\\'\"" },
            peg$c392 = "\\?",
            peg$c393 = { type: "literal", value: "\\?", description: "\"\\\\?\"" },
            peg$c394 = "\\\\",
            peg$c395 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
            peg$c396 = "\\a",
            peg$c397 = { type: "literal", value: "\\a", description: "\"\\\\a\"" },
            peg$c398 = "\\b",
            peg$c399 = { type: "literal", value: "\\b", description: "\"\\\\b\"" },
            peg$c400 = "\\f",
            peg$c401 = { type: "literal", value: "\\f", description: "\"\\\\f\"" },
            peg$c402 = "\\n",
            peg$c403 = { type: "literal", value: "\\n", description: "\"\\\\n\"" },
            peg$c404 = "\\r",
            peg$c405 = { type: "literal", value: "\\r", description: "\"\\\\r\"" },
            peg$c406 = "\\t",
            peg$c407 = { type: "literal", value: "\\t", description: "\"\\\\t\"" },
            peg$c408 = "\\v",
            peg$c409 = { type: "literal", value: "\\v", description: "\"\\\\v\"" },
            peg$c410 = "\\0",
            peg$c411 = { type: "literal", value: "\\0", description: "\"\\\\0\"" },
            peg$c412 = /^[0-8]/,
            peg$c413 = { type: "class", value: "[0-8]", description: "[0-8]" },
            peg$c414 = { type: "other", description: "identifier" },
            peg$c415 = function(first, rest) {return track({identifier: first + rest.join("")}, offset, text, line, column);},
            peg$c416 = /^[a-zA-Z0-9_]/,
            peg$c417 = { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
            peg$c418 = /^[a-zA-Z_]/,
            peg$c419 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
            peg$c420 = { type: "other", description: "optional whitespace" },
            peg$c421 = /^[ \t\n\r]/,
            peg$c422 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
            peg$c423 = { type: "other", description: "whitespace" },
            peg$c424 = function(head) {getUserTypeNames()[head.name.identifier]=true;},
            peg$c425 = function(head, mems) { return track({head: head, member_specs: mems}, offset, text, line, column); },
            peg$c426 = function(b) {return b;},
            peg$c427 = function(key, name, bases) { return track({key:key, name:name, bases:bases}, offset, text, line, column); },
            peg$c428 = "class",
            peg$c429 = { type: "literal", value: "class", description: "\"class\"" },
            peg$c430 = "struct",
            peg$c431 = { type: "literal", value: "struct", description: "\"struct\"" },
            peg$c432 = "union",
            peg$c433 = { type: "literal", value: "union", description: "\"union\"" },
            peg$c434 = function(m) {return m},
            peg$c435 = function(members) { return {members: members}; },
            peg$c436 = function(access, members) { return {members: members, access: access}; },
            peg$c437 = "private",
            peg$c438 = { type: "literal", value: "private", description: "\"private\"" },
            peg$c439 = "protected",
            peg$c440 = { type: "literal", value: "protected", description: "\"protected\"" },
            peg$c441 = "public",
            peg$c442 = { type: "literal", value: "public", description: "\"public\"" },
            peg$c443 = function(specs, declarators) { return track({declaration: "member", specs:specs, declarators:declarators}, offset, text, line, column); },
            peg$c444 = function(c) { return c; },
            peg$c445 = function(d) { return d; },
            peg$c446 = function(f) { return f; },
            peg$c447 = "0",
            peg$c448 = { type: "literal", value: "0", description: "\"0\"" },
            peg$c449 = function(d) {d.pureVirtual = true; return d;},
            peg$c450 = function(d, i) {d.init = i; return d;},
            peg$c451 = function(b) {return b},
            peg$c452 = function(a) {return a;},
            peg$c453 = function(a, c) {
                return {name: c, virtual: true, access: a};},
            peg$c454 = function(a, c) {
                return {name: c, access: a};},
            peg$c455 = function(c) {
                return {name: c};},
            peg$c456 = function(n, c) {
                n.push(c);
                return n;},

            peg$currPos          = 0,
            peg$reportedPos      = 0,
            peg$cachedPos        = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$cache = {},
            peg$result;

        if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }

            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg$reportedPos, peg$currPos);
        }

        function offset() {
            return peg$reportedPos;
        }

        function line() {
            return peg$computePosDetails(peg$reportedPos).line;
        }

        function column() {
            return peg$computePosDetails(peg$reportedPos).column;
        }

        function expected(description) {
            throw peg$buildException(
                null,
                [{ type: "other", description: description }],
                peg$reportedPos
            );
        }

        function error(message) {
            throw peg$buildException(message, null, peg$reportedPos);
        }

        function peg$computePosDetails(pos) {
            function advance(details, startPos, endPos) {
                var p, ch;

                for (p = startPos; p < endPos; p++) {
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) { details.line++; }
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }
                }
            }

            if (peg$cachedPos !== pos) {
                if (peg$cachedPos > pos) {
                    peg$cachedPos = 0;
                    peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
                }
                advance(peg$cachedPosDetails, peg$cachedPos, pos);
                peg$cachedPos = pos;
            }

            return peg$cachedPosDetails;
        }

        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) { return; }

            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, pos) {
            function cleanupExpected(expected) {
                var i = 1;

                expected.sort(function(a, b) {
                    if (a.description < b.description) {
                        return -1;
                    } else if (a.description > b.description) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                while (i < expected.length) {
                    if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                    } else {
                        i++;
                    }
                }
            }

            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

                    return s
                        .replace(/\\/g,   '\\\\')
                        .replace(/"/g,    '\\"')
                        .replace(/\x08/g, '\\b')
                        .replace(/\t/g,   '\\t')
                        .replace(/\n/g,   '\\n')
                        .replace(/\f/g,   '\\f')
                        .replace(/\r/g,   '\\r')
                        .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                        .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                        .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                        .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
                }

                var expectedDescs = new Array(expected.length),
                    expectedDesc, foundDesc, i;

                for (i = 0; i < expected.length; i++) {
                    expectedDescs[i] = expected[i].description;
                }

                expectedDesc = expected.length > 1
                    ? expectedDescs.slice(0, -1).join(", ")
                + " or "
                + expectedDescs[expected.length - 1]
                    : expectedDescs[0];

                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }

            var posDetails = peg$computePosDetails(pos),
                found      = pos < input.length ? input.charAt(pos) : null;

            if (expected !== null) {
                cleanupExpected(expected);
            }

            return new SyntaxError(
                message !== null ? message : buildMessage(expected, found),
                expected,
                found,
                pos,
                posDetails.line,
                posDetails.column
            );
        }

        function peg$parsestart() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 0,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsews();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsedecl_or_comment();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parsews();
                    if (s5 !== peg$FAILED) {
                        peg$reportedPos = s3;
                        s4 = peg$c2(s4);
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsedecl_or_comment();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsews();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s3;
                            s4 = peg$c2(s4);
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c3(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedecl_or_comment() {
            var s0, s1;

            var key    = peg$currPos * 120 + 1,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsecomment();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c4();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$parsedeclaration();
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsecomment() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 2,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c5) {
                s1 = peg$c5;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c7.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c7.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c8); }
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 10) {
                        s3 = peg$c9;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c10); }
                    }
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c11) {
                    s1 = peg$c11;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 2) === peg$c14) {
                        s5 = peg$c14;
                        peg$currPos += 2;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c15); }
                    }
                    peg$silentFails--;
                    if (s5 === peg$FAILED) {
                        s4 = peg$c13;
                    } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c16); }
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 2) === peg$c14) {
                            s5 = peg$c14;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c15); }
                        }
                        peg$silentFails--;
                        if (s5 === peg$FAILED) {
                            s4 = peg$c13;
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c16); }
                            }
                            if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c14) {
                            s3 = peg$c14;
                            peg$currPos += 2;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c15); }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsestatement() {
            var s0, s1;

            var key    = peg$currPos * 120 + 3,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsestatement_tracked();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c17(s1);
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsestatement_tracked() {
            var s0, s1;

            var key    = peg$currPos * 120 + 4,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parselabeled_statement();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c18(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsecompound_statement();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c19(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseselection_statement();
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c20(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseiteration_statement();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsejump_statement();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parsedeclaration_statement();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseexpression_statement();
                                }
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parselabeled_statement() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 5,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseidentifier();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s3 = peg$c21;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsestatement();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c23(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c24) {
                    s1 = peg$c24;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c25); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseWS();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp_const();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                    s5 = peg$c21;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsestatement();
                                        if (s7 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c26(s3, s7);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c27) {
                        s1 = peg$c27;
                        peg$currPos += 7;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c28); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 58) {
                                s3 = peg$c21;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c22); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsestatement();
                                    if (s5 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c29(s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexpression_statement() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 6,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexpression();
            if (s1 === peg$FAILED) {
                s1 = peg$c30;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 59) {
                        s3 = peg$c31;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c32); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c33(s1);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsecompound_statement() {
            var s0, s1, s2, s3, s4, s5, s6;

            var key    = peg$currPos * 120 + 7,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c34;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$currPos;
                    s5 = peg$parsestatement();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            peg$reportedPos = s4;
                            s5 = peg$c36(s5);
                            s4 = s5;
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                        }
                    } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        s5 = peg$parsestatement();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                peg$reportedPos = s4;
                                s5 = peg$c36(s5);
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                            s4 = peg$c37;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c38); }
                        }
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c39(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseselection_statement() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

            var key    = peg$currPos * 120 + 8,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c40) {
                s1 = peg$c40;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c42;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexpression();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s7 = peg$c44;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsews();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parsestatement();
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parsews();
                                                if (s10 !== peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c46) {
                                                        s11 = peg$c46;
                                                        peg$currPos += 4;
                                                    } else {
                                                        s11 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c47); }
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parsews();
                                                        if (s12 !== peg$FAILED) {
                                                            s13 = peg$parsestatement();
                                                            if (s13 !== peg$FAILED) {
                                                                peg$reportedPos = s0;
                                                                s1 = peg$c48(s5, s9, s13);
                                                                s0 = s1;
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c40) {
                    s1 = peg$c40;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c41); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c42;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c43); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseexpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c44;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsews();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsestatement();
                                                if (s9 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c49(s5, s9);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseiteration_statement() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

            var key    = peg$currPos * 120 + 9,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c50) {
                s1 = peg$c50;
                peg$currPos += 5;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c42;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexpression();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s7 = peg$c44;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsews();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parsestatement();
                                            if (s9 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c52(s5, s9);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c53) {
                    s1 = peg$c53;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c54); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parseidentifierChar();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                        s2 = peg$c13;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsestatement();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsews();
                                if (s5 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 5) === peg$c50) {
                                        s6 = peg$c50;
                                        peg$currPos += 5;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c51); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsews();
                                        if (s7 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 40) {
                                                s8 = peg$c42;
                                                peg$currPos++;
                                            } else {
                                                s8 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c43); }
                                            }
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsews();
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parseexpression();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parsews();
                                                        if (s11 !== peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 41) {
                                                                s12 = peg$c44;
                                                                peg$currPos++;
                                                            } else {
                                                                s12 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                                            }
                                                            if (s12 !== peg$FAILED) {
                                                                s13 = peg$parsews();
                                                                if (s13 !== peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 59) {
                                                                        s14 = peg$c31;
                                                                        peg$currPos++;
                                                                    } else {
                                                                        s14 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                                                    }
                                                                    if (s14 !== peg$FAILED) {
                                                                        peg$reportedPos = s0;
                                                                        s1 = peg$c55(s4, s10);
                                                                        s0 = s1;
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c56) {
                        s1 = peg$c56;
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c57); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                                s3 = peg$c42;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c43); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsefor_init_statement();
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parsews();
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parseexpression();
                                            if (s7 !== peg$FAILED) {
                                                s8 = peg$parsews();
                                                if (s8 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 59) {
                                                        s9 = peg$c31;
                                                        peg$currPos++;
                                                    } else {
                                                        s9 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                                    }
                                                    if (s9 !== peg$FAILED) {
                                                        s10 = peg$parsews();
                                                        if (s10 !== peg$FAILED) {
                                                            s11 = peg$parseexpression();
                                                            if (s11 !== peg$FAILED) {
                                                                s12 = peg$parsews();
                                                                if (s12 !== peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                                        s13 = peg$c44;
                                                                        peg$currPos++;
                                                                    } else {
                                                                        s13 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                                                    }
                                                                    if (s13 !== peg$FAILED) {
                                                                        s14 = peg$parsews();
                                                                        if (s14 !== peg$FAILED) {
                                                                            s15 = peg$parsestatement();
                                                                            if (s15 !== peg$FAILED) {
                                                                                peg$reportedPos = s0;
                                                                                s1 = peg$c58(s5, s7, s11, s15);
                                                                                s0 = s1;
                                                                            } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$c0;
                                                                            }
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c0;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsefor_init_statement() {
            var s0, s1;

            var key    = peg$currPos * 120 + 10,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parseexpression_statement();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsedeclaration_statement();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c59(s1);
                }
                s0 = s1;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsejump_statement() {
            var s0, s1, s2, s3, s4, s5, s6;

            var key    = peg$currPos * 120 + 11,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c60) {
                s1 = peg$c60;
                peg$currPos += 5;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c61); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parseidentifierChar();
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                    s2 = peg$c13;
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                            s4 = peg$c31;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c32); }
                        }
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c62();
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c63) {
                    s1 = peg$c63;
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c64); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parseidentifierChar();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                        s2 = peg$c13;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                                s4 = peg$c31;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c32); }
                            }
                            if (s4 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c65();
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 6) === peg$c66) {
                        s1 = peg$c66;
                        peg$currPos += 6;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c67); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        peg$silentFails++;
                        s3 = peg$parseidentifierChar();
                        peg$silentFails--;
                        if (s3 === peg$FAILED) {
                            s2 = peg$c13;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsews();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parseexpression();
                                if (s4 === peg$FAILED) {
                                    s4 = peg$c30;
                                }
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsews();
                                    if (s5 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 59) {
                                            s6 = peg$c31;
                                            peg$currPos++;
                                        } else {
                                            s6 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                        }
                                        if (s6 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c68(s4);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedeclaration_statement() {
            var s0, s1;

            var key    = peg$currPos * 120 + 12,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsedeclaration();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c69(s1);
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedeclaration() {
            var s0;

            var key    = peg$currPos * 120 + 13,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parsesimple_declaration();
            if (s0 === peg$FAILED) {
                s0 = peg$parseclass_declaration();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsefunction_definition();
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesimple_declaration() {
            var s0, s1, s2, s3, s4, s5, s6;

            var key    = peg$currPos * 120 + 14,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsedecl_specifiers();
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parseidentifier();
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                    s2 = peg$c13;
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsedeclarator_list();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsews();
                            if (s5 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 59) {
                                    s6 = peg$c31;
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                }
                                if (s6 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c70(s1, s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedeclarator_list() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 15,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsedeclarator_init();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c71;
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parsedeclarator_init();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c73(s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c71;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parsedeclarator_init();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c73(s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c74(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseclass_declaration() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 16,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseclass_specifier();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 59) {
                        s3 = peg$c31;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c32); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c75(s1);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsefunction_definition() {
            var s0, s1, s2, s3, s4, s5, s6;

            var key    = peg$currPos * 120 + 17,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsedecl_specifiers();
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parseidentifier();
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                    s2 = peg$c13;
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsedeclarator();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsews();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsecompound_statement();
                                if (s6 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c76(s1, s4, s6);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseconstructor_definition() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

            var key    = peg$currPos * 120 + 18,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseidentifier();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c42;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseargument_declaration_list();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s7 = peg$c44;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsews();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parsector_initializer();
                                            if (s9 === peg$FAILED) {
                                                s9 = peg$c30;
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parsews();
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parsecompound_statement();
                                                    if (s11 === peg$FAILED) {
                                                        s11 = peg$currPos;
                                                        if (input.charCodeAt(peg$currPos) === 59) {
                                                            s12 = peg$c31;
                                                            peg$currPos++;
                                                        } else {
                                                            s12 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                                        }
                                                        if (s12 !== peg$FAILED) {
                                                            peg$reportedPos = s11;
                                                            s12 = peg$c77();
                                                        }
                                                        s11 = s12;
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c78(s1, s5, s9, s11);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedestructor_definition() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

            var key    = peg$currPos * 120 + 19,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 126) {
                s1 = peg$c79;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseidentifier();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s4 = peg$c42;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c43); }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsews();
                            if (s5 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s6 = peg$c44;
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsews();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsecompound_statement();
                                        if (s8 === peg$FAILED) {
                                            s8 = peg$currPos;
                                            if (input.charCodeAt(peg$currPos) === 59) {
                                                s9 = peg$c31;
                                                peg$currPos++;
                                            } else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                peg$reportedPos = s8;
                                                s9 = peg$c77();
                                            }
                                            s8 = s9;
                                        }
                                        if (s8 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c81(s2, s8);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7) === peg$c82) {
                    s1 = peg$c82;
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c83); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseWS();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 126) {
                            s3 = peg$c79;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c80); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseidentifier();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsews();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 40) {
                                        s6 = peg$c42;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsews();
                                        if (s7 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                                s8 = peg$c44;
                                                peg$currPos++;
                                            } else {
                                                s8 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                            }
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsews();
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parsecompound_statement();
                                                    if (s10 === peg$FAILED) {
                                                        s10 = peg$currPos;
                                                        if (input.charCodeAt(peg$currPos) === 59) {
                                                            s11 = peg$c31;
                                                            peg$currPos++;
                                                        } else {
                                                            s11 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            peg$reportedPos = s10;
                                                            s11 = peg$c77();
                                                        }
                                                        s10 = s11;
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c84(s4, s10);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsector_initializer() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

            var key    = peg$currPos * 120 + 20,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 58) {
                s1 = peg$c21;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsemem_initializer();
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$currPos;
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s7 = peg$c71;
                                peg$currPos++;
                            } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c72); }
                            }
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parsews();
                                if (s8 !== peg$FAILED) {
                                    s9 = peg$parsemem_initializer();
                                    if (s9 !== peg$FAILED) {
                                        peg$reportedPos = s5;
                                        s6 = peg$c85(s9);
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$currPos;
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 44) {
                                    s7 = peg$c71;
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c72); }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parsews();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parsemem_initializer();
                                        if (s9 !== peg$FAILED) {
                                            peg$reportedPos = s5;
                                            s6 = peg$c85(s9);
                                            s5 = s6;
                                        } else {
                                            peg$currPos = s5;
                                            s5 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c86(s3, s4);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsemem_initializer() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 21,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseidentifier();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c42;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexp_list();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c30;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s7 = peg$c44;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c87(s1, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsefunction_body() {
            var s0;

            var key    = peg$currPos * 120 + 22,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parsecompound_statement();

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedecl_specifiers() {
            var s0, s1, s2, s3, s4, s5, s6;

            var key    = peg$currPos * 120 + 23,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$currPos;
            s3 = peg$parsedecl_specifier();
            if (s3 !== peg$FAILED) {
                s4 = peg$parseWS();
                if (s4 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c88(s3);
                    s2 = s3;
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
            } else {
                peg$currPos = s2;
                s2 = peg$c0;
            }
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$currPos;
                s3 = peg$parsedecl_specifier();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseWS();
                    if (s4 !== peg$FAILED) {
                        peg$reportedPos = s2;
                        s3 = peg$c88(s3);
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsesimple_type_name();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$currPos;
                    s5 = peg$parseWS();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsedecl_specifier();
                        if (s6 !== peg$FAILED) {
                            peg$reportedPos = s4;
                            s5 = peg$c88(s6);
                            s4 = s5;
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                        }
                    } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        s5 = peg$parseWS();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsedecl_specifier();
                            if (s6 !== peg$FAILED) {
                                peg$reportedPos = s4;
                                s5 = peg$c88(s6);
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c89(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedecl_specifier() {
            var s0, s1;

            var key    = peg$currPos * 120 + 24,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsetype_specifier();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c90(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsestorage_class_specifier();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c91(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$parsefunction_specifier();
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c92) {
                            s0 = peg$c92;
                            peg$currPos += 7;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c93); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c94) {
                                s0 = peg$c94;
                                peg$currPos += 6;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c95); }
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsetype_specifiers() {
            var s0, s1, s2, s3, s4, s5, s6;

            var key    = peg$currPos * 120 + 25,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$currPos;
            s3 = peg$parsetype_specifier();
            if (s3 !== peg$FAILED) {
                s4 = peg$parseWS();
                if (s4 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c88(s3);
                    s2 = s3;
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
            } else {
                peg$currPos = s2;
                s2 = peg$c0;
            }
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$currPos;
                s3 = peg$parsetype_specifier();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseWS();
                    if (s4 !== peg$FAILED) {
                        peg$reportedPos = s2;
                        s3 = peg$c88(s3);
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsesimple_type_name();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$currPos;
                    s5 = peg$parseWS();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsetype_specifier();
                        if (s6 !== peg$FAILED) {
                            peg$reportedPos = s4;
                            s5 = peg$c88(s6);
                            s4 = s5;
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                        }
                    } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        s5 = peg$parseWS();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsetype_specifier();
                            if (s6 !== peg$FAILED) {
                                peg$reportedPos = s4;
                                s5 = peg$c88(s6);
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c96(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsetype_specifier() {
            var s0;

            var key    = peg$currPos * 120 + 26,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parseenum_specifier();
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c97) {
                    s0 = peg$c97;
                    peg$currPos += 5;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c98); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c99) {
                        s0 = peg$c99;
                        peg$currPos += 8;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c100); }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsestorage_class_specifier() {
            var s0;

            var key    = peg$currPos * 120 + 27,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 8) === peg$c101) {
                s0 = peg$c101;
                peg$currPos += 8;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c102); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c103) {
                    s0 = peg$c103;
                    peg$currPos += 6;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c104); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 12) === peg$c105) {
                        s0 = peg$c105;
                        peg$currPos += 12;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c106); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c107) {
                            s0 = peg$c107;
                            peg$currPos += 6;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c108); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c109) {
                                s0 = peg$c109;
                                peg$currPos += 7;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c110); }
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsefunction_specifier() {
            var s0;

            var key    = peg$currPos * 120 + 28,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 6) === peg$c111) {
                s0 = peg$c111;
                peg$currPos += 6;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c112); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c113) {
                    s0 = peg$c113;
                    peg$currPos += 8;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c114); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c82) {
                        s0 = peg$c82;
                        peg$currPos += 7;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c83); }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesimple_type_name() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 29,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parse_simple_type_name();
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parseidentifierChar();
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                    s2 = peg$c13;
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c116(s1);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c115); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parse_simple_type_name() {
            var s0, s1, s2;

            var key    = peg$currPos * 120 + 30,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 4) === peg$c117) {
                s0 = peg$c117;
                peg$currPos += 4;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c118); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c119) {
                    s0 = peg$c119;
                    peg$currPos += 5;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c120); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c121) {
                        s0 = peg$c121;
                        peg$currPos += 3;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c122); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c123) {
                            s0 = peg$c123;
                            peg$currPos += 4;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c124); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6) === peg$c125) {
                                s0 = peg$c125;
                                peg$currPos += 6;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c126); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c127) {
                                    s0 = peg$c127;
                                    peg$currPos += 4;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c128); }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c129) {
                                        s0 = peg$c129;
                                        peg$currPos += 6;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c130); }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 8) === peg$c131) {
                                            s0 = peg$c131;
                                            peg$currPos += 8;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c132); }
                                        }
                                        if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 5) === peg$c133) {
                                                s0 = peg$c133;
                                                peg$currPos += 5;
                                            } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c134); }
                                            }
                                            if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 6) === peg$c135) {
                                                    s0 = peg$c135;
                                                    peg$currPos += 6;
                                                } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c136); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 4) === peg$c137) {
                                                        s0 = peg$c137;
                                                        peg$currPos += 4;
                                                    } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c138); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseidentifier();
                                                        if (s1 !== peg$FAILED) {
                                                            peg$reportedPos = peg$currPos;
                                                            s2 = peg$c139(s1);
                                                            if (s2) {
                                                                s2 = peg$c13;
                                                            } else {
                                                                s2 = peg$c0;
                                                            }
                                                            if (s2 !== peg$FAILED) {
                                                                peg$reportedPos = s0;
                                                                s1 = peg$c140(s1);
                                                                s0 = s1;
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseenum_specifier() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

            var key    = peg$currPos * 120 + 31,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c141) {
                s1 = peg$c141;
                peg$currPos += 4;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c142); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseWS();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseidentifier();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c30;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 123) {
                                s5 = peg$c34;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c35); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseenumerator();
                                if (s6 !== peg$FAILED) {
                                    s7 = [];
                                    s8 = peg$currPos;
                                    s9 = peg$parsews();
                                    if (s9 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 44) {
                                            s10 = peg$c71;
                                            peg$currPos++;
                                        } else {
                                            s10 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                                        }
                                        if (s10 !== peg$FAILED) {
                                            s11 = peg$parsews();
                                            if (s11 !== peg$FAILED) {
                                                s12 = peg$parseenumerator();
                                                if (s12 !== peg$FAILED) {
                                                    peg$reportedPos = s8;
                                                    s9 = peg$c143(s12);
                                                    s8 = s9;
                                                } else {
                                                    peg$currPos = s8;
                                                    s8 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s8;
                                                s8 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s8;
                                            s8 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s8;
                                        s8 = peg$c0;
                                    }
                                    while (s8 !== peg$FAILED) {
                                        s7.push(s8);
                                        s8 = peg$currPos;
                                        s9 = peg$parsews();
                                        if (s9 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 44) {
                                                s10 = peg$c71;
                                                peg$currPos++;
                                            } else {
                                                s10 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c72); }
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parsews();
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parseenumerator();
                                                    if (s12 !== peg$FAILED) {
                                                        peg$reportedPos = s8;
                                                        s9 = peg$c143(s12);
                                                        s8 = s9;
                                                    } else {
                                                        peg$currPos = s8;
                                                        s8 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s8;
                                                    s8 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s8;
                                                s8 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s8;
                                            s8 = peg$c0;
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsews();
                                        if (s8 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 125) {
                                                s9 = peg$c37;
                                                peg$currPos++;
                                            } else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c38); }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c144(s3, s6, s7);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseenumerator() {
            var s0, s1, s2, s3, s4, s5, s6;

            var key    = peg$currPos * 120 + 32,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseidentifier();
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parsews();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s4 = peg$c145;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c146); }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsews();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseexp_const();
                            if (s6 !== peg$FAILED) {
                                peg$reportedPos = s2;
                                s3 = peg$c143(s6);
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c147(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedeclarator_init() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 33,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsedeclarator();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseinitializer();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c30;
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c148(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseinitializer() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 34,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parsebrace_or_equal_initializer();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c42;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c43); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp_list();
                        if (s3 === peg$FAILED) {
                            s3 = peg$c30;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c44;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c149(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsebrace_or_equal_initializer() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 35,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 61) {
                s1 = peg$c145;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c146); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexp_assn();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c150(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 61) {
                    s1 = peg$c145;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c146); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 123) {
                            s3 = peg$c34;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c35); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseinitializer_list();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 125) {
                                            s7 = peg$c37;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c38); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c151(s5);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseinitializer_list() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 36,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_assn();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c71;
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_assn();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c152(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c71;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_assn();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c152(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c153(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedeclarator() {
            var s0, s1;

            var key    = peg$currPos * 120 + 37,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parse_declarator();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c154(s1);
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseabstract_declarator() {
            var s0, s1;

            var key    = peg$currPos * 120 + 38,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parse_abs_declarator();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c155(s1);
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parse_declarator() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 39,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 42) {
                s1 = peg$c156;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c157); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsecv_qualifier();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c30;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_declarator();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c158(s3, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 38) {
                    s1 = peg$c159;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c160); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsecv_qualifier();
                        if (s3 === peg$FAILED) {
                            s3 = peg$c30;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_declarator();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c161(s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsedeclarator_simple();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsedeclarator_postfixes();
                        if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c162(s1, s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsedeclarator_simple();
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parse_abs_declarator() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 40,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 42) {
                s1 = peg$c156;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c157); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsecv_qualifier();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c30;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_abs_declarator();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c158(s3, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 38) {
                    s1 = peg$c159;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c160); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsecv_qualifier();
                        if (s3 === peg$FAILED) {
                            s3 = peg$c30;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_abs_declarator();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c161(s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseabs_declarator_simple();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsedeclarator_postfixes();
                        if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c162(s1, s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseabs_declarator_simple();
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedeclarator_postfixes() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 41,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = [];
            s1 = peg$currPos;
            s2 = peg$parsews();
            if (s2 !== peg$FAILED) {
                s3 = peg$parsedeclarator_postfix();
                if (s3 !== peg$FAILED) {
                    peg$reportedPos = s1;
                    s2 = peg$c163(s3);
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$currPos;
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsedeclarator_postfix();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s1;
                            s2 = peg$c163(s3);
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                }
            } else {
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedeclarator_postfix() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 42,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c42;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseargument_declaration_list();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s5 = peg$c44;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c45); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsecv_qualifier();
                                    if (s7 === peg$FAILED) {
                                        s7 = peg$c30;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c164(s3, s7);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c165;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c166); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp_const();
                        if (s3 === peg$FAILED) {
                            s3 = peg$c30;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 93) {
                                    s5 = peg$c167;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c168); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c169(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedeclarator_simple() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 43,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsename();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c170(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c42;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c43); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_declarator();
                        if (s3 === peg$FAILED) {
                            s3 = peg$c30;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c44;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c171(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseabs_declarator_simple() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 44,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c42;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_abs_declarator();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c30;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s5 = peg$c44;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c45); }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c171(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$c172;
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c173();
                }
                s0 = s1;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsetype_id() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 45,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsetype_specifiers();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseabstract_declarator();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c174(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsecv_qualifier() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 46,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c97) {
                s1 = peg$c97;
                peg$currPos += 5;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c98); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseWS();
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c99) {
                        s3 = peg$c99;
                        peg$currPos += 8;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c100); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c175();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c99) {
                    s1 = peg$c99;
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c100); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseWS();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c97) {
                            s3 = peg$c97;
                            peg$currPos += 5;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c98); }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c175();
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 5) === peg$c97) {
                        s1 = peg$c97;
                        peg$currPos += 5;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c98); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c176();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 8) === peg$c99) {
                            s1 = peg$c99;
                            peg$currPos += 8;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c100); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c177();
                        }
                        s0 = s1;
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseargument_declaration_list() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 47,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseargument_declaration();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c71;
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseargument_declaration();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c178(s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c71;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseargument_declaration();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c178(s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c179(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$c172;
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c180();
                }
                s0 = s1;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseargument_declaration() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 48,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsedecl_specifiers();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsedeclarator();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 61) {
                                s5 = peg$c145;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c146); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_assn();
                                    if (s7 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c181(s1, s3, s7);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsedecl_specifiers();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsedeclarator();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c182(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsedecl_specifiers();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseabstract_declarator();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 61) {
                                        s5 = peg$c145;
                                        peg$currPos++;
                                    } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c146); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parsews();
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parseexp_assn();
                                            if (s7 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c181(s1, s3, s7);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsedecl_specifiers();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parseabstract_declarator();
                                if (s3 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c182(s1, s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexpression() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 49,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_assn();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c71;
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_assn();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c183(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c71;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_assn();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c183(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c184(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseexp_assn();
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_assn() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 50,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_unary();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s3 = peg$c145;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c146); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexp_assn();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c185(s1, s3, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseexp_unary();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseop_comp_assn();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseexp_assn();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c186(s1, s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseexp_cond();
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseop_comp_assn() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 51,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 2) === peg$c187) {
                s0 = peg$c187;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c188); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c189) {
                    s0 = peg$c189;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c190); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c191) {
                        s0 = peg$c191;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c192); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c193) {
                            s0 = peg$c193;
                            peg$currPos += 2;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c194); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c195) {
                                s0 = peg$c195;
                                peg$currPos += 2;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c196); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c197) {
                                    s0 = peg$c197;
                                    peg$currPos += 3;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c198); }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c199) {
                                        s0 = peg$c199;
                                        peg$currPos += 3;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c200); }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c201) {
                                            s0 = peg$c201;
                                            peg$currPos += 2;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c202); }
                                        }
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.substr(peg$currPos, 6) === peg$c203) {
                                                s1 = peg$c203;
                                                peg$currPos += 6;
                                            } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c204); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                                s2 = peg$currPos;
                                                peg$silentFails++;
                                                s3 = peg$parseidentifierChar();
                                                peg$silentFails--;
                                                if (s3 === peg$FAILED) {
                                                    s2 = peg$c13;
                                                } else {
                                                    peg$currPos = s2;
                                                    s2 = peg$c0;
                                                }
                                                if (s2 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c205();
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                            if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c206) {
                                                    s0 = peg$c206;
                                                    peg$currPos += 2;
                                                } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c207); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    if (input.substr(peg$currPos, 6) === peg$c208) {
                                                        s1 = peg$c208;
                                                        peg$currPos += 6;
                                                    } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c209); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                        s2 = peg$currPos;
                                                        peg$silentFails++;
                                                        s3 = peg$parseidentifierChar();
                                                        peg$silentFails--;
                                                        if (s3 === peg$FAILED) {
                                                            s2 = peg$c13;
                                                        } else {
                                                            peg$currPos = s2;
                                                            s2 = peg$c0;
                                                        }
                                                        if (s2 !== peg$FAILED) {
                                                            peg$reportedPos = s0;
                                                            s1 = peg$c210();
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c211) {
                                                            s0 = peg$c211;
                                                            peg$currPos += 2;
                                                        } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c212); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            if (input.substr(peg$currPos, 5) === peg$c213) {
                                                                s1 = peg$c213;
                                                                peg$currPos += 5;
                                                            } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c214); }
                                                            }
                                                            if (s1 !== peg$FAILED) {
                                                                s2 = peg$currPos;
                                                                peg$silentFails++;
                                                                s3 = peg$parseidentifierChar();
                                                                peg$silentFails--;
                                                                if (s3 === peg$FAILED) {
                                                                    s2 = peg$c13;
                                                                } else {
                                                                    peg$currPos = s2;
                                                                    s2 = peg$c0;
                                                                }
                                                                if (s2 !== peg$FAILED) {
                                                                    peg$reportedPos = s0;
                                                                    s1 = peg$c215();
                                                                    s0 = s1;
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_const() {
            var s0, s1;

            var key    = peg$currPos * 120 + 52,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_cond();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c216(s1);
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_cond() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

            var key    = peg$currPos * 120 + 53,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_or();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 63) {
                        s3 = peg$c217;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c218); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexpression();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 58) {
                                        s7 = peg$c21;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsews();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseexp_assn();
                                            if (s9 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c219(s1, s5, s9);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseexp_or();
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_or() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            var key    = peg$currPos * 120 + 54,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_and();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c220) {
                        s5 = peg$c220;
                        peg$currPos += 2;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c221); }
                    }
                    if (s5 === peg$FAILED) {
                        s5 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c222) {
                            s6 = peg$c222;
                            peg$currPos += 2;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c223); }
                        }
                        if (s6 !== peg$FAILED) {
                            s7 = peg$currPos;
                            peg$silentFails++;
                            s8 = peg$parseidentifierChar();
                            peg$silentFails--;
                            if (s8 === peg$FAILED) {
                                s7 = peg$c13;
                            } else {
                                peg$currPos = s7;
                                s7 = peg$c0;
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_and();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c224(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c220) {
                            s5 = peg$c220;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c221); }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c222) {
                                s6 = peg$c222;
                                peg$currPos += 2;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c223); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos;
                                peg$silentFails++;
                                s8 = peg$parseidentifierChar();
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                    s7 = peg$c13;
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$c0;
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_and();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c224(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c225(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_and() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            var key    = peg$currPos * 120 + 55,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_or_bit();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c226) {
                        s5 = peg$c226;
                        peg$currPos += 2;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c227); }
                    }
                    if (s5 === peg$FAILED) {
                        s5 = peg$currPos;
                        if (input.substr(peg$currPos, 3) === peg$c228) {
                            s6 = peg$c228;
                            peg$currPos += 3;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c229); }
                        }
                        if (s6 !== peg$FAILED) {
                            s7 = peg$currPos;
                            peg$silentFails++;
                            s8 = peg$parseidentifierChar();
                            peg$silentFails--;
                            if (s8 === peg$FAILED) {
                                s7 = peg$c13;
                            } else {
                                peg$currPos = s7;
                                s7 = peg$c0;
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_or_bit();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c230(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c226) {
                            s5 = peg$c226;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c227); }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.substr(peg$currPos, 3) === peg$c228) {
                                s6 = peg$c228;
                                peg$currPos += 3;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c229); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos;
                                peg$silentFails++;
                                s8 = peg$parseidentifierChar();
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                    s7 = peg$c13;
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$c0;
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_or_bit();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c230(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c231(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_or_bit() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            var key    = peg$currPos * 120 + 56,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_xor_bit();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 124) {
                        s5 = peg$c232;
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c233); }
                    }
                    if (s5 === peg$FAILED) {
                        s5 = peg$currPos;
                        if (input.substr(peg$currPos, 5) === peg$c234) {
                            s6 = peg$c234;
                            peg$currPos += 5;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c235); }
                        }
                        if (s6 !== peg$FAILED) {
                            s7 = peg$currPos;
                            peg$silentFails++;
                            s8 = peg$parseidentifierChar();
                            peg$silentFails--;
                            if (s8 === peg$FAILED) {
                                s7 = peg$c13;
                            } else {
                                peg$currPos = s7;
                                s7 = peg$c0;
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_xor_bit();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c236(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 124) {
                            s5 = peg$c232;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c233); }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.substr(peg$currPos, 5) === peg$c234) {
                                s6 = peg$c234;
                                peg$currPos += 5;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c235); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos;
                                peg$silentFails++;
                                s8 = peg$parseidentifierChar();
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                    s7 = peg$c13;
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$c0;
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_xor_bit();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c236(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c231(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_xor_bit() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 57,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_and_bit();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 94) {
                        s5 = peg$c237;
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c238); }
                    }
                    if (s5 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c239) {
                            s5 = peg$c239;
                            peg$currPos += 3;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c240); }
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_and_bit();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c241(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 94) {
                            s5 = peg$c237;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c238); }
                        }
                        if (s5 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c239) {
                                s5 = peg$c239;
                                peg$currPos += 3;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c240); }
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_and_bit();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c241(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c231(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_and_bit() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            var key    = peg$currPos * 120 + 58,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_eq();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    s5 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 38) {
                        s6 = peg$c159;
                        peg$currPos++;
                    } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c160); }
                    }
                    if (s6 !== peg$FAILED) {
                        s7 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 38) {
                            s8 = peg$c159;
                            peg$currPos++;
                        } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c160); }
                        }
                        peg$silentFails--;
                        if (s8 === peg$FAILED) {
                            s7 = peg$c13;
                        } else {
                            peg$currPos = s7;
                            s7 = peg$c0;
                        }
                        if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    } else {
                        peg$currPos = s5;
                        s5 = peg$c0;
                    }
                    if (s5 === peg$FAILED) {
                        s5 = peg$currPos;
                        if (input.substr(peg$currPos, 6) === peg$c242) {
                            s6 = peg$c242;
                            peg$currPos += 6;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c243); }
                        }
                        if (s6 !== peg$FAILED) {
                            s7 = peg$currPos;
                            peg$silentFails++;
                            s8 = peg$parseidentifierChar();
                            peg$silentFails--;
                            if (s8 === peg$FAILED) {
                                s7 = peg$c13;
                            } else {
                                peg$currPos = s7;
                                s7 = peg$c0;
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_eq();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c244(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 38) {
                            s6 = peg$c159;
                            peg$currPos++;
                        } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c160); }
                        }
                        if (s6 !== peg$FAILED) {
                            s7 = peg$currPos;
                            peg$silentFails++;
                            if (input.charCodeAt(peg$currPos) === 38) {
                                s8 = peg$c159;
                                peg$currPos++;
                            } else {
                                s8 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c160); }
                            }
                            peg$silentFails--;
                            if (s8 === peg$FAILED) {
                                s7 = peg$c13;
                            } else {
                                peg$currPos = s7;
                                s7 = peg$c0;
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$c0;
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.substr(peg$currPos, 6) === peg$c242) {
                                s6 = peg$c242;
                                peg$currPos += 6;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c243); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos;
                                peg$silentFails++;
                                s8 = peg$parseidentifierChar();
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                    s7 = peg$c13;
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$c0;
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_eq();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c244(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c231(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_eq() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            var key    = peg$currPos * 120 + 59,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_rel();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c245) {
                        s5 = peg$c245;
                        peg$currPos += 2;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c246); }
                    }
                    if (s5 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c247) {
                            s5 = peg$c247;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c248); }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$currPos;
                            if (input.substr(peg$currPos, 6) === peg$c249) {
                                s6 = peg$c249;
                                peg$currPos += 6;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c250); }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$currPos;
                                peg$silentFails++;
                                s8 = peg$parseidentifierChar();
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                    s7 = peg$c13;
                                } else {
                                    peg$currPos = s7;
                                    s7 = peg$c0;
                                }
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s5;
                                    s6 = peg$c251();
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$c0;
                            }
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_rel();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c183(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c245) {
                            s5 = peg$c245;
                            peg$currPos += 2;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c246); }
                        }
                        if (s5 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c247) {
                                s5 = peg$c247;
                                peg$currPos += 2;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c248); }
                            }
                            if (s5 === peg$FAILED) {
                                s5 = peg$currPos;
                                if (input.substr(peg$currPos, 6) === peg$c249) {
                                    s6 = peg$c249;
                                    peg$currPos += 6;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c250); }
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$currPos;
                                    peg$silentFails++;
                                    s8 = peg$parseidentifierChar();
                                    peg$silentFails--;
                                    if (s8 === peg$FAILED) {
                                        s7 = peg$c13;
                                    } else {
                                        peg$currPos = s7;
                                        s7 = peg$c0;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$reportedPos = s5;
                                        s6 = peg$c251();
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$c0;
                                }
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_rel();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c183(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c231(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_rel() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 60,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_shift();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseop_rel();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_shift();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c183(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseop_rel();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_shift();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c183(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c225(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseop_rel() {
            var s0;

            var key    = peg$currPos * 120 + 61,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 2) === peg$c252) {
                s0 = peg$c252;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c253); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c254) {
                    s0 = peg$c254;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c255); }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 60) {
                        s0 = peg$c256;
                        peg$currPos++;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c257); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s0 = peg$c258;
                            peg$currPos++;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c259); }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_shift() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 62,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_add();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseop_shift();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_add();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c183(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseop_shift();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_add();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c183(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c225(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseop_shift() {
            var s0;

            var key    = peg$currPos * 120 + 63,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 2) === peg$c260) {
                s0 = peg$c260;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c261); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c262) {
                    s0 = peg$c262;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c263); }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_add() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 64,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_mult();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseop_add();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_mult();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c183(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseop_add();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_mult();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c183(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c225(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseop_add() {
            var s0;

            var key    = peg$currPos * 120 + 65,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 43) {
                s0 = peg$c264;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c265); }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                    s0 = peg$c266;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c267); }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_mult() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 66,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_pm();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseop_mult();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_pm();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c183(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseop_mult();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_pm();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c183(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c231(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseop_mult() {
            var s0;

            var key    = peg$currPos * 120 + 67,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 42) {
                s0 = peg$c156;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c157); }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                    s0 = peg$c268;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c269); }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 37) {
                        s0 = peg$c270;
                        peg$currPos++;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c271); }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_pm() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 68,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_cast();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseop_pm();
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_cast();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c183(s5, s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseop_pm();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_cast();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c183(s5, s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c231(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseop_pm() {
            var s0;

            var key    = peg$currPos * 120 + 69,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 2) === peg$c272) {
                s0 = peg$c272;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c273); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c274) {
                    s0 = peg$c274;
                    peg$currPos += 3;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c275); }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_cast() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 70,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c42;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsetype_id();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s5 = peg$c44;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c45); }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseexp_cast();
                                    if (s7 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c276(s3, s7);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseexp_unary();
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_unary() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 71,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c277) {
                s1 = peg$c277;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c278); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexp_unary();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c279(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c280) {
                    s1 = peg$c280;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c281); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp_unary();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c279(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseop_unary();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseexp_cast();
                            if (s3 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c282(s1, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 6) === peg$c283) {
                            s1 = peg$c283;
                            peg$currPos += 6;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c284); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parseexp_unary();
                                if (s3 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c285(s1, s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 6) === peg$c283) {
                                s1 = peg$c283;
                                peg$currPos += 6;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c284); }
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parsews();
                                if (s2 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 40) {
                                        s3 = peg$c42;
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                                    }
                                    if (s3 !== peg$FAILED) {
                                        s4 = peg$parsews();
                                        if (s4 !== peg$FAILED) {
                                            s5 = peg$parsesimple_type_name();
                                            if (s5 !== peg$FAILED) {
                                                s6 = peg$parsews();
                                                if (s6 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                        s7 = peg$c44;
                                                        peg$currPos++;
                                                    } else {
                                                        s7 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                                    }
                                                    if (s7 !== peg$FAILED) {
                                                        peg$reportedPos = s0;
                                                        s1 = peg$c285(s1, s5);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseexp_new();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseexp_delete();
                                }
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseop_unary() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 72,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 42) {
                s1 = peg$c156;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c157); }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c286();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 38) {
                    s1 = peg$c159;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c160); }
                }
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c287();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 43) {
                        s1 = peg$c264;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c265); }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c288();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 45) {
                            s1 = peg$c266;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c267); }
                        }
                        if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c289();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 33) {
                                s1 = peg$c290;
                                peg$currPos++;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c291); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c292();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 3) === peg$c293) {
                                    s1 = peg$c293;
                                    peg$currPos += 3;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c294); }
                                }
                                if (s1 !== peg$FAILED) {
                                    s2 = peg$currPos;
                                    peg$silentFails++;
                                    s3 = peg$parseidentifierChar();
                                    peg$silentFails--;
                                    if (s3 === peg$FAILED) {
                                        s2 = peg$c13;
                                    } else {
                                        peg$currPos = s2;
                                        s2 = peg$c0;
                                    }
                                    if (s2 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c292();
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.charCodeAt(peg$currPos) === 126) {
                                        s1 = peg$c79;
                                        peg$currPos++;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c80); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c295();
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 5) === peg$c296) {
                                            s1 = peg$c296;
                                            peg$currPos += 5;
                                        } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c297); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c295();
                                        }
                                        s0 = s1;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_new() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

            var key    = peg$currPos * 120 + 73,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c298) {
                s1 = peg$c298;
                peg$currPos += 3;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c299); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseWS();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsenew_type_id();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsenew_initializer();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c30;
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c300(s3, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c298) {
                    s1 = peg$c298;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c299); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c42;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c43); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsetype_id();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c44;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsews();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsenew_initializer();
                                                if (s9 === peg$FAILED) {
                                                    s9 = peg$c30;
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c301(s5, s9);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsenew_type_id() {
            var s0, s1, s2, s3, s4;

            var key    = peg$currPos * 120 + 74,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsetype_specifiers();
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parsews();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parsenew_declarator();
                    if (s4 !== peg$FAILED) {
                        peg$reportedPos = s2;
                        s3 = peg$c302(s4);
                        s2 = s3;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$c30;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c303(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsenew_declarator() {
            var s0, s1;

            var key    = peg$currPos * 120 + 75,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parse_new_declarator();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c304(s1);
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parse_new_declarator() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 76,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 42) {
                s1 = peg$c156;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c157); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsecv_qualifier();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c30;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_new_declarator();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c30;
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c158(s3, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 38) {
                    s1 = peg$c159;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c160); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsecv_qualifier();
                        if (s3 === peg$FAILED) {
                            s3 = peg$c30;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_new_declarator();
                                if (s5 === peg$FAILED) {
                                    s5 = peg$c30;
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c161(s3, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsenew_declarator_postfixes();
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c305(s1);
                    }
                    s0 = s1;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsenew_declarator_postfixes() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 77,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = [];
            s1 = peg$currPos;
            s2 = peg$parsews();
            if (s2 !== peg$FAILED) {
                s3 = peg$parsenew_declarator_postfix();
                if (s3 !== peg$FAILED) {
                    peg$reportedPos = s1;
                    s2 = peg$c306(s3);
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$currPos;
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsenew_declarator_postfix();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s1;
                            s2 = peg$c306(s3);
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                }
            } else {
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsenew_declarator_postfix() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 78,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c165;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c166); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexp_assn();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c30;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 93) {
                                s5 = peg$c167;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c168); }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c169(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsenew_initializer() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 79,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c42;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexp_list();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c30;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s5 = peg$c44;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c45); }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c307(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_delete() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 80,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c308) {
                s1 = peg$c308;
                peg$currPos += 6;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c309); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseWS();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexp_cast();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c310(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c308) {
                    s1 = peg$c308;
                    peg$currPos += 6;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c309); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 91) {
                            s3 = peg$c165;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c166); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 93) {
                                    s5 = peg$c167;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c168); }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseWS();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseexp_cast();
                                        if (s7 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c311(s7);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseexp_postfix();
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_postfix() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

            var key    = peg$currPos * 120 + 81,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 11) === peg$c312) {
                s1 = peg$c312;
                peg$currPos += 11;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c313); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 60) {
                        s3 = peg$c256;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c257); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsesimple_type_name();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 62) {
                                        s7 = peg$c258;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c259); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsews();
                                        if (s8 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 40) {
                                                s9 = peg$c42;
                                                peg$currPos++;
                                            } else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c43); }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parsews();
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parseexp_cast();
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parsews();
                                                        if (s12 !== peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 41) {
                                                                s13 = peg$c44;
                                                                peg$currPos++;
                                                            } else {
                                                                s13 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                                            }
                                                            if (s13 !== peg$FAILED) {
                                                                peg$reportedPos = s0;
                                                                s1 = peg$c314(s5, s11);
                                                                s0 = s1;
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 12) === peg$c315) {
                    s1 = peg$c315;
                    peg$currPos += 12;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c316); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 60) {
                            s3 = peg$c256;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c257); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsesimple_type_name();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsews();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 62) {
                                            s7 = peg$c258;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c259); }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsews();
                                            if (s8 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 40) {
                                                    s9 = peg$c42;
                                                    peg$currPos++;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c43); }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parsews();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parseexp_cast();
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parsews();
                                                            if (s12 !== peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                                    s13 = peg$c44;
                                                                    peg$currPos++;
                                                                } else {
                                                                    s13 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                                                }
                                                                if (s13 !== peg$FAILED) {
                                                                    peg$reportedPos = s0;
                                                                    s1 = peg$c317(s5, s11);
                                                                    s0 = s1;
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 16) === peg$c318) {
                        s1 = peg$c318;
                        peg$currPos += 16;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c319); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 60) {
                                s3 = peg$c256;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c257); }
                            }
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parsesimple_type_name();
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parsews();
                                        if (s6 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 62) {
                                                s7 = peg$c258;
                                                peg$currPos++;
                                            } else {
                                                s7 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c259); }
                                            }
                                            if (s7 !== peg$FAILED) {
                                                s8 = peg$parsews();
                                                if (s8 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 40) {
                                                        s9 = peg$c42;
                                                        peg$currPos++;
                                                    } else {
                                                        s9 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                                                    }
                                                    if (s9 !== peg$FAILED) {
                                                        s10 = peg$parsews();
                                                        if (s10 !== peg$FAILED) {
                                                            s11 = peg$parseexp_cast();
                                                            if (s11 !== peg$FAILED) {
                                                                s12 = peg$parsews();
                                                                if (s12 !== peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                                        s13 = peg$c44;
                                                                        peg$currPos++;
                                                                    } else {
                                                                        s13 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                                                    }
                                                                    if (s13 !== peg$FAILED) {
                                                                        peg$reportedPos = s0;
                                                                        s1 = peg$c320(s5, s11);
                                                                        s0 = s1;
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 10) === peg$c321) {
                            s1 = peg$c321;
                            peg$currPos += 10;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c322); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 60) {
                                    s3 = peg$c256;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c257); }
                                }
                                if (s3 !== peg$FAILED) {
                                    s4 = peg$parsews();
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parsesimple_type_name();
                                        if (s5 !== peg$FAILED) {
                                            s6 = peg$parsews();
                                            if (s6 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 62) {
                                                    s7 = peg$c258;
                                                    peg$currPos++;
                                                } else {
                                                    s7 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c259); }
                                                }
                                                if (s7 !== peg$FAILED) {
                                                    s8 = peg$parsews();
                                                    if (s8 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 40) {
                                                            s9 = peg$c42;
                                                            peg$currPos++;
                                                        } else {
                                                            s9 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c43); }
                                                        }
                                                        if (s9 !== peg$FAILED) {
                                                            s10 = peg$parsews();
                                                            if (s10 !== peg$FAILED) {
                                                                s11 = peg$parseexp_cast();
                                                                if (s11 !== peg$FAILED) {
                                                                    s12 = peg$parsews();
                                                                    if (s12 !== peg$FAILED) {
                                                                        if (input.charCodeAt(peg$currPos) === 41) {
                                                                            s13 = peg$c44;
                                                                            peg$currPos++;
                                                                        } else {
                                                                            s13 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                                                        }
                                                                        if (s13 !== peg$FAILED) {
                                                                            peg$reportedPos = s0;
                                                                            s1 = peg$c323(s5, s11);
                                                                            s0 = s1;
                                                                        } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c0;
                                                                        }
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseexp_construct();
                            if (s1 === peg$FAILED) {
                                s1 = peg$parseexp_primary();
                            }
                            if (s1 !== peg$FAILED) {
                                s2 = [];
                                s3 = peg$currPos;
                                s4 = peg$parsews();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parseop_postfix();
                                    if (s5 !== peg$FAILED) {
                                        peg$reportedPos = s3;
                                        s4 = peg$c324(s5);
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                                while (s3 !== peg$FAILED) {
                                    s2.push(s3);
                                    s3 = peg$currPos;
                                    s4 = peg$parsews();
                                    if (s4 !== peg$FAILED) {
                                        s5 = peg$parseop_postfix();
                                        if (s5 !== peg$FAILED) {
                                            peg$reportedPos = s3;
                                            s4 = peg$c324(s5);
                                            s3 = s4;
                                        } else {
                                            peg$currPos = s3;
                                            s3 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$c0;
                                    }
                                }
                                if (s2 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c325(s1, s2);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseop_postfix() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 82,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c165;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c166); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexpression();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 93) {
                                s5 = peg$c167;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c168); }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c326(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c42;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c43); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseexp_list();
                        if (s3 === peg$FAILED) {
                            s3 = peg$c30;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c44;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c327(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s1 = peg$c328;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c329); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsename();
                            if (s3 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c330(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c331) {
                            s1 = peg$c331;
                            peg$currPos += 2;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c332); }
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parsename();
                                if (s3 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c333(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c277) {
                                s1 = peg$c277;
                                peg$currPos += 2;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c278); }
                            }
                            if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c334();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 2) === peg$c280) {
                                    s1 = peg$c280;
                                    peg$currPos += 2;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c281); }
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c335();
                                }
                                s0 = s1;
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_construct() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 83,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsesimple_type_name();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c42;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c43); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseexp_list();
                            if (s5 === peg$FAILED) {
                                s5 = peg$c30;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsews();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s7 = peg$c44;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c45); }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c336(s1, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_list() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 84,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseexp_assn();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c71;
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseexp_assn();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c143(s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c71;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseexp_assn();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c143(s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c179(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_primary() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 85,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c42;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexpression();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s5 = peg$c44;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c45); }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c337(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseliteral();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 4) === peg$c338) {
                        s1 = peg$c338;
                        peg$currPos += 4;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c339); }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$currPos;
                        peg$silentFails++;
                        s3 = peg$parseidentifierChar();
                        peg$silentFails--;
                        if (s3 === peg$FAILED) {
                            s2 = peg$c13;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                        if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c340();
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseexp_id();
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexp_id() {
            var s0, s1;

            var key    = peg$currPos * 120 + 86,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsequalified_id();
            if (s1 === peg$FAILED) {
                s1 = peg$parsename();
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c341(s1);
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsequalified_id() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 87,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsenested_name_specifier();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsename();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c342(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsenested_name_specifier() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 88,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = [];
            s1 = peg$currPos;
            s2 = peg$parsetype_name_id();
            if (s2 === peg$FAILED) {
                s2 = peg$parseidentifier();
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parsews();
                if (s3 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c343) {
                        s4 = peg$c343;
                        peg$currPos += 2;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c344); }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsews();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s1;
                            s2 = peg$c302(s2);
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$currPos;
                    s2 = peg$parsetype_name_id();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parseidentifier();
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c343) {
                                s4 = peg$c343;
                                peg$currPos += 2;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c344); }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsews();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s1;
                                    s2 = peg$c302(s2);
                                    s1 = s2;
                                } else {
                                    peg$currPos = s1;
                                    s1 = peg$c0;
                                }
                            } else {
                                peg$currPos = s1;
                                s1 = peg$c0;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                }
            } else {
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c343) {
                    s1 = peg$c343;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c344); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c345();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsetype_name_id() {
            var s0, s1;

            var key    = peg$currPos * 120 + 89,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsesimple_type_name();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c346(s1);
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsename() {
            var s0;

            var key    = peg$currPos * 120 + 90,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parseoperator_function_id();
            if (s0 === peg$FAILED) {
                s0 = peg$parseidentifier();
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseoperator_function_id() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 91,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 8) === peg$c347) {
                s1 = peg$c347;
                peg$currPos += 8;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c348); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseoverloadable_op();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c349(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseoverloadable_op() {
            var s0;

            var key    = peg$currPos * 120 + 92,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 5) === peg$c350) {
                s0 = peg$c350;
                peg$currPos += 5;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c351); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 8) === peg$c352) {
                    s0 = peg$c352;
                    peg$currPos += 8;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c353); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c298) {
                        s0 = peg$c298;
                        peg$currPos += 3;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c299); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c308) {
                            s0 = peg$c308;
                            peg$currPos += 6;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c309); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c274) {
                                s0 = peg$c274;
                                peg$currPos += 3;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c275); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c197) {
                                    s0 = peg$c197;
                                    peg$currPos += 3;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c198); }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 3) === peg$c199) {
                                        s0 = peg$c199;
                                        peg$currPos += 3;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c200); }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c193) {
                                            s0 = peg$c193;
                                            peg$currPos += 2;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c194); }
                                        }
                                        if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c195) {
                                                s0 = peg$c195;
                                                peg$currPos += 2;
                                            } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c196); }
                                            }
                                            if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c187) {
                                                    s0 = peg$c187;
                                                    peg$currPos += 2;
                                                } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c188); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 2) === peg$c189) {
                                                        s0 = peg$c189;
                                                        peg$currPos += 2;
                                                    } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c190); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c191) {
                                                            s0 = peg$c191;
                                                            peg$currPos += 2;
                                                        } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c192); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 2) === peg$c206) {
                                                                s0 = peg$c206;
                                                                peg$currPos += 2;
                                                            } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c207); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 2) === peg$c201) {
                                                                    s0 = peg$c201;
                                                                    peg$currPos += 2;
                                                                } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c202); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 2) === peg$c211) {
                                                                        s0 = peg$c211;
                                                                        peg$currPos += 2;
                                                                    } else {
                                                                        s0 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c212); }
                                                                    }
                                                                    if (s0 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 2) === peg$c260) {
                                                                            s0 = peg$c260;
                                                                            peg$currPos += 2;
                                                                        } else {
                                                                            s0 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c261); }
                                                                        }
                                                                        if (s0 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 2) === peg$c262) {
                                                                                s0 = peg$c262;
                                                                                peg$currPos += 2;
                                                                            } else {
                                                                                s0 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c263); }
                                                                            }
                                                                            if (s0 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 2) === peg$c245) {
                                                                                    s0 = peg$c245;
                                                                                    peg$currPos += 2;
                                                                                } else {
                                                                                    s0 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c246); }
                                                                                }
                                                                                if (s0 === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 2) === peg$c247) {
                                                                                        s0 = peg$c247;
                                                                                        peg$currPos += 2;
                                                                                    } else {
                                                                                        s0 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c248); }
                                                                                    }
                                                                                    if (s0 === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 2) === peg$c252) {
                                                                                            s0 = peg$c252;
                                                                                            peg$currPos += 2;
                                                                                        } else {
                                                                                            s0 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c253); }
                                                                                        }
                                                                                        if (s0 === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 2) === peg$c254) {
                                                                                                s0 = peg$c254;
                                                                                                peg$currPos += 2;
                                                                                            } else {
                                                                                                s0 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c255); }
                                                                                            }
                                                                                            if (s0 === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 2) === peg$c226) {
                                                                                                    s0 = peg$c226;
                                                                                                    peg$currPos += 2;
                                                                                                } else {
                                                                                                    s0 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c227); }
                                                                                                }
                                                                                                if (s0 === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 2) === peg$c220) {
                                                                                                        s0 = peg$c220;
                                                                                                        peg$currPos += 2;
                                                                                                    } else {
                                                                                                        s0 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c221); }
                                                                                                    }
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 2) === peg$c277) {
                                                                                                            s0 = peg$c277;
                                                                                                            peg$currPos += 2;
                                                                                                        } else {
                                                                                                            s0 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c278); }
                                                                                                        }
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 2) === peg$c280) {
                                                                                                                s0 = peg$c280;
                                                                                                                peg$currPos += 2;
                                                                                                            } else {
                                                                                                                s0 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c281); }
                                                                                                            }
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 2) === peg$c331) {
                                                                                                                    s0 = peg$c331;
                                                                                                                    peg$currPos += 2;
                                                                                                                } else {
                                                                                                                    s0 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c332); }
                                                                                                                }
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 2) === peg$c354) {
                                                                                                                        s0 = peg$c354;
                                                                                                                        peg$currPos += 2;
                                                                                                                    } else {
                                                                                                                        s0 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c355); }
                                                                                                                    }
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                        if (input.substr(peg$currPos, 2) === peg$c356) {
                                                                                                                            s0 = peg$c356;
                                                                                                                            peg$currPos += 2;
                                                                                                                        } else {
                                                                                                                            s0 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c357); }
                                                                                                                        }
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                            if (input.charCodeAt(peg$currPos) === 43) {
                                                                                                                                s0 = peg$c264;
                                                                                                                                peg$currPos++;
                                                                                                                            } else {
                                                                                                                                s0 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c265); }
                                                                                                                            }
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                if (input.charCodeAt(peg$currPos) === 45) {
                                                                                                                                    s0 = peg$c266;
                                                                                                                                    peg$currPos++;
                                                                                                                                } else {
                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c267); }
                                                                                                                                }
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                    if (input.charCodeAt(peg$currPos) === 42) {
                                                                                                                                        s0 = peg$c156;
                                                                                                                                        peg$currPos++;
                                                                                                                                    } else {
                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c157); }
                                                                                                                                    }
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                        if (input.charCodeAt(peg$currPos) === 47) {
                                                                                                                                            s0 = peg$c268;
                                                                                                                                            peg$currPos++;
                                                                                                                                        } else {
                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c269); }
                                                                                                                                        }
                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                            if (input.charCodeAt(peg$currPos) === 37) {
                                                                                                                                                s0 = peg$c270;
                                                                                                                                                peg$currPos++;
                                                                                                                                            } else {
                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c271); }
                                                                                                                                            }
                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                if (input.charCodeAt(peg$currPos) === 94) {
                                                                                                                                                    s0 = peg$c237;
                                                                                                                                                    peg$currPos++;
                                                                                                                                                } else {
                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c238); }
                                                                                                                                                }
                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 38) {
                                                                                                                                                        s0 = peg$c159;
                                                                                                                                                        peg$currPos++;
                                                                                                                                                    } else {
                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c160); }
                                                                                                                                                    }
                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 124) {
                                                                                                                                                            s0 = peg$c232;
                                                                                                                                                            peg$currPos++;
                                                                                                                                                        } else {
                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c233); }
                                                                                                                                                        }
                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 126) {
                                                                                                                                                                s0 = peg$c79;
                                                                                                                                                                peg$currPos++;
                                                                                                                                                            } else {
                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c80); }
                                                                                                                                                            }
                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 33) {
                                                                                                                                                                    s0 = peg$c290;
                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                } else {
                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c291); }
                                                                                                                                                                }
                                                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                                                    if (input.charCodeAt(peg$currPos) === 61) {
                                                                                                                                                                        s0 = peg$c145;
                                                                                                                                                                        peg$currPos++;
                                                                                                                                                                    } else {
                                                                                                                                                                        s0 = peg$FAILED;
                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c146); }
                                                                                                                                                                    }
                                                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                                                        if (input.charCodeAt(peg$currPos) === 60) {
                                                                                                                                                                            s0 = peg$c256;
                                                                                                                                                                            peg$currPos++;
                                                                                                                                                                        } else {
                                                                                                                                                                            s0 = peg$FAILED;
                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c257); }
                                                                                                                                                                        }
                                                                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                                                                            if (input.charCodeAt(peg$currPos) === 62) {
                                                                                                                                                                                s0 = peg$c258;
                                                                                                                                                                                peg$currPos++;
                                                                                                                                                                            } else {
                                                                                                                                                                                s0 = peg$FAILED;
                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c259); }
                                                                                                                                                                            }
                                                                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                                                                                if (input.charCodeAt(peg$currPos) === 44) {
                                                                                                                                                                                    s0 = peg$c71;
                                                                                                                                                                                    peg$currPos++;
                                                                                                                                                                                } else {
                                                                                                                                                                                    s0 = peg$FAILED;
                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c72); }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseunoverloadable_op() {
            var s0;

            var key    = peg$currPos * 120 + 93,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 46) {
                s0 = peg$c328;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c329); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c272) {
                    s0 = peg$c272;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c273); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c343) {
                        s0 = peg$c343;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c344); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c358) {
                            s0 = peg$c358;
                            peg$currPos += 2;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c359); }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseliteral() {
            var s0, s1;

            var key    = peg$currPos * 120 + 94,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseliteral_float();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c360(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseliteral_int();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c361(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseliteral_char();
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c362(s1);
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseliteral_string();
                        if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c363(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseliteral_boolean();
                            if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c364(s1);
                            }
                            s0 = s1;
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseliteral_int() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 95,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
                s1 = peg$c266;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c267); }
            }
            if (s1 === peg$FAILED) {
                s1 = peg$c30;
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c365.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c366); }
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c365.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c366); }
                        }
                    }
                } else {
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c367(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseliteral_float() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 96,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
                s1 = peg$c266;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c267); }
            }
            if (s1 === peg$FAILED) {
                s1 = peg$c30;
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c368.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c369); }
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c368.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c369); }
                        }
                    }
                } else {
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = peg$currPos;
                    s3 = peg$c370(s1, s2);
                    if (s3) {
                        s3 = peg$c13;
                    } else {
                        s3 = peg$c0;
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c371(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseliteral_char() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 97,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c372;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c373); }
            }
            if (s1 !== peg$FAILED) {
                if (peg$c374.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c375); }
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$parseescape();
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                        s3 = peg$c372;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c373); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c376(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseliteral_string() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 98,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
                s1 = peg$c377;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c378); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c379.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c380); }
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$parseescape();
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c379.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c380); }
                    }
                    if (s3 === peg$FAILED) {
                        s3 = peg$parseescape();
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                        s3 = peg$c377;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c378); }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c381(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseliteral_boolean() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 99,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c382) {
                s1 = peg$c382;
                peg$currPos += 4;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c383); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parseidentifierChar();
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                    s2 = peg$c13;
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c384();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c385) {
                    s1 = peg$c385;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c386); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$parseidentifierChar();
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                        s2 = peg$c13;
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c387();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseescape() {
            var s0;

            var key    = peg$currPos * 120 + 100,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parsesimple_escape();
            if (s0 === peg$FAILED) {
                s0 = peg$parseoctal_escape();
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesimple_escape() {
            var s0;

            var key    = peg$currPos * 120 + 101,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 2) === peg$c388) {
                s0 = peg$c388;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c389); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c390) {
                    s0 = peg$c390;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c391); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c392) {
                        s0 = peg$c392;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c393); }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c394) {
                            s0 = peg$c394;
                            peg$currPos += 2;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c395); }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c396) {
                                s0 = peg$c396;
                                peg$currPos += 2;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c397); }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c398) {
                                    s0 = peg$c398;
                                    peg$currPos += 2;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c399); }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c400) {
                                        s0 = peg$c400;
                                        peg$currPos += 2;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c401); }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c402) {
                                            s0 = peg$c402;
                                            peg$currPos += 2;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c403); }
                                        }
                                        if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c404) {
                                                s0 = peg$c404;
                                                peg$currPos += 2;
                                            } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c405); }
                                            }
                                            if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c406) {
                                                    s0 = peg$c406;
                                                    peg$currPos += 2;
                                                } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c407); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 2) === peg$c408) {
                                                        s0 = peg$c408;
                                                        peg$currPos += 2;
                                                    } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c409); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c410) {
                                                            s0 = peg$c410;
                                                            peg$currPos += 2;
                                                        } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c411); }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseoctal_escape() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 102,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (peg$c412.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c413); }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (peg$c412.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c413); }
                }
                if (s1 !== peg$FAILED) {
                    if (peg$c412.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c413); }
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (peg$c412.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c413); }
                    }
                    if (s1 !== peg$FAILED) {
                        if (peg$c412.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c413); }
                        }
                        if (s2 !== peg$FAILED) {
                            if (peg$c412.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c413); }
                            }
                            if (s3 !== peg$FAILED) {
                                s1 = [s1, s2, s3];
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseidentifier() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 103,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseidentifierFirstChar();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseidentifierChar();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseidentifierChar();
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c415(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c414); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseidentifierChar() {
            var s0;

            var key    = peg$currPos * 120 + 104,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (peg$c416.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c417); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseidentifierFirstChar() {
            var s0;

            var key    = peg$currPos * 120 + 105,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (peg$c418.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c419); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsews() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 106,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            if (peg$c421.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c422); }
            }
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$c421.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c422); }
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsecomment();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = [];
                if (peg$c421.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c422); }
                }
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    if (peg$c421.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c422); }
                    }
                }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c420); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseWS() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 107,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parsecomment();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseWS();
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                if (peg$c421.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c422); }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c421.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c422); }
                        }
                    }
                } else {
                    s1 = peg$c0;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsecomment();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsews();
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = [];
                    if (peg$c421.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c422); }
                    }
                    if (s1 !== peg$FAILED) {
                        while (s1 !== peg$FAILED) {
                            s0.push(s1);
                            if (peg$c421.test(input.charAt(peg$currPos))) {
                                s1 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c422); }
                            }
                        }
                    } else {
                        s0 = peg$c0;
                    }
                }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c423); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseclass_specifier() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            var key    = peg$currPos * 120 + 108,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseclass_head();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = peg$currPos;
                s2 = peg$c424(s1);
                if (s2) {
                    s2 = peg$c0;
                } else {
                    s2 = peg$c13;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 123) {
                            s4 = peg$c34;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c35); }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsews();
                            if (s5 !== peg$FAILED) {
                                s6 = [];
                                s7 = peg$parsemember_specification();
                                while (s7 !== peg$FAILED) {
                                    s6.push(s7);
                                    s7 = peg$parsemember_specification();
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsews();
                                    if (s7 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 125) {
                                            s8 = peg$c37;
                                            peg$currPos++;
                                        } else {
                                            s8 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c38); }
                                        }
                                        if (s8 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c425(s1, s6);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseclass_head() {
            var s0, s1, s2, s3, s4, s5, s6;

            var key    = peg$currPos * 120 + 109,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseclass_key();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseWS();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseidentifier();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$currPos;
                        s5 = peg$parseWS();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsebase_clause();
                            if (s6 !== peg$FAILED) {
                                peg$reportedPos = s4;
                                s5 = peg$c426(s6);
                                s4 = s5;
                            } else {
                                peg$currPos = s4;
                                s4 = peg$c0;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$c0;
                        }
                        if (s4 === peg$FAILED) {
                            s4 = peg$c30;
                        }
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c427(s1, s3, s4);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseclass_key() {
            var s0;

            var key    = peg$currPos * 120 + 110,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 5) === peg$c428) {
                s0 = peg$c428;
                peg$currPos += 5;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c429); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c430) {
                    s0 = peg$c430;
                    peg$currPos += 6;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c431); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c432) {
                        s0 = peg$c432;
                        peg$currPos += 5;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c433); }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsemember_specification() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8;

            var key    = peg$currPos * 120 + 111,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$currPos;
            s3 = peg$parsemember_declaration();
            if (s3 !== peg$FAILED) {
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c434(s3);
                    s2 = s3;
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
            } else {
                peg$currPos = s2;
                s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$currPos;
                    s3 = peg$parsemember_declaration();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s2;
                            s3 = peg$c434(s3);
                            s2 = s3;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c435(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseaccess_specifier();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                            s3 = peg$c21;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsews();
                            if (s4 !== peg$FAILED) {
                                s5 = [];
                                s6 = peg$currPos;
                                s7 = peg$parsemember_declaration();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parsews();
                                    if (s8 !== peg$FAILED) {
                                        peg$reportedPos = s6;
                                        s7 = peg$c434(s7);
                                        s6 = s7;
                                    } else {
                                        peg$currPos = s6;
                                        s6 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s6;
                                    s6 = peg$c0;
                                }
                                while (s6 !== peg$FAILED) {
                                    s5.push(s6);
                                    s6 = peg$currPos;
                                    s7 = peg$parsemember_declaration();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsews();
                                        if (s8 !== peg$FAILED) {
                                            peg$reportedPos = s6;
                                            s7 = peg$c434(s7);
                                            s6 = s7;
                                        } else {
                                            peg$currPos = s6;
                                            s6 = peg$c0;
                                        }
                                    } else {
                                        peg$currPos = s6;
                                        s6 = peg$c0;
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c436(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseaccess_specifier() {
            var s0;

            var key    = peg$currPos * 120 + 112,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 7) === peg$c437) {
                s0 = peg$c437;
                peg$currPos += 7;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c438); }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 9) === peg$c439) {
                    s0 = peg$c439;
                    peg$currPos += 9;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c440); }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c441) {
                        s0 = peg$c441;
                        peg$currPos += 6;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c442); }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsemember_declaration() {
            var s0, s1, s2, s3, s4, s5, s6;

            var key    = peg$currPos * 120 + 113,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsedecl_specifiers();
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                peg$silentFails++;
                s3 = peg$parseidentifier();
                peg$silentFails--;
                if (s3 === peg$FAILED) {
                    s2 = peg$c13;
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsews();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsemember_declarator_list();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsews();
                            if (s5 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 59) {
                                    s6 = peg$c31;
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                }
                                if (s6 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c443(s1, s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseconstructor_definition();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                            s3 = peg$c31;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c32); }
                        }
                        if (s3 === peg$FAILED) {
                            s3 = peg$c30;
                        }
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c444(s1);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsedestructor_definition();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsews();
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 59) {
                                s3 = peg$c31;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c32); }
                            }
                            if (s3 === peg$FAILED) {
                                s3 = peg$c30;
                            }
                            if (s3 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c445(s1);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsefunction_definition();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parsews();
                            if (s2 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 59) {
                                    s3 = peg$c31;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                }
                                if (s3 === peg$FAILED) {
                                    s3 = peg$c30;
                                }
                                if (s3 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c446(s1);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsemember_declarator_list() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 114,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsemember_declarator();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c71;
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parsemember_declarator();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c73(s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c71;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parsemember_declarator();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c73(s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c74(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsemember_declarator() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 115,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsedeclarator();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s3 = peg$c145;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c146); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsews();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 48) {
                                s5 = peg$c447;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c448); }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c449(s1);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsedeclarator();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsews();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsebrace_or_equal_initializer();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c450(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parsedeclarator();
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsebase_clause() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 116,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 58) {
                s1 = peg$c21;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsebase_specifier_list();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c451(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsebase_specifier_list() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 120 + 117,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsebase_specifier();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c71;
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c72); }
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parsews();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parsebase_specifier();
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c426(s7);
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsews();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c71;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c72); }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsews();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parsebase_specifier();
                                if (s7 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c426(s7);
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$c0;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c74(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsebase_specifier() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 120 + 118,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c82) {
                s1 = peg$c82;
                peg$currPos += 7;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c83); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseWS();
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = peg$parseaccess_specifier();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseWS();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s3;
                            s4 = peg$c452(s4);
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsequalified_class_name();
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c453(s3, s4);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$currPos;
                s2 = peg$parseaccess_specifier();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseWS();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s1;
                        s2 = peg$c452(s2);
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                }
                if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c82) {
                        s2 = peg$c82;
                        peg$currPos += 7;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c83); }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseWS();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsequalified_class_name();
                            if (s4 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c453(s1, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseaccess_specifier();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseWS();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parsequalified_class_name();
                            if (s3 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c454(s1, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsequalified_class_name();
                        if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c455(s1);
                        }
                        s0 = s1;
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsequalified_class_name() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 120 + 119,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsenested_name_specifier();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsews();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseidentifier();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c456(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseidentifier();
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }


        function composeBinaryOp(first, rest, assoc, exprType){
            assoc = assoc || "left";
            exprType = exprType || "binaryOp";
            if(!rest || rest.length === 0){
                return first;
            }
            if (assoc === "left"){
                var right = rest.pop();
                return {
                    expression: exprType,
                    operator: right[0],
                    left: composeBinaryOp(first, rest, assoc, exprType),
                    right: right[1],
                    associativity: assoc
                }
            }
            else{
                var left = rest.shift();
                return {
                    expression: exprType,
                    operator: left[0],
                    left: first,
                    right: composeBinaryOp(left[1], rest, assoc, exprType),
                    associativity: assoc
                }
            }
        }

        function absorb(eater, eaten){
            if (!eaten){ return eater; }
            for (var attr in eaten){
                if(attr != "start" && attr != "end"){
                    eater[attr] = eaten[attr];
                }
            }
            return eater;
        }

        function track(obj, offset, text, line, column){
            obj.start = offset();
            obj.text = text();
            obj.line = line();
            obj.column = column();
            obj.end = obj.start + obj.text.length;
            return obj;
        }

        function makeArray(obj){
            if (Array.isArray(obj)){
                return obj;
            }
            else{
                return [obj];
            }
        }

        function addImplicitJump(control){
            control.body.push({jump:"implicit"});
            return control;
        }

        function insideOut(obj, sub, result_in){
            sub = sub || "sub";
            var result = result_in || {};
            if (obj[sub]){
                var temp = insideOut(obj[sub], sub, result);
                delete obj[sub];
                temp[sub] = obj;
                return (result_in ? temp.sub : result.sub);
            }
            else{
                // No sub property means last piece
                result.sub = obj
                return obj;
            }
        }

        function postfixExp(ops, sub){
            if(ops.length == 0){
                return sub;
            }
            else{
                var op = ops.pop();
                op.operand = postfixExp(ops, sub);
                return op;
            }
        }

        var vars = {abstract: false};

        function arrayContains(arr, elem){
            return arr.indexOf(elem) != -1;
        }

        var _userTypeNames = {list_t:true, tree_t:true};

        function getUserTypeNames(){
            if (typeof Types !== "undefined"){
                return Types.userTypeNames;
            }
            else{
                return _userTypeNames;
            }
        }

        function isUserTypeName(name){
            return getUserTypeNames()[name];
        }



        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail({ type: "end", description: "end of input" });
            }

            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
    }

    return {
        SyntaxError: SyntaxError,
        parse:       parse
    };
})()